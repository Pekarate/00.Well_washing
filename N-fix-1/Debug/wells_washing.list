
wells_washing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f340  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002380  0800f4d0  0800f4d0  0001f4d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011850  08011850  0003016c  2**0
                  CONTENTS
  4 .ARM          00000008  08011850  08011850  00021850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011858  08011858  0003016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011858  08011858  00021858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801185c  0801185c  0002185c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000016c  20000000  08011860  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003016c  2**0
                  CONTENTS
 10 .bss          000074b4  2000016c  2000016c  0003016c  2**2
                  ALLOC
 11 ._user_heap_stack 0000c000  20007620  20007620  0003016c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003016c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003019c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000211ba  00000000  00000000  000301df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005829  00000000  00000000  00051399  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e58  00000000  00000000  00056bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001792  00000000  00000000  00058a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00027f6d  00000000  00000000  0005a1b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027b23  00000000  00000000  0008211f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d725d  00000000  00000000  000a9c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008610  00000000  00000000  00180ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  001894b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000016c 	.word	0x2000016c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f4b8 	.word	0x0800f4b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000170 	.word	0x20000170
 80001cc:	0800f4b8 	.word	0x0800f4b8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <is_data_init>:

_def_step step;


int is_data_init()
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	if(system_data.flash_data.factory_code != FACTORY_CODE)
 8000570:	4b07      	ldr	r3, [pc, #28]	; (8000590 <is_data_init+0x24>)
 8000572:	f8b3 3fbc 	ldrh.w	r3, [r3, #4028]	; 0xfbc
 8000576:	f243 3233 	movw	r2, #13107	; 0x3333
 800057a:	4293      	cmp	r3, r2
 800057c:	d001      	beq.n	8000582 <is_data_init+0x16>
	{
		return 0;
 800057e:	2300      	movs	r3, #0
 8000580:	e000      	b.n	8000584 <is_data_init+0x18>
	}
	return 1;
 8000582:	2301      	movs	r3, #1
}
 8000584:	4618      	mov	r0, r3
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20000188 	.word	0x20000188

08000594 <dt_calculator_step_type>:

_step_type dt_calculator_step_type(uint8_t wells)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if((wells == 0) || (wells >NUM_MAX_WELL))
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d002      	beq.n	80005aa <dt_calculator_step_type+0x16>
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b06      	cmp	r3, #6
 80005a8:	d901      	bls.n	80005ae <dt_calculator_step_type+0x1a>
		return STEP_TYPE_NONE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	e009      	b.n	80005c2 <dt_calculator_step_type+0x2e>
	switch (wells) {
 80005ae:	79fb      	ldrb	r3, [r7, #7]
 80005b0:	2b05      	cmp	r3, #5
 80005b2:	d003      	beq.n	80005bc <dt_calculator_step_type+0x28>
 80005b4:	2b06      	cmp	r3, #6
 80005b6:	d103      	bne.n	80005c0 <dt_calculator_step_type+0x2c>
		case NUM_MAX_WELL:
			return STEP_TYPE_DRYING;
 80005b8:	2303      	movs	r3, #3
 80005ba:	e002      	b.n	80005c2 <dt_calculator_step_type+0x2e>
			break;
		case (NUM_MAX_WELL-1):
			return STEP_TYPE_WASHING;
 80005bc:	2302      	movs	r3, #2
 80005be:	e000      	b.n	80005c2 <dt_calculator_step_type+0x2e>
			break;
		default:
			return STEP_TYPE_SHAKE;
 80005c0:	2301      	movs	r3, #1
			break;
	}
	return STEP_TYPE_NONE;
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <dt_calculator_pg_stepnumber>:
void dt_calculator_pg_stepnumber(void){
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
	for(int i=0;i<10;i++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	e035      	b.n	8000648 <dt_calculator_pg_stepnumber+0x78>
	{
		system_data.pg_stepnumber[i] =0;
 80005dc:	4a1e      	ldr	r2, [pc, #120]	; (8000658 <dt_calculator_pg_stepnumber+0x88>)
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 80005e4:	2100      	movs	r1, #0
 80005e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j=0;j<25;j++)
 80005ea:	2300      	movs	r3, #0
 80005ec:	603b      	str	r3, [r7, #0]
 80005ee:	e023      	b.n	8000638 <dt_calculator_pg_stepnumber+0x68>
		{
			if(dt_calculator_step_type(system_data.flash_data.Program_para[i][j].wells) == STEP_TYPE_NONE )
 80005f0:	4919      	ldr	r1, [pc, #100]	; (8000658 <dt_calculator_pg_stepnumber+0x88>)
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	4613      	mov	r3, r2
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	4413      	add	r3, r2
 80005fa:	009a      	lsls	r2, r3, #2
 80005fc:	4413      	add	r3, r2
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	4413      	add	r3, r2
 8000602:	011b      	lsls	r3, r3, #4
 8000604:	440b      	add	r3, r1
 8000606:	331c      	adds	r3, #28
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f7ff ffc2 	bl	8000594 <dt_calculator_step_type>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d014      	beq.n	8000640 <dt_calculator_pg_stepnumber+0x70>
			{
				break;
			}
			system_data.pg_stepnumber[i]++;
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <dt_calculator_pg_stepnumber+0x88>)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800061e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000622:	3301      	adds	r3, #1
 8000624:	b299      	uxth	r1, r3
 8000626:	4a0c      	ldr	r2, [pc, #48]	; (8000658 <dt_calculator_pg_stepnumber+0x88>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f503 63fc 	add.w	r3, r3, #2016	; 0x7e0
 800062e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j=0;j<25;j++)
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	3301      	adds	r3, #1
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	2b18      	cmp	r3, #24
 800063c:	ddd8      	ble.n	80005f0 <dt_calculator_pg_stepnumber+0x20>
 800063e:	e000      	b.n	8000642 <dt_calculator_pg_stepnumber+0x72>
				break;
 8000640:	bf00      	nop
	for(int i=0;i<10;i++)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	3301      	adds	r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b09      	cmp	r3, #9
 800064c:	ddc6      	ble.n	80005dc <dt_calculator_pg_stepnumber+0xc>
		}
	}
}
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	20000188 	.word	0x20000188

0800065c <is_step_differrent>:
//			system_data.pg_stepnumber[i]++;
//		}
	}
}

int is_step_differrent(uint8_t pg,uint8_t stepindex ,_def_step step){
 800065c:	b082      	sub	sp, #8
 800065e:	b580      	push	{r7, lr}
 8000660:	b082      	sub	sp, #8
 8000662:	af00      	add	r7, sp, #0
 8000664:	f107 0c10 	add.w	ip, r7, #16
 8000668:	e88c 000c 	stmia.w	ip, {r2, r3}
 800066c:	4603      	mov	r3, r0
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	460b      	mov	r3, r1
 8000672:	71bb      	strb	r3, [r7, #6]
	return memcmp(&system_data.flash_data.Program_para[pg][stepindex], &step, sizeof(_def_step));
 8000674:	79fa      	ldrb	r2, [r7, #7]
 8000676:	79b9      	ldrb	r1, [r7, #6]
 8000678:	4613      	mov	r3, r2
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	4413      	add	r3, r2
 800067e:	009a      	lsls	r2, r3, #2
 8000680:	4413      	add	r3, r2
 8000682:	440b      	add	r3, r1
 8000684:	011b      	lsls	r3, r3, #4
 8000686:	3318      	adds	r3, #24
 8000688:	4a08      	ldr	r2, [pc, #32]	; (80006ac <is_step_differrent+0x50>)
 800068a:	4413      	add	r3, r2
 800068c:	3304      	adds	r3, #4
 800068e:	2210      	movs	r2, #16
 8000690:	f107 0110 	add.w	r1, r7, #16
 8000694:	4618      	mov	r0, r3
 8000696:	f00e f969 	bl	800e96c <memcmp>
 800069a:	4603      	mov	r3, r0
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006a6:	b002      	add	sp, #8
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000188 	.word	0x20000188

080006b0 <dt_Modify_step>:

void dt_Modify_step(uint8_t pg,uint8_t stepindex ,_def_step step)
{
 80006b0:	b082      	sub	sp, #8
 80006b2:	b5b0      	push	{r4, r5, r7, lr}
 80006b4:	b084      	sub	sp, #16
 80006b6:	af02      	add	r7, sp, #8
 80006b8:	f107 0418 	add.w	r4, r7, #24
 80006bc:	e884 000c 	stmia.w	r4, {r2, r3}
 80006c0:	4603      	mov	r3, r0
 80006c2:	71fb      	strb	r3, [r7, #7]
 80006c4:	460b      	mov	r3, r1
 80006c6:	71bb      	strb	r3, [r7, #6]
	if(is_step_differrent(pg,stepindex ,step))
 80006c8:	79bd      	ldrb	r5, [r7, #6]
 80006ca:	79fc      	ldrb	r4, [r7, #7]
 80006cc:	466a      	mov	r2, sp
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80006d6:	e882 0003 	stmia.w	r2, {r0, r1}
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	cb0c      	ldmia	r3, {r2, r3}
 80006e0:	4629      	mov	r1, r5
 80006e2:	4620      	mov	r0, r4
 80006e4:	f7ff ffba 	bl	800065c <is_step_differrent>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d014      	beq.n	8000718 <dt_Modify_step+0x68>
	{
		memcpy(&system_data.flash_data.Program_para[pg][stepindex],&step,sizeof(_def_step));
 80006ee:	79fa      	ldrb	r2, [r7, #7]
 80006f0:	79b9      	ldrb	r1, [r7, #6]
 80006f2:	4613      	mov	r3, r2
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	4413      	add	r3, r2
 80006f8:	009a      	lsls	r2, r3, #2
 80006fa:	4413      	add	r3, r2
 80006fc:	440b      	add	r3, r1
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	3318      	adds	r3, #24
 8000702:	4a09      	ldr	r2, [pc, #36]	; (8000728 <dt_Modify_step+0x78>)
 8000704:	4413      	add	r3, r2
 8000706:	3304      	adds	r3, #4
 8000708:	2210      	movs	r2, #16
 800070a:	f107 0118 	add.w	r1, r7, #24
 800070e:	4618      	mov	r0, r3
 8000710:	f00e f9b6 	bl	800ea80 <memcpy>
		dt_store_system_data();
 8000714:	f000 f834 	bl	8000780 <dt_store_system_data>
	}
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000722:	b002      	add	sp, #8
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000188 	.word	0x20000188

0800072c <dt_system_data_init>:
		return system_data.flash_data.Program_para[pg][stepindex].wells = wellnum;
	return 0;
}

void dt_system_data_init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	read_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS);
 8000730:	4a10      	ldr	r2, [pc, #64]	; (8000774 <dt_system_data_init+0x48>)
 8000732:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8000736:	4810      	ldr	r0, [pc, #64]	; (8000778 <dt_system_data_init+0x4c>)
 8000738:	f000 fe7a 	bl	8001430 <read_flash>
	if(!is_data_init())
 800073c:	f7ff ff16 	bl	800056c <is_data_init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d112      	bne.n	800076c <dt_system_data_init+0x40>
	{
		memcpy(&system_data.flash_data,&flash_defaul,sizeof(_flash_data));
 8000746:	4a0c      	ldr	r2, [pc, #48]	; (8000778 <dt_system_data_init+0x4c>)
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <dt_system_data_init+0x50>)
 800074a:	4610      	mov	r0, r2
 800074c:	4619      	mov	r1, r3
 800074e:	f44f 637c 	mov.w	r3, #4032	; 0xfc0
 8000752:	461a      	mov	r2, r3
 8000754:	f00e f994 	bl	800ea80 <memcpy>
		if(write_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS) != HAL_OK)
 8000758:	4a06      	ldr	r2, [pc, #24]	; (8000774 <dt_system_data_init+0x48>)
 800075a:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 800075e:	4806      	ldr	r0, [pc, #24]	; (8000778 <dt_system_data_init+0x4c>)
 8000760:	f000 fe28 	bl	80013b4 <write_flash>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d000      	beq.n	800076c <dt_system_data_init+0x40>
		{
			//do when write flash fail
			__NOP();
 800076a:	bf00      	nop
		}
	}
	dt_calculator_pg_stepnumber();
 800076c:	f7ff ff30 	bl	80005d0 <dt_calculator_pg_stepnumber>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	08060000 	.word	0x08060000
 8000778:	20000188 	.word	0x20000188
 800077c:	0801083c 	.word	0x0801083c

08000780 <dt_store_system_data>:

HAL_StatusTypeDef dt_store_system_data(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res = write_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS);
 8000786:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <dt_store_system_data+0x30>)
 8000788:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 800078c:	4809      	ldr	r0, [pc, #36]	; (80007b4 <dt_store_system_data+0x34>)
 800078e:	f000 fe11 	bl	80013b4 <write_flash>
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	if( res != HAL_OK){
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d004      	beq.n	80007a6 <dt_store_system_data+0x26>
		printf("wirte flash fail! error code : %d",res);
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <dt_store_system_data+0x38>)
 80007a2:	f00d ff9d 	bl	800e6e0 <iprintf>
	}
	return res;
 80007a6:	79fb      	ldrb	r3, [r7, #7]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	08060000 	.word	0x08060000
 80007b4:	20000188 	.word	0x20000188
 80007b8:	0800f4d0 	.word	0x0800f4d0

080007bc <Dw_write>:
	memset(&s_log,0,sizeof(s_log));
}


static void Dw_write(uint8_t *data,uint16_t len)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	460b      	mov	r3, r1
 80007c6:	807b      	strh	r3, [r7, #2]
	static uint32_t timesend = 0;
	while(HAL_GetTick() <timesend)
 80007c8:	e000      	b.n	80007cc <Dw_write+0x10>
	{
		__NOP();
 80007ca:	bf00      	nop
	while(HAL_GetTick() <timesend)
 80007cc:	f003 ff18 	bl	8004600 <HAL_GetTick>
 80007d0:	4602      	mov	r2, r0
 80007d2:	4b0a      	ldr	r3, [pc, #40]	; (80007fc <Dw_write+0x40>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d3f7      	bcc.n	80007ca <Dw_write+0xe>
	}
	uart_transmit_block(data, len, 1000);
 80007da:	887b      	ldrh	r3, [r7, #2]
 80007dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007e0:	4619      	mov	r1, r3
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f003 fe68 	bl	80044b8 <uart_transmit_block>
	timesend = HAL_GetTick()+10;
 80007e8:	f003 ff0a 	bl	8004600 <HAL_GetTick>
 80007ec:	4603      	mov	r3, r0
 80007ee:	330a      	adds	r3, #10
 80007f0:	4a02      	ldr	r2, [pc, #8]	; (80007fc <Dw_write+0x40>)
 80007f2:	6013      	str	r3, [r2, #0]
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	2000137c 	.word	0x2000137c

08000800 <Dwin_Write_VP>:

	}
}

int Dwin_Write_VP(uint16_t Addr,uint16_t *data,uint16_t len)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b09c      	sub	sp, #112	; 0x70
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	6039      	str	r1, [r7, #0]
 800080a:	80fb      	strh	r3, [r7, #6]
 800080c:	4613      	mov	r3, r2
 800080e:	80bb      	strh	r3, [r7, #4]
	uint8_t DwinBuf[100];
	DwinBuf[0]= 0x5A;
 8000810:	235a      	movs	r3, #90	; 0x5a
 8000812:	723b      	strb	r3, [r7, #8]
	DwinBuf[1]= 0xA5;
 8000814:	23a5      	movs	r3, #165	; 0xa5
 8000816:	727b      	strb	r3, [r7, #9]
	DwinBuf[2]= (len+1)*2 +1;  //
 8000818:	88bb      	ldrh	r3, [r7, #4]
 800081a:	3301      	adds	r3, #1
 800081c:	b2db      	uxtb	r3, r3
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	3301      	adds	r3, #1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	72bb      	strb	r3, [r7, #10]
	DwinBuf[3]= 0x82;
 8000828:	2382      	movs	r3, #130	; 0x82
 800082a:	72fb      	strb	r3, [r7, #11]
	DwinBuf[4]= Addr>>8;
 800082c:	88fb      	ldrh	r3, [r7, #6]
 800082e:	0a1b      	lsrs	r3, r3, #8
 8000830:	b29b      	uxth	r3, r3
 8000832:	b2db      	uxtb	r3, r3
 8000834:	733b      	strb	r3, [r7, #12]
	DwinBuf[5]= Addr;
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	737b      	strb	r3, [r7, #13]
	for(int i=0;i<len;i++)
 800083c:	2300      	movs	r3, #0
 800083e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000840:	e01f      	b.n	8000882 <Dwin_Write_VP+0x82>
	{
		DwinBuf[6+i*2] = data[i]/256;
 8000842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	683a      	ldr	r2, [r7, #0]
 8000848:	4413      	add	r3, r2
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	0a1b      	lsrs	r3, r3, #8
 800084e:	b29a      	uxth	r2, r3
 8000850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000852:	3303      	adds	r3, #3
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	b2d2      	uxtb	r2, r2
 8000858:	3370      	adds	r3, #112	; 0x70
 800085a:	443b      	add	r3, r7
 800085c:	f803 2c68 	strb.w	r2, [r3, #-104]
		DwinBuf[6+i*2+1] = data[i];
 8000860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000862:	005b      	lsls	r3, r3, #1
 8000864:	683a      	ldr	r2, [r7, #0]
 8000866:	4413      	add	r3, r2
 8000868:	881a      	ldrh	r2, [r3, #0]
 800086a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800086c:	3303      	adds	r3, #3
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	3301      	adds	r3, #1
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	3370      	adds	r3, #112	; 0x70
 8000876:	443b      	add	r3, r7
 8000878:	f803 2c68 	strb.w	r2, [r3, #-104]
	for(int i=0;i<len;i++)
 800087c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800087e:	3301      	adds	r3, #1
 8000880:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000882:	88bb      	ldrh	r3, [r7, #4]
 8000884:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000886:	429a      	cmp	r2, r3
 8000888:	dbdb      	blt.n	8000842 <Dwin_Write_VP+0x42>
	}
    len = (len+1)*2 +4;
 800088a:	88bb      	ldrh	r3, [r7, #4]
 800088c:	3303      	adds	r3, #3
 800088e:	b29b      	uxth	r3, r3
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	80bb      	strh	r3, [r7, #4]
    Dw_write(DwinBuf, len);
 8000894:	88ba      	ldrh	r2, [r7, #4]
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff ff8d 	bl	80007bc <Dw_write>
	return 1;
 80008a2:	2301      	movs	r3, #1
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	3770      	adds	r7, #112	; 0x70
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}

080008ac <Dwin_switch_page>:
    len = (len+1)*2 +4;
    Dw_write(DwinBuf, len);
	return 1;
}
void Dwin_switch_page(int page_index)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
	if(page_index != PAGE_INPUT_WELL_ERROR )
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2b0f      	cmp	r3, #15
 80008b8:	d003      	beq.n	80008c2 <Dwin_switch_page+0x16>
		old_setup_page = page_index;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <Dwin_switch_page+0x3c>)
 80008c0:	701a      	strb	r2, [r3, #0]
	uint16_t Buf[2] = {0x5A01,00};
 80008c2:	f645 2301 	movw	r3, #23041	; 0x5a01
 80008c6:	81bb      	strh	r3, [r7, #12]
 80008c8:	2300      	movs	r3, #0
 80008ca:	81fb      	strh	r3, [r7, #14]
	Buf[1] = page_index;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	b29b      	uxth	r3, r3
 80008d0:	81fb      	strh	r3, [r7, #14]
	Dwin_Write_VP(0X0084,Buf,2);
 80008d2:	f107 030c 	add.w	r3, r7, #12
 80008d6:	2202      	movs	r2, #2
 80008d8:	4619      	mov	r1, r3
 80008da:	2084      	movs	r0, #132	; 0x84
 80008dc:	f7ff ff90 	bl	8000800 <Dwin_Write_VP>
}
 80008e0:	bf00      	nop
 80008e2:	3710      	adds	r7, #16
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20001170 	.word	0x20001170

080008ec <Dwin_switch_running_page>:
void Dwin_switch_running_page(uint8_t pg,uint8_t stepnumber)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	460a      	mov	r2, r1
 80008f6:	71fb      	strb	r3, [r7, #7]
 80008f8:	4613      	mov	r3, r2
 80008fa:	71bb      	strb	r3, [r7, #6]
	dw_update_setup_page(pg,stepnumber);
 80008fc:	79ba      	ldrb	r2, [r7, #6]
 80008fe:	79fb      	ldrb	r3, [r7, #7]
 8000900:	4611      	mov	r1, r2
 8000902:	4618      	mov	r0, r3
 8000904:	f000 f89e 	bl	8000a44 <dw_update_setup_page>
	switch (dt_calculator_step_type(system_data.flash_data.Program_para[pg][stepnumber].wells)) {
 8000908:	79fa      	ldrb	r2, [r7, #7]
 800090a:	79b9      	ldrb	r1, [r7, #6]
 800090c:	4821      	ldr	r0, [pc, #132]	; (8000994 <Dwin_switch_running_page+0xa8>)
 800090e:	4613      	mov	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4413      	add	r3, r2
 8000914:	009a      	lsls	r2, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	440b      	add	r3, r1
 800091a:	011b      	lsls	r3, r3, #4
 800091c:	4403      	add	r3, r0
 800091e:	331c      	adds	r3, #28
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f7ff fe36 	bl	8000594 <dt_calculator_step_type>
 8000928:	4603      	mov	r3, r0
 800092a:	2b03      	cmp	r3, #3
 800092c:	d01e      	beq.n	800096c <Dwin_switch_running_page+0x80>
 800092e:	2b03      	cmp	r3, #3
 8000930:	dc28      	bgt.n	8000984 <Dwin_switch_running_page+0x98>
 8000932:	2b01      	cmp	r3, #1
 8000934:	d002      	beq.n	800093c <Dwin_switch_running_page+0x50>
 8000936:	2b02      	cmp	r3, #2
 8000938:	d00c      	beq.n	8000954 <Dwin_switch_running_page+0x68>
		case STEP_TYPE_DRYING:
			Dwin_switch_page(PAGE_RUNNING_STEP_DRYING);
			LOGI(LOG_TAG,"SWITCH TO PAGE_RUNNING_STEP_DRYING");
			break;
		default:
			break;
 800093a:	e023      	b.n	8000984 <Dwin_switch_running_page+0x98>
			Dwin_switch_page(PAGE_RUNNING_STEP_SHAKE);
 800093c:	2009      	movs	r0, #9
 800093e:	f7ff ffb5 	bl	80008ac <Dwin_switch_page>
			LOGI(LOG_TAG,"SWITCH TO PAGE_RUNNING_STEP_SHAKE");
 8000942:	f003 fe5d 	bl	8004600 <HAL_GetTick>
 8000946:	4603      	mov	r3, r0
 8000948:	461a      	mov	r2, r3
 800094a:	4913      	ldr	r1, [pc, #76]	; (8000998 <Dwin_switch_running_page+0xac>)
 800094c:	4813      	ldr	r0, [pc, #76]	; (800099c <Dwin_switch_running_page+0xb0>)
 800094e:	f00d fec7 	bl	800e6e0 <iprintf>
			break;
 8000952:	e018      	b.n	8000986 <Dwin_switch_running_page+0x9a>
			Dwin_switch_page(PAGE_RUNNING_STEP_WASHING);
 8000954:	200a      	movs	r0, #10
 8000956:	f7ff ffa9 	bl	80008ac <Dwin_switch_page>
			LOGI(LOG_TAG,"SWITCH TO PAGE_RUNNING_STEP_WASHING");
 800095a:	f003 fe51 	bl	8004600 <HAL_GetTick>
 800095e:	4603      	mov	r3, r0
 8000960:	461a      	mov	r2, r3
 8000962:	490d      	ldr	r1, [pc, #52]	; (8000998 <Dwin_switch_running_page+0xac>)
 8000964:	480e      	ldr	r0, [pc, #56]	; (80009a0 <Dwin_switch_running_page+0xb4>)
 8000966:	f00d febb 	bl	800e6e0 <iprintf>
			break;
 800096a:	e00c      	b.n	8000986 <Dwin_switch_running_page+0x9a>
			Dwin_switch_page(PAGE_RUNNING_STEP_DRYING);
 800096c:	200b      	movs	r0, #11
 800096e:	f7ff ff9d 	bl	80008ac <Dwin_switch_page>
			LOGI(LOG_TAG,"SWITCH TO PAGE_RUNNING_STEP_DRYING");
 8000972:	f003 fe45 	bl	8004600 <HAL_GetTick>
 8000976:	4603      	mov	r3, r0
 8000978:	461a      	mov	r2, r3
 800097a:	4907      	ldr	r1, [pc, #28]	; (8000998 <Dwin_switch_running_page+0xac>)
 800097c:	4809      	ldr	r0, [pc, #36]	; (80009a4 <Dwin_switch_running_page+0xb8>)
 800097e:	f00d feaf 	bl	800e6e0 <iprintf>
			break;
 8000982:	e000      	b.n	8000986 <Dwin_switch_running_page+0x9a>
			break;
 8000984:	bf00      	nop
	}
	__NOP();
 8000986:	bf00      	nop
	__NOP();
 8000988:	bf00      	nop

}
 800098a:	bf00      	nop
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20000188 	.word	0x20000188
 8000998:	0800f500 	.word	0x0800f500
 800099c:	0800f508 	.word	0x0800f508
 80009a0:	0800f544 	.word	0x0800f544
 80009a4:	0800f580 	.word	0x0800f580

080009a8 <Dwin_init>:

void Dwin_init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	Dwin_reset();
 80009ac:	f000 f812 	bl	80009d4 <Dwin_reset>
	HAL_Delay(1000);
 80009b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009b4:	f003 fe30 	bl	8004618 <HAL_Delay>
	Dwin_switch_page(HMI_START_PAGE);
 80009b8:	2000      	movs	r0, #0
 80009ba:	f7ff ff77 	bl	80008ac <Dwin_switch_page>
	memset(&s_log,0,sizeof(s_log));
 80009be:	f240 2206 	movw	r2, #518	; 0x206
 80009c2:	2100      	movs	r1, #0
 80009c4:	4802      	ldr	r0, [pc, #8]	; (80009d0 <Dwin_init+0x28>)
 80009c6:	f00d ffe1 	bl	800e98c <memset>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20001174 	.word	0x20001174

080009d4 <Dwin_reset>:


void Dwin_reset(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
	uint16_t Buf[2] = {0x55AA,0x5AA5};
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <Dwin_reset+0x20>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	607b      	str	r3, [r7, #4]
	Dwin_Write_VP(0X0004,Buf,2);
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2202      	movs	r2, #2
 80009e4:	4619      	mov	r1, r3
 80009e6:	2004      	movs	r0, #4
 80009e8:	f7ff ff0a 	bl	8000800 <Dwin_Write_VP>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	0800f5bc 	.word	0x0800f5bc

080009f8 <dw_get_well_number>:
int dw_get_well_number(uint8_t index_pg,uint8_t index_stepnumber)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	460a      	mov	r2, r1
 8000a02:	71fb      	strb	r3, [r7, #7]
 8000a04:	4613      	mov	r3, r2
 8000a06:	71bb      	strb	r3, [r7, #6]
	if((index_pg >= MAX_PROGRAM_NUM ) || (index_stepnumber >=MAX_STEP_NUM)){
 8000a08:	79fb      	ldrb	r3, [r7, #7]
 8000a0a:	2b09      	cmp	r3, #9
 8000a0c:	d802      	bhi.n	8000a14 <dw_get_well_number+0x1c>
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	2b18      	cmp	r3, #24
 8000a12:	d901      	bls.n	8000a18 <dw_get_well_number+0x20>
				return 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	e00c      	b.n	8000a32 <dw_get_well_number+0x3a>
	}
	return system_data.flash_data.Program_para[index_pg][index_stepnumber].wells;
 8000a18:	79fa      	ldrb	r2, [r7, #7]
 8000a1a:	79b9      	ldrb	r1, [r7, #6]
 8000a1c:	4808      	ldr	r0, [pc, #32]	; (8000a40 <dw_get_well_number+0x48>)
 8000a1e:	4613      	mov	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	4413      	add	r3, r2
 8000a24:	009a      	lsls	r2, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	440b      	add	r3, r1
 8000a2a:	011b      	lsls	r3, r3, #4
 8000a2c:	4403      	add	r3, r0
 8000a2e:	331c      	adds	r3, #28
 8000a30:	781b      	ldrb	r3, [r3, #0]
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	20000188 	.word	0x20000188

08000a44 <dw_update_setup_page>:
int dw_update_setup_page(uint8_t pg,uint8_t index_stepnumber){
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b08b      	sub	sp, #44	; 0x2c
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	71fb      	strb	r3, [r7, #7]
 8000a50:	4613      	mov	r3, r2
 8000a52:	71bb      	strb	r3, [r7, #6]
	if((pg >= MAX_PROGRAM_NUM ) || (index_stepnumber >=MAX_STEP_NUM)){
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	2b09      	cmp	r3, #9
 8000a58:	d802      	bhi.n	8000a60 <dw_update_setup_page+0x1c>
 8000a5a:	79bb      	ldrb	r3, [r7, #6]
 8000a5c:	2b18      	cmp	r3, #24
 8000a5e:	d902      	bls.n	8000a66 <dw_update_setup_page+0x22>
			return -1;
 8000a60:	f04f 33ff 	mov.w	r3, #4294967295
 8000a64:	e05e      	b.n	8000b24 <dw_update_setup_page+0xe0>
	}
	uint16_t data[13];

	data[0] = pg+1;
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	813b      	strh	r3, [r7, #8]
	data[1] = index_stepnumber+1;
 8000a70:	79bb      	ldrb	r3, [r7, #6]
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	3301      	adds	r3, #1
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	817b      	strh	r3, [r7, #10]
	data[2] = dt_calculator_step_type(system_data.flash_data.Program_para[pg][index_stepnumber].wells); //not use
 8000a7a:	79fa      	ldrb	r2, [r7, #7]
 8000a7c:	79b9      	ldrb	r1, [r7, #6]
 8000a7e:	482b      	ldr	r0, [pc, #172]	; (8000b2c <dw_update_setup_page+0xe8>)
 8000a80:	4613      	mov	r3, r2
 8000a82:	009b      	lsls	r3, r3, #2
 8000a84:	4413      	add	r3, r2
 8000a86:	009a      	lsls	r2, r3, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	440b      	add	r3, r1
 8000a8c:	011b      	lsls	r3, r3, #4
 8000a8e:	4403      	add	r3, r0
 8000a90:	331c      	adds	r3, #28
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4618      	mov	r0, r3
 8000a96:	f7ff fd7d 	bl	8000594 <dt_calculator_step_type>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	81bb      	strh	r3, [r7, #12]
	data[3] = dw_get_well_number(pg,index_stepnumber);
 8000aa0:	79ba      	ldrb	r2, [r7, #6]
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	4611      	mov	r1, r2
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f7ff ffa6 	bl	80009f8 <dw_get_well_number>
 8000aac:	4603      	mov	r3, r0
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	81fb      	strh	r3, [r7, #14]
	if((data[3] > NUM_MAX_WELL) )
 8000ab2:	89fb      	ldrh	r3, [r7, #14]
 8000ab4:	2b06      	cmp	r3, #6
 8000ab6:	d901      	bls.n	8000abc <dw_update_setup_page+0x78>
		data[3] = 1;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	81fb      	strh	r3, [r7, #14]
	for(int i=4;i<11;i++)
 8000abc:	2304      	movs	r3, #4
 8000abe:	627b      	str	r3, [r7, #36]	; 0x24
 8000ac0:	e019      	b.n	8000af6 <dw_update_setup_page+0xb2>
	{
		data[i] = system_data.flash_data.Program_para[pg][index_stepnumber].timing[i-4];
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	79b8      	ldrb	r0, [r7, #6]
 8000ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ac8:	1f19      	subs	r1, r3, #4
 8000aca:	4c18      	ldr	r4, [pc, #96]	; (8000b2c <dw_update_setup_page+0xe8>)
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	009a      	lsls	r2, r3, #2
 8000ad4:	4413      	add	r3, r2
 8000ad6:	4403      	add	r3, r0
 8000ad8:	00db      	lsls	r3, r3, #3
 8000ada:	440b      	add	r3, r1
 8000adc:	330c      	adds	r3, #12
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4423      	add	r3, r4
 8000ae2:	88da      	ldrh	r2, [r3, #6]
 8000ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	3328      	adds	r3, #40	; 0x28
 8000aea:	443b      	add	r3, r7
 8000aec:	f823 2c20 	strh.w	r2, [r3, #-32]
	for(int i=4;i<11;i++)
 8000af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af2:	3301      	adds	r3, #1
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
 8000af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000af8:	2b0a      	cmp	r3, #10
 8000afa:	dde2      	ble.n	8000ac2 <dw_update_setup_page+0x7e>
	}
	data[11] = dw_get_well_number(pg,index_stepnumber+1);
 8000afc:	79bb      	ldrb	r3, [r7, #6]
 8000afe:	3301      	adds	r3, #1
 8000b00:	b2da      	uxtb	r2, r3
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4611      	mov	r1, r2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff ff76 	bl	80009f8 <dw_get_well_number>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	83fb      	strh	r3, [r7, #30]
	Dwin_Write_VP(VP_SETUP_PARA,data,12);
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	220c      	movs	r2, #12
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8000b1e:	f7ff fe6f 	bl	8000800 <Dwin_Write_VP>
	return 1;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	372c      	adds	r7, #44	; 0x2c
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	20000188 	.word	0x20000188

08000b30 <show_user_page>:

void show_user_page(){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	Dwin_switch_page(PAGE_SETUP_USER_CTL);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f7ff feb9 	bl	80008ac <Dwin_switch_page>
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <show_setup_page>:
void show_setup_page(uint8_t pg,uint8_t index_stepnumber){
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b082      	sub	sp, #8
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	460a      	mov	r2, r1
 8000b4a:	71fb      	strb	r3, [r7, #7]
 8000b4c:	4613      	mov	r3, r2
 8000b4e:	71bb      	strb	r3, [r7, #6]
	if((pg >= MAX_PROGRAM_NUM ) || (index_stepnumber >=MAX_STEP_NUM)){
 8000b50:	79fb      	ldrb	r3, [r7, #7]
 8000b52:	2b09      	cmp	r3, #9
 8000b54:	d81b      	bhi.n	8000b8e <show_setup_page+0x4e>
 8000b56:	79bb      	ldrb	r3, [r7, #6]
 8000b58:	2b18      	cmp	r3, #24
 8000b5a:	d818      	bhi.n	8000b8e <show_setup_page+0x4e>
		return;
	}
	Update_color(pg,index_stepnumber,system_data.flash_data.Program_para[pg][index_stepnumber].wells);
 8000b5c:	79fa      	ldrb	r2, [r7, #7]
 8000b5e:	79b9      	ldrb	r1, [r7, #6]
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <show_setup_page+0x58>)
 8000b62:	4613      	mov	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	4413      	add	r3, r2
 8000b68:	009a      	lsls	r2, r3, #2
 8000b6a:	4413      	add	r3, r2
 8000b6c:	440b      	add	r3, r1
 8000b6e:	011b      	lsls	r3, r3, #4
 8000b70:	4403      	add	r3, r0
 8000b72:	331c      	adds	r3, #28
 8000b74:	781a      	ldrb	r2, [r3, #0]
 8000b76:	79b9      	ldrb	r1, [r7, #6]
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f000 f882 	bl	8000c84 <Update_color>
	dw_update_setup_page(pg,index_stepnumber);
 8000b80:	79ba      	ldrb	r2, [r7, #6]
 8000b82:	79fb      	ldrb	r3, [r7, #7]
 8000b84:	4611      	mov	r1, r2
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff5c 	bl	8000a44 <dw_update_setup_page>
 8000b8c:	e000      	b.n	8000b90 <show_setup_page+0x50>
		return;
 8000b8e:	bf00      	nop
}
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000188 	.word	0x20000188

08000b9c <dwin_update_step>:
//                 2F  FF      2F FF   30  00
//                                  8      10  11  12  13 14  15  16
//{5A}{A5}{18}{83}{3A}{00}{0A}{00}{00}{00}{01}{00}{01}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}
void dwin_update_step(uint8_t *data){
 8000b9c:	b5b0      	push	{r4, r5, r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af02      	add	r7, sp, #8
 8000ba2:	6078      	str	r0, [r7, #4]
	_def_step step;
	uint8_t pg = data[8]; // 0x3000
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	7a1b      	ldrb	r3, [r3, #8]
 8000ba8:	76fb      	strb	r3, [r7, #27]
	uint8_t stepindex = data[10]; // 0x3001
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	7a9b      	ldrb	r3, [r3, #10]
 8000bae:	76bb      	strb	r3, [r7, #26]
	step.wells =data[14];
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7b9b      	ldrb	r3, [r3, #14]
 8000bb4:	723b      	strb	r3, [r7, #8]
	for(int i=0;i<7;i++){
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	e01c      	b.n	8000bf6 <dwin_update_step+0x5a>
		step.timing[i] = (uint16_t)data[15+i*2]*256 + data[16+i*2];
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	330f      	adds	r3, #15
 8000bc2:	461a      	mov	r2, r3
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4413      	add	r3, r2
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b29b      	uxth	r3, r3
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	b29a      	uxth	r2, r3
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	3308      	adds	r3, #8
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	440b      	add	r3, r1
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	4413      	add	r3, r2
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	69fb      	ldr	r3, [r7, #28]
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	3320      	adds	r3, #32
 8000bea:	443b      	add	r3, r7
 8000bec:	f823 2c16 	strh.w	r2, [r3, #-22]
	for(int i=0;i<7;i++){
 8000bf0:	69fb      	ldr	r3, [r7, #28]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	61fb      	str	r3, [r7, #28]
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	2b06      	cmp	r3, #6
 8000bfa:	dddf      	ble.n	8000bbc <dwin_update_step+0x20>
	}
	dt_Modify_step(pg-1, stepindex-1, step);
 8000bfc:	7efb      	ldrb	r3, [r7, #27]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	b2dc      	uxtb	r4, r3
 8000c02:	7ebb      	ldrb	r3, [r7, #26]
 8000c04:	3b01      	subs	r3, #1
 8000c06:	b2dd      	uxtb	r5, r3
 8000c08:	466a      	mov	r2, sp
 8000c0a:	f107 0310 	add.w	r3, r7, #16
 8000c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000c12:	e882 0003 	stmia.w	r2, {r0, r1}
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	cb0c      	ldmia	r3, {r2, r3}
 8000c1c:	4629      	mov	r1, r5
 8000c1e:	4620      	mov	r0, r4
 8000c20:	f7ff fd46 	bl	80006b0 <dt_Modify_step>
}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bdb0      	pop	{r4, r5, r7, pc}

08000c2c <dwin_start_program>:

void dwin_start_program(uint8_t pg){
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]

	uint8_t index_pg = pg-1;
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	73fb      	strb	r3, [r7, #15]
	if(index_pg < MAX_PROGRAM_NUM){
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b09      	cmp	r3, #9
 8000c40:	d80d      	bhi.n	8000c5e <dwin_start_program+0x32>
		LOGI(LOG_TAG,"Request start program index: %d",index_pg);
 8000c42:	f003 fcdd 	bl	8004600 <HAL_GetTick>
 8000c46:	4602      	mov	r2, r0
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	490b      	ldr	r1, [pc, #44]	; (8000c78 <dwin_start_program+0x4c>)
 8000c4c:	480b      	ldr	r0, [pc, #44]	; (8000c7c <dwin_start_program+0x50>)
 8000c4e:	f00d fd47 	bl	800e6e0 <iprintf>
		pg_start(index_pg, 0);
 8000c52:	7bfb      	ldrb	r3, [r7, #15]
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f001 fcec 	bl	8002634 <pg_start>
		LOGE(LOG_TAG,"Request start fail pg: %d",pg);
	}

//	s_log_add_1_line(tmp);
//	Dwin_Write_VP_String(0x3800,s_log.log, s_log.s_size);
}
 8000c5c:	e007      	b.n	8000c6e <dwin_start_program+0x42>
		LOGE(LOG_TAG,"Request start fail pg: %d",pg);
 8000c5e:	f003 fccf 	bl	8004600 <HAL_GetTick>
 8000c62:	4602      	mov	r2, r0
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4904      	ldr	r1, [pc, #16]	; (8000c78 <dwin_start_program+0x4c>)
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <dwin_start_program+0x54>)
 8000c6a:	f00d fd39 	bl	800e6e0 <iprintf>
}
 8000c6e:	bf00      	nop
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	0800f500 	.word	0x0800f500
 8000c7c:	0800f5c0 	.word	0x0800f5c0
 8000c80:	0800f5f8 	.word	0x0800f5f8

08000c84 <Update_color>:
void dwin_stop_program(void){


}
void Update_color(uint8_t pg,uint8_t index_stepnumber,uint8_t well)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	71fb      	strb	r3, [r7, #7]
 8000c8e:	460b      	mov	r3, r1
 8000c90:	71bb      	strb	r3, [r7, #6]
 8000c92:	4613      	mov	r3, r2
 8000c94:	717b      	strb	r3, [r7, #5]
	switch(dt_calculator_step_type(well)){
 8000c96:	797b      	ldrb	r3, [r7, #5]
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fc7b 	bl	8000594 <dt_calculator_step_type>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d002      	beq.n	8000caa <Update_color+0x26>
 8000ca4:	2b03      	cmp	r3, #3
 8000ca6:	d050      	beq.n	8000d4a <Update_color+0xc6>
 8000ca8:	e079      	b.n	8000d9e <Update_color+0x11a>
		case (STEP_TYPE_WASHING):
				Dwin_switch_page(PAGE_SETUP_STEP_WASHING);
 8000caa:	2007      	movs	r0, #7
 8000cac:	f7ff fdfe 	bl	80008ac <Dwin_switch_page>
				if(system_data.flash_data.Program_para[pg][index_stepnumber].timing[1]) {
 8000cb0:	79fa      	ldrb	r2, [r7, #7]
 8000cb2:	79b9      	ldrb	r1, [r7, #6]
 8000cb4:	483e      	ldr	r0, [pc, #248]	; (8000db0 <Update_color+0x12c>)
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	4413      	add	r3, r2
 8000cbc:	009a      	lsls	r2, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	011b      	lsls	r3, r3, #4
 8000cc4:	4403      	add	r3, r0
 8000cc6:	3320      	adds	r3, #32
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d00b      	beq.n	8000ce6 <Update_color+0x62>
					dwin_change_color_sp(0x7000,DWIN_COLOR_BLACK);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8000cd4:	f000 faea 	bl	80012ac <dwin_change_color_sp>
					dwin_change_color_sp(0x7010,DWIN_COLOR_RED);
 8000cd8:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000cdc:	f247 0010 	movw	r0, #28688	; 0x7010
 8000ce0:	f000 fae4 	bl	80012ac <dwin_change_color_sp>
 8000ce4:	e00a      	b.n	8000cfc <Update_color+0x78>
				}
				else {
					dwin_change_color_sp(0x7000,DWIN_COLOR_RED);
 8000ce6:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000cea:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8000cee:	f000 fadd 	bl	80012ac <dwin_change_color_sp>
					dwin_change_color_sp(0x7010,DWIN_COLOR_BLACK);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	f247 0010 	movw	r0, #28688	; 0x7010
 8000cf8:	f000 fad8 	bl	80012ac <dwin_change_color_sp>
				}
				if(system_data.flash_data.Program_para[pg][index_stepnumber].timing[5]) {
 8000cfc:	79fa      	ldrb	r2, [r7, #7]
 8000cfe:	79b9      	ldrb	r1, [r7, #6]
 8000d00:	482b      	ldr	r0, [pc, #172]	; (8000db0 <Update_color+0x12c>)
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	009a      	lsls	r2, r3, #2
 8000d0a:	4413      	add	r3, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	011b      	lsls	r3, r3, #4
 8000d10:	4403      	add	r3, r0
 8000d12:	3328      	adds	r3, #40	; 0x28
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d00b      	beq.n	8000d32 <Update_color+0xae>
					dwin_change_color_sp(0x7020,DWIN_COLOR_BLACK);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f247 0020 	movw	r0, #28704	; 0x7020
 8000d20:	f000 fac4 	bl	80012ac <dwin_change_color_sp>
					dwin_change_color_sp(0x7030,DWIN_COLOR_RED);
 8000d24:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000d28:	f247 0030 	movw	r0, #28720	; 0x7030
 8000d2c:	f000 fabe 	bl	80012ac <dwin_change_color_sp>
				}
				else {
					dwin_change_color_sp(0x7020,DWIN_COLOR_RED);
					dwin_change_color_sp(0x7030,DWIN_COLOR_BLACK);
				}
				break;
 8000d30:	e039      	b.n	8000da6 <Update_color+0x122>
					dwin_change_color_sp(0x7020,DWIN_COLOR_RED);
 8000d32:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000d36:	f247 0020 	movw	r0, #28704	; 0x7020
 8000d3a:	f000 fab7 	bl	80012ac <dwin_change_color_sp>
					dwin_change_color_sp(0x7030,DWIN_COLOR_BLACK);
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f247 0030 	movw	r0, #28720	; 0x7030
 8000d44:	f000 fab2 	bl	80012ac <dwin_change_color_sp>
				break;
 8000d48:	e02d      	b.n	8000da6 <Update_color+0x122>
		case (STEP_TYPE_DRYING):
				Dwin_switch_page(PAGE_SETUP_STEP_DRYING);
 8000d4a:	2008      	movs	r0, #8
 8000d4c:	f7ff fdae 	bl	80008ac <Dwin_switch_page>
				if(system_data.flash_data.Program_para[pg][index_stepnumber].timing[0]) {
 8000d50:	79fa      	ldrb	r2, [r7, #7]
 8000d52:	79b9      	ldrb	r1, [r7, #6]
 8000d54:	4816      	ldr	r0, [pc, #88]	; (8000db0 <Update_color+0x12c>)
 8000d56:	4613      	mov	r3, r2
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	4413      	add	r3, r2
 8000d5c:	009a      	lsls	r2, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	440b      	add	r3, r1
 8000d62:	011b      	lsls	r3, r3, #4
 8000d64:	4403      	add	r3, r0
 8000d66:	331e      	adds	r3, #30
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d00b      	beq.n	8000d86 <Update_color+0x102>
					dwin_change_color_sp(0x7000,DWIN_COLOR_BLACK);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8000d74:	f000 fa9a 	bl	80012ac <dwin_change_color_sp>
					dwin_change_color_sp(0x7010,DWIN_COLOR_RED);
 8000d78:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000d7c:	f247 0010 	movw	r0, #28688	; 0x7010
 8000d80:	f000 fa94 	bl	80012ac <dwin_change_color_sp>
				}
				else {
					dwin_change_color_sp(0x7000,DWIN_COLOR_RED);
					dwin_change_color_sp(0x7010,DWIN_COLOR_BLACK);
				}
				break;
 8000d84:	e00f      	b.n	8000da6 <Update_color+0x122>
					dwin_change_color_sp(0x7000,DWIN_COLOR_RED);
 8000d86:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8000d8a:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8000d8e:	f000 fa8d 	bl	80012ac <dwin_change_color_sp>
					dwin_change_color_sp(0x7010,DWIN_COLOR_BLACK);
 8000d92:	2100      	movs	r1, #0
 8000d94:	f247 0010 	movw	r0, #28688	; 0x7010
 8000d98:	f000 fa88 	bl	80012ac <dwin_change_color_sp>
				break;
 8000d9c:	e003      	b.n	8000da6 <Update_color+0x122>
		default:
				Dwin_switch_page(PAGE_SETUP_STEP_SHAKE);
 8000d9e:	2006      	movs	r0, #6
 8000da0:	f7ff fd84 	bl	80008ac <Dwin_switch_page>
			break;
 8000da4:	bf00      	nop
	}
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000188 	.word	0x20000188

08000db4 <dw_return_previous_page>:


void dw_return_previous_page(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
	uint16_t well_tmp=1;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	80fb      	strh	r3, [r7, #6]
	switch (old_setup_page) {
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <dw_return_previous_page+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b07      	cmp	r3, #7
 8000dc4:	d004      	beq.n	8000dd0 <dw_return_previous_page+0x1c>
 8000dc6:	2b08      	cmp	r3, #8
 8000dc8:	d105      	bne.n	8000dd6 <dw_return_previous_page+0x22>
		case PAGE_SETUP_STEP_DRYING:
			well_tmp = NUM_MAX_WELL;
 8000dca:	2306      	movs	r3, #6
 8000dcc:	80fb      	strh	r3, [r7, #6]
			break;
 8000dce:	e003      	b.n	8000dd8 <dw_return_previous_page+0x24>
		case PAGE_SETUP_STEP_WASHING:
			well_tmp = NUM_MAX_WELL -1;
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	80fb      	strh	r3, [r7, #6]
			break;
 8000dd4:	e000      	b.n	8000dd8 <dw_return_previous_page+0x24>
		default:
			break;
 8000dd6:	bf00      	nop
	}
	Dwin_Write_VP(VP_WELLS_ADDR,&well_tmp,1);
 8000dd8:	1dbb      	adds	r3, r7, #6
 8000dda:	2201      	movs	r2, #1
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f243 0003 	movw	r0, #12291	; 0x3003
 8000de2:	f7ff fd0d 	bl	8000800 <Dwin_Write_VP>
	Dwin_switch_page(old_setup_page);
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <dw_return_previous_page+0x44>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff fd5e 	bl	80008ac <Dwin_switch_page>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20001170 	.word	0x20001170

08000dfc <dwin_change_target_well>:
static uint8_t current_pg_setup;
static uint8_t current_step_setup;

void dwin_change_target_well(uint8_t well){
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	if(well> NUM_MAX_WELL || well == 0 )
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	2b06      	cmp	r3, #6
 8000e0a:	d802      	bhi.n	8000e12 <dwin_change_target_well+0x16>
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10b      	bne.n	8000e2a <dwin_change_target_well+0x2e>
	{
//		well = NUM_MAX_WELL;
//		uint16_t wells = well;
//		Dwin_Write_VP(VP_WELLS_ADDR, &wells, 1);
		LOGE(LOG_TAG,"input target well error: %d",well);
 8000e12:	f003 fbf5 	bl	8004600 <HAL_GetTick>
 8000e16:	4602      	mov	r2, r0
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	4916      	ldr	r1, [pc, #88]	; (8000e74 <dwin_change_target_well+0x78>)
 8000e1c:	4816      	ldr	r0, [pc, #88]	; (8000e78 <dwin_change_target_well+0x7c>)
 8000e1e:	f00d fc5f 	bl	800e6e0 <iprintf>
		Dwin_switch_page(PAGE_INPUT_WELL_ERROR);
 8000e22:	200f      	movs	r0, #15
 8000e24:	f7ff fd42 	bl	80008ac <Dwin_switch_page>
		return;
 8000e28:	e020      	b.n	8000e6c <dwin_change_target_well+0x70>
	}
	uint8_t target_page = PAGE_SETUP_STEP_SHAKE;
 8000e2a:	2306      	movs	r3, #6
 8000e2c:	73fb      	strb	r3, [r7, #15]
	switch (well) {
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	2b05      	cmp	r3, #5
 8000e32:	d002      	beq.n	8000e3a <dwin_change_target_well+0x3e>
 8000e34:	2b06      	cmp	r3, #6
 8000e36:	d003      	beq.n	8000e40 <dwin_change_target_well+0x44>
 8000e38:	e005      	b.n	8000e46 <dwin_change_target_well+0x4a>
		case (NUM_MAX_WELL-1):
			target_page = PAGE_SETUP_STEP_WASHING;
 8000e3a:	2307      	movs	r3, #7
 8000e3c:	73fb      	strb	r3, [r7, #15]
			break;
 8000e3e:	e005      	b.n	8000e4c <dwin_change_target_well+0x50>
		case NUM_MAX_WELL:
			target_page = PAGE_SETUP_STEP_DRYING;
 8000e40:	2308      	movs	r3, #8
 8000e42:	73fb      	strb	r3, [r7, #15]
			break;
 8000e44:	e002      	b.n	8000e4c <dwin_change_target_well+0x50>
		default:
			target_page = PAGE_SETUP_STEP_SHAKE;
 8000e46:	2306      	movs	r3, #6
 8000e48:	73fb      	strb	r3, [r7, #15]
			break;
 8000e4a:	bf00      	nop
	}
	Update_color(current_pg_setup-1,current_step_setup -1,well);
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	; (8000e7c <dwin_change_target_well+0x80>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	b2d8      	uxtb	r0, r3
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <dwin_change_target_well+0x84>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	3b01      	subs	r3, #1
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	79fa      	ldrb	r2, [r7, #7]
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f7ff ff10 	bl	8000c84 <Update_color>
	Dwin_switch_page(target_page);
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff fd20 	bl	80008ac <Dwin_switch_page>
}
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	0800f500 	.word	0x0800f500
 8000e78:	0800f62c 	.word	0x0800f62c
 8000e7c:	2000137a 	.word	0x2000137a
 8000e80:	2000137b 	.word	0x2000137b

08000e84 <dw_process_rx_buffer>:

int dw_process_rx_buffer(uint8_t *data,uint16_t size){ //USART_CR2_TOEN
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]

	if(size < 5){
 8000e90:	887b      	ldrh	r3, [r7, #2]
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	d802      	bhi.n	8000e9c <dw_process_rx_buffer+0x18>
		return -1;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e1a9      	b.n	80011f0 <dw_process_rx_buffer+0x36c>
	}
	if(data[0] != 0x5A && data[1] != 0xA5 ){
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	2b5a      	cmp	r3, #90	; 0x5a
 8000ea2:	d007      	beq.n	8000eb4 <dw_process_rx_buffer+0x30>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2ba5      	cmp	r3, #165	; 0xa5
 8000eac:	d002      	beq.n	8000eb4 <dw_process_rx_buffer+0x30>
		return -2;
 8000eae:	f06f 0301 	mvn.w	r3, #1
 8000eb2:	e19d      	b.n	80011f0 <dw_process_rx_buffer+0x36c>
	}
	uint16_t code = data[4];
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3304      	adds	r3, #4
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	81fb      	strh	r3, [r7, #14]
	code = code*256+ data[5];
 8000ebc:	89fb      	ldrh	r3, [r7, #14]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b29a      	uxth	r2, r3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3305      	adds	r3, #5
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	4413      	add	r3, r2
 8000ecc:	81fb      	strh	r3, [r7, #14]
	uint16_t value;
	switch (code) {
 8000ece:	89fb      	ldrh	r3, [r7, #14]
 8000ed0:	f5b3 4f82 	cmp.w	r3, #16640	; 0x4100
 8000ed4:	f000 8185 	beq.w	80011e2 <dw_process_rx_buffer+0x35e>
 8000ed8:	f5b3 4f82 	cmp.w	r3, #16640	; 0x4100
 8000edc:	f300 8184 	bgt.w	80011e8 <dw_process_rx_buffer+0x364>
 8000ee0:	f244 0202 	movw	r2, #16386	; 0x4002
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	f000 816a 	beq.w	80011be <dw_process_rx_buffer+0x33a>
 8000eea:	f244 0202 	movw	r2, #16386	; 0x4002
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	f300 817a 	bgt.w	80011e8 <dw_process_rx_buffer+0x364>
 8000ef4:	f244 0201 	movw	r2, #16385	; 0x4001
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	f000 815d 	beq.w	80011b8 <dw_process_rx_buffer+0x334>
 8000efe:	f244 0201 	movw	r2, #16385	; 0x4001
 8000f02:	4293      	cmp	r3, r2
 8000f04:	f300 8170 	bgt.w	80011e8 <dw_process_rx_buffer+0x364>
 8000f08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f0c:	f000 814d 	beq.w	80011aa <dw_process_rx_buffer+0x326>
 8000f10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000f14:	f300 8168 	bgt.w	80011e8 <dw_process_rx_buffer+0x364>
 8000f18:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 8000f1c:	f000 80f1 	beq.w	8001102 <dw_process_rx_buffer+0x27e>
 8000f20:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 8000f24:	f300 8160 	bgt.w	80011e8 <dw_process_rx_buffer+0x364>
 8000f28:	f243 1201 	movw	r2, #12545	; 0x3101
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	f000 80e4 	beq.w	80010fa <dw_process_rx_buffer+0x276>
 8000f32:	f243 1201 	movw	r2, #12545	; 0x3101
 8000f36:	4293      	cmp	r3, r2
 8000f38:	f300 8156 	bgt.w	80011e8 <dw_process_rx_buffer+0x364>
 8000f3c:	f243 0209 	movw	r2, #12297	; 0x3009
 8000f40:	4293      	cmp	r3, r2
 8000f42:	f300 8151 	bgt.w	80011e8 <dw_process_rx_buffer+0x364>
 8000f46:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000f4a:	da30      	bge.n	8000fae <dw_process_rx_buffer+0x12a>
 8000f4c:	f242 5201 	movw	r2, #9473	; 0x2501
 8000f50:	4293      	cmp	r3, r2
 8000f52:	f000 8126 	beq.w	80011a2 <dw_process_rx_buffer+0x31e>
 8000f56:	f242 5201 	movw	r2, #9473	; 0x2501
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	f300 8144 	bgt.w	80011e8 <dw_process_rx_buffer+0x364>
 8000f60:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 8000f64:	f000 8119 	beq.w	800119a <dw_process_rx_buffer+0x316>
 8000f68:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 8000f6c:	f300 813c 	bgt.w	80011e8 <dw_process_rx_buffer+0x364>
 8000f70:	f242 3205 	movw	r2, #8965	; 0x2305
 8000f74:	4293      	cmp	r3, r2
 8000f76:	f000 80ec 	beq.w	8001152 <dw_process_rx_buffer+0x2ce>
 8000f7a:	f242 3205 	movw	r2, #8965	; 0x2305
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	f300 8132 	bgt.w	80011e8 <dw_process_rx_buffer+0x364>
 8000f84:	f242 3204 	movw	r2, #8964	; 0x2304
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	f000 80f4 	beq.w	8001176 <dw_process_rx_buffer+0x2f2>
 8000f8e:	f242 3204 	movw	r2, #8964	; 0x2304
 8000f92:	4293      	cmp	r3, r2
 8000f94:	f300 8128 	bgt.w	80011e8 <dw_process_rx_buffer+0x364>
 8000f98:	f242 2204 	movw	r2, #8708	; 0x2204
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	f000 80c6 	beq.w	800112e <dw_process_rx_buffer+0x2aa>
 8000fa2:	f242 2205 	movw	r2, #8709	; 0x2205
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	f000 80af 	beq.w	800110a <dw_process_rx_buffer+0x286>
		case BT_ERROR_WELL_BACK:
				dw_return_previous_page();
				break;

		default:
			break;
 8000fac:	e11c      	b.n	80011e8 <dw_process_rx_buffer+0x364>
	switch (code) {
 8000fae:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 8000fb2:	2b09      	cmp	r3, #9
 8000fb4:	f200 8118 	bhi.w	80011e8 <dw_process_rx_buffer+0x364>
 8000fb8:	a201      	add	r2, pc, #4	; (adr r2, 8000fc0 <dw_process_rx_buffer+0x13c>)
 8000fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbe:	bf00      	nop
 8000fc0:	08000fe9 	.word	0x08000fe9
 8000fc4:	08001011 	.word	0x08001011
 8000fc8:	080011e9 	.word	0x080011e9
 8000fcc:	0800103b 	.word	0x0800103b
 8000fd0:	0800105f 	.word	0x0800105f
 8000fd4:	0800105f 	.word	0x0800105f
 8000fd8:	080011e9 	.word	0x080011e9
 8000fdc:	080011e9 	.word	0x080011e9
 8000fe0:	080011e9 	.word	0x080011e9
 8000fe4:	080010ad 	.word	0x080010ad
				current_pg_setup=value = data[8];
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3308      	adds	r3, #8
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	81bb      	strh	r3, [r7, #12]
 8000ff0:	89bb      	ldrh	r3, [r7, #12]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b80      	ldr	r3, [pc, #512]	; (80011f8 <dw_process_rx_buffer+0x374>)
 8000ff6:	701a      	strb	r2, [r3, #0]
				current_step_setup =1;
 8000ff8:	4b80      	ldr	r3, [pc, #512]	; (80011fc <dw_process_rx_buffer+0x378>)
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	701a      	strb	r2, [r3, #0]
				show_setup_page(value-1,0);
 8000ffe:	89bb      	ldrh	r3, [r7, #12]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	3b01      	subs	r3, #1
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff fd99 	bl	8000b40 <show_setup_page>
			break;
 800100e:	e0ee      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				current_step_setup = value = data[8];
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3308      	adds	r3, #8
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	81bb      	strh	r3, [r7, #12]
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	b2da      	uxtb	r2, r3
 800101c:	4b77      	ldr	r3, [pc, #476]	; (80011fc <dw_process_rx_buffer+0x378>)
 800101e:	701a      	strb	r2, [r3, #0]
				show_setup_page(current_pg_setup-1,value-1);
 8001020:	4b75      	ldr	r3, [pc, #468]	; (80011f8 <dw_process_rx_buffer+0x374>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	3b01      	subs	r3, #1
 8001026:	b2da      	uxtb	r2, r3
 8001028:	89bb      	ldrh	r3, [r7, #12]
 800102a:	b2db      	uxtb	r3, r3
 800102c:	3b01      	subs	r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	4619      	mov	r1, r3
 8001032:	4610      	mov	r0, r2
 8001034:	f7ff fd84 	bl	8000b40 <show_setup_page>
			break;
 8001038:	e0d9      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				value = (uint16_t)data[7]*256+data[8];
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3307      	adds	r3, #7
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b29a      	uxth	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3308      	adds	r3, #8
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	b29b      	uxth	r3, r3
 800104e:	4413      	add	r3, r2
 8001050:	81bb      	strh	r3, [r7, #12]
				dwin_change_target_well(value);
 8001052:	89bb      	ldrh	r3, [r7, #12]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff fed0 	bl	8000dfc <dwin_change_target_well>
				break;
 800105c:	e0c7      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				value = (uint16_t)data[7]*256+data[8];
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3307      	adds	r3, #7
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	b29b      	uxth	r3, r3
 8001066:	021b      	lsls	r3, r3, #8
 8001068:	b29a      	uxth	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3308      	adds	r3, #8
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b29b      	uxth	r3, r3
 8001072:	4413      	add	r3, r2
 8001074:	81bb      	strh	r3, [r7, #12]
				if(value) {
 8001076:	89bb      	ldrh	r3, [r7, #12]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d00b      	beq.n	8001094 <dw_process_rx_buffer+0x210>
					dwin_change_color_sp(0x7000,DWIN_COLOR_BLACK);
 800107c:	2100      	movs	r1, #0
 800107e:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 8001082:	f000 f913 	bl	80012ac <dwin_change_color_sp>
					dwin_change_color_sp(0x7010,DWIN_COLOR_RED);
 8001086:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 800108a:	f247 0010 	movw	r0, #28688	; 0x7010
 800108e:	f000 f90d 	bl	80012ac <dwin_change_color_sp>
				break;
 8001092:	e0ac      	b.n	80011ee <dw_process_rx_buffer+0x36a>
					dwin_change_color_sp(0x7000,DWIN_COLOR_RED);
 8001094:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8001098:	f44f 40e0 	mov.w	r0, #28672	; 0x7000
 800109c:	f000 f906 	bl	80012ac <dwin_change_color_sp>
					dwin_change_color_sp(0x7010,DWIN_COLOR_BLACK);
 80010a0:	2100      	movs	r1, #0
 80010a2:	f247 0010 	movw	r0, #28688	; 0x7010
 80010a6:	f000 f901 	bl	80012ac <dwin_change_color_sp>
				break;
 80010aa:	e0a0      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				value = (uint16_t)data[7]*256+data[8];
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3307      	adds	r3, #7
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	b29b      	uxth	r3, r3
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3308      	adds	r3, #8
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	b29b      	uxth	r3, r3
 80010c0:	4413      	add	r3, r2
 80010c2:	81bb      	strh	r3, [r7, #12]
				if(value) {
 80010c4:	89bb      	ldrh	r3, [r7, #12]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d00b      	beq.n	80010e2 <dw_process_rx_buffer+0x25e>
					dwin_change_color_sp(0x7020,DWIN_COLOR_BLACK);
 80010ca:	2100      	movs	r1, #0
 80010cc:	f247 0020 	movw	r0, #28704	; 0x7020
 80010d0:	f000 f8ec 	bl	80012ac <dwin_change_color_sp>
					dwin_change_color_sp(0x7030,DWIN_COLOR_RED);
 80010d4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80010d8:	f247 0030 	movw	r0, #28720	; 0x7030
 80010dc:	f000 f8e6 	bl	80012ac <dwin_change_color_sp>
				break;
 80010e0:	e085      	b.n	80011ee <dw_process_rx_buffer+0x36a>
					dwin_change_color_sp(0x7020,DWIN_COLOR_RED);
 80010e2:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80010e6:	f247 0020 	movw	r0, #28704	; 0x7020
 80010ea:	f000 f8df 	bl	80012ac <dwin_change_color_sp>
					dwin_change_color_sp(0x7030,DWIN_COLOR_BLACK);
 80010ee:	2100      	movs	r1, #0
 80010f0:	f247 0030 	movw	r0, #28720	; 0x7030
 80010f4:	f000 f8da 	bl	80012ac <dwin_change_color_sp>
				break;
 80010f8:	e079      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				current_pg_setup =0;
 80010fa:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <dw_process_rx_buffer+0x374>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
			break;
 8001100:	e075      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				dwin_update_step(data);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fd4a 	bl	8000b9c <dwin_update_step>
				break;
 8001108:	e071      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				value = (uint16_t)data[7]*256+data[8];
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3307      	adds	r3, #7
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b29b      	uxth	r3, r3
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b29a      	uxth	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3308      	adds	r3, #8
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b29b      	uxth	r3, r3
 800111e:	4413      	add	r3, r2
 8001120:	81bb      	strh	r3, [r7, #12]
				step_mt_move_foward(&x_motor, value);
 8001122:	89bb      	ldrh	r3, [r7, #12]
 8001124:	4619      	mov	r1, r3
 8001126:	4836      	ldr	r0, [pc, #216]	; (8001200 <dw_process_rx_buffer+0x37c>)
 8001128:	f001 f836 	bl	8002198 <step_mt_move_foward>
				break;
 800112c:	e05f      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				value = (uint16_t)data[7]*256+data[8];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	3307      	adds	r3, #7
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b29a      	uxth	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3308      	adds	r3, #8
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b29b      	uxth	r3, r3
 8001142:	4413      	add	r3, r2
 8001144:	81bb      	strh	r3, [r7, #12]
				step_mt_move_backward(&x_motor, value);
 8001146:	89bb      	ldrh	r3, [r7, #12]
 8001148:	4619      	mov	r1, r3
 800114a:	482d      	ldr	r0, [pc, #180]	; (8001200 <dw_process_rx_buffer+0x37c>)
 800114c:	f001 f840 	bl	80021d0 <step_mt_move_backward>
				break;
 8001150:	e04d      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				value = (uint16_t)data[7]*256+data[8];
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3307      	adds	r3, #7
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	b29b      	uxth	r3, r3
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b29a      	uxth	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	3308      	adds	r3, #8
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	b29b      	uxth	r3, r3
 8001166:	4413      	add	r3, r2
 8001168:	81bb      	strh	r3, [r7, #12]
				step_mt_move_foward(&z_motor, value);
 800116a:	89bb      	ldrh	r3, [r7, #12]
 800116c:	4619      	mov	r1, r3
 800116e:	4825      	ldr	r0, [pc, #148]	; (8001204 <dw_process_rx_buffer+0x380>)
 8001170:	f001 f812 	bl	8002198 <step_mt_move_foward>
				break;
 8001174:	e03b      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				value = (uint16_t)data[7]*256+data[8];
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3307      	adds	r3, #7
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b29b      	uxth	r3, r3
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b29a      	uxth	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	3308      	adds	r3, #8
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	4413      	add	r3, r2
 800118c:	81bb      	strh	r3, [r7, #12]
				step_mt_move_backward(&z_motor, value);
 800118e:	89bb      	ldrh	r3, [r7, #12]
 8001190:	4619      	mov	r1, r3
 8001192:	481c      	ldr	r0, [pc, #112]	; (8001204 <dw_process_rx_buffer+0x380>)
 8001194:	f001 f81c 	bl	80021d0 <step_mt_move_backward>
				break;
 8001198:	e029      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				mt_move_to_home(&x_motor);
 800119a:	4819      	ldr	r0, [pc, #100]	; (8001200 <dw_process_rx_buffer+0x37c>)
 800119c:	f000 ff3a 	bl	8002014 <mt_move_to_home>
				break;
 80011a0:	e025      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				mt_move_to_home(&z_motor);
 80011a2:	4818      	ldr	r0, [pc, #96]	; (8001204 <dw_process_rx_buffer+0x380>)
 80011a4:	f000 ff36 	bl	8002014 <mt_move_to_home>
				break;
 80011a8:	e021      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				dwin_start_program(data[8]);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3308      	adds	r3, #8
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fd3b 	bl	8000c2c <dwin_start_program>
				break;
 80011b6:	e01a      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				pg_stop();
 80011b8:	f001 fa7e 	bl	80026b8 <pg_stop>
				break;
 80011bc:	e017      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				value = (uint16_t)data[7]*256+data[8];
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	3307      	adds	r3, #7
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	021b      	lsls	r3, r3, #8
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3308      	adds	r3, #8
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	4413      	add	r3, r2
 80011d4:	81bb      	strh	r3, [r7, #12]
				if(value == 1)
 80011d6:	89bb      	ldrh	r3, [r7, #12]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d107      	bne.n	80011ec <dw_process_rx_buffer+0x368>
					show_user_page();
 80011dc:	f7ff fca8 	bl	8000b30 <show_user_page>
				break;
 80011e0:	e004      	b.n	80011ec <dw_process_rx_buffer+0x368>
				dw_return_previous_page();
 80011e2:	f7ff fde7 	bl	8000db4 <dw_return_previous_page>
				break;
 80011e6:	e002      	b.n	80011ee <dw_process_rx_buffer+0x36a>
			break;
 80011e8:	bf00      	nop
 80011ea:	e000      	b.n	80011ee <dw_process_rx_buffer+0x36a>
				break;
 80011ec:	bf00      	nop
	}
	return 1;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	2000137a 	.word	0x2000137a
 80011fc:	2000137b 	.word	0x2000137b
 8001200:	20003e78 	.word	0x20003e78
 8001204:	20003ea8 	.word	0x20003ea8

08001208 <dw_update_steper_positon>:


float xxxx;
int dw_update_steper_positon(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
	static uint32_t time_tmp =0;
	if( (HAL_GetTick() > time_tmp)&&((x_motor.old_pos != x_motor.current_pos) || (z_motor.old_pos != z_motor.current_pos)))
 800120e:	f003 f9f7 	bl	8004600 <HAL_GetTick>
 8001212:	4602      	mov	r2, r0
 8001214:	4b21      	ldr	r3, [pc, #132]	; (800129c <dw_update_steper_positon+0x94>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d93a      	bls.n	8001292 <dw_update_steper_positon+0x8a>
 800121c:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <dw_update_steper_positon+0x98>)
 800121e:	685a      	ldr	r2, [r3, #4]
 8001220:	4b1f      	ldr	r3, [pc, #124]	; (80012a0 <dw_update_steper_positon+0x98>)
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	429a      	cmp	r2, r3
 8001226:	d105      	bne.n	8001234 <dw_update_steper_positon+0x2c>
 8001228:	4b1e      	ldr	r3, [pc, #120]	; (80012a4 <dw_update_steper_positon+0x9c>)
 800122a:	685a      	ldr	r2, [r3, #4]
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <dw_update_steper_positon+0x9c>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	429a      	cmp	r2, r3
 8001232:	d02e      	beq.n	8001292 <dw_update_steper_positon+0x8a>
	{
		time_tmp = HAL_GetTick() +50;
 8001234:	f003 f9e4 	bl	8004600 <HAL_GetTick>
 8001238:	4603      	mov	r3, r0
 800123a:	3332      	adds	r3, #50	; 0x32
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <dw_update_steper_positon+0x94>)
 800123e:	6013      	str	r3, [r2, #0]
		x_motor.old_pos = x_motor.current_pos;
 8001240:	4b17      	ldr	r3, [pc, #92]	; (80012a0 <dw_update_steper_positon+0x98>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4a16      	ldr	r2, [pc, #88]	; (80012a0 <dw_update_steper_positon+0x98>)
 8001246:	6053      	str	r3, [r2, #4]
		z_motor.old_pos = z_motor.current_pos;
 8001248:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <dw_update_steper_positon+0x9c>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <dw_update_steper_positon+0x9c>)
 800124e:	6053      	str	r3, [r2, #4]
		uint16_t data[4];
		data[0] = x_motor.current_pos/65535;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <dw_update_steper_positon+0x98>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <dw_update_steper_positon+0xa0>)
 8001256:	fba2 2303 	umull	r2, r3, r2, r3
 800125a:	0bdb      	lsrs	r3, r3, #15
 800125c:	b29b      	uxth	r3, r3
 800125e:	803b      	strh	r3, [r7, #0]
		data[1] = x_motor.current_pos;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <dw_update_steper_positon+0x98>)
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	b29b      	uxth	r3, r3
 8001266:	807b      	strh	r3, [r7, #2]
		data[2] = z_motor.current_pos/65535;
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <dw_update_steper_positon+0x9c>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <dw_update_steper_positon+0xa0>)
 800126e:	fba2 2303 	umull	r2, r3, r2, r3
 8001272:	0bdb      	lsrs	r3, r3, #15
 8001274:	b29b      	uxth	r3, r3
 8001276:	80bb      	strh	r3, [r7, #4]
		data[3] = z_motor.current_pos;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <dw_update_steper_positon+0x9c>)
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	b29b      	uxth	r3, r3
 800127e:	80fb      	strh	r3, [r7, #6]
		Dwin_Write_VP(VP_X_STEP_MOTOR,data,4);
 8001280:	463b      	mov	r3, r7
 8001282:	2204      	movs	r2, #4
 8001284:	4619      	mov	r1, r3
 8001286:	f44f 5008 	mov.w	r0, #8704	; 0x2200
 800128a:	f7ff fab9 	bl	8000800 <Dwin_Write_VP>
		return 1;
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <dw_update_steper_positon+0x8c>
	}
	return 0;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	20001380 	.word	0x20001380
 80012a0:	20003e78 	.word	0x20003e78
 80012a4:	20003ea8 	.word	0x20003ea8
 80012a8:	80008001 	.word	0x80008001

080012ac <dwin_change_color_sp>:

void dwin_log_change_color(uint16_t color){
	Dwin_Write_VP(LOG_COLOR_ADDRESS, &color, 1);
}

void dwin_change_color_sp(uint16_t sp,uint16_t color){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	460a      	mov	r2, r1
 80012b6:	80fb      	strh	r3, [r7, #6]
 80012b8:	4613      	mov	r3, r2
 80012ba:	80bb      	strh	r3, [r7, #4]
	Dwin_Write_VP(sp+3, &color, 1);
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	3303      	adds	r3, #3
 80012c0:	b29b      	uxth	r3, r3
 80012c2:	1d39      	adds	r1, r7, #4
 80012c4:	2201      	movs	r2, #1
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fa9a 	bl	8000800 <Dwin_Write_VP>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <dwin_log_change_len>:


void dwin_log_change_len(uint16_t len){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	80fb      	strh	r3, [r7, #6]
	static uint16_t oldlen = 200;
	if(oldlen != len)
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <dwin_log_change_len+0x30>)
 80012e0:	881a      	ldrh	r2, [r3, #0]
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d009      	beq.n	80012fc <dwin_log_change_len+0x28>
	{
		oldlen = len;
 80012e8:	88fa      	ldrh	r2, [r7, #6]
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <dwin_log_change_len+0x30>)
 80012ec:	801a      	strh	r2, [r3, #0]
		Dwin_Write_VP(LOG_LEN_ADDRESS, &len, 1);
 80012ee:	1dbb      	adds	r3, r7, #6
 80012f0:	2201      	movs	r2, #1
 80012f2:	4619      	mov	r1, r3
 80012f4:	f246 0008 	movw	r0, #24584	; 0x6008
 80012f8:	f7ff fa82 	bl	8000800 <Dwin_Write_VP>
	}
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000004 	.word	0x20000004

08001308 <dwin_log_visiable>:

void dwin_log_visiable(uint16_t visible){
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	80fb      	strh	r3, [r7, #6]
	static uint16_t oldvisible = 1;
	if( oldvisible == visible)
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <dwin_log_visiable+0x38>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	88fa      	ldrh	r2, [r7, #6]
 8001318:	429a      	cmp	r2, r3
 800131a:	d00d      	beq.n	8001338 <dwin_log_visiable+0x30>
		return;
	oldvisible = visible;
 800131c:	4a08      	ldr	r2, [pc, #32]	; (8001340 <dwin_log_visiable+0x38>)
 800131e:	88fb      	ldrh	r3, [r7, #6]
 8001320:	8013      	strh	r3, [r2, #0]
	if(visible){
 8001322:	88fb      	ldrh	r3, [r7, #6]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <dwin_log_visiable+0x28>
		dwin_log_change_len(200);
 8001328:	20c8      	movs	r0, #200	; 0xc8
 800132a:	f7ff ffd3 	bl	80012d4 <dwin_log_change_len>
 800132e:	e004      	b.n	800133a <dwin_log_visiable+0x32>
	} else {
		dwin_log_change_len(0);
 8001330:	2000      	movs	r0, #0
 8001332:	f7ff ffcf 	bl	80012d4 <dwin_log_change_len>
 8001336:	e000      	b.n	800133a <dwin_log_visiable+0x32>
		return;
 8001338:	bf00      	nop
	}
}
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000006 	.word	0x20000006

08001344 <dwin_log_timeout>:
	if(log_timout < HAL_GetTick())
		log_timout= MAX_UINT32;
#endif
}

void dwin_log_timeout(void){
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	if(HAL_GetTick() > log_timout)
 8001348:	f003 f95a 	bl	8004600 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <dwin_log_timeout+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d906      	bls.n	8001364 <dwin_log_timeout+0x20>
	{
		dwin_log_visiable(0);
 8001356:	2000      	movs	r0, #0
 8001358:	f7ff ffd6 	bl	8001308 <dwin_log_visiable>
		log_timout= MAX_UINT32;
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <dwin_log_timeout+0x24>)
 800135e:	f04f 32ff 	mov.w	r2, #4294967295
 8001362:	601a      	str	r2, [r3, #0]
	}
}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000000 	.word	0x20000000

0800136c <checkData>:


////////////// N code /////////////////
uint8_t checkData(const uint8_t* arr, size_t arrSize, const char* strfind, size_t strSize)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]

	for(uint8_t i = 0; i <= arrSize - 1; i++)
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]
 800137e:	e00f      	b.n	80013a0 <checkData+0x34>
	{
		if(memcmp(&arr[i], strfind, strSize) == 0)
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4413      	add	r3, r2
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	6879      	ldr	r1, [r7, #4]
 800138a:	4618      	mov	r0, r3
 800138c:	f00d faee 	bl	800e96c <memcmp>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <checkData+0x2e>
		{
			return 1;
 8001396:	2301      	movs	r3, #1
 8001398:	e008      	b.n	80013ac <checkData+0x40>
	for(uint8_t i = 0; i <= arrSize - 1; i++)
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	3301      	adds	r3, #1
 800139e:	75fb      	strb	r3, [r7, #23]
 80013a0:	7dfa      	ldrb	r2, [r7, #23]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d9ea      	bls.n	8001380 <checkData+0x14>
		}
	}
		return 0;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <write_flash>:
 * @param data Pointer to the data to be written
 * @param size Size of the data to be written, in bytes
 * @param address Memory address where the data will be written
 * @return HAL status
 */
HAL_StatusTypeDef write_flash(uint8_t* data, uint32_t size, uint32_t address) {
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 80013c0:	2300      	movs	r3, #0
 80013c2:	75fb      	strb	r3, [r7, #23]
    // Unlock flash
    HAL_FLASH_Unlock();
 80013c4:	f003 feb4 	bl	8005130 <HAL_FLASH_Unlock>

    // Erase sector
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <write_flash+0x78>)
 80013ca:	22b3      	movs	r2, #179	; 0xb3
 80013cc:	60da      	str	r2, [r3, #12]
	FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 80013ce:	2102      	movs	r1, #2
 80013d0:	2007      	movs	r0, #7
 80013d2:	f004 f80f 	bl	80053f4 <FLASH_Erase_Sector>

    if (status == HAL_OK) {
 80013d6:	7dfb      	ldrb	r3, [r7, #23]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d120      	bne.n	800141e <write_flash+0x6a>
        // Write data
        for (uint32_t i = 0; i < size; i++) {
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]
 80013e0:	e017      	b.n	8001412 <write_flash+0x5e>
            status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address + i, data[i]);
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	18d1      	adds	r1, r2, r3
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	4413      	add	r3, r2
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2200      	movs	r2, #0
 80013f4:	461c      	mov	r4, r3
 80013f6:	4615      	mov	r5, r2
 80013f8:	4622      	mov	r2, r4
 80013fa:	462b      	mov	r3, r5
 80013fc:	2000      	movs	r0, #0
 80013fe:	f003 fe43 	bl	8005088 <HAL_FLASH_Program>
 8001402:	4603      	mov	r3, r0
 8001404:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d107      	bne.n	800141c <write_flash+0x68>
        for (uint32_t i = 0; i < size; i++) {
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	3301      	adds	r3, #1
 8001410:	613b      	str	r3, [r7, #16]
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	429a      	cmp	r2, r3
 8001418:	d3e3      	bcc.n	80013e2 <write_flash+0x2e>
 800141a:	e000      	b.n	800141e <write_flash+0x6a>
                break;
 800141c:	bf00      	nop
            }
        }
    }

    // Lock flash
    HAL_FLASH_Lock();
 800141e:	f003 fea9 	bl	8005174 <HAL_FLASH_Lock>

    return status;
 8001422:	7dfb      	ldrb	r3, [r7, #23]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bdb0      	pop	{r4, r5, r7, pc}
 800142c:	40023c00 	.word	0x40023c00

08001430 <read_flash>:
 * @brief Reads data from flash memory
 * @param data Pointer to the buffer where the data will be stored
 * @param size Size of the data to be read, in bytes
 * @param address Memory address where the data will be read from
 */
void read_flash(uint8_t* data, uint32_t size, uint32_t address) {
 8001430:	b480      	push	{r7}
 8001432:	b087      	sub	sp, #28
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < size; i++) {
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
 8001440:	e00b      	b.n	800145a <read_flash+0x2a>
        data[i] = *((uint8_t*)(address + i));
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	4413      	add	r3, r2
 8001448:	4619      	mov	r1, r3
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	4413      	add	r3, r2
 8001450:	780a      	ldrb	r2, [r1, #0]
 8001452:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	3301      	adds	r3, #1
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	429a      	cmp	r2, r3
 8001460:	d3ef      	bcc.n	8001442 <read_flash+0x12>
    }
}
 8001462:	bf00      	nop
 8001464:	bf00      	nop
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <debug_process>:
volatile uint8_t usb_transmitdone = 1;

static uint8_t checkDT  = 0;

void debug_process()
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0

	if(debug_cnt && usb_transmitdone)
 8001474:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <debug_process+0x7c>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d034      	beq.n	80014e6 <debug_process+0x76>
 800147c:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <debug_process+0x80>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d02f      	beq.n	80014e6 <debug_process+0x76>
	{
		usb_transmitdone = 0;
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <debug_process+0x80>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
		if(CDC_Transmit_FS(debuglog[out_index].data,debuglog[out_index].size)==USBD_OK)
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <debug_process+0x84>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	461a      	mov	r2, r3
 8001492:	2365      	movs	r3, #101	; 0x65
 8001494:	fb02 f303 	mul.w	r3, r2, r3
 8001498:	4a17      	ldr	r2, [pc, #92]	; (80014f8 <debug_process+0x88>)
 800149a:	4413      	add	r3, r2
 800149c:	1c5a      	adds	r2, r3, #1
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <debug_process+0x84>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	4618      	mov	r0, r3
 80014a4:	4914      	ldr	r1, [pc, #80]	; (80014f8 <debug_process+0x88>)
 80014a6:	2365      	movs	r3, #101	; 0x65
 80014a8:	fb00 f303 	mul.w	r3, r0, r3
 80014ac:	440b      	add	r3, r1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4619      	mov	r1, r3
 80014b4:	4610      	mov	r0, r2
 80014b6:	f00c fbf5 	bl	800dca4 <CDC_Transmit_FS>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d112      	bne.n	80014e6 <debug_process+0x76>
		{
			out_index++;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <debug_process+0x84>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	3301      	adds	r3, #1
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <debug_process+0x84>)
 80014ca:	701a      	strb	r2, [r3, #0]
			if(out_index == LOG_FRAME)
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <debug_process+0x84>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b64      	cmp	r3, #100	; 0x64
 80014d2:	d102      	bne.n	80014da <debug_process+0x6a>
				out_index =0;
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <debug_process+0x84>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
			debug_cnt--;
 80014da:	4b04      	ldr	r3, [pc, #16]	; (80014ec <debug_process+0x7c>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	3b01      	subs	r3, #1
 80014e0:	b2da      	uxtb	r2, r3
 80014e2:	4b02      	ldr	r3, [pc, #8]	; (80014ec <debug_process+0x7c>)
 80014e4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20003e70 	.word	0x20003e70
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20003e71 	.word	0x20003e71
 80014f8:	200016fc 	.word	0x200016fc

080014fc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]

	debuglog[in_index].size = len;
 8001508:	4b1c      	ldr	r3, [pc, #112]	; (800157c <_write+0x80>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	b2d9      	uxtb	r1, r3
 8001512:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <_write+0x84>)
 8001514:	2365      	movs	r3, #101	; 0x65
 8001516:	fb00 f303 	mul.w	r3, r0, r3
 800151a:	4413      	add	r3, r2
 800151c:	460a      	mov	r2, r1
 800151e:	701a      	strb	r2, [r3, #0]
	memcpy(debuglog[in_index].data,ptr,len);
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <_write+0x80>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	2365      	movs	r3, #101	; 0x65
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	4a14      	ldr	r2, [pc, #80]	; (8001580 <_write+0x84>)
 800152e:	4413      	add	r3, r2
 8001530:	3301      	adds	r3, #1
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	4618      	mov	r0, r3
 8001538:	f00d faa2 	bl	800ea80 <memcpy>
	debug_cnt++;
 800153c:	4b11      	ldr	r3, [pc, #68]	; (8001584 <_write+0x88>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <_write+0x88>)
 8001546:	701a      	strb	r2, [r3, #0]
	if(debug_cnt>LOG_FRAME)
 8001548:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <_write+0x88>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b64      	cmp	r3, #100	; 0x64
 800154e:	d902      	bls.n	8001556 <_write+0x5a>
	{
		debug_cnt = LOG_FRAME;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <_write+0x88>)
 8001552:	2264      	movs	r2, #100	; 0x64
 8001554:	701a      	strb	r2, [r3, #0]
	}
	in_index++;
 8001556:	4b09      	ldr	r3, [pc, #36]	; (800157c <_write+0x80>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	3301      	adds	r3, #1
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <_write+0x80>)
 8001560:	701a      	strb	r2, [r3, #0]
	if(in_index == LOG_FRAME)
 8001562:	4b06      	ldr	r3, [pc, #24]	; (800157c <_write+0x80>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d102      	bne.n	8001570 <_write+0x74>
		in_index =0;
 800156a:	4b04      	ldr	r3, [pc, #16]	; (800157c <_write+0x80>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
	return len;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20003e72 	.word	0x20003e72
 8001580:	200016fc 	.word	0x200016fc
 8001584:	20003e70 	.word	0x20003e70

08001588 <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t usercommand =0;
uint8_t times =0;
uint16_t cnt =0;
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == htim1.Instance)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b07      	ldr	r3, [pc, #28]	; (80015b4 <HAL_TIM_PWM_PulseFinishedCallback+0x2c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	429a      	cmp	r2, r3
 800159a:	d105      	bne.n	80015a8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>
	{
		cnt++;
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	3301      	adds	r3, #1
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <HAL_TIM_PWM_PulseFinishedCallback+0x30>)
 80015a6:	801a      	strh	r2, [r3, #0]
	}
}
 80015a8:	bf00      	nop
 80015aa:	370c      	adds	r7, #12
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	20001430 	.word	0x20001430
 80015b8:	20003e76 	.word	0x20003e76

080015bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c0:	f002 ffb8 	bl	8004534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c4:	f000 f88e 	bl	80016e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c8:	f000 fbb6 	bl	8001d38 <MX_GPIO_Init>
  MX_DMA_Init();
 80015cc:	f000 fb76 	bl	8001cbc <MX_DMA_Init>
  MX_I2C1_Init();
 80015d0:	f000 f8f2 	bl	80017b8 <MX_I2C1_Init>
  MX_SPI1_Init();
 80015d4:	f000 f91e 	bl	8001814 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80015d8:	f000 fb46 	bl	8001c68 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80015dc:	f00c faa4 	bl	800db28 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80015e0:	f000 f94e 	bl	8001880 <MX_TIM1_Init>
  MX_TIM3_Init();
 80015e4:	f000 fa3c 	bl	8001a60 <MX_TIM3_Init>
  MX_TIM8_Init();
 80015e8:	f000 fb02 	bl	8001bf0 <MX_TIM8_Init>
  MX_TIM2_Init();
 80015ec:	f000 f9ea 	bl	80019c4 <MX_TIM2_Init>
  MX_TIM5_Init();
 80015f0:	f000 faae 	bl	8001b50 <MX_TIM5_Init>
//  HAL_FLASH_Unlock();
//  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
//  FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
//  HAL_FLASH_Program(TYPEPROGRAM_WORD,0x08060000, 0x11223344);
//  HAL_FLASH_Lock();
  Dwin_init();
 80015f4:	f7ff f9d8 	bl	80009a8 <Dwin_init>
  dt_system_data_init();
 80015f8:	f7ff f898 	bl	800072c <dt_system_data_init>


//  HAL_TIM_Base_Start(&htim3);
  x_step_mt_int();
 80015fc:	f000 fda8 	bl	8002150 <x_step_mt_int>
  z_step_mt_int();
 8001600:	f000 ff4a 	bl	8002498 <z_step_mt_int>
#if !SIMULATOR_MOD
  z_motor_boot_start();
  x_motor_boot_start();
#else
  x_motor.home_achieve = 1;
 8001604:	4b2d      	ldr	r3, [pc, #180]	; (80016bc <main+0x100>)
 8001606:	2201      	movs	r2, #1
 8001608:	749a      	strb	r2, [r3, #18]
  x_motor.is_home = 1;
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <main+0x100>)
 800160c:	2201      	movs	r2, #1
 800160e:	74da      	strb	r2, [r3, #19]
  z_motor.home_achieve = 1;
 8001610:	4b2b      	ldr	r3, [pc, #172]	; (80016c0 <main+0x104>)
 8001612:	2201      	movs	r2, #1
 8001614:	749a      	strb	r2, [r3, #18]
  z_motor.is_home = 1;
 8001616:	4b2a      	ldr	r3, [pc, #168]	; (80016c0 <main+0x104>)
 8001618:	2201      	movs	r2, #1
 800161a:	74da      	strb	r2, [r3, #19]
#endif
  printf("code started \n");
 800161c:	4829      	ldr	r0, [pc, #164]	; (80016c4 <main+0x108>)
 800161e:	f00d f8c5 	bl	800e7ac <puts>
  HAL_Delay(100);
 8001622:	2064      	movs	r0, #100	; 0x64
 8001624:	f002 fff8 	bl	8004618 <HAL_Delay>
  uart_dma_start();
 8001628:	f002 fed4 	bl	80043d4 <uart_dma_start>
  dwin_log_visiable(0);
 800162c:	2000      	movs	r0, #0
 800162e:	f7ff fe6b 	bl	8001308 <dwin_log_visiable>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  usercommand =1;
 8001632:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <main+0x10c>)
 8001634:	2201      	movs	r2, #1
 8001636:	701a      	strb	r2, [r3, #0]
//    uint32_t ti;
  while (1)
  {
#if SIMULATOR_MOD    //enter download HMI FW
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 8001638:	2101      	movs	r1, #1
 800163a:	4824      	ldr	r0, [pc, #144]	; (80016cc <main+0x110>)
 800163c:	f004 f8be 	bl	80057bc <HAL_GPIO_ReadPin>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d008      	beq.n	8001658 <main+0x9c>
	  {
		  while(1){
			  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800164a:	4821      	ldr	r0, [pc, #132]	; (80016d0 <main+0x114>)
 800164c:	f004 f8e7 	bl	800581e <HAL_GPIO_TogglePin>
			  HAL_Delay(50);
 8001650:	2032      	movs	r0, #50	; 0x32
 8001652:	f002 ffe1 	bl	8004618 <HAL_Delay>
			  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8001656:	e7f6      	b.n	8001646 <main+0x8a>
		  }
	  }
#endif
	  if(checkData(uart_rxbuf, sizeof(uart_rxbuf), "root", 4))
 8001658:	2304      	movs	r3, #4
 800165a:	4a1e      	ldr	r2, [pc, #120]	; (80016d4 <main+0x118>)
 800165c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001660:	481d      	ldr	r0, [pc, #116]	; (80016d8 <main+0x11c>)
 8001662:	f7ff fe83 	bl	800136c <checkData>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d002      	beq.n	8001672 <main+0xb6>
	  {
		  checkDT = 1;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <main+0x120>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
	  }
	  if(checkData(uart_rxbuf, sizeof(uart_rxbuf), "1234", 4) && checkDT == 1)
 8001672:	2304      	movs	r3, #4
 8001674:	4a1a      	ldr	r2, [pc, #104]	; (80016e0 <main+0x124>)
 8001676:	f44f 7100 	mov.w	r1, #512	; 0x200
 800167a:	4817      	ldr	r0, [pc, #92]	; (80016d8 <main+0x11c>)
 800167c:	f7ff fe76 	bl	800136c <checkData>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0d8      	beq.n	8001638 <main+0x7c>
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <main+0x120>)
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d1d4      	bne.n	8001638 <main+0x7c>
	  {
		  /// page continue is 3 //
		  Dwin_switch_page(3);
 800168e:	2003      	movs	r0, #3
 8001690:	f7ff f90c 	bl	80008ac <Dwin_switch_page>

		  dwin_log_timeout();
 8001694:	f7ff fe56 	bl	8001344 <dwin_log_timeout>
		  debug_process();
 8001698:	f7ff feea 	bl	8001470 <debug_process>
//			int len = sprintf(tmp,"CURRENT_TIME :%lu",HAL_GetTick());
//			dwin_log_text(LOG_INFOR,tmp,len, 1000);
//			ti = HAL_GetTick() +2000;
//	  }
//	  step_shake_process();
		  pg_process_loop();
 800169c:	f001 f8e2 	bl	8002864 <pg_process_loop>
		  uart_process();
 80016a0:	f002 fec2 	bl	8004428 <uart_process>
		  x_step_motor_process();
 80016a4:	f000 fe1e 	bl	80022e4 <x_step_motor_process>
		  dw_update_steper_positon();
 80016a8:	f7ff fdae 	bl	8001208 <dw_update_steper_positon>
		  z_step_motor_process();
 80016ac:	f000 ff42 	bl	8002534 <z_step_motor_process>
		  dw_update_steper_positon();
 80016b0:	f7ff fdaa 	bl	8001208 <dw_update_steper_positon>
		  checkDT = 0;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <main+0x120>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin))
 80016ba:	e7bd      	b.n	8001638 <main+0x7c>
 80016bc:	20003e78 	.word	0x20003e78
 80016c0:	20003ea8 	.word	0x20003ea8
 80016c4:	0800f660 	.word	0x0800f660
 80016c8:	20003e74 	.word	0x20003e74
 80016cc:	40020000 	.word	0x40020000
 80016d0:	40020c00 	.word	0x40020c00
 80016d4:	0800f670 	.word	0x0800f670
 80016d8:	20003f0c 	.word	0x20003f0c
 80016dc:	20003e73 	.word	0x20003e73
 80016e0:	0800f678 	.word	0x0800f678

080016e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b094      	sub	sp, #80	; 0x50
 80016e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ea:	f107 0320 	add.w	r3, r7, #32
 80016ee:	2230      	movs	r2, #48	; 0x30
 80016f0:	2100      	movs	r1, #0
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00d f94a 	bl	800e98c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	609a      	str	r2, [r3, #8]
 8001704:	60da      	str	r2, [r3, #12]
 8001706:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001708:	2300      	movs	r3, #0
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	4b28      	ldr	r3, [pc, #160]	; (80017b0 <SystemClock_Config+0xcc>)
 800170e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001710:	4a27      	ldr	r2, [pc, #156]	; (80017b0 <SystemClock_Config+0xcc>)
 8001712:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001716:	6413      	str	r3, [r2, #64]	; 0x40
 8001718:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <SystemClock_Config+0xcc>)
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	4b22      	ldr	r3, [pc, #136]	; (80017b4 <SystemClock_Config+0xd0>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a21      	ldr	r2, [pc, #132]	; (80017b4 <SystemClock_Config+0xd0>)
 800172e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001732:	6013      	str	r3, [r2, #0]
 8001734:	4b1f      	ldr	r3, [pc, #124]	; (80017b4 <SystemClock_Config+0xd0>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173c:	607b      	str	r3, [r7, #4]
 800173e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001740:	2301      	movs	r3, #1
 8001742:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001744:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800174a:	2302      	movs	r3, #2
 800174c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800174e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001752:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001754:	2304      	movs	r3, #4
 8001756:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001758:	23a8      	movs	r3, #168	; 0xa8
 800175a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800175c:	2302      	movs	r3, #2
 800175e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001760:	2307      	movs	r3, #7
 8001762:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001764:	f107 0320 	add.w	r3, r7, #32
 8001768:	4618      	mov	r0, r3
 800176a:	f005 fc35 	bl	8006fd8 <HAL_RCC_OscConfig>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001774:	f000 fc22 	bl	8001fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001778:	230f      	movs	r3, #15
 800177a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800177c:	2302      	movs	r3, #2
 800177e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800178a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800178e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	2105      	movs	r1, #5
 8001796:	4618      	mov	r0, r3
 8001798:	f005 fe96 	bl	80074c8 <HAL_RCC_ClockConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017a2:	f000 fc0b 	bl	8001fbc <Error_Handler>
  }
}
 80017a6:	bf00      	nop
 80017a8:	3750      	adds	r7, #80	; 0x50
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40007000 	.word	0x40007000

080017b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <MX_I2C1_Init+0x50>)
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <MX_I2C1_Init+0x54>)
 80017c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <MX_I2C1_Init+0x50>)
 80017c4:	4a12      	ldr	r2, [pc, #72]	; (8001810 <MX_I2C1_Init+0x58>)
 80017c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <MX_I2C1_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <MX_I2C1_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <MX_I2C1_Init+0x50>)
 80017d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <MX_I2C1_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <MX_I2C1_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017e8:	4b07      	ldr	r3, [pc, #28]	; (8001808 <MX_I2C1_Init+0x50>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <MX_I2C1_Init+0x50>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017f4:	4804      	ldr	r0, [pc, #16]	; (8001808 <MX_I2C1_Init+0x50>)
 80017f6:	f004 f82d 	bl	8005854 <HAL_I2C_Init>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001800:	f000 fbdc 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20001384 	.word	0x20001384
 800180c:	40005400 	.word	0x40005400
 8001810:	000186a0 	.word	0x000186a0

08001814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <MX_SPI1_Init+0x64>)
 800181a:	4a18      	ldr	r2, [pc, #96]	; (800187c <MX_SPI1_Init+0x68>)
 800181c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800181e:	4b16      	ldr	r3, [pc, #88]	; (8001878 <MX_SPI1_Init+0x64>)
 8001820:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001826:	4b14      	ldr	r3, [pc, #80]	; (8001878 <MX_SPI1_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800182c:	4b12      	ldr	r3, [pc, #72]	; (8001878 <MX_SPI1_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001832:	4b11      	ldr	r3, [pc, #68]	; (8001878 <MX_SPI1_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001838:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <MX_SPI1_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800183e:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <MX_SPI1_Init+0x64>)
 8001840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001844:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <MX_SPI1_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800184c:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <MX_SPI1_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <MX_SPI1_Init+0x64>)
 8001854:	2200      	movs	r2, #0
 8001856:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <MX_SPI1_Init+0x64>)
 800185a:	2200      	movs	r2, #0
 800185c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800185e:	4b06      	ldr	r3, [pc, #24]	; (8001878 <MX_SPI1_Init+0x64>)
 8001860:	220a      	movs	r2, #10
 8001862:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001864:	4804      	ldr	r0, [pc, #16]	; (8001878 <MX_SPI1_Init+0x64>)
 8001866:	f006 f84f 	bl	8007908 <HAL_SPI_Init>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001870:	f000 fba4 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200013d8 	.word	0x200013d8
 800187c:	40013000 	.word	0x40013000

08001880 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b096      	sub	sp, #88	; 0x58
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001886:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001894:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800189e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
 80018ac:	611a      	str	r2, [r3, #16]
 80018ae:	615a      	str	r2, [r3, #20]
 80018b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2220      	movs	r2, #32
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f00d f867 	bl	800e98c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018be:	4b3f      	ldr	r3, [pc, #252]	; (80019bc <MX_TIM1_Init+0x13c>)
 80018c0:	4a3f      	ldr	r2, [pc, #252]	; (80019c0 <MX_TIM1_Init+0x140>)
 80018c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80018c4:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <MX_TIM1_Init+0x13c>)
 80018c6:	2214      	movs	r2, #20
 80018c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ca:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <MX_TIM1_Init+0x13c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80018d0:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <MX_TIM1_Init+0x13c>)
 80018d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018d8:	4b38      	ldr	r3, [pc, #224]	; (80019bc <MX_TIM1_Init+0x13c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 199;
 80018de:	4b37      	ldr	r3, [pc, #220]	; (80019bc <MX_TIM1_Init+0x13c>)
 80018e0:	22c7      	movs	r2, #199	; 0xc7
 80018e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <MX_TIM1_Init+0x13c>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018ea:	4834      	ldr	r0, [pc, #208]	; (80019bc <MX_TIM1_Init+0x13c>)
 80018ec:	f006 f895 	bl	8007a1a <HAL_TIM_Base_Init>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80018f6:	f000 fb61 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018fe:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001900:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001904:	4619      	mov	r1, r3
 8001906:	482d      	ldr	r0, [pc, #180]	; (80019bc <MX_TIM1_Init+0x13c>)
 8001908:	f006 fcf2 	bl	80082f0 <HAL_TIM_ConfigClockSource>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001912:	f000 fb53 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001916:	4829      	ldr	r0, [pc, #164]	; (80019bc <MX_TIM1_Init+0x13c>)
 8001918:	f006 f93e 	bl	8007b98 <HAL_TIM_PWM_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001922:	f000 fb4b 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001926:	2340      	movs	r3, #64	; 0x40
 8001928:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800192e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001932:	4619      	mov	r1, r3
 8001934:	4821      	ldr	r0, [pc, #132]	; (80019bc <MX_TIM1_Init+0x13c>)
 8001936:	f007 f9a3 	bl	8008c80 <HAL_TIMEx_MasterConfigSynchronization>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001940:	f000 fb3c 	bl	8001fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001944:	2360      	movs	r3, #96	; 0x60
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8001948:	f240 13f3 	movw	r3, #499	; 0x1f3
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800194e:	2300      	movs	r3, #0
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	2200      	movs	r2, #0
 8001968:	4619      	mov	r1, r3
 800196a:	4814      	ldr	r0, [pc, #80]	; (80019bc <MX_TIM1_Init+0x13c>)
 800196c:	f006 fbfe 	bl	800816c <HAL_TIM_PWM_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001976:	f000 fb21 	bl	8001fbc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800198e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001992:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001998:	1d3b      	adds	r3, r7, #4
 800199a:	4619      	mov	r1, r3
 800199c:	4807      	ldr	r0, [pc, #28]	; (80019bc <MX_TIM1_Init+0x13c>)
 800199e:	f007 f9eb 	bl	8008d78 <HAL_TIMEx_ConfigBreakDeadTime>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80019a8:	f000 fb08 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019ac:	4803      	ldr	r0, [pc, #12]	; (80019bc <MX_TIM1_Init+0x13c>)
 80019ae:	f002 fa2f 	bl	8003e10 <HAL_TIM_MspPostInit>

}
 80019b2:	bf00      	nop
 80019b4:	3758      	adds	r7, #88	; 0x58
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20001430 	.word	0x20001430
 80019c0:	40010000 	.word	0x40010000

080019c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019da:	1d3b      	adds	r3, r7, #4
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <MX_TIM2_Init+0x98>)
 80019e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019e8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <MX_TIM2_Init+0x98>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_TIM2_Init+0x98>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80019f6:	4b19      	ldr	r3, [pc, #100]	; (8001a5c <MX_TIM2_Init+0x98>)
 80019f8:	f04f 32ff 	mov.w	r2, #4294967295
 80019fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_TIM2_Init+0x98>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_TIM2_Init+0x98>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a0a:	4814      	ldr	r0, [pc, #80]	; (8001a5c <MX_TIM2_Init+0x98>)
 8001a0c:	f006 f805 	bl	8007a1a <HAL_TIM_Base_Init>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d001      	beq.n	8001a1a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001a16:	f000 fad1 	bl	8001fbc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001a1a:	2307      	movs	r3, #7
 8001a1c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001a22:	f107 030c 	add.w	r3, r7, #12
 8001a26:	4619      	mov	r1, r3
 8001a28:	480c      	ldr	r0, [pc, #48]	; (8001a5c <MX_TIM2_Init+0x98>)
 8001a2a:	f006 fd28 	bl	800847e <HAL_TIM_SlaveConfigSynchro>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001a34:	f000 fac2 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a40:	1d3b      	adds	r3, r7, #4
 8001a42:	4619      	mov	r1, r3
 8001a44:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_TIM2_Init+0x98>)
 8001a46:	f007 f91b 	bl	8008c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001a50:	f000 fab4 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20001478 	.word	0x20001478

08001a60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08e      	sub	sp, #56	; 0x38
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	f107 0320 	add.w	r3, r7, #32
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7e:	1d3b      	adds	r3, r7, #4
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
 8001a8c:	615a      	str	r2, [r3, #20]
 8001a8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a90:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <MX_TIM3_Init+0xe8>)
 8001a92:	4a2e      	ldr	r2, [pc, #184]	; (8001b4c <MX_TIM3_Init+0xec>)
 8001a94:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <MX_TIM3_Init+0xe8>)
 8001a98:	2214      	movs	r2, #20
 8001a9a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <MX_TIM3_Init+0xe8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001aa2:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <MX_TIM3_Init+0xe8>)
 8001aa4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aa8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aaa:	4b27      	ldr	r3, [pc, #156]	; (8001b48 <MX_TIM3_Init+0xe8>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab0:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <MX_TIM3_Init+0xe8>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ab6:	4824      	ldr	r0, [pc, #144]	; (8001b48 <MX_TIM3_Init+0xe8>)
 8001ab8:	f005 ffaf 	bl	8007a1a <HAL_TIM_Base_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001ac2:	f000 fa7b 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001acc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	481d      	ldr	r0, [pc, #116]	; (8001b48 <MX_TIM3_Init+0xe8>)
 8001ad4:	f006 fc0c 	bl	80082f0 <HAL_TIM_ConfigClockSource>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001ade:	f000 fa6d 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ae2:	4819      	ldr	r0, [pc, #100]	; (8001b48 <MX_TIM3_Init+0xe8>)
 8001ae4:	f006 f858 	bl	8007b98 <HAL_TIM_PWM_Init>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001aee:	f000 fa65 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001af2:	2340      	movs	r3, #64	; 0x40
 8001af4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af6:	2300      	movs	r3, #0
 8001af8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001afa:	f107 0320 	add.w	r3, r7, #32
 8001afe:	4619      	mov	r1, r3
 8001b00:	4811      	ldr	r0, [pc, #68]	; (8001b48 <MX_TIM3_Init+0xe8>)
 8001b02:	f007 f8bd 	bl	8008c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001b0c:	f000 fa56 	bl	8001fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b10:	2360      	movs	r3, #96	; 0x60
 8001b12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8001b14:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001b18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	2200      	movs	r2, #0
 8001b26:	4619      	mov	r1, r3
 8001b28:	4807      	ldr	r0, [pc, #28]	; (8001b48 <MX_TIM3_Init+0xe8>)
 8001b2a:	f006 fb1f 	bl	800816c <HAL_TIM_PWM_ConfigChannel>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b34:	f000 fa42 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b38:	4803      	ldr	r0, [pc, #12]	; (8001b48 <MX_TIM3_Init+0xe8>)
 8001b3a:	f002 f969 	bl	8003e10 <HAL_TIM_MspPostInit>

}
 8001b3e:	bf00      	nop
 8001b40:	3738      	adds	r7, #56	; 0x38
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	200014c0 	.word	0x200014c0
 8001b4c:	40000400 	.word	0x40000400

08001b50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b56:	f107 030c 	add.w	r3, r7, #12
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]
 8001b60:	609a      	str	r2, [r3, #8]
 8001b62:	60da      	str	r2, [r3, #12]
 8001b64:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b6e:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <MX_TIM5_Init+0x98>)
 8001b70:	4a1e      	ldr	r2, [pc, #120]	; (8001bec <MX_TIM5_Init+0x9c>)
 8001b72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b74:	4b1c      	ldr	r3, [pc, #112]	; (8001be8 <MX_TIM5_Init+0x98>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <MX_TIM5_Init+0x98>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001b80:	4b19      	ldr	r3, [pc, #100]	; (8001be8 <MX_TIM5_Init+0x98>)
 8001b82:	f04f 32ff 	mov.w	r2, #4294967295
 8001b86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <MX_TIM5_Init+0x98>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <MX_TIM5_Init+0x98>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001b94:	4814      	ldr	r0, [pc, #80]	; (8001be8 <MX_TIM5_Init+0x98>)
 8001b96:	f005 ff40 	bl	8007a1a <HAL_TIM_Base_Init>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001ba0:	f000 fa0c 	bl	8001fbc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001ba4:	2307      	movs	r3, #7
 8001ba6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001ba8:	2310      	movs	r3, #16
 8001baa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480d      	ldr	r0, [pc, #52]	; (8001be8 <MX_TIM5_Init+0x98>)
 8001bb4:	f006 fc63 	bl	800847e <HAL_TIM_SlaveConfigSynchro>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 8001bbe:	f000 f9fd 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4806      	ldr	r0, [pc, #24]	; (8001be8 <MX_TIM5_Init+0x98>)
 8001bd0:	f007 f856 	bl	8008c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 8001bda:	f000 f9ef 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001bde:	bf00      	nop
 8001be0:	3720      	adds	r7, #32
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20001508 	.word	0x20001508
 8001bec:	40000c00 	.word	0x40000c00

08001bf0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf6:	463b      	mov	r3, r7
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	601a      	str	r2, [r3, #0]
 8001bfc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001bfe:	4b18      	ldr	r3, [pc, #96]	; (8001c60 <MX_TIM8_Init+0x70>)
 8001c00:	4a18      	ldr	r2, [pc, #96]	; (8001c64 <MX_TIM8_Init+0x74>)
 8001c02:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001c04:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <MX_TIM8_Init+0x70>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_TIM8_Init+0x70>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001c10:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <MX_TIM8_Init+0x70>)
 8001c12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c16:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_TIM8_Init+0x70>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_TIM8_Init+0x70>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c24:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_TIM8_Init+0x70>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8001c2a:	2108      	movs	r1, #8
 8001c2c:	480c      	ldr	r0, [pc, #48]	; (8001c60 <MX_TIM8_Init+0x70>)
 8001c2e:	f006 f945 	bl	8007ebc <HAL_TIM_OnePulse_Init>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM8_Init+0x4c>
  {
    Error_Handler();
 8001c38:	f000 f9c0 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001c44:	463b      	mov	r3, r7
 8001c46:	4619      	mov	r1, r3
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_TIM8_Init+0x70>)
 8001c4a:	f007 f819 	bl	8008c80 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8001c54:	f000 f9b2 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20001550 	.word	0x20001550
 8001c64:	40010400 	.word	0x40010400

08001c68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c6e:	4a12      	ldr	r2, [pc, #72]	; (8001cb8 <MX_USART2_UART_Init+0x50>)
 8001c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c72:	4b10      	ldr	r3, [pc, #64]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c8e:	220c      	movs	r2, #12
 8001c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_USART2_UART_Init+0x4c>)
 8001ca0:	f007 f8d0 	bl	8008e44 <HAL_UART_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001caa:	f000 f987 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200015f8 	.word	0x200015f8
 8001cb8:	40004400 	.word	0x40004400

08001cbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <MX_DMA_Init+0x78>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a1a      	ldr	r2, [pc, #104]	; (8001d34 <MX_DMA_Init+0x78>)
 8001ccc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b18      	ldr	r3, [pc, #96]	; (8001d34 <MX_DMA_Init+0x78>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <MX_DMA_Init+0x78>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <MX_DMA_Init+0x78>)
 8001ce8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cec:	6313      	str	r3, [r2, #48]	; 0x30
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <MX_DMA_Init+0x78>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2010      	movs	r0, #16
 8001d00:	f002 fd89 	bl	8004816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001d04:	2010      	movs	r0, #16
 8001d06:	f002 fda2 	bl	800484e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2011      	movs	r0, #17
 8001d10:	f002 fd81 	bl	8004816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001d14:	2011      	movs	r0, #17
 8001d16:	f002 fd9a 	bl	800484e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2039      	movs	r0, #57	; 0x39
 8001d20:	f002 fd79 	bl	8004816 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001d24:	2039      	movs	r0, #57	; 0x39
 8001d26:	f002 fd92 	bl	800484e <HAL_NVIC_EnableIRQ>

}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	40023800 	.word	0x40023800

08001d38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08c      	sub	sp, #48	; 0x30
 8001d3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	605a      	str	r2, [r3, #4]
 8001d48:	609a      	str	r2, [r3, #8]
 8001d4a:	60da      	str	r2, [r3, #12]
 8001d4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	4b94      	ldr	r3, [pc, #592]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	4a93      	ldr	r2, [pc, #588]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001d58:	f043 0310 	orr.w	r3, r3, #16
 8001d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5e:	4b91      	ldr	r3, [pc, #580]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	f003 0310 	and.w	r3, r3, #16
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	4b8d      	ldr	r3, [pc, #564]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	4a8c      	ldr	r2, [pc, #560]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001d74:	f043 0304 	orr.w	r3, r3, #4
 8001d78:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7a:	4b8a      	ldr	r3, [pc, #552]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	617b      	str	r3, [r7, #20]
 8001d84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	613b      	str	r3, [r7, #16]
 8001d8a:	4b86      	ldr	r3, [pc, #536]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a85      	ldr	r2, [pc, #532]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b83      	ldr	r3, [pc, #524]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9e:	613b      	str	r3, [r7, #16]
 8001da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b7f      	ldr	r3, [pc, #508]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	4a7e      	ldr	r2, [pc, #504]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	; 0x30
 8001db2:	4b7c      	ldr	r3, [pc, #496]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	4b78      	ldr	r3, [pc, #480]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a77      	ldr	r2, [pc, #476]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001dc8:	f043 0302 	orr.w	r3, r3, #2
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b75      	ldr	r3, [pc, #468]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
 8001dde:	4b71      	ldr	r3, [pc, #452]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a70      	ldr	r2, [pc, #448]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001de4:	f043 0308 	orr.w	r3, r3, #8
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b6e      	ldr	r3, [pc, #440]	; (8001fa4 <MX_GPIO_Init+0x26c>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	607b      	str	r3, [r7, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|X_MOTOR_DIR_Pin|X_MOTOR_EN_Pin, GPIO_PIN_RESET);
 8001df6:	2200      	movs	r2, #0
 8001df8:	f640 4108 	movw	r1, #3080	; 0xc08
 8001dfc:	486a      	ldr	r0, [pc, #424]	; (8001fa8 <MX_GPIO_Init+0x270>)
 8001dfe:	f003 fcf5 	bl	80057ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001e02:	2201      	movs	r2, #1
 8001e04:	2101      	movs	r1, #1
 8001e06:	4869      	ldr	r0, [pc, #420]	; (8001fac <MX_GPIO_Init+0x274>)
 8001e08:	f003 fcf0 	bl	80057ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|HEATER_Pin|PUMP2_Pin|PUMP1_Pin
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001e12:	4867      	ldr	r0, [pc, #412]	; (8001fb0 <MX_GPIO_Init+0x278>)
 8001e14:	f003 fcea 	bl	80057ec <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Z_MOTOR_DIR_Pin|Z_MOTOR_EN_Pin, GPIO_PIN_RESET);
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8001e1e:	4863      	ldr	r0, [pc, #396]	; (8001fac <MX_GPIO_Init+0x274>)
 8001e20:	f003 fce4 	bl	80057ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin X_MOTOR_DIR_Pin X_MOTOR_EN_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|X_MOTOR_DIR_Pin|X_MOTOR_EN_Pin;
 8001e24:	f640 4308 	movw	r3, #3080	; 0xc08
 8001e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e36:	f107 031c 	add.w	r3, r7, #28
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	485a      	ldr	r0, [pc, #360]	; (8001fa8 <MX_GPIO_Init+0x270>)
 8001e3e:	f003 fb21 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Z_MOTOR_DIR_Pin Z_MOTOR_EN_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Z_MOTOR_DIR_Pin|Z_MOTOR_EN_Pin;
 8001e42:	f240 1381 	movw	r3, #385	; 0x181
 8001e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e50:	2300      	movs	r3, #0
 8001e52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4854      	ldr	r0, [pc, #336]	; (8001fac <MX_GPIO_Init+0x274>)
 8001e5c:	f003 fb12 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001e60:	2308      	movs	r3, #8
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e70:	2305      	movs	r3, #5
 8001e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e74:	f107 031c 	add.w	r3, r7, #28
 8001e78:	4619      	mov	r1, r3
 8001e7a:	484c      	ldr	r0, [pc, #304]	; (8001fac <MX_GPIO_Init+0x274>)
 8001e7c:	f003 fb02 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e80:	2301      	movs	r3, #1
 8001e82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001e84:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	4847      	ldr	r0, [pc, #284]	; (8001fb4 <MX_GPIO_Init+0x27c>)
 8001e96:	f003 faf5 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001e9a:	2310      	movs	r3, #16
 8001e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001eaa:	2306      	movs	r3, #6
 8001eac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 031c 	add.w	r3, r7, #28
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	483f      	ldr	r0, [pc, #252]	; (8001fb4 <MX_GPIO_Init+0x27c>)
 8001eb6:	f003 fae5 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001eba:	2304      	movs	r3, #4
 8001ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001ec6:	f107 031c 	add.w	r3, r7, #28
 8001eca:	4619      	mov	r1, r3
 8001ecc:	483a      	ldr	r0, [pc, #232]	; (8001fb8 <MX_GPIO_Init+0x280>)
 8001ece:	f003 fad9 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_HOME_SWITCH_Pin */
  GPIO_InitStruct.Pin = X_HOME_SWITCH_Pin;
 8001ed2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001edc:	2301      	movs	r3, #1
 8001ede:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X_HOME_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4830      	ldr	r0, [pc, #192]	; (8001fa8 <MX_GPIO_Init+0x270>)
 8001ee8:	f003 facc 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001efe:	2305      	movs	r3, #5
 8001f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001f02:	f107 031c 	add.w	r3, r7, #28
 8001f06:	4619      	mov	r1, r3
 8001f08:	482b      	ldr	r0, [pc, #172]	; (8001fb8 <MX_GPIO_Init+0x280>)
 8001f0a:	f003 fabb 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pins : WS_SOLUTION_EMPTY_Pin WS_SOLUTION_FULL_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = WS_SOLUTION_EMPTY_Pin|WS_SOLUTION_FULL_Pin|OTG_FS_OverCurrent_Pin;
 8001f0e:	f44f 6342 	mov.w	r3, #3104	; 0xc20
 8001f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f1c:	f107 031c 	add.w	r3, r7, #28
 8001f20:	4619      	mov	r1, r3
 8001f22:	4823      	ldr	r0, [pc, #140]	; (8001fb0 <MX_GPIO_Init+0x278>)
 8001f24:	f003 faae 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin HEATER_Pin PUMP2_Pin PUMP1_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|HEATER_Pin|PUMP2_Pin|PUMP1_Pin
 8001f28:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001f2c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f36:	2300      	movs	r3, #0
 8001f38:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f3a:	f107 031c 	add.w	r3, r7, #28
 8001f3e:	4619      	mov	r1, r3
 8001f40:	481b      	ldr	r0, [pc, #108]	; (8001fb0 <MX_GPIO_Init+0x278>)
 8001f42:	f003 fa9f 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_HOME_SWITCH_Pin */
  GPIO_InitStruct.Pin = Z_HOME_SWITCH_Pin;
 8001f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f50:	2301      	movs	r3, #1
 8001f52:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Z_HOME_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001f54:	f107 031c 	add.w	r3, r7, #28
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4814      	ldr	r0, [pc, #80]	; (8001fac <MX_GPIO_Init+0x274>)
 8001f5c:	f003 fa92 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001f60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001f64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f72:	2306      	movs	r3, #6
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f76:	f107 031c 	add.w	r3, r7, #28
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <MX_GPIO_Init+0x274>)
 8001f7e:	f003 fa81 	bl	8005484 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001f82:	2302      	movs	r3, #2
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001f86:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001f8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001f90:	f107 031c 	add.w	r3, r7, #28
 8001f94:	4619      	mov	r1, r3
 8001f96:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <MX_GPIO_Init+0x270>)
 8001f98:	f003 fa74 	bl	8005484 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f9c:	bf00      	nop
 8001f9e:	3730      	adds	r7, #48	; 0x30
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40020800 	.word	0x40020800
 8001fb0:	40020c00 	.word	0x40020c00
 8001fb4:	40020000 	.word	0x40020000
 8001fb8:	40020400 	.word	0x40020400

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc4:	e7fe      	b.n	8001fc4 <Error_Handler+0x8>
	...

08001fc8 <HAL_TIM_PeriodElapsedCallback>:

#define Z_HOME_SWICH_OPEN	 (HAL_GPIO_ReadPin(Z_HOME_SWITCH_GPIO_Port, Z_HOME_SWITCH_Pin))
#define Z_HOME_SWICH_CLOSE	 (!HAL_GPIO_ReadPin(Z_HOME_SWITCH_GPIO_Port, Z_HOME_SWITCH_Pin))

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
	if(htim->Instance ==  htim2.Instance)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b0d      	ldr	r3, [pc, #52]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d106      	bne.n	8001fea <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		htim2.Instance->CNT = 0;
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	; (800200c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	625a      	str	r2, [r3, #36]	; 0x24
		x_mt_stop();
 8001fe4:	f000 f884 	bl	80020f0 <x_mt_stop>
	} else if(htim->Instance ==  htim5.Instance)
	{
		htim5.Instance->CNT = 0;
		z_mt_stop();
	}
}
 8001fe8:	e00b      	b.n	8002002 <HAL_TIM_PeriodElapsedCallback+0x3a>
	} else if(htim->Instance ==  htim5.Instance)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d105      	bne.n	8002002 <HAL_TIM_PeriodElapsedCallback+0x3a>
		htim5.Instance->CNT = 0;
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	625a      	str	r2, [r3, #36]	; 0x24
		z_mt_stop();
 8001ffe:	f000 fa1b 	bl	8002438 <z_mt_stop>
}
 8002002:	bf00      	nop
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20001478 	.word	0x20001478
 8002010:	20001508 	.word	0x20001508

08002014 <mt_move_to_home>:
_motor_typedef x_motor;


void mt_move_to_home(_motor_typedef *motor){
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	if(motor->command == CMD_IDLE){
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	7d1b      	ldrb	r3, [r3, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d102      	bne.n	800202a <mt_move_to_home+0x16>
		motor->command = CMD_REQUEST_HOME;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	751a      	strb	r2, [r3, #20]
	}
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr

08002036 <isMotor_atHome>:
int isMotor_atHome(_motor_typedef *motor){
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
	return(!motor->current_pos);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	bf0c      	ite	eq
 8002046:	2301      	moveq	r3, #1
 8002048:	2300      	movne	r3, #0
 800204a:	b2db      	uxtb	r3, r3
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <mt_set_target_position>:

void mt_set_target_position(_motor_typedef *motor,uint32_t new_position){
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
	motor->next_pos = new_position;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	60da      	str	r2, [r3, #12]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <x_mt_set_dir>:

void x_mt_set_dir(){
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	if(x_motor.current_pos < x_motor.next_pos){
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <x_mt_set_dir+0x5c>)
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <x_mt_set_dir+0x5c>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	429a      	cmp	r2, r3
 8002082:	d211      	bcs.n	80020a8 <x_mt_set_dir+0x34>
		x_motor.current_dir = DIR_FORWARD;
 8002084:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <x_mt_set_dir+0x5c>)
 8002086:	2200      	movs	r2, #0
 8002088:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_FORWARD);
 800208a:	2200      	movs	r2, #0
 800208c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002090:	4810      	ldr	r0, [pc, #64]	; (80020d4 <x_mt_set_dir+0x60>)
 8002092:	f003 fbab 	bl	80057ec <HAL_GPIO_WritePin>
		htim2.Instance->CR1 &= ~(1<<4);
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <x_mt_set_dir+0x64>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <x_mt_set_dir+0x64>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 0210 	bic.w	r2, r2, #16
 80020a4:	601a      	str	r2, [r3, #0]
		x_motor.current_dir = DIR_BACKWARD;
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_BACKWARD);
		htim2.Instance->CR1 |= (1<<4);
	}

}
 80020a6:	e010      	b.n	80020ca <x_mt_set_dir+0x56>
		x_motor.current_dir = DIR_BACKWARD;
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <x_mt_set_dir+0x5c>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_BACKWARD);
 80020ae:	2201      	movs	r2, #1
 80020b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020b4:	4807      	ldr	r0, [pc, #28]	; (80020d4 <x_mt_set_dir+0x60>)
 80020b6:	f003 fb99 	bl	80057ec <HAL_GPIO_WritePin>
		htim2.Instance->CR1 |= (1<<4);
 80020ba:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <x_mt_set_dir+0x64>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <x_mt_set_dir+0x64>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f042 0210 	orr.w	r2, r2, #16
 80020c8:	601a      	str	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20003e78 	.word	0x20003e78
 80020d4:	40021000 	.word	0x40021000
 80020d8:	20001478 	.word	0x20001478

080020dc <x_mt_start>:


void x_mt_start(){
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80020e0:	2100      	movs	r1, #0
 80020e2:	4802      	ldr	r0, [pc, #8]	; (80020ec <x_mt_start+0x10>)
 80020e4:	f005 fdb2 	bl	8007c4c <HAL_TIM_PWM_Start>
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20001430 	.word	0x20001430

080020f0 <x_mt_stop>:




void x_mt_stop()
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80020f4:	2100      	movs	r1, #0
 80020f6:	4808      	ldr	r0, [pc, #32]	; (8002118 <x_mt_stop+0x28>)
 80020f8:	f005 fe70 	bl	8007ddc <HAL_TIM_PWM_Stop>
	x_motor.command = CMD_IDLE;
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <x_mt_stop+0x2c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	751a      	strb	r2, [r3, #20]
	x_motor.next_pos = x_motor.current_pos = htim2.Instance->CNT;
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <x_mt_stop+0x30>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <x_mt_stop+0x2c>)
 800210a:	6093      	str	r3, [r2, #8]
 800210c:	4b03      	ldr	r3, [pc, #12]	; (800211c <x_mt_stop+0x2c>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	4a02      	ldr	r2, [pc, #8]	; (800211c <x_mt_stop+0x2c>)
 8002112:	60d3      	str	r3, [r2, #12]

}
 8002114:	bf00      	nop
 8002116:	bd80      	pop	{r7, pc}
 8002118:	20001430 	.word	0x20001430
 800211c:	20003e78 	.word	0x20003e78
 8002120:	20001478 	.word	0x20001478

08002124 <x_set_current_position>:

void x_mt_move_to_pos(uint32_t pos){
	x_motor.next_pos = pos;
}

void x_set_current_position(uint32_t pos){
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
	x_motor.current_pos = pos;
 800212c:	4a06      	ldr	r2, [pc, #24]	; (8002148 <x_set_current_position+0x24>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6093      	str	r3, [r2, #8]
	htim2.Instance->CNT = pos;
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <x_set_current_position+0x28>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	625a      	str	r2, [r3, #36]	; 0x24
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20003e78 	.word	0x20003e78
 800214c:	20001478 	.word	0x20001478

08002150 <x_step_mt_int>:


void x_step_mt_int(void){
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
	x_motor.current_pos= x_motor.next_pos = htim2.Instance->CNT = 0;
 8002154:	4b0d      	ldr	r3, [pc, #52]	; (800218c <x_step_mt_int+0x3c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2300      	movs	r3, #0
 800215a:	6253      	str	r3, [r2, #36]	; 0x24
 800215c:	4a0c      	ldr	r2, [pc, #48]	; (8002190 <x_step_mt_int+0x40>)
 800215e:	60d3      	str	r3, [r2, #12]
 8002160:	4b0b      	ldr	r3, [pc, #44]	; (8002190 <x_step_mt_int+0x40>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <x_step_mt_int+0x40>)
 8002166:	6093      	str	r3, [r2, #8]
	x_motor.old_pos = x_motor.ud_time =0;
 8002168:	4b09      	ldr	r3, [pc, #36]	; (8002190 <x_step_mt_int+0x40>)
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
 800216e:	4b08      	ldr	r3, [pc, #32]	; (8002190 <x_step_mt_int+0x40>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a07      	ldr	r2, [pc, #28]	; (8002190 <x_step_mt_int+0x40>)
 8002174:	6053      	str	r3, [r2, #4]
	x_motor.home_achieve = 0;
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <x_step_mt_int+0x40>)
 8002178:	2200      	movs	r2, #0
 800217a:	749a      	strb	r2, [r3, #18]
	x_motor.set_current_position = x_set_current_position;
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <x_step_mt_int+0x40>)
 800217e:	4a05      	ldr	r2, [pc, #20]	; (8002194 <x_step_mt_int+0x44>)
 8002180:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Start_IT(&htim2);
 8002182:	4802      	ldr	r0, [pc, #8]	; (800218c <x_step_mt_int+0x3c>)
 8002184:	f005 fc98 	bl	8007ab8 <HAL_TIM_Base_Start_IT>
}
 8002188:	bf00      	nop
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20001478 	.word	0x20001478
 8002190:	20003e78 	.word	0x20003e78
 8002194:	08002125 	.word	0x08002125

08002198 <step_mt_move_foward>:

void step_mt_move_foward(_motor_typedef *step,uint32_t numstep){
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
	step->next_pos +=numstep;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	441a      	add	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60da      	str	r2, [r3, #12]
	if(step->next_pos > 2000000000)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4a06      	ldr	r2, [pc, #24]	; (80021cc <step_mt_move_foward+0x34>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d902      	bls.n	80021be <step_mt_move_foward+0x26>
	{
		step->next_pos =2000000000;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a04      	ldr	r2, [pc, #16]	; (80021cc <step_mt_move_foward+0x34>)
 80021bc:	60da      	str	r2, [r3, #12]
	}
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	77359400 	.word	0x77359400

080021d0 <step_mt_move_backward>:

void step_mt_move_backward(_motor_typedef *step,uint32_t numstep){
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
	step->next_pos -=numstep;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	1ad2      	subs	r2, r2, r3
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	60da      	str	r2, [r3, #12]
	if(step->next_pos > 2000000000)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	4a06      	ldr	r2, [pc, #24]	; (8002204 <step_mt_move_backward+0x34>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d902      	bls.n	80021f6 <step_mt_move_backward+0x26>
	{
		step->next_pos =0;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
	}
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	77359400 	.word	0x77359400

08002208 <x_step_motor_home_position>:

void x_step_motor_home_position()
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(X_HOME_SWITCH_GPIO_Port, X_HOME_SWITCH_Pin) && (!x_motor.is_home))
 800220c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002210:	4811      	ldr	r0, [pc, #68]	; (8002258 <x_step_motor_home_position+0x50>)
 8002212:	f003 fad3 	bl	80057bc <HAL_GPIO_ReadPin>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d112      	bne.n	8002242 <x_step_motor_home_position+0x3a>
 800221c:	4b0f      	ldr	r3, [pc, #60]	; (800225c <x_step_motor_home_position+0x54>)
 800221e:	7cdb      	ldrb	r3, [r3, #19]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10e      	bne.n	8002242 <x_step_motor_home_position+0x3a>
	{
		x_motor.home_achieve = 1;
 8002224:	4b0d      	ldr	r3, [pc, #52]	; (800225c <x_step_motor_home_position+0x54>)
 8002226:	2201      	movs	r2, #1
 8002228:	749a      	strb	r2, [r3, #18]
		x_motor.is_home = 1;
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <x_step_motor_home_position+0x54>)
 800222c:	2201      	movs	r2, #1
 800222e:	74da      	strb	r2, [r3, #19]
		x_mt_stop();
 8002230:	f7ff ff5e 	bl	80020f0 <x_mt_stop>
		x_motor.current_dir = htim2.Instance->CNT =0;
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <x_step_motor_home_position+0x58>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2200      	movs	r2, #0
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
 800223c:	4b07      	ldr	r3, [pc, #28]	; (800225c <x_step_motor_home_position+0x54>)
 800223e:	2200      	movs	r2, #0
 8002240:	741a      	strb	r2, [r3, #16]
	}
	if(htim2.Instance->CNT)
 8002242:	4b07      	ldr	r3, [pc, #28]	; (8002260 <x_step_motor_home_position+0x58>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <x_step_motor_home_position+0x4a>
	{
		x_motor.is_home = 0;
 800224c:	4b03      	ldr	r3, [pc, #12]	; (800225c <x_step_motor_home_position+0x54>)
 800224e:	2200      	movs	r2, #0
 8002250:	74da      	strb	r2, [r3, #19]
	}
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	20003e78 	.word	0x20003e78
 8002260:	20001478 	.word	0x20001478

08002264 <home_process>:

void home_process(_motor_typedef *motor)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
	switch (motor->command) {
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7d1b      	ldrb	r3, [r3, #20]
 8002270:	2b03      	cmp	r3, #3
 8002272:	d029      	beq.n	80022c8 <home_process+0x64>
 8002274:	2b03      	cmp	r3, #3
 8002276:	dc2b      	bgt.n	80022d0 <home_process+0x6c>
 8002278:	2b01      	cmp	r3, #1
 800227a:	d002      	beq.n	8002282 <home_process+0x1e>
 800227c:	2b02      	cmp	r3, #2
 800227e:	d01b      	beq.n	80022b8 <home_process+0x54>
			break;
		case CMD_HOME_FINSH:
			motor->command = CMD_IDLE;
			break;
		default:
			break;
 8002280:	e026      	b.n	80022d0 <home_process+0x6c>
			if(motor->home_achieve && (motor->current_pos == 0))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7c9b      	ldrb	r3, [r3, #18]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d007      	beq.n	800229a <home_process+0x36>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d103      	bne.n	800229a <home_process+0x36>
				motor->command = CMD_HOME_FINSH;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2203      	movs	r2, #3
 8002296:	751a      	strb	r2, [r3, #20]
				break;
 8002298:	e01d      	b.n	80022d6 <home_process+0x72>
			if(!motor->home_achieve)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	7c9b      	ldrb	r3, [r3, #18]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d103      	bne.n	80022aa <home_process+0x46>
				motor->set_current_position(200000000);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	480e      	ldr	r0, [pc, #56]	; (80022e0 <home_process+0x7c>)
 80022a8:	4798      	blx	r3
			motor ->next_pos = 0;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	60da      	str	r2, [r3, #12]
			motor->command = CMD_WAIT_HOME;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	751a      	strb	r2, [r3, #20]
			break;
 80022b6:	e00e      	b.n	80022d6 <home_process+0x72>
			if(motor->current_pos == 0)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d109      	bne.n	80022d4 <home_process+0x70>
				motor->command = CMD_HOME_FINSH;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2203      	movs	r2, #3
 80022c4:	751a      	strb	r2, [r3, #20]
			break;
 80022c6:	e005      	b.n	80022d4 <home_process+0x70>
			motor->command = CMD_IDLE;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	751a      	strb	r2, [r3, #20]
			break;
 80022ce:	e002      	b.n	80022d6 <home_process+0x72>
			break;
 80022d0:	bf00      	nop
 80022d2:	e000      	b.n	80022d6 <home_process+0x72>
			break;
 80022d4:	bf00      	nop
	}
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	0bebc200 	.word	0x0bebc200

080022e4 <x_step_motor_process>:
void x_step_motor_process(void){
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	static uint32_t time_x_check_home = 0;
	x_motor.current_pos = htim2.Instance->CNT;
 80022e8:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <x_step_motor_process+0xd0>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	4a32      	ldr	r2, [pc, #200]	; (80023b8 <x_step_motor_process+0xd4>)
 80022f0:	6093      	str	r3, [r2, #8]
	if(HAL_GetTick() > time_x_check_home){
 80022f2:	f002 f985 	bl	8004600 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	4b30      	ldr	r3, [pc, #192]	; (80023bc <x_step_motor_process+0xd8>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d901      	bls.n	8002304 <x_step_motor_process+0x20>
		x_step_motor_home_position();
 8002300:	f7ff ff82 	bl	8002208 <x_step_motor_home_position>
	}
	home_process(&x_motor);
 8002304:	482c      	ldr	r0, [pc, #176]	; (80023b8 <x_step_motor_process+0xd4>)
 8002306:	f7ff ffad 	bl	8002264 <home_process>
	switch (x_motor.state) {
 800230a:	4b2b      	ldr	r3, [pc, #172]	; (80023b8 <x_step_motor_process+0xd4>)
 800230c:	7c5b      	ldrb	r3, [r3, #17]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d848      	bhi.n	80023a4 <x_step_motor_process+0xc0>
 8002312:	a201      	add	r2, pc, #4	; (adr r2, 8002318 <x_step_motor_process+0x34>)
 8002314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002318:	08002329 	.word	0x08002329
 800231c:	08002345 	.word	0x08002345
 8002320:	08002369 	.word	0x08002369
 8002324:	08002399 	.word	0x08002399
		case MT_STATE_IDLE:
			if(abs(x_motor.current_pos- x_motor.next_pos) > STEP_LOSS){
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <x_step_motor_process+0xd4>)
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <x_step_motor_process+0xd4>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	bfb8      	it	lt
 8002336:	425b      	neglt	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	dd35      	ble.n	80023a8 <x_step_motor_process+0xc4>
				x_motor.state = MT_STATE_START;
 800233c:	4b1e      	ldr	r3, [pc, #120]	; (80023b8 <x_step_motor_process+0xd4>)
 800233e:	2201      	movs	r2, #1
 8002340:	745a      	strb	r2, [r3, #17]
			}
			break;
 8002342:	e031      	b.n	80023a8 <x_step_motor_process+0xc4>
		case MT_STATE_START:
			x_mt_set_dir();
 8002344:	f7ff fe96 	bl	8002074 <x_mt_set_dir>
			if(x_motor.is_home == 1)
 8002348:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <x_step_motor_process+0xd4>)
 800234a:	7cdb      	ldrb	r3, [r3, #19]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <x_step_motor_process+0x78>
			{
				time_x_check_home = HAL_GetTick()+100;
 8002350:	f002 f956 	bl	8004600 <HAL_GetTick>
 8002354:	4603      	mov	r3, r0
 8002356:	3364      	adds	r3, #100	; 0x64
 8002358:	4a18      	ldr	r2, [pc, #96]	; (80023bc <x_step_motor_process+0xd8>)
 800235a:	6013      	str	r3, [r2, #0]
			}
			x_mt_start();
 800235c:	f7ff febe 	bl	80020dc <x_mt_start>
			x_motor.state = MT_STATE_RUNING;
 8002360:	4b15      	ldr	r3, [pc, #84]	; (80023b8 <x_step_motor_process+0xd4>)
 8002362:	2202      	movs	r2, #2
 8002364:	745a      	strb	r2, [r3, #17]
			break;
 8002366:	e022      	b.n	80023ae <x_step_motor_process+0xca>
		case MT_STATE_RUNING:
			if(x_motor.current_dir == DIR_FORWARD){
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <x_step_motor_process+0xd4>)
 800236a:	7c1b      	ldrb	r3, [r3, #16]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d109      	bne.n	8002384 <x_step_motor_process+0xa0>
				if(x_motor.current_pos >= x_motor.next_pos){
 8002370:	4b11      	ldr	r3, [pc, #68]	; (80023b8 <x_step_motor_process+0xd4>)
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <x_step_motor_process+0xd4>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	429a      	cmp	r2, r3
 800237a:	d317      	bcc.n	80023ac <x_step_motor_process+0xc8>
					x_motor.state = MT_STATE_STTOP;
 800237c:	4b0e      	ldr	r3, [pc, #56]	; (80023b8 <x_step_motor_process+0xd4>)
 800237e:	2203      	movs	r2, #3
 8002380:	745a      	strb	r2, [r3, #17]
				}
			}
//			if(abs(x_motor.current_pos- x_motor.next_pos) < STEP_LOSS){
//							x_motor.state = MT_STATE_STTOP;
//			}
			break;
 8002382:	e013      	b.n	80023ac <x_step_motor_process+0xc8>
				if(x_motor.current_pos <= x_motor.next_pos){
 8002384:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <x_step_motor_process+0xd4>)
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <x_step_motor_process+0xd4>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d80d      	bhi.n	80023ac <x_step_motor_process+0xc8>
					x_motor.state = MT_STATE_STTOP;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <x_step_motor_process+0xd4>)
 8002392:	2203      	movs	r2, #3
 8002394:	745a      	strb	r2, [r3, #17]
			break;
 8002396:	e009      	b.n	80023ac <x_step_motor_process+0xc8>
		case MT_STATE_STTOP:
			x_mt_stop();
 8002398:	f7ff feaa 	bl	80020f0 <x_mt_stop>
			x_motor.state = MT_STATE_IDLE;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <x_step_motor_process+0xd4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	745a      	strb	r2, [r3, #17]
			break;
 80023a2:	e004      	b.n	80023ae <x_step_motor_process+0xca>
		default:
			break;
 80023a4:	bf00      	nop
 80023a6:	e002      	b.n	80023ae <x_step_motor_process+0xca>
			break;
 80023a8:	bf00      	nop
 80023aa:	e000      	b.n	80023ae <x_step_motor_process+0xca>
			break;
 80023ac:	bf00      	nop
	}
}
 80023ae:	bf00      	nop
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20001478 	.word	0x20001478
 80023b8:	20003e78 	.word	0x20003e78
 80023bc:	20003ed8 	.word	0x20003ed8

080023c0 <z_mt_set_dir>:

_motor_typedef z_motor;



void z_mt_set_dir(){
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
	if(z_motor.current_pos < z_motor.next_pos){
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <z_mt_set_dir+0x58>)
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <z_mt_set_dir+0x58>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d210      	bcs.n	80023f2 <z_mt_set_dir+0x32>
		z_motor.current_dir = DIR_FORWARD;
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <z_mt_set_dir+0x58>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_FORWARD);
 80023d6:	2200      	movs	r2, #0
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	4810      	ldr	r0, [pc, #64]	; (800241c <z_mt_set_dir+0x5c>)
 80023dc:	f003 fa06 	bl	80057ec <HAL_GPIO_WritePin>
		htim5.Instance->CR1 &= ~(1<<4);
 80023e0:	4b0f      	ldr	r3, [pc, #60]	; (8002420 <z_mt_set_dir+0x60>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <z_mt_set_dir+0x60>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 0210 	bic.w	r2, r2, #16
 80023ee:	601a      	str	r2, [r3, #0]
		z_motor.current_dir = DIR_BACKWARD;
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_BACKWARD);
		htim5.Instance->CR1 |= (1<<4);
	}

}
 80023f0:	e00f      	b.n	8002412 <z_mt_set_dir+0x52>
		z_motor.current_dir = DIR_BACKWARD;
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <z_mt_set_dir+0x58>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_BACKWARD);
 80023f8:	2201      	movs	r2, #1
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	4807      	ldr	r0, [pc, #28]	; (800241c <z_mt_set_dir+0x5c>)
 80023fe:	f003 f9f5 	bl	80057ec <HAL_GPIO_WritePin>
		htim5.Instance->CR1 |= (1<<4);
 8002402:	4b07      	ldr	r3, [pc, #28]	; (8002420 <z_mt_set_dir+0x60>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b05      	ldr	r3, [pc, #20]	; (8002420 <z_mt_set_dir+0x60>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0210 	orr.w	r2, r2, #16
 8002410:	601a      	str	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	20003ea8 	.word	0x20003ea8
 800241c:	40020800 	.word	0x40020800
 8002420:	20001508 	.word	0x20001508

08002424 <z_mt_start>:

void z_mt_start(){
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002428:	2100      	movs	r1, #0
 800242a:	4802      	ldr	r0, [pc, #8]	; (8002434 <z_mt_start+0x10>)
 800242c:	f005 fc0e 	bl	8007c4c <HAL_TIM_PWM_Start>
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200014c0 	.word	0x200014c0

08002438 <z_mt_stop>:

void z_mt_stop()
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 800243c:	2100      	movs	r1, #0
 800243e:	4808      	ldr	r0, [pc, #32]	; (8002460 <z_mt_stop+0x28>)
 8002440:	f005 fccc 	bl	8007ddc <HAL_TIM_PWM_Stop>
	z_motor.command = CMD_IDLE;
 8002444:	4b07      	ldr	r3, [pc, #28]	; (8002464 <z_mt_stop+0x2c>)
 8002446:	2200      	movs	r2, #0
 8002448:	751a      	strb	r2, [r3, #20]
	z_motor.next_pos = z_motor.current_pos = htim5.Instance->CNT;
 800244a:	4b07      	ldr	r3, [pc, #28]	; (8002468 <z_mt_stop+0x30>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	4a04      	ldr	r2, [pc, #16]	; (8002464 <z_mt_stop+0x2c>)
 8002452:	6093      	str	r3, [r2, #8]
 8002454:	4b03      	ldr	r3, [pc, #12]	; (8002464 <z_mt_stop+0x2c>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	4a02      	ldr	r2, [pc, #8]	; (8002464 <z_mt_stop+0x2c>)
 800245a:	60d3      	str	r3, [r2, #12]

}
 800245c:	bf00      	nop
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200014c0 	.word	0x200014c0
 8002464:	20003ea8 	.word	0x20003ea8
 8002468:	20001508 	.word	0x20001508

0800246c <z_set_current_position>:
	z_motor.current_pos = htim5.Instance->CNT;
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
	z_mt_set_dir(z_motor.current_pos,z_motor.next_pos);
}

void z_set_current_position(uint32_t pos){
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
	z_motor.current_pos = pos;
 8002474:	4a06      	ldr	r2, [pc, #24]	; (8002490 <z_set_current_position+0x24>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6093      	str	r3, [r2, #8]
	htim5.Instance->CNT = pos;
 800247a:	4b06      	ldr	r3, [pc, #24]	; (8002494 <z_set_current_position+0x28>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20003ea8 	.word	0x20003ea8
 8002494:	20001508 	.word	0x20001508

08002498 <z_step_mt_int>:
void z_step_mt_int(void){
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
	z_motor.current_pos= z_motor.next_pos = htim5.Instance->CNT = 0;
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <z_step_mt_int+0x38>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	2300      	movs	r3, #0
 80024a2:	6253      	str	r3, [r2, #36]	; 0x24
 80024a4:	4a0b      	ldr	r2, [pc, #44]	; (80024d4 <z_step_mt_int+0x3c>)
 80024a6:	60d3      	str	r3, [r2, #12]
 80024a8:	4b0a      	ldr	r3, [pc, #40]	; (80024d4 <z_step_mt_int+0x3c>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <z_step_mt_int+0x3c>)
 80024ae:	6093      	str	r3, [r2, #8]
	z_motor.old_pos = z_motor.ud_time =0;
 80024b0:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <z_step_mt_int+0x3c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	4b07      	ldr	r3, [pc, #28]	; (80024d4 <z_step_mt_int+0x3c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a06      	ldr	r2, [pc, #24]	; (80024d4 <z_step_mt_int+0x3c>)
 80024bc:	6053      	str	r3, [r2, #4]
	z_motor.set_current_position = z_set_current_position;
 80024be:	4b05      	ldr	r3, [pc, #20]	; (80024d4 <z_step_mt_int+0x3c>)
 80024c0:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <z_step_mt_int+0x40>)
 80024c2:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Start_IT(&htim5);
 80024c4:	4802      	ldr	r0, [pc, #8]	; (80024d0 <z_step_mt_int+0x38>)
 80024c6:	f005 faf7 	bl	8007ab8 <HAL_TIM_Base_Start_IT>
}
 80024ca:	bf00      	nop
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20001508 	.word	0x20001508
 80024d4:	20003ea8 	.word	0x20003ea8
 80024d8:	0800246d 	.word	0x0800246d

080024dc <z_step_motor_home_position>:


void z_step_motor_home_position()
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(Z_HOME_SWITCH_GPIO_Port, Z_HOME_SWITCH_Pin) && (!z_motor.is_home))
 80024e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024e4:	4810      	ldr	r0, [pc, #64]	; (8002528 <z_step_motor_home_position+0x4c>)
 80024e6:	f003 f969 	bl	80057bc <HAL_GPIO_ReadPin>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d111      	bne.n	8002514 <z_step_motor_home_position+0x38>
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <z_step_motor_home_position+0x50>)
 80024f2:	7cdb      	ldrb	r3, [r3, #19]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d10d      	bne.n	8002514 <z_step_motor_home_position+0x38>
	{
		z_motor.home_achieve = 1;
 80024f8:	4b0c      	ldr	r3, [pc, #48]	; (800252c <z_step_motor_home_position+0x50>)
 80024fa:	2201      	movs	r2, #1
 80024fc:	749a      	strb	r2, [r3, #18]
		z_motor.is_home = 1;
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <z_step_motor_home_position+0x50>)
 8002500:	2201      	movs	r2, #1
 8002502:	74da      	strb	r2, [r3, #19]
		z_mt_stop();
 8002504:	f7ff ff98 	bl	8002438 <z_mt_stop>
		z_motor.current_pos = htim5.Instance->CNT =0;
 8002508:	4b09      	ldr	r3, [pc, #36]	; (8002530 <z_step_motor_home_position+0x54>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2300      	movs	r3, #0
 800250e:	6253      	str	r3, [r2, #36]	; 0x24
 8002510:	4a06      	ldr	r2, [pc, #24]	; (800252c <z_step_motor_home_position+0x50>)
 8002512:	6093      	str	r3, [r2, #8]
	}
	if(htim5.Instance->CNT)
 8002514:	4b06      	ldr	r3, [pc, #24]	; (8002530 <z_step_motor_home_position+0x54>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	2b00      	cmp	r3, #0
 800251c:	d002      	beq.n	8002524 <z_step_motor_home_position+0x48>
	{
		z_motor.is_home = 0;
 800251e:	4b03      	ldr	r3, [pc, #12]	; (800252c <z_step_motor_home_position+0x50>)
 8002520:	2200      	movs	r2, #0
 8002522:	74da      	strb	r2, [r3, #19]
	}
}
 8002524:	bf00      	nop
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40020800 	.word	0x40020800
 800252c:	20003ea8 	.word	0x20003ea8
 8002530:	20001508 	.word	0x20001508

08002534 <z_step_motor_process>:



void z_step_motor_process(void){
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	static uint32_t time_z_check_home = 0;
	z_motor.current_pos = htim5.Instance->CNT;
 8002538:	4b3a      	ldr	r3, [pc, #232]	; (8002624 <z_step_motor_process+0xf0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	4a3a      	ldr	r2, [pc, #232]	; (8002628 <z_step_motor_process+0xf4>)
 8002540:	6093      	str	r3, [r2, #8]
	if(HAL_GetTick() > time_z_check_home){
 8002542:	f002 f85d 	bl	8004600 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	4b38      	ldr	r3, [pc, #224]	; (800262c <z_step_motor_process+0xf8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	429a      	cmp	r2, r3
 800254e:	d901      	bls.n	8002554 <z_step_motor_process+0x20>
		z_step_motor_home_position();
 8002550:	f7ff ffc4 	bl	80024dc <z_step_motor_home_position>
	}
	home_process(&z_motor);
 8002554:	4834      	ldr	r0, [pc, #208]	; (8002628 <z_step_motor_process+0xf4>)
 8002556:	f7ff fe85 	bl	8002264 <home_process>
//	if(znext!= z_motor.next_pos)
//	{
//		znext= z_motor.next_pos;
//		printf("z next: %lu\n",z_motor.next_pos);
//	}
	switch (z_motor.state) {
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <z_step_motor_process+0xf4>)
 800255c:	7c5b      	ldrb	r3, [r3, #17]
 800255e:	2b03      	cmp	r3, #3
 8002560:	d858      	bhi.n	8002614 <z_step_motor_process+0xe0>
 8002562:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <z_step_motor_process+0x34>)
 8002564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002568:	08002579 	.word	0x08002579
 800256c:	08002595 	.word	0x08002595
 8002570:	080025b9 	.word	0x080025b9
 8002574:	08002609 	.word	0x08002609
		case MT_STATE_IDLE:
			if(abs(z_motor.current_pos- z_motor.next_pos) > STEP_LOSS){
 8002578:	4b2b      	ldr	r3, [pc, #172]	; (8002628 <z_step_motor_process+0xf4>)
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	4b2a      	ldr	r3, [pc, #168]	; (8002628 <z_step_motor_process+0xf4>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	bfb8      	it	lt
 8002586:	425b      	neglt	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	dd45      	ble.n	8002618 <z_step_motor_process+0xe4>
				z_motor.state = MT_STATE_START;
 800258c:	4b26      	ldr	r3, [pc, #152]	; (8002628 <z_step_motor_process+0xf4>)
 800258e:	2201      	movs	r2, #1
 8002590:	745a      	strb	r2, [r3, #17]
			}
			break;
 8002592:	e041      	b.n	8002618 <z_step_motor_process+0xe4>
		case MT_STATE_START:
			z_mt_set_dir();
 8002594:	f7ff ff14 	bl	80023c0 <z_mt_set_dir>
			if(z_motor.is_home == 1)
 8002598:	4b23      	ldr	r3, [pc, #140]	; (8002628 <z_step_motor_process+0xf4>)
 800259a:	7cdb      	ldrb	r3, [r3, #19]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d105      	bne.n	80025ac <z_step_motor_process+0x78>
			{
				time_z_check_home = HAL_GetTick()+100;
 80025a0:	f002 f82e 	bl	8004600 <HAL_GetTick>
 80025a4:	4603      	mov	r3, r0
 80025a6:	3364      	adds	r3, #100	; 0x64
 80025a8:	4a20      	ldr	r2, [pc, #128]	; (800262c <z_step_motor_process+0xf8>)
 80025aa:	6013      	str	r3, [r2, #0]
			}
			z_mt_start();
 80025ac:	f7ff ff3a 	bl	8002424 <z_mt_start>
			z_motor.state = MT_STATE_RUNING;
 80025b0:	4b1d      	ldr	r3, [pc, #116]	; (8002628 <z_step_motor_process+0xf4>)
 80025b2:	2202      	movs	r2, #2
 80025b4:	745a      	strb	r2, [r3, #17]
			break;
 80025b6:	e032      	b.n	800261e <z_step_motor_process+0xea>
		case MT_STATE_RUNING:
			if(z_motor.current_dir == DIR_FORWARD){
 80025b8:	4b1b      	ldr	r3, [pc, #108]	; (8002628 <z_step_motor_process+0xf4>)
 80025ba:	7c1b      	ldrb	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d109      	bne.n	80025d4 <z_step_motor_process+0xa0>
				if(z_motor.current_pos >= z_motor.next_pos){
 80025c0:	4b19      	ldr	r3, [pc, #100]	; (8002628 <z_step_motor_process+0xf4>)
 80025c2:	689a      	ldr	r2, [r3, #8]
 80025c4:	4b18      	ldr	r3, [pc, #96]	; (8002628 <z_step_motor_process+0xf4>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d327      	bcc.n	800261c <z_step_motor_process+0xe8>
					z_motor.state = MT_STATE_STTOP;
 80025cc:	4b16      	ldr	r3, [pc, #88]	; (8002628 <z_step_motor_process+0xf4>)
 80025ce:	2203      	movs	r2, #3
 80025d0:	745a      	strb	r2, [r3, #17]
					} else {
						z_motor.state = MT_STATE_STTOP;
					}
				}
			}
			break;
 80025d2:	e023      	b.n	800261c <z_step_motor_process+0xe8>
				if(z_motor.current_pos <= z_motor.next_pos){
 80025d4:	4b14      	ldr	r3, [pc, #80]	; (8002628 <z_step_motor_process+0xf4>)
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <z_step_motor_process+0xf4>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d81d      	bhi.n	800261c <z_step_motor_process+0xe8>
					if((z_motor.next_pos == 0) && Z_HOME_SWICH_OPEN ) //move until home switch enable
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <z_step_motor_process+0xf4>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d10b      	bne.n	8002600 <z_step_motor_process+0xcc>
 80025e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025ec:	4810      	ldr	r0, [pc, #64]	; (8002630 <z_step_motor_process+0xfc>)
 80025ee:	f003 f8e5 	bl	80057bc <HAL_GPIO_ReadPin>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d003      	beq.n	8002600 <z_step_motor_process+0xcc>
						z_set_current_position(10);
 80025f8:	200a      	movs	r0, #10
 80025fa:	f7ff ff37 	bl	800246c <z_set_current_position>
			break;
 80025fe:	e00d      	b.n	800261c <z_step_motor_process+0xe8>
						z_motor.state = MT_STATE_STTOP;
 8002600:	4b09      	ldr	r3, [pc, #36]	; (8002628 <z_step_motor_process+0xf4>)
 8002602:	2203      	movs	r2, #3
 8002604:	745a      	strb	r2, [r3, #17]
			break;
 8002606:	e009      	b.n	800261c <z_step_motor_process+0xe8>
		case MT_STATE_STTOP:
			z_mt_stop();
 8002608:	f7ff ff16 	bl	8002438 <z_mt_stop>
			z_motor.state = MT_STATE_IDLE;
 800260c:	4b06      	ldr	r3, [pc, #24]	; (8002628 <z_step_motor_process+0xf4>)
 800260e:	2200      	movs	r2, #0
 8002610:	745a      	strb	r2, [r3, #17]
			break;
 8002612:	e004      	b.n	800261e <z_step_motor_process+0xea>
		default:
			break;
 8002614:	bf00      	nop
 8002616:	e002      	b.n	800261e <z_step_motor_process+0xea>
			break;
 8002618:	bf00      	nop
 800261a:	e000      	b.n	800261e <z_step_motor_process+0xea>
			break;
 800261c:	bf00      	nop
	}
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20001508 	.word	0x20001508
 8002628:	20003ea8 	.word	0x20003ea8
 800262c:	20003edc 	.word	0x20003edc
 8002630:	40020800 	.word	0x40020800

08002634 <pg_start>:

_program_state pgstate = PG_STATE_IDLE;


int pg_start(uint8_t pg,uint8_t stepindex)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af02      	add	r7, sp, #8
 800263a:	4603      	mov	r3, r0
 800263c:	460a      	mov	r2, r1
 800263e:	71fb      	strb	r3, [r7, #7]
 8002640:	4613      	mov	r3, r2
 8002642:	71bb      	strb	r3, [r7, #6]
	if(pgstate == PG_STATE_IDLE)
 8002644:	4b16      	ldr	r3, [pc, #88]	; (80026a0 <pg_start+0x6c>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d116      	bne.n	800267a <pg_start+0x46>
	{
		LOGI(LOG_TAG,"start step: %d of program : %d",stepindex,pg);
 800264c:	f001 ffd8 	bl	8004600 <HAL_GetTick>
 8002650:	4601      	mov	r1, r0
 8002652:	79ba      	ldrb	r2, [r7, #6]
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	4613      	mov	r3, r2
 800265a:	460a      	mov	r2, r1
 800265c:	4911      	ldr	r1, [pc, #68]	; (80026a4 <pg_start+0x70>)
 800265e:	4812      	ldr	r0, [pc, #72]	; (80026a8 <pg_start+0x74>)
 8002660:	f00c f83e 	bl	800e6e0 <iprintf>
		running_pg = pg;
 8002664:	4a11      	ldr	r2, [pc, #68]	; (80026ac <pg_start+0x78>)
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	7013      	strb	r3, [r2, #0]
		running_step = stepindex;
 800266a:	4a11      	ldr	r2, [pc, #68]	; (80026b0 <pg_start+0x7c>)
 800266c:	79bb      	ldrb	r3, [r7, #6]
 800266e:	7013      	strb	r3, [r2, #0]
		pgstate = PG_STATE_START;
 8002670:	4b0b      	ldr	r3, [pc, #44]	; (80026a0 <pg_start+0x6c>)
 8002672:	2201      	movs	r2, #1
 8002674:	701a      	strb	r2, [r3, #0]
		return 1;
 8002676:	2301      	movs	r3, #1
 8002678:	e00e      	b.n	8002698 <pg_start+0x64>
	} else {
		LOGE(LOG_TAG,"pg_start fail running_pg  %d, pgstate: %d",running_pg,pgstate);
 800267a:	f001 ffc1 	bl	8004600 <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <pg_start+0x78>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	4619      	mov	r1, r3
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <pg_start+0x6c>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	460b      	mov	r3, r1
 800268e:	4905      	ldr	r1, [pc, #20]	; (80026a4 <pg_start+0x70>)
 8002690:	4808      	ldr	r0, [pc, #32]	; (80026b4 <pg_start+0x80>)
 8002692:	f00c f825 	bl	800e6e0 <iprintf>
	}
	return 0;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3708      	adds	r7, #8
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	20003ee2 	.word	0x20003ee2
 80026a4:	0800f680 	.word	0x0800f680
 80026a8:	0800f688 	.word	0x0800f688
 80026ac:	20003ee0 	.word	0x20003ee0
 80026b0:	20003ee1 	.word	0x20003ee1
 80026b4:	0800f6c0 	.word	0x0800f6c0

080026b8 <pg_stop>:
int pg_stop(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
	pgstate = PG_STATE_STOP;
 80026bc:	4b04      	ldr	r3, [pc, #16]	; (80026d0 <pg_stop+0x18>)
 80026be:	2206      	movs	r2, #6
 80026c0:	701a      	strb	r2, [r3, #0]
	return 1;
 80026c2:	2301      	movs	r3, #1
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20003ee2 	.word	0x20003ee2

080026d4 <start_step>:
_step_type start_step(){
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af02      	add	r7, sp, #8
//	Dwin_switch_running_page(running_pg,running_step);
	switch (dt_calculator_step_type(system_data.flash_data.Program_para[running_pg][running_step].wells)) {
 80026da:	4b56      	ldr	r3, [pc, #344]	; (8002834 <start_step+0x160>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	461a      	mov	r2, r3
 80026e0:	4b55      	ldr	r3, [pc, #340]	; (8002838 <start_step+0x164>)
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	4955      	ldr	r1, [pc, #340]	; (800283c <start_step+0x168>)
 80026e8:	4613      	mov	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	4413      	add	r3, r2
 80026ee:	009a      	lsls	r2, r3, #2
 80026f0:	4413      	add	r3, r2
 80026f2:	4403      	add	r3, r0
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	440b      	add	r3, r1
 80026f8:	331c      	adds	r3, #28
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd ff49 	bl	8000594 <dt_calculator_step_type>
 8002702:	4603      	mov	r3, r0
 8002704:	2b03      	cmp	r3, #3
 8002706:	d872      	bhi.n	80027ee <start_step+0x11a>
 8002708:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <start_step+0x3c>)
 800270a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800270e:	bf00      	nop
 8002710:	08002721 	.word	0x08002721
 8002714:	08002735 	.word	0x08002735
 8002718:	08002773 	.word	0x08002773
 800271c:	080027b1 	.word	0x080027b1
		case STEP_TYPE_NONE:
			LOGW(LOG_TAG,"step :%d  isn't active",running_step);
 8002720:	f001 ff6e 	bl	8004600 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	4b44      	ldr	r3, [pc, #272]	; (8002838 <start_step+0x164>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	4945      	ldr	r1, [pc, #276]	; (8002840 <start_step+0x16c>)
 800272c:	4845      	ldr	r0, [pc, #276]	; (8002844 <start_step+0x170>)
 800272e:	f00b ffd7 	bl	800e6e0 <iprintf>
			break;
 8002732:	e065      	b.n	8002800 <start_step+0x12c>
		case STEP_TYPE_SHAKE:
			{
				_step_shake_state tmp = step_shake_start();
 8002734:	f000 fbd0 	bl	8002ed8 <step_shake_start>
 8002738:	4603      	mov	r3, r0
 800273a:	717b      	strb	r3, [r7, #5]
				if( tmp== SHAKE_STATE_START) {
 800273c:	797b      	ldrb	r3, [r7, #5]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d109      	bne.n	8002756 <start_step+0x82>
					LOGI(LOG_TAG,"step_shake_start done index: %d",running_step);
 8002742:	f001 ff5d 	bl	8004600 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	4b3b      	ldr	r3, [pc, #236]	; (8002838 <start_step+0x164>)
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	493c      	ldr	r1, [pc, #240]	; (8002840 <start_step+0x16c>)
 800274e:	483e      	ldr	r0, [pc, #248]	; (8002848 <start_step+0x174>)
 8002750:	f00b ffc6 	bl	800e6e0 <iprintf>
				}else {
					LOGE(LOG_TAG,"step_shake_start fail index: %d _step_shake_state: %d",running_step,tmp);
				}
			}
			break;
 8002754:	e054      	b.n	8002800 <start_step+0x12c>
					LOGE(LOG_TAG,"step_shake_start fail index: %d _step_shake_state: %d",running_step,tmp);
 8002756:	f001 ff53 	bl	8004600 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	4b36      	ldr	r3, [pc, #216]	; (8002838 <start_step+0x164>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	4619      	mov	r1, r3
 8002762:	797b      	ldrb	r3, [r7, #5]
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	460b      	mov	r3, r1
 8002768:	4935      	ldr	r1, [pc, #212]	; (8002840 <start_step+0x16c>)
 800276a:	4838      	ldr	r0, [pc, #224]	; (800284c <start_step+0x178>)
 800276c:	f00b ffb8 	bl	800e6e0 <iprintf>
			break;
 8002770:	e046      	b.n	8002800 <start_step+0x12c>
		case STEP_TYPE_WASHING:
		{
			_step_ws_state ws =step_washing_start();
 8002772:	f000 fead 	bl	80034d0 <step_washing_start>
 8002776:	4603      	mov	r3, r0
 8002778:	71bb      	strb	r3, [r7, #6]
			if(ws == WS_STATE_START) {
 800277a:	79bb      	ldrb	r3, [r7, #6]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d109      	bne.n	8002794 <start_step+0xc0>
				LOGI(LOG_TAG,"step_washing_start done index: %d",running_step);
 8002780:	f001 ff3e 	bl	8004600 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <start_step+0x164>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	492d      	ldr	r1, [pc, #180]	; (8002840 <start_step+0x16c>)
 800278c:	4830      	ldr	r0, [pc, #192]	; (8002850 <start_step+0x17c>)
 800278e:	f00b ffa7 	bl	800e6e0 <iprintf>
			}else {
				LOGE(LOG_TAG,"step_washing_start fail index: %d _step_ws_state: %d",running_step,ws);
			}
		}
			break;
 8002792:	e035      	b.n	8002800 <start_step+0x12c>
				LOGE(LOG_TAG,"step_washing_start fail index: %d _step_ws_state: %d",running_step,ws);
 8002794:	f001 ff34 	bl	8004600 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	4b27      	ldr	r3, [pc, #156]	; (8002838 <start_step+0x164>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	4619      	mov	r1, r3
 80027a0:	79bb      	ldrb	r3, [r7, #6]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	460b      	mov	r3, r1
 80027a6:	4926      	ldr	r1, [pc, #152]	; (8002840 <start_step+0x16c>)
 80027a8:	482a      	ldr	r0, [pc, #168]	; (8002854 <start_step+0x180>)
 80027aa:	f00b ff99 	bl	800e6e0 <iprintf>
			break;
 80027ae:	e027      	b.n	8002800 <start_step+0x12c>
		case STEP_TYPE_DRYING:
			{
				_step_dy_state dy = step_drying_start();
 80027b0:	f000 f990 	bl	8002ad4 <step_drying_start>
 80027b4:	4603      	mov	r3, r0
 80027b6:	71fb      	strb	r3, [r7, #7]
				if(dy == DY_STATE_START) {
 80027b8:	79fb      	ldrb	r3, [r7, #7]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d109      	bne.n	80027d2 <start_step+0xfe>
					LOGI(LOG_TAG,"step_drying_start done index: %d",running_step);
 80027be:	f001 ff1f 	bl	8004600 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b1c      	ldr	r3, [pc, #112]	; (8002838 <start_step+0x164>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	491d      	ldr	r1, [pc, #116]	; (8002840 <start_step+0x16c>)
 80027ca:	4823      	ldr	r0, [pc, #140]	; (8002858 <start_step+0x184>)
 80027cc:	f00b ff88 	bl	800e6e0 <iprintf>
				}else {
					LOGE(LOG_TAG,"step_drying_start fail index: %d _step_dy_state:%d",running_step,dy);
				}
			}
			break;
 80027d0:	e016      	b.n	8002800 <start_step+0x12c>
					LOGE(LOG_TAG,"step_drying_start fail index: %d _step_dy_state:%d",running_step,dy);
 80027d2:	f001 ff15 	bl	8004600 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	4b17      	ldr	r3, [pc, #92]	; (8002838 <start_step+0x164>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	4619      	mov	r1, r3
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	460b      	mov	r3, r1
 80027e4:	4916      	ldr	r1, [pc, #88]	; (8002840 <start_step+0x16c>)
 80027e6:	481d      	ldr	r0, [pc, #116]	; (800285c <start_step+0x188>)
 80027e8:	f00b ff7a 	bl	800e6e0 <iprintf>
			break;
 80027ec:	e008      	b.n	8002800 <start_step+0x12c>
		default:
			LOGE(LOG_TAG,"Unknown step type");
 80027ee:	f001 ff07 	bl	8004600 <HAL_GetTick>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461a      	mov	r2, r3
 80027f6:	4912      	ldr	r1, [pc, #72]	; (8002840 <start_step+0x16c>)
 80027f8:	4819      	ldr	r0, [pc, #100]	; (8002860 <start_step+0x18c>)
 80027fa:	f00b ff71 	bl	800e6e0 <iprintf>
			// Code to handle unknown step type
			break;
 80027fe:	bf00      	nop
	}
	return dt_calculator_step_type(system_data.flash_data.Program_para[running_pg][running_step].wells);
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <start_step+0x160>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	461a      	mov	r2, r3
 8002806:	4b0c      	ldr	r3, [pc, #48]	; (8002838 <start_step+0x164>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	490b      	ldr	r1, [pc, #44]	; (800283c <start_step+0x168>)
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	009a      	lsls	r2, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	4403      	add	r3, r0
 800281a:	011b      	lsls	r3, r3, #4
 800281c:	440b      	add	r3, r1
 800281e:	331c      	adds	r3, #28
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd feb6 	bl	8000594 <dt_calculator_step_type>
 8002828:	4603      	mov	r3, r0
}
 800282a:	4618      	mov	r0, r3
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
 8002832:	bf00      	nop
 8002834:	20003ee0 	.word	0x20003ee0
 8002838:	20003ee1 	.word	0x20003ee1
 800283c:	20000188 	.word	0x20000188
 8002840:	0800f680 	.word	0x0800f680
 8002844:	0800f704 	.word	0x0800f704
 8002848:	0800f734 	.word	0x0800f734
 800284c:	0800f76c 	.word	0x0800f76c
 8002850:	0800f7bc 	.word	0x0800f7bc
 8002854:	0800f7f8 	.word	0x0800f7f8
 8002858:	0800f844 	.word	0x0800f844
 800285c:	0800f87c 	.word	0x0800f87c
 8002860:	0800f8c8 	.word	0x0800f8c8

08002864 <pg_process_loop>:

void pg_process_loop(void) {
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
	switch (pgstate) {
 8002868:	4b8a      	ldr	r3, [pc, #552]	; (8002a94 <pg_process_loop+0x230>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b07      	cmp	r3, #7
 800286e:	f200 8109 	bhi.w	8002a84 <pg_process_loop+0x220>
 8002872:	a201      	add	r2, pc, #4	; (adr r2, 8002878 <pg_process_loop+0x14>)
 8002874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002878:	08002a85 	.word	0x08002a85
 800287c:	08002899 	.word	0x08002899
 8002880:	08002903 	.word	0x08002903
 8002884:	080029f7 	.word	0x080029f7
 8002888:	08002a15 	.word	0x08002a15
 800288c:	08002919 	.word	0x08002919
 8002890:	08002a39 	.word	0x08002a39
 8002894:	08002a65 	.word	0x08002a65
//			printf("Program is idle\n");
			// Code to handle the idle state
			break;

		case PG_STATE_START:
			if(running_step == MAX_STEP_NUM){
 8002898:	4b7f      	ldr	r3, [pc, #508]	; (8002a98 <pg_process_loop+0x234>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b19      	cmp	r3, #25
 800289e:	d103      	bne.n	80028a8 <pg_process_loop+0x44>
				pgstate= PG_STATE_START_HOMEX;
 80028a0:	4b7c      	ldr	r3, [pc, #496]	; (8002a94 <pg_process_loop+0x230>)
 80028a2:	2203      	movs	r2, #3
 80028a4:	701a      	strb	r2, [r3, #0]
				break;
 80028a6:	e0f2      	b.n	8002a8e <pg_process_loop+0x22a>
			}
			Dwin_switch_running_page(running_pg,running_step);
 80028a8:	4b7c      	ldr	r3, [pc, #496]	; (8002a9c <pg_process_loop+0x238>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	4a7a      	ldr	r2, [pc, #488]	; (8002a98 <pg_process_loop+0x234>)
 80028ae:	7812      	ldrb	r2, [r2, #0]
 80028b0:	4611      	mov	r1, r2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7fe f81a 	bl	80008ec <Dwin_switch_running_page>
			if(isMotor_atHome(&z_motor))
 80028b8:	4879      	ldr	r0, [pc, #484]	; (8002aa0 <pg_process_loop+0x23c>)
 80028ba:	f7ff fbbc 	bl	8002036 <isMotor_atHome>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00f      	beq.n	80028e4 <pg_process_loop+0x80>
			{
				if(start_step()!= STEP_TYPE_NONE) {
 80028c4:	f7ff ff06 	bl	80026d4 <start_step>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <pg_process_loop+0x72>

						pgstate= PG_STATE_RUNNING;
 80028ce:	4b71      	ldr	r3, [pc, #452]	; (8002a94 <pg_process_loop+0x230>)
 80028d0:	2205      	movs	r2, #5
 80028d2:	701a      	strb	r2, [r3, #0]
				LOGW(LOG_TAG,"start program without Z at home");
				mt_move_to_home(&z_motor);
				pgstate= PG_STATE_WAIT_HOMEZ;
			}
			// Code to handle the start state
			break;
 80028d4:	e0db      	b.n	8002a8e <pg_process_loop+0x22a>
					running_step++;
 80028d6:	4b70      	ldr	r3, [pc, #448]	; (8002a98 <pg_process_loop+0x234>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	3301      	adds	r3, #1
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	4b6e      	ldr	r3, [pc, #440]	; (8002a98 <pg_process_loop+0x234>)
 80028e0:	701a      	strb	r2, [r3, #0]
			break;
 80028e2:	e0d4      	b.n	8002a8e <pg_process_loop+0x22a>
				LOGW(LOG_TAG,"start program without Z at home");
 80028e4:	f001 fe8c 	bl	8004600 <HAL_GetTick>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461a      	mov	r2, r3
 80028ec:	496d      	ldr	r1, [pc, #436]	; (8002aa4 <pg_process_loop+0x240>)
 80028ee:	486e      	ldr	r0, [pc, #440]	; (8002aa8 <pg_process_loop+0x244>)
 80028f0:	f00b fef6 	bl	800e6e0 <iprintf>
				mt_move_to_home(&z_motor);
 80028f4:	486a      	ldr	r0, [pc, #424]	; (8002aa0 <pg_process_loop+0x23c>)
 80028f6:	f7ff fb8d 	bl	8002014 <mt_move_to_home>
				pgstate= PG_STATE_WAIT_HOMEZ;
 80028fa:	4b66      	ldr	r3, [pc, #408]	; (8002a94 <pg_process_loop+0x230>)
 80028fc:	2202      	movs	r2, #2
 80028fe:	701a      	strb	r2, [r3, #0]
			break;
 8002900:	e0c5      	b.n	8002a8e <pg_process_loop+0x22a>
		case PG_STATE_WAIT_HOMEZ:
				if(isMotor_atHome(&z_motor)){
 8002902:	4867      	ldr	r0, [pc, #412]	; (8002aa0 <pg_process_loop+0x23c>)
 8002904:	f7ff fb97 	bl	8002036 <isMotor_atHome>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80bc 	beq.w	8002a88 <pg_process_loop+0x224>
					pgstate= PG_STATE_START;
 8002910:	4b60      	ldr	r3, [pc, #384]	; (8002a94 <pg_process_loop+0x230>)
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
				}
				break;
 8002916:	e0b7      	b.n	8002a88 <pg_process_loop+0x224>

		case PG_STATE_RUNNING:
			switch (dt_calculator_step_type(system_data.flash_data.Program_para[running_pg][running_step].wells)) {
 8002918:	4b60      	ldr	r3, [pc, #384]	; (8002a9c <pg_process_loop+0x238>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	4b5e      	ldr	r3, [pc, #376]	; (8002a98 <pg_process_loop+0x234>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	4961      	ldr	r1, [pc, #388]	; (8002aac <pg_process_loop+0x248>)
 8002926:	4613      	mov	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4413      	add	r3, r2
 800292c:	009a      	lsls	r2, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	4403      	add	r3, r0
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	440b      	add	r3, r1
 8002936:	331c      	adds	r3, #28
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd fe2a 	bl	8000594 <dt_calculator_step_type>
 8002940:	4603      	mov	r3, r0
 8002942:	2b03      	cmp	r3, #3
 8002944:	d036      	beq.n	80029b4 <pg_process_loop+0x150>
 8002946:	2b03      	cmp	r3, #3
 8002948:	dc46      	bgt.n	80029d8 <pg_process_loop+0x174>
 800294a:	2b01      	cmp	r3, #1
 800294c:	d002      	beq.n	8002954 <pg_process_loop+0xf0>
 800294e:	2b02      	cmp	r3, #2
 8002950:	d018      	beq.n	8002984 <pg_process_loop+0x120>
 8002952:	e041      	b.n	80029d8 <pg_process_loop+0x174>
				case STEP_TYPE_SHAKE:
					if(step_shake_process())
 8002954:	f000 fb70 	bl	8003038 <step_shake_process>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d045      	beq.n	80029ea <pg_process_loop+0x186>
					{
						LOGI(LOG_TAG,"Shaking step (%d) finish",running_step);
 800295e:	f001 fe4f 	bl	8004600 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	4b4c      	ldr	r3, [pc, #304]	; (8002a98 <pg_process_loop+0x234>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	494e      	ldr	r1, [pc, #312]	; (8002aa4 <pg_process_loop+0x240>)
 800296a:	4851      	ldr	r0, [pc, #324]	; (8002ab0 <pg_process_loop+0x24c>)
 800296c:	f00b feb8 	bl	800e6e0 <iprintf>
						running_step++;
 8002970:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <pg_process_loop+0x234>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	b2da      	uxtb	r2, r3
 8002978:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <pg_process_loop+0x234>)
 800297a:	701a      	strb	r2, [r3, #0]
						pgstate = PG_STATE_START;
 800297c:	4b45      	ldr	r3, [pc, #276]	; (8002a94 <pg_process_loop+0x230>)
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002982:	e032      	b.n	80029ea <pg_process_loop+0x186>
				case STEP_TYPE_WASHING:
					if(step_washing_process())
 8002984:	f000 fe64 	bl	8003650 <step_washing_process>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d02f      	beq.n	80029ee <pg_process_loop+0x18a>
					{
						LOGI(LOG_TAG,"washing step (%d) finish",running_step);
 800298e:	f001 fe37 	bl	8004600 <HAL_GetTick>
 8002992:	4602      	mov	r2, r0
 8002994:	4b40      	ldr	r3, [pc, #256]	; (8002a98 <pg_process_loop+0x234>)
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	4942      	ldr	r1, [pc, #264]	; (8002aa4 <pg_process_loop+0x240>)
 800299a:	4846      	ldr	r0, [pc, #280]	; (8002ab4 <pg_process_loop+0x250>)
 800299c:	f00b fea0 	bl	800e6e0 <iprintf>
						running_step++;
 80029a0:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <pg_process_loop+0x234>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4b3b      	ldr	r3, [pc, #236]	; (8002a98 <pg_process_loop+0x234>)
 80029aa:	701a      	strb	r2, [r3, #0]
						pgstate = PG_STATE_START;
 80029ac:	4b39      	ldr	r3, [pc, #228]	; (8002a94 <pg_process_loop+0x230>)
 80029ae:	2201      	movs	r2, #1
 80029b0:	701a      	strb	r2, [r3, #0]
					}
					break;
 80029b2:	e01c      	b.n	80029ee <pg_process_loop+0x18a>
				case STEP_TYPE_DRYING:
					if(step_drying_process())
 80029b4:	f000 f966 	bl	8002c84 <step_drying_process>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d019      	beq.n	80029f2 <pg_process_loop+0x18e>
					{
						LOGI(LOG_TAG,"drying step (%d) finish",running_step);
 80029be:	f001 fe1f 	bl	8004600 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	4b34      	ldr	r3, [pc, #208]	; (8002a98 <pg_process_loop+0x234>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	4936      	ldr	r1, [pc, #216]	; (8002aa4 <pg_process_loop+0x240>)
 80029ca:	483b      	ldr	r0, [pc, #236]	; (8002ab8 <pg_process_loop+0x254>)
 80029cc:	f00b fe88 	bl	800e6e0 <iprintf>
//						running_step++;
						pgstate = PG_STATE_START_HOMEX;
 80029d0:	4b30      	ldr	r3, [pc, #192]	; (8002a94 <pg_process_loop+0x230>)
 80029d2:	2203      	movs	r2, #3
 80029d4:	701a      	strb	r2, [r3, #0]
					}
					break;
 80029d6:	e00c      	b.n	80029f2 <pg_process_loop+0x18e>
				default:
					LOGI(LOG_TAG,"Unknown step type");
 80029d8:	f001 fe12 	bl	8004600 <HAL_GetTick>
 80029dc:	4603      	mov	r3, r0
 80029de:	461a      	mov	r2, r3
 80029e0:	4930      	ldr	r1, [pc, #192]	; (8002aa4 <pg_process_loop+0x240>)
 80029e2:	4836      	ldr	r0, [pc, #216]	; (8002abc <pg_process_loop+0x258>)
 80029e4:	f00b fe7c 	bl	800e6e0 <iprintf>
					break;
 80029e8:	e004      	b.n	80029f4 <pg_process_loop+0x190>
					break;
 80029ea:	bf00      	nop
 80029ec:	e04f      	b.n	8002a8e <pg_process_loop+0x22a>
					break;
 80029ee:	bf00      	nop
 80029f0:	e04d      	b.n	8002a8e <pg_process_loop+0x22a>
					break;
 80029f2:	bf00      	nop
			}
			break;
 80029f4:	e04b      	b.n	8002a8e <pg_process_loop+0x22a>
		case PG_STATE_START_HOMEX:
			LOGW(LOG_TAG,"all steps done, return x to home");
 80029f6:	f001 fe03 	bl	8004600 <HAL_GetTick>
 80029fa:	4603      	mov	r3, r0
 80029fc:	461a      	mov	r2, r3
 80029fe:	4929      	ldr	r1, [pc, #164]	; (8002aa4 <pg_process_loop+0x240>)
 8002a00:	482f      	ldr	r0, [pc, #188]	; (8002ac0 <pg_process_loop+0x25c>)
 8002a02:	f00b fe6d 	bl	800e6e0 <iprintf>
			mt_move_to_home(&x_motor);
 8002a06:	482f      	ldr	r0, [pc, #188]	; (8002ac4 <pg_process_loop+0x260>)
 8002a08:	f7ff fb04 	bl	8002014 <mt_move_to_home>
			pgstate= PG_STATE_WAIT_HOMEX;
 8002a0c:	4b21      	ldr	r3, [pc, #132]	; (8002a94 <pg_process_loop+0x230>)
 8002a0e:	2204      	movs	r2, #4
 8002a10:	701a      	strb	r2, [r3, #0]
			break;
 8002a12:	e03c      	b.n	8002a8e <pg_process_loop+0x22a>
		case PG_STATE_WAIT_HOMEX:
			if(isMotor_atHome(&x_motor)){
 8002a14:	482b      	ldr	r0, [pc, #172]	; (8002ac4 <pg_process_loop+0x260>)
 8002a16:	f7ff fb0e 	bl	8002036 <isMotor_atHome>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d035      	beq.n	8002a8c <pg_process_loop+0x228>
				LOGI(LOG_TAG,"return x to home done");
 8002a20:	f001 fdee 	bl	8004600 <HAL_GetTick>
 8002a24:	4603      	mov	r3, r0
 8002a26:	461a      	mov	r2, r3
 8002a28:	491e      	ldr	r1, [pc, #120]	; (8002aa4 <pg_process_loop+0x240>)
 8002a2a:	4827      	ldr	r0, [pc, #156]	; (8002ac8 <pg_process_loop+0x264>)
 8002a2c:	f00b fe58 	bl	800e6e0 <iprintf>
				pgstate= PG_STATE_END;
 8002a30:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <pg_process_loop+0x230>)
 8002a32:	2207      	movs	r2, #7
 8002a34:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a36:	e029      	b.n	8002a8c <pg_process_loop+0x228>
		case PG_STATE_STOP:
			x_mt_stop();
 8002a38:	f7ff fb5a 	bl	80020f0 <x_mt_stop>
			z_mt_stop();
 8002a3c:	f7ff fcfc 	bl	8002438 <z_mt_stop>
			step_shake_stop();
 8002a40:	f000 fa78 	bl	8002f34 <step_shake_stop>
			step_washing_stop();
 8002a44:	f000 fd82 	bl	800354c <step_washing_stop>
			step_drying_stop();
 8002a48:	f000 f910 	bl	8002c6c <step_drying_stop>
			LOGW(LOG_TAG,"Program is stopping\n");
 8002a4c:	f001 fdd8 	bl	8004600 <HAL_GetTick>
 8002a50:	4603      	mov	r3, r0
 8002a52:	461a      	mov	r2, r3
 8002a54:	4913      	ldr	r1, [pc, #76]	; (8002aa4 <pg_process_loop+0x240>)
 8002a56:	481d      	ldr	r0, [pc, #116]	; (8002acc <pg_process_loop+0x268>)
 8002a58:	f00b fe42 	bl	800e6e0 <iprintf>
			pgstate = PG_STATE_END;
 8002a5c:	4b0d      	ldr	r3, [pc, #52]	; (8002a94 <pg_process_loop+0x230>)
 8002a5e:	2207      	movs	r2, #7
 8002a60:	701a      	strb	r2, [r3, #0]
			break;
 8002a62:	e014      	b.n	8002a8e <pg_process_loop+0x22a>
		case PG_STATE_END:
//			printf("Program has ended\n");
			Dwin_switch_page(PAGE_RUNNING_END_PG);
 8002a64:	200d      	movs	r0, #13
 8002a66:	f7fd ff21 	bl	80008ac <Dwin_switch_page>
			LOGI(LOG_TAG,"Program %d has ended",running_pg);
 8002a6a:	f001 fdc9 	bl	8004600 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b0a      	ldr	r3, [pc, #40]	; (8002a9c <pg_process_loop+0x238>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	490b      	ldr	r1, [pc, #44]	; (8002aa4 <pg_process_loop+0x240>)
 8002a76:	4816      	ldr	r0, [pc, #88]	; (8002ad0 <pg_process_loop+0x26c>)
 8002a78:	f00b fe32 	bl	800e6e0 <iprintf>
			pgstate = PG_STATE_IDLE;
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <pg_process_loop+0x230>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	701a      	strb	r2, [r3, #0]
			// Code to handle the end state
			break;
 8002a82:	e004      	b.n	8002a8e <pg_process_loop+0x22a>
		default:
//			printf("Unknown program state\n");
			// Code to handle unknown state
			break;
 8002a84:	bf00      	nop
 8002a86:	e002      	b.n	8002a8e <pg_process_loop+0x22a>
				break;
 8002a88:	bf00      	nop
 8002a8a:	e000      	b.n	8002a8e <pg_process_loop+0x22a>
			break;
 8002a8c:	bf00      	nop
	}
}
 8002a8e:	bf00      	nop
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	20003ee2 	.word	0x20003ee2
 8002a98:	20003ee1 	.word	0x20003ee1
 8002a9c:	20003ee0 	.word	0x20003ee0
 8002aa0:	20003ea8 	.word	0x20003ea8
 8002aa4:	0800f680 	.word	0x0800f680
 8002aa8:	0800f8f4 	.word	0x0800f8f4
 8002aac:	20000188 	.word	0x20000188
 8002ab0:	0800f92c 	.word	0x0800f92c
 8002ab4:	0800f95c 	.word	0x0800f95c
 8002ab8:	0800f98c 	.word	0x0800f98c
 8002abc:	0800f9bc 	.word	0x0800f9bc
 8002ac0:	0800f9e8 	.word	0x0800f9e8
 8002ac4:	20003e78 	.word	0x20003e78
 8002ac8:	0800fa20 	.word	0x0800fa20
 8002acc:	0800fa50 	.word	0x0800fa50
 8002ad0:	0800fa7c 	.word	0x0800fa7c

08002ad4 <step_drying_start>:
extern uint8_t running_step;
_step_dy_state dy_state = DY_STATE_IDE;
_step_dy_state old_dy_state = DY_STATE_IDE;
_def_drying_step *drying_step;
int step_drying_start()
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af02      	add	r7, sp, #8
	if(dy_state == DY_STATE_IDE)
 8002ada:	4b16      	ldr	r3, [pc, #88]	; (8002b34 <step_drying_start+0x60>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d123      	bne.n	8002b2a <step_drying_start+0x56>
	{
		LOGI(LOG_TAG,"--------------- drying step: %d of program : %d----------------",running_step,running_pg);
 8002ae2:	f001 fd8d 	bl	8004600 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <step_drying_start+0x64>)
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	4619      	mov	r1, r3
 8002aee:	4b13      	ldr	r3, [pc, #76]	; (8002b3c <step_drying_start+0x68>)
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	460b      	mov	r3, r1
 8002af6:	4912      	ldr	r1, [pc, #72]	; (8002b40 <step_drying_start+0x6c>)
 8002af8:	4812      	ldr	r0, [pc, #72]	; (8002b44 <step_drying_start+0x70>)
 8002afa:	f00b fdf1 	bl	800e6e0 <iprintf>
		drying_step = (_def_drying_step *)&system_data.flash_data.Program_para[running_pg][running_step];
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <step_drying_start+0x68>)
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <step_drying_start+0x64>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4413      	add	r3, r2
 8002b10:	009a      	lsls	r2, r3, #2
 8002b12:	4413      	add	r3, r2
 8002b14:	440b      	add	r3, r1
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	3318      	adds	r3, #24
 8002b1a:	4a0b      	ldr	r2, [pc, #44]	; (8002b48 <step_drying_start+0x74>)
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <step_drying_start+0x78>)
 8002b22:	6013      	str	r3, [r2, #0]
		dy_state = DY_STATE_START;
 8002b24:	4b03      	ldr	r3, [pc, #12]	; (8002b34 <step_drying_start+0x60>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
	}
	return dy_state;
 8002b2a:	4b02      	ldr	r3, [pc, #8]	; (8002b34 <step_drying_start+0x60>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	20003ee8 	.word	0x20003ee8
 8002b38:	20003ee1 	.word	0x20003ee1
 8002b3c:	20003ee0 	.word	0x20003ee0
 8002b40:	0800faa8 	.word	0x0800faa8
 8002b44:	0800fab0 	.word	0x0800fab0
 8002b48:	20000188 	.word	0x20000188
 8002b4c:	20003eec 	.word	0x20003eec

08002b50 <heater_on>:
void heater_on()
{
 8002b50:	b598      	push	{r3, r4, r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	LOGI(LOG_TAG,"%lu heater_on",HAL_GetTick());
 8002b54:	f001 fd54 	bl	8004600 <HAL_GetTick>
 8002b58:	4604      	mov	r4, r0
 8002b5a:	f001 fd51 	bl	8004600 <HAL_GetTick>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4622      	mov	r2, r4
 8002b62:	4906      	ldr	r1, [pc, #24]	; (8002b7c <heater_on+0x2c>)
 8002b64:	4806      	ldr	r0, [pc, #24]	; (8002b80 <heater_on+0x30>)
 8002b66:	f00b fdbb 	bl	800e6e0 <iprintf>
	HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, HEATER_ON_LEVEL);
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b70:	4804      	ldr	r0, [pc, #16]	; (8002b84 <heater_on+0x34>)
 8002b72:	f002 fe3b 	bl	80057ec <HAL_GPIO_WritePin>
}
 8002b76:	bf00      	nop
 8002b78:	bd98      	pop	{r3, r4, r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	0800faa8 	.word	0x0800faa8
 8002b80:	0800fb08 	.word	0x0800fb08
 8002b84:	40020c00 	.word	0x40020c00

08002b88 <heater_off>:
void heater_off()
{
 8002b88:	b598      	push	{r3, r4, r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	LOGI(LOG_TAG,"%lu heater_off",HAL_GetTick());
 8002b8c:	f001 fd38 	bl	8004600 <HAL_GetTick>
 8002b90:	4604      	mov	r4, r0
 8002b92:	f001 fd35 	bl	8004600 <HAL_GetTick>
 8002b96:	4603      	mov	r3, r0
 8002b98:	4622      	mov	r2, r4
 8002b9a:	4906      	ldr	r1, [pc, #24]	; (8002bb4 <heater_off+0x2c>)
 8002b9c:	4806      	ldr	r0, [pc, #24]	; (8002bb8 <heater_off+0x30>)
 8002b9e:	f00b fd9f 	bl	800e6e0 <iprintf>
	HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, HEATER_OFF_LEVEL);
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ba8:	4804      	ldr	r0, [pc, #16]	; (8002bbc <heater_off+0x34>)
 8002baa:	f002 fe1f 	bl	80057ec <HAL_GPIO_WritePin>
}
 8002bae:	bf00      	nop
 8002bb0:	bd98      	pop	{r3, r4, r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	0800faa8 	.word	0x0800faa8
 8002bb8:	0800fb30 	.word	0x0800fb30
 8002bbc:	40020c00 	.word	0x40020c00

08002bc0 <show_infor_drying_step>:
void show_infor_drying_step(_def_drying_step dr_step)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	463c      	mov	r4, r7
 8002bc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOGW(LOG_INFO,"---------------INFOR_DRYING_STEP INDEX %d------------",running_step);
 8002bcc:	f001 fd18 	bl	8004600 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b1d      	ldr	r3, [pc, #116]	; (8002c48 <show_infor_drying_step+0x88>)
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	491d      	ldr	r1, [pc, #116]	; (8002c4c <show_infor_drying_step+0x8c>)
 8002bd8:	481d      	ldr	r0, [pc, #116]	; (8002c50 <show_infor_drying_step+0x90>)
 8002bda:	f00b fd81 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"1:Move to Wells: %d",dr_step.wells);
 8002bde:	f001 fd0f 	bl	8004600 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	783b      	ldrb	r3, [r7, #0]
 8002be6:	4919      	ldr	r1, [pc, #100]	; (8002c4c <show_infor_drying_step+0x8c>)
 8002be8:	481a      	ldr	r0, [pc, #104]	; (8002c54 <show_infor_drying_step+0x94>)
 8002bea:	f00b fd79 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"2:hearter on : %d",dr_step.heater_on_off);
 8002bee:	f001 fd07 	bl	8004600 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	887b      	ldrh	r3, [r7, #2]
 8002bf6:	4915      	ldr	r1, [pc, #84]	; (8002c4c <show_infor_drying_step+0x8c>)
 8002bf8:	4817      	ldr	r0, [pc, #92]	; (8002c58 <show_infor_drying_step+0x98>)
 8002bfa:	f00b fd71 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"3:move z to bottom");
 8002bfe:	f001 fcff 	bl	8004600 <HAL_GetTick>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	4911      	ldr	r1, [pc, #68]	; (8002c4c <show_infor_drying_step+0x8c>)
 8002c08:	4814      	ldr	r0, [pc, #80]	; (8002c5c <show_infor_drying_step+0x9c>)
 8002c0a:	f00b fd69 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"4:wait1 : %ds",dr_step.wait1);
 8002c0e:	f001 fcf7 	bl	8004600 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	88bb      	ldrh	r3, [r7, #4]
 8002c16:	490d      	ldr	r1, [pc, #52]	; (8002c4c <show_infor_drying_step+0x8c>)
 8002c18:	4811      	ldr	r0, [pc, #68]	; (8002c60 <show_infor_drying_step+0xa0>)
 8002c1a:	f00b fd61 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"5:hearter off : %d",dr_step.heater_on_off);
 8002c1e:	f001 fcef 	bl	8004600 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	887b      	ldrh	r3, [r7, #2]
 8002c26:	4909      	ldr	r1, [pc, #36]	; (8002c4c <show_infor_drying_step+0x8c>)
 8002c28:	480e      	ldr	r0, [pc, #56]	; (8002c64 <show_infor_drying_step+0xa4>)
 8002c2a:	f00b fd59 	bl	800e6e0 <iprintf>
	LOGW(LOG_INFO,"------------------------------------------");
 8002c2e:	f001 fce7 	bl	8004600 <HAL_GetTick>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461a      	mov	r2, r3
 8002c36:	4905      	ldr	r1, [pc, #20]	; (8002c4c <show_infor_drying_step+0x8c>)
 8002c38:	480b      	ldr	r0, [pc, #44]	; (8002c68 <show_infor_drying_step+0xa8>)
 8002c3a:	f00b fd51 	bl	800e6e0 <iprintf>
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd90      	pop	{r4, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	20003ee1 	.word	0x20003ee1
 8002c4c:	0800fb58 	.word	0x0800fb58
 8002c50:	0800fb60 	.word	0x0800fb60
 8002c54:	0800fbb0 	.word	0x0800fbb0
 8002c58:	0800fbdc 	.word	0x0800fbdc
 8002c5c:	0800fc08 	.word	0x0800fc08
 8002c60:	0800fc34 	.word	0x0800fc34
 8002c64:	0800fc5c 	.word	0x0800fc5c
 8002c68:	0800fc88 	.word	0x0800fc88

08002c6c <step_drying_stop>:
int step_drying_stop(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	dy_state = DY_STATE_IDE;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <step_drying_stop+0x14>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	701a      	strb	r2, [r3, #0]
	heater_off();
 8002c76:	f7ff ff87 	bl	8002b88 <heater_off>
	return 1;
 8002c7a:	2301      	movs	r3, #1
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	20003ee8 	.word	0x20003ee8

08002c84 <step_drying_process>:
int step_drying_process(void)
{
 8002c84:	b598      	push	{r3, r4, r7, lr}
 8002c86:	af00      	add	r7, sp, #0
	switch (dy_state) {
 8002c88:	4b83      	ldr	r3, [pc, #524]	; (8002e98 <step_drying_process+0x214>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	f200 80f6 	bhi.w	8002e7e <step_drying_process+0x1fa>
 8002c92:	a201      	add	r2, pc, #4	; (adr r2, 8002c98 <step_drying_process+0x14>)
 8002c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c98:	08002e7f 	.word	0x08002e7f
 8002c9c:	08002cbd 	.word	0x08002cbd
 8002ca0:	08002d1b 	.word	0x08002d1b
 8002ca4:	08002d61 	.word	0x08002d61
 8002ca8:	08002d8f 	.word	0x08002d8f
 8002cac:	08002df3 	.word	0x08002df3
 8002cb0:	08002e53 	.word	0x08002e53
 8002cb4:	08002e33 	.word	0x08002e33
 8002cb8:	08002e75 	.word	0x08002e75
	    case DY_STATE_IDE:
	        break;
	    case DY_STATE_START:
        	show_infor_drying_step(*drying_step);
 8002cbc:	4b77      	ldr	r3, [pc, #476]	; (8002e9c <step_drying_process+0x218>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	4610      	mov	r0, r2
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	4611      	mov	r1, r2
 8002cc8:	689c      	ldr	r4, [r3, #8]
 8002cca:	4622      	mov	r2, r4
 8002ccc:	68dc      	ldr	r4, [r3, #12]
 8002cce:	4623      	mov	r3, r4
 8002cd0:	f7ff ff76 	bl	8002bc0 <show_infor_drying_step>
            LOGI(LOG_TAG,"move x to %lu",system_data.flash_data.Well_position[drying_step->wells-1]);
 8002cd4:	f001 fc94 	bl	8004600 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	4b70      	ldr	r3, [pc, #448]	; (8002e9c <step_drying_process+0x218>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	496f      	ldr	r1, [pc, #444]	; (8002ea0 <step_drying_process+0x21c>)
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	496e      	ldr	r1, [pc, #440]	; (8002ea4 <step_drying_process+0x220>)
 8002cec:	486e      	ldr	r0, [pc, #440]	; (8002ea8 <step_drying_process+0x224>)
 8002cee:	f00b fcf7 	bl	800e6e0 <iprintf>
        	mt_set_target_position(&x_motor, system_data.flash_data.Well_position[drying_step->wells-1]); // m
 8002cf2:	4b6a      	ldr	r3, [pc, #424]	; (8002e9c <step_drying_process+0x218>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	4a69      	ldr	r2, [pc, #420]	; (8002ea0 <step_drying_process+0x21c>)
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	4413      	add	r3, r2
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4619      	mov	r1, r3
 8002d04:	4869      	ldr	r0, [pc, #420]	; (8002eac <step_drying_process+0x228>)
 8002d06:	f7ff f9a7 	bl	8002058 <mt_set_target_position>
        	old_dy_state = dy_state;
 8002d0a:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <step_drying_process+0x214>)
 8002d0c:	781a      	ldrb	r2, [r3, #0]
 8002d0e:	4b68      	ldr	r3, [pc, #416]	; (8002eb0 <step_drying_process+0x22c>)
 8002d10:	701a      	strb	r2, [r3, #0]
        	dy_state = DY_STATE_MOVE_WELLS; // Example transition to next state
 8002d12:	4b61      	ldr	r3, [pc, #388]	; (8002e98 <step_drying_process+0x214>)
 8002d14:	2202      	movs	r2, #2
 8002d16:	701a      	strb	r2, [r3, #0]
            break;
 8002d18:	e0ba      	b.n	8002e90 <step_drying_process+0x20c>
	    case DY_STATE_MOVE_WELLS:
        	if(Mt_get_current_prosition(x_motor) == system_data.flash_data.Well_position[drying_step->wells-1])
 8002d1a:	4b64      	ldr	r3, [pc, #400]	; (8002eac <step_drying_process+0x228>)
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	4b5f      	ldr	r3, [pc, #380]	; (8002e9c <step_drying_process+0x218>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	495e      	ldr	r1, [pc, #376]	; (8002ea0 <step_drying_process+0x21c>)
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	f040 80a7 	bne.w	8002e82 <step_drying_process+0x1fe>
			{
				LOGI(LOG_TAG,"move x done, move z to bottom");
 8002d34:	f001 fc64 	bl	8004600 <HAL_GetTick>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4959      	ldr	r1, [pc, #356]	; (8002ea4 <step_drying_process+0x220>)
 8002d3e:	485d      	ldr	r0, [pc, #372]	; (8002eb4 <step_drying_process+0x230>)
 8002d40:	f00b fcce 	bl	800e6e0 <iprintf>
				old_dy_state = dy_state;
 8002d44:	4b54      	ldr	r3, [pc, #336]	; (8002e98 <step_drying_process+0x214>)
 8002d46:	781a      	ldrb	r2, [r3, #0]
 8002d48:	4b59      	ldr	r3, [pc, #356]	; (8002eb0 <step_drying_process+0x22c>)
 8002d4a:	701a      	strb	r2, [r3, #0]
				mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 8002d4c:	4b54      	ldr	r3, [pc, #336]	; (8002ea0 <step_drying_process+0x21c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4619      	mov	r1, r3
 8002d52:	4859      	ldr	r0, [pc, #356]	; (8002eb8 <step_drying_process+0x234>)
 8002d54:	f7ff f980 	bl	8002058 <mt_set_target_position>
				dy_state = DY_STATE_Z_BOTTOM;
 8002d58:	4b4f      	ldr	r3, [pc, #316]	; (8002e98 <step_drying_process+0x214>)
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	701a      	strb	r2, [r3, #0]
			}
	        break;
 8002d5e:	e090      	b.n	8002e82 <step_drying_process+0x1fe>
	    case DY_STATE_Z_BOTTOM:
	    	if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8002d60:	4b55      	ldr	r3, [pc, #340]	; (8002eb8 <step_drying_process+0x234>)
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	4b4e      	ldr	r3, [pc, #312]	; (8002ea0 <step_drying_process+0x21c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	f040 808c 	bne.w	8002e86 <step_drying_process+0x202>
			{
				LOGI(LOG_TAG,"move z done");
 8002d6e:	f001 fc47 	bl	8004600 <HAL_GetTick>
 8002d72:	4603      	mov	r3, r0
 8002d74:	461a      	mov	r2, r3
 8002d76:	494b      	ldr	r1, [pc, #300]	; (8002ea4 <step_drying_process+0x220>)
 8002d78:	4850      	ldr	r0, [pc, #320]	; (8002ebc <step_drying_process+0x238>)
 8002d7a:	f00b fcb1 	bl	800e6e0 <iprintf>
				old_dy_state = dy_state;
 8002d7e:	4b46      	ldr	r3, [pc, #280]	; (8002e98 <step_drying_process+0x214>)
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <step_drying_process+0x22c>)
 8002d84:	701a      	strb	r2, [r3, #0]
				dy_state = DY_HEATER_ON; // Example transition to next state
 8002d86:	4b44      	ldr	r3, [pc, #272]	; (8002e98 <step_drying_process+0x214>)
 8002d88:	2204      	movs	r2, #4
 8002d8a:	701a      	strb	r2, [r3, #0]

			}
			break;
 8002d8c:	e07b      	b.n	8002e86 <step_drying_process+0x202>
	    case DY_HEATER_ON:
	    	if(drying_step->heater_on_off)
 8002d8e:	4b43      	ldr	r3, [pc, #268]	; (8002e9c <step_drying_process+0x218>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	885b      	ldrh	r3, [r3, #2]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00c      	beq.n	8002db2 <step_drying_process+0x12e>
			{
	    		LOGI(LOG_TAG,"heater on, wait : %ds",drying_step->wait1);
 8002d98:	f001 fc32 	bl	8004600 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b3f      	ldr	r3, [pc, #252]	; (8002e9c <step_drying_process+0x218>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	889b      	ldrh	r3, [r3, #4]
 8002da4:	493f      	ldr	r1, [pc, #252]	; (8002ea4 <step_drying_process+0x220>)
 8002da6:	4846      	ldr	r0, [pc, #280]	; (8002ec0 <step_drying_process+0x23c>)
 8002da8:	f00b fc9a 	bl	800e6e0 <iprintf>
	    		heater_on();
 8002dac:	f7ff fed0 	bl	8002b50 <heater_on>
 8002db0:	e009      	b.n	8002dc6 <step_drying_process+0x142>
			}else {
				LOGW(LOG_TAG,"skip heater on, wait : %ds",drying_step->wait1);
 8002db2:	f001 fc25 	bl	8004600 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <step_drying_process+0x218>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	889b      	ldrh	r3, [r3, #4]
 8002dbe:	4939      	ldr	r1, [pc, #228]	; (8002ea4 <step_drying_process+0x220>)
 8002dc0:	4840      	ldr	r0, [pc, #256]	; (8002ec4 <step_drying_process+0x240>)
 8002dc2:	f00b fc8d 	bl	800e6e0 <iprintf>
			}
	    	old_dy_state = dy_state;
 8002dc6:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <step_drying_process+0x214>)
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <step_drying_process+0x22c>)
 8002dcc:	701a      	strb	r2, [r3, #0]
	    	t_time = HAL_GetTick() +  (uint32_t)drying_step->wait1 * 1000;
 8002dce:	f001 fc17 	bl	8004600 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <step_drying_process+0x218>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	889b      	ldrh	r3, [r3, #4]
 8002dda:	4619      	mov	r1, r3
 8002ddc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002de0:	fb01 f303 	mul.w	r3, r1, r3
 8002de4:	4413      	add	r3, r2
 8002de6:	4a38      	ldr	r2, [pc, #224]	; (8002ec8 <step_drying_process+0x244>)
 8002de8:	6013      	str	r3, [r2, #0]
	    	dy_state = DY_STATE_WAIT; // Example transition to next state
 8002dea:	4b2b      	ldr	r3, [pc, #172]	; (8002e98 <step_drying_process+0x214>)
 8002dec:	2206      	movs	r2, #6
 8002dee:	701a      	strb	r2, [r3, #0]
	        break;
 8002df0:	e04e      	b.n	8002e90 <step_drying_process+0x20c>
	    case DY_HEATER_OFF:
	    	if(drying_step->heater_on_off) {
 8002df2:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <step_drying_process+0x218>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	885b      	ldrh	r3, [r3, #2]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00a      	beq.n	8002e12 <step_drying_process+0x18e>
				LOGI(LOG_TAG,"heater off");
 8002dfc:	f001 fc00 	bl	8004600 <HAL_GetTick>
 8002e00:	4603      	mov	r3, r0
 8002e02:	461a      	mov	r2, r3
 8002e04:	4927      	ldr	r1, [pc, #156]	; (8002ea4 <step_drying_process+0x220>)
 8002e06:	4831      	ldr	r0, [pc, #196]	; (8002ecc <step_drying_process+0x248>)
 8002e08:	f00b fc6a 	bl	800e6e0 <iprintf>
				heater_off();
 8002e0c:	f7ff febc 	bl	8002b88 <heater_off>
 8002e10:	e007      	b.n	8002e22 <step_drying_process+0x19e>
	    	} else {
	    		LOGW(LOG_TAG,"skip heater off");
 8002e12:	f001 fbf5 	bl	8004600 <HAL_GetTick>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4922      	ldr	r1, [pc, #136]	; (8002ea4 <step_drying_process+0x220>)
 8002e1c:	482c      	ldr	r0, [pc, #176]	; (8002ed0 <step_drying_process+0x24c>)
 8002e1e:	f00b fc5f 	bl	800e6e0 <iprintf>
	    	}
	    	mt_set_target_position(&z_motor,0);
 8002e22:	2100      	movs	r1, #0
 8002e24:	4824      	ldr	r0, [pc, #144]	; (8002eb8 <step_drying_process+0x234>)
 8002e26:	f7ff f917 	bl	8002058 <mt_set_target_position>
	    	dy_state = DY_STATE_Z_TOP;
 8002e2a:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <step_drying_process+0x214>)
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	701a      	strb	r2, [r3, #0]
	        break;
 8002e30:	e02e      	b.n	8002e90 <step_drying_process+0x20c>
	    case DY_STATE_Z_TOP:
        	if(Mt_get_current_prosition(z_motor) == 0){
 8002e32:	4b21      	ldr	r3, [pc, #132]	; (8002eb8 <step_drying_process+0x234>)
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d127      	bne.n	8002e8a <step_drying_process+0x206>
        		LOGI(LOG_TAG,"ztop done");
 8002e3a:	f001 fbe1 	bl	8004600 <HAL_GetTick>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	461a      	mov	r2, r3
 8002e42:	4918      	ldr	r1, [pc, #96]	; (8002ea4 <step_drying_process+0x220>)
 8002e44:	4823      	ldr	r0, [pc, #140]	; (8002ed4 <step_drying_process+0x250>)
 8002e46:	f00b fc4b 	bl	800e6e0 <iprintf>
        		dy_state = DY_STATE_Z_FINISH;
 8002e4a:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <step_drying_process+0x214>)
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002e50:	e01b      	b.n	8002e8a <step_drying_process+0x206>
	    case DY_STATE_WAIT:
	        // code to execute when the state is DY_STATE_WAIT
	    	if(HAL_GetTick() > t_time)
 8002e52:	f001 fbd5 	bl	8004600 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <step_drying_process+0x244>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d916      	bls.n	8002e8e <step_drying_process+0x20a>
			{
				switch (old_dy_state) {
 8002e60:	4b13      	ldr	r3, [pc, #76]	; (8002eb0 <step_drying_process+0x22c>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d103      	bne.n	8002e70 <step_drying_process+0x1ec>
					case DY_HEATER_ON:
							dy_state = DY_HEATER_OFF; // Example transition to next state
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <step_drying_process+0x214>)
 8002e6a:	2205      	movs	r2, #5
 8002e6c:	701a      	strb	r2, [r3, #0]
						break;
 8002e6e:	e000      	b.n	8002e72 <step_drying_process+0x1ee>
				    default:
				        break;
 8002e70:	bf00      	nop
				}
			}
	        break;
 8002e72:	e00c      	b.n	8002e8e <step_drying_process+0x20a>
	    case DY_STATE_Z_FINISH:
	    	dy_state = DY_STATE_IDE;
 8002e74:	4b08      	ldr	r3, [pc, #32]	; (8002e98 <step_drying_process+0x214>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
	    	return 1;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e009      	b.n	8002e92 <step_drying_process+0x20e>

	        break;
	    default:
	        break;
 8002e7e:	bf00      	nop
 8002e80:	e006      	b.n	8002e90 <step_drying_process+0x20c>
	        break;
 8002e82:	bf00      	nop
 8002e84:	e004      	b.n	8002e90 <step_drying_process+0x20c>
			break;
 8002e86:	bf00      	nop
 8002e88:	e002      	b.n	8002e90 <step_drying_process+0x20c>
			break;
 8002e8a:	bf00      	nop
 8002e8c:	e000      	b.n	8002e90 <step_drying_process+0x20c>
	        break;
 8002e8e:	bf00      	nop
	}
	return 0;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	bd98      	pop	{r3, r4, r7, pc}
 8002e96:	bf00      	nop
 8002e98:	20003ee8 	.word	0x20003ee8
 8002e9c:	20003eec 	.word	0x20003eec
 8002ea0:	20000188 	.word	0x20000188
 8002ea4:	0800faa8 	.word	0x0800faa8
 8002ea8:	0800fccc 	.word	0x0800fccc
 8002eac:	20003e78 	.word	0x20003e78
 8002eb0:	20003ee9 	.word	0x20003ee9
 8002eb4:	0800fcf4 	.word	0x0800fcf4
 8002eb8:	20003ea8 	.word	0x20003ea8
 8002ebc:	0800fd2c 	.word	0x0800fd2c
 8002ec0:	0800fd50 	.word	0x0800fd50
 8002ec4:	0800fd80 	.word	0x0800fd80
 8002ec8:	20003ee4 	.word	0x20003ee4
 8002ecc:	0800fdb4 	.word	0x0800fdb4
 8002ed0:	0800fdd8 	.word	0x0800fdd8
 8002ed4:	0800fe00 	.word	0x0800fe00

08002ed8 <step_shake_start>:
extern uint8_t running_step;
_def_shake_step *shake_step;
_step_shake_state shake_state = SHAKE_STATE_IDE;

int step_shake_start(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
	if(shake_state == SHAKE_STATE_IDE)
 8002edc:	4b10      	ldr	r3, [pc, #64]	; (8002f20 <step_shake_start+0x48>)
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d115      	bne.n	8002f10 <step_shake_start+0x38>
	{
		shake_step = (_def_shake_step *)&system_data.flash_data.Program_para[running_pg][running_step];
 8002ee4:	4b0f      	ldr	r3, [pc, #60]	; (8002f24 <step_shake_start+0x4c>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <step_shake_start+0x50>)
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	4619      	mov	r1, r3
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009a      	lsls	r2, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	440b      	add	r3, r1
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	3318      	adds	r3, #24
 8002f00:	4a0a      	ldr	r2, [pc, #40]	; (8002f2c <step_shake_start+0x54>)
 8002f02:	4413      	add	r3, r2
 8002f04:	3304      	adds	r3, #4
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <step_shake_start+0x58>)
 8002f08:	6013      	str	r3, [r2, #0]
		shake_state = SHAKE_STATE_START;
 8002f0a:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <step_shake_start+0x48>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
	}
	return shake_state;
 8002f10:	4b03      	ldr	r3, [pc, #12]	; (8002f20 <step_shake_start+0x48>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20003ef8 	.word	0x20003ef8
 8002f24:	20003ee0 	.word	0x20003ee0
 8002f28:	20003ee1 	.word	0x20003ee1
 8002f2c:	20000188 	.word	0x20000188
 8002f30:	20003ef4 	.word	0x20003ef4

08002f34 <step_shake_stop>:

int step_shake_stop(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
	shake_state = SHAKE_STATE_IDE;
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <step_shake_stop+0x18>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	701a      	strb	r2, [r3, #0]
	return 1;
 8002f3e:	2301      	movs	r3, #1
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	20003ef8 	.word	0x20003ef8

08002f50 <show_infor_shake_step>:

//return 1 mean step done
void show_infor_shake_step(_def_shake_step shake_step)
{
 8002f50:	b590      	push	{r4, r7, lr}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	463c      	mov	r4, r7
 8002f58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOGW(LOG_INFO,"---------------INFOR_SHAKE_STEP: %d------------",running_step);
 8002f5c:	f001 fb50 	bl	8004600 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b29      	ldr	r3, [pc, #164]	; (8003008 <show_infor_shake_step+0xb8>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	4929      	ldr	r1, [pc, #164]	; (800300c <show_infor_shake_step+0xbc>)
 8002f68:	4829      	ldr	r0, [pc, #164]	; (8003010 <show_infor_shake_step+0xc0>)
 8002f6a:	f00b fbb9 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"1:Move to Wells: %d",shake_step.wells);
 8002f6e:	f001 fb47 	bl	8004600 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	783b      	ldrb	r3, [r7, #0]
 8002f76:	4925      	ldr	r1, [pc, #148]	; (800300c <show_infor_shake_step+0xbc>)
 8002f78:	4826      	ldr	r0, [pc, #152]	; (8003014 <show_infor_shake_step+0xc4>)
 8002f7a:	f00b fbb1 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"2:wait1 : %ds",shake_step.wait1);
 8002f7e:	f001 fb3f 	bl	8004600 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	887b      	ldrh	r3, [r7, #2]
 8002f86:	4921      	ldr	r1, [pc, #132]	; (800300c <show_infor_shake_step+0xbc>)
 8002f88:	4823      	ldr	r0, [pc, #140]	; (8003018 <show_infor_shake_step+0xc8>)
 8002f8a:	f00b fba9 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"3:move z to bottom");
 8002f8e:	f001 fb37 	bl	8004600 <HAL_GetTick>
 8002f92:	4603      	mov	r3, r0
 8002f94:	461a      	mov	r2, r3
 8002f96:	491d      	ldr	r1, [pc, #116]	; (800300c <show_infor_shake_step+0xbc>)
 8002f98:	4820      	ldr	r0, [pc, #128]	; (800301c <show_infor_shake_step+0xcc>)
 8002f9a:	f00b fba1 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"4:wait2 : %ds",shake_step.wait2);
 8002f9e:	f001 fb2f 	bl	8004600 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	88bb      	ldrh	r3, [r7, #4]
 8002fa6:	4919      	ldr	r1, [pc, #100]	; (800300c <show_infor_shake_step+0xbc>)
 8002fa8:	481d      	ldr	r0, [pc, #116]	; (8003020 <show_infor_shake_step+0xd0>)
 8002faa:	f00b fb99 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"5:shake on : %ds",shake_step.shake);
 8002fae:	f001 fb27 	bl	8004600 <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	4915      	ldr	r1, [pc, #84]	; (800300c <show_infor_shake_step+0xbc>)
 8002fb8:	481a      	ldr	r0, [pc, #104]	; (8003024 <show_infor_shake_step+0xd4>)
 8002fba:	f00b fb91 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"6:wait4 : %ds",shake_step.wait4);
 8002fbe:	f001 fb1f 	bl	8004600 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	893b      	ldrh	r3, [r7, #8]
 8002fc6:	4911      	ldr	r1, [pc, #68]	; (800300c <show_infor_shake_step+0xbc>)
 8002fc8:	4817      	ldr	r0, [pc, #92]	; (8003028 <show_infor_shake_step+0xd8>)
 8002fca:	f00b fb89 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"7:move z to top");
 8002fce:	f001 fb17 	bl	8004600 <HAL_GetTick>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	490d      	ldr	r1, [pc, #52]	; (800300c <show_infor_shake_step+0xbc>)
 8002fd8:	4814      	ldr	r0, [pc, #80]	; (800302c <show_infor_shake_step+0xdc>)
 8002fda:	f00b fb81 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"8:wait5 : %ds",shake_step.wait5);
 8002fde:	f001 fb0f 	bl	8004600 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	897b      	ldrh	r3, [r7, #10]
 8002fe6:	4909      	ldr	r1, [pc, #36]	; (800300c <show_infor_shake_step+0xbc>)
 8002fe8:	4811      	ldr	r0, [pc, #68]	; (8003030 <show_infor_shake_step+0xe0>)
 8002fea:	f00b fb79 	bl	800e6e0 <iprintf>
	LOGW(LOG_INFO,"------------------------------------------");
 8002fee:	f001 fb07 	bl	8004600 <HAL_GetTick>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	4905      	ldr	r1, [pc, #20]	; (800300c <show_infor_shake_step+0xbc>)
 8002ff8:	480e      	ldr	r0, [pc, #56]	; (8003034 <show_infor_shake_step+0xe4>)
 8002ffa:	f00b fb71 	bl	800e6e0 <iprintf>
}
 8002ffe:	bf00      	nop
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	bd90      	pop	{r4, r7, pc}
 8003006:	bf00      	nop
 8003008:	20003ee1 	.word	0x20003ee1
 800300c:	0800fe24 	.word	0x0800fe24
 8003010:	0800fe2c 	.word	0x0800fe2c
 8003014:	0800fe74 	.word	0x0800fe74
 8003018:	0800fea0 	.word	0x0800fea0
 800301c:	0800fec8 	.word	0x0800fec8
 8003020:	0800fef4 	.word	0x0800fef4
 8003024:	0800ff1c 	.word	0x0800ff1c
 8003028:	0800ff44 	.word	0x0800ff44
 800302c:	0800ff6c 	.word	0x0800ff6c
 8003030:	0800ff94 	.word	0x0800ff94
 8003034:	0800ffbc 	.word	0x0800ffbc

08003038 <step_shake_process>:
int step_shake_process(void){
 8003038:	b598      	push	{r3, r4, r7, lr}
 800303a:	af00      	add	r7, sp, #0
	static _step_shake_state old_state = SHAKE_STATE_IDE;
	switch (shake_state) {
 800303c:	4ba4      	ldr	r3, [pc, #656]	; (80032d0 <step_shake_process+0x298>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b07      	cmp	r3, #7
 8003042:	f200 8198 	bhi.w	8003376 <step_shake_process+0x33e>
 8003046:	a201      	add	r2, pc, #4	; (adr r2, 800304c <step_shake_process+0x14>)
 8003048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800304c:	08003377 	.word	0x08003377
 8003050:	0800306d 	.word	0x0800306d
 8003054:	080030cb 	.word	0x080030cb
 8003058:	08003125 	.word	0x08003125
 800305c:	080031f7 	.word	0x080031f7
 8003060:	08003245 	.word	0x08003245
 8003064:	0800330d 	.word	0x0800330d
 8003068:	08003355 	.word	0x08003355
//	                old_state = shake_state;
//	                shake_state = SHAKE_STATE_START;
	                break;
	            case SHAKE_STATE_START:
	                // handle SHAKE_STATE_START -> move x to well
	            	show_infor_shake_step(*shake_step);
 800306c:	4b99      	ldr	r3, [pc, #612]	; (80032d4 <step_shake_process+0x29c>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	4610      	mov	r0, r2
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4611      	mov	r1, r2
 8003078:	689c      	ldr	r4, [r3, #8]
 800307a:	4622      	mov	r2, r4
 800307c:	68dc      	ldr	r4, [r3, #12]
 800307e:	4623      	mov	r3, r4
 8003080:	f7ff ff66 	bl	8002f50 <show_infor_shake_step>

	            	LOGI(LOG_TAG,"move x to %lu",system_data.flash_data.Well_position[shake_step->wells-1]);
 8003084:	f001 fabc 	bl	8004600 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	4b92      	ldr	r3, [pc, #584]	; (80032d4 <step_shake_process+0x29c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	3b01      	subs	r3, #1
 8003092:	4991      	ldr	r1, [pc, #580]	; (80032d8 <step_shake_process+0x2a0>)
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	4990      	ldr	r1, [pc, #576]	; (80032dc <step_shake_process+0x2a4>)
 800309c:	4890      	ldr	r0, [pc, #576]	; (80032e0 <step_shake_process+0x2a8>)
 800309e:	f00b fb1f 	bl	800e6e0 <iprintf>
	            	mt_set_target_position(&x_motor, system_data.flash_data.Well_position[shake_step->wells-1]);
 80030a2:	4b8c      	ldr	r3, [pc, #560]	; (80032d4 <step_shake_process+0x29c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	3b01      	subs	r3, #1
 80030aa:	4a8b      	ldr	r2, [pc, #556]	; (80032d8 <step_shake_process+0x2a0>)
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	4413      	add	r3, r2
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4619      	mov	r1, r3
 80030b4:	488b      	ldr	r0, [pc, #556]	; (80032e4 <step_shake_process+0x2ac>)
 80030b6:	f7fe ffcf 	bl	8002058 <mt_set_target_position>
	                old_state = shake_state;
 80030ba:	4b85      	ldr	r3, [pc, #532]	; (80032d0 <step_shake_process+0x298>)
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	4b8a      	ldr	r3, [pc, #552]	; (80032e8 <step_shake_process+0x2b0>)
 80030c0:	701a      	strb	r2, [r3, #0]
	                shake_state = SHAKE_STATE_MOVE_WELLS;
 80030c2:	4b83      	ldr	r3, [pc, #524]	; (80032d0 <step_shake_process+0x298>)
 80030c4:	2202      	movs	r2, #2
 80030c6:	701a      	strb	r2, [r3, #0]
	                break;
 80030c8:	e160      	b.n	800338c <step_shake_process+0x354>
	            case SHAKE_STATE_MOVE_WELLS:
	                // handle SHAKE_STATE_MOVE_WELLS
	            	if(Mt_get_current_prosition(x_motor) == system_data.flash_data.Well_position[shake_step->wells-1])
 80030ca:	4b86      	ldr	r3, [pc, #536]	; (80032e4 <step_shake_process+0x2ac>)
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	4b81      	ldr	r3, [pc, #516]	; (80032d4 <step_shake_process+0x29c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	3b01      	subs	r3, #1
 80030d6:	4980      	ldr	r1, [pc, #512]	; (80032d8 <step_shake_process+0x2a0>)
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	429a      	cmp	r2, r3
 80030e0:	f040 814b 	bne.w	800337a <step_shake_process+0x342>
	            	{
	            		LOGI(LOG_TAG,"move x done, wait %ds",shake_step->wait1);
 80030e4:	f001 fa8c 	bl	8004600 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b7a      	ldr	r3, [pc, #488]	; (80032d4 <step_shake_process+0x29c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	885b      	ldrh	r3, [r3, #2]
 80030f0:	497a      	ldr	r1, [pc, #488]	; (80032dc <step_shake_process+0x2a4>)
 80030f2:	487e      	ldr	r0, [pc, #504]	; (80032ec <step_shake_process+0x2b4>)
 80030f4:	f00b faf4 	bl	800e6e0 <iprintf>
						old_state = shake_state;
 80030f8:	4b75      	ldr	r3, [pc, #468]	; (80032d0 <step_shake_process+0x298>)
 80030fa:	781a      	ldrb	r2, [r3, #0]
 80030fc:	4b7a      	ldr	r3, [pc, #488]	; (80032e8 <step_shake_process+0x2b0>)
 80030fe:	701a      	strb	r2, [r3, #0]
						shake_state = SHAKE_STATE_WAIT;
 8003100:	4b73      	ldr	r3, [pc, #460]	; (80032d0 <step_shake_process+0x298>)
 8003102:	2203      	movs	r2, #3
 8003104:	701a      	strb	r2, [r3, #0]
						t_time = HAL_GetTick() +  (uint32_t)shake_step->wait1 * 1000;
 8003106:	f001 fa7b 	bl	8004600 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	4b71      	ldr	r3, [pc, #452]	; (80032d4 <step_shake_process+0x29c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	885b      	ldrh	r3, [r3, #2]
 8003112:	4619      	mov	r1, r3
 8003114:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	4413      	add	r3, r2
 800311e:	4a74      	ldr	r2, [pc, #464]	; (80032f0 <step_shake_process+0x2b8>)
 8003120:	6013      	str	r3, [r2, #0]
	            	}
	                break;
 8003122:	e12a      	b.n	800337a <step_shake_process+0x342>
	            case SHAKE_STATE_WAIT:
	                // handle SHAKE_STATE_WAIT
	            	if(HAL_GetTick() > t_time)
 8003124:	f001 fa6c 	bl	8004600 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	4b71      	ldr	r3, [pc, #452]	; (80032f0 <step_shake_process+0x2b8>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	f240 8125 	bls.w	800337e <step_shake_process+0x346>
	            	{
	            		switch (old_state) {
 8003134:	4b6c      	ldr	r3, [pc, #432]	; (80032e8 <step_shake_process+0x2b0>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	3b02      	subs	r3, #2
 800313a:	2b05      	cmp	r3, #5
 800313c:	d859      	bhi.n	80031f2 <step_shake_process+0x1ba>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <step_shake_process+0x10c>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	0800315d 	.word	0x0800315d
 8003148:	080031f3 	.word	0x080031f3
 800314c:	08003183 	.word	0x08003183
 8003150:	080031cb 	.word	0x080031cb
 8003154:	080031eb 	.word	0x080031eb
 8003158:	080031f3 	.word	0x080031f3
	            		    case SHAKE_STATE_MOVE_WELLS:
	            		    	LOGI(LOG_TAG,"move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
 800315c:	f001 fa50 	bl	8004600 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	4b5d      	ldr	r3, [pc, #372]	; (80032d8 <step_shake_process+0x2a0>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	495d      	ldr	r1, [pc, #372]	; (80032dc <step_shake_process+0x2a4>)
 8003168:	4862      	ldr	r0, [pc, #392]	; (80032f4 <step_shake_process+0x2bc>)
 800316a:	f00b fab9 	bl	800e6e0 <iprintf>
	            		    	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 800316e:	4b5a      	ldr	r3, [pc, #360]	; (80032d8 <step_shake_process+0x2a0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4619      	mov	r1, r3
 8003174:	4860      	ldr	r0, [pc, #384]	; (80032f8 <step_shake_process+0x2c0>)
 8003176:	f7fe ff6f 	bl	8002058 <mt_set_target_position>
	            		    	shake_state = SHAKE_STATE_Z_BOTTOM;
 800317a:	4b55      	ldr	r3, [pc, #340]	; (80032d0 <step_shake_process+0x298>)
 800317c:	2204      	movs	r2, #4
 800317e:	701a      	strb	r2, [r3, #0]
	            		        break;
 8003180:	e038      	b.n	80031f4 <step_shake_process+0x1bc>
	            		    case SHAKE_STATE_Z_BOTTOM:
	            		    	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 8003182:	4b55      	ldr	r3, [pc, #340]	; (80032d8 <step_shake_process+0x2a0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800318a:	4619      	mov	r1, r3
 800318c:	485a      	ldr	r0, [pc, #360]	; (80032f8 <step_shake_process+0x2c0>)
 800318e:	f7fe ff63 	bl	8002058 <mt_set_target_position>
	            		    	t_time = HAL_GetTick() +  (uint32_t)shake_step->shake * 1000;
 8003192:	f001 fa35 	bl	8004600 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	4b4e      	ldr	r3, [pc, #312]	; (80032d4 <step_shake_process+0x29c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	88db      	ldrh	r3, [r3, #6]
 800319e:	4619      	mov	r1, r3
 80031a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	4a51      	ldr	r2, [pc, #324]	; (80032f0 <step_shake_process+0x2b8>)
 80031ac:	6013      	str	r3, [r2, #0]
	            		    	LOGI(LOG_TAG,"start shake in %ds",shake_step->shake);
 80031ae:	f001 fa27 	bl	8004600 <HAL_GetTick>
 80031b2:	4602      	mov	r2, r0
 80031b4:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <step_shake_process+0x29c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	88db      	ldrh	r3, [r3, #6]
 80031ba:	4948      	ldr	r1, [pc, #288]	; (80032dc <step_shake_process+0x2a4>)
 80031bc:	484f      	ldr	r0, [pc, #316]	; (80032fc <step_shake_process+0x2c4>)
 80031be:	f00b fa8f 	bl	800e6e0 <iprintf>
	            		    	shake_state = SHAKE_STATE_SHAKE;
 80031c2:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <step_shake_process+0x298>)
 80031c4:	2205      	movs	r2, #5
 80031c6:	701a      	strb	r2, [r3, #0]
	            		        break;
 80031c8:	e014      	b.n	80031f4 <step_shake_process+0x1bc>
	            		    case SHAKE_STATE_SHAKE:
	            		    	LOGI(LOG_TAG,"move z to top");
 80031ca:	f001 fa19 	bl	8004600 <HAL_GetTick>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	4942      	ldr	r1, [pc, #264]	; (80032dc <step_shake_process+0x2a4>)
 80031d4:	484a      	ldr	r0, [pc, #296]	; (8003300 <step_shake_process+0x2c8>)
 80031d6:	f00b fa83 	bl	800e6e0 <iprintf>
	            		    	mt_set_target_position(&z_motor,0);
 80031da:	2100      	movs	r1, #0
 80031dc:	4846      	ldr	r0, [pc, #280]	; (80032f8 <step_shake_process+0x2c0>)
 80031de:	f7fe ff3b 	bl	8002058 <mt_set_target_position>
	            		    	shake_state = SHAKE_STATE_Z_TOP;
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <step_shake_process+0x298>)
 80031e4:	2206      	movs	r2, #6
 80031e6:	701a      	strb	r2, [r3, #0]
	            		        break;
 80031e8:	e004      	b.n	80031f4 <step_shake_process+0x1bc>
	            		    case SHAKE_STATE_Z_TOP:
	            		    	shake_state = SHAKE_STATE_Z_FINISH;
 80031ea:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <step_shake_process+0x298>)
 80031ec:	2207      	movs	r2, #7
 80031ee:	701a      	strb	r2, [r3, #0]
	            		        break;
 80031f0:	e000      	b.n	80031f4 <step_shake_process+0x1bc>
	            		    case SHAKE_STATE_Z_FINISH:
	            		        // handle SHAKE_STATE_Z_FINISH
	            		        break;
	            		    default:
	            		        // handle unknown state
	            		        break;
 80031f2:	bf00      	nop
	            		}
	            	}
	                break;
 80031f4:	e0c3      	b.n	800337e <step_shake_process+0x346>
	            case SHAKE_STATE_Z_BOTTOM:
	                // handle SHAKE_STATE_Z_BOTTOM
	            	if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 80031f6:	4b40      	ldr	r3, [pc, #256]	; (80032f8 <step_shake_process+0x2c0>)
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <step_shake_process+0x2a0>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	f040 80bf 	bne.w	8003382 <step_shake_process+0x34a>
					{
						old_state = shake_state;
 8003204:	4b32      	ldr	r3, [pc, #200]	; (80032d0 <step_shake_process+0x298>)
 8003206:	781a      	ldrb	r2, [r3, #0]
 8003208:	4b37      	ldr	r3, [pc, #220]	; (80032e8 <step_shake_process+0x2b0>)
 800320a:	701a      	strb	r2, [r3, #0]
						shake_state = SHAKE_STATE_WAIT;
 800320c:	4b30      	ldr	r3, [pc, #192]	; (80032d0 <step_shake_process+0x298>)
 800320e:	2203      	movs	r2, #3
 8003210:	701a      	strb	r2, [r3, #0]
						LOGI(LOG_TAG,"wait2 %d",shake_step->wait2);
 8003212:	f001 f9f5 	bl	8004600 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	4b2e      	ldr	r3, [pc, #184]	; (80032d4 <step_shake_process+0x29c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	889b      	ldrh	r3, [r3, #4]
 800321e:	492f      	ldr	r1, [pc, #188]	; (80032dc <step_shake_process+0x2a4>)
 8003220:	4838      	ldr	r0, [pc, #224]	; (8003304 <step_shake_process+0x2cc>)
 8003222:	f00b fa5d 	bl	800e6e0 <iprintf>
						t_time = HAL_GetTick() +  (uint32_t)shake_step->wait2 * 1000;
 8003226:	f001 f9eb 	bl	8004600 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	4b29      	ldr	r3, [pc, #164]	; (80032d4 <step_shake_process+0x29c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	889b      	ldrh	r3, [r3, #4]
 8003232:	4619      	mov	r1, r3
 8003234:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003238:	fb01 f303 	mul.w	r3, r1, r3
 800323c:	4413      	add	r3, r2
 800323e:	4a2c      	ldr	r2, [pc, #176]	; (80032f0 <step_shake_process+0x2b8>)
 8003240:	6013      	str	r3, [r2, #0]
					}
//					break;
//	                old_state = shake_state;
//	                shake_state = SHAKE_STATE_SHAKE;
	                break;
 8003242:	e09e      	b.n	8003382 <step_shake_process+0x34a>
	            case SHAKE_STATE_SHAKE:
	                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos - SHAKING_DISTANCE )
 8003244:	4b2c      	ldr	r3, [pc, #176]	; (80032f8 <step_shake_process+0x2c0>)
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	4b23      	ldr	r3, [pc, #140]	; (80032d8 <step_shake_process+0x2a0>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003250:	429a      	cmp	r2, r3
 8003252:	d105      	bne.n	8003260 <step_shake_process+0x228>
	            	{
	                	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos);
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <step_shake_process+0x2a0>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4619      	mov	r1, r3
 800325a:	4827      	ldr	r0, [pc, #156]	; (80032f8 <step_shake_process+0x2c0>)
 800325c:	f7fe fefc 	bl	8002058 <mt_set_target_position>
	            	}
	                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <step_shake_process+0x2c0>)
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <step_shake_process+0x2a0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	f040 808c 	bne.w	8003386 <step_shake_process+0x34e>
			{
	                	if(HAL_GetTick() > t_time)
 800326e:	f001 f9c7 	bl	8004600 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	4b1e      	ldr	r3, [pc, #120]	; (80032f0 <step_shake_process+0x2b8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d91f      	bls.n	80032bc <step_shake_process+0x284>
	                	{
	                		LOGI(LOG_TAG,"shake done, wait4 : %d",shake_step->wait4);
 800327c:	f001 f9c0 	bl	8004600 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <step_shake_process+0x29c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	891b      	ldrh	r3, [r3, #8]
 8003288:	4914      	ldr	r1, [pc, #80]	; (80032dc <step_shake_process+0x2a4>)
 800328a:	481f      	ldr	r0, [pc, #124]	; (8003308 <step_shake_process+0x2d0>)
 800328c:	f00b fa28 	bl	800e6e0 <iprintf>
	    	                old_state = shake_state;
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <step_shake_process+0x298>)
 8003292:	781a      	ldrb	r2, [r3, #0]
 8003294:	4b14      	ldr	r3, [pc, #80]	; (80032e8 <step_shake_process+0x2b0>)
 8003296:	701a      	strb	r2, [r3, #0]
	    	                t_time = HAL_GetTick() +  (uint32_t)shake_step->wait4 * 1000;
 8003298:	f001 f9b2 	bl	8004600 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	4b0d      	ldr	r3, [pc, #52]	; (80032d4 <step_shake_process+0x29c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	891b      	ldrh	r3, [r3, #8]
 80032a4:	4619      	mov	r1, r3
 80032a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032aa:	fb01 f303 	mul.w	r3, r1, r3
 80032ae:	4413      	add	r3, r2
 80032b0:	4a0f      	ldr	r2, [pc, #60]	; (80032f0 <step_shake_process+0x2b8>)
 80032b2:	6013      	str	r3, [r2, #0]
	    	                shake_state = SHAKE_STATE_WAIT;
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <step_shake_process+0x298>)
 80032b6:	2203      	movs	r2, #3
 80032b8:	701a      	strb	r2, [r3, #0]
	                	else
	                	{
	                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-SHAKING_DISTANCE);
	                	}
			}
	                break;
 80032ba:	e064      	b.n	8003386 <step_shake_process+0x34e>
	                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-SHAKING_DISTANCE);
 80032bc:	4b06      	ldr	r3, [pc, #24]	; (80032d8 <step_shake_process+0x2a0>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80032c4:	4619      	mov	r1, r3
 80032c6:	480c      	ldr	r0, [pc, #48]	; (80032f8 <step_shake_process+0x2c0>)
 80032c8:	f7fe fec6 	bl	8002058 <mt_set_target_position>
	                break;
 80032cc:	e05b      	b.n	8003386 <step_shake_process+0x34e>
 80032ce:	bf00      	nop
 80032d0:	20003ef8 	.word	0x20003ef8
 80032d4:	20003ef4 	.word	0x20003ef4
 80032d8:	20000188 	.word	0x20000188
 80032dc:	08010000 	.word	0x08010000
 80032e0:	08010008 	.word	0x08010008
 80032e4:	20003e78 	.word	0x20003e78
 80032e8:	20003ef9 	.word	0x20003ef9
 80032ec:	08010030 	.word	0x08010030
 80032f0:	20003ef0 	.word	0x20003ef0
 80032f4:	08010060 	.word	0x08010060
 80032f8:	20003ea8 	.word	0x20003ea8
 80032fc:	0801008c 	.word	0x0801008c
 8003300:	080100b8 	.word	0x080100b8
 8003304:	080100e0 	.word	0x080100e0
 8003308:	08010100 	.word	0x08010100
	            case SHAKE_STATE_Z_TOP:
	            	if(Mt_get_current_prosition(z_motor) == 0)
 800330c:	4b21      	ldr	r3, [pc, #132]	; (8003394 <step_shake_process+0x35c>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d13a      	bne.n	800338a <step_shake_process+0x352>
					{
	            		LOGI(LOG_TAG,"all done wait5: %d",shake_step->wait5);
 8003314:	f001 f974 	bl	8004600 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <step_shake_process+0x360>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	895b      	ldrh	r3, [r3, #10]
 8003320:	491e      	ldr	r1, [pc, #120]	; (800339c <step_shake_process+0x364>)
 8003322:	481f      	ldr	r0, [pc, #124]	; (80033a0 <step_shake_process+0x368>)
 8003324:	f00b f9dc 	bl	800e6e0 <iprintf>
	            		old_state = shake_state;
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <step_shake_process+0x36c>)
 800332a:	781a      	ldrb	r2, [r3, #0]
 800332c:	4b1e      	ldr	r3, [pc, #120]	; (80033a8 <step_shake_process+0x370>)
 800332e:	701a      	strb	r2, [r3, #0]
						t_time = HAL_GetTick() +  (uint32_t)shake_step->wait5 * 1000;
 8003330:	f001 f966 	bl	8004600 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	4b18      	ldr	r3, [pc, #96]	; (8003398 <step_shake_process+0x360>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	895b      	ldrh	r3, [r3, #10]
 800333c:	4619      	mov	r1, r3
 800333e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003342:	fb01 f303 	mul.w	r3, r1, r3
 8003346:	4413      	add	r3, r2
 8003348:	4a18      	ldr	r2, [pc, #96]	; (80033ac <step_shake_process+0x374>)
 800334a:	6013      	str	r3, [r2, #0]
						shake_state = SHAKE_STATE_WAIT;
 800334c:	4b15      	ldr	r3, [pc, #84]	; (80033a4 <step_shake_process+0x36c>)
 800334e:	2203      	movs	r2, #3
 8003350:	701a      	strb	r2, [r3, #0]
					}
	                break;
 8003352:	e01a      	b.n	800338a <step_shake_process+0x352>
	            case SHAKE_STATE_Z_FINISH:
	                // handle SHAKE_STATE_Z_FINISH
	            	LOGI(LOG_TAG,"step finish");
 8003354:	f001 f954 	bl	8004600 <HAL_GetTick>
 8003358:	4603      	mov	r3, r0
 800335a:	461a      	mov	r2, r3
 800335c:	490f      	ldr	r1, [pc, #60]	; (800339c <step_shake_process+0x364>)
 800335e:	4814      	ldr	r0, [pc, #80]	; (80033b0 <step_shake_process+0x378>)
 8003360:	f00b f9be 	bl	800e6e0 <iprintf>
	                old_state = shake_state;
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <step_shake_process+0x36c>)
 8003366:	781a      	ldrb	r2, [r3, #0]
 8003368:	4b0f      	ldr	r3, [pc, #60]	; (80033a8 <step_shake_process+0x370>)
 800336a:	701a      	strb	r2, [r3, #0]
	                shake_state = SHAKE_STATE_IDE;
 800336c:	4b0d      	ldr	r3, [pc, #52]	; (80033a4 <step_shake_process+0x36c>)
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
	                return 1;
 8003372:	2301      	movs	r3, #1
 8003374:	e00b      	b.n	800338e <step_shake_process+0x356>
	                break;
	            default:
	                // handle unknown state
//	                old_state = shake_state;
//	                shake_state = SHAKE_STATE_IDE;
	                break;
 8003376:	bf00      	nop
 8003378:	e008      	b.n	800338c <step_shake_process+0x354>
	                break;
 800337a:	bf00      	nop
 800337c:	e006      	b.n	800338c <step_shake_process+0x354>
	                break;
 800337e:	bf00      	nop
 8003380:	e004      	b.n	800338c <step_shake_process+0x354>
	                break;
 8003382:	bf00      	nop
 8003384:	e002      	b.n	800338c <step_shake_process+0x354>
	                break;
 8003386:	bf00      	nop
 8003388:	e000      	b.n	800338c <step_shake_process+0x354>
	                break;
 800338a:	bf00      	nop
	        }
	return 0;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	bd98      	pop	{r3, r4, r7, pc}
 8003392:	bf00      	nop
 8003394:	20003ea8 	.word	0x20003ea8
 8003398:	20003ef4 	.word	0x20003ef4
 800339c:	08010000 	.word	0x08010000
 80033a0:	08010130 	.word	0x08010130
 80033a4:	20003ef8 	.word	0x20003ef8
 80033a8:	20003ef9 	.word	0x20003ef9
 80033ac:	20003ef0 	.word	0x20003ef0
 80033b0:	0801015c 	.word	0x0801015c

080033b4 <set_timeout_for_fill_drain>:
_step_ws_state ws_state = WS_STATE_IDE;
_step_ws_state old_ws_state = WS_STATE_IDE;
static uint32_t ws_time = 0;
static uint32_t fill_drain_timout = MAX_UINT32_T;

void set_timeout_for_fill_drain(uint32_t nsec){
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
	fill_drain_timout = HAL_GetTick() + nsec*1000;
 80033bc:	f001 f920 	bl	8004600 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	4a03      	ldr	r2, [pc, #12]	; (80033dc <set_timeout_for_fill_drain+0x28>)
 80033d0:	6013      	str	r3, [r2, #0]
}
 80033d2:	bf00      	nop
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	2000000c 	.word	0x2000000c

080033e0 <start_fill_washing_solution>:

void start_fill_washing_solution(){
 80033e0:	b580      	push	{r7, lr}
 80033e2:	af00      	add	r7, sp, #0
	LOGI(LOG_TAG,"start fill washing solution");
 80033e4:	f001 f90c 	bl	8004600 <HAL_GetTick>
 80033e8:	4603      	mov	r3, r0
 80033ea:	461a      	mov	r2, r3
 80033ec:	4907      	ldr	r1, [pc, #28]	; (800340c <start_fill_washing_solution+0x2c>)
 80033ee:	4808      	ldr	r0, [pc, #32]	; (8003410 <start_fill_washing_solution+0x30>)
 80033f0:	f00b f976 	bl	800e6e0 <iprintf>
	HAL_GPIO_WritePin(PUMP1_GPIO_Port, PUMP1_Pin, PUMP1_ON_LEVEL);
 80033f4:	2201      	movs	r2, #1
 80033f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033fa:	4806      	ldr	r0, [pc, #24]	; (8003414 <start_fill_washing_solution+0x34>)
 80033fc:	f002 f9f6 	bl	80057ec <HAL_GPIO_WritePin>
	set_timeout_for_fill_drain(TIME_FILL_WS_SL);
 8003400:	2002      	movs	r0, #2
 8003402:	f7ff ffd7 	bl	80033b4 <set_timeout_for_fill_drain>
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	08010180 	.word	0x08010180
 8003410:	08010188 	.word	0x08010188
 8003414:	40020c00 	.word	0x40020c00

08003418 <is_washing_solution_full>:
int is_washing_solution_full()
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
#if SIMULATOR_MOD
	return 1;
 800341c:	2301      	movs	r3, #1
	{
		return 1;
	}
	return 0;
#endif
}
 800341e:	4618      	mov	r0, r3
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <stop_fill_washing_solution>:
void stop_fill_washing_solution(){
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
	LOGI(LOG_TAG,"stop fill washing solution");
 800342c:	f001 f8e8 	bl	8004600 <HAL_GetTick>
 8003430:	4603      	mov	r3, r0
 8003432:	461a      	mov	r2, r3
 8003434:	4905      	ldr	r1, [pc, #20]	; (800344c <stop_fill_washing_solution+0x24>)
 8003436:	4806      	ldr	r0, [pc, #24]	; (8003450 <stop_fill_washing_solution+0x28>)
 8003438:	f00b f952 	bl	800e6e0 <iprintf>
	HAL_GPIO_WritePin(PUMP1_GPIO_Port, PUMP1_Pin, PUMP1_OFF_LEVEL);
 800343c:	2200      	movs	r2, #0
 800343e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003442:	4804      	ldr	r0, [pc, #16]	; (8003454 <stop_fill_washing_solution+0x2c>)
 8003444:	f002 f9d2 	bl	80057ec <HAL_GPIO_WritePin>

}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}
 800344c:	08010180 	.word	0x08010180
 8003450:	080101bc 	.word	0x080101bc
 8003454:	40020c00 	.word	0x40020c00

08003458 <start_drain_washing_solution>:


void start_drain_washing_solution(){
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0
	LOGI(LOG_TAG,"start drain solution on: %ds",TIME_DRAIN_WS_SL);
 800345c:	f001 f8d0 	bl	8004600 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	2302      	movs	r3, #2
 8003464:	4907      	ldr	r1, [pc, #28]	; (8003484 <start_drain_washing_solution+0x2c>)
 8003466:	4808      	ldr	r0, [pc, #32]	; (8003488 <start_drain_washing_solution+0x30>)
 8003468:	f00b f93a 	bl	800e6e0 <iprintf>
	HAL_GPIO_WritePin(PUMP2_GPIO_Port, PUMP2_Pin, PUMP2_ON_LEVEL);
 800346c:	2201      	movs	r2, #1
 800346e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003472:	4806      	ldr	r0, [pc, #24]	; (800348c <start_drain_washing_solution+0x34>)
 8003474:	f002 f9ba 	bl	80057ec <HAL_GPIO_WritePin>
	set_timeout_for_fill_drain(TIME_DRAIN_WS_SL);
 8003478:	2002      	movs	r0, #2
 800347a:	f7ff ff9b 	bl	80033b4 <set_timeout_for_fill_drain>
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	08010180 	.word	0x08010180
 8003488:	080101f0 	.word	0x080101f0
 800348c:	40020c00 	.word	0x40020c00

08003490 <is_washing_solution_empty>:


int is_washing_solution_empty()
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
#if SIMULATOR_MOD
	return 1;
 8003494:	2301      	movs	r3, #1
	{
		return 1;
	}
	return 0;
#endif
}
 8003496:	4618      	mov	r0, r3
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <stop_drain_washing_solution>:
void stop_drain_washing_solution(){
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0

	LOGI(LOG_TAG,"stop drain washing solution ");
 80034a4:	f001 f8ac 	bl	8004600 <HAL_GetTick>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	4905      	ldr	r1, [pc, #20]	; (80034c4 <stop_drain_washing_solution+0x24>)
 80034ae:	4806      	ldr	r0, [pc, #24]	; (80034c8 <stop_drain_washing_solution+0x28>)
 80034b0:	f00b f916 	bl	800e6e0 <iprintf>
	HAL_GPIO_WritePin(PUMP2_GPIO_Port, PUMP2_Pin, PUMP2_OFF_LEVEL);
 80034b4:	2200      	movs	r2, #0
 80034b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034ba:	4804      	ldr	r0, [pc, #16]	; (80034cc <stop_drain_washing_solution+0x2c>)
 80034bc:	f002 f996 	bl	80057ec <HAL_GPIO_WritePin>
}
 80034c0:	bf00      	nop
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	08010180 	.word	0x08010180
 80034c8:	08010224 	.word	0x08010224
 80034cc:	40020c00 	.word	0x40020c00

080034d0 <step_washing_start>:
int step_washing_start()
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af02      	add	r7, sp, #8
	if(ws_state == WS_STATE_IDE)
 80034d6:	4b16      	ldr	r3, [pc, #88]	; (8003530 <step_washing_start+0x60>)
 80034d8:	781b      	ldrb	r3, [r3, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d123      	bne.n	8003526 <step_washing_start+0x56>
	{
		LOGI(LOG_TAG,"--------------- washing step: %d of program : %d----------------",running_step,running_pg);
 80034de:	f001 f88f 	bl	8004600 <HAL_GetTick>
 80034e2:	4602      	mov	r2, r0
 80034e4:	4b13      	ldr	r3, [pc, #76]	; (8003534 <step_washing_start+0x64>)
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	4619      	mov	r1, r3
 80034ea:	4b13      	ldr	r3, [pc, #76]	; (8003538 <step_washing_start+0x68>)
 80034ec:	781b      	ldrb	r3, [r3, #0]
 80034ee:	9300      	str	r3, [sp, #0]
 80034f0:	460b      	mov	r3, r1
 80034f2:	4912      	ldr	r1, [pc, #72]	; (800353c <step_washing_start+0x6c>)
 80034f4:	4812      	ldr	r0, [pc, #72]	; (8003540 <step_washing_start+0x70>)
 80034f6:	f00b f8f3 	bl	800e6e0 <iprintf>
		washing_step = (_def_washing_step *)&system_data.flash_data.Program_para[running_pg][running_step];
 80034fa:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <step_washing_start+0x68>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <step_washing_start+0x64>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	4619      	mov	r1, r3
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009a      	lsls	r2, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	440b      	add	r3, r1
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	3318      	adds	r3, #24
 8003516:	4a0b      	ldr	r2, [pc, #44]	; (8003544 <step_washing_start+0x74>)
 8003518:	4413      	add	r3, r2
 800351a:	3304      	adds	r3, #4
 800351c:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <step_washing_start+0x78>)
 800351e:	6013      	str	r3, [r2, #0]
		ws_state = WS_STATE_START;
 8003520:	4b03      	ldr	r3, [pc, #12]	; (8003530 <step_washing_start+0x60>)
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
	}
	return ws_state;
 8003526:	4b02      	ldr	r3, [pc, #8]	; (8003530 <step_washing_start+0x60>)
 8003528:	781b      	ldrb	r3, [r3, #0]
}
 800352a:	4618      	mov	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20003f00 	.word	0x20003f00
 8003534:	20003ee1 	.word	0x20003ee1
 8003538:	20003ee0 	.word	0x20003ee0
 800353c:	08010180 	.word	0x08010180
 8003540:	08010258 	.word	0x08010258
 8003544:	20000188 	.word	0x20000188
 8003548:	20003efc 	.word	0x20003efc

0800354c <step_washing_stop>:
int step_washing_stop(void){
 800354c:	b580      	push	{r7, lr}
 800354e:	af00      	add	r7, sp, #0
	ws_state = WS_STATE_IDE;
 8003550:	4b04      	ldr	r3, [pc, #16]	; (8003564 <step_washing_stop+0x18>)
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
	stop_fill_washing_solution();
 8003556:	f7ff ff67 	bl	8003428 <stop_fill_washing_solution>
	stop_drain_washing_solution();
 800355a:	f7ff ffa1 	bl	80034a0 <stop_drain_washing_solution>
	return 1;
 800355e:	2301      	movs	r3, #1
}
 8003560:	4618      	mov	r0, r3
 8003562:	bd80      	pop	{r7, pc}
 8003564:	20003f00 	.word	0x20003f00

08003568 <show_infor_washing_step>:
void show_infor_washing_step(_def_washing_step ws_step)
{
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	463c      	mov	r4, r7
 8003570:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOGW(LOG_INFO,"---------------INFOR_WASHING_STEP INDEX: %d------------",running_step);
 8003574:	f001 f844 	bl	8004600 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	4b29      	ldr	r3, [pc, #164]	; (8003620 <show_infor_washing_step+0xb8>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	4929      	ldr	r1, [pc, #164]	; (8003624 <show_infor_washing_step+0xbc>)
 8003580:	4829      	ldr	r0, [pc, #164]	; (8003628 <show_infor_washing_step+0xc0>)
 8003582:	f00b f8ad 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"1:Move to Wells: %d",ws_step.wells);
 8003586:	f001 f83b 	bl	8004600 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	783b      	ldrb	r3, [r7, #0]
 800358e:	4925      	ldr	r1, [pc, #148]	; (8003624 <show_infor_washing_step+0xbc>)
 8003590:	4826      	ldr	r0, [pc, #152]	; (800362c <show_infor_washing_step+0xc4>)
 8003592:	f00b f8a5 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"2:wait1 : %ds",ws_step.wait1);
 8003596:	f001 f833 	bl	8004600 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	887b      	ldrh	r3, [r7, #2]
 800359e:	4921      	ldr	r1, [pc, #132]	; (8003624 <show_infor_washing_step+0xbc>)
 80035a0:	4823      	ldr	r0, [pc, #140]	; (8003630 <show_infor_washing_step+0xc8>)
 80035a2:	f00b f89d 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"3:fill washing solution: %d \n4:move z to bottom",ws_step.fill);
 80035a6:	f001 f82b 	bl	8004600 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	88bb      	ldrh	r3, [r7, #4]
 80035ae:	491d      	ldr	r1, [pc, #116]	; (8003624 <show_infor_washing_step+0xbc>)
 80035b0:	4820      	ldr	r0, [pc, #128]	; (8003634 <show_infor_washing_step+0xcc>)
 80035b2:	f00b f895 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"5:wait2 : %ds",ws_step.wait2);
 80035b6:	f001 f823 	bl	8004600 <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	88fb      	ldrh	r3, [r7, #6]
 80035be:	4919      	ldr	r1, [pc, #100]	; (8003624 <show_infor_washing_step+0xbc>)
 80035c0:	481d      	ldr	r0, [pc, #116]	; (8003638 <show_infor_washing_step+0xd0>)
 80035c2:	f00b f88d 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"6:shake on : %ds",ws_step.shake);
 80035c6:	f001 f81b 	bl	8004600 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	893b      	ldrh	r3, [r7, #8]
 80035ce:	4915      	ldr	r1, [pc, #84]	; (8003624 <show_infor_washing_step+0xbc>)
 80035d0:	481a      	ldr	r0, [pc, #104]	; (800363c <show_infor_washing_step+0xd4>)
 80035d2:	f00b f885 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"7:wait4 : %ds",ws_step.wait4);
 80035d6:	f001 f813 	bl	8004600 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	897b      	ldrh	r3, [r7, #10]
 80035de:	4911      	ldr	r1, [pc, #68]	; (8003624 <show_infor_washing_step+0xbc>)
 80035e0:	4817      	ldr	r0, [pc, #92]	; (8003640 <show_infor_washing_step+0xd8>)
 80035e2:	f00b f87d 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"8:move z to top %d\n9:Drain washing solution",ws_step.drain);
 80035e6:	f001 f80b 	bl	8004600 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	89bb      	ldrh	r3, [r7, #12]
 80035ee:	490d      	ldr	r1, [pc, #52]	; (8003624 <show_infor_washing_step+0xbc>)
 80035f0:	4814      	ldr	r0, [pc, #80]	; (8003644 <show_infor_washing_step+0xdc>)
 80035f2:	f00b f875 	bl	800e6e0 <iprintf>
	LOGI(LOG_INFO,"10:wait5 : %ds",ws_step.wait5);
 80035f6:	f001 f803 	bl	8004600 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	89fb      	ldrh	r3, [r7, #14]
 80035fe:	4909      	ldr	r1, [pc, #36]	; (8003624 <show_infor_washing_step+0xbc>)
 8003600:	4811      	ldr	r0, [pc, #68]	; (8003648 <show_infor_washing_step+0xe0>)
 8003602:	f00b f86d 	bl	800e6e0 <iprintf>
	LOGW(LOG_INFO,"-------------------------------------------");
 8003606:	f000 fffb 	bl	8004600 <HAL_GetTick>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	4905      	ldr	r1, [pc, #20]	; (8003624 <show_infor_washing_step+0xbc>)
 8003610:	480e      	ldr	r0, [pc, #56]	; (800364c <show_infor_washing_step+0xe4>)
 8003612:	f00b f865 	bl	800e6e0 <iprintf>
}
 8003616:	bf00      	nop
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bd90      	pop	{r4, r7, pc}
 800361e:	bf00      	nop
 8003620:	20003ee1 	.word	0x20003ee1
 8003624:	080102b0 	.word	0x080102b0
 8003628:	080102b8 	.word	0x080102b8
 800362c:	08010308 	.word	0x08010308
 8003630:	08010334 	.word	0x08010334
 8003634:	0801035c 	.word	0x0801035c
 8003638:	080103a4 	.word	0x080103a4
 800363c:	080103cc 	.word	0x080103cc
 8003640:	080103f4 	.word	0x080103f4
 8003644:	0801041c 	.word	0x0801041c
 8003648:	08010460 	.word	0x08010460
 800364c:	08010488 	.word	0x08010488

08003650 <step_washing_process>:

int step_washing_process(void)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b083      	sub	sp, #12
 8003654:	af02      	add	r7, sp, #8
	    switch(ws_state) {
 8003656:	4ba0      	ldr	r3, [pc, #640]	; (80038d8 <step_washing_process+0x288>)
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	2b09      	cmp	r3, #9
 800365c:	f200 8225 	bhi.w	8003aaa <step_washing_process+0x45a>
 8003660:	a201      	add	r2, pc, #4	; (adr r2, 8003668 <step_washing_process+0x18>)
 8003662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003666:	bf00      	nop
 8003668:	08003691 	.word	0x08003691
 800366c:	08003699 	.word	0x08003699
 8003670:	080036fb 	.word	0x080036fb
 8003674:	0800378b 	.word	0x0800378b
 8003678:	08003755 	.word	0x08003755
 800367c:	080037d9 	.word	0x080037d9
 8003680:	08003863 	.word	0x08003863
 8003684:	08003915 	.word	0x08003915
 8003688:	08003965 	.word	0x08003965
 800368c:	08003a91 	.word	0x08003a91
	        case WS_STATE_IDE:
	            // Do something when in state WS_STATE_IDE
	            ws_state = WS_STATE_START; // Example transition to next state
 8003690:	4b91      	ldr	r3, [pc, #580]	; (80038d8 <step_washing_process+0x288>)
 8003692:	2201      	movs	r2, #1
 8003694:	701a      	strb	r2, [r3, #0]
	            break;
 8003696:	e217      	b.n	8003ac8 <step_washing_process+0x478>
	        case WS_STATE_START:
	        	show_infor_washing_step(*washing_step);
 8003698:	4b90      	ldr	r3, [pc, #576]	; (80038dc <step_washing_process+0x28c>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4610      	mov	r0, r2
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	4611      	mov	r1, r2
 80036a4:	689c      	ldr	r4, [r3, #8]
 80036a6:	4622      	mov	r2, r4
 80036a8:	68dc      	ldr	r4, [r3, #12]
 80036aa:	4623      	mov	r3, r4
 80036ac:	f7ff ff5c 	bl	8003568 <show_infor_washing_step>
	            LOGI(LOG_TAG,"move x well %d, pos %lu",washing_step->wells,system_data.flash_data.Well_position[washing_step->wells-1]);
 80036b0:	f000 ffa6 	bl	8004600 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b89      	ldr	r3, [pc, #548]	; (80038dc <step_washing_process+0x28c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	4618      	mov	r0, r3
 80036be:	4b87      	ldr	r3, [pc, #540]	; (80038dc <step_washing_process+0x28c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	4986      	ldr	r1, [pc, #536]	; (80038e0 <step_washing_process+0x290>)
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	440b      	add	r3, r1
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	4603      	mov	r3, r0
 80036d2:	4984      	ldr	r1, [pc, #528]	; (80038e4 <step_washing_process+0x294>)
 80036d4:	4884      	ldr	r0, [pc, #528]	; (80038e8 <step_washing_process+0x298>)
 80036d6:	f00b f803 	bl	800e6e0 <iprintf>
            	mt_set_target_position(&x_motor, system_data.flash_data.Well_position[washing_step->wells-1]); // m
 80036da:	4b80      	ldr	r3, [pc, #512]	; (80038dc <step_washing_process+0x28c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	4a7f      	ldr	r2, [pc, #508]	; (80038e0 <step_washing_process+0x290>)
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4619      	mov	r1, r3
 80036ec:	487f      	ldr	r0, [pc, #508]	; (80038ec <step_washing_process+0x29c>)
 80036ee:	f7fe fcb3 	bl	8002058 <mt_set_target_position>
	            ws_state = WS_STATE_MOVE_WELLS; // Example transition to next state
 80036f2:	4b79      	ldr	r3, [pc, #484]	; (80038d8 <step_washing_process+0x288>)
 80036f4:	2202      	movs	r2, #2
 80036f6:	701a      	strb	r2, [r3, #0]
	            break;
 80036f8:	e1e6      	b.n	8003ac8 <step_washing_process+0x478>
	        case WS_STATE_MOVE_WELLS:
	        	if(Mt_get_current_prosition(x_motor) == system_data.flash_data.Well_position[washing_step->wells-1])
 80036fa:	4b7c      	ldr	r3, [pc, #496]	; (80038ec <step_washing_process+0x29c>)
 80036fc:	689a      	ldr	r2, [r3, #8]
 80036fe:	4b77      	ldr	r3, [pc, #476]	; (80038dc <step_washing_process+0x28c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	3b01      	subs	r3, #1
 8003706:	4976      	ldr	r1, [pc, #472]	; (80038e0 <step_washing_process+0x290>)
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	429a      	cmp	r2, r3
 8003710:	f040 81cd 	bne.w	8003aae <step_washing_process+0x45e>
				{
					LOGI(LOG_TAG,"move x done, wait1 %ds",washing_step->wait1);
 8003714:	f000 ff74 	bl	8004600 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	4b70      	ldr	r3, [pc, #448]	; (80038dc <step_washing_process+0x28c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	885b      	ldrh	r3, [r3, #2]
 8003720:	4970      	ldr	r1, [pc, #448]	; (80038e4 <step_washing_process+0x294>)
 8003722:	4873      	ldr	r0, [pc, #460]	; (80038f0 <step_washing_process+0x2a0>)
 8003724:	f00a ffdc 	bl	800e6e0 <iprintf>
					old_ws_state = ws_state;
 8003728:	4b6b      	ldr	r3, [pc, #428]	; (80038d8 <step_washing_process+0x288>)
 800372a:	781a      	ldrb	r2, [r3, #0]
 800372c:	4b71      	ldr	r3, [pc, #452]	; (80038f4 <step_washing_process+0x2a4>)
 800372e:	701a      	strb	r2, [r3, #0]
					ws_state = WS_STATE_WAIT;
 8003730:	4b69      	ldr	r3, [pc, #420]	; (80038d8 <step_washing_process+0x288>)
 8003732:	2208      	movs	r2, #8
 8003734:	701a      	strb	r2, [r3, #0]
					ws_time = HAL_GetTick() +  (uint32_t)washing_step->wait1 * 1000;
 8003736:	f000 ff63 	bl	8004600 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	4b67      	ldr	r3, [pc, #412]	; (80038dc <step_washing_process+0x28c>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	885b      	ldrh	r3, [r3, #2]
 8003742:	4619      	mov	r1, r3
 8003744:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003748:	fb01 f303 	mul.w	r3, r1, r3
 800374c:	4413      	add	r3, r2
 800374e:	4a6a      	ldr	r2, [pc, #424]	; (80038f8 <step_washing_process+0x2a8>)
 8003750:	6013      	str	r3, [r2, #0]
				}
	            break;
 8003752:	e1ac      	b.n	8003aae <step_washing_process+0x45e>
	        case WS_STATE_FILL_WS_SOLUTION:
	            if(is_washing_solution_full())
 8003754:	f7ff fe60 	bl	8003418 <is_washing_solution_full>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 81a9 	beq.w	8003ab2 <step_washing_process+0x462>
	            {
	            	stop_fill_washing_solution();
 8003760:	f7ff fe62 	bl	8003428 <stop_fill_washing_solution>
					LOGI(LOG_TAG,"Fill done,move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
 8003764:	f000 ff4c 	bl	8004600 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	4b5d      	ldr	r3, [pc, #372]	; (80038e0 <step_washing_process+0x290>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	495d      	ldr	r1, [pc, #372]	; (80038e4 <step_washing_process+0x294>)
 8003770:	4862      	ldr	r0, [pc, #392]	; (80038fc <step_washing_process+0x2ac>)
 8003772:	f00a ffb5 	bl	800e6e0 <iprintf>
					mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 8003776:	4b5a      	ldr	r3, [pc, #360]	; (80038e0 <step_washing_process+0x290>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4619      	mov	r1, r3
 800377c:	4860      	ldr	r0, [pc, #384]	; (8003900 <step_washing_process+0x2b0>)
 800377e:	f7fe fc6b 	bl	8002058 <mt_set_target_position>
					ws_state = WS_STATE_Z_BOTTOM;
 8003782:	4b55      	ldr	r3, [pc, #340]	; (80038d8 <step_washing_process+0x288>)
 8003784:	2203      	movs	r2, #3
 8003786:	701a      	strb	r2, [r3, #0]

	            }
	            break;
 8003788:	e193      	b.n	8003ab2 <step_washing_process+0x462>
	        case WS_STATE_Z_BOTTOM:
            	if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 800378a:	4b5d      	ldr	r3, [pc, #372]	; (8003900 <step_washing_process+0x2b0>)
 800378c:	689a      	ldr	r2, [r3, #8]
 800378e:	4b54      	ldr	r3, [pc, #336]	; (80038e0 <step_washing_process+0x290>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	429a      	cmp	r2, r3
 8003794:	f040 818f 	bne.w	8003ab6 <step_washing_process+0x466>
				{
            		LOGI(LOG_TAG,"move z done, wait2 %ds",washing_step->wait2);
 8003798:	f000 ff32 	bl	8004600 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	4b4f      	ldr	r3, [pc, #316]	; (80038dc <step_washing_process+0x28c>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	88db      	ldrh	r3, [r3, #6]
 80037a4:	494f      	ldr	r1, [pc, #316]	; (80038e4 <step_washing_process+0x294>)
 80037a6:	4857      	ldr	r0, [pc, #348]	; (8003904 <step_washing_process+0x2b4>)
 80037a8:	f00a ff9a 	bl	800e6e0 <iprintf>
					old_ws_state = ws_state;
 80037ac:	4b4a      	ldr	r3, [pc, #296]	; (80038d8 <step_washing_process+0x288>)
 80037ae:	781a      	ldrb	r2, [r3, #0]
 80037b0:	4b50      	ldr	r3, [pc, #320]	; (80038f4 <step_washing_process+0x2a4>)
 80037b2:	701a      	strb	r2, [r3, #0]
	            	ws_time = HAL_GetTick() +  (uint32_t)washing_step->wait2 * 1000;
 80037b4:	f000 ff24 	bl	8004600 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	4b48      	ldr	r3, [pc, #288]	; (80038dc <step_washing_process+0x28c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	88db      	ldrh	r3, [r3, #6]
 80037c0:	4619      	mov	r1, r3
 80037c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037c6:	fb01 f303 	mul.w	r3, r1, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	4a4a      	ldr	r2, [pc, #296]	; (80038f8 <step_washing_process+0x2a8>)
 80037ce:	6013      	str	r3, [r2, #0]
		            ws_state = WS_STATE_WAIT; // Example transition to next state
 80037d0:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <step_washing_process+0x288>)
 80037d2:	2208      	movs	r2, #8
 80037d4:	701a      	strb	r2, [r3, #0]

				}
	            break;
 80037d6:	e16e      	b.n	8003ab6 <step_washing_process+0x466>
	        case WS_STATE_SHAKE:
                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos - SHAKING_DISTANCE)
 80037d8:	4b49      	ldr	r3, [pc, #292]	; (8003900 <step_washing_process+0x2b0>)
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	4b40      	ldr	r3, [pc, #256]	; (80038e0 <step_washing_process+0x290>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d105      	bne.n	80037f4 <step_washing_process+0x1a4>
            	{
                	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos);
 80037e8:	4b3d      	ldr	r3, [pc, #244]	; (80038e0 <step_washing_process+0x290>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4619      	mov	r1, r3
 80037ee:	4844      	ldr	r0, [pc, #272]	; (8003900 <step_washing_process+0x2b0>)
 80037f0:	f7fe fc32 	bl	8002058 <mt_set_target_position>
            	}
                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 80037f4:	4b42      	ldr	r3, [pc, #264]	; (8003900 <step_washing_process+0x2b0>)
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <step_washing_process+0x290>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	f040 815c 	bne.w	8003aba <step_washing_process+0x46a>
				{
                	if(HAL_GetTick() > ws_time)
 8003802:	f000 fefd 	bl	8004600 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	4b3b      	ldr	r3, [pc, #236]	; (80038f8 <step_washing_process+0x2a8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d91f      	bls.n	8003850 <step_washing_process+0x200>
                	{
                		LOGI(LOG_TAG,"shake done, wait4 : %d",washing_step->wait4);
 8003810:	f000 fef6 	bl	8004600 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	4b31      	ldr	r3, [pc, #196]	; (80038dc <step_washing_process+0x28c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	895b      	ldrh	r3, [r3, #10]
 800381c:	4931      	ldr	r1, [pc, #196]	; (80038e4 <step_washing_process+0x294>)
 800381e:	483a      	ldr	r0, [pc, #232]	; (8003908 <step_washing_process+0x2b8>)
 8003820:	f00a ff5e 	bl	800e6e0 <iprintf>
                		old_ws_state = ws_state;
 8003824:	4b2c      	ldr	r3, [pc, #176]	; (80038d8 <step_washing_process+0x288>)
 8003826:	781a      	ldrb	r2, [r3, #0]
 8003828:	4b32      	ldr	r3, [pc, #200]	; (80038f4 <step_washing_process+0x2a4>)
 800382a:	701a      	strb	r2, [r3, #0]
    	                ws_time = HAL_GetTick() +  (uint32_t)washing_step->wait4 * 1000;
 800382c:	f000 fee8 	bl	8004600 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	4b2a      	ldr	r3, [pc, #168]	; (80038dc <step_washing_process+0x28c>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	895b      	ldrh	r3, [r3, #10]
 8003838:	4619      	mov	r1, r3
 800383a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800383e:	fb01 f303 	mul.w	r3, r1, r3
 8003842:	4413      	add	r3, r2
 8003844:	4a2c      	ldr	r2, [pc, #176]	; (80038f8 <step_washing_process+0x2a8>)
 8003846:	6013      	str	r3, [r2, #0]
    	                ws_state = WS_STATE_WAIT;
 8003848:	4b23      	ldr	r3, [pc, #140]	; (80038d8 <step_washing_process+0x288>)
 800384a:	2208      	movs	r2, #8
 800384c:	701a      	strb	r2, [r3, #0]
                	else
                	{
                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-SHAKING_DISTANCE);
                	}
				}
	            break;
 800384e:	e134      	b.n	8003aba <step_washing_process+0x46a>
                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-SHAKING_DISTANCE);
 8003850:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <step_washing_process+0x290>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003858:	4619      	mov	r1, r3
 800385a:	4829      	ldr	r0, [pc, #164]	; (8003900 <step_washing_process+0x2b0>)
 800385c:	f7fe fbfc 	bl	8002058 <mt_set_target_position>
	            break;
 8003860:	e12b      	b.n	8003aba <step_washing_process+0x46a>
	        case WS_STATE_Z_TOP:
            	if(Mt_get_current_prosition(z_motor) == 0){
 8003862:	4b27      	ldr	r3, [pc, #156]	; (8003900 <step_washing_process+0x2b0>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f040 8129 	bne.w	8003abe <step_washing_process+0x46e>
            		LOGI(LOG_TAG,"ztop done, start drain ws solution");
 800386c:	f000 fec8 	bl	8004600 <HAL_GetTick>
 8003870:	4603      	mov	r3, r0
 8003872:	461a      	mov	r2, r3
 8003874:	491b      	ldr	r1, [pc, #108]	; (80038e4 <step_washing_process+0x294>)
 8003876:	4825      	ldr	r0, [pc, #148]	; (800390c <step_washing_process+0x2bc>)
 8003878:	f00a ff32 	bl	800e6e0 <iprintf>
            		old_ws_state = ws_state;
 800387c:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <step_washing_process+0x288>)
 800387e:	781a      	ldrb	r2, [r3, #0]
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <step_washing_process+0x2a4>)
 8003882:	701a      	strb	r2, [r3, #0]
//					ws_time = HAL_GetTick() +  (uint32_t)step_para.timing[4] * 1000;
            		if(washing_step->drain)
 8003884:	4b15      	ldr	r3, [pc, #84]	; (80038dc <step_washing_process+0x28c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	899b      	ldrh	r3, [r3, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d005      	beq.n	800389a <step_washing_process+0x24a>
            		{
						start_drain_washing_solution();
 800388e:	f7ff fde3 	bl	8003458 <start_drain_washing_solution>
						ws_state = WS_STATE_DRAIN_WS_SOLUTION;
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <step_washing_process+0x288>)
 8003894:	2207      	movs	r2, #7
 8003896:	701a      	strb	r2, [r3, #0]
            			old_ws_state = ws_state;
						ws_time = HAL_GetTick() +  (uint32_t)washing_step->wait5 * 1000;
						ws_state = WS_STATE_WAIT; // Example transition to next state
            		}
				}
	            break;
 8003898:	e111      	b.n	8003abe <step_washing_process+0x46e>
            			LOGI(LOG_TAG,"skip drain fill solution ");
 800389a:	f000 feb1 	bl	8004600 <HAL_GetTick>
 800389e:	4603      	mov	r3, r0
 80038a0:	461a      	mov	r2, r3
 80038a2:	4910      	ldr	r1, [pc, #64]	; (80038e4 <step_washing_process+0x294>)
 80038a4:	481a      	ldr	r0, [pc, #104]	; (8003910 <step_washing_process+0x2c0>)
 80038a6:	f00a ff1b 	bl	800e6e0 <iprintf>
            			old_ws_state = ws_state;
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <step_washing_process+0x288>)
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <step_washing_process+0x2a4>)
 80038b0:	701a      	strb	r2, [r3, #0]
						ws_time = HAL_GetTick() +  (uint32_t)washing_step->wait5 * 1000;
 80038b2:	f000 fea5 	bl	8004600 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	4b08      	ldr	r3, [pc, #32]	; (80038dc <step_washing_process+0x28c>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	89db      	ldrh	r3, [r3, #14]
 80038be:	4619      	mov	r1, r3
 80038c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	4a0b      	ldr	r2, [pc, #44]	; (80038f8 <step_washing_process+0x2a8>)
 80038cc:	6013      	str	r3, [r2, #0]
						ws_state = WS_STATE_WAIT; // Example transition to next state
 80038ce:	4b02      	ldr	r3, [pc, #8]	; (80038d8 <step_washing_process+0x288>)
 80038d0:	2208      	movs	r2, #8
 80038d2:	701a      	strb	r2, [r3, #0]
	            break;
 80038d4:	e0f3      	b.n	8003abe <step_washing_process+0x46e>
 80038d6:	bf00      	nop
 80038d8:	20003f00 	.word	0x20003f00
 80038dc:	20003efc 	.word	0x20003efc
 80038e0:	20000188 	.word	0x20000188
 80038e4:	08010180 	.word	0x08010180
 80038e8:	080104cc 	.word	0x080104cc
 80038ec:	20003e78 	.word	0x20003e78
 80038f0:	080104fc 	.word	0x080104fc
 80038f4:	20003f01 	.word	0x20003f01
 80038f8:	20003f04 	.word	0x20003f04
 80038fc:	0801052c 	.word	0x0801052c
 8003900:	20003ea8 	.word	0x20003ea8
 8003904:	08010564 	.word	0x08010564
 8003908:	08010594 	.word	0x08010594
 800390c:	080105c4 	.word	0x080105c4
 8003910:	08010600 	.word	0x08010600
	        case WS_STATE_DRAIN_WS_SOLUTION:
	            if(is_washing_solution_empty())
 8003914:	f7ff fdbc 	bl	8003490 <is_washing_solution_empty>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80d1 	beq.w	8003ac2 <step_washing_process+0x472>
	            {
	            	LOGI(LOG_TAG,"solution empty,wait5 :%ds",washing_step->wait5);
 8003920:	f000 fe6e 	bl	8004600 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	4b6b      	ldr	r3, [pc, #428]	; (8003ad4 <step_washing_process+0x484>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	89db      	ldrh	r3, [r3, #14]
 800392c:	496a      	ldr	r1, [pc, #424]	; (8003ad8 <step_washing_process+0x488>)
 800392e:	486b      	ldr	r0, [pc, #428]	; (8003adc <step_washing_process+0x48c>)
 8003930:	f00a fed6 	bl	800e6e0 <iprintf>
	            	stop_drain_washing_solution();
 8003934:	f7ff fdb4 	bl	80034a0 <stop_drain_washing_solution>
	            	old_ws_state = ws_state;
 8003938:	4b69      	ldr	r3, [pc, #420]	; (8003ae0 <step_washing_process+0x490>)
 800393a:	781a      	ldrb	r2, [r3, #0]
 800393c:	4b69      	ldr	r3, [pc, #420]	; (8003ae4 <step_washing_process+0x494>)
 800393e:	701a      	strb	r2, [r3, #0]
	            	ws_time = HAL_GetTick() +  (uint32_t)washing_step->wait5 * 1000;
 8003940:	f000 fe5e 	bl	8004600 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	4b63      	ldr	r3, [pc, #396]	; (8003ad4 <step_washing_process+0x484>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	89db      	ldrh	r3, [r3, #14]
 800394c:	4619      	mov	r1, r3
 800394e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	4a63      	ldr	r2, [pc, #396]	; (8003ae8 <step_washing_process+0x498>)
 800395a:	6013      	str	r3, [r2, #0]
	            	ws_state = WS_STATE_WAIT; // Example transition to next state isn't active
 800395c:	4b60      	ldr	r3, [pc, #384]	; (8003ae0 <step_washing_process+0x490>)
 800395e:	2208      	movs	r2, #8
 8003960:	701a      	strb	r2, [r3, #0]
	            }
	            break;
 8003962:	e0ae      	b.n	8003ac2 <step_washing_process+0x472>
	        case WS_STATE_WAIT:
	            if(HAL_GetTick() > ws_time)
 8003964:	f000 fe4c 	bl	8004600 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	4b5f      	ldr	r3, [pc, #380]	; (8003ae8 <step_washing_process+0x498>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	f240 80a9 	bls.w	8003ac6 <step_washing_process+0x476>
	            {
	            	switch (old_ws_state) {
 8003974:	4b5b      	ldr	r3, [pc, #364]	; (8003ae4 <step_washing_process+0x494>)
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	3b02      	subs	r3, #2
 800397a:	2b05      	cmp	r3, #5
 800397c:	f200 8086 	bhi.w	8003a8c <step_washing_process+0x43c>
 8003980:	a201      	add	r2, pc, #4	; (adr r2, 8003988 <step_washing_process+0x338>)
 8003982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003986:	bf00      	nop
 8003988:	080039a1 	.word	0x080039a1
 800398c:	080039fd 	.word	0x080039fd
 8003990:	08003a8d 	.word	0x08003a8d
 8003994:	08003a55 	.word	0x08003a55
 8003998:	08003a75 	.word	0x08003a75
 800399c:	08003a75 	.word	0x08003a75
						case WS_STATE_MOVE_WELLS:
							LOGI(LOG_TAG,"wait1 done");
 80039a0:	f000 fe2e 	bl	8004600 <HAL_GetTick>
 80039a4:	4603      	mov	r3, r0
 80039a6:	461a      	mov	r2, r3
 80039a8:	494b      	ldr	r1, [pc, #300]	; (8003ad8 <step_washing_process+0x488>)
 80039aa:	4850      	ldr	r0, [pc, #320]	; (8003aec <step_washing_process+0x49c>)
 80039ac:	f00a fe98 	bl	800e6e0 <iprintf>
							if(washing_step->fill)
 80039b0:	4b48      	ldr	r3, [pc, #288]	; (8003ad4 <step_washing_process+0x484>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	889b      	ldrh	r3, [r3, #4]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <step_washing_process+0x376>
							{
								ws_state = WS_STATE_FILL_WS_SOLUTION;
 80039ba:	4b49      	ldr	r3, [pc, #292]	; (8003ae0 <step_washing_process+0x490>)
 80039bc:	2204      	movs	r2, #4
 80039be:	701a      	strb	r2, [r3, #0]
								start_fill_washing_solution();
 80039c0:	f7ff fd0e 	bl	80033e0 <start_fill_washing_solution>
								LOGI(LOG_TAG,"skip fill washing solution");
								LOGI(LOG_TAG,"move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
								mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
								ws_state= WS_STATE_Z_BOTTOM;
							}
							break;
 80039c4:	e063      	b.n	8003a8e <step_washing_process+0x43e>
								LOGI(LOG_TAG,"skip fill washing solution");
 80039c6:	f000 fe1b 	bl	8004600 <HAL_GetTick>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461a      	mov	r2, r3
 80039ce:	4942      	ldr	r1, [pc, #264]	; (8003ad8 <step_washing_process+0x488>)
 80039d0:	4847      	ldr	r0, [pc, #284]	; (8003af0 <step_washing_process+0x4a0>)
 80039d2:	f00a fe85 	bl	800e6e0 <iprintf>
								LOGI(LOG_TAG,"move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
 80039d6:	f000 fe13 	bl	8004600 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	4b45      	ldr	r3, [pc, #276]	; (8003af4 <step_washing_process+0x4a4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	493d      	ldr	r1, [pc, #244]	; (8003ad8 <step_washing_process+0x488>)
 80039e2:	4845      	ldr	r0, [pc, #276]	; (8003af8 <step_washing_process+0x4a8>)
 80039e4:	f00a fe7c 	bl	800e6e0 <iprintf>
								mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 80039e8:	4b42      	ldr	r3, [pc, #264]	; (8003af4 <step_washing_process+0x4a4>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4619      	mov	r1, r3
 80039ee:	4843      	ldr	r0, [pc, #268]	; (8003afc <step_washing_process+0x4ac>)
 80039f0:	f7fe fb32 	bl	8002058 <mt_set_target_position>
								ws_state= WS_STATE_Z_BOTTOM;
 80039f4:	4b3a      	ldr	r3, [pc, #232]	; (8003ae0 <step_washing_process+0x490>)
 80039f6:	2203      	movs	r2, #3
 80039f8:	701a      	strb	r2, [r3, #0]
							break;
 80039fa:	e048      	b.n	8003a8e <step_washing_process+0x43e>
						case WS_STATE_Z_BOTTOM:
							LOGI(LOG_TAG,"wait2 done");
 80039fc:	f000 fe00 	bl	8004600 <HAL_GetTick>
 8003a00:	4603      	mov	r3, r0
 8003a02:	461a      	mov	r2, r3
 8003a04:	4934      	ldr	r1, [pc, #208]	; (8003ad8 <step_washing_process+0x488>)
 8003a06:	483e      	ldr	r0, [pc, #248]	; (8003b00 <step_washing_process+0x4b0>)
 8003a08:	f00a fe6a 	bl	800e6e0 <iprintf>
							mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 8003a0c:	4b39      	ldr	r3, [pc, #228]	; (8003af4 <step_washing_process+0x4a4>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003a14:	4619      	mov	r1, r3
 8003a16:	4839      	ldr	r0, [pc, #228]	; (8003afc <step_washing_process+0x4ac>)
 8003a18:	f7fe fb1e 	bl	8002058 <mt_set_target_position>
							LOGI(LOG_TAG,"start shake in %ds",washing_step->shake);
 8003a1c:	f000 fdf0 	bl	8004600 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	4b2c      	ldr	r3, [pc, #176]	; (8003ad4 <step_washing_process+0x484>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	891b      	ldrh	r3, [r3, #8]
 8003a28:	492b      	ldr	r1, [pc, #172]	; (8003ad8 <step_washing_process+0x488>)
 8003a2a:	4836      	ldr	r0, [pc, #216]	; (8003b04 <step_washing_process+0x4b4>)
 8003a2c:	f00a fe58 	bl	800e6e0 <iprintf>
							ws_time = HAL_GetTick() +  (uint32_t)washing_step->shake * 1000;
 8003a30:	f000 fde6 	bl	8004600 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	4b27      	ldr	r3, [pc, #156]	; (8003ad4 <step_washing_process+0x484>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	891b      	ldrh	r3, [r3, #8]
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a42:	fb01 f303 	mul.w	r3, r1, r3
 8003a46:	4413      	add	r3, r2
 8003a48:	4a27      	ldr	r2, [pc, #156]	; (8003ae8 <step_washing_process+0x498>)
 8003a4a:	6013      	str	r3, [r2, #0]

							ws_state = WS_STATE_SHAKE;
 8003a4c:	4b24      	ldr	r3, [pc, #144]	; (8003ae0 <step_washing_process+0x490>)
 8003a4e:	2205      	movs	r2, #5
 8003a50:	701a      	strb	r2, [r3, #0]
							break;
 8003a52:	e01c      	b.n	8003a8e <step_washing_process+0x43e>
						case WS_STATE_SHAKE:
							LOGI(LOG_TAG,"wait4 done, move z to top");
 8003a54:	f000 fdd4 	bl	8004600 <HAL_GetTick>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	491e      	ldr	r1, [pc, #120]	; (8003ad8 <step_washing_process+0x488>)
 8003a5e:	482a      	ldr	r0, [pc, #168]	; (8003b08 <step_washing_process+0x4b8>)
 8003a60:	f00a fe3e 	bl	800e6e0 <iprintf>
							mt_set_target_position(&z_motor,0);
 8003a64:	2100      	movs	r1, #0
 8003a66:	4825      	ldr	r0, [pc, #148]	; (8003afc <step_washing_process+0x4ac>)
 8003a68:	f7fe faf6 	bl	8002058 <mt_set_target_position>
							ws_state = WS_STATE_Z_TOP;
 8003a6c:	4b1c      	ldr	r3, [pc, #112]	; (8003ae0 <step_washing_process+0x490>)
 8003a6e:	2206      	movs	r2, #6
 8003a70:	701a      	strb	r2, [r3, #0]
							break;
 8003a72:	e00c      	b.n	8003a8e <step_washing_process+0x43e>
						case WS_STATE_Z_TOP:
						case WS_STATE_DRAIN_WS_SOLUTION:
							LOGI(LOG_TAG,"wait5 done");
 8003a74:	f000 fdc4 	bl	8004600 <HAL_GetTick>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	4916      	ldr	r1, [pc, #88]	; (8003ad8 <step_washing_process+0x488>)
 8003a7e:	4823      	ldr	r0, [pc, #140]	; (8003b0c <step_washing_process+0x4bc>)
 8003a80:	f00a fe2e 	bl	800e6e0 <iprintf>
							ws_state = WS_STATE_Z_FINISH;
 8003a84:	4b16      	ldr	r3, [pc, #88]	; (8003ae0 <step_washing_process+0x490>)
 8003a86:	2209      	movs	r2, #9
 8003a88:	701a      	strb	r2, [r3, #0]
							break;
 8003a8a:	e000      	b.n	8003a8e <step_washing_process+0x43e>
						default:
							break;
 8003a8c:	bf00      	nop
					}
	            }
	            break;
 8003a8e:	e01a      	b.n	8003ac6 <step_washing_process+0x476>
	        case WS_STATE_Z_FINISH:
	        	LOGI(LOG_TAG,"-------------------------------washing step done----------------------");
 8003a90:	f000 fdb6 	bl	8004600 <HAL_GetTick>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461a      	mov	r2, r3
 8003a98:	490f      	ldr	r1, [pc, #60]	; (8003ad8 <step_washing_process+0x488>)
 8003a9a:	481d      	ldr	r0, [pc, #116]	; (8003b10 <step_washing_process+0x4c0>)
 8003a9c:	f00a fe20 	bl	800e6e0 <iprintf>
	            ws_state = WS_STATE_IDE;
 8003aa0:	4b0f      	ldr	r3, [pc, #60]	; (8003ae0 <step_washing_process+0x490>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
	        	return 1;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e00f      	b.n	8003aca <step_washing_process+0x47a>
	            break;
	        default:
	            // Handle an invalid state
	            break;
 8003aaa:	bf00      	nop
 8003aac:	e00c      	b.n	8003ac8 <step_washing_process+0x478>
	            break;
 8003aae:	bf00      	nop
 8003ab0:	e00a      	b.n	8003ac8 <step_washing_process+0x478>
	            break;
 8003ab2:	bf00      	nop
 8003ab4:	e008      	b.n	8003ac8 <step_washing_process+0x478>
	            break;
 8003ab6:	bf00      	nop
 8003ab8:	e006      	b.n	8003ac8 <step_washing_process+0x478>
	            break;
 8003aba:	bf00      	nop
 8003abc:	e004      	b.n	8003ac8 <step_washing_process+0x478>
	            break;
 8003abe:	bf00      	nop
 8003ac0:	e002      	b.n	8003ac8 <step_washing_process+0x478>
	            break;
 8003ac2:	bf00      	nop
 8003ac4:	e000      	b.n	8003ac8 <step_washing_process+0x478>
	            break;
 8003ac6:	bf00      	nop
	    }
	    return 0;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3704      	adds	r7, #4
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd90      	pop	{r4, r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	20003efc 	.word	0x20003efc
 8003ad8:	08010180 	.word	0x08010180
 8003adc:	08010634 	.word	0x08010634
 8003ae0:	20003f00 	.word	0x20003f00
 8003ae4:	20003f01 	.word	0x20003f01
 8003ae8:	20003f04 	.word	0x20003f04
 8003aec:	08010668 	.word	0x08010668
 8003af0:	0801068c 	.word	0x0801068c
 8003af4:	20000188 	.word	0x20000188
 8003af8:	080106c0 	.word	0x080106c0
 8003afc:	20003ea8 	.word	0x20003ea8
 8003b00:	080106ec 	.word	0x080106ec
 8003b04:	08010710 	.word	0x08010710
 8003b08:	0801073c 	.word	0x0801073c
 8003b0c:	08010770 	.word	0x08010770
 8003b10:	08010794 	.word	0x08010794

08003b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_MspInit+0x4c>)
 8003b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b22:	4a0f      	ldr	r2, [pc, #60]	; (8003b60 <HAL_MspInit+0x4c>)
 8003b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b28:	6453      	str	r3, [r2, #68]	; 0x44
 8003b2a:	4b0d      	ldr	r3, [pc, #52]	; (8003b60 <HAL_MspInit+0x4c>)
 8003b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b32:	607b      	str	r3, [r7, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	4b09      	ldr	r3, [pc, #36]	; (8003b60 <HAL_MspInit+0x4c>)
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	4a08      	ldr	r2, [pc, #32]	; (8003b60 <HAL_MspInit+0x4c>)
 8003b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b44:	6413      	str	r3, [r2, #64]	; 0x40
 8003b46:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_MspInit+0x4c>)
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003b52:	2007      	movs	r0, #7
 8003b54:	f000 fe54 	bl	8004800 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b58:	bf00      	nop
 8003b5a:	3708      	adds	r7, #8
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40023800 	.word	0x40023800

08003b64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b6c:	f107 0314 	add.w	r3, r7, #20
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	605a      	str	r2, [r3, #4]
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	60da      	str	r2, [r3, #12]
 8003b7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <HAL_I2C_MspInit+0x84>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d12c      	bne.n	8003be0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	4b18      	ldr	r3, [pc, #96]	; (8003bec <HAL_I2C_MspInit+0x88>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b8e:	4a17      	ldr	r2, [pc, #92]	; (8003bec <HAL_I2C_MspInit+0x88>)
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	6313      	str	r3, [r2, #48]	; 0x30
 8003b96:	4b15      	ldr	r3, [pc, #84]	; (8003bec <HAL_I2C_MspInit+0x88>)
 8003b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003ba2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ba8:	2312      	movs	r3, #18
 8003baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bac:	2301      	movs	r3, #1
 8003bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bb8:	f107 0314 	add.w	r3, r7, #20
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	480c      	ldr	r0, [pc, #48]	; (8003bf0 <HAL_I2C_MspInit+0x8c>)
 8003bc0:	f001 fc60 	bl	8005484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	4b08      	ldr	r3, [pc, #32]	; (8003bec <HAL_I2C_MspInit+0x88>)
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	4a07      	ldr	r2, [pc, #28]	; (8003bec <HAL_I2C_MspInit+0x88>)
 8003bce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bd2:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd4:	4b05      	ldr	r3, [pc, #20]	; (8003bec <HAL_I2C_MspInit+0x88>)
 8003bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003be0:	bf00      	nop
 8003be2:	3728      	adds	r7, #40	; 0x28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40005400 	.word	0x40005400
 8003bec:	40023800 	.word	0x40023800
 8003bf0:	40020400 	.word	0x40020400

08003bf4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b08a      	sub	sp, #40	; 0x28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bfc:	f107 0314 	add.w	r3, r7, #20
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]
 8003c08:	60da      	str	r2, [r3, #12]
 8003c0a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a19      	ldr	r2, [pc, #100]	; (8003c78 <HAL_SPI_MspInit+0x84>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d12b      	bne.n	8003c6e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <HAL_SPI_MspInit+0x88>)
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	4a17      	ldr	r2, [pc, #92]	; (8003c7c <HAL_SPI_MspInit+0x88>)
 8003c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003c24:	6453      	str	r3, [r2, #68]	; 0x44
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <HAL_SPI_MspInit+0x88>)
 8003c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c32:	2300      	movs	r3, #0
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	4b11      	ldr	r3, [pc, #68]	; (8003c7c <HAL_SPI_MspInit+0x88>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	4a10      	ldr	r2, [pc, #64]	; (8003c7c <HAL_SPI_MspInit+0x88>)
 8003c3c:	f043 0301 	orr.w	r3, r3, #1
 8003c40:	6313      	str	r3, [r2, #48]	; 0x30
 8003c42:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <HAL_SPI_MspInit+0x88>)
 8003c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003c4e:	23e0      	movs	r3, #224	; 0xe0
 8003c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c52:	2302      	movs	r3, #2
 8003c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003c5e:	2305      	movs	r3, #5
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c62:	f107 0314 	add.w	r3, r7, #20
 8003c66:	4619      	mov	r1, r3
 8003c68:	4805      	ldr	r0, [pc, #20]	; (8003c80 <HAL_SPI_MspInit+0x8c>)
 8003c6a:	f001 fc0b 	bl	8005484 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003c6e:	bf00      	nop
 8003c70:	3728      	adds	r7, #40	; 0x28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40013000 	.word	0x40013000
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40020000 	.word	0x40020000

08003c84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a48      	ldr	r2, [pc, #288]	; (8003db4 <HAL_TIM_Base_MspInit+0x130>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d13e      	bne.n	8003d14 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
 8003c9a:	4b47      	ldr	r3, [pc, #284]	; (8003db8 <HAL_TIM_Base_MspInit+0x134>)
 8003c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9e:	4a46      	ldr	r2, [pc, #280]	; (8003db8 <HAL_TIM_Base_MspInit+0x134>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6453      	str	r3, [r2, #68]	; 0x44
 8003ca6:	4b44      	ldr	r3, [pc, #272]	; (8003db8 <HAL_TIM_Base_MspInit+0x134>)
 8003ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	617b      	str	r3, [r7, #20]
 8003cb0:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8003cb2:	4b42      	ldr	r3, [pc, #264]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003cb4:	4a42      	ldr	r2, [pc, #264]	; (8003dc0 <HAL_TIM_Base_MspInit+0x13c>)
 8003cb6:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8003cb8:	4b40      	ldr	r3, [pc, #256]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003cba:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003cbe:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cc0:	4b3e      	ldr	r3, [pc, #248]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cc6:	4b3d      	ldr	r3, [pc, #244]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003ccc:	4b3b      	ldr	r3, [pc, #236]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003cce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cd2:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003cd4:	4b39      	ldr	r3, [pc, #228]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003cd6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cda:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003cdc:	4b37      	ldr	r3, [pc, #220]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ce2:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8003ce4:	4b35      	ldr	r3, [pc, #212]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003cea:	4b34      	ldr	r3, [pc, #208]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cf0:	4b32      	ldr	r3, [pc, #200]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8003cf6:	4831      	ldr	r0, [pc, #196]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003cf8:	f000 fdc4 	bl	8004884 <HAL_DMA_Init>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8003d02:	f7fe f95b 	bl	8001fbc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a2c      	ldr	r2, [pc, #176]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003d0a:	625a      	str	r2, [r3, #36]	; 0x24
 8003d0c:	4a2b      	ldr	r2, [pc, #172]	; (8003dbc <HAL_TIM_Base_MspInit+0x138>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003d12:	e04a      	b.n	8003daa <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM2)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1c:	d116      	bne.n	8003d4c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d1e:	2300      	movs	r3, #0
 8003d20:	613b      	str	r3, [r7, #16]
 8003d22:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <HAL_TIM_Base_MspInit+0x134>)
 8003d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d26:	4a24      	ldr	r2, [pc, #144]	; (8003db8 <HAL_TIM_Base_MspInit+0x134>)
 8003d28:	f043 0301 	orr.w	r3, r3, #1
 8003d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2e:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <HAL_TIM_Base_MspInit+0x134>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	201c      	movs	r0, #28
 8003d40:	f000 fd69 	bl	8004816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d44:	201c      	movs	r0, #28
 8003d46:	f000 fd82 	bl	800484e <HAL_NVIC_EnableIRQ>
}
 8003d4a:	e02e      	b.n	8003daa <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM3)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <HAL_TIM_Base_MspInit+0x140>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d10e      	bne.n	8003d74 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <HAL_TIM_Base_MspInit+0x134>)
 8003d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5e:	4a16      	ldr	r2, [pc, #88]	; (8003db8 <HAL_TIM_Base_MspInit+0x134>)
 8003d60:	f043 0302 	orr.w	r3, r3, #2
 8003d64:	6413      	str	r3, [r2, #64]	; 0x40
 8003d66:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <HAL_TIM_Base_MspInit+0x134>)
 8003d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	68fb      	ldr	r3, [r7, #12]
}
 8003d72:	e01a      	b.n	8003daa <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM5)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a13      	ldr	r2, [pc, #76]	; (8003dc8 <HAL_TIM_Base_MspInit+0x144>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d115      	bne.n	8003daa <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <HAL_TIM_Base_MspInit+0x134>)
 8003d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d86:	4a0c      	ldr	r2, [pc, #48]	; (8003db8 <HAL_TIM_Base_MspInit+0x134>)
 8003d88:	f043 0308 	orr.w	r3, r3, #8
 8003d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <HAL_TIM_Base_MspInit+0x134>)
 8003d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	60bb      	str	r3, [r7, #8]
 8003d98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	2032      	movs	r0, #50	; 0x32
 8003da0:	f000 fd39 	bl	8004816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003da4:	2032      	movs	r0, #50	; 0x32
 8003da6:	f000 fd52 	bl	800484e <HAL_NVIC_EnableIRQ>
}
 8003daa:	bf00      	nop
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	40010000 	.word	0x40010000
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	20001598 	.word	0x20001598
 8003dc0:	40026428 	.word	0x40026428
 8003dc4:	40000400 	.word	0x40000400
 8003dc8:	40000c00 	.word	0x40000c00

08003dcc <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b085      	sub	sp, #20
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a0b      	ldr	r2, [pc, #44]	; (8003e08 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d10d      	bne.n	8003dfa <HAL_TIM_OnePulse_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003dde:	2300      	movs	r3, #0
 8003de0:	60fb      	str	r3, [r7, #12]
 8003de2:	4b0a      	ldr	r3, [pc, #40]	; (8003e0c <HAL_TIM_OnePulse_MspInit+0x40>)
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	4a09      	ldr	r2, [pc, #36]	; (8003e0c <HAL_TIM_OnePulse_MspInit+0x40>)
 8003de8:	f043 0302 	orr.w	r3, r3, #2
 8003dec:	6453      	str	r3, [r2, #68]	; 0x44
 8003dee:	4b07      	ldr	r3, [pc, #28]	; (8003e0c <HAL_TIM_OnePulse_MspInit+0x40>)
 8003df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010400 	.word	0x40010400
 8003e0c:	40023800 	.word	0x40023800

08003e10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b08a      	sub	sp, #40	; 0x28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	60da      	str	r2, [r3, #12]
 8003e26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4a24      	ldr	r2, [pc, #144]	; (8003ec0 <HAL_TIM_MspPostInit+0xb0>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d11f      	bne.n	8003e72 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e32:	2300      	movs	r3, #0
 8003e34:	613b      	str	r3, [r7, #16]
 8003e36:	4b23      	ldr	r3, [pc, #140]	; (8003ec4 <HAL_TIM_MspPostInit+0xb4>)
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	4a22      	ldr	r2, [pc, #136]	; (8003ec4 <HAL_TIM_MspPostInit+0xb4>)
 8003e3c:	f043 0310 	orr.w	r3, r3, #16
 8003e40:	6313      	str	r3, [r2, #48]	; 0x30
 8003e42:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <HAL_TIM_MspPostInit+0xb4>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003e4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e54:	2302      	movs	r3, #2
 8003e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003e60:	2301      	movs	r3, #1
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003e64:	f107 0314 	add.w	r3, r7, #20
 8003e68:	4619      	mov	r1, r3
 8003e6a:	4817      	ldr	r0, [pc, #92]	; (8003ec8 <HAL_TIM_MspPostInit+0xb8>)
 8003e6c:	f001 fb0a 	bl	8005484 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003e70:	e022      	b.n	8003eb8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a15      	ldr	r2, [pc, #84]	; (8003ecc <HAL_TIM_MspPostInit+0xbc>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d11d      	bne.n	8003eb8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	4b10      	ldr	r3, [pc, #64]	; (8003ec4 <HAL_TIM_MspPostInit+0xb4>)
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	4a0f      	ldr	r2, [pc, #60]	; (8003ec4 <HAL_TIM_MspPostInit+0xb4>)
 8003e86:	f043 0304 	orr.w	r3, r3, #4
 8003e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8c:	4b0d      	ldr	r3, [pc, #52]	; (8003ec4 <HAL_TIM_MspPostInit+0xb4>)
 8003e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e98:	2340      	movs	r3, #64	; 0x40
 8003e9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eac:	f107 0314 	add.w	r3, r7, #20
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	4807      	ldr	r0, [pc, #28]	; (8003ed0 <HAL_TIM_MspPostInit+0xc0>)
 8003eb4:	f001 fae6 	bl	8005484 <HAL_GPIO_Init>
}
 8003eb8:	bf00      	nop
 8003eba:	3728      	adds	r7, #40	; 0x28
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40010000 	.word	0x40010000
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	40000400 	.word	0x40000400
 8003ed0:	40020800 	.word	0x40020800

08003ed4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b08a      	sub	sp, #40	; 0x28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003edc:	f107 0314 	add.w	r3, r7, #20
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	601a      	str	r2, [r3, #0]
 8003ee4:	605a      	str	r2, [r3, #4]
 8003ee6:	609a      	str	r2, [r3, #8]
 8003ee8:	60da      	str	r2, [r3, #12]
 8003eea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a4b      	ldr	r2, [pc, #300]	; (8004020 <HAL_UART_MspInit+0x14c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	f040 8090 	bne.w	8004018 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003ef8:	2300      	movs	r3, #0
 8003efa:	613b      	str	r3, [r7, #16]
 8003efc:	4b49      	ldr	r3, [pc, #292]	; (8004024 <HAL_UART_MspInit+0x150>)
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	4a48      	ldr	r2, [pc, #288]	; (8004024 <HAL_UART_MspInit+0x150>)
 8003f02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f06:	6413      	str	r3, [r2, #64]	; 0x40
 8003f08:	4b46      	ldr	r3, [pc, #280]	; (8004024 <HAL_UART_MspInit+0x150>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f10:	613b      	str	r3, [r7, #16]
 8003f12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	4b42      	ldr	r3, [pc, #264]	; (8004024 <HAL_UART_MspInit+0x150>)
 8003f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f1c:	4a41      	ldr	r2, [pc, #260]	; (8004024 <HAL_UART_MspInit+0x150>)
 8003f1e:	f043 0301 	orr.w	r3, r3, #1
 8003f22:	6313      	str	r3, [r2, #48]	; 0x30
 8003f24:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <HAL_UART_MspInit+0x150>)
 8003f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f30:	230c      	movs	r3, #12
 8003f32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f34:	2302      	movs	r3, #2
 8003f36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003f40:	2307      	movs	r3, #7
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f44:	f107 0314 	add.w	r3, r7, #20
 8003f48:	4619      	mov	r1, r3
 8003f4a:	4837      	ldr	r0, [pc, #220]	; (8004028 <HAL_UART_MspInit+0x154>)
 8003f4c:	f001 fa9a 	bl	8005484 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003f50:	4b36      	ldr	r3, [pc, #216]	; (800402c <HAL_UART_MspInit+0x158>)
 8003f52:	4a37      	ldr	r2, [pc, #220]	; (8004030 <HAL_UART_MspInit+0x15c>)
 8003f54:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003f56:	4b35      	ldr	r3, [pc, #212]	; (800402c <HAL_UART_MspInit+0x158>)
 8003f58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f5c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f5e:	4b33      	ldr	r3, [pc, #204]	; (800402c <HAL_UART_MspInit+0x158>)
 8003f60:	2240      	movs	r2, #64	; 0x40
 8003f62:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f64:	4b31      	ldr	r3, [pc, #196]	; (800402c <HAL_UART_MspInit+0x158>)
 8003f66:	2200      	movs	r2, #0
 8003f68:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f6a:	4b30      	ldr	r3, [pc, #192]	; (800402c <HAL_UART_MspInit+0x158>)
 8003f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f70:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f72:	4b2e      	ldr	r3, [pc, #184]	; (800402c <HAL_UART_MspInit+0x158>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f78:	4b2c      	ldr	r3, [pc, #176]	; (800402c <HAL_UART_MspInit+0x158>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003f7e:	4b2b      	ldr	r3, [pc, #172]	; (800402c <HAL_UART_MspInit+0x158>)
 8003f80:	2200      	movs	r2, #0
 8003f82:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003f84:	4b29      	ldr	r3, [pc, #164]	; (800402c <HAL_UART_MspInit+0x158>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f8a:	4b28      	ldr	r3, [pc, #160]	; (800402c <HAL_UART_MspInit+0x158>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003f90:	4826      	ldr	r0, [pc, #152]	; (800402c <HAL_UART_MspInit+0x158>)
 8003f92:	f000 fc77 	bl	8004884 <HAL_DMA_Init>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003f9c:	f7fe f80e 	bl	8001fbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a22      	ldr	r2, [pc, #136]	; (800402c <HAL_UART_MspInit+0x158>)
 8003fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8003fa6:	4a21      	ldr	r2, [pc, #132]	; (800402c <HAL_UART_MspInit+0x158>)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003fac:	4b21      	ldr	r3, [pc, #132]	; (8004034 <HAL_UART_MspInit+0x160>)
 8003fae:	4a22      	ldr	r2, [pc, #136]	; (8004038 <HAL_UART_MspInit+0x164>)
 8003fb0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <HAL_UART_MspInit+0x160>)
 8003fb4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fb8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fba:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <HAL_UART_MspInit+0x160>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fc0:	4b1c      	ldr	r3, [pc, #112]	; (8004034 <HAL_UART_MspInit+0x160>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003fc6:	4b1b      	ldr	r3, [pc, #108]	; (8004034 <HAL_UART_MspInit+0x160>)
 8003fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fcc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fce:	4b19      	ldr	r3, [pc, #100]	; (8004034 <HAL_UART_MspInit+0x160>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fd4:	4b17      	ldr	r3, [pc, #92]	; (8004034 <HAL_UART_MspInit+0x160>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003fda:	4b16      	ldr	r3, [pc, #88]	; (8004034 <HAL_UART_MspInit+0x160>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003fe0:	4b14      	ldr	r3, [pc, #80]	; (8004034 <HAL_UART_MspInit+0x160>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <HAL_UART_MspInit+0x160>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003fec:	4811      	ldr	r0, [pc, #68]	; (8004034 <HAL_UART_MspInit+0x160>)
 8003fee:	f000 fc49 	bl	8004884 <HAL_DMA_Init>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8003ff8:	f7fd ffe0 	bl	8001fbc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a0d      	ldr	r2, [pc, #52]	; (8004034 <HAL_UART_MspInit+0x160>)
 8004000:	639a      	str	r2, [r3, #56]	; 0x38
 8004002:	4a0c      	ldr	r2, [pc, #48]	; (8004034 <HAL_UART_MspInit+0x160>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004008:	2200      	movs	r2, #0
 800400a:	2100      	movs	r1, #0
 800400c:	2026      	movs	r0, #38	; 0x26
 800400e:	f000 fc02 	bl	8004816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004012:	2026      	movs	r0, #38	; 0x26
 8004014:	f000 fc1b 	bl	800484e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004018:	bf00      	nop
 800401a:	3728      	adds	r7, #40	; 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40004400 	.word	0x40004400
 8004024:	40023800 	.word	0x40023800
 8004028:	40020000 	.word	0x40020000
 800402c:	2000163c 	.word	0x2000163c
 8004030:	400260a0 	.word	0x400260a0
 8004034:	2000169c 	.word	0x2000169c
 8004038:	40026088 	.word	0x40026088

0800403c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800403c:	b480      	push	{r7}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004040:	e7fe      	b.n	8004040 <NMI_Handler+0x4>

08004042 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004042:	b480      	push	{r7}
 8004044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004046:	e7fe      	b.n	8004046 <HardFault_Handler+0x4>

08004048 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800404c:	e7fe      	b.n	800404c <MemManage_Handler+0x4>

0800404e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800404e:	b480      	push	{r7}
 8004050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004052:	e7fe      	b.n	8004052 <BusFault_Handler+0x4>

08004054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004058:	e7fe      	b.n	8004058 <UsageFault_Handler+0x4>

0800405a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800405a:	b480      	push	{r7}
 800405c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800405e:	bf00      	nop
 8004060:	46bd      	mov	sp, r7
 8004062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004066:	4770      	bx	lr

08004068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004076:	b480      	push	{r7}
 8004078:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800407a:	bf00      	nop
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004088:	f000 faa6 	bl	80045d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800408c:	bf00      	nop
 800408e:	bd80      	pop	{r7, pc}

08004090 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004094:	4802      	ldr	r0, [pc, #8]	; (80040a0 <DMA1_Stream5_IRQHandler+0x10>)
 8004096:	f000 fd8d 	bl	8004bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800409a:	bf00      	nop
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	2000169c 	.word	0x2000169c

080040a4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80040a8:	4802      	ldr	r0, [pc, #8]	; (80040b4 <DMA1_Stream6_IRQHandler+0x10>)
 80040aa:	f000 fd83 	bl	8004bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	2000163c 	.word	0x2000163c

080040b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80040bc:	4802      	ldr	r0, [pc, #8]	; (80040c8 <TIM2_IRQHandler+0x10>)
 80040be:	f003 ff4d 	bl	8007f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80040c2:	bf00      	nop
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	20001478 	.word	0x20001478

080040cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80040d0:	4802      	ldr	r0, [pc, #8]	; (80040dc <USART2_IRQHandler+0x10>)
 80040d2:	f005 f833 	bl	800913c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	200015f8 	.word	0x200015f8

080040e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80040e4:	4802      	ldr	r0, [pc, #8]	; (80040f0 <TIM5_IRQHandler+0x10>)
 80040e6:	f003 ff39 	bl	8007f5c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80040ea:	bf00      	nop
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20001508 	.word	0x20001508

080040f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80040f8:	4802      	ldr	r0, [pc, #8]	; (8004104 <DMA2_Stream1_IRQHandler+0x10>)
 80040fa:	f000 fd5b 	bl	8004bb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80040fe:	bf00      	nop
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20001598 	.word	0x20001598

08004108 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800410c:	4802      	ldr	r0, [pc, #8]	; (8004118 <OTG_FS_IRQHandler+0x10>)
 800410e:	f001 fe35 	bl	8005d7c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004112:	bf00      	nop
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20006da8 	.word	0x20006da8

0800411c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
 800412c:	e00a      	b.n	8004144 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800412e:	f3af 8000 	nop.w
 8004132:	4601      	mov	r1, r0
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	60ba      	str	r2, [r7, #8]
 800413a:	b2ca      	uxtb	r2, r1
 800413c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	3301      	adds	r3, #1
 8004142:	617b      	str	r3, [r7, #20]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	dbf0      	blt.n	800412e <_read+0x12>
  }

  return len;
 800414c:	687b      	ldr	r3, [r7, #4]
}
 800414e:	4618      	mov	r0, r3
 8004150:	3718      	adds	r7, #24
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800415e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004162:	4618      	mov	r0, r3
 8004164:	370c      	adds	r7, #12
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr

0800416e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
 8004176:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800417e:	605a      	str	r2, [r3, #4]
  return 0;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	370c      	adds	r7, #12
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <_isatty>:

int _isatty(int file)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004196:	2301      	movs	r3, #1
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3714      	adds	r7, #20
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
	...

080041c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <_sbrk+0x5c>)
 80041ca:	4b15      	ldr	r3, [pc, #84]	; (8004220 <_sbrk+0x60>)
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041d4:	4b13      	ldr	r3, [pc, #76]	; (8004224 <_sbrk+0x64>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d102      	bne.n	80041e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041dc:	4b11      	ldr	r3, [pc, #68]	; (8004224 <_sbrk+0x64>)
 80041de:	4a12      	ldr	r2, [pc, #72]	; (8004228 <_sbrk+0x68>)
 80041e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041e2:	4b10      	ldr	r3, [pc, #64]	; (8004224 <_sbrk+0x64>)
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4413      	add	r3, r2
 80041ea:	693a      	ldr	r2, [r7, #16]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d207      	bcs.n	8004200 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041f0:	f00a fc1a 	bl	800ea28 <__errno>
 80041f4:	4603      	mov	r3, r0
 80041f6:	220c      	movs	r2, #12
 80041f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041fa:	f04f 33ff 	mov.w	r3, #4294967295
 80041fe:	e009      	b.n	8004214 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004200:	4b08      	ldr	r3, [pc, #32]	; (8004224 <_sbrk+0x64>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004206:	4b07      	ldr	r3, [pc, #28]	; (8004224 <_sbrk+0x64>)
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4413      	add	r3, r2
 800420e:	4a05      	ldr	r2, [pc, #20]	; (8004224 <_sbrk+0x64>)
 8004210:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004212:	68fb      	ldr	r3, [r7, #12]
}
 8004214:	4618      	mov	r0, r3
 8004216:	3718      	adds	r7, #24
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}
 800421c:	20020000 	.word	0x20020000
 8004220:	00008000 	.word	0x00008000
 8004224:	20003f08 	.word	0x20003f08
 8004228:	20007620 	.word	0x20007620

0800422c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004230:	4b06      	ldr	r3, [pc, #24]	; (800424c <SystemInit+0x20>)
 8004232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004236:	4a05      	ldr	r2, [pc, #20]	; (800424c <SystemInit+0x20>)
 8004238:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800423c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <HAL_UART_TxCpltCallback>:
void uart_dma_stop(void);

_uart_frame tx[10];
static uint8_t tc=0,ti=0,to=0;
uint32_t uart_tc =0,uart_itc =0;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
	uart_itc++;
 8004258:	4b1d      	ldr	r3, [pc, #116]	; (80042d0 <HAL_UART_TxCpltCallback+0x80>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3301      	adds	r3, #1
 800425e:	4a1c      	ldr	r2, [pc, #112]	; (80042d0 <HAL_UART_TxCpltCallback+0x80>)
 8004260:	6013      	str	r3, [r2, #0]
	if(tc)
 8004262:	4b1c      	ldr	r3, [pc, #112]	; (80042d4 <HAL_UART_TxCpltCallback+0x84>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d02d      	beq.n	80042c6 <HAL_UART_TxCpltCallback+0x76>
	{
		if(HAL_UART_Transmit_DMA(&huart2, tx[to].data, tx[to].size) == HAL_OK){
 800426a:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <HAL_UART_TxCpltCallback+0x88>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	f240 235a 	movw	r3, #602	; 0x25a
 8004274:	fb02 f303 	mul.w	r3, r2, r3
 8004278:	4a18      	ldr	r2, [pc, #96]	; (80042dc <HAL_UART_TxCpltCallback+0x8c>)
 800427a:	4413      	add	r3, r2
 800427c:	1c99      	adds	r1, r3, #2
 800427e:	4b16      	ldr	r3, [pc, #88]	; (80042d8 <HAL_UART_TxCpltCallback+0x88>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	4a15      	ldr	r2, [pc, #84]	; (80042dc <HAL_UART_TxCpltCallback+0x8c>)
 8004286:	f240 235a 	movw	r3, #602	; 0x25a
 800428a:	fb00 f303 	mul.w	r3, r0, r3
 800428e:	4413      	add	r3, r2
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	4812      	ldr	r0, [pc, #72]	; (80042e0 <HAL_UART_TxCpltCallback+0x90>)
 8004296:	f004 fe23 	bl	8008ee0 <HAL_UART_Transmit_DMA>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d112      	bne.n	80042c6 <HAL_UART_TxCpltCallback+0x76>
				to++;
 80042a0:	4b0d      	ldr	r3, [pc, #52]	; (80042d8 <HAL_UART_TxCpltCallback+0x88>)
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	b2da      	uxtb	r2, r3
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_UART_TxCpltCallback+0x88>)
 80042aa:	701a      	strb	r2, [r3, #0]
				tc--;
 80042ac:	4b09      	ldr	r3, [pc, #36]	; (80042d4 <HAL_UART_TxCpltCallback+0x84>)
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	b2da      	uxtb	r2, r3
 80042b4:	4b07      	ldr	r3, [pc, #28]	; (80042d4 <HAL_UART_TxCpltCallback+0x84>)
 80042b6:	701a      	strb	r2, [r3, #0]
				if(to ==TX_SIZE)
 80042b8:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <HAL_UART_TxCpltCallback+0x88>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b0a      	cmp	r3, #10
 80042be:	d102      	bne.n	80042c6 <HAL_UART_TxCpltCallback+0x76>
					to = 0;
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_UART_TxCpltCallback+0x88>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	200058a0 	.word	0x200058a0
 80042d4:	20005898 	.word	0x20005898
 80042d8:	2000589a 	.word	0x2000589a
 80042dc:	20004114 	.word	0x20004114
 80042e0:	200015f8 	.word	0x200015f8

080042e4 <uart_transmit>:
void uart_transmit(uint8_t *data,uint8_t size)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	460b      	mov	r3, r1
 80042ee:	70fb      	strb	r3, [r7, #3]
	uart_tc++;
 80042f0:	4b32      	ldr	r3, [pc, #200]	; (80043bc <uart_transmit+0xd8>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3301      	adds	r3, #1
 80042f6:	4a31      	ldr	r2, [pc, #196]	; (80043bc <uart_transmit+0xd8>)
 80042f8:	6013      	str	r3, [r2, #0]
	tx[ti].size = size;
 80042fa:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <uart_transmit+0xdc>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	78fb      	ldrb	r3, [r7, #3]
 8004302:	b299      	uxth	r1, r3
 8004304:	4a2f      	ldr	r2, [pc, #188]	; (80043c4 <uart_transmit+0xe0>)
 8004306:	f240 235a 	movw	r3, #602	; 0x25a
 800430a:	fb00 f303 	mul.w	r3, r0, r3
 800430e:	4413      	add	r3, r2
 8004310:	460a      	mov	r2, r1
 8004312:	801a      	strh	r2, [r3, #0]
	memcpy(tx[ti].data,data,size);
 8004314:	4b2a      	ldr	r3, [pc, #168]	; (80043c0 <uart_transmit+0xdc>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	f240 235a 	movw	r3, #602	; 0x25a
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	4a28      	ldr	r2, [pc, #160]	; (80043c4 <uart_transmit+0xe0>)
 8004324:	4413      	add	r3, r2
 8004326:	3302      	adds	r3, #2
 8004328:	78fa      	ldrb	r2, [r7, #3]
 800432a:	6879      	ldr	r1, [r7, #4]
 800432c:	4618      	mov	r0, r3
 800432e:	f00a fba7 	bl	800ea80 <memcpy>
	ti++;
 8004332:	4b23      	ldr	r3, [pc, #140]	; (80043c0 <uart_transmit+0xdc>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	3301      	adds	r3, #1
 8004338:	b2da      	uxtb	r2, r3
 800433a:	4b21      	ldr	r3, [pc, #132]	; (80043c0 <uart_transmit+0xdc>)
 800433c:	701a      	strb	r2, [r3, #0]
	if(ti ==TX_SIZE)
 800433e:	4b20      	ldr	r3, [pc, #128]	; (80043c0 <uart_transmit+0xdc>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b0a      	cmp	r3, #10
 8004344:	d102      	bne.n	800434c <uart_transmit+0x68>
		ti = 0;
 8004346:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <uart_transmit+0xdc>)
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
	tc++;
 800434c:	4b1e      	ldr	r3, [pc, #120]	; (80043c8 <uart_transmit+0xe4>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	3301      	adds	r3, #1
 8004352:	b2da      	uxtb	r2, r3
 8004354:	4b1c      	ldr	r3, [pc, #112]	; (80043c8 <uart_transmit+0xe4>)
 8004356:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(&huart2, tx[to].data, tx[to].size) == HAL_OK){
 8004358:	4b1c      	ldr	r3, [pc, #112]	; (80043cc <uart_transmit+0xe8>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	461a      	mov	r2, r3
 800435e:	f240 235a 	movw	r3, #602	; 0x25a
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	4a17      	ldr	r2, [pc, #92]	; (80043c4 <uart_transmit+0xe0>)
 8004368:	4413      	add	r3, r2
 800436a:	1c99      	adds	r1, r3, #2
 800436c:	4b17      	ldr	r3, [pc, #92]	; (80043cc <uart_transmit+0xe8>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	4618      	mov	r0, r3
 8004372:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <uart_transmit+0xe0>)
 8004374:	f240 235a 	movw	r3, #602	; 0x25a
 8004378:	fb00 f303 	mul.w	r3, r0, r3
 800437c:	4413      	add	r3, r2
 800437e:	881b      	ldrh	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	4813      	ldr	r0, [pc, #76]	; (80043d0 <uart_transmit+0xec>)
 8004384:	f004 fdac 	bl	8008ee0 <HAL_UART_Transmit_DMA>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d112      	bne.n	80043b4 <uart_transmit+0xd0>
		to++;
 800438e:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <uart_transmit+0xe8>)
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	3301      	adds	r3, #1
 8004394:	b2da      	uxtb	r2, r3
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <uart_transmit+0xe8>)
 8004398:	701a      	strb	r2, [r3, #0]
		tc--;
 800439a:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <uart_transmit+0xe4>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	3b01      	subs	r3, #1
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	4b09      	ldr	r3, [pc, #36]	; (80043c8 <uart_transmit+0xe4>)
 80043a4:	701a      	strb	r2, [r3, #0]
		if(to ==TX_SIZE)
 80043a6:	4b09      	ldr	r3, [pc, #36]	; (80043cc <uart_transmit+0xe8>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b0a      	cmp	r3, #10
 80043ac:	d102      	bne.n	80043b4 <uart_transmit+0xd0>
			to = 0;
 80043ae:	4b07      	ldr	r3, [pc, #28]	; (80043cc <uart_transmit+0xe8>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]

	}
}
 80043b4:	bf00      	nop
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	2000589c 	.word	0x2000589c
 80043c0:	20005899 	.word	0x20005899
 80043c4:	20004114 	.word	0x20004114
 80043c8:	20005898 	.word	0x20005898
 80043cc:	2000589a 	.word	0x2000589a
 80043d0:	200015f8 	.word	0x200015f8

080043d4 <uart_dma_start>:


void uart_dma_start(void){
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, uart_rxbuf, UART_BUF_SIZE);
 80043d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043dc:	4904      	ldr	r1, [pc, #16]	; (80043f0 <uart_dma_start+0x1c>)
 80043de:	4805      	ldr	r0, [pc, #20]	; (80043f4 <uart_dma_start+0x20>)
 80043e0:	f004 fdfc 	bl	8008fdc <HAL_UART_Receive_DMA>
	UART_Rx_recved= UART_BUF_SIZE+1;
 80043e4:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <uart_dma_start+0x24>)
 80043e6:	f240 2201 	movw	r2, #513	; 0x201
 80043ea:	801a      	strh	r2, [r3, #0]
}
 80043ec:	bf00      	nop
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	20003f0c 	.word	0x20003f0c
 80043f4:	200015f8 	.word	0x200015f8
 80043f8:	20000014 	.word	0x20000014

080043fc <uart_dma_stop>:

void uart_dma_stop(void){
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart2);			//stop DMA
 8004400:	4802      	ldr	r0, [pc, #8]	; (800440c <uart_dma_stop+0x10>)
 8004402:	f004 fe1b 	bl	800903c <HAL_UART_DMAStop>
}
 8004406:	bf00      	nop
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	200015f8 	.word	0x200015f8

08004410 <HAL_UART_RxCpltCallback>:

__weak int dw_process_rx_buffer(uint8_t *data,uint16_t size){
	return 0;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	uart_dma_stop();
 8004418:	f7ff fff0 	bl	80043fc <uart_dma_stop>
	uart_dma_start();
 800441c:	f7ff ffda 	bl	80043d4 <uart_dma_start>
}
 8004420:	bf00      	nop
 8004422:	3708      	adds	r7, #8
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <uart_process>:
void uart_process(void){
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
	if(huart2.hdmarx->Instance->NDTR != UART_BUF_SIZE) {
 800442c:	4b1d      	ldr	r3, [pc, #116]	; (80044a4 <uart_process+0x7c>)
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004438:	d031      	beq.n	800449e <uart_process+0x76>
	  if(huart2.hdmarx->Instance->NDTR != UART_Rx_recved) {
 800443a:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <uart_process+0x7c>)
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	4a19      	ldr	r2, [pc, #100]	; (80044a8 <uart_process+0x80>)
 8004444:	8812      	ldrh	r2, [r2, #0]
 8004446:	4293      	cmp	r3, r2
 8004448:	d00d      	beq.n	8004466 <uart_process+0x3e>
		  UART_Rx_recved = huart2.hdmarx->Instance->NDTR;
 800444a:	4b16      	ldr	r3, [pc, #88]	; (80044a4 <uart_process+0x7c>)
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	b29a      	uxth	r2, r3
 8004454:	4b14      	ldr	r3, [pc, #80]	; (80044a8 <uart_process+0x80>)
 8004456:	801a      	strh	r2, [r3, #0]
		  UART_Rx_Time = HAL_GetTick() + 2;
 8004458:	f000 f8d2 	bl	8004600 <HAL_GetTick>
 800445c:	4603      	mov	r3, r0
 800445e:	3302      	adds	r3, #2
 8004460:	4a12      	ldr	r2, [pc, #72]	; (80044ac <uart_process+0x84>)
 8004462:	6013      	str	r3, [r2, #0]
			  uart_dma_start();
//			  process_data_rx_uart();
		  }
	  }
	}
}
 8004464:	e01b      	b.n	800449e <uart_process+0x76>
		  if(HAL_GetTick()> UART_Rx_Time)  // timeoutframe
 8004466:	f000 f8cb 	bl	8004600 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	4b0f      	ldr	r3, [pc, #60]	; (80044ac <uart_process+0x84>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	429a      	cmp	r2, r3
 8004472:	d914      	bls.n	800449e <uart_process+0x76>
			  uart_dma_stop();
 8004474:	f7ff ffc2 	bl	80043fc <uart_dma_stop>
			  uart_rx_cnt++;
 8004478:	4b0d      	ldr	r3, [pc, #52]	; (80044b0 <uart_process+0x88>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	4a0c      	ldr	r2, [pc, #48]	; (80044b0 <uart_process+0x88>)
 8004480:	6013      	str	r3, [r2, #0]
			  dw_process_rx_buffer(uart_rxbuf, UART_BUF_SIZE - huart2.hdmarx->Instance->NDTR);
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <uart_process+0x7c>)
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	b29b      	uxth	r3, r3
 800448c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8004490:	b29b      	uxth	r3, r3
 8004492:	4619      	mov	r1, r3
 8004494:	4807      	ldr	r0, [pc, #28]	; (80044b4 <uart_process+0x8c>)
 8004496:	f7fc fcf5 	bl	8000e84 <dw_process_rx_buffer>
			  uart_dma_start();
 800449a:	f7ff ff9b 	bl	80043d4 <uart_dma_start>
}
 800449e:	bf00      	nop
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	200015f8 	.word	0x200015f8
 80044a8:	20000014 	.word	0x20000014
 80044ac:	2000410c 	.word	0x2000410c
 80044b0:	20004110 	.word	0x20004110
 80044b4:	20003f0c 	.word	0x20003f0c

080044b8 <uart_transmit_block>:

HAL_StatusTypeDef uart_transmit_block(uint8_t *data,uint16_t size,uint16_t timeout){
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	460b      	mov	r3, r1
 80044c2:	807b      	strh	r3, [r7, #2]
 80044c4:	4613      	mov	r3, r2
 80044c6:	803b      	strh	r3, [r7, #0]
	//return HAL_UART_Transmit(&huart2, data, size, timeout);
	uart_transmit(data,size);
 80044c8:	887b      	ldrh	r3, [r7, #2]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	4619      	mov	r1, r3
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f7ff ff08 	bl	80042e4 <uart_transmit>
	return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80044e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004518 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80044e4:	480d      	ldr	r0, [pc, #52]	; (800451c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80044e6:	490e      	ldr	r1, [pc, #56]	; (8004520 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80044e8:	4a0e      	ldr	r2, [pc, #56]	; (8004524 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80044ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044ec:	e002      	b.n	80044f4 <LoopCopyDataInit>

080044ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044f2:	3304      	adds	r3, #4

080044f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044f8:	d3f9      	bcc.n	80044ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044fa:	4a0b      	ldr	r2, [pc, #44]	; (8004528 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80044fc:	4c0b      	ldr	r4, [pc, #44]	; (800452c <LoopFillZerobss+0x26>)
  movs r3, #0
 80044fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004500:	e001      	b.n	8004506 <LoopFillZerobss>

08004502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004504:	3204      	adds	r2, #4

08004506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004508:	d3fb      	bcc.n	8004502 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800450a:	f7ff fe8f 	bl	800422c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800450e:	f00a fa91 	bl	800ea34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004512:	f7fd f853 	bl	80015bc <main>
  bx  lr    
 8004516:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004518:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800451c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004520:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8004524:	08011860 	.word	0x08011860
  ldr r2, =_sbss
 8004528:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 800452c:	20007620 	.word	0x20007620

08004530 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004530:	e7fe      	b.n	8004530 <ADC_IRQHandler>
	...

08004534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004538:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <HAL_Init+0x40>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a0d      	ldr	r2, [pc, #52]	; (8004574 <HAL_Init+0x40>)
 800453e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004542:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004544:	4b0b      	ldr	r3, [pc, #44]	; (8004574 <HAL_Init+0x40>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a0a      	ldr	r2, [pc, #40]	; (8004574 <HAL_Init+0x40>)
 800454a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800454e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004550:	4b08      	ldr	r3, [pc, #32]	; (8004574 <HAL_Init+0x40>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a07      	ldr	r2, [pc, #28]	; (8004574 <HAL_Init+0x40>)
 8004556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800455a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800455c:	2003      	movs	r0, #3
 800455e:	f000 f94f 	bl	8004800 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004562:	2000      	movs	r0, #0
 8004564:	f000 f808 	bl	8004578 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004568:	f7ff fad4 	bl	8003b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40023c00 	.word	0x40023c00

08004578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004580:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_InitTick+0x54>)
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <HAL_InitTick+0x58>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	4619      	mov	r1, r3
 800458a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800458e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004592:	fbb2 f3f3 	udiv	r3, r2, r3
 8004596:	4618      	mov	r0, r3
 8004598:	f000 f967 	bl	800486a <HAL_SYSTICK_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e00e      	b.n	80045c4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b0f      	cmp	r3, #15
 80045aa:	d80a      	bhi.n	80045c2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80045ac:	2200      	movs	r2, #0
 80045ae:	6879      	ldr	r1, [r7, #4]
 80045b0:	f04f 30ff 	mov.w	r0, #4294967295
 80045b4:	f000 f92f 	bl	8004816 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80045b8:	4a06      	ldr	r2, [pc, #24]	; (80045d4 <HAL_InitTick+0x5c>)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	e000      	b.n	80045c4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	20000010 	.word	0x20000010
 80045d0:	2000001c 	.word	0x2000001c
 80045d4:	20000018 	.word	0x20000018

080045d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045dc:	4b06      	ldr	r3, [pc, #24]	; (80045f8 <HAL_IncTick+0x20>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	461a      	mov	r2, r3
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_IncTick+0x24>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4413      	add	r3, r2
 80045e8:	4a04      	ldr	r2, [pc, #16]	; (80045fc <HAL_IncTick+0x24>)
 80045ea:	6013      	str	r3, [r2, #0]
}
 80045ec:	bf00      	nop
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	2000001c 	.word	0x2000001c
 80045fc:	200058a4 	.word	0x200058a4

08004600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return uwTick;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_GetTick+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	200058a4 	.word	0x200058a4

08004618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004620:	f7ff ffee 	bl	8004600 <HAL_GetTick>
 8004624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d005      	beq.n	800463e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <HAL_Delay+0x44>)
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800463e:	bf00      	nop
 8004640:	f7ff ffde 	bl	8004600 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	429a      	cmp	r2, r3
 800464e:	d8f7      	bhi.n	8004640 <HAL_Delay+0x28>
  {
  }
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	2000001c 	.word	0x2000001c

08004660 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f003 0307 	and.w	r3, r3, #7
 800466e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004670:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800467c:	4013      	ands	r3, r2
 800467e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004688:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800468c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004690:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004692:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <__NVIC_SetPriorityGrouping+0x44>)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	60d3      	str	r3, [r2, #12]
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	e000ed00 	.word	0xe000ed00

080046a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046ac:	4b04      	ldr	r3, [pc, #16]	; (80046c0 <__NVIC_GetPriorityGrouping+0x18>)
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	0a1b      	lsrs	r3, r3, #8
 80046b2:	f003 0307 	and.w	r3, r3, #7
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	e000ed00 	.word	0xe000ed00

080046c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	db0b      	blt.n	80046ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046d6:	79fb      	ldrb	r3, [r7, #7]
 80046d8:	f003 021f 	and.w	r2, r3, #31
 80046dc:	4907      	ldr	r1, [pc, #28]	; (80046fc <__NVIC_EnableIRQ+0x38>)
 80046de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e2:	095b      	lsrs	r3, r3, #5
 80046e4:	2001      	movs	r0, #1
 80046e6:	fa00 f202 	lsl.w	r2, r0, r2
 80046ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	e000e100 	.word	0xe000e100

08004700 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004700:	b480      	push	{r7}
 8004702:	b083      	sub	sp, #12
 8004704:	af00      	add	r7, sp, #0
 8004706:	4603      	mov	r3, r0
 8004708:	6039      	str	r1, [r7, #0]
 800470a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800470c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004710:	2b00      	cmp	r3, #0
 8004712:	db0a      	blt.n	800472a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	b2da      	uxtb	r2, r3
 8004718:	490c      	ldr	r1, [pc, #48]	; (800474c <__NVIC_SetPriority+0x4c>)
 800471a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471e:	0112      	lsls	r2, r2, #4
 8004720:	b2d2      	uxtb	r2, r2
 8004722:	440b      	add	r3, r1
 8004724:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004728:	e00a      	b.n	8004740 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	b2da      	uxtb	r2, r3
 800472e:	4908      	ldr	r1, [pc, #32]	; (8004750 <__NVIC_SetPriority+0x50>)
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	f003 030f 	and.w	r3, r3, #15
 8004736:	3b04      	subs	r3, #4
 8004738:	0112      	lsls	r2, r2, #4
 800473a:	b2d2      	uxtb	r2, r2
 800473c:	440b      	add	r3, r1
 800473e:	761a      	strb	r2, [r3, #24]
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	e000e100 	.word	0xe000e100
 8004750:	e000ed00 	.word	0xe000ed00

08004754 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004754:	b480      	push	{r7}
 8004756:	b089      	sub	sp, #36	; 0x24
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f1c3 0307 	rsb	r3, r3, #7
 800476e:	2b04      	cmp	r3, #4
 8004770:	bf28      	it	cs
 8004772:	2304      	movcs	r3, #4
 8004774:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	3304      	adds	r3, #4
 800477a:	2b06      	cmp	r3, #6
 800477c:	d902      	bls.n	8004784 <NVIC_EncodePriority+0x30>
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3b03      	subs	r3, #3
 8004782:	e000      	b.n	8004786 <NVIC_EncodePriority+0x32>
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004788:	f04f 32ff 	mov.w	r2, #4294967295
 800478c:	69bb      	ldr	r3, [r7, #24]
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43da      	mvns	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	401a      	ands	r2, r3
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800479c:	f04f 31ff 	mov.w	r1, #4294967295
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	fa01 f303 	lsl.w	r3, r1, r3
 80047a6:	43d9      	mvns	r1, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047ac:	4313      	orrs	r3, r2
         );
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3724      	adds	r7, #36	; 0x24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
	...

080047bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	3b01      	subs	r3, #1
 80047c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047cc:	d301      	bcc.n	80047d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047ce:	2301      	movs	r3, #1
 80047d0:	e00f      	b.n	80047f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047d2:	4a0a      	ldr	r2, [pc, #40]	; (80047fc <SysTick_Config+0x40>)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3b01      	subs	r3, #1
 80047d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047da:	210f      	movs	r1, #15
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295
 80047e0:	f7ff ff8e 	bl	8004700 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047e4:	4b05      	ldr	r3, [pc, #20]	; (80047fc <SysTick_Config+0x40>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047ea:	4b04      	ldr	r3, [pc, #16]	; (80047fc <SysTick_Config+0x40>)
 80047ec:	2207      	movs	r2, #7
 80047ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	e000e010 	.word	0xe000e010

08004800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b082      	sub	sp, #8
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff ff29 	bl	8004660 <__NVIC_SetPriorityGrouping>
}
 800480e:	bf00      	nop
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004816:	b580      	push	{r7, lr}
 8004818:	b086      	sub	sp, #24
 800481a:	af00      	add	r7, sp, #0
 800481c:	4603      	mov	r3, r0
 800481e:	60b9      	str	r1, [r7, #8]
 8004820:	607a      	str	r2, [r7, #4]
 8004822:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004828:	f7ff ff3e 	bl	80046a8 <__NVIC_GetPriorityGrouping>
 800482c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800482e:	687a      	ldr	r2, [r7, #4]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	6978      	ldr	r0, [r7, #20]
 8004834:	f7ff ff8e 	bl	8004754 <NVIC_EncodePriority>
 8004838:	4602      	mov	r2, r0
 800483a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f7ff ff5d 	bl	8004700 <__NVIC_SetPriority>
}
 8004846:	bf00      	nop
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}

0800484e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800484e:	b580      	push	{r7, lr}
 8004850:	b082      	sub	sp, #8
 8004852:	af00      	add	r7, sp, #0
 8004854:	4603      	mov	r3, r0
 8004856:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004858:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ff31 	bl	80046c4 <__NVIC_EnableIRQ>
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}

0800486a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800486a:	b580      	push	{r7, lr}
 800486c:	b082      	sub	sp, #8
 800486e:	af00      	add	r7, sp, #0
 8004870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f7ff ffa2 	bl	80047bc <SysTick_Config>
 8004878:	4603      	mov	r3, r0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800488c:	2300      	movs	r3, #0
 800488e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004890:	f7ff feb6 	bl	8004600 <HAL_GetTick>
 8004894:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d101      	bne.n	80048a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e099      	b.n	80049d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681a      	ldr	r2, [r3, #0]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f022 0201 	bic.w	r2, r2, #1
 80048be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048c0:	e00f      	b.n	80048e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048c2:	f7ff fe9d 	bl	8004600 <HAL_GetTick>
 80048c6:	4602      	mov	r2, r0
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	1ad3      	subs	r3, r2, r3
 80048cc:	2b05      	cmp	r3, #5
 80048ce:	d908      	bls.n	80048e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2203      	movs	r2, #3
 80048da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e078      	b.n	80049d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e8      	bne.n	80048c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4b38      	ldr	r3, [pc, #224]	; (80049dc <HAL_DMA_Init+0x158>)
 80048fc:	4013      	ands	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685a      	ldr	r2, [r3, #4]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800490e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800491a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004926:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a1b      	ldr	r3, [r3, #32]
 800492c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	4313      	orrs	r3, r2
 8004932:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	2b04      	cmp	r3, #4
 800493a:	d107      	bne.n	800494c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004944:	4313      	orrs	r3, r2
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f023 0307 	bic.w	r3, r3, #7
 8004962:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004972:	2b04      	cmp	r3, #4
 8004974:	d117      	bne.n	80049a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00e      	beq.n	80049a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fb01 	bl	8004f90 <DMA_CheckFifoParam>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2240      	movs	r2, #64	; 0x40
 8004998:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80049a2:	2301      	movs	r3, #1
 80049a4:	e016      	b.n	80049d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fab8 	bl	8004f24 <DMA_CalcBaseAndBitshift>
 80049b4:	4603      	mov	r3, r0
 80049b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049bc:	223f      	movs	r2, #63	; 0x3f
 80049be:	409a      	lsls	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	f010803f 	.word	0xf010803f

080049e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
 80049ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <HAL_DMA_Start_IT+0x26>
 8004a02:	2302      	movs	r3, #2
 8004a04:	e040      	b.n	8004a88 <HAL_DMA_Start_IT+0xa8>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d12f      	bne.n	8004a7a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2202      	movs	r2, #2
 8004a1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68b9      	ldr	r1, [r7, #8]
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fa4a 	bl	8004ec8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a38:	223f      	movs	r2, #63	; 0x3f
 8004a3a:	409a      	lsls	r2, r3
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f042 0216 	orr.w	r2, r2, #22
 8004a4e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0208 	orr.w	r2, r2, #8
 8004a66:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f042 0201 	orr.w	r2, r2, #1
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	e005      	b.n	8004a86 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004a82:	2302      	movs	r3, #2
 8004a84:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004a9e:	f7ff fdaf 	bl	8004600 <HAL_GetTick>
 8004aa2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d008      	beq.n	8004ac2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2280      	movs	r2, #128	; 0x80
 8004ab4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e052      	b.n	8004b68 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0216 	bic.w	r2, r2, #22
 8004ad0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	695a      	ldr	r2, [r3, #20]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004ae0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d103      	bne.n	8004af2 <HAL_DMA_Abort+0x62>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d007      	beq.n	8004b02 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f022 0208 	bic.w	r2, r2, #8
 8004b00:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b12:	e013      	b.n	8004b3c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b14:	f7ff fd74 	bl	8004600 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	d90c      	bls.n	8004b3c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2220      	movs	r2, #32
 8004b26:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e015      	b.n	8004b68 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1e4      	bne.n	8004b14 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b4e:	223f      	movs	r2, #63	; 0x3f
 8004b50:	409a      	lsls	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d004      	beq.n	8004b8e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2280      	movs	r2, #128	; 0x80
 8004b88:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e00c      	b.n	8004ba8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2205      	movs	r2, #5
 8004b92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0201 	bic.w	r2, r2, #1
 8004ba4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	370c      	adds	r7, #12
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b086      	sub	sp, #24
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004bc0:	4b8e      	ldr	r3, [pc, #568]	; (8004dfc <HAL_DMA_IRQHandler+0x248>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a8e      	ldr	r2, [pc, #568]	; (8004e00 <HAL_DMA_IRQHandler+0x24c>)
 8004bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bca:	0a9b      	lsrs	r3, r3, #10
 8004bcc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bde:	2208      	movs	r2, #8
 8004be0:	409a      	lsls	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01a      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0304 	and.w	r3, r3, #4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d013      	beq.n	8004c20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0204 	bic.w	r2, r2, #4
 8004c06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c0c:	2208      	movs	r2, #8
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c18:	f043 0201 	orr.w	r2, r3, #1
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c24:	2201      	movs	r2, #1
 8004c26:	409a      	lsls	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d012      	beq.n	8004c56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	695b      	ldr	r3, [r3, #20]
 8004c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00b      	beq.n	8004c56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c42:	2201      	movs	r2, #1
 8004c44:	409a      	lsls	r2, r3
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4e:	f043 0202 	orr.w	r2, r3, #2
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	409a      	lsls	r2, r3
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4013      	ands	r3, r2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d012      	beq.n	8004c8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00b      	beq.n	8004c8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c78:	2204      	movs	r2, #4
 8004c7a:	409a      	lsls	r2, r3
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c84:	f043 0204 	orr.w	r2, r3, #4
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c90:	2210      	movs	r2, #16
 8004c92:	409a      	lsls	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4013      	ands	r3, r2
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d043      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0308 	and.w	r3, r3, #8
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d03c      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	2210      	movs	r2, #16
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d018      	beq.n	8004cf6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d108      	bne.n	8004ce4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d024      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	4798      	blx	r3
 8004ce2:	e01f      	b.n	8004d24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01b      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	4798      	blx	r3
 8004cf4:	e016      	b.n	8004d24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d107      	bne.n	8004d14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0208 	bic.w	r2, r2, #8
 8004d12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d28:	2220      	movs	r2, #32
 8004d2a:	409a      	lsls	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 808f 	beq.w	8004e54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0310 	and.w	r3, r3, #16
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f000 8087 	beq.w	8004e54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4a:	2220      	movs	r2, #32
 8004d4c:	409a      	lsls	r2, r3
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b05      	cmp	r3, #5
 8004d5c:	d136      	bne.n	8004dcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f022 0216 	bic.w	r2, r2, #22
 8004d6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	695a      	ldr	r2, [r3, #20]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d103      	bne.n	8004d8e <HAL_DMA_IRQHandler+0x1da>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d007      	beq.n	8004d9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	681a      	ldr	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f022 0208 	bic.w	r2, r2, #8
 8004d9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da2:	223f      	movs	r2, #63	; 0x3f
 8004da4:	409a      	lsls	r2, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d07e      	beq.n	8004ec0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	4798      	blx	r3
        }
        return;
 8004dca:	e079      	b.n	8004ec0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01d      	beq.n	8004e16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10d      	bne.n	8004e04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d031      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	4798      	blx	r3
 8004df8:	e02c      	b.n	8004e54 <HAL_DMA_IRQHandler+0x2a0>
 8004dfa:	bf00      	nop
 8004dfc:	20000010 	.word	0x20000010
 8004e00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d023      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	4798      	blx	r3
 8004e14:	e01e      	b.n	8004e54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10f      	bne.n	8004e44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0210 	bic.w	r2, r2, #16
 8004e32:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d003      	beq.n	8004e54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d032      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d022      	beq.n	8004eae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2205      	movs	r2, #5
 8004e6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	3301      	adds	r3, #1
 8004e84:	60bb      	str	r3, [r7, #8]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d307      	bcc.n	8004e9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0301 	and.w	r3, r3, #1
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1f2      	bne.n	8004e80 <HAL_DMA_IRQHandler+0x2cc>
 8004e9a:	e000      	b.n	8004e9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004e9c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d005      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
 8004ebe:	e000      	b.n	8004ec2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004ec0:	bf00      	nop
    }
  }
}
 8004ec2:	3718      	adds	r7, #24
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
 8004ed4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ee4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	2b40      	cmp	r3, #64	; 0x40
 8004ef4:	d108      	bne.n	8004f08 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	68ba      	ldr	r2, [r7, #8]
 8004f04:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004f06:	e007      	b.n	8004f18 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	60da      	str	r2, [r3, #12]
}
 8004f18:	bf00      	nop
 8004f1a:	3714      	adds	r7, #20
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	3b10      	subs	r3, #16
 8004f34:	4a14      	ldr	r2, [pc, #80]	; (8004f88 <DMA_CalcBaseAndBitshift+0x64>)
 8004f36:	fba2 2303 	umull	r2, r3, r2, r3
 8004f3a:	091b      	lsrs	r3, r3, #4
 8004f3c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004f3e:	4a13      	ldr	r2, [pc, #76]	; (8004f8c <DMA_CalcBaseAndBitshift+0x68>)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4413      	add	r3, r2
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d909      	bls.n	8004f66 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	1d1a      	adds	r2, r3, #4
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	659a      	str	r2, [r3, #88]	; 0x58
 8004f64:	e007      	b.n	8004f76 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004f6e:	f023 0303 	bic.w	r3, r3, #3
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr
 8004f86:	bf00      	nop
 8004f88:	aaaaaaab 	.word	0xaaaaaaab
 8004f8c:	08011814 	.word	0x08011814

08004f90 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	699b      	ldr	r3, [r3, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d11f      	bne.n	8004fea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b03      	cmp	r3, #3
 8004fae:	d856      	bhi.n	800505e <DMA_CheckFifoParam+0xce>
 8004fb0:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <DMA_CheckFifoParam+0x28>)
 8004fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb6:	bf00      	nop
 8004fb8:	08004fc9 	.word	0x08004fc9
 8004fbc:	08004fdb 	.word	0x08004fdb
 8004fc0:	08004fc9 	.word	0x08004fc9
 8004fc4:	0800505f 	.word	0x0800505f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d046      	beq.n	8005062 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fd8:	e043      	b.n	8005062 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fde:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fe2:	d140      	bne.n	8005066 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fe8:	e03d      	b.n	8005066 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff2:	d121      	bne.n	8005038 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b03      	cmp	r3, #3
 8004ff8:	d837      	bhi.n	800506a <DMA_CheckFifoParam+0xda>
 8004ffa:	a201      	add	r2, pc, #4	; (adr r2, 8005000 <DMA_CheckFifoParam+0x70>)
 8004ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005000:	08005011 	.word	0x08005011
 8005004:	08005017 	.word	0x08005017
 8005008:	08005011 	.word	0x08005011
 800500c:	08005029 	.word	0x08005029
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	73fb      	strb	r3, [r7, #15]
      break;
 8005014:	e030      	b.n	8005078 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d025      	beq.n	800506e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005026:	e022      	b.n	800506e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005030:	d11f      	bne.n	8005072 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005036:	e01c      	b.n	8005072 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	2b02      	cmp	r3, #2
 800503c:	d903      	bls.n	8005046 <DMA_CheckFifoParam+0xb6>
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b03      	cmp	r3, #3
 8005042:	d003      	beq.n	800504c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005044:	e018      	b.n	8005078 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	73fb      	strb	r3, [r7, #15]
      break;
 800504a:	e015      	b.n	8005078 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005050:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d00e      	beq.n	8005076 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	73fb      	strb	r3, [r7, #15]
      break;
 800505c:	e00b      	b.n	8005076 <DMA_CheckFifoParam+0xe6>
      break;
 800505e:	bf00      	nop
 8005060:	e00a      	b.n	8005078 <DMA_CheckFifoParam+0xe8>
      break;
 8005062:	bf00      	nop
 8005064:	e008      	b.n	8005078 <DMA_CheckFifoParam+0xe8>
      break;
 8005066:	bf00      	nop
 8005068:	e006      	b.n	8005078 <DMA_CheckFifoParam+0xe8>
      break;
 800506a:	bf00      	nop
 800506c:	e004      	b.n	8005078 <DMA_CheckFifoParam+0xe8>
      break;
 800506e:	bf00      	nop
 8005070:	e002      	b.n	8005078 <DMA_CheckFifoParam+0xe8>
      break;   
 8005072:	bf00      	nop
 8005074:	e000      	b.n	8005078 <DMA_CheckFifoParam+0xe8>
      break;
 8005076:	bf00      	nop
    }
  } 
  
  return status; 
 8005078:	7bfb      	ldrb	r3, [r7, #15]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3714      	adds	r7, #20
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop

08005088 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b086      	sub	sp, #24
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800509a:	4b23      	ldr	r3, [pc, #140]	; (8005128 <HAL_FLASH_Program+0xa0>)
 800509c:	7e1b      	ldrb	r3, [r3, #24]
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d101      	bne.n	80050a6 <HAL_FLASH_Program+0x1e>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e03b      	b.n	800511e <HAL_FLASH_Program+0x96>
 80050a6:	4b20      	ldr	r3, [pc, #128]	; (8005128 <HAL_FLASH_Program+0xa0>)
 80050a8:	2201      	movs	r2, #1
 80050aa:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80050ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80050b0:	f000 f870 	bl	8005194 <FLASH_WaitForLastOperation>
 80050b4:	4603      	mov	r3, r0
 80050b6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80050b8:	7dfb      	ldrb	r3, [r7, #23]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d12b      	bne.n	8005116 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d105      	bne.n	80050d0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80050c4:	783b      	ldrb	r3, [r7, #0]
 80050c6:	4619      	mov	r1, r3
 80050c8:	68b8      	ldr	r0, [r7, #8]
 80050ca:	f000 f91b 	bl	8005304 <FLASH_Program_Byte>
 80050ce:	e016      	b.n	80050fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d105      	bne.n	80050e2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80050d6:	883b      	ldrh	r3, [r7, #0]
 80050d8:	4619      	mov	r1, r3
 80050da:	68b8      	ldr	r0, [r7, #8]
 80050dc:	f000 f8ee 	bl	80052bc <FLASH_Program_HalfWord>
 80050e0:	e00d      	b.n	80050fe <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d105      	bne.n	80050f4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	4619      	mov	r1, r3
 80050ec:	68b8      	ldr	r0, [r7, #8]
 80050ee:	f000 f8c3 	bl	8005278 <FLASH_Program_Word>
 80050f2:	e004      	b.n	80050fe <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80050f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050f8:	68b8      	ldr	r0, [r7, #8]
 80050fa:	f000 f88b 	bl	8005214 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80050fe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005102:	f000 f847 	bl	8005194 <FLASH_WaitForLastOperation>
 8005106:	4603      	mov	r3, r0
 8005108:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800510a:	4b08      	ldr	r3, [pc, #32]	; (800512c <HAL_FLASH_Program+0xa4>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	4a07      	ldr	r2, [pc, #28]	; (800512c <HAL_FLASH_Program+0xa4>)
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005116:	4b04      	ldr	r3, [pc, #16]	; (8005128 <HAL_FLASH_Program+0xa0>)
 8005118:	2200      	movs	r2, #0
 800511a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800511c:	7dfb      	ldrb	r3, [r7, #23]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3718      	adds	r7, #24
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200058a8 	.word	0x200058a8
 800512c:	40023c00 	.word	0x40023c00

08005130 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005130:	b480      	push	{r7}
 8005132:	b083      	sub	sp, #12
 8005134:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800513a:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <HAL_FLASH_Unlock+0x38>)
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b00      	cmp	r3, #0
 8005140:	da0b      	bge.n	800515a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_FLASH_Unlock+0x38>)
 8005144:	4a09      	ldr	r2, [pc, #36]	; (800516c <HAL_FLASH_Unlock+0x3c>)
 8005146:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005148:	4b07      	ldr	r3, [pc, #28]	; (8005168 <HAL_FLASH_Unlock+0x38>)
 800514a:	4a09      	ldr	r2, [pc, #36]	; (8005170 <HAL_FLASH_Unlock+0x40>)
 800514c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800514e:	4b06      	ldr	r3, [pc, #24]	; (8005168 <HAL_FLASH_Unlock+0x38>)
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	2b00      	cmp	r3, #0
 8005154:	da01      	bge.n	800515a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800515a:	79fb      	ldrb	r3, [r7, #7]
}
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	40023c00 	.word	0x40023c00
 800516c:	45670123 	.word	0x45670123
 8005170:	cdef89ab 	.word	0xcdef89ab

08005174 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005174:	b480      	push	{r7}
 8005176:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_FLASH_Lock+0x1c>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	4a04      	ldr	r2, [pc, #16]	; (8005190 <HAL_FLASH_Lock+0x1c>)
 800517e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005182:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr
 8005190:	40023c00 	.word	0x40023c00

08005194 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005194:	b580      	push	{r7, lr}
 8005196:	b084      	sub	sp, #16
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800519c:	2300      	movs	r3, #0
 800519e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80051a0:	4b1a      	ldr	r3, [pc, #104]	; (800520c <FLASH_WaitForLastOperation+0x78>)
 80051a2:	2200      	movs	r2, #0
 80051a4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80051a6:	f7ff fa2b 	bl	8004600 <HAL_GetTick>
 80051aa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80051ac:	e010      	b.n	80051d0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d00c      	beq.n	80051d0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <FLASH_WaitForLastOperation+0x38>
 80051bc:	f7ff fa20 	bl	8004600 <HAL_GetTick>
 80051c0:	4602      	mov	r2, r0
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	1ad3      	subs	r3, r2, r3
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d201      	bcs.n	80051d0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e019      	b.n	8005204 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80051d0:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <FLASH_WaitForLastOperation+0x7c>)
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e8      	bne.n	80051ae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80051dc:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <FLASH_WaitForLastOperation+0x7c>)
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <FLASH_WaitForLastOperation+0x7c>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80051ee:	4b08      	ldr	r3, [pc, #32]	; (8005210 <FLASH_WaitForLastOperation+0x7c>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80051fa:	f000 f8a5 	bl	8005348 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e000      	b.n	8005204 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
  
}  
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	200058a8 	.word	0x200058a8
 8005210:	40023c00 	.word	0x40023c00

08005214 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005220:	4b14      	ldr	r3, [pc, #80]	; (8005274 <FLASH_Program_DoubleWord+0x60>)
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	4a13      	ldr	r2, [pc, #76]	; (8005274 <FLASH_Program_DoubleWord+0x60>)
 8005226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800522a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <FLASH_Program_DoubleWord+0x60>)
 800522e:	691b      	ldr	r3, [r3, #16]
 8005230:	4a10      	ldr	r2, [pc, #64]	; (8005274 <FLASH_Program_DoubleWord+0x60>)
 8005232:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005236:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005238:	4b0e      	ldr	r3, [pc, #56]	; (8005274 <FLASH_Program_DoubleWord+0x60>)
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	4a0d      	ldr	r2, [pc, #52]	; (8005274 <FLASH_Program_DoubleWord+0x60>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800524a:	f3bf 8f6f 	isb	sy
}
 800524e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005250:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	f04f 0300 	mov.w	r3, #0
 800525c:	000a      	movs	r2, r1
 800525e:	2300      	movs	r3, #0
 8005260:	68f9      	ldr	r1, [r7, #12]
 8005262:	3104      	adds	r1, #4
 8005264:	4613      	mov	r3, r2
 8005266:	600b      	str	r3, [r1, #0]
}
 8005268:	bf00      	nop
 800526a:	3714      	adds	r7, #20
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	40023c00 	.word	0x40023c00

08005278 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005282:	4b0d      	ldr	r3, [pc, #52]	; (80052b8 <FLASH_Program_Word+0x40>)
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <FLASH_Program_Word+0x40>)
 8005288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800528c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800528e:	4b0a      	ldr	r3, [pc, #40]	; (80052b8 <FLASH_Program_Word+0x40>)
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <FLASH_Program_Word+0x40>)
 8005294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005298:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800529a:	4b07      	ldr	r3, [pc, #28]	; (80052b8 <FLASH_Program_Word+0x40>)
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	4a06      	ldr	r2, [pc, #24]	; (80052b8 <FLASH_Program_Word+0x40>)
 80052a0:	f043 0301 	orr.w	r3, r3, #1
 80052a4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	601a      	str	r2, [r3, #0]
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	40023c00 	.word	0x40023c00

080052bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80052c8:	4b0d      	ldr	r3, [pc, #52]	; (8005300 <FLASH_Program_HalfWord+0x44>)
 80052ca:	691b      	ldr	r3, [r3, #16]
 80052cc:	4a0c      	ldr	r2, [pc, #48]	; (8005300 <FLASH_Program_HalfWord+0x44>)
 80052ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80052d4:	4b0a      	ldr	r3, [pc, #40]	; (8005300 <FLASH_Program_HalfWord+0x44>)
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	4a09      	ldr	r2, [pc, #36]	; (8005300 <FLASH_Program_HalfWord+0x44>)
 80052da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80052e0:	4b07      	ldr	r3, [pc, #28]	; (8005300 <FLASH_Program_HalfWord+0x44>)
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	4a06      	ldr	r2, [pc, #24]	; (8005300 <FLASH_Program_HalfWord+0x44>)
 80052e6:	f043 0301 	orr.w	r3, r3, #1
 80052ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	887a      	ldrh	r2, [r7, #2]
 80052f0:	801a      	strh	r2, [r3, #0]
}
 80052f2:	bf00      	nop
 80052f4:	370c      	adds	r7, #12
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40023c00 	.word	0x40023c00

08005304 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <FLASH_Program_Byte+0x40>)
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	4a0b      	ldr	r2, [pc, #44]	; (8005344 <FLASH_Program_Byte+0x40>)
 8005316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800531a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <FLASH_Program_Byte+0x40>)
 800531e:	4a09      	ldr	r2, [pc, #36]	; (8005344 <FLASH_Program_Byte+0x40>)
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005324:	4b07      	ldr	r3, [pc, #28]	; (8005344 <FLASH_Program_Byte+0x40>)
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	4a06      	ldr	r2, [pc, #24]	; (8005344 <FLASH_Program_Byte+0x40>)
 800532a:	f043 0301 	orr.w	r3, r3, #1
 800532e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	78fa      	ldrb	r2, [r7, #3]
 8005334:	701a      	strb	r2, [r3, #0]
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	40023c00 	.word	0x40023c00

08005348 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800534c:	4b27      	ldr	r3, [pc, #156]	; (80053ec <FLASH_SetErrorCode+0xa4>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f003 0310 	and.w	r3, r3, #16
 8005354:	2b00      	cmp	r3, #0
 8005356:	d008      	beq.n	800536a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005358:	4b25      	ldr	r3, [pc, #148]	; (80053f0 <FLASH_SetErrorCode+0xa8>)
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	f043 0310 	orr.w	r3, r3, #16
 8005360:	4a23      	ldr	r2, [pc, #140]	; (80053f0 <FLASH_SetErrorCode+0xa8>)
 8005362:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8005364:	4b21      	ldr	r3, [pc, #132]	; (80053ec <FLASH_SetErrorCode+0xa4>)
 8005366:	2210      	movs	r2, #16
 8005368:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800536a:	4b20      	ldr	r3, [pc, #128]	; (80053ec <FLASH_SetErrorCode+0xa4>)
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d008      	beq.n	8005388 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005376:	4b1e      	ldr	r3, [pc, #120]	; (80053f0 <FLASH_SetErrorCode+0xa8>)
 8005378:	69db      	ldr	r3, [r3, #28]
 800537a:	f043 0308 	orr.w	r3, r3, #8
 800537e:	4a1c      	ldr	r2, [pc, #112]	; (80053f0 <FLASH_SetErrorCode+0xa8>)
 8005380:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8005382:	4b1a      	ldr	r3, [pc, #104]	; (80053ec <FLASH_SetErrorCode+0xa4>)
 8005384:	2220      	movs	r2, #32
 8005386:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005388:	4b18      	ldr	r3, [pc, #96]	; (80053ec <FLASH_SetErrorCode+0xa4>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005394:	4b16      	ldr	r3, [pc, #88]	; (80053f0 <FLASH_SetErrorCode+0xa8>)
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	f043 0304 	orr.w	r3, r3, #4
 800539c:	4a14      	ldr	r2, [pc, #80]	; (80053f0 <FLASH_SetErrorCode+0xa8>)
 800539e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80053a0:	4b12      	ldr	r3, [pc, #72]	; (80053ec <FLASH_SetErrorCode+0xa4>)
 80053a2:	2240      	movs	r2, #64	; 0x40
 80053a4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80053a6:	4b11      	ldr	r3, [pc, #68]	; (80053ec <FLASH_SetErrorCode+0xa4>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d008      	beq.n	80053c4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80053b2:	4b0f      	ldr	r3, [pc, #60]	; (80053f0 <FLASH_SetErrorCode+0xa8>)
 80053b4:	69db      	ldr	r3, [r3, #28]
 80053b6:	f043 0302 	orr.w	r3, r3, #2
 80053ba:	4a0d      	ldr	r2, [pc, #52]	; (80053f0 <FLASH_SetErrorCode+0xa8>)
 80053bc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <FLASH_SetErrorCode+0xa4>)
 80053c0:	2280      	movs	r2, #128	; 0x80
 80053c2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80053c4:	4b09      	ldr	r3, [pc, #36]	; (80053ec <FLASH_SetErrorCode+0xa4>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80053d0:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <FLASH_SetErrorCode+0xa8>)
 80053d2:	69db      	ldr	r3, [r3, #28]
 80053d4:	f043 0320 	orr.w	r3, r3, #32
 80053d8:	4a05      	ldr	r2, [pc, #20]	; (80053f0 <FLASH_SetErrorCode+0xa8>)
 80053da:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80053dc:	4b03      	ldr	r3, [pc, #12]	; (80053ec <FLASH_SetErrorCode+0xa4>)
 80053de:	2202      	movs	r2, #2
 80053e0:	60da      	str	r2, [r3, #12]
  }
}
 80053e2:	bf00      	nop
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	40023c00 	.word	0x40023c00
 80053f0:	200058a8 	.word	0x200058a8

080053f4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8005404:	78fb      	ldrb	r3, [r7, #3]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
 800540e:	e010      	b.n	8005432 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8005410:	78fb      	ldrb	r3, [r7, #3]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d103      	bne.n	800541e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8005416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e009      	b.n	8005432 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800541e:	78fb      	ldrb	r3, [r7, #3]
 8005420:	2b02      	cmp	r3, #2
 8005422:	d103      	bne.n	800542c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8005424:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	e002      	b.n	8005432 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800542c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005430:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8005432:	4b13      	ldr	r3, [pc, #76]	; (8005480 <FLASH_Erase_Sector+0x8c>)
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	4a12      	ldr	r2, [pc, #72]	; (8005480 <FLASH_Erase_Sector+0x8c>)
 8005438:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800543c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800543e:	4b10      	ldr	r3, [pc, #64]	; (8005480 <FLASH_Erase_Sector+0x8c>)
 8005440:	691a      	ldr	r2, [r3, #16]
 8005442:	490f      	ldr	r1, [pc, #60]	; (8005480 <FLASH_Erase_Sector+0x8c>)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	4313      	orrs	r3, r2
 8005448:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800544a:	4b0d      	ldr	r3, [pc, #52]	; (8005480 <FLASH_Erase_Sector+0x8c>)
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <FLASH_Erase_Sector+0x8c>)
 8005450:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005454:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <FLASH_Erase_Sector+0x8c>)
 8005458:	691a      	ldr	r2, [r3, #16]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	4313      	orrs	r3, r2
 8005460:	4a07      	ldr	r2, [pc, #28]	; (8005480 <FLASH_Erase_Sector+0x8c>)
 8005462:	f043 0302 	orr.w	r3, r3, #2
 8005466:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8005468:	4b05      	ldr	r3, [pc, #20]	; (8005480 <FLASH_Erase_Sector+0x8c>)
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	4a04      	ldr	r2, [pc, #16]	; (8005480 <FLASH_Erase_Sector+0x8c>)
 800546e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005472:	6113      	str	r3, [r2, #16]
}
 8005474:	bf00      	nop
 8005476:	3714      	adds	r7, #20
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr
 8005480:	40023c00 	.word	0x40023c00

08005484 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005484:	b480      	push	{r7}
 8005486:	b089      	sub	sp, #36	; 0x24
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005492:	2300      	movs	r3, #0
 8005494:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005496:	2300      	movs	r3, #0
 8005498:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800549a:	2300      	movs	r3, #0
 800549c:	61fb      	str	r3, [r7, #28]
 800549e:	e16b      	b.n	8005778 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80054a0:	2201      	movs	r2, #1
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	697a      	ldr	r2, [r7, #20]
 80054b0:	4013      	ands	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80054b4:	693a      	ldr	r2, [r7, #16]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	f040 815a 	bne.w	8005772 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d005      	beq.n	80054d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d130      	bne.n	8005538 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	2203      	movs	r2, #3
 80054e2:	fa02 f303 	lsl.w	r3, r2, r3
 80054e6:	43db      	mvns	r3, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4013      	ands	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	69ba      	ldr	r2, [r7, #24]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800550c:	2201      	movs	r2, #1
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	fa02 f303 	lsl.w	r3, r2, r3
 8005514:	43db      	mvns	r3, r3
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	4013      	ands	r3, r2
 800551a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	f003 0201 	and.w	r2, r3, #1
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	fa02 f303 	lsl.w	r3, r2, r3
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	4313      	orrs	r3, r2
 8005530:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f003 0303 	and.w	r3, r3, #3
 8005540:	2b03      	cmp	r3, #3
 8005542:	d017      	beq.n	8005574 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	005b      	lsls	r3, r3, #1
 800554e:	2203      	movs	r2, #3
 8005550:	fa02 f303 	lsl.w	r3, r2, r3
 8005554:	43db      	mvns	r3, r3
 8005556:	69ba      	ldr	r2, [r7, #24]
 8005558:	4013      	ands	r3, r2
 800555a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	fa02 f303 	lsl.w	r3, r2, r3
 8005568:	69ba      	ldr	r2, [r7, #24]
 800556a:	4313      	orrs	r3, r2
 800556c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	f003 0303 	and.w	r3, r3, #3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d123      	bne.n	80055c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005580:	69fb      	ldr	r3, [r7, #28]
 8005582:	08da      	lsrs	r2, r3, #3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	3208      	adds	r2, #8
 8005588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	f003 0307 	and.w	r3, r3, #7
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	220f      	movs	r2, #15
 8005598:	fa02 f303 	lsl.w	r3, r2, r3
 800559c:	43db      	mvns	r3, r3
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4013      	ands	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	691a      	ldr	r2, [r3, #16]
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	fa02 f303 	lsl.w	r3, r2, r3
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	08da      	lsrs	r2, r3, #3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	3208      	adds	r2, #8
 80055c2:	69b9      	ldr	r1, [r7, #24]
 80055c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	005b      	lsls	r3, r3, #1
 80055d2:	2203      	movs	r2, #3
 80055d4:	fa02 f303 	lsl.w	r3, r2, r3
 80055d8:	43db      	mvns	r3, r3
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	4013      	ands	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f003 0203 	and.w	r2, r3, #3
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	005b      	lsls	r3, r3, #1
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	69ba      	ldr	r2, [r7, #24]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80b4 	beq.w	8005772 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	60fb      	str	r3, [r7, #12]
 800560e:	4b60      	ldr	r3, [pc, #384]	; (8005790 <HAL_GPIO_Init+0x30c>)
 8005610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005612:	4a5f      	ldr	r2, [pc, #380]	; (8005790 <HAL_GPIO_Init+0x30c>)
 8005614:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005618:	6453      	str	r3, [r2, #68]	; 0x44
 800561a:	4b5d      	ldr	r3, [pc, #372]	; (8005790 <HAL_GPIO_Init+0x30c>)
 800561c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005622:	60fb      	str	r3, [r7, #12]
 8005624:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005626:	4a5b      	ldr	r2, [pc, #364]	; (8005794 <HAL_GPIO_Init+0x310>)
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	089b      	lsrs	r3, r3, #2
 800562c:	3302      	adds	r3, #2
 800562e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	220f      	movs	r2, #15
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4013      	ands	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a52      	ldr	r2, [pc, #328]	; (8005798 <HAL_GPIO_Init+0x314>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d02b      	beq.n	80056aa <HAL_GPIO_Init+0x226>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a51      	ldr	r2, [pc, #324]	; (800579c <HAL_GPIO_Init+0x318>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d025      	beq.n	80056a6 <HAL_GPIO_Init+0x222>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a50      	ldr	r2, [pc, #320]	; (80057a0 <HAL_GPIO_Init+0x31c>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d01f      	beq.n	80056a2 <HAL_GPIO_Init+0x21e>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a4f      	ldr	r2, [pc, #316]	; (80057a4 <HAL_GPIO_Init+0x320>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d019      	beq.n	800569e <HAL_GPIO_Init+0x21a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a4e      	ldr	r2, [pc, #312]	; (80057a8 <HAL_GPIO_Init+0x324>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d013      	beq.n	800569a <HAL_GPIO_Init+0x216>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a4d      	ldr	r2, [pc, #308]	; (80057ac <HAL_GPIO_Init+0x328>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d00d      	beq.n	8005696 <HAL_GPIO_Init+0x212>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a4c      	ldr	r2, [pc, #304]	; (80057b0 <HAL_GPIO_Init+0x32c>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d007      	beq.n	8005692 <HAL_GPIO_Init+0x20e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a4b      	ldr	r2, [pc, #300]	; (80057b4 <HAL_GPIO_Init+0x330>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d101      	bne.n	800568e <HAL_GPIO_Init+0x20a>
 800568a:	2307      	movs	r3, #7
 800568c:	e00e      	b.n	80056ac <HAL_GPIO_Init+0x228>
 800568e:	2308      	movs	r3, #8
 8005690:	e00c      	b.n	80056ac <HAL_GPIO_Init+0x228>
 8005692:	2306      	movs	r3, #6
 8005694:	e00a      	b.n	80056ac <HAL_GPIO_Init+0x228>
 8005696:	2305      	movs	r3, #5
 8005698:	e008      	b.n	80056ac <HAL_GPIO_Init+0x228>
 800569a:	2304      	movs	r3, #4
 800569c:	e006      	b.n	80056ac <HAL_GPIO_Init+0x228>
 800569e:	2303      	movs	r3, #3
 80056a0:	e004      	b.n	80056ac <HAL_GPIO_Init+0x228>
 80056a2:	2302      	movs	r3, #2
 80056a4:	e002      	b.n	80056ac <HAL_GPIO_Init+0x228>
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <HAL_GPIO_Init+0x228>
 80056aa:	2300      	movs	r3, #0
 80056ac:	69fa      	ldr	r2, [r7, #28]
 80056ae:	f002 0203 	and.w	r2, r2, #3
 80056b2:	0092      	lsls	r2, r2, #2
 80056b4:	4093      	lsls	r3, r2
 80056b6:	69ba      	ldr	r2, [r7, #24]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80056bc:	4935      	ldr	r1, [pc, #212]	; (8005794 <HAL_GPIO_Init+0x310>)
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	089b      	lsrs	r3, r3, #2
 80056c2:	3302      	adds	r3, #2
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80056ca:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <HAL_GPIO_Init+0x334>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	43db      	mvns	r3, r3
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	4013      	ands	r3, r2
 80056d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d003      	beq.n	80056ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056e6:	69ba      	ldr	r2, [r7, #24]
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056ee:	4a32      	ldr	r2, [pc, #200]	; (80057b8 <HAL_GPIO_Init+0x334>)
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056f4:	4b30      	ldr	r3, [pc, #192]	; (80057b8 <HAL_GPIO_Init+0x334>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	43db      	mvns	r3, r3
 80056fe:	69ba      	ldr	r2, [r7, #24]
 8005700:	4013      	ands	r3, r2
 8005702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d003      	beq.n	8005718 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4313      	orrs	r3, r2
 8005716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005718:	4a27      	ldr	r2, [pc, #156]	; (80057b8 <HAL_GPIO_Init+0x334>)
 800571a:	69bb      	ldr	r3, [r7, #24]
 800571c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800571e:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <HAL_GPIO_Init+0x334>)
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	43db      	mvns	r3, r3
 8005728:	69ba      	ldr	r2, [r7, #24]
 800572a:	4013      	ands	r3, r2
 800572c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800573a:	69ba      	ldr	r2, [r7, #24]
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	4313      	orrs	r3, r2
 8005740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005742:	4a1d      	ldr	r2, [pc, #116]	; (80057b8 <HAL_GPIO_Init+0x334>)
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005748:	4b1b      	ldr	r3, [pc, #108]	; (80057b8 <HAL_GPIO_Init+0x334>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	43db      	mvns	r3, r3
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	4013      	ands	r3, r2
 8005756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d003      	beq.n	800576c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005764:	69ba      	ldr	r2, [r7, #24]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800576c:	4a12      	ldr	r2, [pc, #72]	; (80057b8 <HAL_GPIO_Init+0x334>)
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	3301      	adds	r3, #1
 8005776:	61fb      	str	r3, [r7, #28]
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	2b0f      	cmp	r3, #15
 800577c:	f67f ae90 	bls.w	80054a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	3724      	adds	r7, #36	; 0x24
 8005786:	46bd      	mov	sp, r7
 8005788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	40023800 	.word	0x40023800
 8005794:	40013800 	.word	0x40013800
 8005798:	40020000 	.word	0x40020000
 800579c:	40020400 	.word	0x40020400
 80057a0:	40020800 	.word	0x40020800
 80057a4:	40020c00 	.word	0x40020c00
 80057a8:	40021000 	.word	0x40021000
 80057ac:	40021400 	.word	0x40021400
 80057b0:	40021800 	.word	0x40021800
 80057b4:	40021c00 	.word	0x40021c00
 80057b8:	40013c00 	.word	0x40013c00

080057bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80057bc:	b480      	push	{r7}
 80057be:	b085      	sub	sp, #20
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
 80057c4:	460b      	mov	r3, r1
 80057c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	887b      	ldrh	r3, [r7, #2]
 80057ce:	4013      	ands	r3, r2
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d002      	beq.n	80057da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80057d4:	2301      	movs	r3, #1
 80057d6:	73fb      	strb	r3, [r7, #15]
 80057d8:	e001      	b.n	80057de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80057da:	2300      	movs	r3, #0
 80057dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80057de:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	807b      	strh	r3, [r7, #2]
 80057f8:	4613      	mov	r3, r2
 80057fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80057fc:	787b      	ldrb	r3, [r7, #1]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005802:	887a      	ldrh	r2, [r7, #2]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005808:	e003      	b.n	8005812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800580a:	887b      	ldrh	r3, [r7, #2]
 800580c:	041a      	lsls	r2, r3, #16
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	619a      	str	r2, [r3, #24]
}
 8005812:	bf00      	nop
 8005814:	370c      	adds	r7, #12
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr

0800581e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800581e:	b480      	push	{r7}
 8005820:	b085      	sub	sp, #20
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	460b      	mov	r3, r1
 8005828:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005830:	887a      	ldrh	r2, [r7, #2]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	4013      	ands	r3, r2
 8005836:	041a      	lsls	r2, r3, #16
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	43d9      	mvns	r1, r3
 800583c:	887b      	ldrh	r3, [r7, #2]
 800583e:	400b      	ands	r3, r1
 8005840:	431a      	orrs	r2, r3
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	619a      	str	r2, [r3, #24]
}
 8005846:	bf00      	nop
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	e12b      	b.n	8005abe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d106      	bne.n	8005880 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f7fe f972 	bl	8003b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2224      	movs	r2, #36	; 0x24
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f022 0201 	bic.w	r2, r2, #1
 8005896:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80058b8:	f001 fffe 	bl	80078b8 <HAL_RCC_GetPCLK1Freq>
 80058bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4a81      	ldr	r2, [pc, #516]	; (8005ac8 <HAL_I2C_Init+0x274>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d807      	bhi.n	80058d8 <HAL_I2C_Init+0x84>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	4a80      	ldr	r2, [pc, #512]	; (8005acc <HAL_I2C_Init+0x278>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	bf94      	ite	ls
 80058d0:	2301      	movls	r3, #1
 80058d2:	2300      	movhi	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	e006      	b.n	80058e6 <HAL_I2C_Init+0x92>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	4a7d      	ldr	r2, [pc, #500]	; (8005ad0 <HAL_I2C_Init+0x27c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	bf94      	ite	ls
 80058e0:	2301      	movls	r3, #1
 80058e2:	2300      	movhi	r3, #0
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d001      	beq.n	80058ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e0e7      	b.n	8005abe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4a78      	ldr	r2, [pc, #480]	; (8005ad4 <HAL_I2C_Init+0x280>)
 80058f2:	fba2 2303 	umull	r2, r3, r2, r3
 80058f6:	0c9b      	lsrs	r3, r3, #18
 80058f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	4a6a      	ldr	r2, [pc, #424]	; (8005ac8 <HAL_I2C_Init+0x274>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d802      	bhi.n	8005928 <HAL_I2C_Init+0xd4>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	3301      	adds	r3, #1
 8005926:	e009      	b.n	800593c <HAL_I2C_Init+0xe8>
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800592e:	fb02 f303 	mul.w	r3, r2, r3
 8005932:	4a69      	ldr	r2, [pc, #420]	; (8005ad8 <HAL_I2C_Init+0x284>)
 8005934:	fba2 2303 	umull	r2, r3, r2, r3
 8005938:	099b      	lsrs	r3, r3, #6
 800593a:	3301      	adds	r3, #1
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6812      	ldr	r2, [r2, #0]
 8005940:	430b      	orrs	r3, r1
 8005942:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	69db      	ldr	r3, [r3, #28]
 800594a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800594e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	495c      	ldr	r1, [pc, #368]	; (8005ac8 <HAL_I2C_Init+0x274>)
 8005958:	428b      	cmp	r3, r1
 800595a:	d819      	bhi.n	8005990 <HAL_I2C_Init+0x13c>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	1e59      	subs	r1, r3, #1
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	fbb1 f3f3 	udiv	r3, r1, r3
 800596a:	1c59      	adds	r1, r3, #1
 800596c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005970:	400b      	ands	r3, r1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <HAL_I2C_Init+0x138>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	1e59      	subs	r1, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	fbb1 f3f3 	udiv	r3, r1, r3
 8005984:	3301      	adds	r3, #1
 8005986:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800598a:	e051      	b.n	8005a30 <HAL_I2C_Init+0x1dc>
 800598c:	2304      	movs	r3, #4
 800598e:	e04f      	b.n	8005a30 <HAL_I2C_Init+0x1dc>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d111      	bne.n	80059bc <HAL_I2C_Init+0x168>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	1e58      	subs	r0, r3, #1
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6859      	ldr	r1, [r3, #4]
 80059a0:	460b      	mov	r3, r1
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	440b      	add	r3, r1
 80059a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80059aa:	3301      	adds	r3, #1
 80059ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	bf0c      	ite	eq
 80059b4:	2301      	moveq	r3, #1
 80059b6:	2300      	movne	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	e012      	b.n	80059e2 <HAL_I2C_Init+0x18e>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	1e58      	subs	r0, r3, #1
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6859      	ldr	r1, [r3, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	440b      	add	r3, r1
 80059ca:	0099      	lsls	r1, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80059d2:	3301      	adds	r3, #1
 80059d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf0c      	ite	eq
 80059dc:	2301      	moveq	r3, #1
 80059de:	2300      	movne	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_I2C_Init+0x196>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e022      	b.n	8005a30 <HAL_I2C_Init+0x1dc>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10e      	bne.n	8005a10 <HAL_I2C_Init+0x1bc>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	1e58      	subs	r0, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6859      	ldr	r1, [r3, #4]
 80059fa:	460b      	mov	r3, r1
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	440b      	add	r3, r1
 8005a00:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a04:	3301      	adds	r3, #1
 8005a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a0e:	e00f      	b.n	8005a30 <HAL_I2C_Init+0x1dc>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	1e58      	subs	r0, r3, #1
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6859      	ldr	r1, [r3, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	440b      	add	r3, r1
 8005a1e:	0099      	lsls	r1, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005a26:	3301      	adds	r3, #1
 8005a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a2c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	6809      	ldr	r1, [r1, #0]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	69da      	ldr	r2, [r3, #28]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005a5e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6911      	ldr	r1, [r2, #16]
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	68d2      	ldr	r2, [r2, #12]
 8005a6a:	4311      	orrs	r1, r2
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	430b      	orrs	r3, r1
 8005a72:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	695a      	ldr	r2, [r3, #20]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	431a      	orrs	r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	430a      	orrs	r2, r1
 8005a8e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3710      	adds	r7, #16
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	000186a0 	.word	0x000186a0
 8005acc:	001e847f 	.word	0x001e847f
 8005ad0:	003d08ff 	.word	0x003d08ff
 8005ad4:	431bde83 	.word	0x431bde83
 8005ad8:	10624dd3 	.word	0x10624dd3

08005adc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005adc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ade:	b08f      	sub	sp, #60	; 0x3c
 8005ae0:	af0a      	add	r7, sp, #40	; 0x28
 8005ae2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005aea:	2301      	movs	r3, #1
 8005aec:	e10f      	b.n	8005d0e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d106      	bne.n	8005b0e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f008 fa17 	bl	800df3c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2203      	movs	r2, #3
 8005b12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f004 fcfa 	bl	800a526 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	687e      	ldr	r6, [r7, #4]
 8005b3a:	466d      	mov	r5, sp
 8005b3c:	f106 0410 	add.w	r4, r6, #16
 8005b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005b46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005b48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005b4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8005b50:	1d33      	adds	r3, r6, #4
 8005b52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005b54:	6838      	ldr	r0, [r7, #0]
 8005b56:	f004 fbd1 	bl	800a2fc <USB_CoreInit>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d005      	beq.n	8005b6c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0d0      	b.n	8005d0e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2100      	movs	r1, #0
 8005b72:	4618      	mov	r0, r3
 8005b74:	f004 fce8 	bl	800a548 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]
 8005b7c:	e04a      	b.n	8005c14 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005b7e:	7bfa      	ldrb	r2, [r7, #15]
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	00db      	lsls	r3, r3, #3
 8005b86:	4413      	add	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	333d      	adds	r3, #61	; 0x3d
 8005b8e:	2201      	movs	r2, #1
 8005b90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005b92:	7bfa      	ldrb	r2, [r7, #15]
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	4613      	mov	r3, r2
 8005b98:	00db      	lsls	r3, r3, #3
 8005b9a:	4413      	add	r3, r2
 8005b9c:	009b      	lsls	r3, r3, #2
 8005b9e:	440b      	add	r3, r1
 8005ba0:	333c      	adds	r3, #60	; 0x3c
 8005ba2:	7bfa      	ldrb	r2, [r7, #15]
 8005ba4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005ba6:	7bfa      	ldrb	r2, [r7, #15]
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
 8005baa:	b298      	uxth	r0, r3
 8005bac:	6879      	ldr	r1, [r7, #4]
 8005bae:	4613      	mov	r3, r2
 8005bb0:	00db      	lsls	r3, r3, #3
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009b      	lsls	r3, r3, #2
 8005bb6:	440b      	add	r3, r1
 8005bb8:	3344      	adds	r3, #68	; 0x44
 8005bba:	4602      	mov	r2, r0
 8005bbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005bbe:	7bfa      	ldrb	r2, [r7, #15]
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	3340      	adds	r3, #64	; 0x40
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005bd2:	7bfa      	ldrb	r2, [r7, #15]
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	00db      	lsls	r3, r3, #3
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	440b      	add	r3, r1
 8005be0:	3348      	adds	r3, #72	; 0x48
 8005be2:	2200      	movs	r2, #0
 8005be4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005be6:	7bfa      	ldrb	r2, [r7, #15]
 8005be8:	6879      	ldr	r1, [r7, #4]
 8005bea:	4613      	mov	r3, r2
 8005bec:	00db      	lsls	r3, r3, #3
 8005bee:	4413      	add	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	440b      	add	r3, r1
 8005bf4:	334c      	adds	r3, #76	; 0x4c
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005bfa:	7bfa      	ldrb	r2, [r7, #15]
 8005bfc:	6879      	ldr	r1, [r7, #4]
 8005bfe:	4613      	mov	r3, r2
 8005c00:	00db      	lsls	r3, r3, #3
 8005c02:	4413      	add	r3, r2
 8005c04:	009b      	lsls	r3, r3, #2
 8005c06:	440b      	add	r3, r1
 8005c08:	3354      	adds	r3, #84	; 0x54
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c0e:	7bfb      	ldrb	r3, [r7, #15]
 8005c10:	3301      	adds	r3, #1
 8005c12:	73fb      	strb	r3, [r7, #15]
 8005c14:	7bfa      	ldrb	r2, [r7, #15]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d3af      	bcc.n	8005b7e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c1e:	2300      	movs	r3, #0
 8005c20:	73fb      	strb	r3, [r7, #15]
 8005c22:	e044      	b.n	8005cae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005c24:	7bfa      	ldrb	r2, [r7, #15]
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4413      	add	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	440b      	add	r3, r1
 8005c32:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005c36:	2200      	movs	r2, #0
 8005c38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005c3a:	7bfa      	ldrb	r2, [r7, #15]
 8005c3c:	6879      	ldr	r1, [r7, #4]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	00db      	lsls	r3, r3, #3
 8005c42:	4413      	add	r3, r2
 8005c44:	009b      	lsls	r3, r3, #2
 8005c46:	440b      	add	r3, r1
 8005c48:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005c4c:	7bfa      	ldrb	r2, [r7, #15]
 8005c4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005c50:	7bfa      	ldrb	r2, [r7, #15]
 8005c52:	6879      	ldr	r1, [r7, #4]
 8005c54:	4613      	mov	r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	4413      	add	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005c62:	2200      	movs	r2, #0
 8005c64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005c66:	7bfa      	ldrb	r2, [r7, #15]
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	00db      	lsls	r3, r3, #3
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005c78:	2200      	movs	r2, #0
 8005c7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005c7c:	7bfa      	ldrb	r2, [r7, #15]
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	4613      	mov	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	440b      	add	r3, r1
 8005c8a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005c92:	7bfa      	ldrb	r2, [r7, #15]
 8005c94:	6879      	ldr	r1, [r7, #4]
 8005c96:	4613      	mov	r3, r2
 8005c98:	00db      	lsls	r3, r3, #3
 8005c9a:	4413      	add	r3, r2
 8005c9c:	009b      	lsls	r3, r3, #2
 8005c9e:	440b      	add	r3, r1
 8005ca0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	3301      	adds	r3, #1
 8005cac:	73fb      	strb	r3, [r7, #15]
 8005cae:	7bfa      	ldrb	r2, [r7, #15]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d3b5      	bcc.n	8005c24 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	603b      	str	r3, [r7, #0]
 8005cbe:	687e      	ldr	r6, [r7, #4]
 8005cc0:	466d      	mov	r5, sp
 8005cc2:	f106 0410 	add.w	r4, r6, #16
 8005cc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005ccc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cd6:	1d33      	adds	r3, r6, #4
 8005cd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cda:	6838      	ldr	r0, [r7, #0]
 8005cdc:	f004 fc80 	bl	800a5e0 <USB_DevInit>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d005      	beq.n	8005cf2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e00d      	b.n	8005d0e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4618      	mov	r0, r3
 8005d08:	f005 fdcf 	bl	800b8aa <USB_DevDisconnect>

  return HAL_OK;
 8005d0c:	2300      	movs	r3, #0
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3714      	adds	r7, #20
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005d16:	b580      	push	{r7, lr}
 8005d18:	b084      	sub	sp, #16
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d2a:	2b01      	cmp	r3, #1
 8005d2c:	d101      	bne.n	8005d32 <HAL_PCD_Start+0x1c>
 8005d2e:	2302      	movs	r3, #2
 8005d30:	e020      	b.n	8005d74 <HAL_PCD_Start+0x5e>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d109      	bne.n	8005d56 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005d46:	2b01      	cmp	r3, #1
 8005d48:	d005      	beq.n	8005d56 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f004 fbd2 	bl	800a504 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4618      	mov	r0, r3
 8005d66:	f005 fd7f 	bl	800b868 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005d7c:	b590      	push	{r4, r7, lr}
 8005d7e:	b08d      	sub	sp, #52	; 0x34
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f005 fe3d 	bl	800ba12 <USB_GetMode>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f040 848a 	bne.w	80066b4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f005 fda1 	bl	800b8ec <USB_ReadInterrupts>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 8480 	beq.w	80066b2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	0a1b      	lsrs	r3, r3, #8
 8005dbc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f005 fd8e 	bl	800b8ec <USB_ReadInterrupts>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b02      	cmp	r3, #2
 8005dd8:	d107      	bne.n	8005dea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	695a      	ldr	r2, [r3, #20]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f002 0202 	and.w	r2, r2, #2
 8005de8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4618      	mov	r0, r3
 8005df0:	f005 fd7c 	bl	800b8ec <USB_ReadInterrupts>
 8005df4:	4603      	mov	r3, r0
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	2b10      	cmp	r3, #16
 8005dfc:	d161      	bne.n	8005ec2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	699a      	ldr	r2, [r3, #24]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0210 	bic.w	r2, r2, #16
 8005e0c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	6a1b      	ldr	r3, [r3, #32]
 8005e12:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f003 020f 	and.w	r2, r3, #15
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	4413      	add	r3, r2
 8005e2a:	3304      	adds	r3, #4
 8005e2c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	0c5b      	lsrs	r3, r3, #17
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d124      	bne.n	8005e84 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005e40:	4013      	ands	r3, r2
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d035      	beq.n	8005eb2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005e50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	461a      	mov	r2, r3
 8005e58:	6a38      	ldr	r0, [r7, #32]
 8005e5a:	f005 fbb3 	bl	800b5c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	091b      	lsrs	r3, r3, #4
 8005e66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e6a:	441a      	add	r2, r3
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	6a1a      	ldr	r2, [r3, #32]
 8005e74:	69bb      	ldr	r3, [r7, #24]
 8005e76:	091b      	lsrs	r3, r3, #4
 8005e78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e7c:	441a      	add	r2, r3
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	621a      	str	r2, [r3, #32]
 8005e82:	e016      	b.n	8005eb2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005e84:	69bb      	ldr	r3, [r7, #24]
 8005e86:	0c5b      	lsrs	r3, r3, #17
 8005e88:	f003 030f 	and.w	r3, r3, #15
 8005e8c:	2b06      	cmp	r3, #6
 8005e8e:	d110      	bne.n	8005eb2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e96:	2208      	movs	r2, #8
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6a38      	ldr	r0, [r7, #32]
 8005e9c:	f005 fb92 	bl	800b5c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	6a1a      	ldr	r2, [r3, #32]
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	091b      	lsrs	r3, r3, #4
 8005ea8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eac:	441a      	add	r2, r3
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	699a      	ldr	r2, [r3, #24]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f042 0210 	orr.w	r2, r2, #16
 8005ec0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f005 fd10 	bl	800b8ec <USB_ReadInterrupts>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ed2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005ed6:	f040 80a7 	bne.w	8006028 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f005 fd15 	bl	800b912 <USB_ReadDevAllOutEpInterrupt>
 8005ee8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005eea:	e099      	b.n	8006020 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 808e 	beq.w	8006014 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efe:	b2d2      	uxtb	r2, r2
 8005f00:	4611      	mov	r1, r2
 8005f02:	4618      	mov	r0, r3
 8005f04:	f005 fd39 	bl	800b97a <USB_ReadDevOutEPInterrupt>
 8005f08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d00c      	beq.n	8005f2e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f20:	461a      	mov	r2, r3
 8005f22:	2301      	movs	r3, #1
 8005f24:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005f26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fec3 	bl	8006cb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	f003 0308 	and.w	r3, r3, #8
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00c      	beq.n	8005f52 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	015a      	lsls	r2, r3, #5
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	4413      	add	r3, r2
 8005f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f44:	461a      	mov	r2, r3
 8005f46:	2308      	movs	r3, #8
 8005f48:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005f4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 ff99 	bl	8006e84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	f003 0310 	and.w	r3, r3, #16
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d008      	beq.n	8005f6e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f68:	461a      	mov	r2, r3
 8005f6a:	2310      	movs	r3, #16
 8005f6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f003 0302 	and.w	r3, r3, #2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d030      	beq.n	8005fda <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f80:	2b80      	cmp	r3, #128	; 0x80
 8005f82:	d109      	bne.n	8005f98 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	69fa      	ldr	r2, [r7, #28]
 8005f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f96:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	4413      	add	r3, r2
 8005faa:	3304      	adds	r3, #4
 8005fac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	78db      	ldrb	r3, [r3, #3]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d108      	bne.n	8005fc8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f008 f8ce 	bl	800e164 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	f003 0320 	and.w	r3, r3, #32
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d008      	beq.n	8005ff6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	2320      	movs	r3, #32
 8005ff4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005ff6:	693b      	ldr	r3, [r7, #16]
 8005ff8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d009      	beq.n	8006014 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	015a      	lsls	r2, r3, #5
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	4413      	add	r3, r2
 8006008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800600c:	461a      	mov	r2, r3
 800600e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006012:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006016:	3301      	adds	r3, #1
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800601a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800601c:	085b      	lsrs	r3, r3, #1
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	2b00      	cmp	r3, #0
 8006024:	f47f af62 	bne.w	8005eec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4618      	mov	r0, r3
 800602e:	f005 fc5d 	bl	800b8ec <USB_ReadInterrupts>
 8006032:	4603      	mov	r3, r0
 8006034:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006038:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800603c:	f040 80db 	bne.w	80061f6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4618      	mov	r0, r3
 8006046:	f005 fc7e 	bl	800b946 <USB_ReadDevAllInEpInterrupt>
 800604a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800604c:	2300      	movs	r3, #0
 800604e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006050:	e0cd      	b.n	80061ee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b00      	cmp	r3, #0
 800605a:	f000 80c2 	beq.w	80061e2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006064:	b2d2      	uxtb	r2, r2
 8006066:	4611      	mov	r1, r2
 8006068:	4618      	mov	r0, r3
 800606a:	f005 fca4 	bl	800b9b6 <USB_ReadDevInEPInterrupt>
 800606e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d057      	beq.n	800612a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	2201      	movs	r2, #1
 8006082:	fa02 f303 	lsl.w	r3, r2, r3
 8006086:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	43db      	mvns	r3, r3
 8006094:	69f9      	ldr	r1, [r7, #28]
 8006096:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800609a:	4013      	ands	r3, r2
 800609c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	015a      	lsls	r2, r3, #5
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060aa:	461a      	mov	r2, r3
 80060ac:	2301      	movs	r3, #1
 80060ae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d132      	bne.n	800611e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060bc:	4613      	mov	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	334c      	adds	r3, #76	; 0x4c
 80060c8:	6819      	ldr	r1, [r3, #0]
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060ce:	4613      	mov	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4403      	add	r3, r0
 80060d8:	3348      	adds	r3, #72	; 0x48
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4419      	add	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060e2:	4613      	mov	r3, r2
 80060e4:	00db      	lsls	r3, r3, #3
 80060e6:	4413      	add	r3, r2
 80060e8:	009b      	lsls	r3, r3, #2
 80060ea:	4403      	add	r3, r0
 80060ec:	334c      	adds	r3, #76	; 0x4c
 80060ee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d113      	bne.n	800611e <HAL_PCD_IRQHandler+0x3a2>
 80060f6:	6879      	ldr	r1, [r7, #4]
 80060f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060fa:	4613      	mov	r3, r2
 80060fc:	00db      	lsls	r3, r3, #3
 80060fe:	4413      	add	r3, r2
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	440b      	add	r3, r1
 8006104:	3354      	adds	r3, #84	; 0x54
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d108      	bne.n	800611e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6818      	ldr	r0, [r3, #0]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006116:	461a      	mov	r2, r3
 8006118:	2101      	movs	r1, #1
 800611a:	f005 fcab 	bl	800ba74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800611e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006120:	b2db      	uxtb	r3, r3
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f007 ff98 	bl	800e05a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f003 0308 	and.w	r3, r3, #8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d008      	beq.n	8006146 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006136:	015a      	lsls	r2, r3, #5
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	4413      	add	r3, r2
 800613c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006140:	461a      	mov	r2, r3
 8006142:	2308      	movs	r3, #8
 8006144:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f003 0310 	and.w	r3, r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	d008      	beq.n	8006162 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	461a      	mov	r2, r3
 800615e:	2310      	movs	r3, #16
 8006160:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006168:	2b00      	cmp	r3, #0
 800616a:	d008      	beq.n	800617e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006178:	461a      	mov	r2, r3
 800617a:	2340      	movs	r3, #64	; 0x40
 800617c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d023      	beq.n	80061d0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006188:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800618a:	6a38      	ldr	r0, [r7, #32]
 800618c:	f004 fb8c 	bl	800a8a8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006192:	4613      	mov	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	3338      	adds	r3, #56	; 0x38
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	4413      	add	r3, r2
 80061a0:	3304      	adds	r3, #4
 80061a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	78db      	ldrb	r3, [r3, #3]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d108      	bne.n	80061be <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2200      	movs	r2, #0
 80061b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	4619      	mov	r1, r3
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f007 ffe5 	bl	800e188 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80061be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061c0:	015a      	lsls	r2, r3, #5
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	4413      	add	r3, r2
 80061c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ca:	461a      	mov	r2, r3
 80061cc:	2302      	movs	r3, #2
 80061ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d003      	beq.n	80061e2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80061da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fcdb 	bl	8006b98 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	3301      	adds	r3, #1
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	085b      	lsrs	r3, r3, #1
 80061ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80061ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f47f af2e 	bne.w	8006052 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f005 fb76 	bl	800b8ec <USB_ReadInterrupts>
 8006200:	4603      	mov	r3, r0
 8006202:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006206:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800620a:	d122      	bne.n	8006252 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	69fa      	ldr	r2, [r7, #28]
 8006216:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800621a:	f023 0301 	bic.w	r3, r3, #1
 800621e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006226:	2b01      	cmp	r3, #1
 8006228:	d108      	bne.n	800623c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006232:	2100      	movs	r1, #0
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fec3 	bl	8006fc0 <HAL_PCDEx_LPM_Callback>
 800623a:	e002      	b.n	8006242 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f007 ff83 	bl	800e148 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	695a      	ldr	r2, [r3, #20]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006250:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4618      	mov	r0, r3
 8006258:	f005 fb48 	bl	800b8ec <USB_ReadInterrupts>
 800625c:	4603      	mov	r3, r0
 800625e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006266:	d112      	bne.n	800628e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f003 0301 	and.w	r3, r3, #1
 8006274:	2b01      	cmp	r3, #1
 8006276:	d102      	bne.n	800627e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f007 ff3f 	bl	800e0fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695a      	ldr	r2, [r3, #20]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800628c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f005 fb2a 	bl	800b8ec <USB_ReadInterrupts>
 8006298:	4603      	mov	r3, r0
 800629a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800629e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062a2:	f040 80b7 	bne.w	8006414 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80062a6:	69fb      	ldr	r3, [r7, #28]
 80062a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	69fa      	ldr	r2, [r7, #28]
 80062b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062b4:	f023 0301 	bic.w	r3, r3, #1
 80062b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2110      	movs	r1, #16
 80062c0:	4618      	mov	r0, r3
 80062c2:	f004 faf1 	bl	800a8a8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062ca:	e046      	b.n	800635a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	015a      	lsls	r2, r3, #5
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	4413      	add	r3, r2
 80062d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d8:	461a      	mov	r2, r3
 80062da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80062de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80062fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800630c:	461a      	mov	r2, r3
 800630e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006312:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	440a      	add	r2, r1
 800632a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800632e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006332:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006352:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006356:	3301      	adds	r3, #1
 8006358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	685b      	ldr	r3, [r3, #4]
 800635e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006360:	429a      	cmp	r2, r3
 8006362:	d3b3      	bcc.n	80062cc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	69db      	ldr	r3, [r3, #28]
 800636c:	69fa      	ldr	r2, [r7, #28]
 800636e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006372:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006376:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800637c:	2b00      	cmp	r3, #0
 800637e:	d016      	beq.n	80063ae <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006390:	f043 030b 	orr.w	r3, r3, #11
 8006394:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800639e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063a0:	69fa      	ldr	r2, [r7, #28]
 80063a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063a6:	f043 030b 	orr.w	r3, r3, #11
 80063aa:	6453      	str	r3, [r2, #68]	; 0x44
 80063ac:	e015      	b.n	80063da <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80063c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80063c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	69fa      	ldr	r2, [r7, #28]
 80063d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063d4:	f043 030b 	orr.w	r3, r3, #11
 80063d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	69fa      	ldr	r2, [r7, #28]
 80063e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80063ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6818      	ldr	r0, [r3, #0]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80063fe:	461a      	mov	r2, r3
 8006400:	f005 fb38 	bl	800ba74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	695a      	ldr	r2, [r3, #20]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006412:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f005 fa67 	bl	800b8ec <USB_ReadInterrupts>
 800641e:	4603      	mov	r3, r0
 8006420:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006424:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006428:	d124      	bne.n	8006474 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f005 fafd 	bl	800ba2e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4618      	mov	r0, r3
 800643a:	f004 fab2 	bl	800a9a2 <USB_GetDevSpeed>
 800643e:	4603      	mov	r3, r0
 8006440:	461a      	mov	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681c      	ldr	r4, [r3, #0]
 800644a:	f001 fa29 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 800644e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006454:	b2db      	uxtb	r3, r3
 8006456:	461a      	mov	r2, r3
 8006458:	4620      	mov	r0, r4
 800645a:	f003 ffb1 	bl	800a3c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f007 fe23 	bl	800e0aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	695a      	ldr	r2, [r3, #20]
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006472:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4618      	mov	r0, r3
 800647a:	f005 fa37 	bl	800b8ec <USB_ReadInterrupts>
 800647e:	4603      	mov	r3, r0
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b08      	cmp	r3, #8
 8006486:	d10a      	bne.n	800649e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f007 fe00 	bl	800e08e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695a      	ldr	r2, [r3, #20]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f002 0208 	and.w	r2, r2, #8
 800649c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f005 fa22 	bl	800b8ec <USB_ReadInterrupts>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064ae:	2b80      	cmp	r3, #128	; 0x80
 80064b0:	d122      	bne.n	80064f8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064be:	2301      	movs	r3, #1
 80064c0:	627b      	str	r3, [r7, #36]	; 0x24
 80064c2:	e014      	b.n	80064ee <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80064c4:	6879      	ldr	r1, [r7, #4]
 80064c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064c8:	4613      	mov	r3, r2
 80064ca:	00db      	lsls	r3, r3, #3
 80064cc:	4413      	add	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	440b      	add	r3, r1
 80064d2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d105      	bne.n	80064e8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fb27 	bl	8006b36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	3301      	adds	r3, #1
 80064ec:	627b      	str	r3, [r7, #36]	; 0x24
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d3e5      	bcc.n	80064c4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f005 f9f5 	bl	800b8ec <USB_ReadInterrupts>
 8006502:	4603      	mov	r3, r0
 8006504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006508:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800650c:	d13b      	bne.n	8006586 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800650e:	2301      	movs	r3, #1
 8006510:	627b      	str	r3, [r7, #36]	; 0x24
 8006512:	e02b      	b.n	800656c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	015a      	lsls	r2, r3, #5
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	4413      	add	r3, r2
 800651c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006524:	6879      	ldr	r1, [r7, #4]
 8006526:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006528:	4613      	mov	r3, r2
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	440b      	add	r3, r1
 8006532:	3340      	adds	r3, #64	; 0x40
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d115      	bne.n	8006566 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800653a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800653c:	2b00      	cmp	r3, #0
 800653e:	da12      	bge.n	8006566 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006540:	6879      	ldr	r1, [r7, #4]
 8006542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006544:	4613      	mov	r3, r2
 8006546:	00db      	lsls	r3, r3, #3
 8006548:	4413      	add	r3, r2
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	440b      	add	r3, r1
 800654e:	333f      	adds	r3, #63	; 0x3f
 8006550:	2201      	movs	r2, #1
 8006552:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006556:	b2db      	uxtb	r3, r3
 8006558:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800655c:	b2db      	uxtb	r3, r3
 800655e:	4619      	mov	r1, r3
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fae8 	bl	8006b36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006568:	3301      	adds	r3, #1
 800656a:	627b      	str	r3, [r7, #36]	; 0x24
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006572:	429a      	cmp	r2, r3
 8006574:	d3ce      	bcc.n	8006514 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	695a      	ldr	r2, [r3, #20]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4618      	mov	r0, r3
 800658c:	f005 f9ae 	bl	800b8ec <USB_ReadInterrupts>
 8006590:	4603      	mov	r3, r0
 8006592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006596:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800659a:	d155      	bne.n	8006648 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800659c:	2301      	movs	r3, #1
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
 80065a0:	e045      	b.n	800662e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80065a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a4:	015a      	lsls	r2, r3, #5
 80065a6:	69fb      	ldr	r3, [r7, #28]
 80065a8:	4413      	add	r3, r2
 80065aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80065b2:	6879      	ldr	r1, [r7, #4]
 80065b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065b6:	4613      	mov	r3, r2
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d12e      	bne.n	8006628 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80065ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	da2b      	bge.n	8006628 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80065dc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d121      	bne.n	8006628 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e8:	4613      	mov	r3, r2
 80065ea:	00db      	lsls	r3, r3, #3
 80065ec:	4413      	add	r3, r2
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	440b      	add	r3, r1
 80065f2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	695b      	ldr	r3, [r3, #20]
 800660a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800660e:	2b00      	cmp	r3, #0
 8006610:	d10a      	bne.n	8006628 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	69fa      	ldr	r2, [r7, #28]
 800661c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006620:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006624:	6053      	str	r3, [r2, #4]
            break;
 8006626:	e007      	b.n	8006638 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	3301      	adds	r3, #1
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006634:	429a      	cmp	r2, r3
 8006636:	d3b4      	bcc.n	80065a2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	695a      	ldr	r2, [r3, #20]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006646:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4618      	mov	r0, r3
 800664e:	f005 f94d 	bl	800b8ec <USB_ReadInterrupts>
 8006652:	4603      	mov	r3, r0
 8006654:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800665c:	d10a      	bne.n	8006674 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f007 fda4 	bl	800e1ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695a      	ldr	r2, [r3, #20]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006672:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4618      	mov	r0, r3
 800667a:	f005 f937 	bl	800b8ec <USB_ReadInterrupts>
 800667e:	4603      	mov	r3, r0
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b04      	cmp	r3, #4
 8006686:	d115      	bne.n	80066b4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d002      	beq.n	80066a0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f007 fd94 	bl	800e1c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6859      	ldr	r1, [r3, #4]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69ba      	ldr	r2, [r7, #24]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
 80066b0:	e000      	b.n	80066b4 <HAL_PCD_IRQHandler+0x938>
      return;
 80066b2:	bf00      	nop
    }
  }
}
 80066b4:	3734      	adds	r7, #52	; 0x34
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd90      	pop	{r4, r7, pc}

080066ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	460b      	mov	r3, r1
 80066c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80066cc:	2b01      	cmp	r3, #1
 80066ce:	d101      	bne.n	80066d4 <HAL_PCD_SetAddress+0x1a>
 80066d0:	2302      	movs	r3, #2
 80066d2:	e013      	b.n	80066fc <HAL_PCD_SetAddress+0x42>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	78fa      	ldrb	r2, [r7, #3]
 80066e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	78fa      	ldrb	r2, [r7, #3]
 80066ea:	4611      	mov	r1, r2
 80066ec:	4618      	mov	r0, r3
 80066ee:	f005 f895 	bl	800b81c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	4608      	mov	r0, r1
 800670e:	4611      	mov	r1, r2
 8006710:	461a      	mov	r2, r3
 8006712:	4603      	mov	r3, r0
 8006714:	70fb      	strb	r3, [r7, #3]
 8006716:	460b      	mov	r3, r1
 8006718:	803b      	strh	r3, [r7, #0]
 800671a:	4613      	mov	r3, r2
 800671c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006726:	2b00      	cmp	r3, #0
 8006728:	da0f      	bge.n	800674a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	f003 020f 	and.w	r2, r3, #15
 8006730:	4613      	mov	r3, r2
 8006732:	00db      	lsls	r3, r3, #3
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	3338      	adds	r3, #56	; 0x38
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	4413      	add	r3, r2
 800673e:	3304      	adds	r3, #4
 8006740:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2201      	movs	r2, #1
 8006746:	705a      	strb	r2, [r3, #1]
 8006748:	e00f      	b.n	800676a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	f003 020f 	and.w	r2, r3, #15
 8006750:	4613      	mov	r3, r2
 8006752:	00db      	lsls	r3, r3, #3
 8006754:	4413      	add	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	4413      	add	r3, r2
 8006760:	3304      	adds	r3, #4
 8006762:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800676a:	78fb      	ldrb	r3, [r7, #3]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	b2da      	uxtb	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006776:	883a      	ldrh	r2, [r7, #0]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	78ba      	ldrb	r2, [r7, #2]
 8006780:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	785b      	ldrb	r3, [r3, #1]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d004      	beq.n	8006794 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	b29a      	uxth	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006794:	78bb      	ldrb	r3, [r7, #2]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d102      	bne.n	80067a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2200      	movs	r2, #0
 800679e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d101      	bne.n	80067ae <HAL_PCD_EP_Open+0xaa>
 80067aa:	2302      	movs	r3, #2
 80067ac:	e00e      	b.n	80067cc <HAL_PCD_EP_Open+0xc8>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2201      	movs	r2, #1
 80067b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68f9      	ldr	r1, [r7, #12]
 80067bc:	4618      	mov	r0, r3
 80067be:	f004 f915 	bl	800a9ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80067ca:	7afb      	ldrb	r3, [r7, #11]
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	460b      	mov	r3, r1
 80067de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80067e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	da0f      	bge.n	8006808 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80067e8:	78fb      	ldrb	r3, [r7, #3]
 80067ea:	f003 020f 	and.w	r2, r3, #15
 80067ee:	4613      	mov	r3, r2
 80067f0:	00db      	lsls	r3, r3, #3
 80067f2:	4413      	add	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	3338      	adds	r3, #56	; 0x38
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	4413      	add	r3, r2
 80067fc:	3304      	adds	r3, #4
 80067fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2201      	movs	r2, #1
 8006804:	705a      	strb	r2, [r3, #1]
 8006806:	e00f      	b.n	8006828 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	f003 020f 	and.w	r2, r3, #15
 800680e:	4613      	mov	r3, r2
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	4413      	add	r3, r2
 800681e:	3304      	adds	r3, #4
 8006820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006828:	78fb      	ldrb	r3, [r7, #3]
 800682a:	f003 030f 	and.w	r3, r3, #15
 800682e:	b2da      	uxtb	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800683a:	2b01      	cmp	r3, #1
 800683c:	d101      	bne.n	8006842 <HAL_PCD_EP_Close+0x6e>
 800683e:	2302      	movs	r3, #2
 8006840:	e00e      	b.n	8006860 <HAL_PCD_EP_Close+0x8c>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68f9      	ldr	r1, [r7, #12]
 8006850:	4618      	mov	r0, r3
 8006852:	f004 f953 	bl	800aafc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800685e:	2300      	movs	r3, #0
}
 8006860:	4618      	mov	r0, r3
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b086      	sub	sp, #24
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	607a      	str	r2, [r7, #4]
 8006872:	603b      	str	r3, [r7, #0]
 8006874:	460b      	mov	r3, r1
 8006876:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006878:	7afb      	ldrb	r3, [r7, #11]
 800687a:	f003 020f 	and.w	r2, r3, #15
 800687e:	4613      	mov	r3, r2
 8006880:	00db      	lsls	r3, r3, #3
 8006882:	4413      	add	r3, r2
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4413      	add	r3, r2
 800688e:	3304      	adds	r3, #4
 8006890:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2200      	movs	r2, #0
 80068a2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	2200      	movs	r2, #0
 80068a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068aa:	7afb      	ldrb	r3, [r7, #11]
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	d102      	bne.n	80068c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80068c4:	7afb      	ldrb	r3, [r7, #11]
 80068c6:	f003 030f 	and.w	r3, r3, #15
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	461a      	mov	r2, r3
 80068da:	6979      	ldr	r1, [r7, #20]
 80068dc:	f004 fc32 	bl	800b144 <USB_EP0StartXfer>
 80068e0:	e008      	b.n	80068f4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	461a      	mov	r2, r3
 80068ee:	6979      	ldr	r1, [r7, #20]
 80068f0:	f004 f9e0 	bl	800acb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}

080068fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	460b      	mov	r3, r1
 8006908:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	f003 020f 	and.w	r2, r3, #15
 8006910:	6879      	ldr	r1, [r7, #4]
 8006912:	4613      	mov	r3, r2
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	440b      	add	r3, r1
 800691c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006920:	681b      	ldr	r3, [r3, #0]
}
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800692e:	b580      	push	{r7, lr}
 8006930:	b086      	sub	sp, #24
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	607a      	str	r2, [r7, #4]
 8006938:	603b      	str	r3, [r7, #0]
 800693a:	460b      	mov	r3, r1
 800693c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800693e:	7afb      	ldrb	r3, [r7, #11]
 8006940:	f003 020f 	and.w	r2, r3, #15
 8006944:	4613      	mov	r3, r2
 8006946:	00db      	lsls	r3, r3, #3
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	3338      	adds	r3, #56	; 0x38
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	3304      	adds	r3, #4
 8006954:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	683a      	ldr	r2, [r7, #0]
 8006960:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2200      	movs	r2, #0
 8006966:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	2201      	movs	r2, #1
 800696c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800696e:	7afb      	ldrb	r3, [r7, #11]
 8006970:	f003 030f 	and.w	r3, r3, #15
 8006974:	b2da      	uxtb	r2, r3
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	2b01      	cmp	r3, #1
 8006980:	d102      	bne.n	8006988 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006988:	7afb      	ldrb	r3, [r7, #11]
 800698a:	f003 030f 	and.w	r3, r3, #15
 800698e:	2b00      	cmp	r3, #0
 8006990:	d109      	bne.n	80069a6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	461a      	mov	r2, r3
 800699e:	6979      	ldr	r1, [r7, #20]
 80069a0:	f004 fbd0 	bl	800b144 <USB_EP0StartXfer>
 80069a4:	e008      	b.n	80069b8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6818      	ldr	r0, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	691b      	ldr	r3, [r3, #16]
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	6979      	ldr	r1, [r7, #20]
 80069b4:	f004 f97e 	bl	800acb4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3718      	adds	r7, #24
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	460b      	mov	r3, r1
 80069cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	f003 020f 	and.w	r2, r3, #15
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d901      	bls.n	80069e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80069dc:	2301      	movs	r3, #1
 80069de:	e050      	b.n	8006a82 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	da0f      	bge.n	8006a08 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069e8:	78fb      	ldrb	r3, [r7, #3]
 80069ea:	f003 020f 	and.w	r2, r3, #15
 80069ee:	4613      	mov	r3, r2
 80069f0:	00db      	lsls	r3, r3, #3
 80069f2:	4413      	add	r3, r2
 80069f4:	009b      	lsls	r3, r3, #2
 80069f6:	3338      	adds	r3, #56	; 0x38
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	4413      	add	r3, r2
 80069fc:	3304      	adds	r3, #4
 80069fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	2201      	movs	r2, #1
 8006a04:	705a      	strb	r2, [r3, #1]
 8006a06:	e00d      	b.n	8006a24 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006a08:	78fa      	ldrb	r2, [r7, #3]
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	00db      	lsls	r3, r3, #3
 8006a0e:	4413      	add	r3, r2
 8006a10:	009b      	lsls	r3, r3, #2
 8006a12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	4413      	add	r3, r2
 8006a1a:	3304      	adds	r3, #4
 8006a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a2a:	78fb      	ldrb	r3, [r7, #3]
 8006a2c:	f003 030f 	and.w	r3, r3, #15
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d101      	bne.n	8006a44 <HAL_PCD_EP_SetStall+0x82>
 8006a40:	2302      	movs	r3, #2
 8006a42:	e01e      	b.n	8006a82 <HAL_PCD_EP_SetStall+0xc0>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68f9      	ldr	r1, [r7, #12]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f004 fe0e 	bl	800b674 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a58:	78fb      	ldrb	r3, [r7, #3]
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10a      	bne.n	8006a78 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	b2d9      	uxtb	r1, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a72:	461a      	mov	r2, r3
 8006a74:	f004 fffe 	bl	800ba74 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b084      	sub	sp, #16
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	460b      	mov	r3, r1
 8006a94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	f003 020f 	and.w	r2, r3, #15
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d901      	bls.n	8006aa8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e042      	b.n	8006b2e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	da0f      	bge.n	8006ad0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ab0:	78fb      	ldrb	r3, [r7, #3]
 8006ab2:	f003 020f 	and.w	r2, r3, #15
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	00db      	lsls	r3, r3, #3
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	3338      	adds	r3, #56	; 0x38
 8006ac0:	687a      	ldr	r2, [r7, #4]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	705a      	strb	r2, [r3, #1]
 8006ace:	e00f      	b.n	8006af0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	f003 020f 	and.w	r2, r3, #15
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	3304      	adds	r3, #4
 8006ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2200      	movs	r2, #0
 8006af4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006af6:	78fb      	ldrb	r3, [r7, #3]
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_PCD_EP_ClrStall+0x86>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e00e      	b.n	8006b2e <HAL_PCD_EP_ClrStall+0xa4>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68f9      	ldr	r1, [r7, #12]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f004 fe16 	bl	800b750 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}

08006b36 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b36:	b580      	push	{r7, lr}
 8006b38:	b084      	sub	sp, #16
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	460b      	mov	r3, r1
 8006b40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006b42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	da0c      	bge.n	8006b64 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b4a:	78fb      	ldrb	r3, [r7, #3]
 8006b4c:	f003 020f 	and.w	r2, r3, #15
 8006b50:	4613      	mov	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	3338      	adds	r3, #56	; 0x38
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	3304      	adds	r3, #4
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	e00c      	b.n	8006b7e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006b64:	78fb      	ldrb	r3, [r7, #3]
 8006b66:	f003 020f 	and.w	r2, r3, #15
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	00db      	lsls	r3, r3, #3
 8006b6e:	4413      	add	r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	4413      	add	r3, r2
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	68f9      	ldr	r1, [r7, #12]
 8006b84:	4618      	mov	r0, r3
 8006b86:	f004 fc35 	bl	800b3f4 <USB_EPStopXfer>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006b8e:	7afb      	ldrb	r3, [r7, #11]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3710      	adds	r7, #16
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	; 0x28
 8006b9c:	af02      	add	r7, sp, #8
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	3338      	adds	r3, #56	; 0x38
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4413      	add	r3, r2
 8006bbc:	3304      	adds	r3, #4
 8006bbe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a1a      	ldr	r2, [r3, #32]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d901      	bls.n	8006bd0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	e06c      	b.n	8006caa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	699a      	ldr	r2, [r3, #24]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1b      	ldr	r3, [r3, #32]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	69fa      	ldr	r2, [r7, #28]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d902      	bls.n	8006bec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	68db      	ldr	r3, [r3, #12]
 8006bea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	3303      	adds	r3, #3
 8006bf0:	089b      	lsrs	r3, r3, #2
 8006bf2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006bf4:	e02b      	b.n	8006c4e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	699a      	ldr	r2, [r3, #24]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	69fa      	ldr	r2, [r7, #28]
 8006c08:	429a      	cmp	r2, r3
 8006c0a:	d902      	bls.n	8006c12 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006c12:	69fb      	ldr	r3, [r7, #28]
 8006c14:	3303      	adds	r3, #3
 8006c16:	089b      	lsrs	r3, r3, #2
 8006c18:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6919      	ldr	r1, [r3, #16]
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	9300      	str	r3, [sp, #0]
 8006c2e:	4603      	mov	r3, r0
 8006c30:	6978      	ldr	r0, [r7, #20]
 8006c32:	f004 fc89 	bl	800b548 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	691a      	ldr	r2, [r3, #16]
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	441a      	add	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6a1a      	ldr	r2, [r3, #32]
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	441a      	add	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	015a      	lsls	r2, r3, #5
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	4413      	add	r3, r2
 8006c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c5a:	699b      	ldr	r3, [r3, #24]
 8006c5c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d809      	bhi.n	8006c78 <PCD_WriteEmptyTxFifo+0xe0>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6a1a      	ldr	r2, [r3, #32]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d203      	bcs.n	8006c78 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d1be      	bne.n	8006bf6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	699a      	ldr	r2, [r3, #24]
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6a1b      	ldr	r3, [r3, #32]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d811      	bhi.n	8006ca8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	f003 030f 	and.w	r3, r3, #15
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	6939      	ldr	r1, [r7, #16]
 8006ca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ca4:	4013      	ands	r3, r2
 8006ca6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3720      	adds	r7, #32
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
	...

08006cb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b088      	sub	sp, #32
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	333c      	adds	r3, #60	; 0x3c
 8006ccc:	3304      	adds	r3, #4
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	015a      	lsls	r2, r3, #5
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	4413      	add	r3, r2
 8006cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d17b      	bne.n	8006de2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	f003 0308 	and.w	r3, r3, #8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d015      	beq.n	8006d20 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	4a61      	ldr	r2, [pc, #388]	; (8006e7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	f240 80b9 	bls.w	8006e70 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 80b3 	beq.w	8006e70 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	015a      	lsls	r2, r3, #5
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	4413      	add	r3, r2
 8006d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d16:	461a      	mov	r2, r3
 8006d18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d1c:	6093      	str	r3, [r2, #8]
 8006d1e:	e0a7      	b.n	8006e70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d009      	beq.n	8006d3e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	015a      	lsls	r2, r3, #5
 8006d2e:	69bb      	ldr	r3, [r7, #24]
 8006d30:	4413      	add	r3, r2
 8006d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d36:	461a      	mov	r2, r3
 8006d38:	2320      	movs	r3, #32
 8006d3a:	6093      	str	r3, [r2, #8]
 8006d3c:	e098      	b.n	8006e70 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f040 8093 	bne.w	8006e70 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	4a4b      	ldr	r2, [pc, #300]	; (8006e7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d90f      	bls.n	8006d72 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	69bb      	ldr	r3, [r7, #24]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d68:	461a      	mov	r2, r3
 8006d6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d6e:	6093      	str	r3, [r2, #8]
 8006d70:	e07e      	b.n	8006e70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006d72:	683a      	ldr	r2, [r7, #0]
 8006d74:	4613      	mov	r3, r2
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	4413      	add	r3, r2
 8006d84:	3304      	adds	r3, #4
 8006d86:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	69da      	ldr	r2, [r3, #28]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	0159      	lsls	r1, r3, #5
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	440b      	add	r3, r1
 8006d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d9e:	1ad2      	subs	r2, r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d114      	bne.n	8006dd4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	699b      	ldr	r3, [r3, #24]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d109      	bne.n	8006dc6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6818      	ldr	r0, [r3, #0]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	f004 fe58 	bl	800ba74 <USB_EP0_OutStart>
 8006dc4:	e006      	b.n	8006dd4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	691a      	ldr	r2, [r3, #16]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	441a      	add	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f007 f922 	bl	800e024 <HAL_PCD_DataOutStageCallback>
 8006de0:	e046      	b.n	8006e70 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	4a26      	ldr	r2, [pc, #152]	; (8006e80 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d124      	bne.n	8006e34 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d00a      	beq.n	8006e0a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e00:	461a      	mov	r2, r3
 8006e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e06:	6093      	str	r3, [r2, #8]
 8006e08:	e032      	b.n	8006e70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f003 0320 	and.w	r3, r3, #32
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d008      	beq.n	8006e26 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	015a      	lsls	r2, r3, #5
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	4413      	add	r3, r2
 8006e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e20:	461a      	mov	r2, r3
 8006e22:	2320      	movs	r3, #32
 8006e24:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f007 f8f9 	bl	800e024 <HAL_PCD_DataOutStageCallback>
 8006e32:	e01d      	b.n	8006e70 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d114      	bne.n	8006e64 <PCD_EP_OutXfrComplete_int+0x1b0>
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	683a      	ldr	r2, [r7, #0]
 8006e3e:	4613      	mov	r3, r2
 8006e40:	00db      	lsls	r3, r3, #3
 8006e42:	4413      	add	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	440b      	add	r3, r1
 8006e48:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d108      	bne.n	8006e64 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6818      	ldr	r0, [r3, #0]
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	2100      	movs	r1, #0
 8006e60:	f004 fe08 	bl	800ba74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f007 f8da 	bl	800e024 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop
 8006e7c:	4f54300a 	.word	0x4f54300a
 8006e80:	4f54310a 	.word	0x4f54310a

08006e84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	333c      	adds	r3, #60	; 0x3c
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	4a15      	ldr	r2, [pc, #84]	; (8006f0c <PCD_EP_OutSetupPacket_int+0x88>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d90e      	bls.n	8006ed8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d009      	beq.n	8006ed8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ed6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f007 f891 	bl	800e000 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	4a0a      	ldr	r2, [pc, #40]	; (8006f0c <PCD_EP_OutSetupPacket_int+0x88>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d90c      	bls.n	8006f00 <PCD_EP_OutSetupPacket_int+0x7c>
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d108      	bne.n	8006f00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6818      	ldr	r0, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006ef8:	461a      	mov	r2, r3
 8006efa:	2101      	movs	r1, #1
 8006efc:	f004 fdba 	bl	800ba74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3718      	adds	r7, #24
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	4f54300a 	.word	0x4f54300a

08006f10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	70fb      	strb	r3, [r7, #3]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d107      	bne.n	8006f3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006f2e:	883b      	ldrh	r3, [r7, #0]
 8006f30:	0419      	lsls	r1, r3, #16
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	430a      	orrs	r2, r1
 8006f3a:	629a      	str	r2, [r3, #40]	; 0x28
 8006f3c:	e028      	b.n	8006f90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f44:	0c1b      	lsrs	r3, r3, #16
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	4413      	add	r3, r2
 8006f4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]
 8006f50:	e00d      	b.n	8006f6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	7bfb      	ldrb	r3, [r7, #15]
 8006f58:	3340      	adds	r3, #64	; 0x40
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	0c1b      	lsrs	r3, r3, #16
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	4413      	add	r3, r2
 8006f66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006f68:	7bfb      	ldrb	r3, [r7, #15]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	73fb      	strb	r3, [r7, #15]
 8006f6e:	7bfa      	ldrb	r2, [r7, #15]
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d3ec      	bcc.n	8006f52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006f78:	883b      	ldrh	r3, [r7, #0]
 8006f7a:	0418      	lsls	r0, r3, #16
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6819      	ldr	r1, [r3, #0]
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	4302      	orrs	r2, r0
 8006f88:	3340      	adds	r3, #64	; 0x40
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	440b      	add	r3, r1
 8006f8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	887a      	ldrh	r2, [r7, #2]
 8006fb0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr

08006fc0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	460b      	mov	r3, r1
 8006fca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e267      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d075      	beq.n	80070e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ff6:	4b88      	ldr	r3, [pc, #544]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 030c 	and.w	r3, r3, #12
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d00c      	beq.n	800701c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007002:	4b85      	ldr	r3, [pc, #532]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800700a:	2b08      	cmp	r3, #8
 800700c:	d112      	bne.n	8007034 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800700e:	4b82      	ldr	r3, [pc, #520]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007016:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800701a:	d10b      	bne.n	8007034 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800701c:	4b7e      	ldr	r3, [pc, #504]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007024:	2b00      	cmp	r3, #0
 8007026:	d05b      	beq.n	80070e0 <HAL_RCC_OscConfig+0x108>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d157      	bne.n	80070e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e242      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800703c:	d106      	bne.n	800704c <HAL_RCC_OscConfig+0x74>
 800703e:	4b76      	ldr	r3, [pc, #472]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a75      	ldr	r2, [pc, #468]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007048:	6013      	str	r3, [r2, #0]
 800704a:	e01d      	b.n	8007088 <HAL_RCC_OscConfig+0xb0>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007054:	d10c      	bne.n	8007070 <HAL_RCC_OscConfig+0x98>
 8007056:	4b70      	ldr	r3, [pc, #448]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a6f      	ldr	r2, [pc, #444]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 800705c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	4b6d      	ldr	r3, [pc, #436]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a6c      	ldr	r2, [pc, #432]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800706c:	6013      	str	r3, [r2, #0]
 800706e:	e00b      	b.n	8007088 <HAL_RCC_OscConfig+0xb0>
 8007070:	4b69      	ldr	r3, [pc, #420]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a68      	ldr	r2, [pc, #416]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	4b66      	ldr	r3, [pc, #408]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a65      	ldr	r2, [pc, #404]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d013      	beq.n	80070b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007090:	f7fd fab6 	bl	8004600 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007098:	f7fd fab2 	bl	8004600 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b64      	cmp	r3, #100	; 0x64
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e207      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070aa:	4b5b      	ldr	r3, [pc, #364]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d0f0      	beq.n	8007098 <HAL_RCC_OscConfig+0xc0>
 80070b6:	e014      	b.n	80070e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070b8:	f7fd faa2 	bl	8004600 <HAL_GetTick>
 80070bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070be:	e008      	b.n	80070d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070c0:	f7fd fa9e 	bl	8004600 <HAL_GetTick>
 80070c4:	4602      	mov	r2, r0
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	1ad3      	subs	r3, r2, r3
 80070ca:	2b64      	cmp	r3, #100	; 0x64
 80070cc:	d901      	bls.n	80070d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070ce:	2303      	movs	r3, #3
 80070d0:	e1f3      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070d2:	4b51      	ldr	r3, [pc, #324]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1f0      	bne.n	80070c0 <HAL_RCC_OscConfig+0xe8>
 80070de:	e000      	b.n	80070e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d063      	beq.n	80071b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070ee:	4b4a      	ldr	r3, [pc, #296]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 030c 	and.w	r3, r3, #12
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00b      	beq.n	8007112 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80070fa:	4b47      	ldr	r3, [pc, #284]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007102:	2b08      	cmp	r3, #8
 8007104:	d11c      	bne.n	8007140 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007106:	4b44      	ldr	r3, [pc, #272]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d116      	bne.n	8007140 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007112:	4b41      	ldr	r3, [pc, #260]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f003 0302 	and.w	r3, r3, #2
 800711a:	2b00      	cmp	r3, #0
 800711c:	d005      	beq.n	800712a <HAL_RCC_OscConfig+0x152>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d001      	beq.n	800712a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e1c7      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800712a:	4b3b      	ldr	r3, [pc, #236]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	4937      	ldr	r1, [pc, #220]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 800713a:	4313      	orrs	r3, r2
 800713c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800713e:	e03a      	b.n	80071b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d020      	beq.n	800718a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007148:	4b34      	ldr	r3, [pc, #208]	; (800721c <HAL_RCC_OscConfig+0x244>)
 800714a:	2201      	movs	r2, #1
 800714c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800714e:	f7fd fa57 	bl	8004600 <HAL_GetTick>
 8007152:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007154:	e008      	b.n	8007168 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007156:	f7fd fa53 	bl	8004600 <HAL_GetTick>
 800715a:	4602      	mov	r2, r0
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	2b02      	cmp	r3, #2
 8007162:	d901      	bls.n	8007168 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007164:	2303      	movs	r3, #3
 8007166:	e1a8      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007168:	4b2b      	ldr	r3, [pc, #172]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0f0      	beq.n	8007156 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007174:	4b28      	ldr	r3, [pc, #160]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	4925      	ldr	r1, [pc, #148]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 8007184:	4313      	orrs	r3, r2
 8007186:	600b      	str	r3, [r1, #0]
 8007188:	e015      	b.n	80071b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800718a:	4b24      	ldr	r3, [pc, #144]	; (800721c <HAL_RCC_OscConfig+0x244>)
 800718c:	2200      	movs	r2, #0
 800718e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007190:	f7fd fa36 	bl	8004600 <HAL_GetTick>
 8007194:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007196:	e008      	b.n	80071aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007198:	f7fd fa32 	bl	8004600 <HAL_GetTick>
 800719c:	4602      	mov	r2, r0
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	1ad3      	subs	r3, r2, r3
 80071a2:	2b02      	cmp	r3, #2
 80071a4:	d901      	bls.n	80071aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e187      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071aa:	4b1b      	ldr	r3, [pc, #108]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f003 0302 	and.w	r3, r3, #2
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d1f0      	bne.n	8007198 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0308 	and.w	r3, r3, #8
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d036      	beq.n	8007230 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d016      	beq.n	80071f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071ca:	4b15      	ldr	r3, [pc, #84]	; (8007220 <HAL_RCC_OscConfig+0x248>)
 80071cc:	2201      	movs	r2, #1
 80071ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071d0:	f7fd fa16 	bl	8004600 <HAL_GetTick>
 80071d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071d6:	e008      	b.n	80071ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071d8:	f7fd fa12 	bl	8004600 <HAL_GetTick>
 80071dc:	4602      	mov	r2, r0
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d901      	bls.n	80071ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e167      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071ea:	4b0b      	ldr	r3, [pc, #44]	; (8007218 <HAL_RCC_OscConfig+0x240>)
 80071ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d0f0      	beq.n	80071d8 <HAL_RCC_OscConfig+0x200>
 80071f6:	e01b      	b.n	8007230 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80071f8:	4b09      	ldr	r3, [pc, #36]	; (8007220 <HAL_RCC_OscConfig+0x248>)
 80071fa:	2200      	movs	r2, #0
 80071fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80071fe:	f7fd f9ff 	bl	8004600 <HAL_GetTick>
 8007202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007204:	e00e      	b.n	8007224 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007206:	f7fd f9fb 	bl	8004600 <HAL_GetTick>
 800720a:	4602      	mov	r2, r0
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	2b02      	cmp	r3, #2
 8007212:	d907      	bls.n	8007224 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e150      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
 8007218:	40023800 	.word	0x40023800
 800721c:	42470000 	.word	0x42470000
 8007220:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007224:	4b88      	ldr	r3, [pc, #544]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 8007226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1ea      	bne.n	8007206 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 8097 	beq.w	800736c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800723e:	2300      	movs	r3, #0
 8007240:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007242:	4b81      	ldr	r3, [pc, #516]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d10f      	bne.n	800726e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800724e:	2300      	movs	r3, #0
 8007250:	60bb      	str	r3, [r7, #8]
 8007252:	4b7d      	ldr	r3, [pc, #500]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	4a7c      	ldr	r2, [pc, #496]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 8007258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800725c:	6413      	str	r3, [r2, #64]	; 0x40
 800725e:	4b7a      	ldr	r3, [pc, #488]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007266:	60bb      	str	r3, [r7, #8]
 8007268:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800726a:	2301      	movs	r3, #1
 800726c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800726e:	4b77      	ldr	r3, [pc, #476]	; (800744c <HAL_RCC_OscConfig+0x474>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007276:	2b00      	cmp	r3, #0
 8007278:	d118      	bne.n	80072ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800727a:	4b74      	ldr	r3, [pc, #464]	; (800744c <HAL_RCC_OscConfig+0x474>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a73      	ldr	r2, [pc, #460]	; (800744c <HAL_RCC_OscConfig+0x474>)
 8007280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007286:	f7fd f9bb 	bl	8004600 <HAL_GetTick>
 800728a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800728c:	e008      	b.n	80072a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800728e:	f7fd f9b7 	bl	8004600 <HAL_GetTick>
 8007292:	4602      	mov	r2, r0
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	1ad3      	subs	r3, r2, r3
 8007298:	2b02      	cmp	r3, #2
 800729a:	d901      	bls.n	80072a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800729c:	2303      	movs	r3, #3
 800729e:	e10c      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072a0:	4b6a      	ldr	r3, [pc, #424]	; (800744c <HAL_RCC_OscConfig+0x474>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d0f0      	beq.n	800728e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d106      	bne.n	80072c2 <HAL_RCC_OscConfig+0x2ea>
 80072b4:	4b64      	ldr	r3, [pc, #400]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 80072b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b8:	4a63      	ldr	r2, [pc, #396]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 80072ba:	f043 0301 	orr.w	r3, r3, #1
 80072be:	6713      	str	r3, [r2, #112]	; 0x70
 80072c0:	e01c      	b.n	80072fc <HAL_RCC_OscConfig+0x324>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	2b05      	cmp	r3, #5
 80072c8:	d10c      	bne.n	80072e4 <HAL_RCC_OscConfig+0x30c>
 80072ca:	4b5f      	ldr	r3, [pc, #380]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 80072cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ce:	4a5e      	ldr	r2, [pc, #376]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 80072d0:	f043 0304 	orr.w	r3, r3, #4
 80072d4:	6713      	str	r3, [r2, #112]	; 0x70
 80072d6:	4b5c      	ldr	r3, [pc, #368]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 80072d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072da:	4a5b      	ldr	r2, [pc, #364]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 80072dc:	f043 0301 	orr.w	r3, r3, #1
 80072e0:	6713      	str	r3, [r2, #112]	; 0x70
 80072e2:	e00b      	b.n	80072fc <HAL_RCC_OscConfig+0x324>
 80072e4:	4b58      	ldr	r3, [pc, #352]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 80072e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e8:	4a57      	ldr	r2, [pc, #348]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 80072ea:	f023 0301 	bic.w	r3, r3, #1
 80072ee:	6713      	str	r3, [r2, #112]	; 0x70
 80072f0:	4b55      	ldr	r3, [pc, #340]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 80072f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f4:	4a54      	ldr	r2, [pc, #336]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 80072f6:	f023 0304 	bic.w	r3, r3, #4
 80072fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d015      	beq.n	8007330 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007304:	f7fd f97c 	bl	8004600 <HAL_GetTick>
 8007308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800730a:	e00a      	b.n	8007322 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800730c:	f7fd f978 	bl	8004600 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	f241 3288 	movw	r2, #5000	; 0x1388
 800731a:	4293      	cmp	r3, r2
 800731c:	d901      	bls.n	8007322 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e0cb      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007322:	4b49      	ldr	r3, [pc, #292]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 8007324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007326:	f003 0302 	and.w	r3, r3, #2
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0ee      	beq.n	800730c <HAL_RCC_OscConfig+0x334>
 800732e:	e014      	b.n	800735a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007330:	f7fd f966 	bl	8004600 <HAL_GetTick>
 8007334:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007336:	e00a      	b.n	800734e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007338:	f7fd f962 	bl	8004600 <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	f241 3288 	movw	r2, #5000	; 0x1388
 8007346:	4293      	cmp	r3, r2
 8007348:	d901      	bls.n	800734e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800734a:	2303      	movs	r3, #3
 800734c:	e0b5      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800734e:	4b3e      	ldr	r3, [pc, #248]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 8007350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007352:	f003 0302 	and.w	r3, r3, #2
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1ee      	bne.n	8007338 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	2b01      	cmp	r3, #1
 800735e:	d105      	bne.n	800736c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007360:	4b39      	ldr	r3, [pc, #228]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 8007362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007364:	4a38      	ldr	r2, [pc, #224]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 8007366:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800736a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	699b      	ldr	r3, [r3, #24]
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 80a1 	beq.w	80074b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007376:	4b34      	ldr	r3, [pc, #208]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	f003 030c 	and.w	r3, r3, #12
 800737e:	2b08      	cmp	r3, #8
 8007380:	d05c      	beq.n	800743c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	2b02      	cmp	r3, #2
 8007388:	d141      	bne.n	800740e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800738a:	4b31      	ldr	r3, [pc, #196]	; (8007450 <HAL_RCC_OscConfig+0x478>)
 800738c:	2200      	movs	r2, #0
 800738e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007390:	f7fd f936 	bl	8004600 <HAL_GetTick>
 8007394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007396:	e008      	b.n	80073aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007398:	f7fd f932 	bl	8004600 <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d901      	bls.n	80073aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073a6:	2303      	movs	r3, #3
 80073a8:	e087      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073aa:	4b27      	ldr	r3, [pc, #156]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1f0      	bne.n	8007398 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69da      	ldr	r2, [r3, #28]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a1b      	ldr	r3, [r3, #32]
 80073be:	431a      	orrs	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	019b      	lsls	r3, r3, #6
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073cc:	085b      	lsrs	r3, r3, #1
 80073ce:	3b01      	subs	r3, #1
 80073d0:	041b      	lsls	r3, r3, #16
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d8:	061b      	lsls	r3, r3, #24
 80073da:	491b      	ldr	r1, [pc, #108]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073e0:	4b1b      	ldr	r3, [pc, #108]	; (8007450 <HAL_RCC_OscConfig+0x478>)
 80073e2:	2201      	movs	r2, #1
 80073e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073e6:	f7fd f90b 	bl	8004600 <HAL_GetTick>
 80073ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073ec:	e008      	b.n	8007400 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073ee:	f7fd f907 	bl	8004600 <HAL_GetTick>
 80073f2:	4602      	mov	r2, r0
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	1ad3      	subs	r3, r2, r3
 80073f8:	2b02      	cmp	r3, #2
 80073fa:	d901      	bls.n	8007400 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e05c      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007400:	4b11      	ldr	r3, [pc, #68]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0f0      	beq.n	80073ee <HAL_RCC_OscConfig+0x416>
 800740c:	e054      	b.n	80074b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800740e:	4b10      	ldr	r3, [pc, #64]	; (8007450 <HAL_RCC_OscConfig+0x478>)
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007414:	f7fd f8f4 	bl	8004600 <HAL_GetTick>
 8007418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800741a:	e008      	b.n	800742e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800741c:	f7fd f8f0 	bl	8004600 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e045      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742e:	4b06      	ldr	r3, [pc, #24]	; (8007448 <HAL_RCC_OscConfig+0x470>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1f0      	bne.n	800741c <HAL_RCC_OscConfig+0x444>
 800743a:	e03d      	b.n	80074b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d107      	bne.n	8007454 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e038      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
 8007448:	40023800 	.word	0x40023800
 800744c:	40007000 	.word	0x40007000
 8007450:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007454:	4b1b      	ldr	r3, [pc, #108]	; (80074c4 <HAL_RCC_OscConfig+0x4ec>)
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	2b01      	cmp	r3, #1
 8007460:	d028      	beq.n	80074b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800746c:	429a      	cmp	r2, r3
 800746e:	d121      	bne.n	80074b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800747a:	429a      	cmp	r2, r3
 800747c:	d11a      	bne.n	80074b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007484:	4013      	ands	r3, r2
 8007486:	687a      	ldr	r2, [r7, #4]
 8007488:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800748a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800748c:	4293      	cmp	r3, r2
 800748e:	d111      	bne.n	80074b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	3b01      	subs	r3, #1
 800749e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d107      	bne.n	80074b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d001      	beq.n	80074b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e000      	b.n	80074ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074b8:	2300      	movs	r3, #0
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	3718      	adds	r7, #24
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
 80074c2:	bf00      	nop
 80074c4:	40023800 	.word	0x40023800

080074c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e0cc      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074dc:	4b68      	ldr	r3, [pc, #416]	; (8007680 <HAL_RCC_ClockConfig+0x1b8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0307 	and.w	r3, r3, #7
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d90c      	bls.n	8007504 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074ea:	4b65      	ldr	r3, [pc, #404]	; (8007680 <HAL_RCC_ClockConfig+0x1b8>)
 80074ec:	683a      	ldr	r2, [r7, #0]
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074f2:	4b63      	ldr	r3, [pc, #396]	; (8007680 <HAL_RCC_ClockConfig+0x1b8>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0307 	and.w	r3, r3, #7
 80074fa:	683a      	ldr	r2, [r7, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d001      	beq.n	8007504 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e0b8      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f003 0302 	and.w	r3, r3, #2
 800750c:	2b00      	cmp	r3, #0
 800750e:	d020      	beq.n	8007552 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f003 0304 	and.w	r3, r3, #4
 8007518:	2b00      	cmp	r3, #0
 800751a:	d005      	beq.n	8007528 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800751c:	4b59      	ldr	r3, [pc, #356]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	4a58      	ldr	r2, [pc, #352]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007522:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007526:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0308 	and.w	r3, r3, #8
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007534:	4b53      	ldr	r3, [pc, #332]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	4a52      	ldr	r2, [pc, #328]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800753a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800753e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007540:	4b50      	ldr	r3, [pc, #320]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	689b      	ldr	r3, [r3, #8]
 800754c:	494d      	ldr	r1, [pc, #308]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800754e:	4313      	orrs	r3, r2
 8007550:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d044      	beq.n	80075e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d107      	bne.n	8007576 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007566:	4b47      	ldr	r3, [pc, #284]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d119      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e07f      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d003      	beq.n	8007586 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007582:	2b03      	cmp	r3, #3
 8007584:	d107      	bne.n	8007596 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007586:	4b3f      	ldr	r3, [pc, #252]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d109      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	e06f      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007596:	4b3b      	ldr	r3, [pc, #236]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0302 	and.w	r3, r3, #2
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e067      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075a6:	4b37      	ldr	r3, [pc, #220]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f023 0203 	bic.w	r2, r3, #3
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	4934      	ldr	r1, [pc, #208]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 80075b4:	4313      	orrs	r3, r2
 80075b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075b8:	f7fd f822 	bl	8004600 <HAL_GetTick>
 80075bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075be:	e00a      	b.n	80075d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c0:	f7fd f81e 	bl	8004600 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d901      	bls.n	80075d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075d2:	2303      	movs	r3, #3
 80075d4:	e04f      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075d6:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f003 020c 	and.w	r2, r3, #12
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d1eb      	bne.n	80075c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075e8:	4b25      	ldr	r3, [pc, #148]	; (8007680 <HAL_RCC_ClockConfig+0x1b8>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0307 	and.w	r3, r3, #7
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d20c      	bcs.n	8007610 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f6:	4b22      	ldr	r3, [pc, #136]	; (8007680 <HAL_RCC_ClockConfig+0x1b8>)
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	b2d2      	uxtb	r2, r2
 80075fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075fe:	4b20      	ldr	r3, [pc, #128]	; (8007680 <HAL_RCC_ClockConfig+0x1b8>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f003 0307 	and.w	r3, r3, #7
 8007606:	683a      	ldr	r2, [r7, #0]
 8007608:	429a      	cmp	r2, r3
 800760a:	d001      	beq.n	8007610 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e032      	b.n	8007676 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0304 	and.w	r3, r3, #4
 8007618:	2b00      	cmp	r3, #0
 800761a:	d008      	beq.n	800762e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800761c:	4b19      	ldr	r3, [pc, #100]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	68db      	ldr	r3, [r3, #12]
 8007628:	4916      	ldr	r1, [pc, #88]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800762a:	4313      	orrs	r3, r2
 800762c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f003 0308 	and.w	r3, r3, #8
 8007636:	2b00      	cmp	r3, #0
 8007638:	d009      	beq.n	800764e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800763a:	4b12      	ldr	r3, [pc, #72]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	490e      	ldr	r1, [pc, #56]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 800764a:	4313      	orrs	r3, r2
 800764c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800764e:	f000 f821 	bl	8007694 <HAL_RCC_GetSysClockFreq>
 8007652:	4602      	mov	r2, r0
 8007654:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <HAL_RCC_ClockConfig+0x1bc>)
 8007656:	689b      	ldr	r3, [r3, #8]
 8007658:	091b      	lsrs	r3, r3, #4
 800765a:	f003 030f 	and.w	r3, r3, #15
 800765e:	490a      	ldr	r1, [pc, #40]	; (8007688 <HAL_RCC_ClockConfig+0x1c0>)
 8007660:	5ccb      	ldrb	r3, [r1, r3]
 8007662:	fa22 f303 	lsr.w	r3, r2, r3
 8007666:	4a09      	ldr	r2, [pc, #36]	; (800768c <HAL_RCC_ClockConfig+0x1c4>)
 8007668:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800766a:	4b09      	ldr	r3, [pc, #36]	; (8007690 <HAL_RCC_ClockConfig+0x1c8>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4618      	mov	r0, r3
 8007670:	f7fc ff82 	bl	8004578 <HAL_InitTick>

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3710      	adds	r7, #16
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	40023c00 	.word	0x40023c00
 8007684:	40023800 	.word	0x40023800
 8007688:	080117fc 	.word	0x080117fc
 800768c:	20000010 	.word	0x20000010
 8007690:	20000018 	.word	0x20000018

08007694 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007698:	b094      	sub	sp, #80	; 0x50
 800769a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800769c:	2300      	movs	r3, #0
 800769e:	647b      	str	r3, [r7, #68]	; 0x44
 80076a0:	2300      	movs	r3, #0
 80076a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076a4:	2300      	movs	r3, #0
 80076a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076ac:	4b79      	ldr	r3, [pc, #484]	; (8007894 <HAL_RCC_GetSysClockFreq+0x200>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 030c 	and.w	r3, r3, #12
 80076b4:	2b08      	cmp	r3, #8
 80076b6:	d00d      	beq.n	80076d4 <HAL_RCC_GetSysClockFreq+0x40>
 80076b8:	2b08      	cmp	r3, #8
 80076ba:	f200 80e1 	bhi.w	8007880 <HAL_RCC_GetSysClockFreq+0x1ec>
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d002      	beq.n	80076c8 <HAL_RCC_GetSysClockFreq+0x34>
 80076c2:	2b04      	cmp	r3, #4
 80076c4:	d003      	beq.n	80076ce <HAL_RCC_GetSysClockFreq+0x3a>
 80076c6:	e0db      	b.n	8007880 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076c8:	4b73      	ldr	r3, [pc, #460]	; (8007898 <HAL_RCC_GetSysClockFreq+0x204>)
 80076ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80076cc:	e0db      	b.n	8007886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076ce:	4b73      	ldr	r3, [pc, #460]	; (800789c <HAL_RCC_GetSysClockFreq+0x208>)
 80076d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80076d2:	e0d8      	b.n	8007886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076d4:	4b6f      	ldr	r3, [pc, #444]	; (8007894 <HAL_RCC_GetSysClockFreq+0x200>)
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076de:	4b6d      	ldr	r3, [pc, #436]	; (8007894 <HAL_RCC_GetSysClockFreq+0x200>)
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d063      	beq.n	80077b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076ea:	4b6a      	ldr	r3, [pc, #424]	; (8007894 <HAL_RCC_GetSysClockFreq+0x200>)
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	099b      	lsrs	r3, r3, #6
 80076f0:	2200      	movs	r2, #0
 80076f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80076f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80076f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076fc:	633b      	str	r3, [r7, #48]	; 0x30
 80076fe:	2300      	movs	r3, #0
 8007700:	637b      	str	r3, [r7, #52]	; 0x34
 8007702:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007706:	4622      	mov	r2, r4
 8007708:	462b      	mov	r3, r5
 800770a:	f04f 0000 	mov.w	r0, #0
 800770e:	f04f 0100 	mov.w	r1, #0
 8007712:	0159      	lsls	r1, r3, #5
 8007714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007718:	0150      	lsls	r0, r2, #5
 800771a:	4602      	mov	r2, r0
 800771c:	460b      	mov	r3, r1
 800771e:	4621      	mov	r1, r4
 8007720:	1a51      	subs	r1, r2, r1
 8007722:	6139      	str	r1, [r7, #16]
 8007724:	4629      	mov	r1, r5
 8007726:	eb63 0301 	sbc.w	r3, r3, r1
 800772a:	617b      	str	r3, [r7, #20]
 800772c:	f04f 0200 	mov.w	r2, #0
 8007730:	f04f 0300 	mov.w	r3, #0
 8007734:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007738:	4659      	mov	r1, fp
 800773a:	018b      	lsls	r3, r1, #6
 800773c:	4651      	mov	r1, sl
 800773e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007742:	4651      	mov	r1, sl
 8007744:	018a      	lsls	r2, r1, #6
 8007746:	4651      	mov	r1, sl
 8007748:	ebb2 0801 	subs.w	r8, r2, r1
 800774c:	4659      	mov	r1, fp
 800774e:	eb63 0901 	sbc.w	r9, r3, r1
 8007752:	f04f 0200 	mov.w	r2, #0
 8007756:	f04f 0300 	mov.w	r3, #0
 800775a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800775e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007766:	4690      	mov	r8, r2
 8007768:	4699      	mov	r9, r3
 800776a:	4623      	mov	r3, r4
 800776c:	eb18 0303 	adds.w	r3, r8, r3
 8007770:	60bb      	str	r3, [r7, #8]
 8007772:	462b      	mov	r3, r5
 8007774:	eb49 0303 	adc.w	r3, r9, r3
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	f04f 0200 	mov.w	r2, #0
 800777e:	f04f 0300 	mov.w	r3, #0
 8007782:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007786:	4629      	mov	r1, r5
 8007788:	024b      	lsls	r3, r1, #9
 800778a:	4621      	mov	r1, r4
 800778c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007790:	4621      	mov	r1, r4
 8007792:	024a      	lsls	r2, r1, #9
 8007794:	4610      	mov	r0, r2
 8007796:	4619      	mov	r1, r3
 8007798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800779a:	2200      	movs	r2, #0
 800779c:	62bb      	str	r3, [r7, #40]	; 0x28
 800779e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80077a4:	f7f8 fd64 	bl	8000270 <__aeabi_uldivmod>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4613      	mov	r3, r2
 80077ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077b0:	e058      	b.n	8007864 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077b2:	4b38      	ldr	r3, [pc, #224]	; (8007894 <HAL_RCC_GetSysClockFreq+0x200>)
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	099b      	lsrs	r3, r3, #6
 80077b8:	2200      	movs	r2, #0
 80077ba:	4618      	mov	r0, r3
 80077bc:	4611      	mov	r1, r2
 80077be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80077c2:	623b      	str	r3, [r7, #32]
 80077c4:	2300      	movs	r3, #0
 80077c6:	627b      	str	r3, [r7, #36]	; 0x24
 80077c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80077cc:	4642      	mov	r2, r8
 80077ce:	464b      	mov	r3, r9
 80077d0:	f04f 0000 	mov.w	r0, #0
 80077d4:	f04f 0100 	mov.w	r1, #0
 80077d8:	0159      	lsls	r1, r3, #5
 80077da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077de:	0150      	lsls	r0, r2, #5
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4641      	mov	r1, r8
 80077e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80077ea:	4649      	mov	r1, r9
 80077ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80077fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007800:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007804:	ebb2 040a 	subs.w	r4, r2, sl
 8007808:	eb63 050b 	sbc.w	r5, r3, fp
 800780c:	f04f 0200 	mov.w	r2, #0
 8007810:	f04f 0300 	mov.w	r3, #0
 8007814:	00eb      	lsls	r3, r5, #3
 8007816:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800781a:	00e2      	lsls	r2, r4, #3
 800781c:	4614      	mov	r4, r2
 800781e:	461d      	mov	r5, r3
 8007820:	4643      	mov	r3, r8
 8007822:	18e3      	adds	r3, r4, r3
 8007824:	603b      	str	r3, [r7, #0]
 8007826:	464b      	mov	r3, r9
 8007828:	eb45 0303 	adc.w	r3, r5, r3
 800782c:	607b      	str	r3, [r7, #4]
 800782e:	f04f 0200 	mov.w	r2, #0
 8007832:	f04f 0300 	mov.w	r3, #0
 8007836:	e9d7 4500 	ldrd	r4, r5, [r7]
 800783a:	4629      	mov	r1, r5
 800783c:	028b      	lsls	r3, r1, #10
 800783e:	4621      	mov	r1, r4
 8007840:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007844:	4621      	mov	r1, r4
 8007846:	028a      	lsls	r2, r1, #10
 8007848:	4610      	mov	r0, r2
 800784a:	4619      	mov	r1, r3
 800784c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800784e:	2200      	movs	r2, #0
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	61fa      	str	r2, [r7, #28]
 8007854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007858:	f7f8 fd0a 	bl	8000270 <__aeabi_uldivmod>
 800785c:	4602      	mov	r2, r0
 800785e:	460b      	mov	r3, r1
 8007860:	4613      	mov	r3, r2
 8007862:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007864:	4b0b      	ldr	r3, [pc, #44]	; (8007894 <HAL_RCC_GetSysClockFreq+0x200>)
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	0c1b      	lsrs	r3, r3, #16
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	3301      	adds	r3, #1
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007874:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007878:	fbb2 f3f3 	udiv	r3, r2, r3
 800787c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800787e:	e002      	b.n	8007886 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007880:	4b05      	ldr	r3, [pc, #20]	; (8007898 <HAL_RCC_GetSysClockFreq+0x204>)
 8007882:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007886:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007888:	4618      	mov	r0, r3
 800788a:	3750      	adds	r7, #80	; 0x50
 800788c:	46bd      	mov	sp, r7
 800788e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007892:	bf00      	nop
 8007894:	40023800 	.word	0x40023800
 8007898:	00f42400 	.word	0x00f42400
 800789c:	007a1200 	.word	0x007a1200

080078a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078a4:	4b03      	ldr	r3, [pc, #12]	; (80078b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80078a6:	681b      	ldr	r3, [r3, #0]
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	20000010 	.word	0x20000010

080078b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80078bc:	f7ff fff0 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 80078c0:	4602      	mov	r2, r0
 80078c2:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	0a9b      	lsrs	r3, r3, #10
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	4903      	ldr	r1, [pc, #12]	; (80078dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80078ce:	5ccb      	ldrb	r3, [r1, r3]
 80078d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	40023800 	.word	0x40023800
 80078dc:	0801180c 	.word	0x0801180c

080078e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80078e4:	f7ff ffdc 	bl	80078a0 <HAL_RCC_GetHCLKFreq>
 80078e8:	4602      	mov	r2, r0
 80078ea:	4b05      	ldr	r3, [pc, #20]	; (8007900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80078ec:	689b      	ldr	r3, [r3, #8]
 80078ee:	0b5b      	lsrs	r3, r3, #13
 80078f0:	f003 0307 	and.w	r3, r3, #7
 80078f4:	4903      	ldr	r1, [pc, #12]	; (8007904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80078f6:	5ccb      	ldrb	r3, [r1, r3]
 80078f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	40023800 	.word	0x40023800
 8007904:	0801180c 	.word	0x0801180c

08007908 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b082      	sub	sp, #8
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d101      	bne.n	800791a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007916:	2301      	movs	r3, #1
 8007918:	e07b      	b.n	8007a12 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b00      	cmp	r3, #0
 8007920:	d108      	bne.n	8007934 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800792a:	d009      	beq.n	8007940 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	61da      	str	r2, [r3, #28]
 8007932:	e005      	b.n	8007940 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2200      	movs	r2, #0
 8007944:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fc f94a 	bl	8003bf4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007976:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	695b      	ldr	r3, [r3, #20]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	431a      	orrs	r2, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	699b      	ldr	r3, [r3, #24]
 80079ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079b0:	431a      	orrs	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	69db      	ldr	r3, [r3, #28]
 80079b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6a1b      	ldr	r3, [r3, #32]
 80079c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c4:	ea42 0103 	orr.w	r1, r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	0c1b      	lsrs	r3, r3, #16
 80079de:	f003 0104 	and.w	r1, r3, #4
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	f003 0210 	and.w	r2, r3, #16
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	430a      	orrs	r2, r1
 80079f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	69da      	ldr	r2, [r3, #28]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a00:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007a10:	2300      	movs	r3, #0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}

08007a1a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007a1a:	b580      	push	{r7, lr}
 8007a1c:	b082      	sub	sp, #8
 8007a1e:	af00      	add	r7, sp, #0
 8007a20:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e041      	b.n	8007ab0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d106      	bne.n	8007a46 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7fc f91f 	bl	8003c84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2202      	movs	r2, #2
 8007a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	3304      	adds	r3, #4
 8007a56:	4619      	mov	r1, r3
 8007a58:	4610      	mov	r0, r2
 8007a5a:	f000 fd71 	bl	8008540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2201      	movs	r2, #1
 8007a92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d001      	beq.n	8007ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e04e      	b.n	8007b6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2202      	movs	r2, #2
 8007ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	68da      	ldr	r2, [r3, #12]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f042 0201 	orr.w	r2, r2, #1
 8007ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a23      	ldr	r2, [pc, #140]	; (8007b7c <HAL_TIM_Base_Start_IT+0xc4>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d022      	beq.n	8007b38 <HAL_TIM_Base_Start_IT+0x80>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007afa:	d01d      	beq.n	8007b38 <HAL_TIM_Base_Start_IT+0x80>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <HAL_TIM_Base_Start_IT+0xc8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d018      	beq.n	8007b38 <HAL_TIM_Base_Start_IT+0x80>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1e      	ldr	r2, [pc, #120]	; (8007b84 <HAL_TIM_Base_Start_IT+0xcc>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d013      	beq.n	8007b38 <HAL_TIM_Base_Start_IT+0x80>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a1c      	ldr	r2, [pc, #112]	; (8007b88 <HAL_TIM_Base_Start_IT+0xd0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d00e      	beq.n	8007b38 <HAL_TIM_Base_Start_IT+0x80>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1b      	ldr	r2, [pc, #108]	; (8007b8c <HAL_TIM_Base_Start_IT+0xd4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d009      	beq.n	8007b38 <HAL_TIM_Base_Start_IT+0x80>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a19      	ldr	r2, [pc, #100]	; (8007b90 <HAL_TIM_Base_Start_IT+0xd8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d004      	beq.n	8007b38 <HAL_TIM_Base_Start_IT+0x80>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a18      	ldr	r2, [pc, #96]	; (8007b94 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d111      	bne.n	8007b5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b06      	cmp	r3, #6
 8007b48:	d010      	beq.n	8007b6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	f042 0201 	orr.w	r2, r2, #1
 8007b58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b5a:	e007      	b.n	8007b6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f042 0201 	orr.w	r2, r2, #1
 8007b6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b6c:	2300      	movs	r3, #0
}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	40010000 	.word	0x40010000
 8007b80:	40000400 	.word	0x40000400
 8007b84:	40000800 	.word	0x40000800
 8007b88:	40000c00 	.word	0x40000c00
 8007b8c:	40010400 	.word	0x40010400
 8007b90:	40014000 	.word	0x40014000
 8007b94:	40001800 	.word	0x40001800

08007b98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e041      	b.n	8007c2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d106      	bne.n	8007bc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f839 	bl	8007c36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	3304      	adds	r3, #4
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f000 fcb2 	bl	8008540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2201      	movs	r2, #1
 8007c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c2c:	2300      	movs	r3, #0
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
	...

08007c4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d109      	bne.n	8007c70 <HAL_TIM_PWM_Start+0x24>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c62:	b2db      	uxtb	r3, r3
 8007c64:	2b01      	cmp	r3, #1
 8007c66:	bf14      	ite	ne
 8007c68:	2301      	movne	r3, #1
 8007c6a:	2300      	moveq	r3, #0
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	e022      	b.n	8007cb6 <HAL_TIM_PWM_Start+0x6a>
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b04      	cmp	r3, #4
 8007c74:	d109      	bne.n	8007c8a <HAL_TIM_PWM_Start+0x3e>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	bf14      	ite	ne
 8007c82:	2301      	movne	r3, #1
 8007c84:	2300      	moveq	r3, #0
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	e015      	b.n	8007cb6 <HAL_TIM_PWM_Start+0x6a>
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	2b08      	cmp	r3, #8
 8007c8e:	d109      	bne.n	8007ca4 <HAL_TIM_PWM_Start+0x58>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c96:	b2db      	uxtb	r3, r3
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	bf14      	ite	ne
 8007c9c:	2301      	movne	r3, #1
 8007c9e:	2300      	moveq	r3, #0
 8007ca0:	b2db      	uxtb	r3, r3
 8007ca2:	e008      	b.n	8007cb6 <HAL_TIM_PWM_Start+0x6a>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	bf14      	ite	ne
 8007cb0:	2301      	movne	r3, #1
 8007cb2:	2300      	moveq	r3, #0
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007cba:	2301      	movs	r3, #1
 8007cbc:	e07c      	b.n	8007db8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d104      	bne.n	8007cce <HAL_TIM_PWM_Start+0x82>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2202      	movs	r2, #2
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ccc:	e013      	b.n	8007cf6 <HAL_TIM_PWM_Start+0xaa>
 8007cce:	683b      	ldr	r3, [r7, #0]
 8007cd0:	2b04      	cmp	r3, #4
 8007cd2:	d104      	bne.n	8007cde <HAL_TIM_PWM_Start+0x92>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cdc:	e00b      	b.n	8007cf6 <HAL_TIM_PWM_Start+0xaa>
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	2b08      	cmp	r3, #8
 8007ce2:	d104      	bne.n	8007cee <HAL_TIM_PWM_Start+0xa2>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cec:	e003      	b.n	8007cf6 <HAL_TIM_PWM_Start+0xaa>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	6839      	ldr	r1, [r7, #0]
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 ff99 	bl	8008c36 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a2d      	ldr	r2, [pc, #180]	; (8007dc0 <HAL_TIM_PWM_Start+0x174>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d004      	beq.n	8007d18 <HAL_TIM_PWM_Start+0xcc>
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a2c      	ldr	r2, [pc, #176]	; (8007dc4 <HAL_TIM_PWM_Start+0x178>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d101      	bne.n	8007d1c <HAL_TIM_PWM_Start+0xd0>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e000      	b.n	8007d1e <HAL_TIM_PWM_Start+0xd2>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d007      	beq.n	8007d32 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a22      	ldr	r2, [pc, #136]	; (8007dc0 <HAL_TIM_PWM_Start+0x174>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d022      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d44:	d01d      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a1f      	ldr	r2, [pc, #124]	; (8007dc8 <HAL_TIM_PWM_Start+0x17c>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d018      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a1d      	ldr	r2, [pc, #116]	; (8007dcc <HAL_TIM_PWM_Start+0x180>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d013      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a1c      	ldr	r2, [pc, #112]	; (8007dd0 <HAL_TIM_PWM_Start+0x184>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d00e      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a16      	ldr	r2, [pc, #88]	; (8007dc4 <HAL_TIM_PWM_Start+0x178>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d009      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a18      	ldr	r2, [pc, #96]	; (8007dd4 <HAL_TIM_PWM_Start+0x188>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d004      	beq.n	8007d82 <HAL_TIM_PWM_Start+0x136>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a16      	ldr	r2, [pc, #88]	; (8007dd8 <HAL_TIM_PWM_Start+0x18c>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d111      	bne.n	8007da6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f003 0307 	and.w	r3, r3, #7
 8007d8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b06      	cmp	r3, #6
 8007d92:	d010      	beq.n	8007db6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0201 	orr.w	r2, r2, #1
 8007da2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007da4:	e007      	b.n	8007db6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f042 0201 	orr.w	r2, r2, #1
 8007db4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	40010000 	.word	0x40010000
 8007dc4:	40010400 	.word	0x40010400
 8007dc8:	40000400 	.word	0x40000400
 8007dcc:	40000800 	.word	0x40000800
 8007dd0:	40000c00 	.word	0x40000c00
 8007dd4:	40014000 	.word	0x40014000
 8007dd8:	40001800 	.word	0x40001800

08007ddc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2200      	movs	r2, #0
 8007dec:	6839      	ldr	r1, [r7, #0]
 8007dee:	4618      	mov	r0, r3
 8007df0:	f000 ff21 	bl	8008c36 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a2e      	ldr	r2, [pc, #184]	; (8007eb4 <HAL_TIM_PWM_Stop+0xd8>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d004      	beq.n	8007e08 <HAL_TIM_PWM_Stop+0x2c>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a2d      	ldr	r2, [pc, #180]	; (8007eb8 <HAL_TIM_PWM_Stop+0xdc>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d101      	bne.n	8007e0c <HAL_TIM_PWM_Stop+0x30>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e000      	b.n	8007e0e <HAL_TIM_PWM_Stop+0x32>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d017      	beq.n	8007e42 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6a1a      	ldr	r2, [r3, #32]
 8007e18:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10f      	bne.n	8007e42 <HAL_TIM_PWM_Stop+0x66>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	6a1a      	ldr	r2, [r3, #32]
 8007e28:	f240 4344 	movw	r3, #1092	; 0x444
 8007e2c:	4013      	ands	r3, r2
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d107      	bne.n	8007e42 <HAL_TIM_PWM_Stop+0x66>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e40:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	6a1a      	ldr	r2, [r3, #32]
 8007e48:	f241 1311 	movw	r3, #4369	; 0x1111
 8007e4c:	4013      	ands	r3, r2
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10f      	bne.n	8007e72 <HAL_TIM_PWM_Stop+0x96>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6a1a      	ldr	r2, [r3, #32]
 8007e58:	f240 4344 	movw	r3, #1092	; 0x444
 8007e5c:	4013      	ands	r3, r2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d107      	bne.n	8007e72 <HAL_TIM_PWM_Stop+0x96>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	681a      	ldr	r2, [r3, #0]
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f022 0201 	bic.w	r2, r2, #1
 8007e70:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d104      	bne.n	8007e82 <HAL_TIM_PWM_Stop+0xa6>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e80:	e013      	b.n	8007eaa <HAL_TIM_PWM_Stop+0xce>
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	2b04      	cmp	r3, #4
 8007e86:	d104      	bne.n	8007e92 <HAL_TIM_PWM_Stop+0xb6>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e90:	e00b      	b.n	8007eaa <HAL_TIM_PWM_Stop+0xce>
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b08      	cmp	r3, #8
 8007e96:	d104      	bne.n	8007ea2 <HAL_TIM_PWM_Stop+0xc6>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2201      	movs	r2, #1
 8007e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ea0:	e003      	b.n	8007eaa <HAL_TIM_PWM_Stop+0xce>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007eaa:	2300      	movs	r3, #0
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	40010000 	.word	0x40010000
 8007eb8:	40010400 	.word	0x40010400

08007ebc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d101      	bne.n	8007ed0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e041      	b.n	8007f54 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d106      	bne.n	8007eea <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2200      	movs	r2, #0
 8007ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f7fb ff71 	bl	8003dcc <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2202      	movs	r2, #2
 8007eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681a      	ldr	r2, [r3, #0]
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	4619      	mov	r1, r3
 8007efc:	4610      	mov	r0, r2
 8007efe:	f000 fb1f 	bl	8008540 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0208 	bic.w	r2, r2, #8
 8007f10:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	6819      	ldr	r1, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	683a      	ldr	r2, [r7, #0]
 8007f1e:	430a      	orrs	r2, r1
 8007f20:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2201      	movs	r2, #1
 8007f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2201      	movs	r2, #1
 8007f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007f52:	2300      	movs	r3, #0
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d122      	bne.n	8007fb8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f003 0302 	and.w	r3, r3, #2
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d11b      	bne.n	8007fb8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f06f 0202 	mvn.w	r2, #2
 8007f88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	f003 0303 	and.w	r3, r3, #3
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fab9 	bl	8008516 <HAL_TIM_IC_CaptureCallback>
 8007fa4:	e005      	b.n	8007fb2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 faab 	bl	8008502 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7f9 faeb 	bl	8001588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	691b      	ldr	r3, [r3, #16]
 8007fbe:	f003 0304 	and.w	r3, r3, #4
 8007fc2:	2b04      	cmp	r3, #4
 8007fc4:	d122      	bne.n	800800c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f003 0304 	and.w	r3, r3, #4
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	d11b      	bne.n	800800c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f06f 0204 	mvn.w	r2, #4
 8007fdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2202      	movs	r2, #2
 8007fe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699b      	ldr	r3, [r3, #24]
 8007fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f000 fa8f 	bl	8008516 <HAL_TIM_IC_CaptureCallback>
 8007ff8:	e005      	b.n	8008006 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f000 fa81 	bl	8008502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008000:	6878      	ldr	r0, [r7, #4]
 8008002:	f7f9 fac1 	bl	8001588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	f003 0308 	and.w	r3, r3, #8
 8008016:	2b08      	cmp	r3, #8
 8008018:	d122      	bne.n	8008060 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	f003 0308 	and.w	r3, r3, #8
 8008024:	2b08      	cmp	r3, #8
 8008026:	d11b      	bne.n	8008060 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f06f 0208 	mvn.w	r2, #8
 8008030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2204      	movs	r2, #4
 8008036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	f003 0303 	and.w	r3, r3, #3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d003      	beq.n	800804e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fa65 	bl	8008516 <HAL_TIM_IC_CaptureCallback>
 800804c:	e005      	b.n	800805a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 fa57 	bl	8008502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	f7f9 fa97 	bl	8001588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	691b      	ldr	r3, [r3, #16]
 8008066:	f003 0310 	and.w	r3, r3, #16
 800806a:	2b10      	cmp	r3, #16
 800806c:	d122      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	f003 0310 	and.w	r3, r3, #16
 8008078:	2b10      	cmp	r3, #16
 800807a:	d11b      	bne.n	80080b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f06f 0210 	mvn.w	r2, #16
 8008084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2208      	movs	r2, #8
 800808a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa3b 	bl	8008516 <HAL_TIM_IC_CaptureCallback>
 80080a0:	e005      	b.n	80080ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 fa2d 	bl	8008502 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7f9 fa6d 	bl	8001588 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d10e      	bne.n	80080e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	68db      	ldr	r3, [r3, #12]
 80080c8:	f003 0301 	and.w	r3, r3, #1
 80080cc:	2b01      	cmp	r3, #1
 80080ce:	d107      	bne.n	80080e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f06f 0201 	mvn.w	r2, #1
 80080d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f7f9 ff74 	bl	8001fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080ea:	2b80      	cmp	r3, #128	; 0x80
 80080ec:	d10e      	bne.n	800810c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f8:	2b80      	cmp	r3, #128	; 0x80
 80080fa:	d107      	bne.n	800810c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f000 fe92 	bl	8008e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	691b      	ldr	r3, [r3, #16]
 8008112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008116:	2b40      	cmp	r3, #64	; 0x40
 8008118:	d10e      	bne.n	8008138 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008124:	2b40      	cmp	r3, #64	; 0x40
 8008126:	d107      	bne.n	8008138 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f000 f9f9 	bl	800852a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	f003 0320 	and.w	r3, r3, #32
 8008142:	2b20      	cmp	r3, #32
 8008144:	d10e      	bne.n	8008164 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	f003 0320 	and.w	r3, r3, #32
 8008150:	2b20      	cmp	r3, #32
 8008152:	d107      	bne.n	8008164 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f06f 0220 	mvn.w	r2, #32
 800815c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800815e:	6878      	ldr	r0, [r7, #4]
 8008160:	f000 fe5c 	bl	8008e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008164:	bf00      	nop
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008178:	2300      	movs	r3, #0
 800817a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008182:	2b01      	cmp	r3, #1
 8008184:	d101      	bne.n	800818a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008186:	2302      	movs	r3, #2
 8008188:	e0ae      	b.n	80082e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b0c      	cmp	r3, #12
 8008196:	f200 809f 	bhi.w	80082d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800819a:	a201      	add	r2, pc, #4	; (adr r2, 80081a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800819c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081a0:	080081d5 	.word	0x080081d5
 80081a4:	080082d9 	.word	0x080082d9
 80081a8:	080082d9 	.word	0x080082d9
 80081ac:	080082d9 	.word	0x080082d9
 80081b0:	08008215 	.word	0x08008215
 80081b4:	080082d9 	.word	0x080082d9
 80081b8:	080082d9 	.word	0x080082d9
 80081bc:	080082d9 	.word	0x080082d9
 80081c0:	08008257 	.word	0x08008257
 80081c4:	080082d9 	.word	0x080082d9
 80081c8:	080082d9 	.word	0x080082d9
 80081cc:	080082d9 	.word	0x080082d9
 80081d0:	08008297 	.word	0x08008297
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68b9      	ldr	r1, [r7, #8]
 80081da:	4618      	mov	r0, r3
 80081dc:	f000 fa50 	bl	8008680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	699a      	ldr	r2, [r3, #24]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0208 	orr.w	r2, r2, #8
 80081ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	699a      	ldr	r2, [r3, #24]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0204 	bic.w	r2, r2, #4
 80081fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	6999      	ldr	r1, [r3, #24]
 8008206:	68bb      	ldr	r3, [r7, #8]
 8008208:	691a      	ldr	r2, [r3, #16]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	430a      	orrs	r2, r1
 8008210:	619a      	str	r2, [r3, #24]
      break;
 8008212:	e064      	b.n	80082de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68b9      	ldr	r1, [r7, #8]
 800821a:	4618      	mov	r0, r3
 800821c:	f000 faa0 	bl	8008760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	699a      	ldr	r2, [r3, #24]
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800822e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699a      	ldr	r2, [r3, #24]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800823e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6999      	ldr	r1, [r3, #24]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	691b      	ldr	r3, [r3, #16]
 800824a:	021a      	lsls	r2, r3, #8
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	430a      	orrs	r2, r1
 8008252:	619a      	str	r2, [r3, #24]
      break;
 8008254:	e043      	b.n	80082de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68b9      	ldr	r1, [r7, #8]
 800825c:	4618      	mov	r0, r3
 800825e:	f000 faf5 	bl	800884c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	69da      	ldr	r2, [r3, #28]
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f042 0208 	orr.w	r2, r2, #8
 8008270:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	69da      	ldr	r2, [r3, #28]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f022 0204 	bic.w	r2, r2, #4
 8008280:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	69d9      	ldr	r1, [r3, #28]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	691a      	ldr	r2, [r3, #16]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	430a      	orrs	r2, r1
 8008292:	61da      	str	r2, [r3, #28]
      break;
 8008294:	e023      	b.n	80082de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68b9      	ldr	r1, [r7, #8]
 800829c:	4618      	mov	r0, r3
 800829e:	f000 fb49 	bl	8008934 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	69da      	ldr	r2, [r3, #28]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	69da      	ldr	r2, [r3, #28]
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	69d9      	ldr	r1, [r3, #28]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	691b      	ldr	r3, [r3, #16]
 80082cc:	021a      	lsls	r2, r3, #8
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	430a      	orrs	r2, r1
 80082d4:	61da      	str	r2, [r3, #28]
      break;
 80082d6:	e002      	b.n	80082de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	75fb      	strb	r3, [r7, #23]
      break;
 80082dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3718      	adds	r7, #24
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008304:	2b01      	cmp	r3, #1
 8008306:	d101      	bne.n	800830c <HAL_TIM_ConfigClockSource+0x1c>
 8008308:	2302      	movs	r3, #2
 800830a:	e0b4      	b.n	8008476 <HAL_TIM_ConfigClockSource+0x186>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2202      	movs	r2, #2
 8008318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	689b      	ldr	r3, [r3, #8]
 8008322:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800832a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008332:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008344:	d03e      	beq.n	80083c4 <HAL_TIM_ConfigClockSource+0xd4>
 8008346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800834a:	f200 8087 	bhi.w	800845c <HAL_TIM_ConfigClockSource+0x16c>
 800834e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008352:	f000 8086 	beq.w	8008462 <HAL_TIM_ConfigClockSource+0x172>
 8008356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800835a:	d87f      	bhi.n	800845c <HAL_TIM_ConfigClockSource+0x16c>
 800835c:	2b70      	cmp	r3, #112	; 0x70
 800835e:	d01a      	beq.n	8008396 <HAL_TIM_ConfigClockSource+0xa6>
 8008360:	2b70      	cmp	r3, #112	; 0x70
 8008362:	d87b      	bhi.n	800845c <HAL_TIM_ConfigClockSource+0x16c>
 8008364:	2b60      	cmp	r3, #96	; 0x60
 8008366:	d050      	beq.n	800840a <HAL_TIM_ConfigClockSource+0x11a>
 8008368:	2b60      	cmp	r3, #96	; 0x60
 800836a:	d877      	bhi.n	800845c <HAL_TIM_ConfigClockSource+0x16c>
 800836c:	2b50      	cmp	r3, #80	; 0x50
 800836e:	d03c      	beq.n	80083ea <HAL_TIM_ConfigClockSource+0xfa>
 8008370:	2b50      	cmp	r3, #80	; 0x50
 8008372:	d873      	bhi.n	800845c <HAL_TIM_ConfigClockSource+0x16c>
 8008374:	2b40      	cmp	r3, #64	; 0x40
 8008376:	d058      	beq.n	800842a <HAL_TIM_ConfigClockSource+0x13a>
 8008378:	2b40      	cmp	r3, #64	; 0x40
 800837a:	d86f      	bhi.n	800845c <HAL_TIM_ConfigClockSource+0x16c>
 800837c:	2b30      	cmp	r3, #48	; 0x30
 800837e:	d064      	beq.n	800844a <HAL_TIM_ConfigClockSource+0x15a>
 8008380:	2b30      	cmp	r3, #48	; 0x30
 8008382:	d86b      	bhi.n	800845c <HAL_TIM_ConfigClockSource+0x16c>
 8008384:	2b20      	cmp	r3, #32
 8008386:	d060      	beq.n	800844a <HAL_TIM_ConfigClockSource+0x15a>
 8008388:	2b20      	cmp	r3, #32
 800838a:	d867      	bhi.n	800845c <HAL_TIM_ConfigClockSource+0x16c>
 800838c:	2b00      	cmp	r3, #0
 800838e:	d05c      	beq.n	800844a <HAL_TIM_ConfigClockSource+0x15a>
 8008390:	2b10      	cmp	r3, #16
 8008392:	d05a      	beq.n	800844a <HAL_TIM_ConfigClockSource+0x15a>
 8008394:	e062      	b.n	800845c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6818      	ldr	r0, [r3, #0]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	6899      	ldr	r1, [r3, #8]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685a      	ldr	r2, [r3, #4]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	68db      	ldr	r3, [r3, #12]
 80083a6:	f000 fc26 	bl	8008bf6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	689b      	ldr	r3, [r3, #8]
 80083b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80083b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68ba      	ldr	r2, [r7, #8]
 80083c0:	609a      	str	r2, [r3, #8]
      break;
 80083c2:	e04f      	b.n	8008464 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6818      	ldr	r0, [r3, #0]
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	6899      	ldr	r1, [r3, #8]
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	685a      	ldr	r2, [r3, #4]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f000 fc0f 	bl	8008bf6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	689a      	ldr	r2, [r3, #8]
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80083e6:	609a      	str	r2, [r3, #8]
      break;
 80083e8:	e03c      	b.n	8008464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6818      	ldr	r0, [r3, #0]
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	6859      	ldr	r1, [r3, #4]
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	461a      	mov	r2, r3
 80083f8:	f000 fb83 	bl	8008b02 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	2150      	movs	r1, #80	; 0x50
 8008402:	4618      	mov	r0, r3
 8008404:	f000 fbdc 	bl	8008bc0 <TIM_ITRx_SetConfig>
      break;
 8008408:	e02c      	b.n	8008464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	6859      	ldr	r1, [r3, #4]
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	461a      	mov	r2, r3
 8008418:	f000 fba2 	bl	8008b60 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2160      	movs	r1, #96	; 0x60
 8008422:	4618      	mov	r0, r3
 8008424:	f000 fbcc 	bl	8008bc0 <TIM_ITRx_SetConfig>
      break;
 8008428:	e01c      	b.n	8008464 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	6859      	ldr	r1, [r3, #4]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	461a      	mov	r2, r3
 8008438:	f000 fb63 	bl	8008b02 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	2140      	movs	r1, #64	; 0x40
 8008442:	4618      	mov	r0, r3
 8008444:	f000 fbbc 	bl	8008bc0 <TIM_ITRx_SetConfig>
      break;
 8008448:	e00c      	b.n	8008464 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4619      	mov	r1, r3
 8008454:	4610      	mov	r0, r2
 8008456:	f000 fbb3 	bl	8008bc0 <TIM_ITRx_SetConfig>
      break;
 800845a:	e003      	b.n	8008464 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	73fb      	strb	r3, [r7, #15]
      break;
 8008460:	e000      	b.n	8008464 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008462:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2201      	movs	r2, #1
 8008468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008474:	7bfb      	ldrb	r3, [r7, #15]
}
 8008476:	4618      	mov	r0, r3
 8008478:	3710      	adds	r7, #16
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
 8008486:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800848e:	2b01      	cmp	r3, #1
 8008490:	d101      	bne.n	8008496 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008492:	2302      	movs	r3, #2
 8008494:	e031      	b.n	80084fa <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2201      	movs	r2, #1
 800849a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2202      	movs	r2, #2
 80084a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 fa99 	bl	80089e0 <TIM_SlaveTimer_SetConfig>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d009      	beq.n	80084c8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e018      	b.n	80084fa <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68da      	ldr	r2, [r3, #12]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084d6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68da      	ldr	r2, [r3, #12]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80084e6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3708      	adds	r7, #8
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008502:	b480      	push	{r7}
 8008504:	b083      	sub	sp, #12
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008540:	b480      	push	{r7}
 8008542:	b085      	sub	sp, #20
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	4a40      	ldr	r2, [pc, #256]	; (8008654 <TIM_Base_SetConfig+0x114>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d013      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800855e:	d00f      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a3d      	ldr	r2, [pc, #244]	; (8008658 <TIM_Base_SetConfig+0x118>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d00b      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a3c      	ldr	r2, [pc, #240]	; (800865c <TIM_Base_SetConfig+0x11c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d007      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a3b      	ldr	r2, [pc, #236]	; (8008660 <TIM_Base_SetConfig+0x120>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d003      	beq.n	8008580 <TIM_Base_SetConfig+0x40>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a3a      	ldr	r2, [pc, #232]	; (8008664 <TIM_Base_SetConfig+0x124>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d108      	bne.n	8008592 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008586:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	4313      	orrs	r3, r2
 8008590:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a2f      	ldr	r2, [pc, #188]	; (8008654 <TIM_Base_SetConfig+0x114>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d02b      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085a0:	d027      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	4a2c      	ldr	r2, [pc, #176]	; (8008658 <TIM_Base_SetConfig+0x118>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d023      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4a2b      	ldr	r2, [pc, #172]	; (800865c <TIM_Base_SetConfig+0x11c>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d01f      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a2a      	ldr	r2, [pc, #168]	; (8008660 <TIM_Base_SetConfig+0x120>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d01b      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a29      	ldr	r2, [pc, #164]	; (8008664 <TIM_Base_SetConfig+0x124>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d017      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4a28      	ldr	r2, [pc, #160]	; (8008668 <TIM_Base_SetConfig+0x128>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d013      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a27      	ldr	r2, [pc, #156]	; (800866c <TIM_Base_SetConfig+0x12c>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d00f      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a26      	ldr	r2, [pc, #152]	; (8008670 <TIM_Base_SetConfig+0x130>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00b      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a25      	ldr	r2, [pc, #148]	; (8008674 <TIM_Base_SetConfig+0x134>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d007      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a24      	ldr	r2, [pc, #144]	; (8008678 <TIM_Base_SetConfig+0x138>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d003      	beq.n	80085f2 <TIM_Base_SetConfig+0xb2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a23      	ldr	r2, [pc, #140]	; (800867c <TIM_Base_SetConfig+0x13c>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d108      	bne.n	8008604 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	68fa      	ldr	r2, [r7, #12]
 8008600:	4313      	orrs	r3, r2
 8008602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	695b      	ldr	r3, [r3, #20]
 800860e:	4313      	orrs	r3, r2
 8008610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68fa      	ldr	r2, [r7, #12]
 8008616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689a      	ldr	r2, [r3, #8]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4a0a      	ldr	r2, [pc, #40]	; (8008654 <TIM_Base_SetConfig+0x114>)
 800862c:	4293      	cmp	r3, r2
 800862e:	d003      	beq.n	8008638 <TIM_Base_SetConfig+0xf8>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a0c      	ldr	r2, [pc, #48]	; (8008664 <TIM_Base_SetConfig+0x124>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d103      	bne.n	8008640 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	691a      	ldr	r2, [r3, #16]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	615a      	str	r2, [r3, #20]
}
 8008646:	bf00      	nop
 8008648:	3714      	adds	r7, #20
 800864a:	46bd      	mov	sp, r7
 800864c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop
 8008654:	40010000 	.word	0x40010000
 8008658:	40000400 	.word	0x40000400
 800865c:	40000800 	.word	0x40000800
 8008660:	40000c00 	.word	0x40000c00
 8008664:	40010400 	.word	0x40010400
 8008668:	40014000 	.word	0x40014000
 800866c:	40014400 	.word	0x40014400
 8008670:	40014800 	.word	0x40014800
 8008674:	40001800 	.word	0x40001800
 8008678:	40001c00 	.word	0x40001c00
 800867c:	40002000 	.word	0x40002000

08008680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008680:	b480      	push	{r7}
 8008682:	b087      	sub	sp, #28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
 8008688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a1b      	ldr	r3, [r3, #32]
 800868e:	f023 0201 	bic.w	r2, r3, #1
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6a1b      	ldr	r3, [r3, #32]
 800869a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	699b      	ldr	r3, [r3, #24]
 80086a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f023 0303 	bic.w	r3, r3, #3
 80086b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	68fa      	ldr	r2, [r7, #12]
 80086be:	4313      	orrs	r3, r2
 80086c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086c2:	697b      	ldr	r3, [r7, #20]
 80086c4:	f023 0302 	bic.w	r3, r3, #2
 80086c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a20      	ldr	r2, [pc, #128]	; (8008758 <TIM_OC1_SetConfig+0xd8>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d003      	beq.n	80086e4 <TIM_OC1_SetConfig+0x64>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a1f      	ldr	r2, [pc, #124]	; (800875c <TIM_OC1_SetConfig+0xdc>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d10c      	bne.n	80086fe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80086e4:	697b      	ldr	r3, [r7, #20]
 80086e6:	f023 0308 	bic.w	r3, r3, #8
 80086ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f023 0304 	bic.w	r3, r3, #4
 80086fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	4a15      	ldr	r2, [pc, #84]	; (8008758 <TIM_OC1_SetConfig+0xd8>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d003      	beq.n	800870e <TIM_OC1_SetConfig+0x8e>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a14      	ldr	r2, [pc, #80]	; (800875c <TIM_OC1_SetConfig+0xdc>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d111      	bne.n	8008732 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800871c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	695b      	ldr	r3, [r3, #20]
 8008722:	693a      	ldr	r2, [r7, #16]
 8008724:	4313      	orrs	r3, r2
 8008726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	4313      	orrs	r3, r2
 8008730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	693a      	ldr	r2, [r7, #16]
 8008736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	685a      	ldr	r2, [r3, #4]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	697a      	ldr	r2, [r7, #20]
 800874a:	621a      	str	r2, [r3, #32]
}
 800874c:	bf00      	nop
 800874e:	371c      	adds	r7, #28
 8008750:	46bd      	mov	sp, r7
 8008752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008756:	4770      	bx	lr
 8008758:	40010000 	.word	0x40010000
 800875c:	40010400 	.word	0x40010400

08008760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008760:	b480      	push	{r7}
 8008762:	b087      	sub	sp, #28
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a1b      	ldr	r3, [r3, #32]
 800876e:	f023 0210 	bic.w	r2, r3, #16
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6a1b      	ldr	r3, [r3, #32]
 800877a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	021b      	lsls	r3, r3, #8
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4313      	orrs	r3, r2
 80087a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f023 0320 	bic.w	r3, r3, #32
 80087aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	689b      	ldr	r3, [r3, #8]
 80087b0:	011b      	lsls	r3, r3, #4
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a22      	ldr	r2, [pc, #136]	; (8008844 <TIM_OC2_SetConfig+0xe4>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d003      	beq.n	80087c8 <TIM_OC2_SetConfig+0x68>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a21      	ldr	r2, [pc, #132]	; (8008848 <TIM_OC2_SetConfig+0xe8>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d10d      	bne.n	80087e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	011b      	lsls	r3, r3, #4
 80087d6:	697a      	ldr	r2, [r7, #20]
 80087d8:	4313      	orrs	r3, r2
 80087da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a17      	ldr	r2, [pc, #92]	; (8008844 <TIM_OC2_SetConfig+0xe4>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d003      	beq.n	80087f4 <TIM_OC2_SetConfig+0x94>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a16      	ldr	r2, [pc, #88]	; (8008848 <TIM_OC2_SetConfig+0xe8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d113      	bne.n	800881c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80087fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	695b      	ldr	r3, [r3, #20]
 8008808:	009b      	lsls	r3, r3, #2
 800880a:	693a      	ldr	r2, [r7, #16]
 800880c:	4313      	orrs	r3, r2
 800880e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	699b      	ldr	r3, [r3, #24]
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	4313      	orrs	r3, r2
 800881a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68fa      	ldr	r2, [r7, #12]
 8008826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	697a      	ldr	r2, [r7, #20]
 8008834:	621a      	str	r2, [r3, #32]
}
 8008836:	bf00      	nop
 8008838:	371c      	adds	r7, #28
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	40010000 	.word	0x40010000
 8008848:	40010400 	.word	0x40010400

0800884c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800884c:	b480      	push	{r7}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6a1b      	ldr	r3, [r3, #32]
 8008866:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	685b      	ldr	r3, [r3, #4]
 800886c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	f023 0303 	bic.w	r3, r3, #3
 8008882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	4313      	orrs	r3, r2
 800888c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	021b      	lsls	r3, r3, #8
 800889c:	697a      	ldr	r2, [r7, #20]
 800889e:	4313      	orrs	r3, r2
 80088a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a21      	ldr	r2, [pc, #132]	; (800892c <TIM_OC3_SetConfig+0xe0>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d003      	beq.n	80088b2 <TIM_OC3_SetConfig+0x66>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a20      	ldr	r2, [pc, #128]	; (8008930 <TIM_OC3_SetConfig+0xe4>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d10d      	bne.n	80088ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	021b      	lsls	r3, r3, #8
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	4313      	orrs	r3, r2
 80088c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4a16      	ldr	r2, [pc, #88]	; (800892c <TIM_OC3_SetConfig+0xe0>)
 80088d2:	4293      	cmp	r3, r2
 80088d4:	d003      	beq.n	80088de <TIM_OC3_SetConfig+0x92>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	4a15      	ldr	r2, [pc, #84]	; (8008930 <TIM_OC3_SetConfig+0xe4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d113      	bne.n	8008906 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80088ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	695b      	ldr	r3, [r3, #20]
 80088f2:	011b      	lsls	r3, r3, #4
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	4313      	orrs	r3, r2
 80088f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	011b      	lsls	r3, r3, #4
 8008900:	693a      	ldr	r2, [r7, #16]
 8008902:	4313      	orrs	r3, r2
 8008904:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	693a      	ldr	r2, [r7, #16]
 800890a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68fa      	ldr	r2, [r7, #12]
 8008910:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	697a      	ldr	r2, [r7, #20]
 800891e:	621a      	str	r2, [r3, #32]
}
 8008920:	bf00      	nop
 8008922:	371c      	adds	r7, #28
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr
 800892c:	40010000 	.word	0x40010000
 8008930:	40010400 	.word	0x40010400

08008934 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008934:	b480      	push	{r7}
 8008936:	b087      	sub	sp, #28
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
 800893c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6a1b      	ldr	r3, [r3, #32]
 8008942:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	685b      	ldr	r3, [r3, #4]
 8008954:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	69db      	ldr	r3, [r3, #28]
 800895a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800896a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	021b      	lsls	r3, r3, #8
 8008972:	68fa      	ldr	r2, [r7, #12]
 8008974:	4313      	orrs	r3, r2
 8008976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800897e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	031b      	lsls	r3, r3, #12
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	4313      	orrs	r3, r2
 800898a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	4a12      	ldr	r2, [pc, #72]	; (80089d8 <TIM_OC4_SetConfig+0xa4>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d003      	beq.n	800899c <TIM_OC4_SetConfig+0x68>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a11      	ldr	r2, [pc, #68]	; (80089dc <TIM_OC4_SetConfig+0xa8>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d109      	bne.n	80089b0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80089a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	695b      	ldr	r3, [r3, #20]
 80089a8:	019b      	lsls	r3, r3, #6
 80089aa:	697a      	ldr	r2, [r7, #20]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	697a      	ldr	r2, [r7, #20]
 80089b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	685a      	ldr	r2, [r3, #4]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	621a      	str	r2, [r3, #32]
}
 80089ca:	bf00      	nop
 80089cc:	371c      	adds	r7, #28
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop
 80089d8:	40010000 	.word	0x40010000
 80089dc:	40010400 	.word	0x40010400

080089e0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089ea:	2300      	movs	r3, #0
 80089ec:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	693a      	ldr	r2, [r7, #16]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	f023 0307 	bic.w	r3, r3, #7
 8008a0e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	693a      	ldr	r2, [r7, #16]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	693a      	ldr	r2, [r7, #16]
 8008a20:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	2b70      	cmp	r3, #112	; 0x70
 8008a28:	d01a      	beq.n	8008a60 <TIM_SlaveTimer_SetConfig+0x80>
 8008a2a:	2b70      	cmp	r3, #112	; 0x70
 8008a2c:	d860      	bhi.n	8008af0 <TIM_SlaveTimer_SetConfig+0x110>
 8008a2e:	2b60      	cmp	r3, #96	; 0x60
 8008a30:	d054      	beq.n	8008adc <TIM_SlaveTimer_SetConfig+0xfc>
 8008a32:	2b60      	cmp	r3, #96	; 0x60
 8008a34:	d85c      	bhi.n	8008af0 <TIM_SlaveTimer_SetConfig+0x110>
 8008a36:	2b50      	cmp	r3, #80	; 0x50
 8008a38:	d046      	beq.n	8008ac8 <TIM_SlaveTimer_SetConfig+0xe8>
 8008a3a:	2b50      	cmp	r3, #80	; 0x50
 8008a3c:	d858      	bhi.n	8008af0 <TIM_SlaveTimer_SetConfig+0x110>
 8008a3e:	2b40      	cmp	r3, #64	; 0x40
 8008a40:	d019      	beq.n	8008a76 <TIM_SlaveTimer_SetConfig+0x96>
 8008a42:	2b40      	cmp	r3, #64	; 0x40
 8008a44:	d854      	bhi.n	8008af0 <TIM_SlaveTimer_SetConfig+0x110>
 8008a46:	2b30      	cmp	r3, #48	; 0x30
 8008a48:	d055      	beq.n	8008af6 <TIM_SlaveTimer_SetConfig+0x116>
 8008a4a:	2b30      	cmp	r3, #48	; 0x30
 8008a4c:	d850      	bhi.n	8008af0 <TIM_SlaveTimer_SetConfig+0x110>
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	d051      	beq.n	8008af6 <TIM_SlaveTimer_SetConfig+0x116>
 8008a52:	2b20      	cmp	r3, #32
 8008a54:	d84c      	bhi.n	8008af0 <TIM_SlaveTimer_SetConfig+0x110>
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d04d      	beq.n	8008af6 <TIM_SlaveTimer_SetConfig+0x116>
 8008a5a:	2b10      	cmp	r3, #16
 8008a5c:	d04b      	beq.n	8008af6 <TIM_SlaveTimer_SetConfig+0x116>
 8008a5e:	e047      	b.n	8008af0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	68d9      	ldr	r1, [r3, #12]
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	689a      	ldr	r2, [r3, #8]
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	f000 f8c1 	bl	8008bf6 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008a74:	e040      	b.n	8008af8 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b05      	cmp	r3, #5
 8008a7c:	d101      	bne.n	8008a82 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e03b      	b.n	8008afa <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	6a1b      	ldr	r3, [r3, #32]
 8008a88:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	6a1a      	ldr	r2, [r3, #32]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f022 0201 	bic.w	r2, r2, #1
 8008a98:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008aa8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	691b      	ldr	r3, [r3, #16]
 8008aae:	011b      	lsls	r3, r3, #4
 8008ab0:	68ba      	ldr	r2, [r7, #8]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	68ba      	ldr	r2, [r7, #8]
 8008abc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	621a      	str	r2, [r3, #32]
      break;
 8008ac6:	e017      	b.n	8008af8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6818      	ldr	r0, [r3, #0]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	6899      	ldr	r1, [r3, #8]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	461a      	mov	r2, r3
 8008ad6:	f000 f814 	bl	8008b02 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008ada:	e00d      	b.n	8008af8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6818      	ldr	r0, [r3, #0]
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	6899      	ldr	r1, [r3, #8]
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	691b      	ldr	r3, [r3, #16]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	f000 f839 	bl	8008b60 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008aee:	e003      	b.n	8008af8 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008af0:	2301      	movs	r3, #1
 8008af2:	75fb      	strb	r3, [r7, #23]
      break;
 8008af4:	e000      	b.n	8008af8 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8008af6:	bf00      	nop
  }

  return status;
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3718      	adds	r7, #24
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}

08008b02 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b087      	sub	sp, #28
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	60f8      	str	r0, [r7, #12]
 8008b0a:	60b9      	str	r1, [r7, #8]
 8008b0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	6a1b      	ldr	r3, [r3, #32]
 8008b12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6a1b      	ldr	r3, [r3, #32]
 8008b18:	f023 0201 	bic.w	r2, r3, #1
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	011b      	lsls	r3, r3, #4
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	4313      	orrs	r3, r2
 8008b36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f023 030a 	bic.w	r3, r3, #10
 8008b3e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	697a      	ldr	r2, [r7, #20]
 8008b52:	621a      	str	r2, [r3, #32]
}
 8008b54:	bf00      	nop
 8008b56:	371c      	adds	r7, #28
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b60:	b480      	push	{r7}
 8008b62:	b087      	sub	sp, #28
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	60f8      	str	r0, [r7, #12]
 8008b68:	60b9      	str	r1, [r7, #8]
 8008b6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	6a1b      	ldr	r3, [r3, #32]
 8008b70:	f023 0210 	bic.w	r2, r3, #16
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	699b      	ldr	r3, [r3, #24]
 8008b7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a1b      	ldr	r3, [r3, #32]
 8008b82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	031b      	lsls	r3, r3, #12
 8008b90:	697a      	ldr	r2, [r7, #20]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	011b      	lsls	r3, r3, #4
 8008ba2:	693a      	ldr	r2, [r7, #16]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	697a      	ldr	r2, [r7, #20]
 8008bac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	693a      	ldr	r2, [r7, #16]
 8008bb2:	621a      	str	r2, [r3, #32]
}
 8008bb4:	bf00      	nop
 8008bb6:	371c      	adds	r7, #28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b085      	sub	sp, #20
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008bd8:	683a      	ldr	r2, [r7, #0]
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	f043 0307 	orr.w	r3, r3, #7
 8008be2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	609a      	str	r2, [r3, #8]
}
 8008bea:	bf00      	nop
 8008bec:	3714      	adds	r7, #20
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf4:	4770      	bx	lr

08008bf6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b087      	sub	sp, #28
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	60f8      	str	r0, [r7, #12]
 8008bfe:	60b9      	str	r1, [r7, #8]
 8008c00:	607a      	str	r2, [r7, #4]
 8008c02:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c10:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	021a      	lsls	r2, r3, #8
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	4313      	orrs	r3, r2
 8008c22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	697a      	ldr	r2, [r7, #20]
 8008c28:	609a      	str	r2, [r3, #8]
}
 8008c2a:	bf00      	nop
 8008c2c:	371c      	adds	r7, #28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr

08008c36 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008c36:	b480      	push	{r7}
 8008c38:	b087      	sub	sp, #28
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008c42:	68bb      	ldr	r3, [r7, #8]
 8008c44:	f003 031f 	and.w	r3, r3, #31
 8008c48:	2201      	movs	r2, #1
 8008c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6a1a      	ldr	r2, [r3, #32]
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	43db      	mvns	r3, r3
 8008c58:	401a      	ands	r2, r3
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	6a1a      	ldr	r2, [r3, #32]
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	f003 031f 	and.w	r3, r3, #31
 8008c68:	6879      	ldr	r1, [r7, #4]
 8008c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c6e:	431a      	orrs	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	621a      	str	r2, [r3, #32]
}
 8008c74:	bf00      	nop
 8008c76:	371c      	adds	r7, #28
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
 8008c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d101      	bne.n	8008c98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c94:	2302      	movs	r3, #2
 8008c96:	e05a      	b.n	8008d4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cbe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	68fa      	ldr	r2, [r7, #12]
 8008cd0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a21      	ldr	r2, [pc, #132]	; (8008d5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d022      	beq.n	8008d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce4:	d01d      	beq.n	8008d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a1d      	ldr	r2, [pc, #116]	; (8008d60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d018      	beq.n	8008d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a1b      	ldr	r2, [pc, #108]	; (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d013      	beq.n	8008d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a1a      	ldr	r2, [pc, #104]	; (8008d68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d00e      	beq.n	8008d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a18      	ldr	r2, [pc, #96]	; (8008d6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d009      	beq.n	8008d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a17      	ldr	r2, [pc, #92]	; (8008d70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d004      	beq.n	8008d22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a15      	ldr	r2, [pc, #84]	; (8008d74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d10c      	bne.n	8008d3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	68ba      	ldr	r2, [r7, #8]
 8008d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2201      	movs	r2, #1
 8008d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3714      	adds	r7, #20
 8008d52:	46bd      	mov	sp, r7
 8008d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	40010000 	.word	0x40010000
 8008d60:	40000400 	.word	0x40000400
 8008d64:	40000800 	.word	0x40000800
 8008d68:	40000c00 	.word	0x40000c00
 8008d6c:	40010400 	.word	0x40010400
 8008d70:	40014000 	.word	0x40014000
 8008d74:	40001800 	.word	0x40001800

08008d78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	d101      	bne.n	8008d94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008d90:	2302      	movs	r3, #2
 8008d92:	e03d      	b.n	8008e10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	68db      	ldr	r3, [r3, #12]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	689b      	ldr	r3, [r3, #8]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4313      	orrs	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	4313      	orrs	r3, r2
 8008de0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	695b      	ldr	r3, [r3, #20]
 8008dec:	4313      	orrs	r3, r2
 8008dee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	69db      	ldr	r3, [r3, #28]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68fa      	ldr	r2, [r7, #12]
 8008e04:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e0e:	2300      	movs	r3, #0
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b083      	sub	sp, #12
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e38:	bf00      	nop
 8008e3a:	370c      	adds	r7, #12
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b082      	sub	sp, #8
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e52:	2301      	movs	r3, #1
 8008e54:	e03f      	b.n	8008ed6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d106      	bne.n	8008e70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2200      	movs	r2, #0
 8008e66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7fb f832 	bl	8003ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2224      	movs	r2, #36	; 0x24
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 ffc3 	bl	8009e14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	691a      	ldr	r2, [r3, #16]
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	695a      	ldr	r2, [r3, #20]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008eac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ebc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2220      	movs	r2, #32
 8008ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2220      	movs	r2, #32
 8008ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b08c      	sub	sp, #48	; 0x30
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	2b20      	cmp	r3, #32
 8008ef8:	d165      	bne.n	8008fc6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d002      	beq.n	8008f06 <HAL_UART_Transmit_DMA+0x26>
 8008f00:	88fb      	ldrh	r3, [r7, #6]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d101      	bne.n	8008f0a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e05e      	b.n	8008fc8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d101      	bne.n	8008f18 <HAL_UART_Transmit_DMA+0x38>
 8008f14:	2302      	movs	r3, #2
 8008f16:	e057      	b.n	8008fc8 <HAL_UART_Transmit_DMA+0xe8>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008f20:	68ba      	ldr	r2, [r7, #8]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	88fa      	ldrh	r2, [r7, #6]
 8008f2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	88fa      	ldrh	r2, [r7, #6]
 8008f30:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	2221      	movs	r2, #33	; 0x21
 8008f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f44:	4a22      	ldr	r2, [pc, #136]	; (8008fd0 <HAL_UART_Transmit_DMA+0xf0>)
 8008f46:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4c:	4a21      	ldr	r2, [pc, #132]	; (8008fd4 <HAL_UART_Transmit_DMA+0xf4>)
 8008f4e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f54:	4a20      	ldr	r2, [pc, #128]	; (8008fd8 <HAL_UART_Transmit_DMA+0xf8>)
 8008f56:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008f60:	f107 0308 	add.w	r3, r7, #8
 8008f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6c:	6819      	ldr	r1, [r3, #0]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	3304      	adds	r3, #4
 8008f74:	461a      	mov	r2, r3
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	f7fb fd32 	bl	80049e0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f84:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	3314      	adds	r3, #20
 8008f94:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f96:	69bb      	ldr	r3, [r7, #24]
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	3314      	adds	r3, #20
 8008fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fae:	627a      	str	r2, [r7, #36]	; 0x24
 8008fb0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	6a39      	ldr	r1, [r7, #32]
 8008fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e5      	bne.n	8008f8e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	e000      	b.n	8008fc8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008fc6:	2302      	movs	r3, #2
  }
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3730      	adds	r7, #48	; 0x30
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	080096ad 	.word	0x080096ad
 8008fd4:	08009747 	.word	0x08009747
 8008fd8:	080098bf 	.word	0x080098bf

08008fdc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	4613      	mov	r3, r2
 8008fe8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b20      	cmp	r3, #32
 8008ff4:	d11d      	bne.n	8009032 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <HAL_UART_Receive_DMA+0x26>
 8008ffc:	88fb      	ldrh	r3, [r7, #6]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d101      	bne.n	8009006 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e016      	b.n	8009034 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800900c:	2b01      	cmp	r3, #1
 800900e:	d101      	bne.n	8009014 <HAL_UART_Receive_DMA+0x38>
 8009010:	2302      	movs	r3, #2
 8009012:	e00f      	b.n	8009034 <HAL_UART_Receive_DMA+0x58>
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	2201      	movs	r2, #1
 8009018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	461a      	mov	r2, r3
 8009026:	68b9      	ldr	r1, [r7, #8]
 8009028:	68f8      	ldr	r0, [r7, #12]
 800902a:	f000 fc93 	bl	8009954 <UART_Start_Receive_DMA>
 800902e:	4603      	mov	r3, r0
 8009030:	e000      	b.n	8009034 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009032:	2302      	movs	r3, #2
  }
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}

0800903c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b090      	sub	sp, #64	; 0x40
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009044:	2300      	movs	r3, #0
 8009046:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	695b      	ldr	r3, [r3, #20]
 800904e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009052:	2b80      	cmp	r3, #128	; 0x80
 8009054:	bf0c      	ite	eq
 8009056:	2301      	moveq	r3, #1
 8009058:	2300      	movne	r3, #0
 800905a:	b2db      	uxtb	r3, r3
 800905c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b21      	cmp	r3, #33	; 0x21
 8009068:	d128      	bne.n	80090bc <HAL_UART_DMAStop+0x80>
 800906a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800906c:	2b00      	cmp	r3, #0
 800906e:	d025      	beq.n	80090bc <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3314      	adds	r3, #20
 8009076:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907a:	e853 3f00 	ldrex	r3, [r3]
 800907e:	623b      	str	r3, [r7, #32]
   return(result);
 8009080:	6a3b      	ldr	r3, [r7, #32]
 8009082:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009086:	63bb      	str	r3, [r7, #56]	; 0x38
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3314      	adds	r3, #20
 800908e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009090:	633a      	str	r2, [r7, #48]	; 0x30
 8009092:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009096:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009098:	e841 2300 	strex	r3, r2, [r1]
 800909c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800909e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e5      	bne.n	8009070 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d004      	beq.n	80090b6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fb fced 	bl	8004a90 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fcea 	bl	8009a90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	695b      	ldr	r3, [r3, #20]
 80090c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090c6:	2b40      	cmp	r3, #64	; 0x40
 80090c8:	bf0c      	ite	eq
 80090ca:	2301      	moveq	r3, #1
 80090cc:	2300      	movne	r3, #0
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090d8:	b2db      	uxtb	r3, r3
 80090da:	2b22      	cmp	r3, #34	; 0x22
 80090dc:	d128      	bne.n	8009130 <HAL_UART_DMAStop+0xf4>
 80090de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d025      	beq.n	8009130 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3314      	adds	r3, #20
 80090ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	e853 3f00 	ldrex	r3, [r3]
 80090f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090fa:	637b      	str	r3, [r7, #52]	; 0x34
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	3314      	adds	r3, #20
 8009102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009104:	61fa      	str	r2, [r7, #28]
 8009106:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	69b9      	ldr	r1, [r7, #24]
 800910a:	69fa      	ldr	r2, [r7, #28]
 800910c:	e841 2300 	strex	r3, r2, [r1]
 8009110:	617b      	str	r3, [r7, #20]
   return(result);
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e5      	bne.n	80090e4 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911c:	2b00      	cmp	r3, #0
 800911e:	d004      	beq.n	800912a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009124:	4618      	mov	r0, r3
 8009126:	f7fb fcb3 	bl	8004a90 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fcd8 	bl	8009ae0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3740      	adds	r7, #64	; 0x40
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
	...

0800913c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b0ba      	sub	sp, #232	; 0xe8
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009162:	2300      	movs	r3, #0
 8009164:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009168:	2300      	movs	r3, #0
 800916a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800916e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009172:	f003 030f 	and.w	r3, r3, #15
 8009176:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800917a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10f      	bne.n	80091a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009186:	f003 0320 	and.w	r3, r3, #32
 800918a:	2b00      	cmp	r3, #0
 800918c:	d009      	beq.n	80091a2 <HAL_UART_IRQHandler+0x66>
 800918e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009192:	f003 0320 	and.w	r3, r3, #32
 8009196:	2b00      	cmp	r3, #0
 8009198:	d003      	beq.n	80091a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fd7f 	bl	8009c9e <UART_Receive_IT>
      return;
 80091a0:	e256      	b.n	8009650 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80091a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 80de 	beq.w	8009368 <HAL_UART_IRQHandler+0x22c>
 80091ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091b0:	f003 0301 	and.w	r3, r3, #1
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d106      	bne.n	80091c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80091b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f000 80d1 	beq.w	8009368 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ca:	f003 0301 	and.w	r3, r3, #1
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d00b      	beq.n	80091ea <HAL_UART_IRQHandler+0xae>
 80091d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d005      	beq.n	80091ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e2:	f043 0201 	orr.w	r2, r3, #1
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ee:	f003 0304 	and.w	r3, r3, #4
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00b      	beq.n	800920e <HAL_UART_IRQHandler+0xd2>
 80091f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80091fa:	f003 0301 	and.w	r3, r3, #1
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d005      	beq.n	800920e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009206:	f043 0202 	orr.w	r2, r3, #2
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800920e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009212:	f003 0302 	and.w	r3, r3, #2
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00b      	beq.n	8009232 <HAL_UART_IRQHandler+0xf6>
 800921a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800921e:	f003 0301 	and.w	r3, r3, #1
 8009222:	2b00      	cmp	r3, #0
 8009224:	d005      	beq.n	8009232 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800922a:	f043 0204 	orr.w	r2, r3, #4
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009236:	f003 0308 	and.w	r3, r3, #8
 800923a:	2b00      	cmp	r3, #0
 800923c:	d011      	beq.n	8009262 <HAL_UART_IRQHandler+0x126>
 800923e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009242:	f003 0320 	and.w	r3, r3, #32
 8009246:	2b00      	cmp	r3, #0
 8009248:	d105      	bne.n	8009256 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800924a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800924e:	f003 0301 	and.w	r3, r3, #1
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800925a:	f043 0208 	orr.w	r2, r3, #8
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009266:	2b00      	cmp	r3, #0
 8009268:	f000 81ed 	beq.w	8009646 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800926c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009270:	f003 0320 	and.w	r3, r3, #32
 8009274:	2b00      	cmp	r3, #0
 8009276:	d008      	beq.n	800928a <HAL_UART_IRQHandler+0x14e>
 8009278:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800927c:	f003 0320 	and.w	r3, r3, #32
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 fd0a 	bl	8009c9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	695b      	ldr	r3, [r3, #20]
 8009290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009294:	2b40      	cmp	r3, #64	; 0x40
 8009296:	bf0c      	ite	eq
 8009298:	2301      	moveq	r3, #1
 800929a:	2300      	movne	r3, #0
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a6:	f003 0308 	and.w	r3, r3, #8
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d103      	bne.n	80092b6 <HAL_UART_IRQHandler+0x17a>
 80092ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d04f      	beq.n	8009356 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fc12 	bl	8009ae0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c6:	2b40      	cmp	r3, #64	; 0x40
 80092c8:	d141      	bne.n	800934e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	3314      	adds	r3, #20
 80092d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80092e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80092e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	3314      	adds	r3, #20
 80092f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80092f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80092fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009302:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009306:	e841 2300 	strex	r3, r2, [r1]
 800930a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800930e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1d9      	bne.n	80092ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800931a:	2b00      	cmp	r3, #0
 800931c:	d013      	beq.n	8009346 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009322:	4a7d      	ldr	r2, [pc, #500]	; (8009518 <HAL_UART_IRQHandler+0x3dc>)
 8009324:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800932a:	4618      	mov	r0, r3
 800932c:	f7fb fc20 	bl	8004b70 <HAL_DMA_Abort_IT>
 8009330:	4603      	mov	r3, r0
 8009332:	2b00      	cmp	r3, #0
 8009334:	d016      	beq.n	8009364 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800933a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009340:	4610      	mov	r0, r2
 8009342:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009344:	e00e      	b.n	8009364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 f99a 	bl	8009680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800934c:	e00a      	b.n	8009364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 f996 	bl	8009680 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009354:	e006      	b.n	8009364 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f992 	bl	8009680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009362:	e170      	b.n	8009646 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009364:	bf00      	nop
    return;
 8009366:	e16e      	b.n	8009646 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936c:	2b01      	cmp	r3, #1
 800936e:	f040 814a 	bne.w	8009606 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009372:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009376:	f003 0310 	and.w	r3, r3, #16
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 8143 	beq.w	8009606 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009384:	f003 0310 	and.w	r3, r3, #16
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 813c 	beq.w	8009606 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800938e:	2300      	movs	r3, #0
 8009390:	60bb      	str	r3, [r7, #8]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	60bb      	str	r3, [r7, #8]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	60bb      	str	r3, [r7, #8]
 80093a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	695b      	ldr	r3, [r3, #20]
 80093aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093ae:	2b40      	cmp	r3, #64	; 0x40
 80093b0:	f040 80b4 	bne.w	800951c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80093c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f000 8140 	beq.w	800964a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80093ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093d2:	429a      	cmp	r2, r3
 80093d4:	f080 8139 	bcs.w	800964a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80093de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e4:	69db      	ldr	r3, [r3, #28]
 80093e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093ea:	f000 8088 	beq.w	80094fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	330c      	adds	r3, #12
 80093f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80093fc:	e853 3f00 	ldrex	r3, [r3]
 8009400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800940c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	330c      	adds	r3, #12
 8009416:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800941a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800941e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009422:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009426:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800942a:	e841 2300 	strex	r3, r2, [r1]
 800942e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009432:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1d9      	bne.n	80093ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	3314      	adds	r3, #20
 8009440:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009444:	e853 3f00 	ldrex	r3, [r3]
 8009448:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800944a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800944c:	f023 0301 	bic.w	r3, r3, #1
 8009450:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	3314      	adds	r3, #20
 800945a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800945e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009462:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009466:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800946a:	e841 2300 	strex	r3, r2, [r1]
 800946e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1e1      	bne.n	800943a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	3314      	adds	r3, #20
 800947c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009480:	e853 3f00 	ldrex	r3, [r3]
 8009484:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800948c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3314      	adds	r3, #20
 8009496:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800949a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800949c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80094a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80094a2:	e841 2300 	strex	r3, r2, [r1]
 80094a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80094a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1e3      	bne.n	8009476 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	330c      	adds	r3, #12
 80094c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80094c6:	e853 3f00 	ldrex	r3, [r3]
 80094ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80094cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094ce:	f023 0310 	bic.w	r3, r3, #16
 80094d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	330c      	adds	r3, #12
 80094dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80094e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80094e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094e8:	e841 2300 	strex	r3, r2, [r1]
 80094ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d1e3      	bne.n	80094bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094f8:	4618      	mov	r0, r3
 80094fa:	f7fb fac9 	bl	8004a90 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009506:	b29b      	uxth	r3, r3
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	b29b      	uxth	r3, r3
 800950c:	4619      	mov	r1, r3
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 f8c0 	bl	8009694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009514:	e099      	b.n	800964a <HAL_UART_IRQHandler+0x50e>
 8009516:	bf00      	nop
 8009518:	08009ba7 	.word	0x08009ba7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009524:	b29b      	uxth	r3, r3
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009530:	b29b      	uxth	r3, r3
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 808b 	beq.w	800964e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009538:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800953c:	2b00      	cmp	r3, #0
 800953e:	f000 8086 	beq.w	800964e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	330c      	adds	r3, #12
 8009548:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800954c:	e853 3f00 	ldrex	r3, [r3]
 8009550:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009554:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009558:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	330c      	adds	r3, #12
 8009562:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009566:	647a      	str	r2, [r7, #68]	; 0x44
 8009568:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800956c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800956e:	e841 2300 	strex	r3, r2, [r1]
 8009572:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009576:	2b00      	cmp	r3, #0
 8009578:	d1e3      	bne.n	8009542 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	3314      	adds	r3, #20
 8009580:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009584:	e853 3f00 	ldrex	r3, [r3]
 8009588:	623b      	str	r3, [r7, #32]
   return(result);
 800958a:	6a3b      	ldr	r3, [r7, #32]
 800958c:	f023 0301 	bic.w	r3, r3, #1
 8009590:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	3314      	adds	r3, #20
 800959a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800959e:	633a      	str	r2, [r7, #48]	; 0x30
 80095a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80095a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095a6:	e841 2300 	strex	r3, r2, [r1]
 80095aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80095ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1e3      	bne.n	800957a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2220      	movs	r2, #32
 80095b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2200      	movs	r2, #0
 80095be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	330c      	adds	r3, #12
 80095c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	e853 3f00 	ldrex	r3, [r3]
 80095ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f023 0310 	bic.w	r3, r3, #16
 80095d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	330c      	adds	r3, #12
 80095e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80095e4:	61fa      	str	r2, [r7, #28]
 80095e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095e8:	69b9      	ldr	r1, [r7, #24]
 80095ea:	69fa      	ldr	r2, [r7, #28]
 80095ec:	e841 2300 	strex	r3, r2, [r1]
 80095f0:	617b      	str	r3, [r7, #20]
   return(result);
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d1e3      	bne.n	80095c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80095f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80095fc:	4619      	mov	r1, r3
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f848 	bl	8009694 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009604:	e023      	b.n	800964e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800960a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800960e:	2b00      	cmp	r3, #0
 8009610:	d009      	beq.n	8009626 <HAL_UART_IRQHandler+0x4ea>
 8009612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800961a:	2b00      	cmp	r3, #0
 800961c:	d003      	beq.n	8009626 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 fad5 	bl	8009bce <UART_Transmit_IT>
    return;
 8009624:	e014      	b.n	8009650 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800962a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00e      	beq.n	8009650 <HAL_UART_IRQHandler+0x514>
 8009632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963a:	2b00      	cmp	r3, #0
 800963c:	d008      	beq.n	8009650 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fb15 	bl	8009c6e <UART_EndTransmit_IT>
    return;
 8009644:	e004      	b.n	8009650 <HAL_UART_IRQHandler+0x514>
    return;
 8009646:	bf00      	nop
 8009648:	e002      	b.n	8009650 <HAL_UART_IRQHandler+0x514>
      return;
 800964a:	bf00      	nop
 800964c:	e000      	b.n	8009650 <HAL_UART_IRQHandler+0x514>
      return;
 800964e:	bf00      	nop
  }
}
 8009650:	37e8      	adds	r7, #232	; 0xe8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}
 8009656:	bf00      	nop

08009658 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009658:	b480      	push	{r7}
 800965a:	b083      	sub	sp, #12
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8009660:	bf00      	nop
 8009662:	370c      	adds	r7, #12
 8009664:	46bd      	mov	sp, r7
 8009666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966a:	4770      	bx	lr

0800966c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b090      	sub	sp, #64	; 0x40
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d137      	bne.n	8009738 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80096c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096ca:	2200      	movs	r2, #0
 80096cc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3314      	adds	r3, #20
 80096d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	623b      	str	r3, [r7, #32]
   return(result);
 80096de:	6a3b      	ldr	r3, [r7, #32]
 80096e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80096e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80096e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	3314      	adds	r3, #20
 80096ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096ee:	633a      	str	r2, [r7, #48]	; 0x30
 80096f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80096f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80096fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e5      	bne.n	80096ce <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009702:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	330c      	adds	r3, #12
 8009708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	60fb      	str	r3, [r7, #12]
   return(result);
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009718:	637b      	str	r3, [r7, #52]	; 0x34
 800971a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	330c      	adds	r3, #12
 8009720:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009722:	61fa      	str	r2, [r7, #28]
 8009724:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	69b9      	ldr	r1, [r7, #24]
 8009728:	69fa      	ldr	r2, [r7, #28]
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	617b      	str	r3, [r7, #20]
   return(result);
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e5      	bne.n	8009702 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009736:	e002      	b.n	800973e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009738:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800973a:	f7fa fd89 	bl	8004250 <HAL_UART_TxCpltCallback>
}
 800973e:	bf00      	nop
 8009740:	3740      	adds	r7, #64	; 0x40
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009752:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009754:	68f8      	ldr	r0, [r7, #12]
 8009756:	f7ff ff7f 	bl	8009658 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800975a:	bf00      	nop
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}

08009762 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009762:	b580      	push	{r7, lr}
 8009764:	b09c      	sub	sp, #112	; 0x70
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977a:	2b00      	cmp	r3, #0
 800977c:	d172      	bne.n	8009864 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800977e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009780:	2200      	movs	r2, #0
 8009782:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	330c      	adds	r3, #12
 800978a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800978e:	e853 3f00 	ldrex	r3, [r3]
 8009792:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009796:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800979a:	66bb      	str	r3, [r7, #104]	; 0x68
 800979c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	330c      	adds	r3, #12
 80097a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80097a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80097aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80097ac:	e841 2300 	strex	r3, r2, [r1]
 80097b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80097b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1e5      	bne.n	8009784 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	3314      	adds	r3, #20
 80097be:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c2:	e853 3f00 	ldrex	r3, [r3]
 80097c6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097ca:	f023 0301 	bic.w	r3, r3, #1
 80097ce:	667b      	str	r3, [r7, #100]	; 0x64
 80097d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	3314      	adds	r3, #20
 80097d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80097d8:	647a      	str	r2, [r7, #68]	; 0x44
 80097da:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097e0:	e841 2300 	strex	r3, r2, [r1]
 80097e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d1e5      	bne.n	80097b8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3314      	adds	r3, #20
 80097f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f6:	e853 3f00 	ldrex	r3, [r3]
 80097fa:	623b      	str	r3, [r7, #32]
   return(result);
 80097fc:	6a3b      	ldr	r3, [r7, #32]
 80097fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009802:	663b      	str	r3, [r7, #96]	; 0x60
 8009804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3314      	adds	r3, #20
 800980a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800980c:	633a      	str	r2, [r7, #48]	; 0x30
 800980e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009810:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009812:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009814:	e841 2300 	strex	r3, r2, [r1]
 8009818:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981c:	2b00      	cmp	r3, #0
 800981e:	d1e5      	bne.n	80097ec <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009822:	2220      	movs	r2, #32
 8009824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009828:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800982a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982c:	2b01      	cmp	r3, #1
 800982e:	d119      	bne.n	8009864 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009830:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	330c      	adds	r3, #12
 8009836:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	e853 3f00 	ldrex	r3, [r3]
 800983e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f023 0310 	bic.w	r3, r3, #16
 8009846:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	330c      	adds	r3, #12
 800984e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009850:	61fa      	str	r2, [r7, #28]
 8009852:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009854:	69b9      	ldr	r1, [r7, #24]
 8009856:	69fa      	ldr	r2, [r7, #28]
 8009858:	e841 2300 	strex	r3, r2, [r1]
 800985c:	617b      	str	r3, [r7, #20]
   return(result);
 800985e:	697b      	ldr	r3, [r7, #20]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d1e5      	bne.n	8009830 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009868:	2b01      	cmp	r3, #1
 800986a:	d106      	bne.n	800987a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800986c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800986e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009870:	4619      	mov	r1, r3
 8009872:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009874:	f7ff ff0e 	bl	8009694 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009878:	e002      	b.n	8009880 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800987a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800987c:	f7fa fdc8 	bl	8004410 <HAL_UART_RxCpltCallback>
}
 8009880:	bf00      	nop
 8009882:	3770      	adds	r7, #112	; 0x70
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}

08009888 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009894:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800989a:	2b01      	cmp	r3, #1
 800989c:	d108      	bne.n	80098b0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80098a2:	085b      	lsrs	r3, r3, #1
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	4619      	mov	r1, r3
 80098a8:	68f8      	ldr	r0, [r7, #12]
 80098aa:	f7ff fef3 	bl	8009694 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098ae:	e002      	b.n	80098b6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f7ff fedb 	bl	800966c <HAL_UART_RxHalfCpltCallback>
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80098c6:	2300      	movs	r3, #0
 80098c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	695b      	ldr	r3, [r3, #20]
 80098d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098da:	2b80      	cmp	r3, #128	; 0x80
 80098dc:	bf0c      	ite	eq
 80098de:	2301      	moveq	r3, #1
 80098e0:	2300      	movne	r3, #0
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b21      	cmp	r3, #33	; 0x21
 80098f0:	d108      	bne.n	8009904 <UART_DMAError+0x46>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d005      	beq.n	8009904 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	2200      	movs	r2, #0
 80098fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80098fe:	68b8      	ldr	r0, [r7, #8]
 8009900:	f000 f8c6 	bl	8009a90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	695b      	ldr	r3, [r3, #20]
 800990a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800990e:	2b40      	cmp	r3, #64	; 0x40
 8009910:	bf0c      	ite	eq
 8009912:	2301      	moveq	r3, #1
 8009914:	2300      	movne	r3, #0
 8009916:	b2db      	uxtb	r3, r3
 8009918:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800991a:	68bb      	ldr	r3, [r7, #8]
 800991c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009920:	b2db      	uxtb	r3, r3
 8009922:	2b22      	cmp	r3, #34	; 0x22
 8009924:	d108      	bne.n	8009938 <UART_DMAError+0x7a>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d005      	beq.n	8009938 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	2200      	movs	r2, #0
 8009930:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009932:	68b8      	ldr	r0, [r7, #8]
 8009934:	f000 f8d4 	bl	8009ae0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993c:	f043 0210 	orr.w	r2, r3, #16
 8009940:	68bb      	ldr	r3, [r7, #8]
 8009942:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009944:	68b8      	ldr	r0, [r7, #8]
 8009946:	f7ff fe9b 	bl	8009680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800994a:	bf00      	nop
 800994c:	3710      	adds	r7, #16
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}
	...

08009954 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b098      	sub	sp, #96	; 0x60
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	4613      	mov	r3, r2
 8009960:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	88fa      	ldrh	r2, [r7, #6]
 800996c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2200      	movs	r2, #0
 8009972:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2222      	movs	r2, #34	; 0x22
 8009978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	4a40      	ldr	r2, [pc, #256]	; (8009a84 <UART_Start_Receive_DMA+0x130>)
 8009982:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009988:	4a3f      	ldr	r2, [pc, #252]	; (8009a88 <UART_Start_Receive_DMA+0x134>)
 800998a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009990:	4a3e      	ldr	r2, [pc, #248]	; (8009a8c <UART_Start_Receive_DMA+0x138>)
 8009992:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009998:	2200      	movs	r2, #0
 800999a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800999c:	f107 0308 	add.w	r3, r7, #8
 80099a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	3304      	adds	r3, #4
 80099ac:	4619      	mov	r1, r3
 80099ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	88fb      	ldrh	r3, [r7, #6]
 80099b4:	f7fb f814 	bl	80049e0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80099b8:	2300      	movs	r3, #0
 80099ba:	613b      	str	r3, [r7, #16]
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	613b      	str	r3, [r7, #16]
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	613b      	str	r3, [r7, #16]
 80099cc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d019      	beq.n	8009a12 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	330c      	adds	r3, #12
 80099e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80099e8:	e853 3f00 	ldrex	r3, [r3]
 80099ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	330c      	adds	r3, #12
 80099fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009a00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a02:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009a04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009a06:	e841 2300 	strex	r3, r2, [r1]
 8009a0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009a0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d1e5      	bne.n	80099de <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3314      	adds	r3, #20
 8009a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1c:	e853 3f00 	ldrex	r3, [r3]
 8009a20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a24:	f043 0301 	orr.w	r3, r3, #1
 8009a28:	657b      	str	r3, [r7, #84]	; 0x54
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	3314      	adds	r3, #20
 8009a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009a32:	63ba      	str	r2, [r7, #56]	; 0x38
 8009a34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009a3a:	e841 2300 	strex	r3, r2, [r1]
 8009a3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d1e5      	bne.n	8009a12 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	3314      	adds	r3, #20
 8009a4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	e853 3f00 	ldrex	r3, [r3]
 8009a54:	617b      	str	r3, [r7, #20]
   return(result);
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a5c:	653b      	str	r3, [r7, #80]	; 0x50
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3314      	adds	r3, #20
 8009a64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a66:	627a      	str	r2, [r7, #36]	; 0x24
 8009a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6a:	6a39      	ldr	r1, [r7, #32]
 8009a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e5      	bne.n	8009a46 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009a7a:	2300      	movs	r3, #0
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3760      	adds	r7, #96	; 0x60
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	08009763 	.word	0x08009763
 8009a88:	08009889 	.word	0x08009889
 8009a8c:	080098bf 	.word	0x080098bf

08009a90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a90:	b480      	push	{r7}
 8009a92:	b089      	sub	sp, #36	; 0x24
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	330c      	adds	r3, #12
 8009a9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	e853 3f00 	ldrex	r3, [r3]
 8009aa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009aae:	61fb      	str	r3, [r7, #28]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	330c      	adds	r3, #12
 8009ab6:	69fa      	ldr	r2, [r7, #28]
 8009ab8:	61ba      	str	r2, [r7, #24]
 8009aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009abc:	6979      	ldr	r1, [r7, #20]
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	e841 2300 	strex	r3, r2, [r1]
 8009ac4:	613b      	str	r3, [r7, #16]
   return(result);
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d1e5      	bne.n	8009a98 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2220      	movs	r2, #32
 8009ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009ad4:	bf00      	nop
 8009ad6:	3724      	adds	r7, #36	; 0x24
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr

08009ae0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b095      	sub	sp, #84	; 0x54
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	330c      	adds	r3, #12
 8009aee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af2:	e853 3f00 	ldrex	r3, [r3]
 8009af6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009afe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	330c      	adds	r3, #12
 8009b06:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009b08:	643a      	str	r2, [r7, #64]	; 0x40
 8009b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009b0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e5      	bne.n	8009ae8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	3314      	adds	r3, #20
 8009b22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b24:	6a3b      	ldr	r3, [r7, #32]
 8009b26:	e853 3f00 	ldrex	r3, [r3]
 8009b2a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b2c:	69fb      	ldr	r3, [r7, #28]
 8009b2e:	f023 0301 	bic.w	r3, r3, #1
 8009b32:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	3314      	adds	r3, #20
 8009b3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b3c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b44:	e841 2300 	strex	r3, r2, [r1]
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1e5      	bne.n	8009b1c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d119      	bne.n	8009b8c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	330c      	adds	r3, #12
 8009b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	e853 3f00 	ldrex	r3, [r3]
 8009b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	f023 0310 	bic.w	r3, r3, #16
 8009b6e:	647b      	str	r3, [r7, #68]	; 0x44
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	330c      	adds	r3, #12
 8009b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b78:	61ba      	str	r2, [r7, #24]
 8009b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b7c:	6979      	ldr	r1, [r7, #20]
 8009b7e:	69ba      	ldr	r2, [r7, #24]
 8009b80:	e841 2300 	strex	r3, r2, [r1]
 8009b84:	613b      	str	r3, [r7, #16]
   return(result);
 8009b86:	693b      	ldr	r3, [r7, #16]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d1e5      	bne.n	8009b58 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2220      	movs	r2, #32
 8009b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009b9a:	bf00      	nop
 8009b9c:	3754      	adds	r7, #84	; 0x54
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr

08009ba6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b084      	sub	sp, #16
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bb2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f7ff fd5d 	bl	8009680 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bc6:	bf00      	nop
 8009bc8:	3710      	adds	r7, #16
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b085      	sub	sp, #20
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bdc:	b2db      	uxtb	r3, r3
 8009bde:	2b21      	cmp	r3, #33	; 0x21
 8009be0:	d13e      	bne.n	8009c60 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bea:	d114      	bne.n	8009c16 <UART_Transmit_IT+0x48>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d110      	bne.n	8009c16 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a1b      	ldr	r3, [r3, #32]
 8009bf8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	881b      	ldrh	r3, [r3, #0]
 8009bfe:	461a      	mov	r2, r3
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c08:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6a1b      	ldr	r3, [r3, #32]
 8009c0e:	1c9a      	adds	r2, r3, #2
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	621a      	str	r2, [r3, #32]
 8009c14:	e008      	b.n	8009c28 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a1b      	ldr	r3, [r3, #32]
 8009c1a:	1c59      	adds	r1, r3, #1
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	6211      	str	r1, [r2, #32]
 8009c20:	781a      	ldrb	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c2c:	b29b      	uxth	r3, r3
 8009c2e:	3b01      	subs	r3, #1
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	4619      	mov	r1, r3
 8009c36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10f      	bne.n	8009c5c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68da      	ldr	r2, [r3, #12]
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68da      	ldr	r2, [r3, #12]
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	e000      	b.n	8009c62 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c60:	2302      	movs	r3, #2
  }
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr

08009c6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c6e:	b580      	push	{r7, lr}
 8009c70:	b082      	sub	sp, #8
 8009c72:	af00      	add	r7, sp, #0
 8009c74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	68da      	ldr	r2, [r3, #12]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2220      	movs	r2, #32
 8009c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f7fa fade 	bl	8004250 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c94:	2300      	movs	r3, #0
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b08c      	sub	sp, #48	; 0x30
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cac:	b2db      	uxtb	r3, r3
 8009cae:	2b22      	cmp	r3, #34	; 0x22
 8009cb0:	f040 80ab 	bne.w	8009e0a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	689b      	ldr	r3, [r3, #8]
 8009cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cbc:	d117      	bne.n	8009cee <UART_Receive_IT+0x50>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d113      	bne.n	8009cee <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cce:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ce6:	1c9a      	adds	r2, r3, #2
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	629a      	str	r2, [r3, #40]	; 0x28
 8009cec:	e026      	b.n	8009d3c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689b      	ldr	r3, [r3, #8]
 8009cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d00:	d007      	beq.n	8009d12 <UART_Receive_IT+0x74>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d10a      	bne.n	8009d20 <UART_Receive_IT+0x82>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d106      	bne.n	8009d20 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	685b      	ldr	r3, [r3, #4]
 8009d18:	b2da      	uxtb	r2, r3
 8009d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1c:	701a      	strb	r2, [r3, #0]
 8009d1e:	e008      	b.n	8009d32 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	685b      	ldr	r3, [r3, #4]
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d30:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d36:	1c5a      	adds	r2, r3, #1
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	3b01      	subs	r3, #1
 8009d44:	b29b      	uxth	r3, r3
 8009d46:	687a      	ldr	r2, [r7, #4]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d15a      	bne.n	8009e06 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f022 0220 	bic.w	r2, r2, #32
 8009d5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68da      	ldr	r2, [r3, #12]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	695a      	ldr	r2, [r3, #20]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	f022 0201 	bic.w	r2, r2, #1
 8009d7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2220      	movs	r2, #32
 8009d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d135      	bne.n	8009dfc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	330c      	adds	r3, #12
 8009d9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d9e:	697b      	ldr	r3, [r7, #20]
 8009da0:	e853 3f00 	ldrex	r3, [r3]
 8009da4:	613b      	str	r3, [r7, #16]
   return(result);
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f023 0310 	bic.w	r3, r3, #16
 8009dac:	627b      	str	r3, [r7, #36]	; 0x24
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	330c      	adds	r3, #12
 8009db4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009db6:	623a      	str	r2, [r7, #32]
 8009db8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dba:	69f9      	ldr	r1, [r7, #28]
 8009dbc:	6a3a      	ldr	r2, [r7, #32]
 8009dbe:	e841 2300 	strex	r3, r2, [r1]
 8009dc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d1e5      	bne.n	8009d96 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 0310 	and.w	r3, r3, #16
 8009dd4:	2b10      	cmp	r3, #16
 8009dd6:	d10a      	bne.n	8009dee <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60fb      	str	r3, [r7, #12]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	60fb      	str	r3, [r7, #12]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff fc4d 	bl	8009694 <HAL_UARTEx_RxEventCallback>
 8009dfa:	e002      	b.n	8009e02 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7fa fb07 	bl	8004410 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009e02:	2300      	movs	r3, #0
 8009e04:	e002      	b.n	8009e0c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009e06:	2300      	movs	r3, #0
 8009e08:	e000      	b.n	8009e0c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009e0a:	2302      	movs	r3, #2
  }
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3730      	adds	r7, #48	; 0x30
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e18:	b0c0      	sub	sp, #256	; 0x100
 8009e1a:	af00      	add	r7, sp, #0
 8009e1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e30:	68d9      	ldr	r1, [r3, #12]
 8009e32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	ea40 0301 	orr.w	r3, r0, r1
 8009e3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e42:	689a      	ldr	r2, [r3, #8]
 8009e44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	431a      	orrs	r2, r3
 8009e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e50:	695b      	ldr	r3, [r3, #20]
 8009e52:	431a      	orrs	r2, r3
 8009e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e58:	69db      	ldr	r3, [r3, #28]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009e6c:	f021 010c 	bic.w	r1, r1, #12
 8009e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e7a:	430b      	orrs	r3, r1
 8009e7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	695b      	ldr	r3, [r3, #20]
 8009e86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e8e:	6999      	ldr	r1, [r3, #24]
 8009e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e94:	681a      	ldr	r2, [r3, #0]
 8009e96:	ea40 0301 	orr.w	r3, r0, r1
 8009e9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ea0:	681a      	ldr	r2, [r3, #0]
 8009ea2:	4b8f      	ldr	r3, [pc, #572]	; (800a0e0 <UART_SetConfig+0x2cc>)
 8009ea4:	429a      	cmp	r2, r3
 8009ea6:	d005      	beq.n	8009eb4 <UART_SetConfig+0xa0>
 8009ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	4b8d      	ldr	r3, [pc, #564]	; (800a0e4 <UART_SetConfig+0x2d0>)
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d104      	bne.n	8009ebe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009eb4:	f7fd fd14 	bl	80078e0 <HAL_RCC_GetPCLK2Freq>
 8009eb8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009ebc:	e003      	b.n	8009ec6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009ebe:	f7fd fcfb 	bl	80078b8 <HAL_RCC_GetPCLK1Freq>
 8009ec2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eca:	69db      	ldr	r3, [r3, #28]
 8009ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ed0:	f040 810c 	bne.w	800a0ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ed8:	2200      	movs	r2, #0
 8009eda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ede:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009ee2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009ee6:	4622      	mov	r2, r4
 8009ee8:	462b      	mov	r3, r5
 8009eea:	1891      	adds	r1, r2, r2
 8009eec:	65b9      	str	r1, [r7, #88]	; 0x58
 8009eee:	415b      	adcs	r3, r3
 8009ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ef2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ef6:	4621      	mov	r1, r4
 8009ef8:	eb12 0801 	adds.w	r8, r2, r1
 8009efc:	4629      	mov	r1, r5
 8009efe:	eb43 0901 	adc.w	r9, r3, r1
 8009f02:	f04f 0200 	mov.w	r2, #0
 8009f06:	f04f 0300 	mov.w	r3, #0
 8009f0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f16:	4690      	mov	r8, r2
 8009f18:	4699      	mov	r9, r3
 8009f1a:	4623      	mov	r3, r4
 8009f1c:	eb18 0303 	adds.w	r3, r8, r3
 8009f20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f24:	462b      	mov	r3, r5
 8009f26:	eb49 0303 	adc.w	r3, r9, r3
 8009f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009f3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009f42:	460b      	mov	r3, r1
 8009f44:	18db      	adds	r3, r3, r3
 8009f46:	653b      	str	r3, [r7, #80]	; 0x50
 8009f48:	4613      	mov	r3, r2
 8009f4a:	eb42 0303 	adc.w	r3, r2, r3
 8009f4e:	657b      	str	r3, [r7, #84]	; 0x54
 8009f50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009f54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009f58:	f7f6 f98a 	bl	8000270 <__aeabi_uldivmod>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4b61      	ldr	r3, [pc, #388]	; (800a0e8 <UART_SetConfig+0x2d4>)
 8009f62:	fba3 2302 	umull	r2, r3, r3, r2
 8009f66:	095b      	lsrs	r3, r3, #5
 8009f68:	011c      	lsls	r4, r3, #4
 8009f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009f78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009f7c:	4642      	mov	r2, r8
 8009f7e:	464b      	mov	r3, r9
 8009f80:	1891      	adds	r1, r2, r2
 8009f82:	64b9      	str	r1, [r7, #72]	; 0x48
 8009f84:	415b      	adcs	r3, r3
 8009f86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009f8c:	4641      	mov	r1, r8
 8009f8e:	eb12 0a01 	adds.w	sl, r2, r1
 8009f92:	4649      	mov	r1, r9
 8009f94:	eb43 0b01 	adc.w	fp, r3, r1
 8009f98:	f04f 0200 	mov.w	r2, #0
 8009f9c:	f04f 0300 	mov.w	r3, #0
 8009fa0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009fa4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009fa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009fac:	4692      	mov	sl, r2
 8009fae:	469b      	mov	fp, r3
 8009fb0:	4643      	mov	r3, r8
 8009fb2:	eb1a 0303 	adds.w	r3, sl, r3
 8009fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fba:	464b      	mov	r3, r9
 8009fbc:	eb4b 0303 	adc.w	r3, fp, r3
 8009fc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009fd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009fd8:	460b      	mov	r3, r1
 8009fda:	18db      	adds	r3, r3, r3
 8009fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8009fde:	4613      	mov	r3, r2
 8009fe0:	eb42 0303 	adc.w	r3, r2, r3
 8009fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8009fe6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009fea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009fee:	f7f6 f93f 	bl	8000270 <__aeabi_uldivmod>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	460b      	mov	r3, r1
 8009ff6:	4611      	mov	r1, r2
 8009ff8:	4b3b      	ldr	r3, [pc, #236]	; (800a0e8 <UART_SetConfig+0x2d4>)
 8009ffa:	fba3 2301 	umull	r2, r3, r3, r1
 8009ffe:	095b      	lsrs	r3, r3, #5
 800a000:	2264      	movs	r2, #100	; 0x64
 800a002:	fb02 f303 	mul.w	r3, r2, r3
 800a006:	1acb      	subs	r3, r1, r3
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a00e:	4b36      	ldr	r3, [pc, #216]	; (800a0e8 <UART_SetConfig+0x2d4>)
 800a010:	fba3 2302 	umull	r2, r3, r3, r2
 800a014:	095b      	lsrs	r3, r3, #5
 800a016:	005b      	lsls	r3, r3, #1
 800a018:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a01c:	441c      	add	r4, r3
 800a01e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a022:	2200      	movs	r2, #0
 800a024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a028:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a02c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a030:	4642      	mov	r2, r8
 800a032:	464b      	mov	r3, r9
 800a034:	1891      	adds	r1, r2, r2
 800a036:	63b9      	str	r1, [r7, #56]	; 0x38
 800a038:	415b      	adcs	r3, r3
 800a03a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a03c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a040:	4641      	mov	r1, r8
 800a042:	1851      	adds	r1, r2, r1
 800a044:	6339      	str	r1, [r7, #48]	; 0x30
 800a046:	4649      	mov	r1, r9
 800a048:	414b      	adcs	r3, r1
 800a04a:	637b      	str	r3, [r7, #52]	; 0x34
 800a04c:	f04f 0200 	mov.w	r2, #0
 800a050:	f04f 0300 	mov.w	r3, #0
 800a054:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a058:	4659      	mov	r1, fp
 800a05a:	00cb      	lsls	r3, r1, #3
 800a05c:	4651      	mov	r1, sl
 800a05e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a062:	4651      	mov	r1, sl
 800a064:	00ca      	lsls	r2, r1, #3
 800a066:	4610      	mov	r0, r2
 800a068:	4619      	mov	r1, r3
 800a06a:	4603      	mov	r3, r0
 800a06c:	4642      	mov	r2, r8
 800a06e:	189b      	adds	r3, r3, r2
 800a070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a074:	464b      	mov	r3, r9
 800a076:	460a      	mov	r2, r1
 800a078:	eb42 0303 	adc.w	r3, r2, r3
 800a07c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a084:	685b      	ldr	r3, [r3, #4]
 800a086:	2200      	movs	r2, #0
 800a088:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a08c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a090:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a094:	460b      	mov	r3, r1
 800a096:	18db      	adds	r3, r3, r3
 800a098:	62bb      	str	r3, [r7, #40]	; 0x28
 800a09a:	4613      	mov	r3, r2
 800a09c:	eb42 0303 	adc.w	r3, r2, r3
 800a0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a0a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a0a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a0aa:	f7f6 f8e1 	bl	8000270 <__aeabi_uldivmod>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4b0d      	ldr	r3, [pc, #52]	; (800a0e8 <UART_SetConfig+0x2d4>)
 800a0b4:	fba3 1302 	umull	r1, r3, r3, r2
 800a0b8:	095b      	lsrs	r3, r3, #5
 800a0ba:	2164      	movs	r1, #100	; 0x64
 800a0bc:	fb01 f303 	mul.w	r3, r1, r3
 800a0c0:	1ad3      	subs	r3, r2, r3
 800a0c2:	00db      	lsls	r3, r3, #3
 800a0c4:	3332      	adds	r3, #50	; 0x32
 800a0c6:	4a08      	ldr	r2, [pc, #32]	; (800a0e8 <UART_SetConfig+0x2d4>)
 800a0c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a0cc:	095b      	lsrs	r3, r3, #5
 800a0ce:	f003 0207 	and.w	r2, r3, #7
 800a0d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4422      	add	r2, r4
 800a0da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a0dc:	e106      	b.n	800a2ec <UART_SetConfig+0x4d8>
 800a0de:	bf00      	nop
 800a0e0:	40011000 	.word	0x40011000
 800a0e4:	40011400 	.word	0x40011400
 800a0e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a0f6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a0fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a0fe:	4642      	mov	r2, r8
 800a100:	464b      	mov	r3, r9
 800a102:	1891      	adds	r1, r2, r2
 800a104:	6239      	str	r1, [r7, #32]
 800a106:	415b      	adcs	r3, r3
 800a108:	627b      	str	r3, [r7, #36]	; 0x24
 800a10a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a10e:	4641      	mov	r1, r8
 800a110:	1854      	adds	r4, r2, r1
 800a112:	4649      	mov	r1, r9
 800a114:	eb43 0501 	adc.w	r5, r3, r1
 800a118:	f04f 0200 	mov.w	r2, #0
 800a11c:	f04f 0300 	mov.w	r3, #0
 800a120:	00eb      	lsls	r3, r5, #3
 800a122:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a126:	00e2      	lsls	r2, r4, #3
 800a128:	4614      	mov	r4, r2
 800a12a:	461d      	mov	r5, r3
 800a12c:	4643      	mov	r3, r8
 800a12e:	18e3      	adds	r3, r4, r3
 800a130:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a134:	464b      	mov	r3, r9
 800a136:	eb45 0303 	adc.w	r3, r5, r3
 800a13a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a13e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	2200      	movs	r2, #0
 800a146:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a14a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a14e:	f04f 0200 	mov.w	r2, #0
 800a152:	f04f 0300 	mov.w	r3, #0
 800a156:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a15a:	4629      	mov	r1, r5
 800a15c:	008b      	lsls	r3, r1, #2
 800a15e:	4621      	mov	r1, r4
 800a160:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a164:	4621      	mov	r1, r4
 800a166:	008a      	lsls	r2, r1, #2
 800a168:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a16c:	f7f6 f880 	bl	8000270 <__aeabi_uldivmod>
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	4b60      	ldr	r3, [pc, #384]	; (800a2f8 <UART_SetConfig+0x4e4>)
 800a176:	fba3 2302 	umull	r2, r3, r3, r2
 800a17a:	095b      	lsrs	r3, r3, #5
 800a17c:	011c      	lsls	r4, r3, #4
 800a17e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a182:	2200      	movs	r2, #0
 800a184:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a188:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a18c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a190:	4642      	mov	r2, r8
 800a192:	464b      	mov	r3, r9
 800a194:	1891      	adds	r1, r2, r2
 800a196:	61b9      	str	r1, [r7, #24]
 800a198:	415b      	adcs	r3, r3
 800a19a:	61fb      	str	r3, [r7, #28]
 800a19c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a1a0:	4641      	mov	r1, r8
 800a1a2:	1851      	adds	r1, r2, r1
 800a1a4:	6139      	str	r1, [r7, #16]
 800a1a6:	4649      	mov	r1, r9
 800a1a8:	414b      	adcs	r3, r1
 800a1aa:	617b      	str	r3, [r7, #20]
 800a1ac:	f04f 0200 	mov.w	r2, #0
 800a1b0:	f04f 0300 	mov.w	r3, #0
 800a1b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a1b8:	4659      	mov	r1, fp
 800a1ba:	00cb      	lsls	r3, r1, #3
 800a1bc:	4651      	mov	r1, sl
 800a1be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1c2:	4651      	mov	r1, sl
 800a1c4:	00ca      	lsls	r2, r1, #3
 800a1c6:	4610      	mov	r0, r2
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	4642      	mov	r2, r8
 800a1ce:	189b      	adds	r3, r3, r2
 800a1d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1d4:	464b      	mov	r3, r9
 800a1d6:	460a      	mov	r2, r1
 800a1d8:	eb42 0303 	adc.w	r3, r2, r3
 800a1dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	67bb      	str	r3, [r7, #120]	; 0x78
 800a1ea:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a1ec:	f04f 0200 	mov.w	r2, #0
 800a1f0:	f04f 0300 	mov.w	r3, #0
 800a1f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a1f8:	4649      	mov	r1, r9
 800a1fa:	008b      	lsls	r3, r1, #2
 800a1fc:	4641      	mov	r1, r8
 800a1fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a202:	4641      	mov	r1, r8
 800a204:	008a      	lsls	r2, r1, #2
 800a206:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a20a:	f7f6 f831 	bl	8000270 <__aeabi_uldivmod>
 800a20e:	4602      	mov	r2, r0
 800a210:	460b      	mov	r3, r1
 800a212:	4611      	mov	r1, r2
 800a214:	4b38      	ldr	r3, [pc, #224]	; (800a2f8 <UART_SetConfig+0x4e4>)
 800a216:	fba3 2301 	umull	r2, r3, r3, r1
 800a21a:	095b      	lsrs	r3, r3, #5
 800a21c:	2264      	movs	r2, #100	; 0x64
 800a21e:	fb02 f303 	mul.w	r3, r2, r3
 800a222:	1acb      	subs	r3, r1, r3
 800a224:	011b      	lsls	r3, r3, #4
 800a226:	3332      	adds	r3, #50	; 0x32
 800a228:	4a33      	ldr	r2, [pc, #204]	; (800a2f8 <UART_SetConfig+0x4e4>)
 800a22a:	fba2 2303 	umull	r2, r3, r2, r3
 800a22e:	095b      	lsrs	r3, r3, #5
 800a230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a234:	441c      	add	r4, r3
 800a236:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a23a:	2200      	movs	r2, #0
 800a23c:	673b      	str	r3, [r7, #112]	; 0x70
 800a23e:	677a      	str	r2, [r7, #116]	; 0x74
 800a240:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a244:	4642      	mov	r2, r8
 800a246:	464b      	mov	r3, r9
 800a248:	1891      	adds	r1, r2, r2
 800a24a:	60b9      	str	r1, [r7, #8]
 800a24c:	415b      	adcs	r3, r3
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a254:	4641      	mov	r1, r8
 800a256:	1851      	adds	r1, r2, r1
 800a258:	6039      	str	r1, [r7, #0]
 800a25a:	4649      	mov	r1, r9
 800a25c:	414b      	adcs	r3, r1
 800a25e:	607b      	str	r3, [r7, #4]
 800a260:	f04f 0200 	mov.w	r2, #0
 800a264:	f04f 0300 	mov.w	r3, #0
 800a268:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a26c:	4659      	mov	r1, fp
 800a26e:	00cb      	lsls	r3, r1, #3
 800a270:	4651      	mov	r1, sl
 800a272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a276:	4651      	mov	r1, sl
 800a278:	00ca      	lsls	r2, r1, #3
 800a27a:	4610      	mov	r0, r2
 800a27c:	4619      	mov	r1, r3
 800a27e:	4603      	mov	r3, r0
 800a280:	4642      	mov	r2, r8
 800a282:	189b      	adds	r3, r3, r2
 800a284:	66bb      	str	r3, [r7, #104]	; 0x68
 800a286:	464b      	mov	r3, r9
 800a288:	460a      	mov	r2, r1
 800a28a:	eb42 0303 	adc.w	r3, r2, r3
 800a28e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	663b      	str	r3, [r7, #96]	; 0x60
 800a29a:	667a      	str	r2, [r7, #100]	; 0x64
 800a29c:	f04f 0200 	mov.w	r2, #0
 800a2a0:	f04f 0300 	mov.w	r3, #0
 800a2a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a2a8:	4649      	mov	r1, r9
 800a2aa:	008b      	lsls	r3, r1, #2
 800a2ac:	4641      	mov	r1, r8
 800a2ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2b2:	4641      	mov	r1, r8
 800a2b4:	008a      	lsls	r2, r1, #2
 800a2b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a2ba:	f7f5 ffd9 	bl	8000270 <__aeabi_uldivmod>
 800a2be:	4602      	mov	r2, r0
 800a2c0:	460b      	mov	r3, r1
 800a2c2:	4b0d      	ldr	r3, [pc, #52]	; (800a2f8 <UART_SetConfig+0x4e4>)
 800a2c4:	fba3 1302 	umull	r1, r3, r3, r2
 800a2c8:	095b      	lsrs	r3, r3, #5
 800a2ca:	2164      	movs	r1, #100	; 0x64
 800a2cc:	fb01 f303 	mul.w	r3, r1, r3
 800a2d0:	1ad3      	subs	r3, r2, r3
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	3332      	adds	r3, #50	; 0x32
 800a2d6:	4a08      	ldr	r2, [pc, #32]	; (800a2f8 <UART_SetConfig+0x4e4>)
 800a2d8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2dc:	095b      	lsrs	r3, r3, #5
 800a2de:	f003 020f 	and.w	r2, r3, #15
 800a2e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4422      	add	r2, r4
 800a2ea:	609a      	str	r2, [r3, #8]
}
 800a2ec:	bf00      	nop
 800a2ee:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2f8:	51eb851f 	.word	0x51eb851f

0800a2fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2fc:	b084      	sub	sp, #16
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b084      	sub	sp, #16
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	f107 001c 	add.w	r0, r7, #28
 800a30a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a310:	2b01      	cmp	r3, #1
 800a312:	d122      	bne.n	800a35a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a318:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	68db      	ldr	r3, [r3, #12]
 800a324:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a328:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a32c:	687a      	ldr	r2, [r7, #4]
 800a32e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a33c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d105      	bne.n	800a34e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	68db      	ldr	r3, [r3, #12]
 800a346:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f001 fbee 	bl	800bb30 <USB_CoreReset>
 800a354:	4603      	mov	r3, r0
 800a356:	73fb      	strb	r3, [r7, #15]
 800a358:	e01a      	b.n	800a390 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a366:	6878      	ldr	r0, [r7, #4]
 800a368:	f001 fbe2 	bl	800bb30 <USB_CoreReset>
 800a36c:	4603      	mov	r3, r0
 800a36e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a372:	2b00      	cmp	r3, #0
 800a374:	d106      	bne.n	800a384 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	639a      	str	r2, [r3, #56]	; 0x38
 800a382:	e005      	b.n	800a390 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a388:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a392:	2b01      	cmp	r3, #1
 800a394:	d10b      	bne.n	800a3ae <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	689b      	ldr	r3, [r3, #8]
 800a39a:	f043 0206 	orr.w	r2, r3, #6
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	689b      	ldr	r3, [r3, #8]
 800a3a6:	f043 0220 	orr.w	r2, r3, #32
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a3ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3710      	adds	r7, #16
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3ba:	b004      	add	sp, #16
 800a3bc:	4770      	bx	lr
	...

0800a3c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b087      	sub	sp, #28
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a3ce:	79fb      	ldrb	r3, [r7, #7]
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d165      	bne.n	800a4a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	4a41      	ldr	r2, [pc, #260]	; (800a4dc <USB_SetTurnaroundTime+0x11c>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d906      	bls.n	800a3ea <USB_SetTurnaroundTime+0x2a>
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	4a40      	ldr	r2, [pc, #256]	; (800a4e0 <USB_SetTurnaroundTime+0x120>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d202      	bcs.n	800a3ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a3e4:	230f      	movs	r3, #15
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	e062      	b.n	800a4b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	4a3c      	ldr	r2, [pc, #240]	; (800a4e0 <USB_SetTurnaroundTime+0x120>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d306      	bcc.n	800a400 <USB_SetTurnaroundTime+0x40>
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	4a3b      	ldr	r2, [pc, #236]	; (800a4e4 <USB_SetTurnaroundTime+0x124>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d202      	bcs.n	800a400 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a3fa:	230e      	movs	r3, #14
 800a3fc:	617b      	str	r3, [r7, #20]
 800a3fe:	e057      	b.n	800a4b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	4a38      	ldr	r2, [pc, #224]	; (800a4e4 <USB_SetTurnaroundTime+0x124>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d306      	bcc.n	800a416 <USB_SetTurnaroundTime+0x56>
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	4a37      	ldr	r2, [pc, #220]	; (800a4e8 <USB_SetTurnaroundTime+0x128>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d202      	bcs.n	800a416 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a410:	230d      	movs	r3, #13
 800a412:	617b      	str	r3, [r7, #20]
 800a414:	e04c      	b.n	800a4b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	4a33      	ldr	r2, [pc, #204]	; (800a4e8 <USB_SetTurnaroundTime+0x128>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d306      	bcc.n	800a42c <USB_SetTurnaroundTime+0x6c>
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	4a32      	ldr	r2, [pc, #200]	; (800a4ec <USB_SetTurnaroundTime+0x12c>)
 800a422:	4293      	cmp	r3, r2
 800a424:	d802      	bhi.n	800a42c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a426:	230c      	movs	r3, #12
 800a428:	617b      	str	r3, [r7, #20]
 800a42a:	e041      	b.n	800a4b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	4a2f      	ldr	r2, [pc, #188]	; (800a4ec <USB_SetTurnaroundTime+0x12c>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d906      	bls.n	800a442 <USB_SetTurnaroundTime+0x82>
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	4a2e      	ldr	r2, [pc, #184]	; (800a4f0 <USB_SetTurnaroundTime+0x130>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	d802      	bhi.n	800a442 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a43c:	230b      	movs	r3, #11
 800a43e:	617b      	str	r3, [r7, #20]
 800a440:	e036      	b.n	800a4b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	4a2a      	ldr	r2, [pc, #168]	; (800a4f0 <USB_SetTurnaroundTime+0x130>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d906      	bls.n	800a458 <USB_SetTurnaroundTime+0x98>
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	4a29      	ldr	r2, [pc, #164]	; (800a4f4 <USB_SetTurnaroundTime+0x134>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d802      	bhi.n	800a458 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a452:	230a      	movs	r3, #10
 800a454:	617b      	str	r3, [r7, #20]
 800a456:	e02b      	b.n	800a4b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	4a26      	ldr	r2, [pc, #152]	; (800a4f4 <USB_SetTurnaroundTime+0x134>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d906      	bls.n	800a46e <USB_SetTurnaroundTime+0xae>
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	4a25      	ldr	r2, [pc, #148]	; (800a4f8 <USB_SetTurnaroundTime+0x138>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d202      	bcs.n	800a46e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a468:	2309      	movs	r3, #9
 800a46a:	617b      	str	r3, [r7, #20]
 800a46c:	e020      	b.n	800a4b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	4a21      	ldr	r2, [pc, #132]	; (800a4f8 <USB_SetTurnaroundTime+0x138>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d306      	bcc.n	800a484 <USB_SetTurnaroundTime+0xc4>
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	4a20      	ldr	r2, [pc, #128]	; (800a4fc <USB_SetTurnaroundTime+0x13c>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d802      	bhi.n	800a484 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a47e:	2308      	movs	r3, #8
 800a480:	617b      	str	r3, [r7, #20]
 800a482:	e015      	b.n	800a4b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4a1d      	ldr	r2, [pc, #116]	; (800a4fc <USB_SetTurnaroundTime+0x13c>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d906      	bls.n	800a49a <USB_SetTurnaroundTime+0xda>
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	4a1c      	ldr	r2, [pc, #112]	; (800a500 <USB_SetTurnaroundTime+0x140>)
 800a490:	4293      	cmp	r3, r2
 800a492:	d202      	bcs.n	800a49a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a494:	2307      	movs	r3, #7
 800a496:	617b      	str	r3, [r7, #20]
 800a498:	e00a      	b.n	800a4b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a49a:	2306      	movs	r3, #6
 800a49c:	617b      	str	r3, [r7, #20]
 800a49e:	e007      	b.n	800a4b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a4a0:	79fb      	ldrb	r3, [r7, #7]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d102      	bne.n	800a4ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a4a6:	2309      	movs	r3, #9
 800a4a8:	617b      	str	r3, [r7, #20]
 800a4aa:	e001      	b.n	800a4b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a4ac:	2309      	movs	r3, #9
 800a4ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	68db      	ldr	r3, [r3, #12]
 800a4b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	68da      	ldr	r2, [r3, #12]
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	029b      	lsls	r3, r3, #10
 800a4c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a4c8:	431a      	orrs	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	371c      	adds	r7, #28
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	00d8acbf 	.word	0x00d8acbf
 800a4e0:	00e4e1c0 	.word	0x00e4e1c0
 800a4e4:	00f42400 	.word	0x00f42400
 800a4e8:	01067380 	.word	0x01067380
 800a4ec:	011a499f 	.word	0x011a499f
 800a4f0:	01312cff 	.word	0x01312cff
 800a4f4:	014ca43f 	.word	0x014ca43f
 800a4f8:	016e3600 	.word	0x016e3600
 800a4fc:	01a6ab1f 	.word	0x01a6ab1f
 800a500:	01e84800 	.word	0x01e84800

0800a504 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a504:	b480      	push	{r7}
 800a506:	b083      	sub	sp, #12
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	689b      	ldr	r3, [r3, #8]
 800a510:	f043 0201 	orr.w	r2, r3, #1
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a518:	2300      	movs	r3, #0
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr

0800a526 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a526:	b480      	push	{r7}
 800a528:	b083      	sub	sp, #12
 800a52a:	af00      	add	r7, sp, #0
 800a52c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	f023 0201 	bic.w	r2, r3, #1
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a53a:	2300      	movs	r3, #0
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b084      	sub	sp, #16
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	460b      	mov	r3, r1
 800a552:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a554:	2300      	movs	r3, #0
 800a556:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	2b01      	cmp	r3, #1
 800a568:	d115      	bne.n	800a596 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	68db      	ldr	r3, [r3, #12]
 800a56e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a576:	2001      	movs	r0, #1
 800a578:	f7fa f84e 	bl	8004618 <HAL_Delay>
      ms++;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	3301      	adds	r3, #1
 800a580:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f001 fa45 	bl	800ba12 <USB_GetMode>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b01      	cmp	r3, #1
 800a58c:	d01e      	beq.n	800a5cc <USB_SetCurrentMode+0x84>
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	2b31      	cmp	r3, #49	; 0x31
 800a592:	d9f0      	bls.n	800a576 <USB_SetCurrentMode+0x2e>
 800a594:	e01a      	b.n	800a5cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a596:	78fb      	ldrb	r3, [r7, #3]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d115      	bne.n	800a5c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a5a8:	2001      	movs	r0, #1
 800a5aa:	f7fa f835 	bl	8004618 <HAL_Delay>
      ms++;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f001 fa2c 	bl	800ba12 <USB_GetMode>
 800a5ba:	4603      	mov	r3, r0
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d005      	beq.n	800a5cc <USB_SetCurrentMode+0x84>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2b31      	cmp	r3, #49	; 0x31
 800a5c4:	d9f0      	bls.n	800a5a8 <USB_SetCurrentMode+0x60>
 800a5c6:	e001      	b.n	800a5cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	e005      	b.n	800a5d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2b32      	cmp	r3, #50	; 0x32
 800a5d0:	d101      	bne.n	800a5d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5d2:	2301      	movs	r3, #1
 800a5d4:	e000      	b.n	800a5d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5d6:	2300      	movs	r3, #0
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5e0:	b084      	sub	sp, #16
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b086      	sub	sp, #24
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	6078      	str	r0, [r7, #4]
 800a5ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a5ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	613b      	str	r3, [r7, #16]
 800a5fe:	e009      	b.n	800a614 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	3340      	adds	r3, #64	; 0x40
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	2200      	movs	r2, #0
 800a60c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	3301      	adds	r3, #1
 800a612:	613b      	str	r3, [r7, #16]
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	2b0e      	cmp	r3, #14
 800a618:	d9f2      	bls.n	800a600 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a61a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d11c      	bne.n	800a65a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a62e:	f043 0302 	orr.w	r3, r3, #2
 800a632:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a638:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a644:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a650:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	639a      	str	r2, [r3, #56]	; 0x38
 800a658:	e00b      	b.n	800a672 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a66a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a678:	461a      	mov	r2, r3
 800a67a:	2300      	movs	r3, #0
 800a67c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a684:	4619      	mov	r1, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a68c:	461a      	mov	r2, r3
 800a68e:	680b      	ldr	r3, [r1, #0]
 800a690:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a694:	2b01      	cmp	r3, #1
 800a696:	d10c      	bne.n	800a6b2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d104      	bne.n	800a6a8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a69e:	2100      	movs	r1, #0
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f965 	bl	800a970 <USB_SetDevSpeed>
 800a6a6:	e008      	b.n	800a6ba <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a6a8:	2101      	movs	r1, #1
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 f960 	bl	800a970 <USB_SetDevSpeed>
 800a6b0:	e003      	b.n	800a6ba <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a6b2:	2103      	movs	r1, #3
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 f95b 	bl	800a970 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a6ba:	2110      	movs	r1, #16
 800a6bc:	6878      	ldr	r0, [r7, #4]
 800a6be:	f000 f8f3 	bl	800a8a8 <USB_FlushTxFifo>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f000 f91f 	bl	800a910 <USB_FlushRxFifo>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d001      	beq.n	800a6dc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a700:	2300      	movs	r3, #0
 800a702:	613b      	str	r3, [r7, #16]
 800a704:	e043      	b.n	800a78e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a71c:	d118      	bne.n	800a750 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10a      	bne.n	800a73a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	015a      	lsls	r2, r3, #5
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4413      	add	r3, r2
 800a72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a730:	461a      	mov	r2, r3
 800a732:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	e013      	b.n	800a762 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	015a      	lsls	r2, r3, #5
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	4413      	add	r3, r2
 800a742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a746:	461a      	mov	r2, r3
 800a748:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a74c:	6013      	str	r3, [r2, #0]
 800a74e:	e008      	b.n	800a762 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	4413      	add	r3, r2
 800a758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75c:	461a      	mov	r2, r3
 800a75e:	2300      	movs	r3, #0
 800a760:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a76e:	461a      	mov	r2, r3
 800a770:	2300      	movs	r3, #0
 800a772:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a780:	461a      	mov	r2, r3
 800a782:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a786:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a788:	693b      	ldr	r3, [r7, #16]
 800a78a:	3301      	adds	r3, #1
 800a78c:	613b      	str	r3, [r7, #16]
 800a78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a790:	693a      	ldr	r2, [r7, #16]
 800a792:	429a      	cmp	r2, r3
 800a794:	d3b7      	bcc.n	800a706 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a796:	2300      	movs	r3, #0
 800a798:	613b      	str	r3, [r7, #16]
 800a79a:	e043      	b.n	800a824 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a79c:	693b      	ldr	r3, [r7, #16]
 800a79e:	015a      	lsls	r2, r3, #5
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	4413      	add	r3, r2
 800a7a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7b2:	d118      	bne.n	800a7e6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d10a      	bne.n	800a7d0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7cc:	6013      	str	r3, [r2, #0]
 800a7ce:	e013      	b.n	800a7f8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7dc:	461a      	mov	r2, r3
 800a7de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7e2:	6013      	str	r3, [r2, #0]
 800a7e4:	e008      	b.n	800a7f8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	015a      	lsls	r2, r3, #5
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	4413      	add	r3, r2
 800a800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a804:	461a      	mov	r2, r3
 800a806:	2300      	movs	r3, #0
 800a808:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	015a      	lsls	r2, r3, #5
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	4413      	add	r3, r2
 800a812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a816:	461a      	mov	r2, r3
 800a818:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a81c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	3301      	adds	r3, #1
 800a822:	613b      	str	r3, [r7, #16]
 800a824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a826:	693a      	ldr	r2, [r7, #16]
 800a828:	429a      	cmp	r2, r3
 800a82a:	d3b7      	bcc.n	800a79c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a83a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a83e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2200      	movs	r2, #0
 800a844:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a84c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a84e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a850:	2b00      	cmp	r3, #0
 800a852:	d105      	bne.n	800a860 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	f043 0210 	orr.w	r2, r3, #16
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	699a      	ldr	r2, [r3, #24]
 800a864:	4b0f      	ldr	r3, [pc, #60]	; (800a8a4 <USB_DevInit+0x2c4>)
 800a866:	4313      	orrs	r3, r2
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d005      	beq.n	800a87e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	699b      	ldr	r3, [r3, #24]
 800a876:	f043 0208 	orr.w	r2, r3, #8
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a880:	2b01      	cmp	r3, #1
 800a882:	d107      	bne.n	800a894 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a88c:	f043 0304 	orr.w	r3, r3, #4
 800a890:	687a      	ldr	r2, [r7, #4]
 800a892:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a894:	7dfb      	ldrb	r3, [r7, #23]
}
 800a896:	4618      	mov	r0, r3
 800a898:	3718      	adds	r7, #24
 800a89a:	46bd      	mov	sp, r7
 800a89c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8a0:	b004      	add	sp, #16
 800a8a2:	4770      	bx	lr
 800a8a4:	803c3800 	.word	0x803c3800

0800a8a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
 800a8b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	4a13      	ldr	r2, [pc, #76]	; (800a90c <USB_FlushTxFifo+0x64>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d901      	bls.n	800a8c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a8c4:	2303      	movs	r3, #3
 800a8c6:	e01b      	b.n	800a900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	daf2      	bge.n	800a8b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	019b      	lsls	r3, r3, #6
 800a8d8:	f043 0220 	orr.w	r2, r3, #32
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	3301      	adds	r3, #1
 800a8e4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	4a08      	ldr	r2, [pc, #32]	; (800a90c <USB_FlushTxFifo+0x64>)
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d901      	bls.n	800a8f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	e006      	b.n	800a900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	691b      	ldr	r3, [r3, #16]
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b20      	cmp	r3, #32
 800a8fc:	d0f0      	beq.n	800a8e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	4618      	mov	r0, r3
 800a902:	3714      	adds	r7, #20
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr
 800a90c:	00030d40 	.word	0x00030d40

0800a910 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a910:	b480      	push	{r7}
 800a912:	b085      	sub	sp, #20
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a918:	2300      	movs	r3, #0
 800a91a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	3301      	adds	r3, #1
 800a920:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	4a11      	ldr	r2, [pc, #68]	; (800a96c <USB_FlushRxFifo+0x5c>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d901      	bls.n	800a92e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a92a:	2303      	movs	r3, #3
 800a92c:	e018      	b.n	800a960 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	691b      	ldr	r3, [r3, #16]
 800a932:	2b00      	cmp	r3, #0
 800a934:	daf2      	bge.n	800a91c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a936:	2300      	movs	r3, #0
 800a938:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	2210      	movs	r2, #16
 800a93e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	3301      	adds	r3, #1
 800a944:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4a08      	ldr	r2, [pc, #32]	; (800a96c <USB_FlushRxFifo+0x5c>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d901      	bls.n	800a952 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a94e:	2303      	movs	r3, #3
 800a950:	e006      	b.n	800a960 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	691b      	ldr	r3, [r3, #16]
 800a956:	f003 0310 	and.w	r3, r3, #16
 800a95a:	2b10      	cmp	r3, #16
 800a95c:	d0f0      	beq.n	800a940 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	00030d40 	.word	0x00030d40

0800a970 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	460b      	mov	r3, r1
 800a97a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	68f9      	ldr	r1, [r7, #12]
 800a98c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a990:	4313      	orrs	r3, r2
 800a992:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a994:	2300      	movs	r3, #0
}
 800a996:	4618      	mov	r0, r3
 800a998:	3714      	adds	r7, #20
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr

0800a9a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a9a2:	b480      	push	{r7}
 800a9a4:	b087      	sub	sp, #28
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9b4:	689b      	ldr	r3, [r3, #8]
 800a9b6:	f003 0306 	and.w	r3, r3, #6
 800a9ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d102      	bne.n	800a9c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	75fb      	strb	r3, [r7, #23]
 800a9c6:	e00a      	b.n	800a9de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	d002      	beq.n	800a9d4 <USB_GetDevSpeed+0x32>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2b06      	cmp	r3, #6
 800a9d2:	d102      	bne.n	800a9da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a9d4:	2302      	movs	r3, #2
 800a9d6:	75fb      	strb	r3, [r7, #23]
 800a9d8:	e001      	b.n	800a9de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a9da:	230f      	movs	r3, #15
 800a9dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a9de:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	371c      	adds	r7, #28
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
 800a9f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	785b      	ldrb	r3, [r3, #1]
 800aa04:	2b01      	cmp	r3, #1
 800aa06:	d13a      	bne.n	800aa7e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0e:	69da      	ldr	r2, [r3, #28]
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	781b      	ldrb	r3, [r3, #0]
 800aa14:	f003 030f 	and.w	r3, r3, #15
 800aa18:	2101      	movs	r1, #1
 800aa1a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	68f9      	ldr	r1, [r7, #12]
 800aa22:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa26:	4313      	orrs	r3, r2
 800aa28:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	015a      	lsls	r2, r3, #5
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	4413      	add	r3, r2
 800aa32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d155      	bne.n	800aaec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa56:	683b      	ldr	r3, [r7, #0]
 800aa58:	791b      	ldrb	r3, [r3, #4]
 800aa5a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa5c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	059b      	lsls	r3, r3, #22
 800aa62:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa64:	4313      	orrs	r3, r2
 800aa66:	68ba      	ldr	r2, [r7, #8]
 800aa68:	0151      	lsls	r1, r2, #5
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	440a      	add	r2, r1
 800aa6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa7a:	6013      	str	r3, [r2, #0]
 800aa7c:	e036      	b.n	800aaec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa84:	69da      	ldr	r2, [r3, #28]
 800aa86:	683b      	ldr	r3, [r7, #0]
 800aa88:	781b      	ldrb	r3, [r3, #0]
 800aa8a:	f003 030f 	and.w	r3, r3, #15
 800aa8e:	2101      	movs	r1, #1
 800aa90:	fa01 f303 	lsl.w	r3, r1, r3
 800aa94:	041b      	lsls	r3, r3, #16
 800aa96:	68f9      	ldr	r1, [r7, #12]
 800aa98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	015a      	lsls	r2, r3, #5
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	4413      	add	r3, r2
 800aaa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d11a      	bne.n	800aaec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	015a      	lsls	r2, r3, #5
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	4413      	add	r3, r2
 800aabe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	791b      	ldrb	r3, [r3, #4]
 800aad0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aad2:	430b      	orrs	r3, r1
 800aad4:	4313      	orrs	r3, r2
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	0151      	lsls	r1, r2, #5
 800aada:	68fa      	ldr	r2, [r7, #12]
 800aadc:	440a      	add	r2, r1
 800aade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aae6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aaea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
	...

0800aafc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b085      	sub	sp, #20
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
 800ab04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	785b      	ldrb	r3, [r3, #1]
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	d161      	bne.n	800abdc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	015a      	lsls	r2, r3, #5
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab2e:	d11f      	bne.n	800ab70 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	0151      	lsls	r1, r2, #5
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	440a      	add	r2, r1
 800ab46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab4e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ab50:	68bb      	ldr	r3, [r7, #8]
 800ab52:	015a      	lsls	r2, r3, #5
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	4413      	add	r3, r2
 800ab58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	68ba      	ldr	r2, [r7, #8]
 800ab60:	0151      	lsls	r1, r2, #5
 800ab62:	68fa      	ldr	r2, [r7, #12]
 800ab64:	440a      	add	r2, r1
 800ab66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	781b      	ldrb	r3, [r3, #0]
 800ab7c:	f003 030f 	and.w	r3, r3, #15
 800ab80:	2101      	movs	r1, #1
 800ab82:	fa01 f303 	lsl.w	r3, r1, r3
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	43db      	mvns	r3, r3
 800ab8a:	68f9      	ldr	r1, [r7, #12]
 800ab8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab90:	4013      	ands	r3, r2
 800ab92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab9a:	69da      	ldr	r2, [r3, #28]
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	f003 030f 	and.w	r3, r3, #15
 800aba4:	2101      	movs	r1, #1
 800aba6:	fa01 f303 	lsl.w	r3, r1, r3
 800abaa:	b29b      	uxth	r3, r3
 800abac:	43db      	mvns	r3, r3
 800abae:	68f9      	ldr	r1, [r7, #12]
 800abb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800abb4:	4013      	ands	r3, r2
 800abb6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	0159      	lsls	r1, r3, #5
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	440b      	add	r3, r1
 800abce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abd2:	4619      	mov	r1, r3
 800abd4:	4b35      	ldr	r3, [pc, #212]	; (800acac <USB_DeactivateEndpoint+0x1b0>)
 800abd6:	4013      	ands	r3, r2
 800abd8:	600b      	str	r3, [r1, #0]
 800abda:	e060      	b.n	800ac9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	015a      	lsls	r2, r3, #5
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4413      	add	r3, r2
 800abe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abf2:	d11f      	bne.n	800ac34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	015a      	lsls	r2, r3, #5
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	4413      	add	r3, r2
 800abfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	68ba      	ldr	r2, [r7, #8]
 800ac04:	0151      	lsls	r1, r2, #5
 800ac06:	68fa      	ldr	r2, [r7, #12]
 800ac08:	440a      	add	r2, r1
 800ac0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac0e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ac14:	68bb      	ldr	r3, [r7, #8]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	0151      	lsls	r1, r2, #5
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	440a      	add	r2, r1
 800ac2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	781b      	ldrb	r3, [r3, #0]
 800ac40:	f003 030f 	and.w	r3, r3, #15
 800ac44:	2101      	movs	r1, #1
 800ac46:	fa01 f303 	lsl.w	r3, r1, r3
 800ac4a:	041b      	lsls	r3, r3, #16
 800ac4c:	43db      	mvns	r3, r3
 800ac4e:	68f9      	ldr	r1, [r7, #12]
 800ac50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac54:	4013      	ands	r3, r2
 800ac56:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac5e:	69da      	ldr	r2, [r3, #28]
 800ac60:	683b      	ldr	r3, [r7, #0]
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	f003 030f 	and.w	r3, r3, #15
 800ac68:	2101      	movs	r1, #1
 800ac6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac6e:	041b      	lsls	r3, r3, #16
 800ac70:	43db      	mvns	r3, r3
 800ac72:	68f9      	ldr	r1, [r7, #12]
 800ac74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac78:	4013      	ands	r3, r2
 800ac7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	015a      	lsls	r2, r3, #5
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4413      	add	r3, r2
 800ac84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac88:	681a      	ldr	r2, [r3, #0]
 800ac8a:	68bb      	ldr	r3, [r7, #8]
 800ac8c:	0159      	lsls	r1, r3, #5
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	440b      	add	r3, r1
 800ac92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac96:	4619      	mov	r1, r3
 800ac98:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <USB_DeactivateEndpoint+0x1b4>)
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	ec337800 	.word	0xec337800
 800acb0:	eff37800 	.word	0xeff37800

0800acb4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b08a      	sub	sp, #40	; 0x28
 800acb8:	af02      	add	r7, sp, #8
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	4613      	mov	r3, r2
 800acc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	781b      	ldrb	r3, [r3, #0]
 800acca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	785b      	ldrb	r3, [r3, #1]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	f040 815c 	bne.w	800af8e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	699b      	ldr	r3, [r3, #24]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d132      	bne.n	800ad44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	015a      	lsls	r2, r3, #5
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	4413      	add	r3, r2
 800ace6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	69ba      	ldr	r2, [r7, #24]
 800acee:	0151      	lsls	r1, r2, #5
 800acf0:	69fa      	ldr	r2, [r7, #28]
 800acf2:	440a      	add	r2, r1
 800acf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acf8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800acfc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	015a      	lsls	r2, r3, #5
 800ad06:	69fb      	ldr	r3, [r7, #28]
 800ad08:	4413      	add	r3, r2
 800ad0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	69ba      	ldr	r2, [r7, #24]
 800ad12:	0151      	lsls	r1, r2, #5
 800ad14:	69fa      	ldr	r2, [r7, #28]
 800ad16:	440a      	add	r2, r1
 800ad18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad1c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	015a      	lsls	r2, r3, #5
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	4413      	add	r3, r2
 800ad2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	69ba      	ldr	r2, [r7, #24]
 800ad32:	0151      	lsls	r1, r2, #5
 800ad34:	69fa      	ldr	r2, [r7, #28]
 800ad36:	440a      	add	r2, r1
 800ad38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad3c:	0cdb      	lsrs	r3, r3, #19
 800ad3e:	04db      	lsls	r3, r3, #19
 800ad40:	6113      	str	r3, [r2, #16]
 800ad42:	e074      	b.n	800ae2e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad44:	69bb      	ldr	r3, [r7, #24]
 800ad46:	015a      	lsls	r2, r3, #5
 800ad48:	69fb      	ldr	r3, [r7, #28]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	69ba      	ldr	r2, [r7, #24]
 800ad54:	0151      	lsls	r1, r2, #5
 800ad56:	69fa      	ldr	r2, [r7, #28]
 800ad58:	440a      	add	r2, r1
 800ad5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad5e:	0cdb      	lsrs	r3, r3, #19
 800ad60:	04db      	lsls	r3, r3, #19
 800ad62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	015a      	lsls	r2, r3, #5
 800ad68:	69fb      	ldr	r3, [r7, #28]
 800ad6a:	4413      	add	r3, r2
 800ad6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad70:	691b      	ldr	r3, [r3, #16]
 800ad72:	69ba      	ldr	r2, [r7, #24]
 800ad74:	0151      	lsls	r1, r2, #5
 800ad76:	69fa      	ldr	r2, [r7, #28]
 800ad78:	440a      	add	r2, r1
 800ad7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad86:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	69fb      	ldr	r3, [r7, #28]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad94:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	6999      	ldr	r1, [r3, #24]
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	68db      	ldr	r3, [r3, #12]
 800ad9e:	440b      	add	r3, r1
 800ada0:	1e59      	subs	r1, r3, #1
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	68db      	ldr	r3, [r3, #12]
 800ada6:	fbb1 f3f3 	udiv	r3, r1, r3
 800adaa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800adac:	4b9d      	ldr	r3, [pc, #628]	; (800b024 <USB_EPStartXfer+0x370>)
 800adae:	400b      	ands	r3, r1
 800adb0:	69b9      	ldr	r1, [r7, #24]
 800adb2:	0148      	lsls	r0, r1, #5
 800adb4:	69f9      	ldr	r1, [r7, #28]
 800adb6:	4401      	add	r1, r0
 800adb8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800adbc:	4313      	orrs	r3, r2
 800adbe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800adc0:	69bb      	ldr	r3, [r7, #24]
 800adc2:	015a      	lsls	r2, r3, #5
 800adc4:	69fb      	ldr	r3, [r7, #28]
 800adc6:	4413      	add	r3, r2
 800adc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adcc:	691a      	ldr	r2, [r3, #16]
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	699b      	ldr	r3, [r3, #24]
 800add2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800add6:	69b9      	ldr	r1, [r7, #24]
 800add8:	0148      	lsls	r0, r1, #5
 800adda:	69f9      	ldr	r1, [r7, #28]
 800addc:	4401      	add	r1, r0
 800adde:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ade2:	4313      	orrs	r3, r2
 800ade4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	791b      	ldrb	r3, [r3, #4]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d11f      	bne.n	800ae2e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	0151      	lsls	r1, r2, #5
 800ae00:	69fa      	ldr	r2, [r7, #28]
 800ae02:	440a      	add	r2, r1
 800ae04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae08:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ae0c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	69ba      	ldr	r2, [r7, #24]
 800ae1e:	0151      	lsls	r1, r2, #5
 800ae20:	69fa      	ldr	r2, [r7, #28]
 800ae22:	440a      	add	r2, r1
 800ae24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae28:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae2c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ae2e:	79fb      	ldrb	r3, [r7, #7]
 800ae30:	2b01      	cmp	r3, #1
 800ae32:	d14b      	bne.n	800aecc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	695b      	ldr	r3, [r3, #20]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d009      	beq.n	800ae50 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ae3c:	69bb      	ldr	r3, [r7, #24]
 800ae3e:	015a      	lsls	r2, r3, #5
 800ae40:	69fb      	ldr	r3, [r7, #28]
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae48:	461a      	mov	r2, r3
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	695b      	ldr	r3, [r3, #20]
 800ae4e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	791b      	ldrb	r3, [r3, #4]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d128      	bne.n	800aeaa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d110      	bne.n	800ae8a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae68:	69bb      	ldr	r3, [r7, #24]
 800ae6a:	015a      	lsls	r2, r3, #5
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	4413      	add	r3, r2
 800ae70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	69ba      	ldr	r2, [r7, #24]
 800ae78:	0151      	lsls	r1, r2, #5
 800ae7a:	69fa      	ldr	r2, [r7, #28]
 800ae7c:	440a      	add	r2, r1
 800ae7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae86:	6013      	str	r3, [r2, #0]
 800ae88:	e00f      	b.n	800aeaa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	015a      	lsls	r2, r3, #5
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	4413      	add	r3, r2
 800ae92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	69ba      	ldr	r2, [r7, #24]
 800ae9a:	0151      	lsls	r1, r2, #5
 800ae9c:	69fa      	ldr	r2, [r7, #28]
 800ae9e:	440a      	add	r2, r1
 800aea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aea8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	015a      	lsls	r2, r3, #5
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	0151      	lsls	r1, r2, #5
 800aebc:	69fa      	ldr	r2, [r7, #28]
 800aebe:	440a      	add	r2, r1
 800aec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aec4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aec8:	6013      	str	r3, [r2, #0]
 800aeca:	e133      	b.n	800b134 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	69ba      	ldr	r2, [r7, #24]
 800aedc:	0151      	lsls	r1, r2, #5
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	440a      	add	r2, r1
 800aee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aee6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aeea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aeec:	68bb      	ldr	r3, [r7, #8]
 800aeee:	791b      	ldrb	r3, [r3, #4]
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d015      	beq.n	800af20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	699b      	ldr	r3, [r3, #24]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	f000 811b 	beq.w	800b134 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	f003 030f 	and.w	r3, r3, #15
 800af0e:	2101      	movs	r1, #1
 800af10:	fa01 f303 	lsl.w	r3, r1, r3
 800af14:	69f9      	ldr	r1, [r7, #28]
 800af16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af1a:	4313      	orrs	r3, r2
 800af1c:	634b      	str	r3, [r1, #52]	; 0x34
 800af1e:	e109      	b.n	800b134 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af20:	69fb      	ldr	r3, [r7, #28]
 800af22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d110      	bne.n	800af52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	015a      	lsls	r2, r3, #5
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	4413      	add	r3, r2
 800af38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	69ba      	ldr	r2, [r7, #24]
 800af40:	0151      	lsls	r1, r2, #5
 800af42:	69fa      	ldr	r2, [r7, #28]
 800af44:	440a      	add	r2, r1
 800af46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af4e:	6013      	str	r3, [r2, #0]
 800af50:	e00f      	b.n	800af72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af52:	69bb      	ldr	r3, [r7, #24]
 800af54:	015a      	lsls	r2, r3, #5
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	4413      	add	r3, r2
 800af5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	69ba      	ldr	r2, [r7, #24]
 800af62:	0151      	lsls	r1, r2, #5
 800af64:	69fa      	ldr	r2, [r7, #28]
 800af66:	440a      	add	r2, r1
 800af68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800af72:	68bb      	ldr	r3, [r7, #8]
 800af74:	6919      	ldr	r1, [r3, #16]
 800af76:	68bb      	ldr	r3, [r7, #8]
 800af78:	781a      	ldrb	r2, [r3, #0]
 800af7a:	68bb      	ldr	r3, [r7, #8]
 800af7c:	699b      	ldr	r3, [r3, #24]
 800af7e:	b298      	uxth	r0, r3
 800af80:	79fb      	ldrb	r3, [r7, #7]
 800af82:	9300      	str	r3, [sp, #0]
 800af84:	4603      	mov	r3, r0
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f000 fade 	bl	800b548 <USB_WritePacket>
 800af8c:	e0d2      	b.n	800b134 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	015a      	lsls	r2, r3, #5
 800af92:	69fb      	ldr	r3, [r7, #28]
 800af94:	4413      	add	r3, r2
 800af96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	69ba      	ldr	r2, [r7, #24]
 800af9e:	0151      	lsls	r1, r2, #5
 800afa0:	69fa      	ldr	r2, [r7, #28]
 800afa2:	440a      	add	r2, r1
 800afa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afa8:	0cdb      	lsrs	r3, r3, #19
 800afaa:	04db      	lsls	r3, r3, #19
 800afac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800afae:	69bb      	ldr	r3, [r7, #24]
 800afb0:	015a      	lsls	r2, r3, #5
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	4413      	add	r3, r2
 800afb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	69ba      	ldr	r2, [r7, #24]
 800afbe:	0151      	lsls	r1, r2, #5
 800afc0:	69fa      	ldr	r2, [r7, #28]
 800afc2:	440a      	add	r2, r1
 800afc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afc8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800afcc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800afd0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	699b      	ldr	r3, [r3, #24]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d126      	bne.n	800b028 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	015a      	lsls	r2, r3, #5
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	4413      	add	r3, r2
 800afe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afe6:	691a      	ldr	r2, [r3, #16]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aff0:	69b9      	ldr	r1, [r7, #24]
 800aff2:	0148      	lsls	r0, r1, #5
 800aff4:	69f9      	ldr	r1, [r7, #28]
 800aff6:	4401      	add	r1, r0
 800aff8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800affc:	4313      	orrs	r3, r2
 800affe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	015a      	lsls	r2, r3, #5
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	4413      	add	r3, r2
 800b008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b00c:	691b      	ldr	r3, [r3, #16]
 800b00e:	69ba      	ldr	r2, [r7, #24]
 800b010:	0151      	lsls	r1, r2, #5
 800b012:	69fa      	ldr	r2, [r7, #28]
 800b014:	440a      	add	r2, r1
 800b016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b01a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b01e:	6113      	str	r3, [r2, #16]
 800b020:	e03a      	b.n	800b098 <USB_EPStartXfer+0x3e4>
 800b022:	bf00      	nop
 800b024:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	699a      	ldr	r2, [r3, #24]
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	68db      	ldr	r3, [r3, #12]
 800b030:	4413      	add	r3, r2
 800b032:	1e5a      	subs	r2, r3, #1
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	68db      	ldr	r3, [r3, #12]
 800b038:	fbb2 f3f3 	udiv	r3, r2, r3
 800b03c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	68db      	ldr	r3, [r3, #12]
 800b042:	8afa      	ldrh	r2, [r7, #22]
 800b044:	fb03 f202 	mul.w	r2, r3, r2
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	015a      	lsls	r2, r3, #5
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	4413      	add	r3, r2
 800b054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b058:	691a      	ldr	r2, [r3, #16]
 800b05a:	8afb      	ldrh	r3, [r7, #22]
 800b05c:	04d9      	lsls	r1, r3, #19
 800b05e:	4b38      	ldr	r3, [pc, #224]	; (800b140 <USB_EPStartXfer+0x48c>)
 800b060:	400b      	ands	r3, r1
 800b062:	69b9      	ldr	r1, [r7, #24]
 800b064:	0148      	lsls	r0, r1, #5
 800b066:	69f9      	ldr	r1, [r7, #28]
 800b068:	4401      	add	r1, r0
 800b06a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b06e:	4313      	orrs	r3, r2
 800b070:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	015a      	lsls	r2, r3, #5
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	4413      	add	r3, r2
 800b07a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b07e:	691a      	ldr	r2, [r3, #16]
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	69db      	ldr	r3, [r3, #28]
 800b084:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b088:	69b9      	ldr	r1, [r7, #24]
 800b08a:	0148      	lsls	r0, r1, #5
 800b08c:	69f9      	ldr	r1, [r7, #28]
 800b08e:	4401      	add	r1, r0
 800b090:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b094:	4313      	orrs	r3, r2
 800b096:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b098:	79fb      	ldrb	r3, [r7, #7]
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d10d      	bne.n	800b0ba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	691b      	ldr	r3, [r3, #16]
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d009      	beq.n	800b0ba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	6919      	ldr	r1, [r3, #16]
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	015a      	lsls	r2, r3, #5
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b6:	460a      	mov	r2, r1
 800b0b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	791b      	ldrb	r3, [r3, #4]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d128      	bne.n	800b114 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d110      	bne.n	800b0f4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b0d2:	69bb      	ldr	r3, [r7, #24]
 800b0d4:	015a      	lsls	r2, r3, #5
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	4413      	add	r3, r2
 800b0da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	69ba      	ldr	r2, [r7, #24]
 800b0e2:	0151      	lsls	r1, r2, #5
 800b0e4:	69fa      	ldr	r2, [r7, #28]
 800b0e6:	440a      	add	r2, r1
 800b0e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b0f0:	6013      	str	r3, [r2, #0]
 800b0f2:	e00f      	b.n	800b114 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b0f4:	69bb      	ldr	r3, [r7, #24]
 800b0f6:	015a      	lsls	r2, r3, #5
 800b0f8:	69fb      	ldr	r3, [r7, #28]
 800b0fa:	4413      	add	r3, r2
 800b0fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	69ba      	ldr	r2, [r7, #24]
 800b104:	0151      	lsls	r1, r2, #5
 800b106:	69fa      	ldr	r2, [r7, #28]
 800b108:	440a      	add	r2, r1
 800b10a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b10e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b112:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b114:	69bb      	ldr	r3, [r7, #24]
 800b116:	015a      	lsls	r2, r3, #5
 800b118:	69fb      	ldr	r3, [r7, #28]
 800b11a:	4413      	add	r3, r2
 800b11c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	0151      	lsls	r1, r2, #5
 800b126:	69fa      	ldr	r2, [r7, #28]
 800b128:	440a      	add	r2, r1
 800b12a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b12e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b132:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3720      	adds	r7, #32
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	1ff80000 	.word	0x1ff80000

0800b144 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b144:	b480      	push	{r7}
 800b146:	b087      	sub	sp, #28
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	4613      	mov	r3, r2
 800b150:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	781b      	ldrb	r3, [r3, #0]
 800b15a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	785b      	ldrb	r3, [r3, #1]
 800b160:	2b01      	cmp	r3, #1
 800b162:	f040 80ce 	bne.w	800b302 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	699b      	ldr	r3, [r3, #24]
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d132      	bne.n	800b1d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	697b      	ldr	r3, [r7, #20]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b17a:	691b      	ldr	r3, [r3, #16]
 800b17c:	693a      	ldr	r2, [r7, #16]
 800b17e:	0151      	lsls	r1, r2, #5
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	440a      	add	r2, r1
 800b184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b188:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b18c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b190:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	015a      	lsls	r2, r3, #5
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	4413      	add	r3, r2
 800b19a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b19e:	691b      	ldr	r3, [r3, #16]
 800b1a0:	693a      	ldr	r2, [r7, #16]
 800b1a2:	0151      	lsls	r1, r2, #5
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	440a      	add	r2, r1
 800b1a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	015a      	lsls	r2, r3, #5
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1be:	691b      	ldr	r3, [r3, #16]
 800b1c0:	693a      	ldr	r2, [r7, #16]
 800b1c2:	0151      	lsls	r1, r2, #5
 800b1c4:	697a      	ldr	r2, [r7, #20]
 800b1c6:	440a      	add	r2, r1
 800b1c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1cc:	0cdb      	lsrs	r3, r3, #19
 800b1ce:	04db      	lsls	r3, r3, #19
 800b1d0:	6113      	str	r3, [r2, #16]
 800b1d2:	e04e      	b.n	800b272 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b1d4:	693b      	ldr	r3, [r7, #16]
 800b1d6:	015a      	lsls	r2, r3, #5
 800b1d8:	697b      	ldr	r3, [r7, #20]
 800b1da:	4413      	add	r3, r2
 800b1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e0:	691b      	ldr	r3, [r3, #16]
 800b1e2:	693a      	ldr	r2, [r7, #16]
 800b1e4:	0151      	lsls	r1, r2, #5
 800b1e6:	697a      	ldr	r2, [r7, #20]
 800b1e8:	440a      	add	r2, r1
 800b1ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ee:	0cdb      	lsrs	r3, r3, #19
 800b1f0:	04db      	lsls	r3, r3, #19
 800b1f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	015a      	lsls	r2, r3, #5
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b200:	691b      	ldr	r3, [r3, #16]
 800b202:	693a      	ldr	r2, [r7, #16]
 800b204:	0151      	lsls	r1, r2, #5
 800b206:	697a      	ldr	r2, [r7, #20]
 800b208:	440a      	add	r2, r1
 800b20a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b20e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b212:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b216:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	699a      	ldr	r2, [r3, #24]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	429a      	cmp	r2, r3
 800b222:	d903      	bls.n	800b22c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	68da      	ldr	r2, [r3, #12]
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	015a      	lsls	r2, r3, #5
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	4413      	add	r3, r2
 800b234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b238:	691b      	ldr	r3, [r3, #16]
 800b23a:	693a      	ldr	r2, [r7, #16]
 800b23c:	0151      	lsls	r1, r2, #5
 800b23e:	697a      	ldr	r2, [r7, #20]
 800b240:	440a      	add	r2, r1
 800b242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b24a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b24c:	693b      	ldr	r3, [r7, #16]
 800b24e:	015a      	lsls	r2, r3, #5
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	4413      	add	r3, r2
 800b254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b258:	691a      	ldr	r2, [r3, #16]
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	699b      	ldr	r3, [r3, #24]
 800b25e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b262:	6939      	ldr	r1, [r7, #16]
 800b264:	0148      	lsls	r0, r1, #5
 800b266:	6979      	ldr	r1, [r7, #20]
 800b268:	4401      	add	r1, r0
 800b26a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b26e:	4313      	orrs	r3, r2
 800b270:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b272:	79fb      	ldrb	r3, [r7, #7]
 800b274:	2b01      	cmp	r3, #1
 800b276:	d11e      	bne.n	800b2b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	695b      	ldr	r3, [r3, #20]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d009      	beq.n	800b294 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	015a      	lsls	r2, r3, #5
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	4413      	add	r3, r2
 800b288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b28c:	461a      	mov	r2, r3
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	695b      	ldr	r3, [r3, #20]
 800b292:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	015a      	lsls	r2, r3, #5
 800b298:	697b      	ldr	r3, [r7, #20]
 800b29a:	4413      	add	r3, r2
 800b29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	693a      	ldr	r2, [r7, #16]
 800b2a4:	0151      	lsls	r1, r2, #5
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	440a      	add	r2, r1
 800b2aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2b2:	6013      	str	r3, [r2, #0]
 800b2b4:	e097      	b.n	800b3e6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	015a      	lsls	r2, r3, #5
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	4413      	add	r3, r2
 800b2be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	0151      	lsls	r1, r2, #5
 800b2c8:	697a      	ldr	r2, [r7, #20]
 800b2ca:	440a      	add	r2, r1
 800b2cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b2d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	699b      	ldr	r3, [r3, #24]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	f000 8083 	beq.w	800b3e6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	f003 030f 	and.w	r3, r3, #15
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2f6:	6979      	ldr	r1, [r7, #20]
 800b2f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2fc:	4313      	orrs	r3, r2
 800b2fe:	634b      	str	r3, [r1, #52]	; 0x34
 800b300:	e071      	b.n	800b3e6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	015a      	lsls	r2, r3, #5
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	4413      	add	r3, r2
 800b30a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b30e:	691b      	ldr	r3, [r3, #16]
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	0151      	lsls	r1, r2, #5
 800b314:	697a      	ldr	r2, [r7, #20]
 800b316:	440a      	add	r2, r1
 800b318:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b31c:	0cdb      	lsrs	r3, r3, #19
 800b31e:	04db      	lsls	r3, r3, #19
 800b320:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	015a      	lsls	r2, r3, #5
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	4413      	add	r3, r2
 800b32a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	693a      	ldr	r2, [r7, #16]
 800b332:	0151      	lsls	r1, r2, #5
 800b334:	697a      	ldr	r2, [r7, #20]
 800b336:	440a      	add	r2, r1
 800b338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b33c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b340:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b344:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d003      	beq.n	800b356 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	68da      	ldr	r2, [r3, #12]
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	68da      	ldr	r2, [r3, #12]
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	015a      	lsls	r2, r3, #5
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	4413      	add	r3, r2
 800b366:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	693a      	ldr	r2, [r7, #16]
 800b36e:	0151      	lsls	r1, r2, #5
 800b370:	697a      	ldr	r2, [r7, #20]
 800b372:	440a      	add	r2, r1
 800b374:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b378:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b37c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	015a      	lsls	r2, r3, #5
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	4413      	add	r3, r2
 800b386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b38a:	691a      	ldr	r2, [r3, #16]
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	69db      	ldr	r3, [r3, #28]
 800b390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b394:	6939      	ldr	r1, [r7, #16]
 800b396:	0148      	lsls	r0, r1, #5
 800b398:	6979      	ldr	r1, [r7, #20]
 800b39a:	4401      	add	r1, r0
 800b39c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3a0:	4313      	orrs	r3, r2
 800b3a2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b3a4:	79fb      	ldrb	r3, [r7, #7]
 800b3a6:	2b01      	cmp	r3, #1
 800b3a8:	d10d      	bne.n	800b3c6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	691b      	ldr	r3, [r3, #16]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d009      	beq.n	800b3c6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	6919      	ldr	r1, [r3, #16]
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	015a      	lsls	r2, r3, #5
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	4413      	add	r3, r2
 800b3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c2:	460a      	mov	r2, r1
 800b3c4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	693a      	ldr	r2, [r7, #16]
 800b3d6:	0151      	lsls	r1, r2, #5
 800b3d8:	697a      	ldr	r2, [r7, #20]
 800b3da:	440a      	add	r2, r1
 800b3dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b3e0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	371c      	adds	r7, #28
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b087      	sub	sp, #28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
 800b3fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b3fe:	2300      	movs	r3, #0
 800b400:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b402:	2300      	movs	r3, #0
 800b404:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	785b      	ldrb	r3, [r3, #1]
 800b40e:	2b01      	cmp	r3, #1
 800b410:	d14a      	bne.n	800b4a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	781b      	ldrb	r3, [r3, #0]
 800b416:	015a      	lsls	r2, r3, #5
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b42a:	f040 8086 	bne.w	800b53a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	781b      	ldrb	r3, [r3, #0]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	683a      	ldr	r2, [r7, #0]
 800b440:	7812      	ldrb	r2, [r2, #0]
 800b442:	0151      	lsls	r1, r2, #5
 800b444:	693a      	ldr	r2, [r7, #16]
 800b446:	440a      	add	r2, r1
 800b448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b44c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b450:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b452:	683b      	ldr	r3, [r7, #0]
 800b454:	781b      	ldrb	r3, [r3, #0]
 800b456:	015a      	lsls	r2, r3, #5
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	4413      	add	r3, r2
 800b45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	683a      	ldr	r2, [r7, #0]
 800b464:	7812      	ldrb	r2, [r2, #0]
 800b466:	0151      	lsls	r1, r2, #5
 800b468:	693a      	ldr	r2, [r7, #16]
 800b46a:	440a      	add	r2, r1
 800b46c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b470:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b474:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3301      	adds	r3, #1
 800b47a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b482:	4293      	cmp	r3, r2
 800b484:	d902      	bls.n	800b48c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	75fb      	strb	r3, [r7, #23]
          break;
 800b48a:	e056      	b.n	800b53a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	781b      	ldrb	r3, [r3, #0]
 800b490:	015a      	lsls	r2, r3, #5
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	4413      	add	r3, r2
 800b496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4a4:	d0e7      	beq.n	800b476 <USB_EPStopXfer+0x82>
 800b4a6:	e048      	b.n	800b53a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	781b      	ldrb	r3, [r3, #0]
 800b4ac:	015a      	lsls	r2, r3, #5
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4c0:	d13b      	bne.n	800b53a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	015a      	lsls	r2, r3, #5
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	683a      	ldr	r2, [r7, #0]
 800b4d4:	7812      	ldrb	r2, [r2, #0]
 800b4d6:	0151      	lsls	r1, r2, #5
 800b4d8:	693a      	ldr	r2, [r7, #16]
 800b4da:	440a      	add	r2, r1
 800b4dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b4e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	015a      	lsls	r2, r3, #5
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	7812      	ldrb	r2, [r2, #0]
 800b4fa:	0151      	lsls	r1, r2, #5
 800b4fc:	693a      	ldr	r2, [r7, #16]
 800b4fe:	440a      	add	r2, r1
 800b500:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b504:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b508:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	3301      	adds	r3, #1
 800b50e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	f242 7210 	movw	r2, #10000	; 0x2710
 800b516:	4293      	cmp	r3, r2
 800b518:	d902      	bls.n	800b520 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	75fb      	strb	r3, [r7, #23]
          break;
 800b51e:	e00c      	b.n	800b53a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b520:	683b      	ldr	r3, [r7, #0]
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	015a      	lsls	r2, r3, #5
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b538:	d0e7      	beq.n	800b50a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b53a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b53c:	4618      	mov	r0, r3
 800b53e:	371c      	adds	r7, #28
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b548:	b480      	push	{r7}
 800b54a:	b089      	sub	sp, #36	; 0x24
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	60f8      	str	r0, [r7, #12]
 800b550:	60b9      	str	r1, [r7, #8]
 800b552:	4611      	mov	r1, r2
 800b554:	461a      	mov	r2, r3
 800b556:	460b      	mov	r3, r1
 800b558:	71fb      	strb	r3, [r7, #7]
 800b55a:	4613      	mov	r3, r2
 800b55c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b566:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d123      	bne.n	800b5b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b56e:	88bb      	ldrh	r3, [r7, #4]
 800b570:	3303      	adds	r3, #3
 800b572:	089b      	lsrs	r3, r3, #2
 800b574:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b576:	2300      	movs	r3, #0
 800b578:	61bb      	str	r3, [r7, #24]
 800b57a:	e018      	b.n	800b5ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b57c:	79fb      	ldrb	r3, [r7, #7]
 800b57e:	031a      	lsls	r2, r3, #12
 800b580:	697b      	ldr	r3, [r7, #20]
 800b582:	4413      	add	r3, r2
 800b584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b588:	461a      	mov	r2, r3
 800b58a:	69fb      	ldr	r3, [r7, #28]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	3301      	adds	r3, #1
 800b594:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	3301      	adds	r3, #1
 800b59a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b59c:	69fb      	ldr	r3, [r7, #28]
 800b59e:	3301      	adds	r3, #1
 800b5a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b5a2:	69fb      	ldr	r3, [r7, #28]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b5a8:	69bb      	ldr	r3, [r7, #24]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	61bb      	str	r3, [r7, #24]
 800b5ae:	69ba      	ldr	r2, [r7, #24]
 800b5b0:	693b      	ldr	r3, [r7, #16]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d3e2      	bcc.n	800b57c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b5b6:	2300      	movs	r3, #0
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3724      	adds	r7, #36	; 0x24
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr

0800b5c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b5c4:	b480      	push	{r7}
 800b5c6:	b08b      	sub	sp, #44	; 0x2c
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	60f8      	str	r0, [r7, #12]
 800b5cc:	60b9      	str	r1, [r7, #8]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b5da:	88fb      	ldrh	r3, [r7, #6]
 800b5dc:	089b      	lsrs	r3, r3, #2
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b5e2:	88fb      	ldrh	r3, [r7, #6]
 800b5e4:	f003 0303 	and.w	r3, r3, #3
 800b5e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	623b      	str	r3, [r7, #32]
 800b5ee:	e014      	b.n	800b61a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5f6:	681a      	ldr	r2, [r3, #0]
 800b5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fa:	601a      	str	r2, [r3, #0]
    pDest++;
 800b5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fe:	3301      	adds	r3, #1
 800b600:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b604:	3301      	adds	r3, #1
 800b606:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b60a:	3301      	adds	r3, #1
 800b60c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b610:	3301      	adds	r3, #1
 800b612:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b614:	6a3b      	ldr	r3, [r7, #32]
 800b616:	3301      	adds	r3, #1
 800b618:	623b      	str	r3, [r7, #32]
 800b61a:	6a3a      	ldr	r2, [r7, #32]
 800b61c:	697b      	ldr	r3, [r7, #20]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d3e6      	bcc.n	800b5f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b622:	8bfb      	ldrh	r3, [r7, #30]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d01e      	beq.n	800b666 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b628:	2300      	movs	r3, #0
 800b62a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b62c:	69bb      	ldr	r3, [r7, #24]
 800b62e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b632:	461a      	mov	r2, r3
 800b634:	f107 0310 	add.w	r3, r7, #16
 800b638:	6812      	ldr	r2, [r2, #0]
 800b63a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b63c:	693a      	ldr	r2, [r7, #16]
 800b63e:	6a3b      	ldr	r3, [r7, #32]
 800b640:	b2db      	uxtb	r3, r3
 800b642:	00db      	lsls	r3, r3, #3
 800b644:	fa22 f303 	lsr.w	r3, r2, r3
 800b648:	b2da      	uxtb	r2, r3
 800b64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64c:	701a      	strb	r2, [r3, #0]
      i++;
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	3301      	adds	r3, #1
 800b652:	623b      	str	r3, [r7, #32]
      pDest++;
 800b654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b656:	3301      	adds	r3, #1
 800b658:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b65a:	8bfb      	ldrh	r3, [r7, #30]
 800b65c:	3b01      	subs	r3, #1
 800b65e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b660:	8bfb      	ldrh	r3, [r7, #30]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d1ea      	bne.n	800b63c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b668:	4618      	mov	r0, r3
 800b66a:	372c      	adds	r7, #44	; 0x2c
 800b66c:	46bd      	mov	sp, r7
 800b66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b672:	4770      	bx	lr

0800b674 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b674:	b480      	push	{r7}
 800b676:	b085      	sub	sp, #20
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	781b      	ldrb	r3, [r3, #0]
 800b686:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	785b      	ldrb	r3, [r3, #1]
 800b68c:	2b01      	cmp	r3, #1
 800b68e:	d12c      	bne.n	800b6ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4413      	add	r3, r2
 800b698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	db12      	blt.n	800b6c8 <USB_EPSetStall+0x54>
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00f      	beq.n	800b6c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	015a      	lsls	r2, r3, #5
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	0151      	lsls	r1, r2, #5
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	440a      	add	r2, r1
 800b6be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b6c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	0151      	lsls	r1, r2, #5
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	440a      	add	r2, r1
 800b6de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b6e6:	6013      	str	r3, [r2, #0]
 800b6e8:	e02b      	b.n	800b742 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	015a      	lsls	r2, r3, #5
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	db12      	blt.n	800b722 <USB_EPSetStall+0xae>
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d00f      	beq.n	800b722 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	015a      	lsls	r2, r3, #5
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	4413      	add	r3, r2
 800b70a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	68ba      	ldr	r2, [r7, #8]
 800b712:	0151      	lsls	r1, r2, #5
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	440a      	add	r2, r1
 800b718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b71c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b720:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	015a      	lsls	r2, r3, #5
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	4413      	add	r3, r2
 800b72a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	0151      	lsls	r1, r2, #5
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	440a      	add	r2, r1
 800b738:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b73c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b740:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b742:	2300      	movs	r3, #0
}
 800b744:	4618      	mov	r0, r3
 800b746:	3714      	adds	r7, #20
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	781b      	ldrb	r3, [r3, #0]
 800b762:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	785b      	ldrb	r3, [r3, #1]
 800b768:	2b01      	cmp	r3, #1
 800b76a:	d128      	bne.n	800b7be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	015a      	lsls	r2, r3, #5
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	4413      	add	r3, r2
 800b774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	0151      	lsls	r1, r2, #5
 800b77e:	68fa      	ldr	r2, [r7, #12]
 800b780:	440a      	add	r2, r1
 800b782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b78a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	791b      	ldrb	r3, [r3, #4]
 800b790:	2b03      	cmp	r3, #3
 800b792:	d003      	beq.n	800b79c <USB_EPClearStall+0x4c>
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	791b      	ldrb	r3, [r3, #4]
 800b798:	2b02      	cmp	r3, #2
 800b79a:	d138      	bne.n	800b80e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	015a      	lsls	r2, r3, #5
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	0151      	lsls	r1, r2, #5
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	440a      	add	r2, r1
 800b7b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7ba:	6013      	str	r3, [r2, #0]
 800b7bc:	e027      	b.n	800b80e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b7be:	68bb      	ldr	r3, [r7, #8]
 800b7c0:	015a      	lsls	r2, r3, #5
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	0151      	lsls	r1, r2, #5
 800b7d0:	68fa      	ldr	r2, [r7, #12]
 800b7d2:	440a      	add	r2, r1
 800b7d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	791b      	ldrb	r3, [r3, #4]
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d003      	beq.n	800b7ee <USB_EPClearStall+0x9e>
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	791b      	ldrb	r3, [r3, #4]
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d10f      	bne.n	800b80e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	015a      	lsls	r2, r3, #5
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	0151      	lsls	r1, r2, #5
 800b800:	68fa      	ldr	r2, [r7, #12]
 800b802:	440a      	add	r2, r1
 800b804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b80c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68fa      	ldr	r2, [r7, #12]
 800b836:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b83a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b83e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b846:	681a      	ldr	r2, [r3, #0]
 800b848:	78fb      	ldrb	r3, [r7, #3]
 800b84a:	011b      	lsls	r3, r3, #4
 800b84c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b850:	68f9      	ldr	r1, [r7, #12]
 800b852:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b856:	4313      	orrs	r3, r2
 800b858:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b85a:	2300      	movs	r3, #0
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3714      	adds	r7, #20
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b868:	b480      	push	{r7}
 800b86a:	b085      	sub	sp, #20
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	68fa      	ldr	r2, [r7, #12]
 800b87e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b882:	f023 0303 	bic.w	r3, r3, #3
 800b886:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b896:	f023 0302 	bic.w	r3, r3, #2
 800b89a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3714      	adds	r7, #20
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a8:	4770      	bx	lr

0800b8aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b085      	sub	sp, #20
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	68fa      	ldr	r2, [r7, #12]
 800b8c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b8c4:	f023 0303 	bic.w	r3, r3, #3
 800b8c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d0:	685b      	ldr	r3, [r3, #4]
 800b8d2:	68fa      	ldr	r2, [r7, #12]
 800b8d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8d8:	f043 0302 	orr.w	r3, r3, #2
 800b8dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	695b      	ldr	r3, [r3, #20]
 800b8f8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	699b      	ldr	r3, [r3, #24]
 800b8fe:	68fa      	ldr	r2, [r7, #12]
 800b900:	4013      	ands	r3, r2
 800b902:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b904:	68fb      	ldr	r3, [r7, #12]
}
 800b906:	4618      	mov	r0, r3
 800b908:	3714      	adds	r7, #20
 800b90a:	46bd      	mov	sp, r7
 800b90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b910:	4770      	bx	lr

0800b912 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b912:	b480      	push	{r7}
 800b914:	b085      	sub	sp, #20
 800b916:	af00      	add	r7, sp, #0
 800b918:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b924:	699b      	ldr	r3, [r3, #24]
 800b926:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b92e:	69db      	ldr	r3, [r3, #28]
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	4013      	ands	r3, r2
 800b934:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	0c1b      	lsrs	r3, r3, #16
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr

0800b946 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b946:	b480      	push	{r7}
 800b948:	b085      	sub	sp, #20
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b958:	699b      	ldr	r3, [r3, #24]
 800b95a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b962:	69db      	ldr	r3, [r3, #28]
 800b964:	68ba      	ldr	r2, [r7, #8]
 800b966:	4013      	ands	r3, r2
 800b968:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	b29b      	uxth	r3, r3
}
 800b96e:	4618      	mov	r0, r3
 800b970:	3714      	adds	r7, #20
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b97a:	b480      	push	{r7}
 800b97c:	b085      	sub	sp, #20
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	460b      	mov	r3, r1
 800b984:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b98a:	78fb      	ldrb	r3, [r7, #3]
 800b98c:	015a      	lsls	r2, r3, #5
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	4413      	add	r3, r2
 800b992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b996:	689b      	ldr	r3, [r3, #8]
 800b998:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	68ba      	ldr	r2, [r7, #8]
 800b9a4:	4013      	ands	r3, r2
 800b9a6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9a8:	68bb      	ldr	r3, [r7, #8]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3714      	adds	r7, #20
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b4:	4770      	bx	lr

0800b9b6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b9b6:	b480      	push	{r7}
 800b9b8:	b087      	sub	sp, #28
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
 800b9be:	460b      	mov	r3, r1
 800b9c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9d8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b9da:	78fb      	ldrb	r3, [r7, #3]
 800b9dc:	f003 030f 	and.w	r3, r3, #15
 800b9e0:	68fa      	ldr	r2, [r7, #12]
 800b9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e6:	01db      	lsls	r3, r3, #7
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	693a      	ldr	r2, [r7, #16]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	015a      	lsls	r2, r3, #5
 800b9f4:	697b      	ldr	r3, [r7, #20]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	4013      	ands	r3, r2
 800ba02:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba04:	68bb      	ldr	r3, [r7, #8]
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	371c      	adds	r7, #28
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba10:	4770      	bx	lr

0800ba12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ba12:	b480      	push	{r7}
 800ba14:	b083      	sub	sp, #12
 800ba16:	af00      	add	r7, sp, #0
 800ba18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	f003 0301 	and.w	r3, r3, #1
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	370c      	adds	r7, #12
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr

0800ba2e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ba2e:	b480      	push	{r7}
 800ba30:	b085      	sub	sp, #20
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba48:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ba4c:	f023 0307 	bic.w	r3, r3, #7
 800ba50:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba64:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3714      	adds	r7, #20
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b087      	sub	sp, #28
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	60f8      	str	r0, [r7, #12]
 800ba7c:	460b      	mov	r3, r1
 800ba7e:	607a      	str	r2, [r7, #4]
 800ba80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	333c      	adds	r3, #60	; 0x3c
 800ba8a:	3304      	adds	r3, #4
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba90:	693b      	ldr	r3, [r7, #16]
 800ba92:	4a26      	ldr	r2, [pc, #152]	; (800bb2c <USB_EP0_OutStart+0xb8>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d90a      	bls.n	800baae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800baa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800baa8:	d101      	bne.n	800baae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800baaa:	2300      	movs	r3, #0
 800baac:	e037      	b.n	800bb1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab4:	461a      	mov	r2, r3
 800bab6:	2300      	movs	r3, #0
 800bab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bac0:	691b      	ldr	r3, [r3, #16]
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bacc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bad4:	691b      	ldr	r3, [r3, #16]
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800badc:	f043 0318 	orr.w	r3, r3, #24
 800bae0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baf0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800baf4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800baf6:	7afb      	ldrb	r3, [r7, #11]
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d10f      	bne.n	800bb1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb02:	461a      	mov	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bb08:	697b      	ldr	r3, [r7, #20]
 800bb0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	697a      	ldr	r2, [r7, #20]
 800bb12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bb1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb1c:	2300      	movs	r3, #0
}
 800bb1e:	4618      	mov	r0, r3
 800bb20:	371c      	adds	r7, #28
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr
 800bb2a:	bf00      	nop
 800bb2c:	4f54300a 	.word	0x4f54300a

0800bb30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	4a13      	ldr	r2, [pc, #76]	; (800bb94 <USB_CoreReset+0x64>)
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d901      	bls.n	800bb4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bb4a:	2303      	movs	r3, #3
 800bb4c:	e01b      	b.n	800bb86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	691b      	ldr	r3, [r3, #16]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	daf2      	bge.n	800bb3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bb56:	2300      	movs	r3, #0
 800bb58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	f043 0201 	orr.w	r2, r3, #1
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	3301      	adds	r3, #1
 800bb6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4a09      	ldr	r2, [pc, #36]	; (800bb94 <USB_CoreReset+0x64>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d901      	bls.n	800bb78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bb74:	2303      	movs	r3, #3
 800bb76:	e006      	b.n	800bb86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	691b      	ldr	r3, [r3, #16]
 800bb7c:	f003 0301 	and.w	r3, r3, #1
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d0f0      	beq.n	800bb66 <USB_CoreReset+0x36>

  return HAL_OK;
 800bb84:	2300      	movs	r3, #0
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3714      	adds	r7, #20
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	00030d40 	.word	0x00030d40

0800bb98 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
 800bba0:	460b      	mov	r3, r1
 800bba2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bba4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bba8:	f002 fca6 	bl	800e4f8 <USBD_static_malloc>
 800bbac:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d109      	bne.n	800bbc8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	32b0      	adds	r2, #176	; 0xb0
 800bbbe:	2100      	movs	r1, #0
 800bbc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bbc4:	2302      	movs	r3, #2
 800bbc6:	e0d4      	b.n	800bd72 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bbc8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bbcc:	2100      	movs	r1, #0
 800bbce:	68f8      	ldr	r0, [r7, #12]
 800bbd0:	f002 fedc 	bl	800e98c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	32b0      	adds	r2, #176	; 0xb0
 800bbde:	68f9      	ldr	r1, [r7, #12]
 800bbe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	32b0      	adds	r2, #176	; 0xb0
 800bbee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	7c1b      	ldrb	r3, [r3, #16]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d138      	bne.n	800bc72 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bc00:	4b5e      	ldr	r3, [pc, #376]	; (800bd7c <USBD_CDC_Init+0x1e4>)
 800bc02:	7819      	ldrb	r1, [r3, #0]
 800bc04:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc08:	2202      	movs	r2, #2
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f002 fb51 	bl	800e2b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bc10:	4b5a      	ldr	r3, [pc, #360]	; (800bd7c <USBD_CDC_Init+0x1e4>)
 800bc12:	781b      	ldrb	r3, [r3, #0]
 800bc14:	f003 020f 	and.w	r2, r3, #15
 800bc18:	6879      	ldr	r1, [r7, #4]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	440b      	add	r3, r1
 800bc24:	3324      	adds	r3, #36	; 0x24
 800bc26:	2201      	movs	r2, #1
 800bc28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc2a:	4b55      	ldr	r3, [pc, #340]	; (800bd80 <USBD_CDC_Init+0x1e8>)
 800bc2c:	7819      	ldrb	r1, [r3, #0]
 800bc2e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc32:	2202      	movs	r2, #2
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f002 fb3c 	bl	800e2b2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bc3a:	4b51      	ldr	r3, [pc, #324]	; (800bd80 <USBD_CDC_Init+0x1e8>)
 800bc3c:	781b      	ldrb	r3, [r3, #0]
 800bc3e:	f003 020f 	and.w	r2, r3, #15
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	4613      	mov	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	440b      	add	r3, r1
 800bc4e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bc52:	2201      	movs	r2, #1
 800bc54:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bc56:	4b4b      	ldr	r3, [pc, #300]	; (800bd84 <USBD_CDC_Init+0x1ec>)
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	f003 020f 	and.w	r2, r3, #15
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	4613      	mov	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	4413      	add	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	440b      	add	r3, r1
 800bc6a:	3326      	adds	r3, #38	; 0x26
 800bc6c:	2210      	movs	r2, #16
 800bc6e:	801a      	strh	r2, [r3, #0]
 800bc70:	e035      	b.n	800bcde <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bc72:	4b42      	ldr	r3, [pc, #264]	; (800bd7c <USBD_CDC_Init+0x1e4>)
 800bc74:	7819      	ldrb	r1, [r3, #0]
 800bc76:	2340      	movs	r3, #64	; 0x40
 800bc78:	2202      	movs	r2, #2
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f002 fb19 	bl	800e2b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bc80:	4b3e      	ldr	r3, [pc, #248]	; (800bd7c <USBD_CDC_Init+0x1e4>)
 800bc82:	781b      	ldrb	r3, [r3, #0]
 800bc84:	f003 020f 	and.w	r2, r3, #15
 800bc88:	6879      	ldr	r1, [r7, #4]
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	009b      	lsls	r3, r3, #2
 800bc92:	440b      	add	r3, r1
 800bc94:	3324      	adds	r3, #36	; 0x24
 800bc96:	2201      	movs	r2, #1
 800bc98:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc9a:	4b39      	ldr	r3, [pc, #228]	; (800bd80 <USBD_CDC_Init+0x1e8>)
 800bc9c:	7819      	ldrb	r1, [r3, #0]
 800bc9e:	2340      	movs	r3, #64	; 0x40
 800bca0:	2202      	movs	r2, #2
 800bca2:	6878      	ldr	r0, [r7, #4]
 800bca4:	f002 fb05 	bl	800e2b2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bca8:	4b35      	ldr	r3, [pc, #212]	; (800bd80 <USBD_CDC_Init+0x1e8>)
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	f003 020f 	and.w	r2, r3, #15
 800bcb0:	6879      	ldr	r1, [r7, #4]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	009b      	lsls	r3, r3, #2
 800bcb6:	4413      	add	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	440b      	add	r3, r1
 800bcbc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bcc4:	4b2f      	ldr	r3, [pc, #188]	; (800bd84 <USBD_CDC_Init+0x1ec>)
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	f003 020f 	and.w	r2, r3, #15
 800bccc:	6879      	ldr	r1, [r7, #4]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4413      	add	r3, r2
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	440b      	add	r3, r1
 800bcd8:	3326      	adds	r3, #38	; 0x26
 800bcda:	2210      	movs	r2, #16
 800bcdc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bcde:	4b29      	ldr	r3, [pc, #164]	; (800bd84 <USBD_CDC_Init+0x1ec>)
 800bce0:	7819      	ldrb	r1, [r3, #0]
 800bce2:	2308      	movs	r3, #8
 800bce4:	2203      	movs	r2, #3
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f002 fae3 	bl	800e2b2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bcec:	4b25      	ldr	r3, [pc, #148]	; (800bd84 <USBD_CDC_Init+0x1ec>)
 800bcee:	781b      	ldrb	r3, [r3, #0]
 800bcf0:	f003 020f 	and.w	r2, r3, #15
 800bcf4:	6879      	ldr	r1, [r7, #4]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4413      	add	r3, r2
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	440b      	add	r3, r1
 800bd00:	3324      	adds	r3, #36	; 0x24
 800bd02:	2201      	movs	r2, #1
 800bd04:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd14:	687a      	ldr	r2, [r7, #4]
 800bd16:	33b0      	adds	r3, #176	; 0xb0
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	4413      	add	r3, r2
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bd3c:	2302      	movs	r3, #2
 800bd3e:	e018      	b.n	800bd72 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	7c1b      	ldrb	r3, [r3, #16]
 800bd44:	2b00      	cmp	r3, #0
 800bd46:	d10a      	bne.n	800bd5e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd48:	4b0d      	ldr	r3, [pc, #52]	; (800bd80 <USBD_CDC_Init+0x1e8>)
 800bd4a:	7819      	ldrb	r1, [r3, #0]
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	f002 fb9a 	bl	800e490 <USBD_LL_PrepareReceive>
 800bd5c:	e008      	b.n	800bd70 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd5e:	4b08      	ldr	r3, [pc, #32]	; (800bd80 <USBD_CDC_Init+0x1e8>)
 800bd60:	7819      	ldrb	r1, [r3, #0]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd68:	2340      	movs	r3, #64	; 0x40
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f002 fb90 	bl	800e490 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3710      	adds	r7, #16
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	200000a7 	.word	0x200000a7
 800bd80:	200000a8 	.word	0x200000a8
 800bd84:	200000a9 	.word	0x200000a9

0800bd88 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bd94:	4b3a      	ldr	r3, [pc, #232]	; (800be80 <USBD_CDC_DeInit+0xf8>)
 800bd96:	781b      	ldrb	r3, [r3, #0]
 800bd98:	4619      	mov	r1, r3
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f002 faaf 	bl	800e2fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bda0:	4b37      	ldr	r3, [pc, #220]	; (800be80 <USBD_CDC_DeInit+0xf8>)
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	f003 020f 	and.w	r2, r3, #15
 800bda8:	6879      	ldr	r1, [r7, #4]
 800bdaa:	4613      	mov	r3, r2
 800bdac:	009b      	lsls	r3, r3, #2
 800bdae:	4413      	add	r3, r2
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	440b      	add	r3, r1
 800bdb4:	3324      	adds	r3, #36	; 0x24
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bdba:	4b32      	ldr	r3, [pc, #200]	; (800be84 <USBD_CDC_DeInit+0xfc>)
 800bdbc:	781b      	ldrb	r3, [r3, #0]
 800bdbe:	4619      	mov	r1, r3
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f002 fa9c 	bl	800e2fe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bdc6:	4b2f      	ldr	r3, [pc, #188]	; (800be84 <USBD_CDC_DeInit+0xfc>)
 800bdc8:	781b      	ldrb	r3, [r3, #0]
 800bdca:	f003 020f 	and.w	r2, r3, #15
 800bdce:	6879      	ldr	r1, [r7, #4]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4413      	add	r3, r2
 800bdd6:	009b      	lsls	r3, r3, #2
 800bdd8:	440b      	add	r3, r1
 800bdda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bdde:	2200      	movs	r2, #0
 800bde0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bde2:	4b29      	ldr	r3, [pc, #164]	; (800be88 <USBD_CDC_DeInit+0x100>)
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	4619      	mov	r1, r3
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f002 fa88 	bl	800e2fe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bdee:	4b26      	ldr	r3, [pc, #152]	; (800be88 <USBD_CDC_DeInit+0x100>)
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	f003 020f 	and.w	r2, r3, #15
 800bdf6:	6879      	ldr	r1, [r7, #4]
 800bdf8:	4613      	mov	r3, r2
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	4413      	add	r3, r2
 800bdfe:	009b      	lsls	r3, r3, #2
 800be00:	440b      	add	r3, r1
 800be02:	3324      	adds	r3, #36	; 0x24
 800be04:	2200      	movs	r2, #0
 800be06:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800be08:	4b1f      	ldr	r3, [pc, #124]	; (800be88 <USBD_CDC_DeInit+0x100>)
 800be0a:	781b      	ldrb	r3, [r3, #0]
 800be0c:	f003 020f 	and.w	r2, r3, #15
 800be10:	6879      	ldr	r1, [r7, #4]
 800be12:	4613      	mov	r3, r2
 800be14:	009b      	lsls	r3, r3, #2
 800be16:	4413      	add	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	440b      	add	r3, r1
 800be1c:	3326      	adds	r3, #38	; 0x26
 800be1e:	2200      	movs	r2, #0
 800be20:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	32b0      	adds	r2, #176	; 0xb0
 800be2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d01f      	beq.n	800be74 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	33b0      	adds	r3, #176	; 0xb0
 800be3e:	009b      	lsls	r3, r3, #2
 800be40:	4413      	add	r3, r2
 800be42:	685b      	ldr	r3, [r3, #4]
 800be44:	685b      	ldr	r3, [r3, #4]
 800be46:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	32b0      	adds	r2, #176	; 0xb0
 800be52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be56:	4618      	mov	r0, r3
 800be58:	f002 fb5c 	bl	800e514 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	32b0      	adds	r2, #176	; 0xb0
 800be66:	2100      	movs	r1, #0
 800be68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800be74:	2300      	movs	r3, #0
}
 800be76:	4618      	mov	r0, r3
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}
 800be7e:	bf00      	nop
 800be80:	200000a7 	.word	0x200000a7
 800be84:	200000a8 	.word	0x200000a8
 800be88:	200000a9 	.word	0x200000a9

0800be8c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b086      	sub	sp, #24
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	32b0      	adds	r2, #176	; 0xb0
 800bea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bea4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bea6:	2300      	movs	r3, #0
 800bea8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800beaa:	2300      	movs	r3, #0
 800beac:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800beb8:	2303      	movs	r3, #3
 800beba:	e0bf      	b.n	800c03c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	781b      	ldrb	r3, [r3, #0]
 800bec0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d050      	beq.n	800bf6a <USBD_CDC_Setup+0xde>
 800bec8:	2b20      	cmp	r3, #32
 800beca:	f040 80af 	bne.w	800c02c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	88db      	ldrh	r3, [r3, #6]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d03a      	beq.n	800bf4c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bed6:	683b      	ldr	r3, [r7, #0]
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	b25b      	sxtb	r3, r3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	da1b      	bge.n	800bf18 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	33b0      	adds	r3, #176	; 0xb0
 800beea:	009b      	lsls	r3, r3, #2
 800beec:	4413      	add	r3, r2
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	689b      	ldr	r3, [r3, #8]
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bef6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bef8:	683a      	ldr	r2, [r7, #0]
 800befa:	88d2      	ldrh	r2, [r2, #6]
 800befc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	88db      	ldrh	r3, [r3, #6]
 800bf02:	2b07      	cmp	r3, #7
 800bf04:	bf28      	it	cs
 800bf06:	2307      	movcs	r3, #7
 800bf08:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	89fa      	ldrh	r2, [r7, #14]
 800bf0e:	4619      	mov	r1, r3
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f001 fd89 	bl	800da28 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bf16:	e090      	b.n	800c03a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	785a      	ldrb	r2, [r3, #1]
 800bf1c:	693b      	ldr	r3, [r7, #16]
 800bf1e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bf22:	683b      	ldr	r3, [r7, #0]
 800bf24:	88db      	ldrh	r3, [r3, #6]
 800bf26:	2b3f      	cmp	r3, #63	; 0x3f
 800bf28:	d803      	bhi.n	800bf32 <USBD_CDC_Setup+0xa6>
 800bf2a:	683b      	ldr	r3, [r7, #0]
 800bf2c:	88db      	ldrh	r3, [r3, #6]
 800bf2e:	b2da      	uxtb	r2, r3
 800bf30:	e000      	b.n	800bf34 <USBD_CDC_Setup+0xa8>
 800bf32:	2240      	movs	r2, #64	; 0x40
 800bf34:	693b      	ldr	r3, [r7, #16]
 800bf36:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bf3a:	6939      	ldr	r1, [r7, #16]
 800bf3c:	693b      	ldr	r3, [r7, #16]
 800bf3e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bf42:	461a      	mov	r2, r3
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f001 fd9b 	bl	800da80 <USBD_CtlPrepareRx>
      break;
 800bf4a:	e076      	b.n	800c03a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	33b0      	adds	r3, #176	; 0xb0
 800bf56:	009b      	lsls	r3, r3, #2
 800bf58:	4413      	add	r3, r2
 800bf5a:	685b      	ldr	r3, [r3, #4]
 800bf5c:	689b      	ldr	r3, [r3, #8]
 800bf5e:	683a      	ldr	r2, [r7, #0]
 800bf60:	7850      	ldrb	r0, [r2, #1]
 800bf62:	2200      	movs	r2, #0
 800bf64:	6839      	ldr	r1, [r7, #0]
 800bf66:	4798      	blx	r3
      break;
 800bf68:	e067      	b.n	800c03a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	785b      	ldrb	r3, [r3, #1]
 800bf6e:	2b0b      	cmp	r3, #11
 800bf70:	d851      	bhi.n	800c016 <USBD_CDC_Setup+0x18a>
 800bf72:	a201      	add	r2, pc, #4	; (adr r2, 800bf78 <USBD_CDC_Setup+0xec>)
 800bf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf78:	0800bfa9 	.word	0x0800bfa9
 800bf7c:	0800c025 	.word	0x0800c025
 800bf80:	0800c017 	.word	0x0800c017
 800bf84:	0800c017 	.word	0x0800c017
 800bf88:	0800c017 	.word	0x0800c017
 800bf8c:	0800c017 	.word	0x0800c017
 800bf90:	0800c017 	.word	0x0800c017
 800bf94:	0800c017 	.word	0x0800c017
 800bf98:	0800c017 	.word	0x0800c017
 800bf9c:	0800c017 	.word	0x0800c017
 800bfa0:	0800bfd3 	.word	0x0800bfd3
 800bfa4:	0800bffd 	.word	0x0800bffd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	2b03      	cmp	r3, #3
 800bfb2:	d107      	bne.n	800bfc4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bfb4:	f107 030a 	add.w	r3, r7, #10
 800bfb8:	2202      	movs	r2, #2
 800bfba:	4619      	mov	r1, r3
 800bfbc:	6878      	ldr	r0, [r7, #4]
 800bfbe:	f001 fd33 	bl	800da28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfc2:	e032      	b.n	800c02a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f001 fcbd 	bl	800d946 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfcc:	2303      	movs	r3, #3
 800bfce:	75fb      	strb	r3, [r7, #23]
          break;
 800bfd0:	e02b      	b.n	800c02a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	d107      	bne.n	800bfee <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bfde:	f107 030d 	add.w	r3, r7, #13
 800bfe2:	2201      	movs	r2, #1
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f001 fd1e 	bl	800da28 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bfec:	e01d      	b.n	800c02a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bfee:	6839      	ldr	r1, [r7, #0]
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f001 fca8 	bl	800d946 <USBD_CtlError>
            ret = USBD_FAIL;
 800bff6:	2303      	movs	r3, #3
 800bff8:	75fb      	strb	r3, [r7, #23]
          break;
 800bffa:	e016      	b.n	800c02a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c002:	b2db      	uxtb	r3, r3
 800c004:	2b03      	cmp	r3, #3
 800c006:	d00f      	beq.n	800c028 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c008:	6839      	ldr	r1, [r7, #0]
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f001 fc9b 	bl	800d946 <USBD_CtlError>
            ret = USBD_FAIL;
 800c010:	2303      	movs	r3, #3
 800c012:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c014:	e008      	b.n	800c028 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f001 fc94 	bl	800d946 <USBD_CtlError>
          ret = USBD_FAIL;
 800c01e:	2303      	movs	r3, #3
 800c020:	75fb      	strb	r3, [r7, #23]
          break;
 800c022:	e002      	b.n	800c02a <USBD_CDC_Setup+0x19e>
          break;
 800c024:	bf00      	nop
 800c026:	e008      	b.n	800c03a <USBD_CDC_Setup+0x1ae>
          break;
 800c028:	bf00      	nop
      }
      break;
 800c02a:	e006      	b.n	800c03a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c02c:	6839      	ldr	r1, [r7, #0]
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f001 fc89 	bl	800d946 <USBD_CtlError>
      ret = USBD_FAIL;
 800c034:	2303      	movs	r3, #3
 800c036:	75fb      	strb	r3, [r7, #23]
      break;
 800c038:	bf00      	nop
  }

  return (uint8_t)ret;
 800c03a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}

0800c044 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b084      	sub	sp, #16
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
 800c04c:	460b      	mov	r3, r1
 800c04e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c056:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	32b0      	adds	r2, #176	; 0xb0
 800c062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d101      	bne.n	800c06e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c06a:	2303      	movs	r3, #3
 800c06c:	e065      	b.n	800c13a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	32b0      	adds	r2, #176	; 0xb0
 800c078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c07c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c07e:	78fb      	ldrb	r3, [r7, #3]
 800c080:	f003 020f 	and.w	r2, r3, #15
 800c084:	6879      	ldr	r1, [r7, #4]
 800c086:	4613      	mov	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	4413      	add	r3, r2
 800c08c:	009b      	lsls	r3, r3, #2
 800c08e:	440b      	add	r3, r1
 800c090:	3318      	adds	r3, #24
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d02f      	beq.n	800c0f8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c098:	78fb      	ldrb	r3, [r7, #3]
 800c09a:	f003 020f 	and.w	r2, r3, #15
 800c09e:	6879      	ldr	r1, [r7, #4]
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	440b      	add	r3, r1
 800c0aa:	3318      	adds	r3, #24
 800c0ac:	681a      	ldr	r2, [r3, #0]
 800c0ae:	78fb      	ldrb	r3, [r7, #3]
 800c0b0:	f003 010f 	and.w	r1, r3, #15
 800c0b4:	68f8      	ldr	r0, [r7, #12]
 800c0b6:	460b      	mov	r3, r1
 800c0b8:	00db      	lsls	r3, r3, #3
 800c0ba:	440b      	add	r3, r1
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4403      	add	r3, r0
 800c0c0:	3348      	adds	r3, #72	; 0x48
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	fbb2 f1f3 	udiv	r1, r2, r3
 800c0c8:	fb01 f303 	mul.w	r3, r1, r3
 800c0cc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d112      	bne.n	800c0f8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c0d2:	78fb      	ldrb	r3, [r7, #3]
 800c0d4:	f003 020f 	and.w	r2, r3, #15
 800c0d8:	6879      	ldr	r1, [r7, #4]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	4413      	add	r3, r2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	440b      	add	r3, r1
 800c0e4:	3318      	adds	r3, #24
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c0ea:	78f9      	ldrb	r1, [r7, #3]
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	6878      	ldr	r0, [r7, #4]
 800c0f2:	f002 f9ac 	bl	800e44e <USBD_LL_Transmit>
 800c0f6:	e01f      	b.n	800c138 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	2200      	movs	r2, #0
 800c0fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	33b0      	adds	r3, #176	; 0xb0
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	4413      	add	r3, r2
 800c10e:	685b      	ldr	r3, [r3, #4]
 800c110:	691b      	ldr	r3, [r3, #16]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d010      	beq.n	800c138 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c11c:	687a      	ldr	r2, [r7, #4]
 800c11e:	33b0      	adds	r3, #176	; 0xb0
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	4413      	add	r3, r2
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	691b      	ldr	r3, [r3, #16]
 800c128:	68ba      	ldr	r2, [r7, #8]
 800c12a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c12e:	68ba      	ldr	r2, [r7, #8]
 800c130:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c134:	78fa      	ldrb	r2, [r7, #3]
 800c136:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c138:	2300      	movs	r3, #0
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}

0800c142 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c142:	b580      	push	{r7, lr}
 800c144:	b084      	sub	sp, #16
 800c146:	af00      	add	r7, sp, #0
 800c148:	6078      	str	r0, [r7, #4]
 800c14a:	460b      	mov	r3, r1
 800c14c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	32b0      	adds	r2, #176	; 0xb0
 800c158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c15c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	32b0      	adds	r2, #176	; 0xb0
 800c168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d101      	bne.n	800c174 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c170:	2303      	movs	r3, #3
 800c172:	e01a      	b.n	800c1aa <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c174:	78fb      	ldrb	r3, [r7, #3]
 800c176:	4619      	mov	r1, r3
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f002 f9aa 	bl	800e4d2 <USBD_LL_GetRxDataSize>
 800c17e:	4602      	mov	r2, r0
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	33b0      	adds	r3, #176	; 0xb0
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	4413      	add	r3, r2
 800c194:	685b      	ldr	r3, [r3, #4]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c19e:	68fa      	ldr	r2, [r7, #12]
 800c1a0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c1a4:	4611      	mov	r1, r2
 800c1a6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c1a8:	2300      	movs	r3, #0
}
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3710      	adds	r7, #16
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	bd80      	pop	{r7, pc}

0800c1b2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c1b2:	b580      	push	{r7, lr}
 800c1b4:	b084      	sub	sp, #16
 800c1b6:	af00      	add	r7, sp, #0
 800c1b8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	32b0      	adds	r2, #176	; 0xb0
 800c1c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1c8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	e025      	b.n	800c220 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	33b0      	adds	r3, #176	; 0xb0
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	4413      	add	r3, r2
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d01a      	beq.n	800c21e <USBD_CDC_EP0_RxReady+0x6c>
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c1ee:	2bff      	cmp	r3, #255	; 0xff
 800c1f0:	d015      	beq.n	800c21e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	33b0      	adds	r3, #176	; 0xb0
 800c1fc:	009b      	lsls	r3, r3, #2
 800c1fe:	4413      	add	r3, r2
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c20a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c20c:	68fa      	ldr	r2, [r7, #12]
 800c20e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c212:	b292      	uxth	r2, r2
 800c214:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	22ff      	movs	r2, #255	; 0xff
 800c21a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c21e:	2300      	movs	r3, #0
}
 800c220:	4618      	mov	r0, r3
 800c222:	3710      	adds	r7, #16
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b086      	sub	sp, #24
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c230:	2182      	movs	r1, #130	; 0x82
 800c232:	4818      	ldr	r0, [pc, #96]	; (800c294 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c234:	f000 fd4f 	bl	800ccd6 <USBD_GetEpDesc>
 800c238:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c23a:	2101      	movs	r1, #1
 800c23c:	4815      	ldr	r0, [pc, #84]	; (800c294 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c23e:	f000 fd4a 	bl	800ccd6 <USBD_GetEpDesc>
 800c242:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c244:	2181      	movs	r1, #129	; 0x81
 800c246:	4813      	ldr	r0, [pc, #76]	; (800c294 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c248:	f000 fd45 	bl	800ccd6 <USBD_GetEpDesc>
 800c24c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c24e:	697b      	ldr	r3, [r7, #20]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d002      	beq.n	800c25a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c254:	697b      	ldr	r3, [r7, #20]
 800c256:	2210      	movs	r2, #16
 800c258:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c25a:	693b      	ldr	r3, [r7, #16]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d006      	beq.n	800c26e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	2200      	movs	r2, #0
 800c264:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c268:	711a      	strb	r2, [r3, #4]
 800c26a:	2200      	movs	r2, #0
 800c26c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d006      	beq.n	800c282 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c27c:	711a      	strb	r2, [r3, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	2243      	movs	r2, #67	; 0x43
 800c286:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c288:	4b02      	ldr	r3, [pc, #8]	; (800c294 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3718      	adds	r7, #24
 800c28e:	46bd      	mov	sp, r7
 800c290:	bd80      	pop	{r7, pc}
 800c292:	bf00      	nop
 800c294:	20000064 	.word	0x20000064

0800c298 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b086      	sub	sp, #24
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c2a0:	2182      	movs	r1, #130	; 0x82
 800c2a2:	4818      	ldr	r0, [pc, #96]	; (800c304 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c2a4:	f000 fd17 	bl	800ccd6 <USBD_GetEpDesc>
 800c2a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c2aa:	2101      	movs	r1, #1
 800c2ac:	4815      	ldr	r0, [pc, #84]	; (800c304 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c2ae:	f000 fd12 	bl	800ccd6 <USBD_GetEpDesc>
 800c2b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c2b4:	2181      	movs	r1, #129	; 0x81
 800c2b6:	4813      	ldr	r0, [pc, #76]	; (800c304 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c2b8:	f000 fd0d 	bl	800ccd6 <USBD_GetEpDesc>
 800c2bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d002      	beq.n	800c2ca <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c2c4:	697b      	ldr	r3, [r7, #20]
 800c2c6:	2210      	movs	r2, #16
 800c2c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d006      	beq.n	800c2de <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	711a      	strb	r2, [r3, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f042 0202 	orr.w	r2, r2, #2
 800c2dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d006      	beq.n	800c2f2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	711a      	strb	r2, [r3, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f042 0202 	orr.w	r2, r2, #2
 800c2f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2243      	movs	r2, #67	; 0x43
 800c2f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c2f8:	4b02      	ldr	r3, [pc, #8]	; (800c304 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
 800c302:	bf00      	nop
 800c304:	20000064 	.word	0x20000064

0800c308 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b086      	sub	sp, #24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c310:	2182      	movs	r1, #130	; 0x82
 800c312:	4818      	ldr	r0, [pc, #96]	; (800c374 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c314:	f000 fcdf 	bl	800ccd6 <USBD_GetEpDesc>
 800c318:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c31a:	2101      	movs	r1, #1
 800c31c:	4815      	ldr	r0, [pc, #84]	; (800c374 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c31e:	f000 fcda 	bl	800ccd6 <USBD_GetEpDesc>
 800c322:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c324:	2181      	movs	r1, #129	; 0x81
 800c326:	4813      	ldr	r0, [pc, #76]	; (800c374 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c328:	f000 fcd5 	bl	800ccd6 <USBD_GetEpDesc>
 800c32c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d002      	beq.n	800c33a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	2210      	movs	r2, #16
 800c338:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d006      	beq.n	800c34e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	2200      	movs	r2, #0
 800c344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c348:	711a      	strb	r2, [r3, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d006      	beq.n	800c362 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2200      	movs	r2, #0
 800c358:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c35c:	711a      	strb	r2, [r3, #4]
 800c35e:	2200      	movs	r2, #0
 800c360:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2243      	movs	r2, #67	; 0x43
 800c366:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c368:	4b02      	ldr	r3, [pc, #8]	; (800c374 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	3718      	adds	r7, #24
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20000064 	.word	0x20000064

0800c378 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c378:	b480      	push	{r7}
 800c37a:	b083      	sub	sp, #12
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	220a      	movs	r2, #10
 800c384:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c386:	4b03      	ldr	r3, [pc, #12]	; (800c394 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c388:	4618      	mov	r0, r3
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr
 800c394:	20000020 	.word	0x20000020

0800c398 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d101      	bne.n	800c3ac <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c3a8:	2303      	movs	r3, #3
 800c3aa:	e009      	b.n	800c3c0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3b2:	687a      	ldr	r2, [r7, #4]
 800c3b4:	33b0      	adds	r3, #176	; 0xb0
 800c3b6:	009b      	lsls	r3, r3, #2
 800c3b8:	4413      	add	r3, r2
 800c3ba:	683a      	ldr	r2, [r7, #0]
 800c3bc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c3be:	2300      	movs	r3, #0
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	370c      	adds	r7, #12
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ca:	4770      	bx	lr

0800c3cc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c3cc:	b480      	push	{r7}
 800c3ce:	b087      	sub	sp, #28
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	60f8      	str	r0, [r7, #12]
 800c3d4:	60b9      	str	r1, [r7, #8]
 800c3d6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	32b0      	adds	r2, #176	; 0xb0
 800c3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3e6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c3e8:	697b      	ldr	r3, [r7, #20]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d101      	bne.n	800c3f2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e008      	b.n	800c404 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	68ba      	ldr	r2, [r7, #8]
 800c3f6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c402:	2300      	movs	r3, #0
}
 800c404:	4618      	mov	r0, r3
 800c406:	371c      	adds	r7, #28
 800c408:	46bd      	mov	sp, r7
 800c40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40e:	4770      	bx	lr

0800c410 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c410:	b480      	push	{r7}
 800c412:	b085      	sub	sp, #20
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
 800c418:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	32b0      	adds	r2, #176	; 0xb0
 800c424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c428:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d101      	bne.n	800c434 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c430:	2303      	movs	r3, #3
 800c432:	e004      	b.n	800c43e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	683a      	ldr	r2, [r7, #0]
 800c438:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3714      	adds	r7, #20
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
	...

0800c44c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	32b0      	adds	r2, #176	; 0xb0
 800c45e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c462:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c464:	2301      	movs	r3, #1
 800c466:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	32b0      	adds	r2, #176	; 0xb0
 800c472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d101      	bne.n	800c47e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c47a:	2303      	movs	r3, #3
 800c47c:	e025      	b.n	800c4ca <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c484:	2b00      	cmp	r3, #0
 800c486:	d11f      	bne.n	800c4c8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	2201      	movs	r2, #1
 800c48c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c490:	4b10      	ldr	r3, [pc, #64]	; (800c4d4 <USBD_CDC_TransmitPacket+0x88>)
 800c492:	781b      	ldrb	r3, [r3, #0]
 800c494:	f003 020f 	and.w	r2, r3, #15
 800c498:	68bb      	ldr	r3, [r7, #8]
 800c49a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c49e:	6878      	ldr	r0, [r7, #4]
 800c4a0:	4613      	mov	r3, r2
 800c4a2:	009b      	lsls	r3, r3, #2
 800c4a4:	4413      	add	r3, r2
 800c4a6:	009b      	lsls	r3, r3, #2
 800c4a8:	4403      	add	r3, r0
 800c4aa:	3318      	adds	r3, #24
 800c4ac:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c4ae:	4b09      	ldr	r3, [pc, #36]	; (800c4d4 <USBD_CDC_TransmitPacket+0x88>)
 800c4b0:	7819      	ldrb	r1, [r3, #0]
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	f001 ffc5 	bl	800e44e <USBD_LL_Transmit>

    ret = USBD_OK;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3710      	adds	r7, #16
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	200000a7 	.word	0x200000a7

0800c4d8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	32b0      	adds	r2, #176	; 0xb0
 800c4ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ee:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	32b0      	adds	r2, #176	; 0xb0
 800c4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d101      	bne.n	800c506 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c502:	2303      	movs	r3, #3
 800c504:	e018      	b.n	800c538 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	7c1b      	ldrb	r3, [r3, #16]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10a      	bne.n	800c524 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c50e:	4b0c      	ldr	r3, [pc, #48]	; (800c540 <USBD_CDC_ReceivePacket+0x68>)
 800c510:	7819      	ldrb	r1, [r3, #0]
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f001 ffb7 	bl	800e490 <USBD_LL_PrepareReceive>
 800c522:	e008      	b.n	800c536 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c524:	4b06      	ldr	r3, [pc, #24]	; (800c540 <USBD_CDC_ReceivePacket+0x68>)
 800c526:	7819      	ldrb	r1, [r3, #0]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c52e:	2340      	movs	r3, #64	; 0x40
 800c530:	6878      	ldr	r0, [r7, #4]
 800c532:	f001 ffad 	bl	800e490 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c536:	2300      	movs	r3, #0
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3710      	adds	r7, #16
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}
 800c540:	200000a8 	.word	0x200000a8

0800c544 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b086      	sub	sp, #24
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	4613      	mov	r3, r2
 800c550:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d101      	bne.n	800c55c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c558:	2303      	movs	r3, #3
 800c55a:	e01f      	b.n	800c59c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	2200      	movs	r2, #0
 800c568:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2200      	movs	r2, #0
 800c570:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d003      	beq.n	800c582 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2201      	movs	r2, #1
 800c586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	79fa      	ldrb	r2, [r7, #7]
 800c58e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c590:	68f8      	ldr	r0, [r7, #12]
 800c592:	f001 fe27 	bl	800e1e4 <USBD_LL_Init>
 800c596:	4603      	mov	r3, r0
 800c598:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c59a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c59c:	4618      	mov	r0, r3
 800c59e:	3718      	adds	r7, #24
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}

0800c5a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c5a4:	b580      	push	{r7, lr}
 800c5a6:	b084      	sub	sp, #16
 800c5a8:	af00      	add	r7, sp, #0
 800c5aa:	6078      	str	r0, [r7, #4]
 800c5ac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c5b2:	683b      	ldr	r3, [r7, #0]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d101      	bne.n	800c5bc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c5b8:	2303      	movs	r3, #3
 800c5ba:	e025      	b.n	800c608 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	683a      	ldr	r2, [r7, #0]
 800c5c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	32ae      	adds	r2, #174	; 0xae
 800c5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d00f      	beq.n	800c5f8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	32ae      	adds	r2, #174	; 0xae
 800c5e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5e8:	f107 020e 	add.w	r2, r7, #14
 800c5ec:	4610      	mov	r0, r2
 800c5ee:	4798      	blx	r3
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c5fe:	1c5a      	adds	r2, r3, #1
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b082      	sub	sp, #8
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c618:	6878      	ldr	r0, [r7, #4]
 800c61a:	f001 fe2f 	bl	800e27c <USBD_LL_Start>
 800c61e:	4603      	mov	r3, r0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c628:	b480      	push	{r7}
 800c62a:	b083      	sub	sp, #12
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c630:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c632:	4618      	mov	r0, r3
 800c634:	370c      	adds	r7, #12
 800c636:	46bd      	mov	sp, r7
 800c638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c63c:	4770      	bx	lr

0800c63e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c63e:	b580      	push	{r7, lr}
 800c640:	b084      	sub	sp, #16
 800c642:	af00      	add	r7, sp, #0
 800c644:	6078      	str	r0, [r7, #4]
 800c646:	460b      	mov	r3, r1
 800c648:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c64a:	2300      	movs	r3, #0
 800c64c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c654:	2b00      	cmp	r3, #0
 800c656:	d009      	beq.n	800c66c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	78fa      	ldrb	r2, [r7, #3]
 800c662:	4611      	mov	r1, r2
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	4798      	blx	r3
 800c668:	4603      	mov	r3, r0
 800c66a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}

0800c676 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c676:	b580      	push	{r7, lr}
 800c678:	b084      	sub	sp, #16
 800c67a:	af00      	add	r7, sp, #0
 800c67c:	6078      	str	r0, [r7, #4]
 800c67e:	460b      	mov	r3, r1
 800c680:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c682:	2300      	movs	r3, #0
 800c684:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c68c:	685b      	ldr	r3, [r3, #4]
 800c68e:	78fa      	ldrb	r2, [r7, #3]
 800c690:	4611      	mov	r1, r2
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	4798      	blx	r3
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d001      	beq.n	800c6a0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c69c:	2303      	movs	r3, #3
 800c69e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c6a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3710      	adds	r7, #16
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b084      	sub	sp, #16
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f001 f908 	bl	800d8d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c6d0:	461a      	mov	r2, r3
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c6de:	f003 031f 	and.w	r3, r3, #31
 800c6e2:	2b02      	cmp	r3, #2
 800c6e4:	d01a      	beq.n	800c71c <USBD_LL_SetupStage+0x72>
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	d822      	bhi.n	800c730 <USBD_LL_SetupStage+0x86>
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d002      	beq.n	800c6f4 <USBD_LL_SetupStage+0x4a>
 800c6ee:	2b01      	cmp	r3, #1
 800c6f0:	d00a      	beq.n	800c708 <USBD_LL_SetupStage+0x5e>
 800c6f2:	e01d      	b.n	800c730 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c6fa:	4619      	mov	r1, r3
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 fb5f 	bl	800cdc0 <USBD_StdDevReq>
 800c702:	4603      	mov	r3, r0
 800c704:	73fb      	strb	r3, [r7, #15]
      break;
 800c706:	e020      	b.n	800c74a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 fbc7 	bl	800cea4 <USBD_StdItfReq>
 800c716:	4603      	mov	r3, r0
 800c718:	73fb      	strb	r3, [r7, #15]
      break;
 800c71a:	e016      	b.n	800c74a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c722:	4619      	mov	r1, r3
 800c724:	6878      	ldr	r0, [r7, #4]
 800c726:	f000 fc29 	bl	800cf7c <USBD_StdEPReq>
 800c72a:	4603      	mov	r3, r0
 800c72c:	73fb      	strb	r3, [r7, #15]
      break;
 800c72e:	e00c      	b.n	800c74a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c736:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c73a:	b2db      	uxtb	r3, r3
 800c73c:	4619      	mov	r1, r3
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f001 fdfc 	bl	800e33c <USBD_LL_StallEP>
 800c744:	4603      	mov	r3, r0
 800c746:	73fb      	strb	r3, [r7, #15]
      break;
 800c748:	bf00      	nop
  }

  return ret;
 800c74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b086      	sub	sp, #24
 800c758:	af00      	add	r7, sp, #0
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	460b      	mov	r3, r1
 800c75e:	607a      	str	r2, [r7, #4]
 800c760:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c762:	2300      	movs	r3, #0
 800c764:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c766:	7afb      	ldrb	r3, [r7, #11]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d16e      	bne.n	800c84a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c772:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c77a:	2b03      	cmp	r3, #3
 800c77c:	f040 8098 	bne.w	800c8b0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c780:	693b      	ldr	r3, [r7, #16]
 800c782:	689a      	ldr	r2, [r3, #8]
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d913      	bls.n	800c7b4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	689a      	ldr	r2, [r3, #8]
 800c790:	693b      	ldr	r3, [r7, #16]
 800c792:	68db      	ldr	r3, [r3, #12]
 800c794:	1ad2      	subs	r2, r2, r3
 800c796:	693b      	ldr	r3, [r7, #16]
 800c798:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	68da      	ldr	r2, [r3, #12]
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	689b      	ldr	r3, [r3, #8]
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	bf28      	it	cs
 800c7a6:	4613      	movcs	r3, r2
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	6879      	ldr	r1, [r7, #4]
 800c7ac:	68f8      	ldr	r0, [r7, #12]
 800c7ae:	f001 f984 	bl	800daba <USBD_CtlContinueRx>
 800c7b2:	e07d      	b.n	800c8b0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c7ba:	f003 031f 	and.w	r3, r3, #31
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d014      	beq.n	800c7ec <USBD_LL_DataOutStage+0x98>
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d81d      	bhi.n	800c802 <USBD_LL_DataOutStage+0xae>
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d002      	beq.n	800c7d0 <USBD_LL_DataOutStage+0x7c>
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d003      	beq.n	800c7d6 <USBD_LL_DataOutStage+0x82>
 800c7ce:	e018      	b.n	800c802 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	75bb      	strb	r3, [r7, #22]
            break;
 800c7d4:	e018      	b.n	800c808 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c7dc:	b2db      	uxtb	r3, r3
 800c7de:	4619      	mov	r1, r3
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f000 fa5e 	bl	800cca2 <USBD_CoreFindIF>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	75bb      	strb	r3, [r7, #22]
            break;
 800c7ea:	e00d      	b.n	800c808 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c7f2:	b2db      	uxtb	r3, r3
 800c7f4:	4619      	mov	r1, r3
 800c7f6:	68f8      	ldr	r0, [r7, #12]
 800c7f8:	f000 fa60 	bl	800ccbc <USBD_CoreFindEP>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	75bb      	strb	r3, [r7, #22]
            break;
 800c800:	e002      	b.n	800c808 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c802:	2300      	movs	r3, #0
 800c804:	75bb      	strb	r3, [r7, #22]
            break;
 800c806:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c808:	7dbb      	ldrb	r3, [r7, #22]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d119      	bne.n	800c842 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c814:	b2db      	uxtb	r3, r3
 800c816:	2b03      	cmp	r3, #3
 800c818:	d113      	bne.n	800c842 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c81a:	7dba      	ldrb	r2, [r7, #22]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	32ae      	adds	r2, #174	; 0xae
 800c820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c824:	691b      	ldr	r3, [r3, #16]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d00b      	beq.n	800c842 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c82a:	7dba      	ldrb	r2, [r7, #22]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c832:	7dba      	ldrb	r2, [r7, #22]
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	32ae      	adds	r2, #174	; 0xae
 800c838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	68f8      	ldr	r0, [r7, #12]
 800c840:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f001 f94a 	bl	800dadc <USBD_CtlSendStatus>
 800c848:	e032      	b.n	800c8b0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c84a:	7afb      	ldrb	r3, [r7, #11]
 800c84c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c850:	b2db      	uxtb	r3, r3
 800c852:	4619      	mov	r1, r3
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f000 fa31 	bl	800ccbc <USBD_CoreFindEP>
 800c85a:	4603      	mov	r3, r0
 800c85c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c85e:	7dbb      	ldrb	r3, [r7, #22]
 800c860:	2bff      	cmp	r3, #255	; 0xff
 800c862:	d025      	beq.n	800c8b0 <USBD_LL_DataOutStage+0x15c>
 800c864:	7dbb      	ldrb	r3, [r7, #22]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d122      	bne.n	800c8b0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c870:	b2db      	uxtb	r3, r3
 800c872:	2b03      	cmp	r3, #3
 800c874:	d117      	bne.n	800c8a6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c876:	7dba      	ldrb	r2, [r7, #22]
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	32ae      	adds	r2, #174	; 0xae
 800c87c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c880:	699b      	ldr	r3, [r3, #24]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00f      	beq.n	800c8a6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c886:	7dba      	ldrb	r2, [r7, #22]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c88e:	7dba      	ldrb	r2, [r7, #22]
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	32ae      	adds	r2, #174	; 0xae
 800c894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c898:	699b      	ldr	r3, [r3, #24]
 800c89a:	7afa      	ldrb	r2, [r7, #11]
 800c89c:	4611      	mov	r1, r2
 800c89e:	68f8      	ldr	r0, [r7, #12]
 800c8a0:	4798      	blx	r3
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c8a6:	7dfb      	ldrb	r3, [r7, #23]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d001      	beq.n	800c8b0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c8ac:	7dfb      	ldrb	r3, [r7, #23]
 800c8ae:	e000      	b.n	800c8b2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c8b0:	2300      	movs	r3, #0
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	3718      	adds	r7, #24
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	bd80      	pop	{r7, pc}

0800c8ba <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c8ba:	b580      	push	{r7, lr}
 800c8bc:	b086      	sub	sp, #24
 800c8be:	af00      	add	r7, sp, #0
 800c8c0:	60f8      	str	r0, [r7, #12]
 800c8c2:	460b      	mov	r3, r1
 800c8c4:	607a      	str	r2, [r7, #4]
 800c8c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c8c8:	7afb      	ldrb	r3, [r7, #11]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d16f      	bne.n	800c9ae <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	3314      	adds	r3, #20
 800c8d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c8da:	2b02      	cmp	r3, #2
 800c8dc:	d15a      	bne.n	800c994 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	689a      	ldr	r2, [r3, #8]
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d914      	bls.n	800c914 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c8ea:	693b      	ldr	r3, [r7, #16]
 800c8ec:	689a      	ldr	r2, [r3, #8]
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	68db      	ldr	r3, [r3, #12]
 800c8f2:	1ad2      	subs	r2, r2, r3
 800c8f4:	693b      	ldr	r3, [r7, #16]
 800c8f6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c8f8:	693b      	ldr	r3, [r7, #16]
 800c8fa:	689b      	ldr	r3, [r3, #8]
 800c8fc:	461a      	mov	r2, r3
 800c8fe:	6879      	ldr	r1, [r7, #4]
 800c900:	68f8      	ldr	r0, [r7, #12]
 800c902:	f001 f8ac 	bl	800da5e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c906:	2300      	movs	r3, #0
 800c908:	2200      	movs	r2, #0
 800c90a:	2100      	movs	r1, #0
 800c90c:	68f8      	ldr	r0, [r7, #12]
 800c90e:	f001 fdbf 	bl	800e490 <USBD_LL_PrepareReceive>
 800c912:	e03f      	b.n	800c994 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	68da      	ldr	r2, [r3, #12]
 800c918:	693b      	ldr	r3, [r7, #16]
 800c91a:	689b      	ldr	r3, [r3, #8]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d11c      	bne.n	800c95a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	685a      	ldr	r2, [r3, #4]
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c928:	429a      	cmp	r2, r3
 800c92a:	d316      	bcc.n	800c95a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	685a      	ldr	r2, [r3, #4]
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c936:	429a      	cmp	r2, r3
 800c938:	d20f      	bcs.n	800c95a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c93a:	2200      	movs	r2, #0
 800c93c:	2100      	movs	r1, #0
 800c93e:	68f8      	ldr	r0, [r7, #12]
 800c940:	f001 f88d 	bl	800da5e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c94c:	2300      	movs	r3, #0
 800c94e:	2200      	movs	r2, #0
 800c950:	2100      	movs	r1, #0
 800c952:	68f8      	ldr	r0, [r7, #12]
 800c954:	f001 fd9c 	bl	800e490 <USBD_LL_PrepareReceive>
 800c958:	e01c      	b.n	800c994 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c960:	b2db      	uxtb	r3, r3
 800c962:	2b03      	cmp	r3, #3
 800c964:	d10f      	bne.n	800c986 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c96c:	68db      	ldr	r3, [r3, #12]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d009      	beq.n	800c986 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	2200      	movs	r2, #0
 800c976:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c980:	68db      	ldr	r3, [r3, #12]
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c986:	2180      	movs	r1, #128	; 0x80
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f001 fcd7 	bl	800e33c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c98e:	68f8      	ldr	r0, [r7, #12]
 800c990:	f001 f8b7 	bl	800db02 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d03a      	beq.n	800ca14 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c99e:	68f8      	ldr	r0, [r7, #12]
 800c9a0:	f7ff fe42 	bl	800c628 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c9ac:	e032      	b.n	800ca14 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c9ae:	7afb      	ldrb	r3, [r7, #11]
 800c9b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c9b4:	b2db      	uxtb	r3, r3
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	68f8      	ldr	r0, [r7, #12]
 800c9ba:	f000 f97f 	bl	800ccbc <USBD_CoreFindEP>
 800c9be:	4603      	mov	r3, r0
 800c9c0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c9c2:	7dfb      	ldrb	r3, [r7, #23]
 800c9c4:	2bff      	cmp	r3, #255	; 0xff
 800c9c6:	d025      	beq.n	800ca14 <USBD_LL_DataInStage+0x15a>
 800c9c8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d122      	bne.n	800ca14 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9d4:	b2db      	uxtb	r3, r3
 800c9d6:	2b03      	cmp	r3, #3
 800c9d8:	d11c      	bne.n	800ca14 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c9da:	7dfa      	ldrb	r2, [r7, #23]
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	32ae      	adds	r2, #174	; 0xae
 800c9e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9e4:	695b      	ldr	r3, [r3, #20]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d014      	beq.n	800ca14 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c9ea:	7dfa      	ldrb	r2, [r7, #23]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c9f2:	7dfa      	ldrb	r2, [r7, #23]
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	32ae      	adds	r2, #174	; 0xae
 800c9f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9fc:	695b      	ldr	r3, [r3, #20]
 800c9fe:	7afa      	ldrb	r2, [r7, #11]
 800ca00:	4611      	mov	r1, r2
 800ca02:	68f8      	ldr	r0, [r7, #12]
 800ca04:	4798      	blx	r3
 800ca06:	4603      	mov	r3, r0
 800ca08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ca0a:	7dbb      	ldrb	r3, [r7, #22]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d001      	beq.n	800ca14 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ca10:	7dbb      	ldrb	r3, [r7, #22]
 800ca12:	e000      	b.n	800ca16 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3718      	adds	r7, #24
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b084      	sub	sp, #16
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca26:	2300      	movs	r3, #0
 800ca28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	2201      	movs	r2, #1
 800ca2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	2200      	movs	r2, #0
 800ca36:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d014      	beq.n	800ca84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00e      	beq.n	800ca84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	6852      	ldr	r2, [r2, #4]
 800ca72:	b2d2      	uxtb	r2, r2
 800ca74:	4611      	mov	r1, r2
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	4798      	blx	r3
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d001      	beq.n	800ca84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ca80:	2303      	movs	r3, #3
 800ca82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca84:	2340      	movs	r3, #64	; 0x40
 800ca86:	2200      	movs	r2, #0
 800ca88:	2100      	movs	r1, #0
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f001 fc11 	bl	800e2b2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2201      	movs	r2, #1
 800ca94:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2240      	movs	r2, #64	; 0x40
 800ca9c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800caa0:	2340      	movs	r3, #64	; 0x40
 800caa2:	2200      	movs	r2, #0
 800caa4:	2180      	movs	r1, #128	; 0x80
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f001 fc03 	bl	800e2b2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2201      	movs	r2, #1
 800cab0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2240      	movs	r2, #64	; 0x40
 800cab6:	621a      	str	r2, [r3, #32]

  return ret;
 800cab8:	7bfb      	ldrb	r3, [r7, #15]
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cac2:	b480      	push	{r7}
 800cac4:	b083      	sub	sp, #12
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
 800caca:	460b      	mov	r3, r1
 800cacc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	78fa      	ldrb	r2, [r7, #3]
 800cad2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cad4:	2300      	movs	r3, #0
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	370c      	adds	r7, #12
 800cada:	46bd      	mov	sp, r7
 800cadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae0:	4770      	bx	lr

0800cae2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cae2:	b480      	push	{r7}
 800cae4:	b083      	sub	sp, #12
 800cae6:	af00      	add	r7, sp, #0
 800cae8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2204      	movs	r2, #4
 800cafc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cb00:	2300      	movs	r3, #0
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cb0e:	b480      	push	{r7}
 800cb10:	b083      	sub	sp, #12
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	2b04      	cmp	r3, #4
 800cb20:	d106      	bne.n	800cb30 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cb30:	2300      	movs	r3, #0
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	370c      	adds	r7, #12
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cb3e:	b580      	push	{r7, lr}
 800cb40:	b082      	sub	sp, #8
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb4c:	b2db      	uxtb	r3, r3
 800cb4e:	2b03      	cmp	r3, #3
 800cb50:	d110      	bne.n	800cb74 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d00b      	beq.n	800cb74 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb62:	69db      	ldr	r3, [r3, #28]
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d005      	beq.n	800cb74 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb6e:	69db      	ldr	r3, [r3, #28]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cb74:	2300      	movs	r3, #0
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3708      	adds	r7, #8
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b082      	sub	sp, #8
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	460b      	mov	r3, r1
 800cb88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	32ae      	adds	r2, #174	; 0xae
 800cb94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d101      	bne.n	800cba0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cb9c:	2303      	movs	r3, #3
 800cb9e:	e01c      	b.n	800cbda <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cba6:	b2db      	uxtb	r3, r3
 800cba8:	2b03      	cmp	r3, #3
 800cbaa:	d115      	bne.n	800cbd8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	32ae      	adds	r2, #174	; 0xae
 800cbb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbba:	6a1b      	ldr	r3, [r3, #32]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d00b      	beq.n	800cbd8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	32ae      	adds	r2, #174	; 0xae
 800cbca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbce:	6a1b      	ldr	r3, [r3, #32]
 800cbd0:	78fa      	ldrb	r2, [r7, #3]
 800cbd2:	4611      	mov	r1, r2
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cbd8:	2300      	movs	r3, #0
}
 800cbda:	4618      	mov	r0, r3
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b082      	sub	sp, #8
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	6078      	str	r0, [r7, #4]
 800cbea:	460b      	mov	r3, r1
 800cbec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	32ae      	adds	r2, #174	; 0xae
 800cbf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d101      	bne.n	800cc04 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cc00:	2303      	movs	r3, #3
 800cc02:	e01c      	b.n	800cc3e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc0a:	b2db      	uxtb	r3, r3
 800cc0c:	2b03      	cmp	r3, #3
 800cc0e:	d115      	bne.n	800cc3c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	32ae      	adds	r2, #174	; 0xae
 800cc1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00b      	beq.n	800cc3c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	32ae      	adds	r2, #174	; 0xae
 800cc2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc34:	78fa      	ldrb	r2, [r7, #3]
 800cc36:	4611      	mov	r1, r2
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cc3c:	2300      	movs	r3, #0
}
 800cc3e:	4618      	mov	r0, r3
 800cc40:	3708      	adds	r7, #8
 800cc42:	46bd      	mov	sp, r7
 800cc44:	bd80      	pop	{r7, pc}

0800cc46 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cc46:	b480      	push	{r7}
 800cc48:	b083      	sub	sp, #12
 800cc4a:	af00      	add	r7, sp, #0
 800cc4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cc4e:	2300      	movs	r3, #0
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	370c      	adds	r7, #12
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cc64:	2300      	movs	r3, #0
 800cc66:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2201      	movs	r2, #1
 800cc6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d00e      	beq.n	800cc98 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc80:	685b      	ldr	r3, [r3, #4]
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	6852      	ldr	r2, [r2, #4]
 800cc86:	b2d2      	uxtb	r2, r2
 800cc88:	4611      	mov	r1, r2
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	4798      	blx	r3
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cc94:	2303      	movs	r3, #3
 800cc96:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}

0800cca2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cca2:	b480      	push	{r7}
 800cca4:	b083      	sub	sp, #12
 800cca6:	af00      	add	r7, sp, #0
 800cca8:	6078      	str	r0, [r7, #4]
 800ccaa:	460b      	mov	r3, r1
 800ccac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ccae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ccc8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	370c      	adds	r7, #12
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b086      	sub	sp, #24
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	460b      	mov	r3, r1
 800cce0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ccea:	2300      	movs	r3, #0
 800ccec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	885b      	ldrh	r3, [r3, #2]
 800ccf2:	b29a      	uxth	r2, r3
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	781b      	ldrb	r3, [r3, #0]
 800ccf8:	b29b      	uxth	r3, r3
 800ccfa:	429a      	cmp	r2, r3
 800ccfc:	d920      	bls.n	800cd40 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cd06:	e013      	b.n	800cd30 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cd08:	f107 030a 	add.w	r3, r7, #10
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	6978      	ldr	r0, [r7, #20]
 800cd10:	f000 f81b 	bl	800cd4a <USBD_GetNextDesc>
 800cd14:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cd16:	697b      	ldr	r3, [r7, #20]
 800cd18:	785b      	ldrb	r3, [r3, #1]
 800cd1a:	2b05      	cmp	r3, #5
 800cd1c:	d108      	bne.n	800cd30 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cd1e:	697b      	ldr	r3, [r7, #20]
 800cd20:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cd22:	693b      	ldr	r3, [r7, #16]
 800cd24:	789b      	ldrb	r3, [r3, #2]
 800cd26:	78fa      	ldrb	r2, [r7, #3]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d008      	beq.n	800cd3e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	885b      	ldrh	r3, [r3, #2]
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	897b      	ldrh	r3, [r7, #10]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d8e5      	bhi.n	800cd08 <USBD_GetEpDesc+0x32>
 800cd3c:	e000      	b.n	800cd40 <USBD_GetEpDesc+0x6a>
          break;
 800cd3e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cd40:	693b      	ldr	r3, [r7, #16]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3718      	adds	r7, #24
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cd4a:	b480      	push	{r7}
 800cd4c:	b085      	sub	sp, #20
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
 800cd52:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	881a      	ldrh	r2, [r3, #0]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	b29b      	uxth	r3, r3
 800cd62:	4413      	add	r3, r2
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	781b      	ldrb	r3, [r3, #0]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4413      	add	r3, r2
 800cd74:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cd76:	68fb      	ldr	r3, [r7, #12]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3714      	adds	r7, #20
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd82:	4770      	bx	lr

0800cd84 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b087      	sub	sp, #28
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	781b      	ldrb	r3, [r3, #0]
 800cd94:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	3301      	adds	r3, #1
 800cd9a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	781b      	ldrb	r3, [r3, #0]
 800cda0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cda2:	8a3b      	ldrh	r3, [r7, #16]
 800cda4:	021b      	lsls	r3, r3, #8
 800cda6:	b21a      	sxth	r2, r3
 800cda8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cdac:	4313      	orrs	r3, r2
 800cdae:	b21b      	sxth	r3, r3
 800cdb0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cdb2:	89fb      	ldrh	r3, [r7, #14]
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	371c      	adds	r7, #28
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b084      	sub	sp, #16
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	781b      	ldrb	r3, [r3, #0]
 800cdd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cdd6:	2b40      	cmp	r3, #64	; 0x40
 800cdd8:	d005      	beq.n	800cde6 <USBD_StdDevReq+0x26>
 800cdda:	2b40      	cmp	r3, #64	; 0x40
 800cddc:	d857      	bhi.n	800ce8e <USBD_StdDevReq+0xce>
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d00f      	beq.n	800ce02 <USBD_StdDevReq+0x42>
 800cde2:	2b20      	cmp	r3, #32
 800cde4:	d153      	bne.n	800ce8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	32ae      	adds	r2, #174	; 0xae
 800cdf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	6839      	ldr	r1, [r7, #0]
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	4798      	blx	r3
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	73fb      	strb	r3, [r7, #15]
      break;
 800ce00:	e04a      	b.n	800ce98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	785b      	ldrb	r3, [r3, #1]
 800ce06:	2b09      	cmp	r3, #9
 800ce08:	d83b      	bhi.n	800ce82 <USBD_StdDevReq+0xc2>
 800ce0a:	a201      	add	r2, pc, #4	; (adr r2, 800ce10 <USBD_StdDevReq+0x50>)
 800ce0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce10:	0800ce65 	.word	0x0800ce65
 800ce14:	0800ce79 	.word	0x0800ce79
 800ce18:	0800ce83 	.word	0x0800ce83
 800ce1c:	0800ce6f 	.word	0x0800ce6f
 800ce20:	0800ce83 	.word	0x0800ce83
 800ce24:	0800ce43 	.word	0x0800ce43
 800ce28:	0800ce39 	.word	0x0800ce39
 800ce2c:	0800ce83 	.word	0x0800ce83
 800ce30:	0800ce5b 	.word	0x0800ce5b
 800ce34:	0800ce4d 	.word	0x0800ce4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ce38:	6839      	ldr	r1, [r7, #0]
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 fa3c 	bl	800d2b8 <USBD_GetDescriptor>
          break;
 800ce40:	e024      	b.n	800ce8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ce42:	6839      	ldr	r1, [r7, #0]
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 fba1 	bl	800d58c <USBD_SetAddress>
          break;
 800ce4a:	e01f      	b.n	800ce8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ce4c:	6839      	ldr	r1, [r7, #0]
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fbe0 	bl	800d614 <USBD_SetConfig>
 800ce54:	4603      	mov	r3, r0
 800ce56:	73fb      	strb	r3, [r7, #15]
          break;
 800ce58:	e018      	b.n	800ce8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ce5a:	6839      	ldr	r1, [r7, #0]
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fc83 	bl	800d768 <USBD_GetConfig>
          break;
 800ce62:	e013      	b.n	800ce8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ce64:	6839      	ldr	r1, [r7, #0]
 800ce66:	6878      	ldr	r0, [r7, #4]
 800ce68:	f000 fcb4 	bl	800d7d4 <USBD_GetStatus>
          break;
 800ce6c:	e00e      	b.n	800ce8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ce6e:	6839      	ldr	r1, [r7, #0]
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 fce3 	bl	800d83c <USBD_SetFeature>
          break;
 800ce76:	e009      	b.n	800ce8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ce78:	6839      	ldr	r1, [r7, #0]
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	f000 fd07 	bl	800d88e <USBD_ClrFeature>
          break;
 800ce80:	e004      	b.n	800ce8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ce82:	6839      	ldr	r1, [r7, #0]
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 fd5e 	bl	800d946 <USBD_CtlError>
          break;
 800ce8a:	bf00      	nop
      }
      break;
 800ce8c:	e004      	b.n	800ce98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ce8e:	6839      	ldr	r1, [r7, #0]
 800ce90:	6878      	ldr	r0, [r7, #4]
 800ce92:	f000 fd58 	bl	800d946 <USBD_CtlError>
      break;
 800ce96:	bf00      	nop
  }

  return ret;
 800ce98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop

0800cea4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b084      	sub	sp, #16
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	6078      	str	r0, [r7, #4]
 800ceac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ceba:	2b40      	cmp	r3, #64	; 0x40
 800cebc:	d005      	beq.n	800ceca <USBD_StdItfReq+0x26>
 800cebe:	2b40      	cmp	r3, #64	; 0x40
 800cec0:	d852      	bhi.n	800cf68 <USBD_StdItfReq+0xc4>
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d001      	beq.n	800ceca <USBD_StdItfReq+0x26>
 800cec6:	2b20      	cmp	r3, #32
 800cec8:	d14e      	bne.n	800cf68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ced0:	b2db      	uxtb	r3, r3
 800ced2:	3b01      	subs	r3, #1
 800ced4:	2b02      	cmp	r3, #2
 800ced6:	d840      	bhi.n	800cf5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	889b      	ldrh	r3, [r3, #4]
 800cedc:	b2db      	uxtb	r3, r3
 800cede:	2b01      	cmp	r3, #1
 800cee0:	d836      	bhi.n	800cf50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	889b      	ldrh	r3, [r3, #4]
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	4619      	mov	r1, r3
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f7ff fed9 	bl	800cca2 <USBD_CoreFindIF>
 800cef0:	4603      	mov	r3, r0
 800cef2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cef4:	7bbb      	ldrb	r3, [r7, #14]
 800cef6:	2bff      	cmp	r3, #255	; 0xff
 800cef8:	d01d      	beq.n	800cf36 <USBD_StdItfReq+0x92>
 800cefa:	7bbb      	ldrb	r3, [r7, #14]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d11a      	bne.n	800cf36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cf00:	7bba      	ldrb	r2, [r7, #14]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	32ae      	adds	r2, #174	; 0xae
 800cf06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf0a:	689b      	ldr	r3, [r3, #8]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d00f      	beq.n	800cf30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cf10:	7bba      	ldrb	r2, [r7, #14]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cf18:	7bba      	ldrb	r2, [r7, #14]
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	32ae      	adds	r2, #174	; 0xae
 800cf1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	6839      	ldr	r1, [r7, #0]
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	4798      	blx	r3
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cf2e:	e004      	b.n	800cf3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cf30:	2303      	movs	r3, #3
 800cf32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cf34:	e001      	b.n	800cf3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cf36:	2303      	movs	r3, #3
 800cf38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cf3a:	683b      	ldr	r3, [r7, #0]
 800cf3c:	88db      	ldrh	r3, [r3, #6]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d110      	bne.n	800cf64 <USBD_StdItfReq+0xc0>
 800cf42:	7bfb      	ldrb	r3, [r7, #15]
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d10d      	bne.n	800cf64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cf48:	6878      	ldr	r0, [r7, #4]
 800cf4a:	f000 fdc7 	bl	800dadc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cf4e:	e009      	b.n	800cf64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cf50:	6839      	ldr	r1, [r7, #0]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fcf7 	bl	800d946 <USBD_CtlError>
          break;
 800cf58:	e004      	b.n	800cf64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cf5a:	6839      	ldr	r1, [r7, #0]
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f000 fcf2 	bl	800d946 <USBD_CtlError>
          break;
 800cf62:	e000      	b.n	800cf66 <USBD_StdItfReq+0xc2>
          break;
 800cf64:	bf00      	nop
      }
      break;
 800cf66:	e004      	b.n	800cf72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cf68:	6839      	ldr	r1, [r7, #0]
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f000 fceb 	bl	800d946 <USBD_CtlError>
      break;
 800cf70:	bf00      	nop
  }

  return ret;
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3710      	adds	r7, #16
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b084      	sub	sp, #16
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf86:	2300      	movs	r3, #0
 800cf88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cf8a:	683b      	ldr	r3, [r7, #0]
 800cf8c:	889b      	ldrh	r3, [r3, #4]
 800cf8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf98:	2b40      	cmp	r3, #64	; 0x40
 800cf9a:	d007      	beq.n	800cfac <USBD_StdEPReq+0x30>
 800cf9c:	2b40      	cmp	r3, #64	; 0x40
 800cf9e:	f200 817f 	bhi.w	800d2a0 <USBD_StdEPReq+0x324>
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d02a      	beq.n	800cffc <USBD_StdEPReq+0x80>
 800cfa6:	2b20      	cmp	r3, #32
 800cfa8:	f040 817a 	bne.w	800d2a0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cfac:	7bbb      	ldrb	r3, [r7, #14]
 800cfae:	4619      	mov	r1, r3
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f7ff fe83 	bl	800ccbc <USBD_CoreFindEP>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cfba:	7b7b      	ldrb	r3, [r7, #13]
 800cfbc:	2bff      	cmp	r3, #255	; 0xff
 800cfbe:	f000 8174 	beq.w	800d2aa <USBD_StdEPReq+0x32e>
 800cfc2:	7b7b      	ldrb	r3, [r7, #13]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	f040 8170 	bne.w	800d2aa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cfca:	7b7a      	ldrb	r2, [r7, #13]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cfd2:	7b7a      	ldrb	r2, [r7, #13]
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	32ae      	adds	r2, #174	; 0xae
 800cfd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfdc:	689b      	ldr	r3, [r3, #8]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f000 8163 	beq.w	800d2aa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cfe4:	7b7a      	ldrb	r2, [r7, #13]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	32ae      	adds	r2, #174	; 0xae
 800cfea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	4798      	blx	r3
 800cff6:	4603      	mov	r3, r0
 800cff8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cffa:	e156      	b.n	800d2aa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cffc:	683b      	ldr	r3, [r7, #0]
 800cffe:	785b      	ldrb	r3, [r3, #1]
 800d000:	2b03      	cmp	r3, #3
 800d002:	d008      	beq.n	800d016 <USBD_StdEPReq+0x9a>
 800d004:	2b03      	cmp	r3, #3
 800d006:	f300 8145 	bgt.w	800d294 <USBD_StdEPReq+0x318>
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	f000 809b 	beq.w	800d146 <USBD_StdEPReq+0x1ca>
 800d010:	2b01      	cmp	r3, #1
 800d012:	d03c      	beq.n	800d08e <USBD_StdEPReq+0x112>
 800d014:	e13e      	b.n	800d294 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b02      	cmp	r3, #2
 800d020:	d002      	beq.n	800d028 <USBD_StdEPReq+0xac>
 800d022:	2b03      	cmp	r3, #3
 800d024:	d016      	beq.n	800d054 <USBD_StdEPReq+0xd8>
 800d026:	e02c      	b.n	800d082 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d028:	7bbb      	ldrb	r3, [r7, #14]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00d      	beq.n	800d04a <USBD_StdEPReq+0xce>
 800d02e:	7bbb      	ldrb	r3, [r7, #14]
 800d030:	2b80      	cmp	r3, #128	; 0x80
 800d032:	d00a      	beq.n	800d04a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d034:	7bbb      	ldrb	r3, [r7, #14]
 800d036:	4619      	mov	r1, r3
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f001 f97f 	bl	800e33c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d03e:	2180      	movs	r1, #128	; 0x80
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f001 f97b 	bl	800e33c <USBD_LL_StallEP>
 800d046:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d048:	e020      	b.n	800d08c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d04a:	6839      	ldr	r1, [r7, #0]
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 fc7a 	bl	800d946 <USBD_CtlError>
              break;
 800d052:	e01b      	b.n	800d08c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	885b      	ldrh	r3, [r3, #2]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d10e      	bne.n	800d07a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d05c:	7bbb      	ldrb	r3, [r7, #14]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00b      	beq.n	800d07a <USBD_StdEPReq+0xfe>
 800d062:	7bbb      	ldrb	r3, [r7, #14]
 800d064:	2b80      	cmp	r3, #128	; 0x80
 800d066:	d008      	beq.n	800d07a <USBD_StdEPReq+0xfe>
 800d068:	683b      	ldr	r3, [r7, #0]
 800d06a:	88db      	ldrh	r3, [r3, #6]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d104      	bne.n	800d07a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d070:	7bbb      	ldrb	r3, [r7, #14]
 800d072:	4619      	mov	r1, r3
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f001 f961 	bl	800e33c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 fd2e 	bl	800dadc <USBD_CtlSendStatus>

              break;
 800d080:	e004      	b.n	800d08c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d082:	6839      	ldr	r1, [r7, #0]
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 fc5e 	bl	800d946 <USBD_CtlError>
              break;
 800d08a:	bf00      	nop
          }
          break;
 800d08c:	e107      	b.n	800d29e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d094:	b2db      	uxtb	r3, r3
 800d096:	2b02      	cmp	r3, #2
 800d098:	d002      	beq.n	800d0a0 <USBD_StdEPReq+0x124>
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d016      	beq.n	800d0cc <USBD_StdEPReq+0x150>
 800d09e:	e04b      	b.n	800d138 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d0a0:	7bbb      	ldrb	r3, [r7, #14]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d00d      	beq.n	800d0c2 <USBD_StdEPReq+0x146>
 800d0a6:	7bbb      	ldrb	r3, [r7, #14]
 800d0a8:	2b80      	cmp	r3, #128	; 0x80
 800d0aa:	d00a      	beq.n	800d0c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d0ac:	7bbb      	ldrb	r3, [r7, #14]
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	6878      	ldr	r0, [r7, #4]
 800d0b2:	f001 f943 	bl	800e33c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d0b6:	2180      	movs	r1, #128	; 0x80
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f001 f93f 	bl	800e33c <USBD_LL_StallEP>
 800d0be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d0c0:	e040      	b.n	800d144 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d0c2:	6839      	ldr	r1, [r7, #0]
 800d0c4:	6878      	ldr	r0, [r7, #4]
 800d0c6:	f000 fc3e 	bl	800d946 <USBD_CtlError>
              break;
 800d0ca:	e03b      	b.n	800d144 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	885b      	ldrh	r3, [r3, #2]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d136      	bne.n	800d142 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d0d4:	7bbb      	ldrb	r3, [r7, #14]
 800d0d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d004      	beq.n	800d0e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d0de:	7bbb      	ldrb	r3, [r7, #14]
 800d0e0:	4619      	mov	r1, r3
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f001 f949 	bl	800e37a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 fcf7 	bl	800dadc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d0ee:	7bbb      	ldrb	r3, [r7, #14]
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fde2 	bl	800ccbc <USBD_CoreFindEP>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0fc:	7b7b      	ldrb	r3, [r7, #13]
 800d0fe:	2bff      	cmp	r3, #255	; 0xff
 800d100:	d01f      	beq.n	800d142 <USBD_StdEPReq+0x1c6>
 800d102:	7b7b      	ldrb	r3, [r7, #13]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d11c      	bne.n	800d142 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d108:	7b7a      	ldrb	r2, [r7, #13]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d110:	7b7a      	ldrb	r2, [r7, #13]
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	32ae      	adds	r2, #174	; 0xae
 800d116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d010      	beq.n	800d142 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d120:	7b7a      	ldrb	r2, [r7, #13]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	32ae      	adds	r2, #174	; 0xae
 800d126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	6839      	ldr	r1, [r7, #0]
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	4798      	blx	r3
 800d132:	4603      	mov	r3, r0
 800d134:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d136:	e004      	b.n	800d142 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d138:	6839      	ldr	r1, [r7, #0]
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f000 fc03 	bl	800d946 <USBD_CtlError>
              break;
 800d140:	e000      	b.n	800d144 <USBD_StdEPReq+0x1c8>
              break;
 800d142:	bf00      	nop
          }
          break;
 800d144:	e0ab      	b.n	800d29e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d14c:	b2db      	uxtb	r3, r3
 800d14e:	2b02      	cmp	r3, #2
 800d150:	d002      	beq.n	800d158 <USBD_StdEPReq+0x1dc>
 800d152:	2b03      	cmp	r3, #3
 800d154:	d032      	beq.n	800d1bc <USBD_StdEPReq+0x240>
 800d156:	e097      	b.n	800d288 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d158:	7bbb      	ldrb	r3, [r7, #14]
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d007      	beq.n	800d16e <USBD_StdEPReq+0x1f2>
 800d15e:	7bbb      	ldrb	r3, [r7, #14]
 800d160:	2b80      	cmp	r3, #128	; 0x80
 800d162:	d004      	beq.n	800d16e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d164:	6839      	ldr	r1, [r7, #0]
 800d166:	6878      	ldr	r0, [r7, #4]
 800d168:	f000 fbed 	bl	800d946 <USBD_CtlError>
                break;
 800d16c:	e091      	b.n	800d292 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d16e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d172:	2b00      	cmp	r3, #0
 800d174:	da0b      	bge.n	800d18e <USBD_StdEPReq+0x212>
 800d176:	7bbb      	ldrb	r3, [r7, #14]
 800d178:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d17c:	4613      	mov	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	4413      	add	r3, r2
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	3310      	adds	r3, #16
 800d186:	687a      	ldr	r2, [r7, #4]
 800d188:	4413      	add	r3, r2
 800d18a:	3304      	adds	r3, #4
 800d18c:	e00b      	b.n	800d1a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d18e:	7bbb      	ldrb	r3, [r7, #14]
 800d190:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d194:	4613      	mov	r3, r2
 800d196:	009b      	lsls	r3, r3, #2
 800d198:	4413      	add	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	4413      	add	r3, r2
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d1a8:	68bb      	ldr	r3, [r7, #8]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d1ae:	68bb      	ldr	r3, [r7, #8]
 800d1b0:	2202      	movs	r2, #2
 800d1b2:	4619      	mov	r1, r3
 800d1b4:	6878      	ldr	r0, [r7, #4]
 800d1b6:	f000 fc37 	bl	800da28 <USBD_CtlSendData>
              break;
 800d1ba:	e06a      	b.n	800d292 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d1bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	da11      	bge.n	800d1e8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d1c4:	7bbb      	ldrb	r3, [r7, #14]
 800d1c6:	f003 020f 	and.w	r2, r3, #15
 800d1ca:	6879      	ldr	r1, [r7, #4]
 800d1cc:	4613      	mov	r3, r2
 800d1ce:	009b      	lsls	r3, r3, #2
 800d1d0:	4413      	add	r3, r2
 800d1d2:	009b      	lsls	r3, r3, #2
 800d1d4:	440b      	add	r3, r1
 800d1d6:	3324      	adds	r3, #36	; 0x24
 800d1d8:	881b      	ldrh	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d117      	bne.n	800d20e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d1de:	6839      	ldr	r1, [r7, #0]
 800d1e0:	6878      	ldr	r0, [r7, #4]
 800d1e2:	f000 fbb0 	bl	800d946 <USBD_CtlError>
                  break;
 800d1e6:	e054      	b.n	800d292 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d1e8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ea:	f003 020f 	and.w	r2, r3, #15
 800d1ee:	6879      	ldr	r1, [r7, #4]
 800d1f0:	4613      	mov	r3, r2
 800d1f2:	009b      	lsls	r3, r3, #2
 800d1f4:	4413      	add	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	440b      	add	r3, r1
 800d1fa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1fe:	881b      	ldrh	r3, [r3, #0]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d104      	bne.n	800d20e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d204:	6839      	ldr	r1, [r7, #0]
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fb9d 	bl	800d946 <USBD_CtlError>
                  break;
 800d20c:	e041      	b.n	800d292 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d20e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d212:	2b00      	cmp	r3, #0
 800d214:	da0b      	bge.n	800d22e <USBD_StdEPReq+0x2b2>
 800d216:	7bbb      	ldrb	r3, [r7, #14]
 800d218:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d21c:	4613      	mov	r3, r2
 800d21e:	009b      	lsls	r3, r3, #2
 800d220:	4413      	add	r3, r2
 800d222:	009b      	lsls	r3, r3, #2
 800d224:	3310      	adds	r3, #16
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	4413      	add	r3, r2
 800d22a:	3304      	adds	r3, #4
 800d22c:	e00b      	b.n	800d246 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d22e:	7bbb      	ldrb	r3, [r7, #14]
 800d230:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d234:	4613      	mov	r3, r2
 800d236:	009b      	lsls	r3, r3, #2
 800d238:	4413      	add	r3, r2
 800d23a:	009b      	lsls	r3, r3, #2
 800d23c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	4413      	add	r3, r2
 800d244:	3304      	adds	r3, #4
 800d246:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d248:	7bbb      	ldrb	r3, [r7, #14]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d002      	beq.n	800d254 <USBD_StdEPReq+0x2d8>
 800d24e:	7bbb      	ldrb	r3, [r7, #14]
 800d250:	2b80      	cmp	r3, #128	; 0x80
 800d252:	d103      	bne.n	800d25c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	2200      	movs	r2, #0
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	e00e      	b.n	800d27a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d25c:	7bbb      	ldrb	r3, [r7, #14]
 800d25e:	4619      	mov	r1, r3
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f001 f8a9 	bl	800e3b8 <USBD_LL_IsStallEP>
 800d266:	4603      	mov	r3, r0
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d003      	beq.n	800d274 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	2201      	movs	r2, #1
 800d270:	601a      	str	r2, [r3, #0]
 800d272:	e002      	b.n	800d27a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d274:	68bb      	ldr	r3, [r7, #8]
 800d276:	2200      	movs	r2, #0
 800d278:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	2202      	movs	r2, #2
 800d27e:	4619      	mov	r1, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fbd1 	bl	800da28 <USBD_CtlSendData>
              break;
 800d286:	e004      	b.n	800d292 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 fb5b 	bl	800d946 <USBD_CtlError>
              break;
 800d290:	bf00      	nop
          }
          break;
 800d292:	e004      	b.n	800d29e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d294:	6839      	ldr	r1, [r7, #0]
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 fb55 	bl	800d946 <USBD_CtlError>
          break;
 800d29c:	bf00      	nop
      }
      break;
 800d29e:	e005      	b.n	800d2ac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d2a0:	6839      	ldr	r1, [r7, #0]
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	f000 fb4f 	bl	800d946 <USBD_CtlError>
      break;
 800d2a8:	e000      	b.n	800d2ac <USBD_StdEPReq+0x330>
      break;
 800d2aa:	bf00      	nop
  }

  return ret;
 800d2ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3710      	adds	r7, #16
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}
	...

0800d2b8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b084      	sub	sp, #16
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
 800d2c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	885b      	ldrh	r3, [r3, #2]
 800d2d2:	0a1b      	lsrs	r3, r3, #8
 800d2d4:	b29b      	uxth	r3, r3
 800d2d6:	3b01      	subs	r3, #1
 800d2d8:	2b06      	cmp	r3, #6
 800d2da:	f200 8128 	bhi.w	800d52e <USBD_GetDescriptor+0x276>
 800d2de:	a201      	add	r2, pc, #4	; (adr r2, 800d2e4 <USBD_GetDescriptor+0x2c>)
 800d2e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e4:	0800d301 	.word	0x0800d301
 800d2e8:	0800d319 	.word	0x0800d319
 800d2ec:	0800d359 	.word	0x0800d359
 800d2f0:	0800d52f 	.word	0x0800d52f
 800d2f4:	0800d52f 	.word	0x0800d52f
 800d2f8:	0800d4cf 	.word	0x0800d4cf
 800d2fc:	0800d4fb 	.word	0x0800d4fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	7c12      	ldrb	r2, [r2, #16]
 800d30c:	f107 0108 	add.w	r1, r7, #8
 800d310:	4610      	mov	r0, r2
 800d312:	4798      	blx	r3
 800d314:	60f8      	str	r0, [r7, #12]
      break;
 800d316:	e112      	b.n	800d53e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7c1b      	ldrb	r3, [r3, #16]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d10d      	bne.n	800d33c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d328:	f107 0208 	add.w	r2, r7, #8
 800d32c:	4610      	mov	r0, r2
 800d32e:	4798      	blx	r3
 800d330:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	3301      	adds	r3, #1
 800d336:	2202      	movs	r2, #2
 800d338:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d33a:	e100      	b.n	800d53e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d344:	f107 0208 	add.w	r2, r7, #8
 800d348:	4610      	mov	r0, r2
 800d34a:	4798      	blx	r3
 800d34c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	3301      	adds	r3, #1
 800d352:	2202      	movs	r2, #2
 800d354:	701a      	strb	r2, [r3, #0]
      break;
 800d356:	e0f2      	b.n	800d53e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	885b      	ldrh	r3, [r3, #2]
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	2b05      	cmp	r3, #5
 800d360:	f200 80ac 	bhi.w	800d4bc <USBD_GetDescriptor+0x204>
 800d364:	a201      	add	r2, pc, #4	; (adr r2, 800d36c <USBD_GetDescriptor+0xb4>)
 800d366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d36a:	bf00      	nop
 800d36c:	0800d385 	.word	0x0800d385
 800d370:	0800d3b9 	.word	0x0800d3b9
 800d374:	0800d3ed 	.word	0x0800d3ed
 800d378:	0800d421 	.word	0x0800d421
 800d37c:	0800d455 	.word	0x0800d455
 800d380:	0800d489 	.word	0x0800d489
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d38a:	685b      	ldr	r3, [r3, #4]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d00b      	beq.n	800d3a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d396:	685b      	ldr	r3, [r3, #4]
 800d398:	687a      	ldr	r2, [r7, #4]
 800d39a:	7c12      	ldrb	r2, [r2, #16]
 800d39c:	f107 0108 	add.w	r1, r7, #8
 800d3a0:	4610      	mov	r0, r2
 800d3a2:	4798      	blx	r3
 800d3a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3a6:	e091      	b.n	800d4cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 facb 	bl	800d946 <USBD_CtlError>
            err++;
 800d3b0:	7afb      	ldrb	r3, [r7, #11]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	72fb      	strb	r3, [r7, #11]
          break;
 800d3b6:	e089      	b.n	800d4cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3be:	689b      	ldr	r3, [r3, #8]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d00b      	beq.n	800d3dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3ca:	689b      	ldr	r3, [r3, #8]
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	7c12      	ldrb	r2, [r2, #16]
 800d3d0:	f107 0108 	add.w	r1, r7, #8
 800d3d4:	4610      	mov	r0, r2
 800d3d6:	4798      	blx	r3
 800d3d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3da:	e077      	b.n	800d4cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3dc:	6839      	ldr	r1, [r7, #0]
 800d3de:	6878      	ldr	r0, [r7, #4]
 800d3e0:	f000 fab1 	bl	800d946 <USBD_CtlError>
            err++;
 800d3e4:	7afb      	ldrb	r3, [r7, #11]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	72fb      	strb	r3, [r7, #11]
          break;
 800d3ea:	e06f      	b.n	800d4cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3f2:	68db      	ldr	r3, [r3, #12]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d00b      	beq.n	800d410 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	687a      	ldr	r2, [r7, #4]
 800d402:	7c12      	ldrb	r2, [r2, #16]
 800d404:	f107 0108 	add.w	r1, r7, #8
 800d408:	4610      	mov	r0, r2
 800d40a:	4798      	blx	r3
 800d40c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d40e:	e05d      	b.n	800d4cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d410:	6839      	ldr	r1, [r7, #0]
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f000 fa97 	bl	800d946 <USBD_CtlError>
            err++;
 800d418:	7afb      	ldrb	r3, [r7, #11]
 800d41a:	3301      	adds	r3, #1
 800d41c:	72fb      	strb	r3, [r7, #11]
          break;
 800d41e:	e055      	b.n	800d4cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d00b      	beq.n	800d444 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d432:	691b      	ldr	r3, [r3, #16]
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	7c12      	ldrb	r2, [r2, #16]
 800d438:	f107 0108 	add.w	r1, r7, #8
 800d43c:	4610      	mov	r0, r2
 800d43e:	4798      	blx	r3
 800d440:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d442:	e043      	b.n	800d4cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d444:	6839      	ldr	r1, [r7, #0]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fa7d 	bl	800d946 <USBD_CtlError>
            err++;
 800d44c:	7afb      	ldrb	r3, [r7, #11]
 800d44e:	3301      	adds	r3, #1
 800d450:	72fb      	strb	r3, [r7, #11]
          break;
 800d452:	e03b      	b.n	800d4cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d45a:	695b      	ldr	r3, [r3, #20]
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d00b      	beq.n	800d478 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d466:	695b      	ldr	r3, [r3, #20]
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	7c12      	ldrb	r2, [r2, #16]
 800d46c:	f107 0108 	add.w	r1, r7, #8
 800d470:	4610      	mov	r0, r2
 800d472:	4798      	blx	r3
 800d474:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d476:	e029      	b.n	800d4cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d478:	6839      	ldr	r1, [r7, #0]
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 fa63 	bl	800d946 <USBD_CtlError>
            err++;
 800d480:	7afb      	ldrb	r3, [r7, #11]
 800d482:	3301      	adds	r3, #1
 800d484:	72fb      	strb	r3, [r7, #11]
          break;
 800d486:	e021      	b.n	800d4cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d48e:	699b      	ldr	r3, [r3, #24]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d00b      	beq.n	800d4ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d49a:	699b      	ldr	r3, [r3, #24]
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	7c12      	ldrb	r2, [r2, #16]
 800d4a0:	f107 0108 	add.w	r1, r7, #8
 800d4a4:	4610      	mov	r0, r2
 800d4a6:	4798      	blx	r3
 800d4a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4aa:	e00f      	b.n	800d4cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4ac:	6839      	ldr	r1, [r7, #0]
 800d4ae:	6878      	ldr	r0, [r7, #4]
 800d4b0:	f000 fa49 	bl	800d946 <USBD_CtlError>
            err++;
 800d4b4:	7afb      	ldrb	r3, [r7, #11]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d4ba:	e007      	b.n	800d4cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d4bc:	6839      	ldr	r1, [r7, #0]
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 fa41 	bl	800d946 <USBD_CtlError>
          err++;
 800d4c4:	7afb      	ldrb	r3, [r7, #11]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d4ca:	bf00      	nop
      }
      break;
 800d4cc:	e037      	b.n	800d53e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	7c1b      	ldrb	r3, [r3, #16]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d109      	bne.n	800d4ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4de:	f107 0208 	add.w	r2, r7, #8
 800d4e2:	4610      	mov	r0, r2
 800d4e4:	4798      	blx	r3
 800d4e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4e8:	e029      	b.n	800d53e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d4ea:	6839      	ldr	r1, [r7, #0]
 800d4ec:	6878      	ldr	r0, [r7, #4]
 800d4ee:	f000 fa2a 	bl	800d946 <USBD_CtlError>
        err++;
 800d4f2:	7afb      	ldrb	r3, [r7, #11]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	72fb      	strb	r3, [r7, #11]
      break;
 800d4f8:	e021      	b.n	800d53e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	7c1b      	ldrb	r3, [r3, #16]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d10d      	bne.n	800d51e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d50a:	f107 0208 	add.w	r2, r7, #8
 800d50e:	4610      	mov	r0, r2
 800d510:	4798      	blx	r3
 800d512:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	3301      	adds	r3, #1
 800d518:	2207      	movs	r2, #7
 800d51a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d51c:	e00f      	b.n	800d53e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d51e:	6839      	ldr	r1, [r7, #0]
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 fa10 	bl	800d946 <USBD_CtlError>
        err++;
 800d526:	7afb      	ldrb	r3, [r7, #11]
 800d528:	3301      	adds	r3, #1
 800d52a:	72fb      	strb	r3, [r7, #11]
      break;
 800d52c:	e007      	b.n	800d53e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d52e:	6839      	ldr	r1, [r7, #0]
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 fa08 	bl	800d946 <USBD_CtlError>
      err++;
 800d536:	7afb      	ldrb	r3, [r7, #11]
 800d538:	3301      	adds	r3, #1
 800d53a:	72fb      	strb	r3, [r7, #11]
      break;
 800d53c:	bf00      	nop
  }

  if (err != 0U)
 800d53e:	7afb      	ldrb	r3, [r7, #11]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d11e      	bne.n	800d582 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	88db      	ldrh	r3, [r3, #6]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d016      	beq.n	800d57a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d54c:	893b      	ldrh	r3, [r7, #8]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d00e      	beq.n	800d570 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	88da      	ldrh	r2, [r3, #6]
 800d556:	893b      	ldrh	r3, [r7, #8]
 800d558:	4293      	cmp	r3, r2
 800d55a:	bf28      	it	cs
 800d55c:	4613      	movcs	r3, r2
 800d55e:	b29b      	uxth	r3, r3
 800d560:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d562:	893b      	ldrh	r3, [r7, #8]
 800d564:	461a      	mov	r2, r3
 800d566:	68f9      	ldr	r1, [r7, #12]
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 fa5d 	bl	800da28 <USBD_CtlSendData>
 800d56e:	e009      	b.n	800d584 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d570:	6839      	ldr	r1, [r7, #0]
 800d572:	6878      	ldr	r0, [r7, #4]
 800d574:	f000 f9e7 	bl	800d946 <USBD_CtlError>
 800d578:	e004      	b.n	800d584 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 faae 	bl	800dadc <USBD_CtlSendStatus>
 800d580:	e000      	b.n	800d584 <USBD_GetDescriptor+0x2cc>
    return;
 800d582:	bf00      	nop
  }
}
 800d584:	3710      	adds	r7, #16
 800d586:	46bd      	mov	sp, r7
 800d588:	bd80      	pop	{r7, pc}
 800d58a:	bf00      	nop

0800d58c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b084      	sub	sp, #16
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
 800d594:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	889b      	ldrh	r3, [r3, #4]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d131      	bne.n	800d602 <USBD_SetAddress+0x76>
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	88db      	ldrh	r3, [r3, #6]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d12d      	bne.n	800d602 <USBD_SetAddress+0x76>
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	885b      	ldrh	r3, [r3, #2]
 800d5aa:	2b7f      	cmp	r3, #127	; 0x7f
 800d5ac:	d829      	bhi.n	800d602 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	885b      	ldrh	r3, [r3, #2]
 800d5b2:	b2db      	uxtb	r3, r3
 800d5b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d5b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5c0:	b2db      	uxtb	r3, r3
 800d5c2:	2b03      	cmp	r3, #3
 800d5c4:	d104      	bne.n	800d5d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d5c6:	6839      	ldr	r1, [r7, #0]
 800d5c8:	6878      	ldr	r0, [r7, #4]
 800d5ca:	f000 f9bc 	bl	800d946 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5ce:	e01d      	b.n	800d60c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	7bfa      	ldrb	r2, [r7, #15]
 800d5d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d5d8:	7bfb      	ldrb	r3, [r7, #15]
 800d5da:	4619      	mov	r1, r3
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 ff17 	bl	800e410 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fa7a 	bl	800dadc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d5e8:	7bfb      	ldrb	r3, [r7, #15]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d004      	beq.n	800d5f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	2202      	movs	r2, #2
 800d5f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5f6:	e009      	b.n	800d60c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d600:	e004      	b.n	800d60c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d602:	6839      	ldr	r1, [r7, #0]
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f000 f99e 	bl	800d946 <USBD_CtlError>
  }
}
 800d60a:	bf00      	nop
 800d60c:	bf00      	nop
 800d60e:	3710      	adds	r7, #16
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b084      	sub	sp, #16
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d61e:	2300      	movs	r3, #0
 800d620:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	885b      	ldrh	r3, [r3, #2]
 800d626:	b2da      	uxtb	r2, r3
 800d628:	4b4e      	ldr	r3, [pc, #312]	; (800d764 <USBD_SetConfig+0x150>)
 800d62a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d62c:	4b4d      	ldr	r3, [pc, #308]	; (800d764 <USBD_SetConfig+0x150>)
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	2b01      	cmp	r3, #1
 800d632:	d905      	bls.n	800d640 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d634:	6839      	ldr	r1, [r7, #0]
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 f985 	bl	800d946 <USBD_CtlError>
    return USBD_FAIL;
 800d63c:	2303      	movs	r3, #3
 800d63e:	e08c      	b.n	800d75a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d646:	b2db      	uxtb	r3, r3
 800d648:	2b02      	cmp	r3, #2
 800d64a:	d002      	beq.n	800d652 <USBD_SetConfig+0x3e>
 800d64c:	2b03      	cmp	r3, #3
 800d64e:	d029      	beq.n	800d6a4 <USBD_SetConfig+0x90>
 800d650:	e075      	b.n	800d73e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d652:	4b44      	ldr	r3, [pc, #272]	; (800d764 <USBD_SetConfig+0x150>)
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d020      	beq.n	800d69c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d65a:	4b42      	ldr	r3, [pc, #264]	; (800d764 <USBD_SetConfig+0x150>)
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	461a      	mov	r2, r3
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d664:	4b3f      	ldr	r3, [pc, #252]	; (800d764 <USBD_SetConfig+0x150>)
 800d666:	781b      	ldrb	r3, [r3, #0]
 800d668:	4619      	mov	r1, r3
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f7fe ffe7 	bl	800c63e <USBD_SetClassConfig>
 800d670:	4603      	mov	r3, r0
 800d672:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d674:	7bfb      	ldrb	r3, [r7, #15]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d008      	beq.n	800d68c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d67a:	6839      	ldr	r1, [r7, #0]
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 f962 	bl	800d946 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2202      	movs	r2, #2
 800d686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d68a:	e065      	b.n	800d758 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f000 fa25 	bl	800dadc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2203      	movs	r2, #3
 800d696:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d69a:	e05d      	b.n	800d758 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 fa1d 	bl	800dadc <USBD_CtlSendStatus>
      break;
 800d6a2:	e059      	b.n	800d758 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d6a4:	4b2f      	ldr	r3, [pc, #188]	; (800d764 <USBD_SetConfig+0x150>)
 800d6a6:	781b      	ldrb	r3, [r3, #0]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d112      	bne.n	800d6d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2202      	movs	r2, #2
 800d6b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d6b4:	4b2b      	ldr	r3, [pc, #172]	; (800d764 <USBD_SetConfig+0x150>)
 800d6b6:	781b      	ldrb	r3, [r3, #0]
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d6be:	4b29      	ldr	r3, [pc, #164]	; (800d764 <USBD_SetConfig+0x150>)
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	4619      	mov	r1, r3
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f7fe ffd6 	bl	800c676 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d6ca:	6878      	ldr	r0, [r7, #4]
 800d6cc:	f000 fa06 	bl	800dadc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d6d0:	e042      	b.n	800d758 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d6d2:	4b24      	ldr	r3, [pc, #144]	; (800d764 <USBD_SetConfig+0x150>)
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	685b      	ldr	r3, [r3, #4]
 800d6dc:	429a      	cmp	r2, r3
 800d6de:	d02a      	beq.n	800d736 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	685b      	ldr	r3, [r3, #4]
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	4619      	mov	r1, r3
 800d6e8:	6878      	ldr	r0, [r7, #4]
 800d6ea:	f7fe ffc4 	bl	800c676 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d6ee:	4b1d      	ldr	r3, [pc, #116]	; (800d764 <USBD_SetConfig+0x150>)
 800d6f0:	781b      	ldrb	r3, [r3, #0]
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d6f8:	4b1a      	ldr	r3, [pc, #104]	; (800d764 <USBD_SetConfig+0x150>)
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	4619      	mov	r1, r3
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f7fe ff9d 	bl	800c63e <USBD_SetClassConfig>
 800d704:	4603      	mov	r3, r0
 800d706:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d708:	7bfb      	ldrb	r3, [r7, #15]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d00f      	beq.n	800d72e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d70e:	6839      	ldr	r1, [r7, #0]
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f918 	bl	800d946 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	4619      	mov	r1, r3
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f7fe ffa9 	bl	800c676 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2202      	movs	r2, #2
 800d728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d72c:	e014      	b.n	800d758 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f9d4 	bl	800dadc <USBD_CtlSendStatus>
      break;
 800d734:	e010      	b.n	800d758 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d736:	6878      	ldr	r0, [r7, #4]
 800d738:	f000 f9d0 	bl	800dadc <USBD_CtlSendStatus>
      break;
 800d73c:	e00c      	b.n	800d758 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d73e:	6839      	ldr	r1, [r7, #0]
 800d740:	6878      	ldr	r0, [r7, #4]
 800d742:	f000 f900 	bl	800d946 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d746:	4b07      	ldr	r3, [pc, #28]	; (800d764 <USBD_SetConfig+0x150>)
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	4619      	mov	r1, r3
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f7fe ff92 	bl	800c676 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d752:	2303      	movs	r3, #3
 800d754:	73fb      	strb	r3, [r7, #15]
      break;
 800d756:	bf00      	nop
  }

  return ret;
 800d758:	7bfb      	ldrb	r3, [r7, #15]
}
 800d75a:	4618      	mov	r0, r3
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}
 800d762:	bf00      	nop
 800d764:	200058c8 	.word	0x200058c8

0800d768 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b082      	sub	sp, #8
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	88db      	ldrh	r3, [r3, #6]
 800d776:	2b01      	cmp	r3, #1
 800d778:	d004      	beq.n	800d784 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d77a:	6839      	ldr	r1, [r7, #0]
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 f8e2 	bl	800d946 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d782:	e023      	b.n	800d7cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b02      	cmp	r3, #2
 800d78e:	dc02      	bgt.n	800d796 <USBD_GetConfig+0x2e>
 800d790:	2b00      	cmp	r3, #0
 800d792:	dc03      	bgt.n	800d79c <USBD_GetConfig+0x34>
 800d794:	e015      	b.n	800d7c2 <USBD_GetConfig+0x5a>
 800d796:	2b03      	cmp	r3, #3
 800d798:	d00b      	beq.n	800d7b2 <USBD_GetConfig+0x4a>
 800d79a:	e012      	b.n	800d7c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	3308      	adds	r3, #8
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	6878      	ldr	r0, [r7, #4]
 800d7ac:	f000 f93c 	bl	800da28 <USBD_CtlSendData>
        break;
 800d7b0:	e00c      	b.n	800d7cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	4619      	mov	r1, r3
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f934 	bl	800da28 <USBD_CtlSendData>
        break;
 800d7c0:	e004      	b.n	800d7cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d7c2:	6839      	ldr	r1, [r7, #0]
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f000 f8be 	bl	800d946 <USBD_CtlError>
        break;
 800d7ca:	bf00      	nop
}
 800d7cc:	bf00      	nop
 800d7ce:	3708      	adds	r7, #8
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}

0800d7d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b082      	sub	sp, #8
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
 800d7dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7e4:	b2db      	uxtb	r3, r3
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d81e      	bhi.n	800d82a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d7ec:	683b      	ldr	r3, [r7, #0]
 800d7ee:	88db      	ldrh	r3, [r3, #6]
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	d004      	beq.n	800d7fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d7f4:	6839      	ldr	r1, [r7, #0]
 800d7f6:	6878      	ldr	r0, [r7, #4]
 800d7f8:	f000 f8a5 	bl	800d946 <USBD_CtlError>
        break;
 800d7fc:	e01a      	b.n	800d834 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2201      	movs	r2, #1
 800d802:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d005      	beq.n	800d81a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	68db      	ldr	r3, [r3, #12]
 800d812:	f043 0202 	orr.w	r2, r3, #2
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	330c      	adds	r3, #12
 800d81e:	2202      	movs	r2, #2
 800d820:	4619      	mov	r1, r3
 800d822:	6878      	ldr	r0, [r7, #4]
 800d824:	f000 f900 	bl	800da28 <USBD_CtlSendData>
      break;
 800d828:	e004      	b.n	800d834 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d82a:	6839      	ldr	r1, [r7, #0]
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f000 f88a 	bl	800d946 <USBD_CtlError>
      break;
 800d832:	bf00      	nop
  }
}
 800d834:	bf00      	nop
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}

0800d83c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d83c:	b580      	push	{r7, lr}
 800d83e:	b082      	sub	sp, #8
 800d840:	af00      	add	r7, sp, #0
 800d842:	6078      	str	r0, [r7, #4]
 800d844:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	885b      	ldrh	r3, [r3, #2]
 800d84a:	2b01      	cmp	r3, #1
 800d84c:	d107      	bne.n	800d85e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f000 f940 	bl	800dadc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d85c:	e013      	b.n	800d886 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	885b      	ldrh	r3, [r3, #2]
 800d862:	2b02      	cmp	r3, #2
 800d864:	d10b      	bne.n	800d87e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	889b      	ldrh	r3, [r3, #4]
 800d86a:	0a1b      	lsrs	r3, r3, #8
 800d86c:	b29b      	uxth	r3, r3
 800d86e:	b2da      	uxtb	r2, r3
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f000 f930 	bl	800dadc <USBD_CtlSendStatus>
}
 800d87c:	e003      	b.n	800d886 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d87e:	6839      	ldr	r1, [r7, #0]
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f000 f860 	bl	800d946 <USBD_CtlError>
}
 800d886:	bf00      	nop
 800d888:	3708      	adds	r7, #8
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b082      	sub	sp, #8
 800d892:	af00      	add	r7, sp, #0
 800d894:	6078      	str	r0, [r7, #4]
 800d896:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d89e:	b2db      	uxtb	r3, r3
 800d8a0:	3b01      	subs	r3, #1
 800d8a2:	2b02      	cmp	r3, #2
 800d8a4:	d80b      	bhi.n	800d8be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	885b      	ldrh	r3, [r3, #2]
 800d8aa:	2b01      	cmp	r3, #1
 800d8ac:	d10c      	bne.n	800d8c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	2200      	movs	r2, #0
 800d8b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f000 f910 	bl	800dadc <USBD_CtlSendStatus>
      }
      break;
 800d8bc:	e004      	b.n	800d8c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d8be:	6839      	ldr	r1, [r7, #0]
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f000 f840 	bl	800d946 <USBD_CtlError>
      break;
 800d8c6:	e000      	b.n	800d8ca <USBD_ClrFeature+0x3c>
      break;
 800d8c8:	bf00      	nop
  }
}
 800d8ca:	bf00      	nop
 800d8cc:	3708      	adds	r7, #8
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b084      	sub	sp, #16
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	6078      	str	r0, [r7, #4]
 800d8da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	781a      	ldrb	r2, [r3, #0]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	3301      	adds	r3, #1
 800d8ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	781a      	ldrb	r2, [r3, #0]
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d8fc:	68f8      	ldr	r0, [r7, #12]
 800d8fe:	f7ff fa41 	bl	800cd84 <SWAPBYTE>
 800d902:	4603      	mov	r3, r0
 800d904:	461a      	mov	r2, r3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	3301      	adds	r3, #1
 800d90e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	3301      	adds	r3, #1
 800d914:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d916:	68f8      	ldr	r0, [r7, #12]
 800d918:	f7ff fa34 	bl	800cd84 <SWAPBYTE>
 800d91c:	4603      	mov	r3, r0
 800d91e:	461a      	mov	r2, r3
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	3301      	adds	r3, #1
 800d928:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	3301      	adds	r3, #1
 800d92e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d930:	68f8      	ldr	r0, [r7, #12]
 800d932:	f7ff fa27 	bl	800cd84 <SWAPBYTE>
 800d936:	4603      	mov	r3, r0
 800d938:	461a      	mov	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	80da      	strh	r2, [r3, #6]
}
 800d93e:	bf00      	nop
 800d940:	3710      	adds	r7, #16
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}

0800d946 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d946:	b580      	push	{r7, lr}
 800d948:	b082      	sub	sp, #8
 800d94a:	af00      	add	r7, sp, #0
 800d94c:	6078      	str	r0, [r7, #4]
 800d94e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d950:	2180      	movs	r1, #128	; 0x80
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 fcf2 	bl	800e33c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d958:	2100      	movs	r1, #0
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 fcee 	bl	800e33c <USBD_LL_StallEP>
}
 800d960:	bf00      	nop
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b086      	sub	sp, #24
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d974:	2300      	movs	r3, #0
 800d976:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d036      	beq.n	800d9ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d982:	6938      	ldr	r0, [r7, #16]
 800d984:	f000 f836 	bl	800d9f4 <USBD_GetLen>
 800d988:	4603      	mov	r3, r0
 800d98a:	3301      	adds	r3, #1
 800d98c:	b29b      	uxth	r3, r3
 800d98e:	005b      	lsls	r3, r3, #1
 800d990:	b29a      	uxth	r2, r3
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d996:	7dfb      	ldrb	r3, [r7, #23]
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	4413      	add	r3, r2
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	7812      	ldrb	r2, [r2, #0]
 800d9a0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d9a2:	7dfb      	ldrb	r3, [r7, #23]
 800d9a4:	3301      	adds	r3, #1
 800d9a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d9a8:	7dfb      	ldrb	r3, [r7, #23]
 800d9aa:	68ba      	ldr	r2, [r7, #8]
 800d9ac:	4413      	add	r3, r2
 800d9ae:	2203      	movs	r2, #3
 800d9b0:	701a      	strb	r2, [r3, #0]
  idx++;
 800d9b2:	7dfb      	ldrb	r3, [r7, #23]
 800d9b4:	3301      	adds	r3, #1
 800d9b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d9b8:	e013      	b.n	800d9e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
 800d9bc:	68ba      	ldr	r2, [r7, #8]
 800d9be:	4413      	add	r3, r2
 800d9c0:	693a      	ldr	r2, [r7, #16]
 800d9c2:	7812      	ldrb	r2, [r2, #0]
 800d9c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d9c6:	693b      	ldr	r3, [r7, #16]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	613b      	str	r3, [r7, #16]
    idx++;
 800d9cc:	7dfb      	ldrb	r3, [r7, #23]
 800d9ce:	3301      	adds	r3, #1
 800d9d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d9d2:	7dfb      	ldrb	r3, [r7, #23]
 800d9d4:	68ba      	ldr	r2, [r7, #8]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	2200      	movs	r2, #0
 800d9da:	701a      	strb	r2, [r3, #0]
    idx++;
 800d9dc:	7dfb      	ldrb	r3, [r7, #23]
 800d9de:	3301      	adds	r3, #1
 800d9e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d9e2:	693b      	ldr	r3, [r7, #16]
 800d9e4:	781b      	ldrb	r3, [r3, #0]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d1e7      	bne.n	800d9ba <USBD_GetString+0x52>
 800d9ea:	e000      	b.n	800d9ee <USBD_GetString+0x86>
    return;
 800d9ec:	bf00      	nop
  }
}
 800d9ee:	3718      	adds	r7, #24
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	bd80      	pop	{r7, pc}

0800d9f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	b085      	sub	sp, #20
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800da04:	e005      	b.n	800da12 <USBD_GetLen+0x1e>
  {
    len++;
 800da06:	7bfb      	ldrb	r3, [r7, #15]
 800da08:	3301      	adds	r3, #1
 800da0a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	3301      	adds	r3, #1
 800da10:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800da12:	68bb      	ldr	r3, [r7, #8]
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1f5      	bne.n	800da06 <USBD_GetLen+0x12>
  }

  return len;
 800da1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1c:	4618      	mov	r0, r3
 800da1e:	3714      	adds	r7, #20
 800da20:	46bd      	mov	sp, r7
 800da22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da26:	4770      	bx	lr

0800da28 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2202      	movs	r2, #2
 800da38:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	687a      	ldr	r2, [r7, #4]
 800da46:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	68ba      	ldr	r2, [r7, #8]
 800da4c:	2100      	movs	r1, #0
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	f000 fcfd 	bl	800e44e <USBD_LL_Transmit>

  return USBD_OK;
 800da54:	2300      	movs	r3, #0
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}

0800da5e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800da5e:	b580      	push	{r7, lr}
 800da60:	b084      	sub	sp, #16
 800da62:	af00      	add	r7, sp, #0
 800da64:	60f8      	str	r0, [r7, #12]
 800da66:	60b9      	str	r1, [r7, #8]
 800da68:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	68ba      	ldr	r2, [r7, #8]
 800da6e:	2100      	movs	r1, #0
 800da70:	68f8      	ldr	r0, [r7, #12]
 800da72:	f000 fcec 	bl	800e44e <USBD_LL_Transmit>

  return USBD_OK;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3710      	adds	r7, #16
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b084      	sub	sp, #16
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	2203      	movs	r2, #3
 800da90:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	687a      	ldr	r2, [r7, #4]
 800da98:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	687a      	ldr	r2, [r7, #4]
 800daa0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	68ba      	ldr	r2, [r7, #8]
 800daa8:	2100      	movs	r1, #0
 800daaa:	68f8      	ldr	r0, [r7, #12]
 800daac:	f000 fcf0 	bl	800e490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dab0:	2300      	movs	r3, #0
}
 800dab2:	4618      	mov	r0, r3
 800dab4:	3710      	adds	r7, #16
 800dab6:	46bd      	mov	sp, r7
 800dab8:	bd80      	pop	{r7, pc}

0800daba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800daba:	b580      	push	{r7, lr}
 800dabc:	b084      	sub	sp, #16
 800dabe:	af00      	add	r7, sp, #0
 800dac0:	60f8      	str	r0, [r7, #12]
 800dac2:	60b9      	str	r1, [r7, #8]
 800dac4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	68ba      	ldr	r2, [r7, #8]
 800daca:	2100      	movs	r1, #0
 800dacc:	68f8      	ldr	r0, [r7, #12]
 800dace:	f000 fcdf 	bl	800e490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3710      	adds	r7, #16
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}

0800dadc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dadc:	b580      	push	{r7, lr}
 800dade:	b082      	sub	sp, #8
 800dae0:	af00      	add	r7, sp, #0
 800dae2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2204      	movs	r2, #4
 800dae8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800daec:	2300      	movs	r3, #0
 800daee:	2200      	movs	r2, #0
 800daf0:	2100      	movs	r1, #0
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f000 fcab 	bl	800e44e <USBD_LL_Transmit>

  return USBD_OK;
 800daf8:	2300      	movs	r3, #0
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3708      	adds	r7, #8
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}

0800db02 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800db02:	b580      	push	{r7, lr}
 800db04:	b082      	sub	sp, #8
 800db06:	af00      	add	r7, sp, #0
 800db08:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2205      	movs	r2, #5
 800db0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db12:	2300      	movs	r3, #0
 800db14:	2200      	movs	r2, #0
 800db16:	2100      	movs	r1, #0
 800db18:	6878      	ldr	r0, [r7, #4]
 800db1a:	f000 fcb9 	bl	800e490 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db1e:	2300      	movs	r3, #0
}
 800db20:	4618      	mov	r0, r3
 800db22:	3708      	adds	r7, #8
 800db24:	46bd      	mov	sp, r7
 800db26:	bd80      	pop	{r7, pc}

0800db28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db2c:	2200      	movs	r2, #0
 800db2e:	4912      	ldr	r1, [pc, #72]	; (800db78 <MX_USB_DEVICE_Init+0x50>)
 800db30:	4812      	ldr	r0, [pc, #72]	; (800db7c <MX_USB_DEVICE_Init+0x54>)
 800db32:	f7fe fd07 	bl	800c544 <USBD_Init>
 800db36:	4603      	mov	r3, r0
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d001      	beq.n	800db40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db3c:	f7f4 fa3e 	bl	8001fbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800db40:	490f      	ldr	r1, [pc, #60]	; (800db80 <MX_USB_DEVICE_Init+0x58>)
 800db42:	480e      	ldr	r0, [pc, #56]	; (800db7c <MX_USB_DEVICE_Init+0x54>)
 800db44:	f7fe fd2e 	bl	800c5a4 <USBD_RegisterClass>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d001      	beq.n	800db52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db4e:	f7f4 fa35 	bl	8001fbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800db52:	490c      	ldr	r1, [pc, #48]	; (800db84 <MX_USB_DEVICE_Init+0x5c>)
 800db54:	4809      	ldr	r0, [pc, #36]	; (800db7c <MX_USB_DEVICE_Init+0x54>)
 800db56:	f7fe fc1f 	bl	800c398 <USBD_CDC_RegisterInterface>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d001      	beq.n	800db64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db60:	f7f4 fa2c 	bl	8001fbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db64:	4805      	ldr	r0, [pc, #20]	; (800db7c <MX_USB_DEVICE_Init+0x54>)
 800db66:	f7fe fd53 	bl	800c610 <USBD_Start>
 800db6a:	4603      	mov	r3, r0
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d001      	beq.n	800db74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800db70:	f7f4 fa24 	bl	8001fbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db74:	bf00      	nop
 800db76:	bd80      	pop	{r7, pc}
 800db78:	200000c0 	.word	0x200000c0
 800db7c:	200058cc 	.word	0x200058cc
 800db80:	2000002c 	.word	0x2000002c
 800db84:	200000ac 	.word	0x200000ac

0800db88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db8c:	2200      	movs	r2, #0
 800db8e:	4905      	ldr	r1, [pc, #20]	; (800dba4 <CDC_Init_FS+0x1c>)
 800db90:	4805      	ldr	r0, [pc, #20]	; (800dba8 <CDC_Init_FS+0x20>)
 800db92:	f7fe fc1b 	bl	800c3cc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db96:	4905      	ldr	r1, [pc, #20]	; (800dbac <CDC_Init_FS+0x24>)
 800db98:	4803      	ldr	r0, [pc, #12]	; (800dba8 <CDC_Init_FS+0x20>)
 800db9a:	f7fe fc39 	bl	800c410 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800db9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dba0:	4618      	mov	r0, r3
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	200063a8 	.word	0x200063a8
 800dba8:	200058cc 	.word	0x200058cc
 800dbac:	20005ba8 	.word	0x20005ba8

0800dbb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dbb0:	b480      	push	{r7}
 800dbb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dbb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	46bd      	mov	sp, r7
 800dbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbbe:	4770      	bx	lr

0800dbc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dbc0:	b480      	push	{r7}
 800dbc2:	b083      	sub	sp, #12
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	6039      	str	r1, [r7, #0]
 800dbca:	71fb      	strb	r3, [r7, #7]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dbd0:	79fb      	ldrb	r3, [r7, #7]
 800dbd2:	2b23      	cmp	r3, #35	; 0x23
 800dbd4:	d84a      	bhi.n	800dc6c <CDC_Control_FS+0xac>
 800dbd6:	a201      	add	r2, pc, #4	; (adr r2, 800dbdc <CDC_Control_FS+0x1c>)
 800dbd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbdc:	0800dc6d 	.word	0x0800dc6d
 800dbe0:	0800dc6d 	.word	0x0800dc6d
 800dbe4:	0800dc6d 	.word	0x0800dc6d
 800dbe8:	0800dc6d 	.word	0x0800dc6d
 800dbec:	0800dc6d 	.word	0x0800dc6d
 800dbf0:	0800dc6d 	.word	0x0800dc6d
 800dbf4:	0800dc6d 	.word	0x0800dc6d
 800dbf8:	0800dc6d 	.word	0x0800dc6d
 800dbfc:	0800dc6d 	.word	0x0800dc6d
 800dc00:	0800dc6d 	.word	0x0800dc6d
 800dc04:	0800dc6d 	.word	0x0800dc6d
 800dc08:	0800dc6d 	.word	0x0800dc6d
 800dc0c:	0800dc6d 	.word	0x0800dc6d
 800dc10:	0800dc6d 	.word	0x0800dc6d
 800dc14:	0800dc6d 	.word	0x0800dc6d
 800dc18:	0800dc6d 	.word	0x0800dc6d
 800dc1c:	0800dc6d 	.word	0x0800dc6d
 800dc20:	0800dc6d 	.word	0x0800dc6d
 800dc24:	0800dc6d 	.word	0x0800dc6d
 800dc28:	0800dc6d 	.word	0x0800dc6d
 800dc2c:	0800dc6d 	.word	0x0800dc6d
 800dc30:	0800dc6d 	.word	0x0800dc6d
 800dc34:	0800dc6d 	.word	0x0800dc6d
 800dc38:	0800dc6d 	.word	0x0800dc6d
 800dc3c:	0800dc6d 	.word	0x0800dc6d
 800dc40:	0800dc6d 	.word	0x0800dc6d
 800dc44:	0800dc6d 	.word	0x0800dc6d
 800dc48:	0800dc6d 	.word	0x0800dc6d
 800dc4c:	0800dc6d 	.word	0x0800dc6d
 800dc50:	0800dc6d 	.word	0x0800dc6d
 800dc54:	0800dc6d 	.word	0x0800dc6d
 800dc58:	0800dc6d 	.word	0x0800dc6d
 800dc5c:	0800dc6d 	.word	0x0800dc6d
 800dc60:	0800dc6d 	.word	0x0800dc6d
 800dc64:	0800dc6d 	.word	0x0800dc6d
 800dc68:	0800dc6d 	.word	0x0800dc6d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dc6c:	bf00      	nop
  }

  return (USBD_OK);
 800dc6e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	370c      	adds	r7, #12
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b082      	sub	sp, #8
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
 800dc84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dc86:	6879      	ldr	r1, [r7, #4]
 800dc88:	4805      	ldr	r0, [pc, #20]	; (800dca0 <CDC_Receive_FS+0x24>)
 800dc8a:	f7fe fbc1 	bl	800c410 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dc8e:	4804      	ldr	r0, [pc, #16]	; (800dca0 <CDC_Receive_FS+0x24>)
 800dc90:	f7fe fc22 	bl	800c4d8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800dc94:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3708      	adds	r7, #8
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	200058cc 	.word	0x200058cc

0800dca4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b084      	sub	sp, #16
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	6078      	str	r0, [r7, #4]
 800dcac:	460b      	mov	r3, r1
 800dcae:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dcb4:	4b0d      	ldr	r3, [pc, #52]	; (800dcec <CDC_Transmit_FS+0x48>)
 800dcb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dcba:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d001      	beq.n	800dcca <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dcc6:	2301      	movs	r3, #1
 800dcc8:	e00b      	b.n	800dce2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dcca:	887b      	ldrh	r3, [r7, #2]
 800dccc:	461a      	mov	r2, r3
 800dcce:	6879      	ldr	r1, [r7, #4]
 800dcd0:	4806      	ldr	r0, [pc, #24]	; (800dcec <CDC_Transmit_FS+0x48>)
 800dcd2:	f7fe fb7b 	bl	800c3cc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dcd6:	4805      	ldr	r0, [pc, #20]	; (800dcec <CDC_Transmit_FS+0x48>)
 800dcd8:	f7fe fbb8 	bl	800c44c <USBD_CDC_TransmitPacket>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dce0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce2:	4618      	mov	r0, r3
 800dce4:	3710      	adds	r7, #16
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}
 800dcea:	bf00      	nop
 800dcec:	200058cc 	.word	0x200058cc

0800dcf0 <CDC_TransmitCplt_FS>:
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */

static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b087      	sub	sp, #28
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	60f8      	str	r0, [r7, #12]
 800dcf8:	60b9      	str	r1, [r7, #8]
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dcfe:	2300      	movs	r3, #0
 800dd00:	75fb      	strb	r3, [r7, #23]
  usb_transmitdone =1;
 800dd02:	4b05      	ldr	r3, [pc, #20]	; (800dd18 <CDC_TransmitCplt_FS+0x28>)
 800dd04:	2201      	movs	r2, #1
 800dd06:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dd08:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	371c      	adds	r7, #28
 800dd10:	46bd      	mov	sp, r7
 800dd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd16:	4770      	bx	lr
 800dd18:	20000008 	.word	0x20000008

0800dd1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd1c:	b480      	push	{r7}
 800dd1e:	b083      	sub	sp, #12
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	4603      	mov	r3, r0
 800dd24:	6039      	str	r1, [r7, #0]
 800dd26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	2212      	movs	r2, #18
 800dd2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dd2e:	4b03      	ldr	r3, [pc, #12]	; (800dd3c <USBD_FS_DeviceDescriptor+0x20>)
}
 800dd30:	4618      	mov	r0, r3
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr
 800dd3c:	200000dc 	.word	0x200000dc

0800dd40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b083      	sub	sp, #12
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	4603      	mov	r3, r0
 800dd48:	6039      	str	r1, [r7, #0]
 800dd4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	2204      	movs	r2, #4
 800dd50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dd52:	4b03      	ldr	r3, [pc, #12]	; (800dd60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	200000f0 	.word	0x200000f0

0800dd64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	6039      	str	r1, [r7, #0]
 800dd6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd70:	79fb      	ldrb	r3, [r7, #7]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d105      	bne.n	800dd82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd76:	683a      	ldr	r2, [r7, #0]
 800dd78:	4907      	ldr	r1, [pc, #28]	; (800dd98 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd7a:	4808      	ldr	r0, [pc, #32]	; (800dd9c <USBD_FS_ProductStrDescriptor+0x38>)
 800dd7c:	f7ff fdf4 	bl	800d968 <USBD_GetString>
 800dd80:	e004      	b.n	800dd8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dd82:	683a      	ldr	r2, [r7, #0]
 800dd84:	4904      	ldr	r1, [pc, #16]	; (800dd98 <USBD_FS_ProductStrDescriptor+0x34>)
 800dd86:	4805      	ldr	r0, [pc, #20]	; (800dd9c <USBD_FS_ProductStrDescriptor+0x38>)
 800dd88:	f7ff fdee 	bl	800d968 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd8c:	4b02      	ldr	r3, [pc, #8]	; (800dd98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3708      	adds	r7, #8
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}
 800dd96:	bf00      	nop
 800dd98:	20006ba8 	.word	0x20006ba8
 800dd9c:	080107f4 	.word	0x080107f4

0800dda0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b082      	sub	sp, #8
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	4603      	mov	r3, r0
 800dda8:	6039      	str	r1, [r7, #0]
 800ddaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ddac:	683a      	ldr	r2, [r7, #0]
 800ddae:	4904      	ldr	r1, [pc, #16]	; (800ddc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ddb0:	4804      	ldr	r0, [pc, #16]	; (800ddc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ddb2:	f7ff fdd9 	bl	800d968 <USBD_GetString>
  return USBD_StrDesc;
 800ddb6:	4b02      	ldr	r3, [pc, #8]	; (800ddc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ddb8:	4618      	mov	r0, r3
 800ddba:	3708      	adds	r7, #8
 800ddbc:	46bd      	mov	sp, r7
 800ddbe:	bd80      	pop	{r7, pc}
 800ddc0:	20006ba8 	.word	0x20006ba8
 800ddc4:	0801080c 	.word	0x0801080c

0800ddc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddc8:	b580      	push	{r7, lr}
 800ddca:	b082      	sub	sp, #8
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	4603      	mov	r3, r0
 800ddd0:	6039      	str	r1, [r7, #0]
 800ddd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	221a      	movs	r2, #26
 800ddd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ddda:	f000 f843 	bl	800de64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ddde:	4b02      	ldr	r3, [pc, #8]	; (800dde8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3708      	adds	r7, #8
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	200000f4 	.word	0x200000f4

0800ddec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b082      	sub	sp, #8
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	6039      	str	r1, [r7, #0]
 800ddf6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ddf8:	79fb      	ldrb	r3, [r7, #7]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d105      	bne.n	800de0a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ddfe:	683a      	ldr	r2, [r7, #0]
 800de00:	4907      	ldr	r1, [pc, #28]	; (800de20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de02:	4808      	ldr	r0, [pc, #32]	; (800de24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de04:	f7ff fdb0 	bl	800d968 <USBD_GetString>
 800de08:	e004      	b.n	800de14 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800de0a:	683a      	ldr	r2, [r7, #0]
 800de0c:	4904      	ldr	r1, [pc, #16]	; (800de20 <USBD_FS_ConfigStrDescriptor+0x34>)
 800de0e:	4805      	ldr	r0, [pc, #20]	; (800de24 <USBD_FS_ConfigStrDescriptor+0x38>)
 800de10:	f7ff fdaa 	bl	800d968 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de14:	4b02      	ldr	r3, [pc, #8]	; (800de20 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800de16:	4618      	mov	r0, r3
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	20006ba8 	.word	0x20006ba8
 800de24:	08010820 	.word	0x08010820

0800de28 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	4603      	mov	r3, r0
 800de30:	6039      	str	r1, [r7, #0]
 800de32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de34:	79fb      	ldrb	r3, [r7, #7]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d105      	bne.n	800de46 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de3a:	683a      	ldr	r2, [r7, #0]
 800de3c:	4907      	ldr	r1, [pc, #28]	; (800de5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de3e:	4808      	ldr	r0, [pc, #32]	; (800de60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de40:	f7ff fd92 	bl	800d968 <USBD_GetString>
 800de44:	e004      	b.n	800de50 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800de46:	683a      	ldr	r2, [r7, #0]
 800de48:	4904      	ldr	r1, [pc, #16]	; (800de5c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800de4a:	4805      	ldr	r0, [pc, #20]	; (800de60 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800de4c:	f7ff fd8c 	bl	800d968 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de50:	4b02      	ldr	r3, [pc, #8]	; (800de5c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800de52:	4618      	mov	r0, r3
 800de54:	3708      	adds	r7, #8
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	20006ba8 	.word	0x20006ba8
 800de60:	0801082c 	.word	0x0801082c

0800de64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b084      	sub	sp, #16
 800de68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800de6a:	4b0f      	ldr	r3, [pc, #60]	; (800dea8 <Get_SerialNum+0x44>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800de70:	4b0e      	ldr	r3, [pc, #56]	; (800deac <Get_SerialNum+0x48>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800de76:	4b0e      	ldr	r3, [pc, #56]	; (800deb0 <Get_SerialNum+0x4c>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800de7c:	68fa      	ldr	r2, [r7, #12]
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4413      	add	r3, r2
 800de82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d009      	beq.n	800de9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800de8a:	2208      	movs	r2, #8
 800de8c:	4909      	ldr	r1, [pc, #36]	; (800deb4 <Get_SerialNum+0x50>)
 800de8e:	68f8      	ldr	r0, [r7, #12]
 800de90:	f000 f814 	bl	800debc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800de94:	2204      	movs	r2, #4
 800de96:	4908      	ldr	r1, [pc, #32]	; (800deb8 <Get_SerialNum+0x54>)
 800de98:	68b8      	ldr	r0, [r7, #8]
 800de9a:	f000 f80f 	bl	800debc <IntToUnicode>
  }
}
 800de9e:	bf00      	nop
 800dea0:	3710      	adds	r7, #16
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	1fff7a10 	.word	0x1fff7a10
 800deac:	1fff7a14 	.word	0x1fff7a14
 800deb0:	1fff7a18 	.word	0x1fff7a18
 800deb4:	200000f6 	.word	0x200000f6
 800deb8:	20000106 	.word	0x20000106

0800debc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800debc:	b480      	push	{r7}
 800debe:	b087      	sub	sp, #28
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	60f8      	str	r0, [r7, #12]
 800dec4:	60b9      	str	r1, [r7, #8]
 800dec6:	4613      	mov	r3, r2
 800dec8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800deca:	2300      	movs	r3, #0
 800decc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dece:	2300      	movs	r3, #0
 800ded0:	75fb      	strb	r3, [r7, #23]
 800ded2:	e027      	b.n	800df24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	0f1b      	lsrs	r3, r3, #28
 800ded8:	2b09      	cmp	r3, #9
 800deda:	d80b      	bhi.n	800def4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	0f1b      	lsrs	r3, r3, #28
 800dee0:	b2da      	uxtb	r2, r3
 800dee2:	7dfb      	ldrb	r3, [r7, #23]
 800dee4:	005b      	lsls	r3, r3, #1
 800dee6:	4619      	mov	r1, r3
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	440b      	add	r3, r1
 800deec:	3230      	adds	r2, #48	; 0x30
 800deee:	b2d2      	uxtb	r2, r2
 800def0:	701a      	strb	r2, [r3, #0]
 800def2:	e00a      	b.n	800df0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	0f1b      	lsrs	r3, r3, #28
 800def8:	b2da      	uxtb	r2, r3
 800defa:	7dfb      	ldrb	r3, [r7, #23]
 800defc:	005b      	lsls	r3, r3, #1
 800defe:	4619      	mov	r1, r3
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	440b      	add	r3, r1
 800df04:	3237      	adds	r2, #55	; 0x37
 800df06:	b2d2      	uxtb	r2, r2
 800df08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	011b      	lsls	r3, r3, #4
 800df0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800df10:	7dfb      	ldrb	r3, [r7, #23]
 800df12:	005b      	lsls	r3, r3, #1
 800df14:	3301      	adds	r3, #1
 800df16:	68ba      	ldr	r2, [r7, #8]
 800df18:	4413      	add	r3, r2
 800df1a:	2200      	movs	r2, #0
 800df1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800df1e:	7dfb      	ldrb	r3, [r7, #23]
 800df20:	3301      	adds	r3, #1
 800df22:	75fb      	strb	r3, [r7, #23]
 800df24:	7dfa      	ldrb	r2, [r7, #23]
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	429a      	cmp	r2, r3
 800df2a:	d3d3      	bcc.n	800ded4 <IntToUnicode+0x18>
  }
}
 800df2c:	bf00      	nop
 800df2e:	bf00      	nop
 800df30:	371c      	adds	r7, #28
 800df32:	46bd      	mov	sp, r7
 800df34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df38:	4770      	bx	lr
	...

0800df3c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b08a      	sub	sp, #40	; 0x28
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800df44:	f107 0314 	add.w	r3, r7, #20
 800df48:	2200      	movs	r2, #0
 800df4a:	601a      	str	r2, [r3, #0]
 800df4c:	605a      	str	r2, [r3, #4]
 800df4e:	609a      	str	r2, [r3, #8]
 800df50:	60da      	str	r2, [r3, #12]
 800df52:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800df5c:	d147      	bne.n	800dfee <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800df5e:	2300      	movs	r3, #0
 800df60:	613b      	str	r3, [r7, #16]
 800df62:	4b25      	ldr	r3, [pc, #148]	; (800dff8 <HAL_PCD_MspInit+0xbc>)
 800df64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df66:	4a24      	ldr	r2, [pc, #144]	; (800dff8 <HAL_PCD_MspInit+0xbc>)
 800df68:	f043 0301 	orr.w	r3, r3, #1
 800df6c:	6313      	str	r3, [r2, #48]	; 0x30
 800df6e:	4b22      	ldr	r3, [pc, #136]	; (800dff8 <HAL_PCD_MspInit+0xbc>)
 800df70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df72:	f003 0301 	and.w	r3, r3, #1
 800df76:	613b      	str	r3, [r7, #16]
 800df78:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800df7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800df80:	2300      	movs	r3, #0
 800df82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df84:	2300      	movs	r3, #0
 800df86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800df88:	f107 0314 	add.w	r3, r7, #20
 800df8c:	4619      	mov	r1, r3
 800df8e:	481b      	ldr	r0, [pc, #108]	; (800dffc <HAL_PCD_MspInit+0xc0>)
 800df90:	f7f7 fa78 	bl	8005484 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800df94:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800df98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800df9a:	2302      	movs	r3, #2
 800df9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800df9e:	2300      	movs	r3, #0
 800dfa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dfa6:	230a      	movs	r3, #10
 800dfa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dfaa:	f107 0314 	add.w	r3, r7, #20
 800dfae:	4619      	mov	r1, r3
 800dfb0:	4812      	ldr	r0, [pc, #72]	; (800dffc <HAL_PCD_MspInit+0xc0>)
 800dfb2:	f7f7 fa67 	bl	8005484 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800dfb6:	4b10      	ldr	r3, [pc, #64]	; (800dff8 <HAL_PCD_MspInit+0xbc>)
 800dfb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfba:	4a0f      	ldr	r2, [pc, #60]	; (800dff8 <HAL_PCD_MspInit+0xbc>)
 800dfbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfc0:	6353      	str	r3, [r2, #52]	; 0x34
 800dfc2:	2300      	movs	r3, #0
 800dfc4:	60fb      	str	r3, [r7, #12]
 800dfc6:	4b0c      	ldr	r3, [pc, #48]	; (800dff8 <HAL_PCD_MspInit+0xbc>)
 800dfc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfca:	4a0b      	ldr	r2, [pc, #44]	; (800dff8 <HAL_PCD_MspInit+0xbc>)
 800dfcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800dfd0:	6453      	str	r3, [r2, #68]	; 0x44
 800dfd2:	4b09      	ldr	r3, [pc, #36]	; (800dff8 <HAL_PCD_MspInit+0xbc>)
 800dfd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dfd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800dfda:	60fb      	str	r3, [r7, #12]
 800dfdc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800dfde:	2200      	movs	r2, #0
 800dfe0:	2100      	movs	r1, #0
 800dfe2:	2043      	movs	r0, #67	; 0x43
 800dfe4:	f7f6 fc17 	bl	8004816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dfe8:	2043      	movs	r0, #67	; 0x43
 800dfea:	f7f6 fc30 	bl	800484e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dfee:	bf00      	nop
 800dff0:	3728      	adds	r7, #40	; 0x28
 800dff2:	46bd      	mov	sp, r7
 800dff4:	bd80      	pop	{r7, pc}
 800dff6:	bf00      	nop
 800dff8:	40023800 	.word	0x40023800
 800dffc:	40020000 	.word	0x40020000

0800e000 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e014:	4619      	mov	r1, r3
 800e016:	4610      	mov	r0, r2
 800e018:	f7fe fb47 	bl	800c6aa <USBD_LL_SetupStage>
}
 800e01c:	bf00      	nop
 800e01e:	3708      	adds	r7, #8
 800e020:	46bd      	mov	sp, r7
 800e022:	bd80      	pop	{r7, pc}

0800e024 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e024:	b580      	push	{r7, lr}
 800e026:	b082      	sub	sp, #8
 800e028:	af00      	add	r7, sp, #0
 800e02a:	6078      	str	r0, [r7, #4]
 800e02c:	460b      	mov	r3, r1
 800e02e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e036:	78fa      	ldrb	r2, [r7, #3]
 800e038:	6879      	ldr	r1, [r7, #4]
 800e03a:	4613      	mov	r3, r2
 800e03c:	00db      	lsls	r3, r3, #3
 800e03e:	4413      	add	r3, r2
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	440b      	add	r3, r1
 800e044:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e048:	681a      	ldr	r2, [r3, #0]
 800e04a:	78fb      	ldrb	r3, [r7, #3]
 800e04c:	4619      	mov	r1, r3
 800e04e:	f7fe fb81 	bl	800c754 <USBD_LL_DataOutStage>
}
 800e052:	bf00      	nop
 800e054:	3708      	adds	r7, #8
 800e056:	46bd      	mov	sp, r7
 800e058:	bd80      	pop	{r7, pc}

0800e05a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b082      	sub	sp, #8
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
 800e062:	460b      	mov	r3, r1
 800e064:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e06c:	78fa      	ldrb	r2, [r7, #3]
 800e06e:	6879      	ldr	r1, [r7, #4]
 800e070:	4613      	mov	r3, r2
 800e072:	00db      	lsls	r3, r3, #3
 800e074:	4413      	add	r3, r2
 800e076:	009b      	lsls	r3, r3, #2
 800e078:	440b      	add	r3, r1
 800e07a:	334c      	adds	r3, #76	; 0x4c
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	78fb      	ldrb	r3, [r7, #3]
 800e080:	4619      	mov	r1, r3
 800e082:	f7fe fc1a 	bl	800c8ba <USBD_LL_DataInStage>
}
 800e086:	bf00      	nop
 800e088:	3708      	adds	r7, #8
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bd80      	pop	{r7, pc}

0800e08e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e08e:	b580      	push	{r7, lr}
 800e090:	b082      	sub	sp, #8
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e09c:	4618      	mov	r0, r3
 800e09e:	f7fe fd4e 	bl	800cb3e <USBD_LL_SOF>
}
 800e0a2:	bf00      	nop
 800e0a4:	3708      	adds	r7, #8
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}

0800e0aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0aa:	b580      	push	{r7, lr}
 800e0ac:	b084      	sub	sp, #16
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	68db      	ldr	r3, [r3, #12]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d102      	bne.n	800e0c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e0be:	2300      	movs	r3, #0
 800e0c0:	73fb      	strb	r3, [r7, #15]
 800e0c2:	e008      	b.n	800e0d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	68db      	ldr	r3, [r3, #12]
 800e0c8:	2b02      	cmp	r3, #2
 800e0ca:	d102      	bne.n	800e0d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e0cc:	2301      	movs	r3, #1
 800e0ce:	73fb      	strb	r3, [r7, #15]
 800e0d0:	e001      	b.n	800e0d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e0d2:	f7f3 ff73 	bl	8001fbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0dc:	7bfa      	ldrb	r2, [r7, #15]
 800e0de:	4611      	mov	r1, r2
 800e0e0:	4618      	mov	r0, r3
 800e0e2:	f7fe fcee 	bl	800cac2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7fe fc96 	bl	800ca1e <USBD_LL_Reset>
}
 800e0f2:	bf00      	nop
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
	...

0800e0fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7fe fce9 	bl	800cae2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	6812      	ldr	r2, [r2, #0]
 800e11e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e122:	f043 0301 	orr.w	r3, r3, #1
 800e126:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	6a1b      	ldr	r3, [r3, #32]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d005      	beq.n	800e13c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e130:	4b04      	ldr	r3, [pc, #16]	; (800e144 <HAL_PCD_SuspendCallback+0x48>)
 800e132:	691b      	ldr	r3, [r3, #16]
 800e134:	4a03      	ldr	r2, [pc, #12]	; (800e144 <HAL_PCD_SuspendCallback+0x48>)
 800e136:	f043 0306 	orr.w	r3, r3, #6
 800e13a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e13c:	bf00      	nop
 800e13e:	3708      	adds	r7, #8
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}
 800e144:	e000ed00 	.word	0xe000ed00

0800e148 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e156:	4618      	mov	r0, r3
 800e158:	f7fe fcd9 	bl	800cb0e <USBD_LL_Resume>
}
 800e15c:	bf00      	nop
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	460b      	mov	r3, r1
 800e16e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e176:	78fa      	ldrb	r2, [r7, #3]
 800e178:	4611      	mov	r1, r2
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fe fd31 	bl	800cbe2 <USBD_LL_IsoOUTIncomplete>
}
 800e180:	bf00      	nop
 800e182:	3708      	adds	r7, #8
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}

0800e188 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b082      	sub	sp, #8
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	460b      	mov	r3, r1
 800e192:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e19a:	78fa      	ldrb	r2, [r7, #3]
 800e19c:	4611      	mov	r1, r2
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fe fced 	bl	800cb7e <USBD_LL_IsoINIncomplete>
}
 800e1a4:	bf00      	nop
 800e1a6:	3708      	adds	r7, #8
 800e1a8:	46bd      	mov	sp, r7
 800e1aa:	bd80      	pop	{r7, pc}

0800e1ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	f7fe fd43 	bl	800cc46 <USBD_LL_DevConnected>
}
 800e1c0:	bf00      	nop
 800e1c2:	3708      	adds	r7, #8
 800e1c4:	46bd      	mov	sp, r7
 800e1c6:	bd80      	pop	{r7, pc}

0800e1c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1c8:	b580      	push	{r7, lr}
 800e1ca:	b082      	sub	sp, #8
 800e1cc:	af00      	add	r7, sp, #0
 800e1ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f7fe fd40 	bl	800cc5c <USBD_LL_DevDisconnected>
}
 800e1dc:	bf00      	nop
 800e1de:	3708      	adds	r7, #8
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}

0800e1e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b082      	sub	sp, #8
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	781b      	ldrb	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d13c      	bne.n	800e26e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e1f4:	4a20      	ldr	r2, [pc, #128]	; (800e278 <USBD_LL_Init+0x94>)
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	4a1e      	ldr	r2, [pc, #120]	; (800e278 <USBD_LL_Init+0x94>)
 800e200:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e204:	4b1c      	ldr	r3, [pc, #112]	; (800e278 <USBD_LL_Init+0x94>)
 800e206:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e20a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e20c:	4b1a      	ldr	r3, [pc, #104]	; (800e278 <USBD_LL_Init+0x94>)
 800e20e:	2204      	movs	r2, #4
 800e210:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e212:	4b19      	ldr	r3, [pc, #100]	; (800e278 <USBD_LL_Init+0x94>)
 800e214:	2202      	movs	r2, #2
 800e216:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e218:	4b17      	ldr	r3, [pc, #92]	; (800e278 <USBD_LL_Init+0x94>)
 800e21a:	2200      	movs	r2, #0
 800e21c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e21e:	4b16      	ldr	r3, [pc, #88]	; (800e278 <USBD_LL_Init+0x94>)
 800e220:	2202      	movs	r2, #2
 800e222:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e224:	4b14      	ldr	r3, [pc, #80]	; (800e278 <USBD_LL_Init+0x94>)
 800e226:	2200      	movs	r2, #0
 800e228:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e22a:	4b13      	ldr	r3, [pc, #76]	; (800e278 <USBD_LL_Init+0x94>)
 800e22c:	2200      	movs	r2, #0
 800e22e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e230:	4b11      	ldr	r3, [pc, #68]	; (800e278 <USBD_LL_Init+0x94>)
 800e232:	2200      	movs	r2, #0
 800e234:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800e236:	4b10      	ldr	r3, [pc, #64]	; (800e278 <USBD_LL_Init+0x94>)
 800e238:	2201      	movs	r2, #1
 800e23a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e23c:	4b0e      	ldr	r3, [pc, #56]	; (800e278 <USBD_LL_Init+0x94>)
 800e23e:	2200      	movs	r2, #0
 800e240:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e242:	480d      	ldr	r0, [pc, #52]	; (800e278 <USBD_LL_Init+0x94>)
 800e244:	f7f7 fc4a 	bl	8005adc <HAL_PCD_Init>
 800e248:	4603      	mov	r3, r0
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d001      	beq.n	800e252 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e24e:	f7f3 feb5 	bl	8001fbc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e252:	2180      	movs	r1, #128	; 0x80
 800e254:	4808      	ldr	r0, [pc, #32]	; (800e278 <USBD_LL_Init+0x94>)
 800e256:	f7f8 fea2 	bl	8006f9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e25a:	2240      	movs	r2, #64	; 0x40
 800e25c:	2100      	movs	r1, #0
 800e25e:	4806      	ldr	r0, [pc, #24]	; (800e278 <USBD_LL_Init+0x94>)
 800e260:	f7f8 fe56 	bl	8006f10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e264:	2280      	movs	r2, #128	; 0x80
 800e266:	2101      	movs	r1, #1
 800e268:	4803      	ldr	r0, [pc, #12]	; (800e278 <USBD_LL_Init+0x94>)
 800e26a:	f7f8 fe51 	bl	8006f10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e26e:	2300      	movs	r3, #0
}
 800e270:	4618      	mov	r0, r3
 800e272:	3708      	adds	r7, #8
 800e274:	46bd      	mov	sp, r7
 800e276:	bd80      	pop	{r7, pc}
 800e278:	20006da8 	.word	0x20006da8

0800e27c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e284:	2300      	movs	r3, #0
 800e286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e288:	2300      	movs	r3, #0
 800e28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e292:	4618      	mov	r0, r3
 800e294:	f7f7 fd3f 	bl	8005d16 <HAL_PCD_Start>
 800e298:	4603      	mov	r3, r0
 800e29a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e29c:	7bfb      	ldrb	r3, [r7, #15]
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f000 f942 	bl	800e528 <USBD_Get_USB_Status>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	3710      	adds	r7, #16
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}

0800e2b2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e2b2:	b580      	push	{r7, lr}
 800e2b4:	b084      	sub	sp, #16
 800e2b6:	af00      	add	r7, sp, #0
 800e2b8:	6078      	str	r0, [r7, #4]
 800e2ba:	4608      	mov	r0, r1
 800e2bc:	4611      	mov	r1, r2
 800e2be:	461a      	mov	r2, r3
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	70fb      	strb	r3, [r7, #3]
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	70bb      	strb	r3, [r7, #2]
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e2da:	78bb      	ldrb	r3, [r7, #2]
 800e2dc:	883a      	ldrh	r2, [r7, #0]
 800e2de:	78f9      	ldrb	r1, [r7, #3]
 800e2e0:	f7f8 fa10 	bl	8006704 <HAL_PCD_EP_Open>
 800e2e4:	4603      	mov	r3, r0
 800e2e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e2e8:	7bfb      	ldrb	r3, [r7, #15]
 800e2ea:	4618      	mov	r0, r3
 800e2ec:	f000 f91c 	bl	800e528 <USBD_Get_USB_Status>
 800e2f0:	4603      	mov	r3, r0
 800e2f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e2f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	3710      	adds	r7, #16
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	bd80      	pop	{r7, pc}

0800e2fe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e2fe:	b580      	push	{r7, lr}
 800e300:	b084      	sub	sp, #16
 800e302:	af00      	add	r7, sp, #0
 800e304:	6078      	str	r0, [r7, #4]
 800e306:	460b      	mov	r3, r1
 800e308:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e30a:	2300      	movs	r3, #0
 800e30c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e30e:	2300      	movs	r3, #0
 800e310:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e318:	78fa      	ldrb	r2, [r7, #3]
 800e31a:	4611      	mov	r1, r2
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7f8 fa59 	bl	80067d4 <HAL_PCD_EP_Close>
 800e322:	4603      	mov	r3, r0
 800e324:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e326:	7bfb      	ldrb	r3, [r7, #15]
 800e328:	4618      	mov	r0, r3
 800e32a:	f000 f8fd 	bl	800e528 <USBD_Get_USB_Status>
 800e32e:	4603      	mov	r3, r0
 800e330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e332:	7bbb      	ldrb	r3, [r7, #14]
}
 800e334:	4618      	mov	r0, r3
 800e336:	3710      	adds	r7, #16
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	460b      	mov	r3, r1
 800e346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e348:	2300      	movs	r3, #0
 800e34a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e34c:	2300      	movs	r3, #0
 800e34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e356:	78fa      	ldrb	r2, [r7, #3]
 800e358:	4611      	mov	r1, r2
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7f8 fb31 	bl	80069c2 <HAL_PCD_EP_SetStall>
 800e360:	4603      	mov	r3, r0
 800e362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e364:	7bfb      	ldrb	r3, [r7, #15]
 800e366:	4618      	mov	r0, r3
 800e368:	f000 f8de 	bl	800e528 <USBD_Get_USB_Status>
 800e36c:	4603      	mov	r3, r0
 800e36e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e370:	7bbb      	ldrb	r3, [r7, #14]
}
 800e372:	4618      	mov	r0, r3
 800e374:	3710      	adds	r7, #16
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b084      	sub	sp, #16
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
 800e382:	460b      	mov	r3, r1
 800e384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e386:	2300      	movs	r3, #0
 800e388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e38a:	2300      	movs	r3, #0
 800e38c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e394:	78fa      	ldrb	r2, [r7, #3]
 800e396:	4611      	mov	r1, r2
 800e398:	4618      	mov	r0, r3
 800e39a:	f7f8 fb76 	bl	8006a8a <HAL_PCD_EP_ClrStall>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3a2:	7bfb      	ldrb	r3, [r7, #15]
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f000 f8bf 	bl	800e528 <USBD_Get_USB_Status>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3710      	adds	r7, #16
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
 800e3c0:	460b      	mov	r3, r1
 800e3c2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e3ca:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e3cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	da0b      	bge.n	800e3ec <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e3d4:	78fb      	ldrb	r3, [r7, #3]
 800e3d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3da:	68f9      	ldr	r1, [r7, #12]
 800e3dc:	4613      	mov	r3, r2
 800e3de:	00db      	lsls	r3, r3, #3
 800e3e0:	4413      	add	r3, r2
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	440b      	add	r3, r1
 800e3e6:	333e      	adds	r3, #62	; 0x3e
 800e3e8:	781b      	ldrb	r3, [r3, #0]
 800e3ea:	e00b      	b.n	800e404 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e3ec:	78fb      	ldrb	r3, [r7, #3]
 800e3ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e3f2:	68f9      	ldr	r1, [r7, #12]
 800e3f4:	4613      	mov	r3, r2
 800e3f6:	00db      	lsls	r3, r3, #3
 800e3f8:	4413      	add	r3, r2
 800e3fa:	009b      	lsls	r3, r3, #2
 800e3fc:	440b      	add	r3, r1
 800e3fe:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e402:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e404:	4618      	mov	r0, r3
 800e406:	3714      	adds	r7, #20
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e410:	b580      	push	{r7, lr}
 800e412:	b084      	sub	sp, #16
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	460b      	mov	r3, r1
 800e41a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e41c:	2300      	movs	r3, #0
 800e41e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e420:	2300      	movs	r3, #0
 800e422:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e42a:	78fa      	ldrb	r2, [r7, #3]
 800e42c:	4611      	mov	r1, r2
 800e42e:	4618      	mov	r0, r3
 800e430:	f7f8 f943 	bl	80066ba <HAL_PCD_SetAddress>
 800e434:	4603      	mov	r3, r0
 800e436:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e438:	7bfb      	ldrb	r3, [r7, #15]
 800e43a:	4618      	mov	r0, r3
 800e43c:	f000 f874 	bl	800e528 <USBD_Get_USB_Status>
 800e440:	4603      	mov	r3, r0
 800e442:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e444:	7bbb      	ldrb	r3, [r7, #14]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3710      	adds	r7, #16
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}

0800e44e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e44e:	b580      	push	{r7, lr}
 800e450:	b086      	sub	sp, #24
 800e452:	af00      	add	r7, sp, #0
 800e454:	60f8      	str	r0, [r7, #12]
 800e456:	607a      	str	r2, [r7, #4]
 800e458:	603b      	str	r3, [r7, #0]
 800e45a:	460b      	mov	r3, r1
 800e45c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e45e:	2300      	movs	r3, #0
 800e460:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e462:	2300      	movs	r3, #0
 800e464:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e46c:	7af9      	ldrb	r1, [r7, #11]
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	687a      	ldr	r2, [r7, #4]
 800e472:	f7f8 fa5c 	bl	800692e <HAL_PCD_EP_Transmit>
 800e476:	4603      	mov	r3, r0
 800e478:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e47a:	7dfb      	ldrb	r3, [r7, #23]
 800e47c:	4618      	mov	r0, r3
 800e47e:	f000 f853 	bl	800e528 <USBD_Get_USB_Status>
 800e482:	4603      	mov	r3, r0
 800e484:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e486:	7dbb      	ldrb	r3, [r7, #22]
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3718      	adds	r7, #24
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	607a      	str	r2, [r7, #4]
 800e49a:	603b      	str	r3, [r7, #0]
 800e49c:	460b      	mov	r3, r1
 800e49e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e4ae:	7af9      	ldrb	r1, [r7, #11]
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	687a      	ldr	r2, [r7, #4]
 800e4b4:	f7f8 f9d8 	bl	8006868 <HAL_PCD_EP_Receive>
 800e4b8:	4603      	mov	r3, r0
 800e4ba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4bc:	7dfb      	ldrb	r3, [r7, #23]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f000 f832 	bl	800e528 <USBD_Get_USB_Status>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e4c8:	7dbb      	ldrb	r3, [r7, #22]
}
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	3718      	adds	r7, #24
 800e4ce:	46bd      	mov	sp, r7
 800e4d0:	bd80      	pop	{r7, pc}

0800e4d2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4d2:	b580      	push	{r7, lr}
 800e4d4:	b082      	sub	sp, #8
 800e4d6:	af00      	add	r7, sp, #0
 800e4d8:	6078      	str	r0, [r7, #4]
 800e4da:	460b      	mov	r3, r1
 800e4dc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e4e4:	78fa      	ldrb	r2, [r7, #3]
 800e4e6:	4611      	mov	r1, r2
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f7f8 fa08 	bl	80068fe <HAL_PCD_EP_GetRxCount>
 800e4ee:	4603      	mov	r3, r0
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3708      	adds	r7, #8
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}

0800e4f8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e4f8:	b480      	push	{r7}
 800e4fa:	b083      	sub	sp, #12
 800e4fc:	af00      	add	r7, sp, #0
 800e4fe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e500:	4b03      	ldr	r3, [pc, #12]	; (800e510 <USBD_static_malloc+0x18>)
}
 800e502:	4618      	mov	r0, r3
 800e504:	370c      	adds	r7, #12
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop
 800e510:	200072b4 	.word	0x200072b4

0800e514 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e514:	b480      	push	{r7}
 800e516:	b083      	sub	sp, #12
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]

}
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	4603      	mov	r3, r0
 800e530:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e532:	2300      	movs	r3, #0
 800e534:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e536:	79fb      	ldrb	r3, [r7, #7]
 800e538:	2b03      	cmp	r3, #3
 800e53a:	d817      	bhi.n	800e56c <USBD_Get_USB_Status+0x44>
 800e53c:	a201      	add	r2, pc, #4	; (adr r2, 800e544 <USBD_Get_USB_Status+0x1c>)
 800e53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e542:	bf00      	nop
 800e544:	0800e555 	.word	0x0800e555
 800e548:	0800e55b 	.word	0x0800e55b
 800e54c:	0800e561 	.word	0x0800e561
 800e550:	0800e567 	.word	0x0800e567
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e554:	2300      	movs	r3, #0
 800e556:	73fb      	strb	r3, [r7, #15]
    break;
 800e558:	e00b      	b.n	800e572 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e55a:	2303      	movs	r3, #3
 800e55c:	73fb      	strb	r3, [r7, #15]
    break;
 800e55e:	e008      	b.n	800e572 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e560:	2301      	movs	r3, #1
 800e562:	73fb      	strb	r3, [r7, #15]
    break;
 800e564:	e005      	b.n	800e572 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e566:	2303      	movs	r3, #3
 800e568:	73fb      	strb	r3, [r7, #15]
    break;
 800e56a:	e002      	b.n	800e572 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e56c:	2303      	movs	r3, #3
 800e56e:	73fb      	strb	r3, [r7, #15]
    break;
 800e570:	bf00      	nop
  }
  return usb_status;
 800e572:	7bfb      	ldrb	r3, [r7, #15]
}
 800e574:	4618      	mov	r0, r3
 800e576:	3714      	adds	r7, #20
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <std>:
 800e580:	2300      	movs	r3, #0
 800e582:	b510      	push	{r4, lr}
 800e584:	4604      	mov	r4, r0
 800e586:	e9c0 3300 	strd	r3, r3, [r0]
 800e58a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e58e:	6083      	str	r3, [r0, #8]
 800e590:	8181      	strh	r1, [r0, #12]
 800e592:	6643      	str	r3, [r0, #100]	; 0x64
 800e594:	81c2      	strh	r2, [r0, #14]
 800e596:	6183      	str	r3, [r0, #24]
 800e598:	4619      	mov	r1, r3
 800e59a:	2208      	movs	r2, #8
 800e59c:	305c      	adds	r0, #92	; 0x5c
 800e59e:	f000 f9f5 	bl	800e98c <memset>
 800e5a2:	4b05      	ldr	r3, [pc, #20]	; (800e5b8 <std+0x38>)
 800e5a4:	6263      	str	r3, [r4, #36]	; 0x24
 800e5a6:	4b05      	ldr	r3, [pc, #20]	; (800e5bc <std+0x3c>)
 800e5a8:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5aa:	4b05      	ldr	r3, [pc, #20]	; (800e5c0 <std+0x40>)
 800e5ac:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5ae:	4b05      	ldr	r3, [pc, #20]	; (800e5c4 <std+0x44>)
 800e5b0:	6224      	str	r4, [r4, #32]
 800e5b2:	6323      	str	r3, [r4, #48]	; 0x30
 800e5b4:	bd10      	pop	{r4, pc}
 800e5b6:	bf00      	nop
 800e5b8:	0800e7bd 	.word	0x0800e7bd
 800e5bc:	0800e7df 	.word	0x0800e7df
 800e5c0:	0800e817 	.word	0x0800e817
 800e5c4:	0800e83b 	.word	0x0800e83b

0800e5c8 <stdio_exit_handler>:
 800e5c8:	4a02      	ldr	r2, [pc, #8]	; (800e5d4 <stdio_exit_handler+0xc>)
 800e5ca:	4903      	ldr	r1, [pc, #12]	; (800e5d8 <stdio_exit_handler+0x10>)
 800e5cc:	4803      	ldr	r0, [pc, #12]	; (800e5dc <stdio_exit_handler+0x14>)
 800e5ce:	f000 b869 	b.w	800e6a4 <_fwalk_sglue>
 800e5d2:	bf00      	nop
 800e5d4:	20000110 	.word	0x20000110
 800e5d8:	0800f341 	.word	0x0800f341
 800e5dc:	2000011c 	.word	0x2000011c

0800e5e0 <cleanup_stdio>:
 800e5e0:	6841      	ldr	r1, [r0, #4]
 800e5e2:	4b0c      	ldr	r3, [pc, #48]	; (800e614 <cleanup_stdio+0x34>)
 800e5e4:	4299      	cmp	r1, r3
 800e5e6:	b510      	push	{r4, lr}
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	d001      	beq.n	800e5f0 <cleanup_stdio+0x10>
 800e5ec:	f000 fea8 	bl	800f340 <_fflush_r>
 800e5f0:	68a1      	ldr	r1, [r4, #8]
 800e5f2:	4b09      	ldr	r3, [pc, #36]	; (800e618 <cleanup_stdio+0x38>)
 800e5f4:	4299      	cmp	r1, r3
 800e5f6:	d002      	beq.n	800e5fe <cleanup_stdio+0x1e>
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f000 fea1 	bl	800f340 <_fflush_r>
 800e5fe:	68e1      	ldr	r1, [r4, #12]
 800e600:	4b06      	ldr	r3, [pc, #24]	; (800e61c <cleanup_stdio+0x3c>)
 800e602:	4299      	cmp	r1, r3
 800e604:	d004      	beq.n	800e610 <cleanup_stdio+0x30>
 800e606:	4620      	mov	r0, r4
 800e608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e60c:	f000 be98 	b.w	800f340 <_fflush_r>
 800e610:	bd10      	pop	{r4, pc}
 800e612:	bf00      	nop
 800e614:	200074d4 	.word	0x200074d4
 800e618:	2000753c 	.word	0x2000753c
 800e61c:	200075a4 	.word	0x200075a4

0800e620 <global_stdio_init.part.0>:
 800e620:	b510      	push	{r4, lr}
 800e622:	4b0b      	ldr	r3, [pc, #44]	; (800e650 <global_stdio_init.part.0+0x30>)
 800e624:	4c0b      	ldr	r4, [pc, #44]	; (800e654 <global_stdio_init.part.0+0x34>)
 800e626:	4a0c      	ldr	r2, [pc, #48]	; (800e658 <global_stdio_init.part.0+0x38>)
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	4620      	mov	r0, r4
 800e62c:	2200      	movs	r2, #0
 800e62e:	2104      	movs	r1, #4
 800e630:	f7ff ffa6 	bl	800e580 <std>
 800e634:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800e638:	2201      	movs	r2, #1
 800e63a:	2109      	movs	r1, #9
 800e63c:	f7ff ffa0 	bl	800e580 <std>
 800e640:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800e644:	2202      	movs	r2, #2
 800e646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e64a:	2112      	movs	r1, #18
 800e64c:	f7ff bf98 	b.w	800e580 <std>
 800e650:	2000760c 	.word	0x2000760c
 800e654:	200074d4 	.word	0x200074d4
 800e658:	0800e5c9 	.word	0x0800e5c9

0800e65c <__sfp_lock_acquire>:
 800e65c:	4801      	ldr	r0, [pc, #4]	; (800e664 <__sfp_lock_acquire+0x8>)
 800e65e:	f000 ba0d 	b.w	800ea7c <__retarget_lock_acquire_recursive>
 800e662:	bf00      	nop
 800e664:	20007615 	.word	0x20007615

0800e668 <__sfp_lock_release>:
 800e668:	4801      	ldr	r0, [pc, #4]	; (800e670 <__sfp_lock_release+0x8>)
 800e66a:	f000 ba08 	b.w	800ea7e <__retarget_lock_release_recursive>
 800e66e:	bf00      	nop
 800e670:	20007615 	.word	0x20007615

0800e674 <__sinit>:
 800e674:	b510      	push	{r4, lr}
 800e676:	4604      	mov	r4, r0
 800e678:	f7ff fff0 	bl	800e65c <__sfp_lock_acquire>
 800e67c:	6a23      	ldr	r3, [r4, #32]
 800e67e:	b11b      	cbz	r3, 800e688 <__sinit+0x14>
 800e680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e684:	f7ff bff0 	b.w	800e668 <__sfp_lock_release>
 800e688:	4b04      	ldr	r3, [pc, #16]	; (800e69c <__sinit+0x28>)
 800e68a:	6223      	str	r3, [r4, #32]
 800e68c:	4b04      	ldr	r3, [pc, #16]	; (800e6a0 <__sinit+0x2c>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1f5      	bne.n	800e680 <__sinit+0xc>
 800e694:	f7ff ffc4 	bl	800e620 <global_stdio_init.part.0>
 800e698:	e7f2      	b.n	800e680 <__sinit+0xc>
 800e69a:	bf00      	nop
 800e69c:	0800e5e1 	.word	0x0800e5e1
 800e6a0:	2000760c 	.word	0x2000760c

0800e6a4 <_fwalk_sglue>:
 800e6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6a8:	4607      	mov	r7, r0
 800e6aa:	4688      	mov	r8, r1
 800e6ac:	4614      	mov	r4, r2
 800e6ae:	2600      	movs	r6, #0
 800e6b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e6b4:	f1b9 0901 	subs.w	r9, r9, #1
 800e6b8:	d505      	bpl.n	800e6c6 <_fwalk_sglue+0x22>
 800e6ba:	6824      	ldr	r4, [r4, #0]
 800e6bc:	2c00      	cmp	r4, #0
 800e6be:	d1f7      	bne.n	800e6b0 <_fwalk_sglue+0xc>
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6c6:	89ab      	ldrh	r3, [r5, #12]
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	d907      	bls.n	800e6dc <_fwalk_sglue+0x38>
 800e6cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e6d0:	3301      	adds	r3, #1
 800e6d2:	d003      	beq.n	800e6dc <_fwalk_sglue+0x38>
 800e6d4:	4629      	mov	r1, r5
 800e6d6:	4638      	mov	r0, r7
 800e6d8:	47c0      	blx	r8
 800e6da:	4306      	orrs	r6, r0
 800e6dc:	3568      	adds	r5, #104	; 0x68
 800e6de:	e7e9      	b.n	800e6b4 <_fwalk_sglue+0x10>

0800e6e0 <iprintf>:
 800e6e0:	b40f      	push	{r0, r1, r2, r3}
 800e6e2:	b507      	push	{r0, r1, r2, lr}
 800e6e4:	4906      	ldr	r1, [pc, #24]	; (800e700 <iprintf+0x20>)
 800e6e6:	ab04      	add	r3, sp, #16
 800e6e8:	6808      	ldr	r0, [r1, #0]
 800e6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800e6ee:	6881      	ldr	r1, [r0, #8]
 800e6f0:	9301      	str	r3, [sp, #4]
 800e6f2:	f000 faf5 	bl	800ece0 <_vfiprintf_r>
 800e6f6:	b003      	add	sp, #12
 800e6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e6fc:	b004      	add	sp, #16
 800e6fe:	4770      	bx	lr
 800e700:	20000168 	.word	0x20000168

0800e704 <_puts_r>:
 800e704:	6a03      	ldr	r3, [r0, #32]
 800e706:	b570      	push	{r4, r5, r6, lr}
 800e708:	6884      	ldr	r4, [r0, #8]
 800e70a:	4605      	mov	r5, r0
 800e70c:	460e      	mov	r6, r1
 800e70e:	b90b      	cbnz	r3, 800e714 <_puts_r+0x10>
 800e710:	f7ff ffb0 	bl	800e674 <__sinit>
 800e714:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e716:	07db      	lsls	r3, r3, #31
 800e718:	d405      	bmi.n	800e726 <_puts_r+0x22>
 800e71a:	89a3      	ldrh	r3, [r4, #12]
 800e71c:	0598      	lsls	r0, r3, #22
 800e71e:	d402      	bmi.n	800e726 <_puts_r+0x22>
 800e720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e722:	f000 f9ab 	bl	800ea7c <__retarget_lock_acquire_recursive>
 800e726:	89a3      	ldrh	r3, [r4, #12]
 800e728:	0719      	lsls	r1, r3, #28
 800e72a:	d513      	bpl.n	800e754 <_puts_r+0x50>
 800e72c:	6923      	ldr	r3, [r4, #16]
 800e72e:	b18b      	cbz	r3, 800e754 <_puts_r+0x50>
 800e730:	3e01      	subs	r6, #1
 800e732:	68a3      	ldr	r3, [r4, #8]
 800e734:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e738:	3b01      	subs	r3, #1
 800e73a:	60a3      	str	r3, [r4, #8]
 800e73c:	b9e9      	cbnz	r1, 800e77a <_puts_r+0x76>
 800e73e:	2b00      	cmp	r3, #0
 800e740:	da2e      	bge.n	800e7a0 <_puts_r+0x9c>
 800e742:	4622      	mov	r2, r4
 800e744:	210a      	movs	r1, #10
 800e746:	4628      	mov	r0, r5
 800e748:	f000 f87b 	bl	800e842 <__swbuf_r>
 800e74c:	3001      	adds	r0, #1
 800e74e:	d007      	beq.n	800e760 <_puts_r+0x5c>
 800e750:	250a      	movs	r5, #10
 800e752:	e007      	b.n	800e764 <_puts_r+0x60>
 800e754:	4621      	mov	r1, r4
 800e756:	4628      	mov	r0, r5
 800e758:	f000 f8b0 	bl	800e8bc <__swsetup_r>
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d0e7      	beq.n	800e730 <_puts_r+0x2c>
 800e760:	f04f 35ff 	mov.w	r5, #4294967295
 800e764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e766:	07da      	lsls	r2, r3, #31
 800e768:	d405      	bmi.n	800e776 <_puts_r+0x72>
 800e76a:	89a3      	ldrh	r3, [r4, #12]
 800e76c:	059b      	lsls	r3, r3, #22
 800e76e:	d402      	bmi.n	800e776 <_puts_r+0x72>
 800e770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e772:	f000 f984 	bl	800ea7e <__retarget_lock_release_recursive>
 800e776:	4628      	mov	r0, r5
 800e778:	bd70      	pop	{r4, r5, r6, pc}
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	da04      	bge.n	800e788 <_puts_r+0x84>
 800e77e:	69a2      	ldr	r2, [r4, #24]
 800e780:	429a      	cmp	r2, r3
 800e782:	dc06      	bgt.n	800e792 <_puts_r+0x8e>
 800e784:	290a      	cmp	r1, #10
 800e786:	d004      	beq.n	800e792 <_puts_r+0x8e>
 800e788:	6823      	ldr	r3, [r4, #0]
 800e78a:	1c5a      	adds	r2, r3, #1
 800e78c:	6022      	str	r2, [r4, #0]
 800e78e:	7019      	strb	r1, [r3, #0]
 800e790:	e7cf      	b.n	800e732 <_puts_r+0x2e>
 800e792:	4622      	mov	r2, r4
 800e794:	4628      	mov	r0, r5
 800e796:	f000 f854 	bl	800e842 <__swbuf_r>
 800e79a:	3001      	adds	r0, #1
 800e79c:	d1c9      	bne.n	800e732 <_puts_r+0x2e>
 800e79e:	e7df      	b.n	800e760 <_puts_r+0x5c>
 800e7a0:	6823      	ldr	r3, [r4, #0]
 800e7a2:	250a      	movs	r5, #10
 800e7a4:	1c5a      	adds	r2, r3, #1
 800e7a6:	6022      	str	r2, [r4, #0]
 800e7a8:	701d      	strb	r5, [r3, #0]
 800e7aa:	e7db      	b.n	800e764 <_puts_r+0x60>

0800e7ac <puts>:
 800e7ac:	4b02      	ldr	r3, [pc, #8]	; (800e7b8 <puts+0xc>)
 800e7ae:	4601      	mov	r1, r0
 800e7b0:	6818      	ldr	r0, [r3, #0]
 800e7b2:	f7ff bfa7 	b.w	800e704 <_puts_r>
 800e7b6:	bf00      	nop
 800e7b8:	20000168 	.word	0x20000168

0800e7bc <__sread>:
 800e7bc:	b510      	push	{r4, lr}
 800e7be:	460c      	mov	r4, r1
 800e7c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c4:	f000 f90c 	bl	800e9e0 <_read_r>
 800e7c8:	2800      	cmp	r0, #0
 800e7ca:	bfab      	itete	ge
 800e7cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7ce:	89a3      	ldrhlt	r3, [r4, #12]
 800e7d0:	181b      	addge	r3, r3, r0
 800e7d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7d6:	bfac      	ite	ge
 800e7d8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e7da:	81a3      	strhlt	r3, [r4, #12]
 800e7dc:	bd10      	pop	{r4, pc}

0800e7de <__swrite>:
 800e7de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7e2:	461f      	mov	r7, r3
 800e7e4:	898b      	ldrh	r3, [r1, #12]
 800e7e6:	05db      	lsls	r3, r3, #23
 800e7e8:	4605      	mov	r5, r0
 800e7ea:	460c      	mov	r4, r1
 800e7ec:	4616      	mov	r6, r2
 800e7ee:	d505      	bpl.n	800e7fc <__swrite+0x1e>
 800e7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7f4:	2302      	movs	r3, #2
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f000 f8e0 	bl	800e9bc <_lseek_r>
 800e7fc:	89a3      	ldrh	r3, [r4, #12]
 800e7fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e806:	81a3      	strh	r3, [r4, #12]
 800e808:	4632      	mov	r2, r6
 800e80a:	463b      	mov	r3, r7
 800e80c:	4628      	mov	r0, r5
 800e80e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e812:	f000 b8f7 	b.w	800ea04 <_write_r>

0800e816 <__sseek>:
 800e816:	b510      	push	{r4, lr}
 800e818:	460c      	mov	r4, r1
 800e81a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e81e:	f000 f8cd 	bl	800e9bc <_lseek_r>
 800e822:	1c43      	adds	r3, r0, #1
 800e824:	89a3      	ldrh	r3, [r4, #12]
 800e826:	bf15      	itete	ne
 800e828:	6560      	strne	r0, [r4, #84]	; 0x54
 800e82a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e82e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e832:	81a3      	strheq	r3, [r4, #12]
 800e834:	bf18      	it	ne
 800e836:	81a3      	strhne	r3, [r4, #12]
 800e838:	bd10      	pop	{r4, pc}

0800e83a <__sclose>:
 800e83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e83e:	f000 b8ad 	b.w	800e99c <_close_r>

0800e842 <__swbuf_r>:
 800e842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e844:	460e      	mov	r6, r1
 800e846:	4614      	mov	r4, r2
 800e848:	4605      	mov	r5, r0
 800e84a:	b118      	cbz	r0, 800e854 <__swbuf_r+0x12>
 800e84c:	6a03      	ldr	r3, [r0, #32]
 800e84e:	b90b      	cbnz	r3, 800e854 <__swbuf_r+0x12>
 800e850:	f7ff ff10 	bl	800e674 <__sinit>
 800e854:	69a3      	ldr	r3, [r4, #24]
 800e856:	60a3      	str	r3, [r4, #8]
 800e858:	89a3      	ldrh	r3, [r4, #12]
 800e85a:	071a      	lsls	r2, r3, #28
 800e85c:	d525      	bpl.n	800e8aa <__swbuf_r+0x68>
 800e85e:	6923      	ldr	r3, [r4, #16]
 800e860:	b31b      	cbz	r3, 800e8aa <__swbuf_r+0x68>
 800e862:	6823      	ldr	r3, [r4, #0]
 800e864:	6922      	ldr	r2, [r4, #16]
 800e866:	1a98      	subs	r0, r3, r2
 800e868:	6963      	ldr	r3, [r4, #20]
 800e86a:	b2f6      	uxtb	r6, r6
 800e86c:	4283      	cmp	r3, r0
 800e86e:	4637      	mov	r7, r6
 800e870:	dc04      	bgt.n	800e87c <__swbuf_r+0x3a>
 800e872:	4621      	mov	r1, r4
 800e874:	4628      	mov	r0, r5
 800e876:	f000 fd63 	bl	800f340 <_fflush_r>
 800e87a:	b9e0      	cbnz	r0, 800e8b6 <__swbuf_r+0x74>
 800e87c:	68a3      	ldr	r3, [r4, #8]
 800e87e:	3b01      	subs	r3, #1
 800e880:	60a3      	str	r3, [r4, #8]
 800e882:	6823      	ldr	r3, [r4, #0]
 800e884:	1c5a      	adds	r2, r3, #1
 800e886:	6022      	str	r2, [r4, #0]
 800e888:	701e      	strb	r6, [r3, #0]
 800e88a:	6962      	ldr	r2, [r4, #20]
 800e88c:	1c43      	adds	r3, r0, #1
 800e88e:	429a      	cmp	r2, r3
 800e890:	d004      	beq.n	800e89c <__swbuf_r+0x5a>
 800e892:	89a3      	ldrh	r3, [r4, #12]
 800e894:	07db      	lsls	r3, r3, #31
 800e896:	d506      	bpl.n	800e8a6 <__swbuf_r+0x64>
 800e898:	2e0a      	cmp	r6, #10
 800e89a:	d104      	bne.n	800e8a6 <__swbuf_r+0x64>
 800e89c:	4621      	mov	r1, r4
 800e89e:	4628      	mov	r0, r5
 800e8a0:	f000 fd4e 	bl	800f340 <_fflush_r>
 800e8a4:	b938      	cbnz	r0, 800e8b6 <__swbuf_r+0x74>
 800e8a6:	4638      	mov	r0, r7
 800e8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e8aa:	4621      	mov	r1, r4
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	f000 f805 	bl	800e8bc <__swsetup_r>
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d0d5      	beq.n	800e862 <__swbuf_r+0x20>
 800e8b6:	f04f 37ff 	mov.w	r7, #4294967295
 800e8ba:	e7f4      	b.n	800e8a6 <__swbuf_r+0x64>

0800e8bc <__swsetup_r>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4b2a      	ldr	r3, [pc, #168]	; (800e968 <__swsetup_r+0xac>)
 800e8c0:	4605      	mov	r5, r0
 800e8c2:	6818      	ldr	r0, [r3, #0]
 800e8c4:	460c      	mov	r4, r1
 800e8c6:	b118      	cbz	r0, 800e8d0 <__swsetup_r+0x14>
 800e8c8:	6a03      	ldr	r3, [r0, #32]
 800e8ca:	b90b      	cbnz	r3, 800e8d0 <__swsetup_r+0x14>
 800e8cc:	f7ff fed2 	bl	800e674 <__sinit>
 800e8d0:	89a3      	ldrh	r3, [r4, #12]
 800e8d2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e8d6:	0718      	lsls	r0, r3, #28
 800e8d8:	d422      	bmi.n	800e920 <__swsetup_r+0x64>
 800e8da:	06d9      	lsls	r1, r3, #27
 800e8dc:	d407      	bmi.n	800e8ee <__swsetup_r+0x32>
 800e8de:	2309      	movs	r3, #9
 800e8e0:	602b      	str	r3, [r5, #0]
 800e8e2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e8e6:	81a3      	strh	r3, [r4, #12]
 800e8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8ec:	e034      	b.n	800e958 <__swsetup_r+0x9c>
 800e8ee:	0758      	lsls	r0, r3, #29
 800e8f0:	d512      	bpl.n	800e918 <__swsetup_r+0x5c>
 800e8f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8f4:	b141      	cbz	r1, 800e908 <__swsetup_r+0x4c>
 800e8f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8fa:	4299      	cmp	r1, r3
 800e8fc:	d002      	beq.n	800e904 <__swsetup_r+0x48>
 800e8fe:	4628      	mov	r0, r5
 800e900:	f000 f8cc 	bl	800ea9c <_free_r>
 800e904:	2300      	movs	r3, #0
 800e906:	6363      	str	r3, [r4, #52]	; 0x34
 800e908:	89a3      	ldrh	r3, [r4, #12]
 800e90a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e90e:	81a3      	strh	r3, [r4, #12]
 800e910:	2300      	movs	r3, #0
 800e912:	6063      	str	r3, [r4, #4]
 800e914:	6923      	ldr	r3, [r4, #16]
 800e916:	6023      	str	r3, [r4, #0]
 800e918:	89a3      	ldrh	r3, [r4, #12]
 800e91a:	f043 0308 	orr.w	r3, r3, #8
 800e91e:	81a3      	strh	r3, [r4, #12]
 800e920:	6923      	ldr	r3, [r4, #16]
 800e922:	b94b      	cbnz	r3, 800e938 <__swsetup_r+0x7c>
 800e924:	89a3      	ldrh	r3, [r4, #12]
 800e926:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e92a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e92e:	d003      	beq.n	800e938 <__swsetup_r+0x7c>
 800e930:	4621      	mov	r1, r4
 800e932:	4628      	mov	r0, r5
 800e934:	f000 fd52 	bl	800f3dc <__smakebuf_r>
 800e938:	89a0      	ldrh	r0, [r4, #12]
 800e93a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e93e:	f010 0301 	ands.w	r3, r0, #1
 800e942:	d00a      	beq.n	800e95a <__swsetup_r+0x9e>
 800e944:	2300      	movs	r3, #0
 800e946:	60a3      	str	r3, [r4, #8]
 800e948:	6963      	ldr	r3, [r4, #20]
 800e94a:	425b      	negs	r3, r3
 800e94c:	61a3      	str	r3, [r4, #24]
 800e94e:	6923      	ldr	r3, [r4, #16]
 800e950:	b943      	cbnz	r3, 800e964 <__swsetup_r+0xa8>
 800e952:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e956:	d1c4      	bne.n	800e8e2 <__swsetup_r+0x26>
 800e958:	bd38      	pop	{r3, r4, r5, pc}
 800e95a:	0781      	lsls	r1, r0, #30
 800e95c:	bf58      	it	pl
 800e95e:	6963      	ldrpl	r3, [r4, #20]
 800e960:	60a3      	str	r3, [r4, #8]
 800e962:	e7f4      	b.n	800e94e <__swsetup_r+0x92>
 800e964:	2000      	movs	r0, #0
 800e966:	e7f7      	b.n	800e958 <__swsetup_r+0x9c>
 800e968:	20000168 	.word	0x20000168

0800e96c <memcmp>:
 800e96c:	b510      	push	{r4, lr}
 800e96e:	3901      	subs	r1, #1
 800e970:	4402      	add	r2, r0
 800e972:	4290      	cmp	r0, r2
 800e974:	d101      	bne.n	800e97a <memcmp+0xe>
 800e976:	2000      	movs	r0, #0
 800e978:	e005      	b.n	800e986 <memcmp+0x1a>
 800e97a:	7803      	ldrb	r3, [r0, #0]
 800e97c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e980:	42a3      	cmp	r3, r4
 800e982:	d001      	beq.n	800e988 <memcmp+0x1c>
 800e984:	1b18      	subs	r0, r3, r4
 800e986:	bd10      	pop	{r4, pc}
 800e988:	3001      	adds	r0, #1
 800e98a:	e7f2      	b.n	800e972 <memcmp+0x6>

0800e98c <memset>:
 800e98c:	4402      	add	r2, r0
 800e98e:	4603      	mov	r3, r0
 800e990:	4293      	cmp	r3, r2
 800e992:	d100      	bne.n	800e996 <memset+0xa>
 800e994:	4770      	bx	lr
 800e996:	f803 1b01 	strb.w	r1, [r3], #1
 800e99a:	e7f9      	b.n	800e990 <memset+0x4>

0800e99c <_close_r>:
 800e99c:	b538      	push	{r3, r4, r5, lr}
 800e99e:	4d06      	ldr	r5, [pc, #24]	; (800e9b8 <_close_r+0x1c>)
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	4608      	mov	r0, r1
 800e9a6:	602b      	str	r3, [r5, #0]
 800e9a8:	f7f5 fbd5 	bl	8004156 <_close>
 800e9ac:	1c43      	adds	r3, r0, #1
 800e9ae:	d102      	bne.n	800e9b6 <_close_r+0x1a>
 800e9b0:	682b      	ldr	r3, [r5, #0]
 800e9b2:	b103      	cbz	r3, 800e9b6 <_close_r+0x1a>
 800e9b4:	6023      	str	r3, [r4, #0]
 800e9b6:	bd38      	pop	{r3, r4, r5, pc}
 800e9b8:	20007610 	.word	0x20007610

0800e9bc <_lseek_r>:
 800e9bc:	b538      	push	{r3, r4, r5, lr}
 800e9be:	4d07      	ldr	r5, [pc, #28]	; (800e9dc <_lseek_r+0x20>)
 800e9c0:	4604      	mov	r4, r0
 800e9c2:	4608      	mov	r0, r1
 800e9c4:	4611      	mov	r1, r2
 800e9c6:	2200      	movs	r2, #0
 800e9c8:	602a      	str	r2, [r5, #0]
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	f7f5 fbea 	bl	80041a4 <_lseek>
 800e9d0:	1c43      	adds	r3, r0, #1
 800e9d2:	d102      	bne.n	800e9da <_lseek_r+0x1e>
 800e9d4:	682b      	ldr	r3, [r5, #0]
 800e9d6:	b103      	cbz	r3, 800e9da <_lseek_r+0x1e>
 800e9d8:	6023      	str	r3, [r4, #0]
 800e9da:	bd38      	pop	{r3, r4, r5, pc}
 800e9dc:	20007610 	.word	0x20007610

0800e9e0 <_read_r>:
 800e9e0:	b538      	push	{r3, r4, r5, lr}
 800e9e2:	4d07      	ldr	r5, [pc, #28]	; (800ea00 <_read_r+0x20>)
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	4608      	mov	r0, r1
 800e9e8:	4611      	mov	r1, r2
 800e9ea:	2200      	movs	r2, #0
 800e9ec:	602a      	str	r2, [r5, #0]
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	f7f5 fb94 	bl	800411c <_read>
 800e9f4:	1c43      	adds	r3, r0, #1
 800e9f6:	d102      	bne.n	800e9fe <_read_r+0x1e>
 800e9f8:	682b      	ldr	r3, [r5, #0]
 800e9fa:	b103      	cbz	r3, 800e9fe <_read_r+0x1e>
 800e9fc:	6023      	str	r3, [r4, #0]
 800e9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ea00:	20007610 	.word	0x20007610

0800ea04 <_write_r>:
 800ea04:	b538      	push	{r3, r4, r5, lr}
 800ea06:	4d07      	ldr	r5, [pc, #28]	; (800ea24 <_write_r+0x20>)
 800ea08:	4604      	mov	r4, r0
 800ea0a:	4608      	mov	r0, r1
 800ea0c:	4611      	mov	r1, r2
 800ea0e:	2200      	movs	r2, #0
 800ea10:	602a      	str	r2, [r5, #0]
 800ea12:	461a      	mov	r2, r3
 800ea14:	f7f2 fd72 	bl	80014fc <_write>
 800ea18:	1c43      	adds	r3, r0, #1
 800ea1a:	d102      	bne.n	800ea22 <_write_r+0x1e>
 800ea1c:	682b      	ldr	r3, [r5, #0]
 800ea1e:	b103      	cbz	r3, 800ea22 <_write_r+0x1e>
 800ea20:	6023      	str	r3, [r4, #0]
 800ea22:	bd38      	pop	{r3, r4, r5, pc}
 800ea24:	20007610 	.word	0x20007610

0800ea28 <__errno>:
 800ea28:	4b01      	ldr	r3, [pc, #4]	; (800ea30 <__errno+0x8>)
 800ea2a:	6818      	ldr	r0, [r3, #0]
 800ea2c:	4770      	bx	lr
 800ea2e:	bf00      	nop
 800ea30:	20000168 	.word	0x20000168

0800ea34 <__libc_init_array>:
 800ea34:	b570      	push	{r4, r5, r6, lr}
 800ea36:	4d0d      	ldr	r5, [pc, #52]	; (800ea6c <__libc_init_array+0x38>)
 800ea38:	4c0d      	ldr	r4, [pc, #52]	; (800ea70 <__libc_init_array+0x3c>)
 800ea3a:	1b64      	subs	r4, r4, r5
 800ea3c:	10a4      	asrs	r4, r4, #2
 800ea3e:	2600      	movs	r6, #0
 800ea40:	42a6      	cmp	r6, r4
 800ea42:	d109      	bne.n	800ea58 <__libc_init_array+0x24>
 800ea44:	4d0b      	ldr	r5, [pc, #44]	; (800ea74 <__libc_init_array+0x40>)
 800ea46:	4c0c      	ldr	r4, [pc, #48]	; (800ea78 <__libc_init_array+0x44>)
 800ea48:	f000 fd36 	bl	800f4b8 <_init>
 800ea4c:	1b64      	subs	r4, r4, r5
 800ea4e:	10a4      	asrs	r4, r4, #2
 800ea50:	2600      	movs	r6, #0
 800ea52:	42a6      	cmp	r6, r4
 800ea54:	d105      	bne.n	800ea62 <__libc_init_array+0x2e>
 800ea56:	bd70      	pop	{r4, r5, r6, pc}
 800ea58:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea5c:	4798      	blx	r3
 800ea5e:	3601      	adds	r6, #1
 800ea60:	e7ee      	b.n	800ea40 <__libc_init_array+0xc>
 800ea62:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea66:	4798      	blx	r3
 800ea68:	3601      	adds	r6, #1
 800ea6a:	e7f2      	b.n	800ea52 <__libc_init_array+0x1e>
 800ea6c:	08011858 	.word	0x08011858
 800ea70:	08011858 	.word	0x08011858
 800ea74:	08011858 	.word	0x08011858
 800ea78:	0801185c 	.word	0x0801185c

0800ea7c <__retarget_lock_acquire_recursive>:
 800ea7c:	4770      	bx	lr

0800ea7e <__retarget_lock_release_recursive>:
 800ea7e:	4770      	bx	lr

0800ea80 <memcpy>:
 800ea80:	440a      	add	r2, r1
 800ea82:	4291      	cmp	r1, r2
 800ea84:	f100 33ff 	add.w	r3, r0, #4294967295
 800ea88:	d100      	bne.n	800ea8c <memcpy+0xc>
 800ea8a:	4770      	bx	lr
 800ea8c:	b510      	push	{r4, lr}
 800ea8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ea92:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ea96:	4291      	cmp	r1, r2
 800ea98:	d1f9      	bne.n	800ea8e <memcpy+0xe>
 800ea9a:	bd10      	pop	{r4, pc}

0800ea9c <_free_r>:
 800ea9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ea9e:	2900      	cmp	r1, #0
 800eaa0:	d044      	beq.n	800eb2c <_free_r+0x90>
 800eaa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eaa6:	9001      	str	r0, [sp, #4]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	f1a1 0404 	sub.w	r4, r1, #4
 800eaae:	bfb8      	it	lt
 800eab0:	18e4      	addlt	r4, r4, r3
 800eab2:	f000 f8df 	bl	800ec74 <__malloc_lock>
 800eab6:	4a1e      	ldr	r2, [pc, #120]	; (800eb30 <_free_r+0x94>)
 800eab8:	9801      	ldr	r0, [sp, #4]
 800eaba:	6813      	ldr	r3, [r2, #0]
 800eabc:	b933      	cbnz	r3, 800eacc <_free_r+0x30>
 800eabe:	6063      	str	r3, [r4, #4]
 800eac0:	6014      	str	r4, [r2, #0]
 800eac2:	b003      	add	sp, #12
 800eac4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eac8:	f000 b8da 	b.w	800ec80 <__malloc_unlock>
 800eacc:	42a3      	cmp	r3, r4
 800eace:	d908      	bls.n	800eae2 <_free_r+0x46>
 800ead0:	6825      	ldr	r5, [r4, #0]
 800ead2:	1961      	adds	r1, r4, r5
 800ead4:	428b      	cmp	r3, r1
 800ead6:	bf01      	itttt	eq
 800ead8:	6819      	ldreq	r1, [r3, #0]
 800eada:	685b      	ldreq	r3, [r3, #4]
 800eadc:	1949      	addeq	r1, r1, r5
 800eade:	6021      	streq	r1, [r4, #0]
 800eae0:	e7ed      	b.n	800eabe <_free_r+0x22>
 800eae2:	461a      	mov	r2, r3
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	b10b      	cbz	r3, 800eaec <_free_r+0x50>
 800eae8:	42a3      	cmp	r3, r4
 800eaea:	d9fa      	bls.n	800eae2 <_free_r+0x46>
 800eaec:	6811      	ldr	r1, [r2, #0]
 800eaee:	1855      	adds	r5, r2, r1
 800eaf0:	42a5      	cmp	r5, r4
 800eaf2:	d10b      	bne.n	800eb0c <_free_r+0x70>
 800eaf4:	6824      	ldr	r4, [r4, #0]
 800eaf6:	4421      	add	r1, r4
 800eaf8:	1854      	adds	r4, r2, r1
 800eafa:	42a3      	cmp	r3, r4
 800eafc:	6011      	str	r1, [r2, #0]
 800eafe:	d1e0      	bne.n	800eac2 <_free_r+0x26>
 800eb00:	681c      	ldr	r4, [r3, #0]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	6053      	str	r3, [r2, #4]
 800eb06:	440c      	add	r4, r1
 800eb08:	6014      	str	r4, [r2, #0]
 800eb0a:	e7da      	b.n	800eac2 <_free_r+0x26>
 800eb0c:	d902      	bls.n	800eb14 <_free_r+0x78>
 800eb0e:	230c      	movs	r3, #12
 800eb10:	6003      	str	r3, [r0, #0]
 800eb12:	e7d6      	b.n	800eac2 <_free_r+0x26>
 800eb14:	6825      	ldr	r5, [r4, #0]
 800eb16:	1961      	adds	r1, r4, r5
 800eb18:	428b      	cmp	r3, r1
 800eb1a:	bf04      	itt	eq
 800eb1c:	6819      	ldreq	r1, [r3, #0]
 800eb1e:	685b      	ldreq	r3, [r3, #4]
 800eb20:	6063      	str	r3, [r4, #4]
 800eb22:	bf04      	itt	eq
 800eb24:	1949      	addeq	r1, r1, r5
 800eb26:	6021      	streq	r1, [r4, #0]
 800eb28:	6054      	str	r4, [r2, #4]
 800eb2a:	e7ca      	b.n	800eac2 <_free_r+0x26>
 800eb2c:	b003      	add	sp, #12
 800eb2e:	bd30      	pop	{r4, r5, pc}
 800eb30:	20007618 	.word	0x20007618

0800eb34 <sbrk_aligned>:
 800eb34:	b570      	push	{r4, r5, r6, lr}
 800eb36:	4e0e      	ldr	r6, [pc, #56]	; (800eb70 <sbrk_aligned+0x3c>)
 800eb38:	460c      	mov	r4, r1
 800eb3a:	6831      	ldr	r1, [r6, #0]
 800eb3c:	4605      	mov	r5, r0
 800eb3e:	b911      	cbnz	r1, 800eb46 <sbrk_aligned+0x12>
 800eb40:	f000 fcaa 	bl	800f498 <_sbrk_r>
 800eb44:	6030      	str	r0, [r6, #0]
 800eb46:	4621      	mov	r1, r4
 800eb48:	4628      	mov	r0, r5
 800eb4a:	f000 fca5 	bl	800f498 <_sbrk_r>
 800eb4e:	1c43      	adds	r3, r0, #1
 800eb50:	d00a      	beq.n	800eb68 <sbrk_aligned+0x34>
 800eb52:	1cc4      	adds	r4, r0, #3
 800eb54:	f024 0403 	bic.w	r4, r4, #3
 800eb58:	42a0      	cmp	r0, r4
 800eb5a:	d007      	beq.n	800eb6c <sbrk_aligned+0x38>
 800eb5c:	1a21      	subs	r1, r4, r0
 800eb5e:	4628      	mov	r0, r5
 800eb60:	f000 fc9a 	bl	800f498 <_sbrk_r>
 800eb64:	3001      	adds	r0, #1
 800eb66:	d101      	bne.n	800eb6c <sbrk_aligned+0x38>
 800eb68:	f04f 34ff 	mov.w	r4, #4294967295
 800eb6c:	4620      	mov	r0, r4
 800eb6e:	bd70      	pop	{r4, r5, r6, pc}
 800eb70:	2000761c 	.word	0x2000761c

0800eb74 <_malloc_r>:
 800eb74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb78:	1ccd      	adds	r5, r1, #3
 800eb7a:	f025 0503 	bic.w	r5, r5, #3
 800eb7e:	3508      	adds	r5, #8
 800eb80:	2d0c      	cmp	r5, #12
 800eb82:	bf38      	it	cc
 800eb84:	250c      	movcc	r5, #12
 800eb86:	2d00      	cmp	r5, #0
 800eb88:	4607      	mov	r7, r0
 800eb8a:	db01      	blt.n	800eb90 <_malloc_r+0x1c>
 800eb8c:	42a9      	cmp	r1, r5
 800eb8e:	d905      	bls.n	800eb9c <_malloc_r+0x28>
 800eb90:	230c      	movs	r3, #12
 800eb92:	603b      	str	r3, [r7, #0]
 800eb94:	2600      	movs	r6, #0
 800eb96:	4630      	mov	r0, r6
 800eb98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eb9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ec70 <_malloc_r+0xfc>
 800eba0:	f000 f868 	bl	800ec74 <__malloc_lock>
 800eba4:	f8d8 3000 	ldr.w	r3, [r8]
 800eba8:	461c      	mov	r4, r3
 800ebaa:	bb5c      	cbnz	r4, 800ec04 <_malloc_r+0x90>
 800ebac:	4629      	mov	r1, r5
 800ebae:	4638      	mov	r0, r7
 800ebb0:	f7ff ffc0 	bl	800eb34 <sbrk_aligned>
 800ebb4:	1c43      	adds	r3, r0, #1
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	d155      	bne.n	800ec66 <_malloc_r+0xf2>
 800ebba:	f8d8 4000 	ldr.w	r4, [r8]
 800ebbe:	4626      	mov	r6, r4
 800ebc0:	2e00      	cmp	r6, #0
 800ebc2:	d145      	bne.n	800ec50 <_malloc_r+0xdc>
 800ebc4:	2c00      	cmp	r4, #0
 800ebc6:	d048      	beq.n	800ec5a <_malloc_r+0xe6>
 800ebc8:	6823      	ldr	r3, [r4, #0]
 800ebca:	4631      	mov	r1, r6
 800ebcc:	4638      	mov	r0, r7
 800ebce:	eb04 0903 	add.w	r9, r4, r3
 800ebd2:	f000 fc61 	bl	800f498 <_sbrk_r>
 800ebd6:	4581      	cmp	r9, r0
 800ebd8:	d13f      	bne.n	800ec5a <_malloc_r+0xe6>
 800ebda:	6821      	ldr	r1, [r4, #0]
 800ebdc:	1a6d      	subs	r5, r5, r1
 800ebde:	4629      	mov	r1, r5
 800ebe0:	4638      	mov	r0, r7
 800ebe2:	f7ff ffa7 	bl	800eb34 <sbrk_aligned>
 800ebe6:	3001      	adds	r0, #1
 800ebe8:	d037      	beq.n	800ec5a <_malloc_r+0xe6>
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	442b      	add	r3, r5
 800ebee:	6023      	str	r3, [r4, #0]
 800ebf0:	f8d8 3000 	ldr.w	r3, [r8]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d038      	beq.n	800ec6a <_malloc_r+0xf6>
 800ebf8:	685a      	ldr	r2, [r3, #4]
 800ebfa:	42a2      	cmp	r2, r4
 800ebfc:	d12b      	bne.n	800ec56 <_malloc_r+0xe2>
 800ebfe:	2200      	movs	r2, #0
 800ec00:	605a      	str	r2, [r3, #4]
 800ec02:	e00f      	b.n	800ec24 <_malloc_r+0xb0>
 800ec04:	6822      	ldr	r2, [r4, #0]
 800ec06:	1b52      	subs	r2, r2, r5
 800ec08:	d41f      	bmi.n	800ec4a <_malloc_r+0xd6>
 800ec0a:	2a0b      	cmp	r2, #11
 800ec0c:	d917      	bls.n	800ec3e <_malloc_r+0xca>
 800ec0e:	1961      	adds	r1, r4, r5
 800ec10:	42a3      	cmp	r3, r4
 800ec12:	6025      	str	r5, [r4, #0]
 800ec14:	bf18      	it	ne
 800ec16:	6059      	strne	r1, [r3, #4]
 800ec18:	6863      	ldr	r3, [r4, #4]
 800ec1a:	bf08      	it	eq
 800ec1c:	f8c8 1000 	streq.w	r1, [r8]
 800ec20:	5162      	str	r2, [r4, r5]
 800ec22:	604b      	str	r3, [r1, #4]
 800ec24:	4638      	mov	r0, r7
 800ec26:	f104 060b 	add.w	r6, r4, #11
 800ec2a:	f000 f829 	bl	800ec80 <__malloc_unlock>
 800ec2e:	f026 0607 	bic.w	r6, r6, #7
 800ec32:	1d23      	adds	r3, r4, #4
 800ec34:	1af2      	subs	r2, r6, r3
 800ec36:	d0ae      	beq.n	800eb96 <_malloc_r+0x22>
 800ec38:	1b9b      	subs	r3, r3, r6
 800ec3a:	50a3      	str	r3, [r4, r2]
 800ec3c:	e7ab      	b.n	800eb96 <_malloc_r+0x22>
 800ec3e:	42a3      	cmp	r3, r4
 800ec40:	6862      	ldr	r2, [r4, #4]
 800ec42:	d1dd      	bne.n	800ec00 <_malloc_r+0x8c>
 800ec44:	f8c8 2000 	str.w	r2, [r8]
 800ec48:	e7ec      	b.n	800ec24 <_malloc_r+0xb0>
 800ec4a:	4623      	mov	r3, r4
 800ec4c:	6864      	ldr	r4, [r4, #4]
 800ec4e:	e7ac      	b.n	800ebaa <_malloc_r+0x36>
 800ec50:	4634      	mov	r4, r6
 800ec52:	6876      	ldr	r6, [r6, #4]
 800ec54:	e7b4      	b.n	800ebc0 <_malloc_r+0x4c>
 800ec56:	4613      	mov	r3, r2
 800ec58:	e7cc      	b.n	800ebf4 <_malloc_r+0x80>
 800ec5a:	230c      	movs	r3, #12
 800ec5c:	603b      	str	r3, [r7, #0]
 800ec5e:	4638      	mov	r0, r7
 800ec60:	f000 f80e 	bl	800ec80 <__malloc_unlock>
 800ec64:	e797      	b.n	800eb96 <_malloc_r+0x22>
 800ec66:	6025      	str	r5, [r4, #0]
 800ec68:	e7dc      	b.n	800ec24 <_malloc_r+0xb0>
 800ec6a:	605b      	str	r3, [r3, #4]
 800ec6c:	deff      	udf	#255	; 0xff
 800ec6e:	bf00      	nop
 800ec70:	20007618 	.word	0x20007618

0800ec74 <__malloc_lock>:
 800ec74:	4801      	ldr	r0, [pc, #4]	; (800ec7c <__malloc_lock+0x8>)
 800ec76:	f7ff bf01 	b.w	800ea7c <__retarget_lock_acquire_recursive>
 800ec7a:	bf00      	nop
 800ec7c:	20007614 	.word	0x20007614

0800ec80 <__malloc_unlock>:
 800ec80:	4801      	ldr	r0, [pc, #4]	; (800ec88 <__malloc_unlock+0x8>)
 800ec82:	f7ff befc 	b.w	800ea7e <__retarget_lock_release_recursive>
 800ec86:	bf00      	nop
 800ec88:	20007614 	.word	0x20007614

0800ec8c <__sfputc_r>:
 800ec8c:	6893      	ldr	r3, [r2, #8]
 800ec8e:	3b01      	subs	r3, #1
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	b410      	push	{r4}
 800ec94:	6093      	str	r3, [r2, #8]
 800ec96:	da08      	bge.n	800ecaa <__sfputc_r+0x1e>
 800ec98:	6994      	ldr	r4, [r2, #24]
 800ec9a:	42a3      	cmp	r3, r4
 800ec9c:	db01      	blt.n	800eca2 <__sfputc_r+0x16>
 800ec9e:	290a      	cmp	r1, #10
 800eca0:	d103      	bne.n	800ecaa <__sfputc_r+0x1e>
 800eca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eca6:	f7ff bdcc 	b.w	800e842 <__swbuf_r>
 800ecaa:	6813      	ldr	r3, [r2, #0]
 800ecac:	1c58      	adds	r0, r3, #1
 800ecae:	6010      	str	r0, [r2, #0]
 800ecb0:	7019      	strb	r1, [r3, #0]
 800ecb2:	4608      	mov	r0, r1
 800ecb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ecb8:	4770      	bx	lr

0800ecba <__sfputs_r>:
 800ecba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecbc:	4606      	mov	r6, r0
 800ecbe:	460f      	mov	r7, r1
 800ecc0:	4614      	mov	r4, r2
 800ecc2:	18d5      	adds	r5, r2, r3
 800ecc4:	42ac      	cmp	r4, r5
 800ecc6:	d101      	bne.n	800eccc <__sfputs_r+0x12>
 800ecc8:	2000      	movs	r0, #0
 800ecca:	e007      	b.n	800ecdc <__sfputs_r+0x22>
 800eccc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecd0:	463a      	mov	r2, r7
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	f7ff ffda 	bl	800ec8c <__sfputc_r>
 800ecd8:	1c43      	adds	r3, r0, #1
 800ecda:	d1f3      	bne.n	800ecc4 <__sfputs_r+0xa>
 800ecdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ece0 <_vfiprintf_r>:
 800ece0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ece4:	460d      	mov	r5, r1
 800ece6:	b09d      	sub	sp, #116	; 0x74
 800ece8:	4614      	mov	r4, r2
 800ecea:	4698      	mov	r8, r3
 800ecec:	4606      	mov	r6, r0
 800ecee:	b118      	cbz	r0, 800ecf8 <_vfiprintf_r+0x18>
 800ecf0:	6a03      	ldr	r3, [r0, #32]
 800ecf2:	b90b      	cbnz	r3, 800ecf8 <_vfiprintf_r+0x18>
 800ecf4:	f7ff fcbe 	bl	800e674 <__sinit>
 800ecf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ecfa:	07d9      	lsls	r1, r3, #31
 800ecfc:	d405      	bmi.n	800ed0a <_vfiprintf_r+0x2a>
 800ecfe:	89ab      	ldrh	r3, [r5, #12]
 800ed00:	059a      	lsls	r2, r3, #22
 800ed02:	d402      	bmi.n	800ed0a <_vfiprintf_r+0x2a>
 800ed04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed06:	f7ff feb9 	bl	800ea7c <__retarget_lock_acquire_recursive>
 800ed0a:	89ab      	ldrh	r3, [r5, #12]
 800ed0c:	071b      	lsls	r3, r3, #28
 800ed0e:	d501      	bpl.n	800ed14 <_vfiprintf_r+0x34>
 800ed10:	692b      	ldr	r3, [r5, #16]
 800ed12:	b99b      	cbnz	r3, 800ed3c <_vfiprintf_r+0x5c>
 800ed14:	4629      	mov	r1, r5
 800ed16:	4630      	mov	r0, r6
 800ed18:	f7ff fdd0 	bl	800e8bc <__swsetup_r>
 800ed1c:	b170      	cbz	r0, 800ed3c <_vfiprintf_r+0x5c>
 800ed1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed20:	07dc      	lsls	r4, r3, #31
 800ed22:	d504      	bpl.n	800ed2e <_vfiprintf_r+0x4e>
 800ed24:	f04f 30ff 	mov.w	r0, #4294967295
 800ed28:	b01d      	add	sp, #116	; 0x74
 800ed2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed2e:	89ab      	ldrh	r3, [r5, #12]
 800ed30:	0598      	lsls	r0, r3, #22
 800ed32:	d4f7      	bmi.n	800ed24 <_vfiprintf_r+0x44>
 800ed34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed36:	f7ff fea2 	bl	800ea7e <__retarget_lock_release_recursive>
 800ed3a:	e7f3      	b.n	800ed24 <_vfiprintf_r+0x44>
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ed40:	2320      	movs	r3, #32
 800ed42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed46:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed4a:	2330      	movs	r3, #48	; 0x30
 800ed4c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ef00 <_vfiprintf_r+0x220>
 800ed50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed54:	f04f 0901 	mov.w	r9, #1
 800ed58:	4623      	mov	r3, r4
 800ed5a:	469a      	mov	sl, r3
 800ed5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed60:	b10a      	cbz	r2, 800ed66 <_vfiprintf_r+0x86>
 800ed62:	2a25      	cmp	r2, #37	; 0x25
 800ed64:	d1f9      	bne.n	800ed5a <_vfiprintf_r+0x7a>
 800ed66:	ebba 0b04 	subs.w	fp, sl, r4
 800ed6a:	d00b      	beq.n	800ed84 <_vfiprintf_r+0xa4>
 800ed6c:	465b      	mov	r3, fp
 800ed6e:	4622      	mov	r2, r4
 800ed70:	4629      	mov	r1, r5
 800ed72:	4630      	mov	r0, r6
 800ed74:	f7ff ffa1 	bl	800ecba <__sfputs_r>
 800ed78:	3001      	adds	r0, #1
 800ed7a:	f000 80a9 	beq.w	800eed0 <_vfiprintf_r+0x1f0>
 800ed7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed80:	445a      	add	r2, fp
 800ed82:	9209      	str	r2, [sp, #36]	; 0x24
 800ed84:	f89a 3000 	ldrb.w	r3, [sl]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	f000 80a1 	beq.w	800eed0 <_vfiprintf_r+0x1f0>
 800ed8e:	2300      	movs	r3, #0
 800ed90:	f04f 32ff 	mov.w	r2, #4294967295
 800ed94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed98:	f10a 0a01 	add.w	sl, sl, #1
 800ed9c:	9304      	str	r3, [sp, #16]
 800ed9e:	9307      	str	r3, [sp, #28]
 800eda0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eda4:	931a      	str	r3, [sp, #104]	; 0x68
 800eda6:	4654      	mov	r4, sl
 800eda8:	2205      	movs	r2, #5
 800edaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800edae:	4854      	ldr	r0, [pc, #336]	; (800ef00 <_vfiprintf_r+0x220>)
 800edb0:	f7f1 fa0e 	bl	80001d0 <memchr>
 800edb4:	9a04      	ldr	r2, [sp, #16]
 800edb6:	b9d8      	cbnz	r0, 800edf0 <_vfiprintf_r+0x110>
 800edb8:	06d1      	lsls	r1, r2, #27
 800edba:	bf44      	itt	mi
 800edbc:	2320      	movmi	r3, #32
 800edbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edc2:	0713      	lsls	r3, r2, #28
 800edc4:	bf44      	itt	mi
 800edc6:	232b      	movmi	r3, #43	; 0x2b
 800edc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edcc:	f89a 3000 	ldrb.w	r3, [sl]
 800edd0:	2b2a      	cmp	r3, #42	; 0x2a
 800edd2:	d015      	beq.n	800ee00 <_vfiprintf_r+0x120>
 800edd4:	9a07      	ldr	r2, [sp, #28]
 800edd6:	4654      	mov	r4, sl
 800edd8:	2000      	movs	r0, #0
 800edda:	f04f 0c0a 	mov.w	ip, #10
 800edde:	4621      	mov	r1, r4
 800ede0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ede4:	3b30      	subs	r3, #48	; 0x30
 800ede6:	2b09      	cmp	r3, #9
 800ede8:	d94d      	bls.n	800ee86 <_vfiprintf_r+0x1a6>
 800edea:	b1b0      	cbz	r0, 800ee1a <_vfiprintf_r+0x13a>
 800edec:	9207      	str	r2, [sp, #28]
 800edee:	e014      	b.n	800ee1a <_vfiprintf_r+0x13a>
 800edf0:	eba0 0308 	sub.w	r3, r0, r8
 800edf4:	fa09 f303 	lsl.w	r3, r9, r3
 800edf8:	4313      	orrs	r3, r2
 800edfa:	9304      	str	r3, [sp, #16]
 800edfc:	46a2      	mov	sl, r4
 800edfe:	e7d2      	b.n	800eda6 <_vfiprintf_r+0xc6>
 800ee00:	9b03      	ldr	r3, [sp, #12]
 800ee02:	1d19      	adds	r1, r3, #4
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	9103      	str	r1, [sp, #12]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	bfbb      	ittet	lt
 800ee0c:	425b      	neglt	r3, r3
 800ee0e:	f042 0202 	orrlt.w	r2, r2, #2
 800ee12:	9307      	strge	r3, [sp, #28]
 800ee14:	9307      	strlt	r3, [sp, #28]
 800ee16:	bfb8      	it	lt
 800ee18:	9204      	strlt	r2, [sp, #16]
 800ee1a:	7823      	ldrb	r3, [r4, #0]
 800ee1c:	2b2e      	cmp	r3, #46	; 0x2e
 800ee1e:	d10c      	bne.n	800ee3a <_vfiprintf_r+0x15a>
 800ee20:	7863      	ldrb	r3, [r4, #1]
 800ee22:	2b2a      	cmp	r3, #42	; 0x2a
 800ee24:	d134      	bne.n	800ee90 <_vfiprintf_r+0x1b0>
 800ee26:	9b03      	ldr	r3, [sp, #12]
 800ee28:	1d1a      	adds	r2, r3, #4
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	9203      	str	r2, [sp, #12]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	bfb8      	it	lt
 800ee32:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee36:	3402      	adds	r4, #2
 800ee38:	9305      	str	r3, [sp, #20]
 800ee3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ef10 <_vfiprintf_r+0x230>
 800ee3e:	7821      	ldrb	r1, [r4, #0]
 800ee40:	2203      	movs	r2, #3
 800ee42:	4650      	mov	r0, sl
 800ee44:	f7f1 f9c4 	bl	80001d0 <memchr>
 800ee48:	b138      	cbz	r0, 800ee5a <_vfiprintf_r+0x17a>
 800ee4a:	9b04      	ldr	r3, [sp, #16]
 800ee4c:	eba0 000a 	sub.w	r0, r0, sl
 800ee50:	2240      	movs	r2, #64	; 0x40
 800ee52:	4082      	lsls	r2, r0
 800ee54:	4313      	orrs	r3, r2
 800ee56:	3401      	adds	r4, #1
 800ee58:	9304      	str	r3, [sp, #16]
 800ee5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee5e:	4829      	ldr	r0, [pc, #164]	; (800ef04 <_vfiprintf_r+0x224>)
 800ee60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee64:	2206      	movs	r2, #6
 800ee66:	f7f1 f9b3 	bl	80001d0 <memchr>
 800ee6a:	2800      	cmp	r0, #0
 800ee6c:	d03f      	beq.n	800eeee <_vfiprintf_r+0x20e>
 800ee6e:	4b26      	ldr	r3, [pc, #152]	; (800ef08 <_vfiprintf_r+0x228>)
 800ee70:	bb1b      	cbnz	r3, 800eeba <_vfiprintf_r+0x1da>
 800ee72:	9b03      	ldr	r3, [sp, #12]
 800ee74:	3307      	adds	r3, #7
 800ee76:	f023 0307 	bic.w	r3, r3, #7
 800ee7a:	3308      	adds	r3, #8
 800ee7c:	9303      	str	r3, [sp, #12]
 800ee7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee80:	443b      	add	r3, r7
 800ee82:	9309      	str	r3, [sp, #36]	; 0x24
 800ee84:	e768      	b.n	800ed58 <_vfiprintf_r+0x78>
 800ee86:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee8a:	460c      	mov	r4, r1
 800ee8c:	2001      	movs	r0, #1
 800ee8e:	e7a6      	b.n	800edde <_vfiprintf_r+0xfe>
 800ee90:	2300      	movs	r3, #0
 800ee92:	3401      	adds	r4, #1
 800ee94:	9305      	str	r3, [sp, #20]
 800ee96:	4619      	mov	r1, r3
 800ee98:	f04f 0c0a 	mov.w	ip, #10
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eea2:	3a30      	subs	r2, #48	; 0x30
 800eea4:	2a09      	cmp	r2, #9
 800eea6:	d903      	bls.n	800eeb0 <_vfiprintf_r+0x1d0>
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d0c6      	beq.n	800ee3a <_vfiprintf_r+0x15a>
 800eeac:	9105      	str	r1, [sp, #20]
 800eeae:	e7c4      	b.n	800ee3a <_vfiprintf_r+0x15a>
 800eeb0:	fb0c 2101 	mla	r1, ip, r1, r2
 800eeb4:	4604      	mov	r4, r0
 800eeb6:	2301      	movs	r3, #1
 800eeb8:	e7f0      	b.n	800ee9c <_vfiprintf_r+0x1bc>
 800eeba:	ab03      	add	r3, sp, #12
 800eebc:	9300      	str	r3, [sp, #0]
 800eebe:	462a      	mov	r2, r5
 800eec0:	4b12      	ldr	r3, [pc, #72]	; (800ef0c <_vfiprintf_r+0x22c>)
 800eec2:	a904      	add	r1, sp, #16
 800eec4:	4630      	mov	r0, r6
 800eec6:	f3af 8000 	nop.w
 800eeca:	4607      	mov	r7, r0
 800eecc:	1c78      	adds	r0, r7, #1
 800eece:	d1d6      	bne.n	800ee7e <_vfiprintf_r+0x19e>
 800eed0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eed2:	07d9      	lsls	r1, r3, #31
 800eed4:	d405      	bmi.n	800eee2 <_vfiprintf_r+0x202>
 800eed6:	89ab      	ldrh	r3, [r5, #12]
 800eed8:	059a      	lsls	r2, r3, #22
 800eeda:	d402      	bmi.n	800eee2 <_vfiprintf_r+0x202>
 800eedc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eede:	f7ff fdce 	bl	800ea7e <__retarget_lock_release_recursive>
 800eee2:	89ab      	ldrh	r3, [r5, #12]
 800eee4:	065b      	lsls	r3, r3, #25
 800eee6:	f53f af1d 	bmi.w	800ed24 <_vfiprintf_r+0x44>
 800eeea:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eeec:	e71c      	b.n	800ed28 <_vfiprintf_r+0x48>
 800eeee:	ab03      	add	r3, sp, #12
 800eef0:	9300      	str	r3, [sp, #0]
 800eef2:	462a      	mov	r2, r5
 800eef4:	4b05      	ldr	r3, [pc, #20]	; (800ef0c <_vfiprintf_r+0x22c>)
 800eef6:	a904      	add	r1, sp, #16
 800eef8:	4630      	mov	r0, r6
 800eefa:	f000 f879 	bl	800eff0 <_printf_i>
 800eefe:	e7e4      	b.n	800eeca <_vfiprintf_r+0x1ea>
 800ef00:	0801181c 	.word	0x0801181c
 800ef04:	08011826 	.word	0x08011826
 800ef08:	00000000 	.word	0x00000000
 800ef0c:	0800ecbb 	.word	0x0800ecbb
 800ef10:	08011822 	.word	0x08011822

0800ef14 <_printf_common>:
 800ef14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef18:	4616      	mov	r6, r2
 800ef1a:	4699      	mov	r9, r3
 800ef1c:	688a      	ldr	r2, [r1, #8]
 800ef1e:	690b      	ldr	r3, [r1, #16]
 800ef20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef24:	4293      	cmp	r3, r2
 800ef26:	bfb8      	it	lt
 800ef28:	4613      	movlt	r3, r2
 800ef2a:	6033      	str	r3, [r6, #0]
 800ef2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef30:	4607      	mov	r7, r0
 800ef32:	460c      	mov	r4, r1
 800ef34:	b10a      	cbz	r2, 800ef3a <_printf_common+0x26>
 800ef36:	3301      	adds	r3, #1
 800ef38:	6033      	str	r3, [r6, #0]
 800ef3a:	6823      	ldr	r3, [r4, #0]
 800ef3c:	0699      	lsls	r1, r3, #26
 800ef3e:	bf42      	ittt	mi
 800ef40:	6833      	ldrmi	r3, [r6, #0]
 800ef42:	3302      	addmi	r3, #2
 800ef44:	6033      	strmi	r3, [r6, #0]
 800ef46:	6825      	ldr	r5, [r4, #0]
 800ef48:	f015 0506 	ands.w	r5, r5, #6
 800ef4c:	d106      	bne.n	800ef5c <_printf_common+0x48>
 800ef4e:	f104 0a19 	add.w	sl, r4, #25
 800ef52:	68e3      	ldr	r3, [r4, #12]
 800ef54:	6832      	ldr	r2, [r6, #0]
 800ef56:	1a9b      	subs	r3, r3, r2
 800ef58:	42ab      	cmp	r3, r5
 800ef5a:	dc26      	bgt.n	800efaa <_printf_common+0x96>
 800ef5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef60:	1e13      	subs	r3, r2, #0
 800ef62:	6822      	ldr	r2, [r4, #0]
 800ef64:	bf18      	it	ne
 800ef66:	2301      	movne	r3, #1
 800ef68:	0692      	lsls	r2, r2, #26
 800ef6a:	d42b      	bmi.n	800efc4 <_printf_common+0xb0>
 800ef6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef70:	4649      	mov	r1, r9
 800ef72:	4638      	mov	r0, r7
 800ef74:	47c0      	blx	r8
 800ef76:	3001      	adds	r0, #1
 800ef78:	d01e      	beq.n	800efb8 <_printf_common+0xa4>
 800ef7a:	6823      	ldr	r3, [r4, #0]
 800ef7c:	6922      	ldr	r2, [r4, #16]
 800ef7e:	f003 0306 	and.w	r3, r3, #6
 800ef82:	2b04      	cmp	r3, #4
 800ef84:	bf02      	ittt	eq
 800ef86:	68e5      	ldreq	r5, [r4, #12]
 800ef88:	6833      	ldreq	r3, [r6, #0]
 800ef8a:	1aed      	subeq	r5, r5, r3
 800ef8c:	68a3      	ldr	r3, [r4, #8]
 800ef8e:	bf0c      	ite	eq
 800ef90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef94:	2500      	movne	r5, #0
 800ef96:	4293      	cmp	r3, r2
 800ef98:	bfc4      	itt	gt
 800ef9a:	1a9b      	subgt	r3, r3, r2
 800ef9c:	18ed      	addgt	r5, r5, r3
 800ef9e:	2600      	movs	r6, #0
 800efa0:	341a      	adds	r4, #26
 800efa2:	42b5      	cmp	r5, r6
 800efa4:	d11a      	bne.n	800efdc <_printf_common+0xc8>
 800efa6:	2000      	movs	r0, #0
 800efa8:	e008      	b.n	800efbc <_printf_common+0xa8>
 800efaa:	2301      	movs	r3, #1
 800efac:	4652      	mov	r2, sl
 800efae:	4649      	mov	r1, r9
 800efb0:	4638      	mov	r0, r7
 800efb2:	47c0      	blx	r8
 800efb4:	3001      	adds	r0, #1
 800efb6:	d103      	bne.n	800efc0 <_printf_common+0xac>
 800efb8:	f04f 30ff 	mov.w	r0, #4294967295
 800efbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efc0:	3501      	adds	r5, #1
 800efc2:	e7c6      	b.n	800ef52 <_printf_common+0x3e>
 800efc4:	18e1      	adds	r1, r4, r3
 800efc6:	1c5a      	adds	r2, r3, #1
 800efc8:	2030      	movs	r0, #48	; 0x30
 800efca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efce:	4422      	add	r2, r4
 800efd0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efd4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efd8:	3302      	adds	r3, #2
 800efda:	e7c7      	b.n	800ef6c <_printf_common+0x58>
 800efdc:	2301      	movs	r3, #1
 800efde:	4622      	mov	r2, r4
 800efe0:	4649      	mov	r1, r9
 800efe2:	4638      	mov	r0, r7
 800efe4:	47c0      	blx	r8
 800efe6:	3001      	adds	r0, #1
 800efe8:	d0e6      	beq.n	800efb8 <_printf_common+0xa4>
 800efea:	3601      	adds	r6, #1
 800efec:	e7d9      	b.n	800efa2 <_printf_common+0x8e>
	...

0800eff0 <_printf_i>:
 800eff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eff4:	7e0f      	ldrb	r7, [r1, #24]
 800eff6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eff8:	2f78      	cmp	r7, #120	; 0x78
 800effa:	4691      	mov	r9, r2
 800effc:	4680      	mov	r8, r0
 800effe:	460c      	mov	r4, r1
 800f000:	469a      	mov	sl, r3
 800f002:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f006:	d807      	bhi.n	800f018 <_printf_i+0x28>
 800f008:	2f62      	cmp	r7, #98	; 0x62
 800f00a:	d80a      	bhi.n	800f022 <_printf_i+0x32>
 800f00c:	2f00      	cmp	r7, #0
 800f00e:	f000 80d4 	beq.w	800f1ba <_printf_i+0x1ca>
 800f012:	2f58      	cmp	r7, #88	; 0x58
 800f014:	f000 80c0 	beq.w	800f198 <_printf_i+0x1a8>
 800f018:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f01c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f020:	e03a      	b.n	800f098 <_printf_i+0xa8>
 800f022:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f026:	2b15      	cmp	r3, #21
 800f028:	d8f6      	bhi.n	800f018 <_printf_i+0x28>
 800f02a:	a101      	add	r1, pc, #4	; (adr r1, 800f030 <_printf_i+0x40>)
 800f02c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f030:	0800f089 	.word	0x0800f089
 800f034:	0800f09d 	.word	0x0800f09d
 800f038:	0800f019 	.word	0x0800f019
 800f03c:	0800f019 	.word	0x0800f019
 800f040:	0800f019 	.word	0x0800f019
 800f044:	0800f019 	.word	0x0800f019
 800f048:	0800f09d 	.word	0x0800f09d
 800f04c:	0800f019 	.word	0x0800f019
 800f050:	0800f019 	.word	0x0800f019
 800f054:	0800f019 	.word	0x0800f019
 800f058:	0800f019 	.word	0x0800f019
 800f05c:	0800f1a1 	.word	0x0800f1a1
 800f060:	0800f0c9 	.word	0x0800f0c9
 800f064:	0800f15b 	.word	0x0800f15b
 800f068:	0800f019 	.word	0x0800f019
 800f06c:	0800f019 	.word	0x0800f019
 800f070:	0800f1c3 	.word	0x0800f1c3
 800f074:	0800f019 	.word	0x0800f019
 800f078:	0800f0c9 	.word	0x0800f0c9
 800f07c:	0800f019 	.word	0x0800f019
 800f080:	0800f019 	.word	0x0800f019
 800f084:	0800f163 	.word	0x0800f163
 800f088:	682b      	ldr	r3, [r5, #0]
 800f08a:	1d1a      	adds	r2, r3, #4
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	602a      	str	r2, [r5, #0]
 800f090:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f094:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f098:	2301      	movs	r3, #1
 800f09a:	e09f      	b.n	800f1dc <_printf_i+0x1ec>
 800f09c:	6820      	ldr	r0, [r4, #0]
 800f09e:	682b      	ldr	r3, [r5, #0]
 800f0a0:	0607      	lsls	r7, r0, #24
 800f0a2:	f103 0104 	add.w	r1, r3, #4
 800f0a6:	6029      	str	r1, [r5, #0]
 800f0a8:	d501      	bpl.n	800f0ae <_printf_i+0xbe>
 800f0aa:	681e      	ldr	r6, [r3, #0]
 800f0ac:	e003      	b.n	800f0b6 <_printf_i+0xc6>
 800f0ae:	0646      	lsls	r6, r0, #25
 800f0b0:	d5fb      	bpl.n	800f0aa <_printf_i+0xba>
 800f0b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f0b6:	2e00      	cmp	r6, #0
 800f0b8:	da03      	bge.n	800f0c2 <_printf_i+0xd2>
 800f0ba:	232d      	movs	r3, #45	; 0x2d
 800f0bc:	4276      	negs	r6, r6
 800f0be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0c2:	485a      	ldr	r0, [pc, #360]	; (800f22c <_printf_i+0x23c>)
 800f0c4:	230a      	movs	r3, #10
 800f0c6:	e012      	b.n	800f0ee <_printf_i+0xfe>
 800f0c8:	682b      	ldr	r3, [r5, #0]
 800f0ca:	6820      	ldr	r0, [r4, #0]
 800f0cc:	1d19      	adds	r1, r3, #4
 800f0ce:	6029      	str	r1, [r5, #0]
 800f0d0:	0605      	lsls	r5, r0, #24
 800f0d2:	d501      	bpl.n	800f0d8 <_printf_i+0xe8>
 800f0d4:	681e      	ldr	r6, [r3, #0]
 800f0d6:	e002      	b.n	800f0de <_printf_i+0xee>
 800f0d8:	0641      	lsls	r1, r0, #25
 800f0da:	d5fb      	bpl.n	800f0d4 <_printf_i+0xe4>
 800f0dc:	881e      	ldrh	r6, [r3, #0]
 800f0de:	4853      	ldr	r0, [pc, #332]	; (800f22c <_printf_i+0x23c>)
 800f0e0:	2f6f      	cmp	r7, #111	; 0x6f
 800f0e2:	bf0c      	ite	eq
 800f0e4:	2308      	moveq	r3, #8
 800f0e6:	230a      	movne	r3, #10
 800f0e8:	2100      	movs	r1, #0
 800f0ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0ee:	6865      	ldr	r5, [r4, #4]
 800f0f0:	60a5      	str	r5, [r4, #8]
 800f0f2:	2d00      	cmp	r5, #0
 800f0f4:	bfa2      	ittt	ge
 800f0f6:	6821      	ldrge	r1, [r4, #0]
 800f0f8:	f021 0104 	bicge.w	r1, r1, #4
 800f0fc:	6021      	strge	r1, [r4, #0]
 800f0fe:	b90e      	cbnz	r6, 800f104 <_printf_i+0x114>
 800f100:	2d00      	cmp	r5, #0
 800f102:	d04b      	beq.n	800f19c <_printf_i+0x1ac>
 800f104:	4615      	mov	r5, r2
 800f106:	fbb6 f1f3 	udiv	r1, r6, r3
 800f10a:	fb03 6711 	mls	r7, r3, r1, r6
 800f10e:	5dc7      	ldrb	r7, [r0, r7]
 800f110:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f114:	4637      	mov	r7, r6
 800f116:	42bb      	cmp	r3, r7
 800f118:	460e      	mov	r6, r1
 800f11a:	d9f4      	bls.n	800f106 <_printf_i+0x116>
 800f11c:	2b08      	cmp	r3, #8
 800f11e:	d10b      	bne.n	800f138 <_printf_i+0x148>
 800f120:	6823      	ldr	r3, [r4, #0]
 800f122:	07de      	lsls	r6, r3, #31
 800f124:	d508      	bpl.n	800f138 <_printf_i+0x148>
 800f126:	6923      	ldr	r3, [r4, #16]
 800f128:	6861      	ldr	r1, [r4, #4]
 800f12a:	4299      	cmp	r1, r3
 800f12c:	bfde      	ittt	le
 800f12e:	2330      	movle	r3, #48	; 0x30
 800f130:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f134:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f138:	1b52      	subs	r2, r2, r5
 800f13a:	6122      	str	r2, [r4, #16]
 800f13c:	f8cd a000 	str.w	sl, [sp]
 800f140:	464b      	mov	r3, r9
 800f142:	aa03      	add	r2, sp, #12
 800f144:	4621      	mov	r1, r4
 800f146:	4640      	mov	r0, r8
 800f148:	f7ff fee4 	bl	800ef14 <_printf_common>
 800f14c:	3001      	adds	r0, #1
 800f14e:	d14a      	bne.n	800f1e6 <_printf_i+0x1f6>
 800f150:	f04f 30ff 	mov.w	r0, #4294967295
 800f154:	b004      	add	sp, #16
 800f156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f15a:	6823      	ldr	r3, [r4, #0]
 800f15c:	f043 0320 	orr.w	r3, r3, #32
 800f160:	6023      	str	r3, [r4, #0]
 800f162:	4833      	ldr	r0, [pc, #204]	; (800f230 <_printf_i+0x240>)
 800f164:	2778      	movs	r7, #120	; 0x78
 800f166:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	6829      	ldr	r1, [r5, #0]
 800f16e:	061f      	lsls	r7, r3, #24
 800f170:	f851 6b04 	ldr.w	r6, [r1], #4
 800f174:	d402      	bmi.n	800f17c <_printf_i+0x18c>
 800f176:	065f      	lsls	r7, r3, #25
 800f178:	bf48      	it	mi
 800f17a:	b2b6      	uxthmi	r6, r6
 800f17c:	07df      	lsls	r7, r3, #31
 800f17e:	bf48      	it	mi
 800f180:	f043 0320 	orrmi.w	r3, r3, #32
 800f184:	6029      	str	r1, [r5, #0]
 800f186:	bf48      	it	mi
 800f188:	6023      	strmi	r3, [r4, #0]
 800f18a:	b91e      	cbnz	r6, 800f194 <_printf_i+0x1a4>
 800f18c:	6823      	ldr	r3, [r4, #0]
 800f18e:	f023 0320 	bic.w	r3, r3, #32
 800f192:	6023      	str	r3, [r4, #0]
 800f194:	2310      	movs	r3, #16
 800f196:	e7a7      	b.n	800f0e8 <_printf_i+0xf8>
 800f198:	4824      	ldr	r0, [pc, #144]	; (800f22c <_printf_i+0x23c>)
 800f19a:	e7e4      	b.n	800f166 <_printf_i+0x176>
 800f19c:	4615      	mov	r5, r2
 800f19e:	e7bd      	b.n	800f11c <_printf_i+0x12c>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	6826      	ldr	r6, [r4, #0]
 800f1a4:	6961      	ldr	r1, [r4, #20]
 800f1a6:	1d18      	adds	r0, r3, #4
 800f1a8:	6028      	str	r0, [r5, #0]
 800f1aa:	0635      	lsls	r5, r6, #24
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	d501      	bpl.n	800f1b4 <_printf_i+0x1c4>
 800f1b0:	6019      	str	r1, [r3, #0]
 800f1b2:	e002      	b.n	800f1ba <_printf_i+0x1ca>
 800f1b4:	0670      	lsls	r0, r6, #25
 800f1b6:	d5fb      	bpl.n	800f1b0 <_printf_i+0x1c0>
 800f1b8:	8019      	strh	r1, [r3, #0]
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	6123      	str	r3, [r4, #16]
 800f1be:	4615      	mov	r5, r2
 800f1c0:	e7bc      	b.n	800f13c <_printf_i+0x14c>
 800f1c2:	682b      	ldr	r3, [r5, #0]
 800f1c4:	1d1a      	adds	r2, r3, #4
 800f1c6:	602a      	str	r2, [r5, #0]
 800f1c8:	681d      	ldr	r5, [r3, #0]
 800f1ca:	6862      	ldr	r2, [r4, #4]
 800f1cc:	2100      	movs	r1, #0
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	f7f0 fffe 	bl	80001d0 <memchr>
 800f1d4:	b108      	cbz	r0, 800f1da <_printf_i+0x1ea>
 800f1d6:	1b40      	subs	r0, r0, r5
 800f1d8:	6060      	str	r0, [r4, #4]
 800f1da:	6863      	ldr	r3, [r4, #4]
 800f1dc:	6123      	str	r3, [r4, #16]
 800f1de:	2300      	movs	r3, #0
 800f1e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1e4:	e7aa      	b.n	800f13c <_printf_i+0x14c>
 800f1e6:	6923      	ldr	r3, [r4, #16]
 800f1e8:	462a      	mov	r2, r5
 800f1ea:	4649      	mov	r1, r9
 800f1ec:	4640      	mov	r0, r8
 800f1ee:	47d0      	blx	sl
 800f1f0:	3001      	adds	r0, #1
 800f1f2:	d0ad      	beq.n	800f150 <_printf_i+0x160>
 800f1f4:	6823      	ldr	r3, [r4, #0]
 800f1f6:	079b      	lsls	r3, r3, #30
 800f1f8:	d413      	bmi.n	800f222 <_printf_i+0x232>
 800f1fa:	68e0      	ldr	r0, [r4, #12]
 800f1fc:	9b03      	ldr	r3, [sp, #12]
 800f1fe:	4298      	cmp	r0, r3
 800f200:	bfb8      	it	lt
 800f202:	4618      	movlt	r0, r3
 800f204:	e7a6      	b.n	800f154 <_printf_i+0x164>
 800f206:	2301      	movs	r3, #1
 800f208:	4632      	mov	r2, r6
 800f20a:	4649      	mov	r1, r9
 800f20c:	4640      	mov	r0, r8
 800f20e:	47d0      	blx	sl
 800f210:	3001      	adds	r0, #1
 800f212:	d09d      	beq.n	800f150 <_printf_i+0x160>
 800f214:	3501      	adds	r5, #1
 800f216:	68e3      	ldr	r3, [r4, #12]
 800f218:	9903      	ldr	r1, [sp, #12]
 800f21a:	1a5b      	subs	r3, r3, r1
 800f21c:	42ab      	cmp	r3, r5
 800f21e:	dcf2      	bgt.n	800f206 <_printf_i+0x216>
 800f220:	e7eb      	b.n	800f1fa <_printf_i+0x20a>
 800f222:	2500      	movs	r5, #0
 800f224:	f104 0619 	add.w	r6, r4, #25
 800f228:	e7f5      	b.n	800f216 <_printf_i+0x226>
 800f22a:	bf00      	nop
 800f22c:	0801182d 	.word	0x0801182d
 800f230:	0801183e 	.word	0x0801183e

0800f234 <__sflush_r>:
 800f234:	898a      	ldrh	r2, [r1, #12]
 800f236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f23a:	4605      	mov	r5, r0
 800f23c:	0710      	lsls	r0, r2, #28
 800f23e:	460c      	mov	r4, r1
 800f240:	d458      	bmi.n	800f2f4 <__sflush_r+0xc0>
 800f242:	684b      	ldr	r3, [r1, #4]
 800f244:	2b00      	cmp	r3, #0
 800f246:	dc05      	bgt.n	800f254 <__sflush_r+0x20>
 800f248:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	dc02      	bgt.n	800f254 <__sflush_r+0x20>
 800f24e:	2000      	movs	r0, #0
 800f250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f254:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f256:	2e00      	cmp	r6, #0
 800f258:	d0f9      	beq.n	800f24e <__sflush_r+0x1a>
 800f25a:	2300      	movs	r3, #0
 800f25c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f260:	682f      	ldr	r7, [r5, #0]
 800f262:	6a21      	ldr	r1, [r4, #32]
 800f264:	602b      	str	r3, [r5, #0]
 800f266:	d032      	beq.n	800f2ce <__sflush_r+0x9a>
 800f268:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f26a:	89a3      	ldrh	r3, [r4, #12]
 800f26c:	075a      	lsls	r2, r3, #29
 800f26e:	d505      	bpl.n	800f27c <__sflush_r+0x48>
 800f270:	6863      	ldr	r3, [r4, #4]
 800f272:	1ac0      	subs	r0, r0, r3
 800f274:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f276:	b10b      	cbz	r3, 800f27c <__sflush_r+0x48>
 800f278:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f27a:	1ac0      	subs	r0, r0, r3
 800f27c:	2300      	movs	r3, #0
 800f27e:	4602      	mov	r2, r0
 800f280:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f282:	6a21      	ldr	r1, [r4, #32]
 800f284:	4628      	mov	r0, r5
 800f286:	47b0      	blx	r6
 800f288:	1c43      	adds	r3, r0, #1
 800f28a:	89a3      	ldrh	r3, [r4, #12]
 800f28c:	d106      	bne.n	800f29c <__sflush_r+0x68>
 800f28e:	6829      	ldr	r1, [r5, #0]
 800f290:	291d      	cmp	r1, #29
 800f292:	d82b      	bhi.n	800f2ec <__sflush_r+0xb8>
 800f294:	4a29      	ldr	r2, [pc, #164]	; (800f33c <__sflush_r+0x108>)
 800f296:	410a      	asrs	r2, r1
 800f298:	07d6      	lsls	r6, r2, #31
 800f29a:	d427      	bmi.n	800f2ec <__sflush_r+0xb8>
 800f29c:	2200      	movs	r2, #0
 800f29e:	6062      	str	r2, [r4, #4]
 800f2a0:	04d9      	lsls	r1, r3, #19
 800f2a2:	6922      	ldr	r2, [r4, #16]
 800f2a4:	6022      	str	r2, [r4, #0]
 800f2a6:	d504      	bpl.n	800f2b2 <__sflush_r+0x7e>
 800f2a8:	1c42      	adds	r2, r0, #1
 800f2aa:	d101      	bne.n	800f2b0 <__sflush_r+0x7c>
 800f2ac:	682b      	ldr	r3, [r5, #0]
 800f2ae:	b903      	cbnz	r3, 800f2b2 <__sflush_r+0x7e>
 800f2b0:	6560      	str	r0, [r4, #84]	; 0x54
 800f2b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2b4:	602f      	str	r7, [r5, #0]
 800f2b6:	2900      	cmp	r1, #0
 800f2b8:	d0c9      	beq.n	800f24e <__sflush_r+0x1a>
 800f2ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f2be:	4299      	cmp	r1, r3
 800f2c0:	d002      	beq.n	800f2c8 <__sflush_r+0x94>
 800f2c2:	4628      	mov	r0, r5
 800f2c4:	f7ff fbea 	bl	800ea9c <_free_r>
 800f2c8:	2000      	movs	r0, #0
 800f2ca:	6360      	str	r0, [r4, #52]	; 0x34
 800f2cc:	e7c0      	b.n	800f250 <__sflush_r+0x1c>
 800f2ce:	2301      	movs	r3, #1
 800f2d0:	4628      	mov	r0, r5
 800f2d2:	47b0      	blx	r6
 800f2d4:	1c41      	adds	r1, r0, #1
 800f2d6:	d1c8      	bne.n	800f26a <__sflush_r+0x36>
 800f2d8:	682b      	ldr	r3, [r5, #0]
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d0c5      	beq.n	800f26a <__sflush_r+0x36>
 800f2de:	2b1d      	cmp	r3, #29
 800f2e0:	d001      	beq.n	800f2e6 <__sflush_r+0xb2>
 800f2e2:	2b16      	cmp	r3, #22
 800f2e4:	d101      	bne.n	800f2ea <__sflush_r+0xb6>
 800f2e6:	602f      	str	r7, [r5, #0]
 800f2e8:	e7b1      	b.n	800f24e <__sflush_r+0x1a>
 800f2ea:	89a3      	ldrh	r3, [r4, #12]
 800f2ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2f0:	81a3      	strh	r3, [r4, #12]
 800f2f2:	e7ad      	b.n	800f250 <__sflush_r+0x1c>
 800f2f4:	690f      	ldr	r7, [r1, #16]
 800f2f6:	2f00      	cmp	r7, #0
 800f2f8:	d0a9      	beq.n	800f24e <__sflush_r+0x1a>
 800f2fa:	0793      	lsls	r3, r2, #30
 800f2fc:	680e      	ldr	r6, [r1, #0]
 800f2fe:	bf08      	it	eq
 800f300:	694b      	ldreq	r3, [r1, #20]
 800f302:	600f      	str	r7, [r1, #0]
 800f304:	bf18      	it	ne
 800f306:	2300      	movne	r3, #0
 800f308:	eba6 0807 	sub.w	r8, r6, r7
 800f30c:	608b      	str	r3, [r1, #8]
 800f30e:	f1b8 0f00 	cmp.w	r8, #0
 800f312:	dd9c      	ble.n	800f24e <__sflush_r+0x1a>
 800f314:	6a21      	ldr	r1, [r4, #32]
 800f316:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f318:	4643      	mov	r3, r8
 800f31a:	463a      	mov	r2, r7
 800f31c:	4628      	mov	r0, r5
 800f31e:	47b0      	blx	r6
 800f320:	2800      	cmp	r0, #0
 800f322:	dc06      	bgt.n	800f332 <__sflush_r+0xfe>
 800f324:	89a3      	ldrh	r3, [r4, #12]
 800f326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f32a:	81a3      	strh	r3, [r4, #12]
 800f32c:	f04f 30ff 	mov.w	r0, #4294967295
 800f330:	e78e      	b.n	800f250 <__sflush_r+0x1c>
 800f332:	4407      	add	r7, r0
 800f334:	eba8 0800 	sub.w	r8, r8, r0
 800f338:	e7e9      	b.n	800f30e <__sflush_r+0xda>
 800f33a:	bf00      	nop
 800f33c:	dfbffffe 	.word	0xdfbffffe

0800f340 <_fflush_r>:
 800f340:	b538      	push	{r3, r4, r5, lr}
 800f342:	690b      	ldr	r3, [r1, #16]
 800f344:	4605      	mov	r5, r0
 800f346:	460c      	mov	r4, r1
 800f348:	b913      	cbnz	r3, 800f350 <_fflush_r+0x10>
 800f34a:	2500      	movs	r5, #0
 800f34c:	4628      	mov	r0, r5
 800f34e:	bd38      	pop	{r3, r4, r5, pc}
 800f350:	b118      	cbz	r0, 800f35a <_fflush_r+0x1a>
 800f352:	6a03      	ldr	r3, [r0, #32]
 800f354:	b90b      	cbnz	r3, 800f35a <_fflush_r+0x1a>
 800f356:	f7ff f98d 	bl	800e674 <__sinit>
 800f35a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d0f3      	beq.n	800f34a <_fflush_r+0xa>
 800f362:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f364:	07d0      	lsls	r0, r2, #31
 800f366:	d404      	bmi.n	800f372 <_fflush_r+0x32>
 800f368:	0599      	lsls	r1, r3, #22
 800f36a:	d402      	bmi.n	800f372 <_fflush_r+0x32>
 800f36c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f36e:	f7ff fb85 	bl	800ea7c <__retarget_lock_acquire_recursive>
 800f372:	4628      	mov	r0, r5
 800f374:	4621      	mov	r1, r4
 800f376:	f7ff ff5d 	bl	800f234 <__sflush_r>
 800f37a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f37c:	07da      	lsls	r2, r3, #31
 800f37e:	4605      	mov	r5, r0
 800f380:	d4e4      	bmi.n	800f34c <_fflush_r+0xc>
 800f382:	89a3      	ldrh	r3, [r4, #12]
 800f384:	059b      	lsls	r3, r3, #22
 800f386:	d4e1      	bmi.n	800f34c <_fflush_r+0xc>
 800f388:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f38a:	f7ff fb78 	bl	800ea7e <__retarget_lock_release_recursive>
 800f38e:	e7dd      	b.n	800f34c <_fflush_r+0xc>

0800f390 <__swhatbuf_r>:
 800f390:	b570      	push	{r4, r5, r6, lr}
 800f392:	460c      	mov	r4, r1
 800f394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f398:	2900      	cmp	r1, #0
 800f39a:	b096      	sub	sp, #88	; 0x58
 800f39c:	4615      	mov	r5, r2
 800f39e:	461e      	mov	r6, r3
 800f3a0:	da0d      	bge.n	800f3be <__swhatbuf_r+0x2e>
 800f3a2:	89a3      	ldrh	r3, [r4, #12]
 800f3a4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f3a8:	f04f 0100 	mov.w	r1, #0
 800f3ac:	bf0c      	ite	eq
 800f3ae:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f3b2:	2340      	movne	r3, #64	; 0x40
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	6031      	str	r1, [r6, #0]
 800f3b8:	602b      	str	r3, [r5, #0]
 800f3ba:	b016      	add	sp, #88	; 0x58
 800f3bc:	bd70      	pop	{r4, r5, r6, pc}
 800f3be:	466a      	mov	r2, sp
 800f3c0:	f000 f848 	bl	800f454 <_fstat_r>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	dbec      	blt.n	800f3a2 <__swhatbuf_r+0x12>
 800f3c8:	9901      	ldr	r1, [sp, #4]
 800f3ca:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f3ce:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f3d2:	4259      	negs	r1, r3
 800f3d4:	4159      	adcs	r1, r3
 800f3d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3da:	e7eb      	b.n	800f3b4 <__swhatbuf_r+0x24>

0800f3dc <__smakebuf_r>:
 800f3dc:	898b      	ldrh	r3, [r1, #12]
 800f3de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f3e0:	079d      	lsls	r5, r3, #30
 800f3e2:	4606      	mov	r6, r0
 800f3e4:	460c      	mov	r4, r1
 800f3e6:	d507      	bpl.n	800f3f8 <__smakebuf_r+0x1c>
 800f3e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f3ec:	6023      	str	r3, [r4, #0]
 800f3ee:	6123      	str	r3, [r4, #16]
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	6163      	str	r3, [r4, #20]
 800f3f4:	b002      	add	sp, #8
 800f3f6:	bd70      	pop	{r4, r5, r6, pc}
 800f3f8:	ab01      	add	r3, sp, #4
 800f3fa:	466a      	mov	r2, sp
 800f3fc:	f7ff ffc8 	bl	800f390 <__swhatbuf_r>
 800f400:	9900      	ldr	r1, [sp, #0]
 800f402:	4605      	mov	r5, r0
 800f404:	4630      	mov	r0, r6
 800f406:	f7ff fbb5 	bl	800eb74 <_malloc_r>
 800f40a:	b948      	cbnz	r0, 800f420 <__smakebuf_r+0x44>
 800f40c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f410:	059a      	lsls	r2, r3, #22
 800f412:	d4ef      	bmi.n	800f3f4 <__smakebuf_r+0x18>
 800f414:	f023 0303 	bic.w	r3, r3, #3
 800f418:	f043 0302 	orr.w	r3, r3, #2
 800f41c:	81a3      	strh	r3, [r4, #12]
 800f41e:	e7e3      	b.n	800f3e8 <__smakebuf_r+0xc>
 800f420:	89a3      	ldrh	r3, [r4, #12]
 800f422:	6020      	str	r0, [r4, #0]
 800f424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f428:	81a3      	strh	r3, [r4, #12]
 800f42a:	9b00      	ldr	r3, [sp, #0]
 800f42c:	6163      	str	r3, [r4, #20]
 800f42e:	9b01      	ldr	r3, [sp, #4]
 800f430:	6120      	str	r0, [r4, #16]
 800f432:	b15b      	cbz	r3, 800f44c <__smakebuf_r+0x70>
 800f434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f438:	4630      	mov	r0, r6
 800f43a:	f000 f81d 	bl	800f478 <_isatty_r>
 800f43e:	b128      	cbz	r0, 800f44c <__smakebuf_r+0x70>
 800f440:	89a3      	ldrh	r3, [r4, #12]
 800f442:	f023 0303 	bic.w	r3, r3, #3
 800f446:	f043 0301 	orr.w	r3, r3, #1
 800f44a:	81a3      	strh	r3, [r4, #12]
 800f44c:	89a3      	ldrh	r3, [r4, #12]
 800f44e:	431d      	orrs	r5, r3
 800f450:	81a5      	strh	r5, [r4, #12]
 800f452:	e7cf      	b.n	800f3f4 <__smakebuf_r+0x18>

0800f454 <_fstat_r>:
 800f454:	b538      	push	{r3, r4, r5, lr}
 800f456:	4d07      	ldr	r5, [pc, #28]	; (800f474 <_fstat_r+0x20>)
 800f458:	2300      	movs	r3, #0
 800f45a:	4604      	mov	r4, r0
 800f45c:	4608      	mov	r0, r1
 800f45e:	4611      	mov	r1, r2
 800f460:	602b      	str	r3, [r5, #0]
 800f462:	f7f4 fe84 	bl	800416e <_fstat>
 800f466:	1c43      	adds	r3, r0, #1
 800f468:	d102      	bne.n	800f470 <_fstat_r+0x1c>
 800f46a:	682b      	ldr	r3, [r5, #0]
 800f46c:	b103      	cbz	r3, 800f470 <_fstat_r+0x1c>
 800f46e:	6023      	str	r3, [r4, #0]
 800f470:	bd38      	pop	{r3, r4, r5, pc}
 800f472:	bf00      	nop
 800f474:	20007610 	.word	0x20007610

0800f478 <_isatty_r>:
 800f478:	b538      	push	{r3, r4, r5, lr}
 800f47a:	4d06      	ldr	r5, [pc, #24]	; (800f494 <_isatty_r+0x1c>)
 800f47c:	2300      	movs	r3, #0
 800f47e:	4604      	mov	r4, r0
 800f480:	4608      	mov	r0, r1
 800f482:	602b      	str	r3, [r5, #0]
 800f484:	f7f4 fe83 	bl	800418e <_isatty>
 800f488:	1c43      	adds	r3, r0, #1
 800f48a:	d102      	bne.n	800f492 <_isatty_r+0x1a>
 800f48c:	682b      	ldr	r3, [r5, #0]
 800f48e:	b103      	cbz	r3, 800f492 <_isatty_r+0x1a>
 800f490:	6023      	str	r3, [r4, #0]
 800f492:	bd38      	pop	{r3, r4, r5, pc}
 800f494:	20007610 	.word	0x20007610

0800f498 <_sbrk_r>:
 800f498:	b538      	push	{r3, r4, r5, lr}
 800f49a:	4d06      	ldr	r5, [pc, #24]	; (800f4b4 <_sbrk_r+0x1c>)
 800f49c:	2300      	movs	r3, #0
 800f49e:	4604      	mov	r4, r0
 800f4a0:	4608      	mov	r0, r1
 800f4a2:	602b      	str	r3, [r5, #0]
 800f4a4:	f7f4 fe8c 	bl	80041c0 <_sbrk>
 800f4a8:	1c43      	adds	r3, r0, #1
 800f4aa:	d102      	bne.n	800f4b2 <_sbrk_r+0x1a>
 800f4ac:	682b      	ldr	r3, [r5, #0]
 800f4ae:	b103      	cbz	r3, 800f4b2 <_sbrk_r+0x1a>
 800f4b0:	6023      	str	r3, [r4, #0]
 800f4b2:	bd38      	pop	{r3, r4, r5, pc}
 800f4b4:	20007610 	.word	0x20007610

0800f4b8 <_init>:
 800f4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ba:	bf00      	nop
 800f4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4be:	bc08      	pop	{r3}
 800f4c0:	469e      	mov	lr, r3
 800f4c2:	4770      	bx	lr

0800f4c4 <_fini>:
 800f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c6:	bf00      	nop
 800f4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ca:	bc08      	pop	{r3}
 800f4cc:	469e      	mov	lr, r3
 800f4ce:	4770      	bx	lr
