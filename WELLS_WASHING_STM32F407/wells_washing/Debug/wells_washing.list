
wells_washing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d984  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f24  0800db14  0800db14  0001db14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea38  0800ea38  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea38  0800ea38  0001ea38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea40  0800ea40  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea40  0800ea40  0001ea40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea44  0800ea44  0001ea44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0800ea48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          000049e8  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00006000  20004b48  20004b48  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020999  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004cb0  00000000  00000000  00040b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c78  00000000  00000000  000457e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a98  00000000  00000000  00047458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002741d  00000000  00000000  00048ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000283d6  00000000  00000000  0007030d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5f39  00000000  00000000  000986e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016e61c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008144  00000000  00000000  0016e66c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dafc 	.word	0x0800dafc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800dafc 	.word	0x0800dafc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <is_data_init>:

_def_step step;


int is_data_init()
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	if(system_data.flash_data.factory_code != FACTORY_CODE)
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <is_data_init+0x24>)
 800057a:	f8b3 3dd8 	ldrh.w	r3, [r3, #3544]	; 0xdd8
 800057e:	f645 22a5 	movw	r2, #23205	; 0x5aa5
 8000582:	4293      	cmp	r3, r2
 8000584:	d001      	beq.n	800058a <is_data_init+0x16>
	{
		return 0;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <is_data_init+0x18>
	}
	return 1;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000017c 	.word	0x2000017c

0800059c <dt_calculator_pg_stepnumber>:

void dt_calculator_pg_stepnumber(void){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	for(int i=0;i<10;i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e037      	b.n	8000618 <dt_calculator_pg_stepnumber+0x7c>
	{
		system_data.pg_stepnumber[i] =0;
 80005a8:	4a20      	ldr	r2, [pc, #128]	; (800062c <dt_calculator_pg_stepnumber+0x90>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	4413      	add	r3, r2
 80005b4:	2200      	movs	r2, #0
 80005b6:	809a      	strh	r2, [r3, #4]
		for(int j=0;j<25;j++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	e024      	b.n	8000608 <dt_calculator_pg_stepnumber+0x6c>
		{
			if(system_data.flash_data.Program_para[i][j].type == STEP_TYPE_NONE )
 80005be:	481b      	ldr	r0, [pc, #108]	; (800062c <dt_calculator_pg_stepnumber+0x90>)
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	4613      	mov	r3, r2
 80005c6:	00db      	lsls	r3, r3, #3
 80005c8:	1a9b      	subs	r3, r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80005d0:	fb01 f202 	mul.w	r2, r1, r2
 80005d4:	4413      	add	r3, r2
 80005d6:	4403      	add	r3, r0
 80005d8:	332c      	adds	r3, #44	; 0x2c
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d017      	beq.n	8000610 <dt_calculator_pg_stepnumber+0x74>
			{
				break;
			}
			system_data.pg_stepnumber[i]++;
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <dt_calculator_pg_stepnumber+0x90>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	889b      	ldrh	r3, [r3, #4]
 80005ee:	3301      	adds	r3, #1
 80005f0:	b299      	uxth	r1, r3
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <dt_calculator_pg_stepnumber+0x90>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4413      	add	r3, r2
 80005fe:	460a      	mov	r2, r1
 8000600:	809a      	strh	r2, [r3, #4]
		for(int j=0;j<25;j++)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	2b18      	cmp	r3, #24
 800060c:	ddd7      	ble.n	80005be <dt_calculator_pg_stepnumber+0x22>
 800060e:	e000      	b.n	8000612 <dt_calculator_pg_stepnumber+0x76>
				break;
 8000610:	bf00      	nop
	for(int i=0;i<10;i++)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3301      	adds	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b09      	cmp	r3, #9
 800061c:	ddc4      	ble.n	80005a8 <dt_calculator_pg_stepnumber+0xc>
		}
	}
}
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	2000017c 	.word	0x2000017c

08000630 <is_step_differrent>:
//			system_data.pg_stepnumber[i]++;
//		}
	}
}

int is_step_differrent(uint8_t pg,uint8_t stepindex ,_def_step step){
 8000630:	b082      	sub	sp, #8
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	f107 0c10 	add.w	ip, r7, #16
 800063c:	e88c 000c 	stmia.w	ip, {r2, r3}
 8000640:	4603      	mov	r3, r0
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	460b      	mov	r3, r1
 8000646:	71bb      	strb	r3, [r7, #6]
	return memcmp(&system_data.flash_data.Program_para[pg][stepindex], &step, sizeof(_def_step));
 8000648:	79f9      	ldrb	r1, [r7, #7]
 800064a:	79ba      	ldrb	r2, [r7, #6]
 800064c:	4613      	mov	r3, r2
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	1a9b      	subs	r3, r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000658:	fb01 f202 	mul.w	r2, r1, r2
 800065c:	4413      	add	r3, r2
 800065e:	3328      	adds	r3, #40	; 0x28
 8000660:	4a08      	ldr	r2, [pc, #32]	; (8000684 <is_step_differrent+0x54>)
 8000662:	4413      	add	r3, r2
 8000664:	3304      	adds	r3, #4
 8000666:	220e      	movs	r2, #14
 8000668:	f107 0110 	add.w	r1, r7, #16
 800066c:	4618      	mov	r0, r3
 800066e:	f00c f8ad 	bl	800c7cc <memcmp>
 8000672:	4603      	mov	r3, r0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800067e:	b002      	add	sp, #8
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	2000017c 	.word	0x2000017c

08000688 <dt_Modify_step>:

void dt_Modify_step(uint8_t pg,uint8_t stepindex ,_def_step step)
{
 8000688:	b082      	sub	sp, #8
 800068a:	b5b0      	push	{r4, r5, r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af02      	add	r7, sp, #8
 8000690:	f107 0418 	add.w	r4, r7, #24
 8000694:	e884 000c 	stmia.w	r4, {r2, r3}
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	460b      	mov	r3, r1
 800069e:	71bb      	strb	r3, [r7, #6]
	if(is_step_differrent(pg,stepindex ,step))
 80006a0:	79bd      	ldrb	r5, [r7, #6]
 80006a2:	79fc      	ldrb	r4, [r7, #7]
 80006a4:	466b      	mov	r3, sp
 80006a6:	f107 0220 	add.w	r2, r7, #32
 80006aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ae:	6018      	str	r0, [r3, #0]
 80006b0:	3304      	adds	r3, #4
 80006b2:	8019      	strh	r1, [r3, #0]
 80006b4:	f107 0318 	add.w	r3, r7, #24
 80006b8:	cb0c      	ldmia	r3, {r2, r3}
 80006ba:	4629      	mov	r1, r5
 80006bc:	4620      	mov	r0, r4
 80006be:	f7ff ffb7 	bl	8000630 <is_step_differrent>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d016      	beq.n	80006f6 <dt_Modify_step+0x6e>
	{
		memcpy(&system_data.flash_data.Program_para[pg][stepindex],&step,sizeof(_def_step));
 80006c8:	79f9      	ldrb	r1, [r7, #7]
 80006ca:	79ba      	ldrb	r2, [r7, #6]
 80006cc:	4613      	mov	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80006d8:	fb01 f202 	mul.w	r2, r1, r2
 80006dc:	4413      	add	r3, r2
 80006de:	3328      	adds	r3, #40	; 0x28
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <dt_Modify_step+0x7c>)
 80006e2:	4413      	add	r3, r2
 80006e4:	3304      	adds	r3, #4
 80006e6:	220e      	movs	r2, #14
 80006e8:	f107 0118 	add.w	r1, r7, #24
 80006ec:	4618      	mov	r0, r3
 80006ee:	f00c f87d 	bl	800c7ec <memcpy>
		dt_store_system_data();
 80006f2:	f000 f833 	bl	800075c <dt_store_system_data>
	}
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000700:	b002      	add	sp, #8
 8000702:	4770      	bx	lr
 8000704:	2000017c 	.word	0x2000017c

08000708 <dt_system_data_init>:

void dt_system_data_init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	read_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS);
 800070c:	4a10      	ldr	r2, [pc, #64]	; (8000750 <dt_system_data_init+0x48>)
 800070e:	f640 51dc 	movw	r1, #3548	; 0xddc
 8000712:	4810      	ldr	r0, [pc, #64]	; (8000754 <dt_system_data_init+0x4c>)
 8000714:	f000 fc32 	bl	8000f7c <read_flash>
	if(!is_data_init())
 8000718:	f7ff ff2c 	bl	8000574 <is_data_init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d112      	bne.n	8000748 <dt_system_data_init+0x40>
	{
		memcpy(&system_data.flash_data,&flash_defaul,sizeof(_flash_data));
 8000722:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <dt_system_data_init+0x4c>)
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <dt_system_data_init+0x50>)
 8000726:	4610      	mov	r0, r2
 8000728:	4619      	mov	r1, r3
 800072a:	f640 53dc 	movw	r3, #3548	; 0xddc
 800072e:	461a      	mov	r2, r3
 8000730:	f00c f85c 	bl	800c7ec <memcpy>
		if(write_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS) != HAL_OK)
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <dt_system_data_init+0x48>)
 8000736:	f640 51dc 	movw	r1, #3548	; 0xddc
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <dt_system_data_init+0x4c>)
 800073c:	f000 fbe0 	bl	8000f00 <write_flash>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d000      	beq.n	8000748 <dt_system_data_init+0x40>
		{
			//do when write flash fail
			__NOP();
 8000746:	bf00      	nop
		}
	}
	dt_calculator_pg_stepnumber();
 8000748:	f7ff ff28 	bl	800059c <dt_calculator_pg_stepnumber>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	08060000 	.word	0x08060000
 8000754:	2000017c 	.word	0x2000017c
 8000758:	0800dba4 	.word	0x0800dba4

0800075c <dt_store_system_data>:

HAL_StatusTypeDef dt_store_system_data(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res = write_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS);
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <dt_store_system_data+0x30>)
 8000764:	f640 51dc 	movw	r1, #3548	; 0xddc
 8000768:	4809      	ldr	r0, [pc, #36]	; (8000790 <dt_store_system_data+0x34>)
 800076a:	f000 fbc9 	bl	8000f00 <write_flash>
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	if( res != HAL_OK){
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d004      	beq.n	8000782 <dt_store_system_data+0x26>
		printf("wirte flash fail! error code : %d",res);
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <dt_store_system_data+0x38>)
 800077e:	f00c f84b 	bl	800c818 <iprintf>
	}
	return res;
 8000782:	79fb      	ldrb	r3, [r7, #7]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	08060000 	.word	0x08060000
 8000790:	2000017c 	.word	0x2000017c
 8000794:	0800db14 	.word	0x0800db14

08000798 <s_log_add_1_line>:
}_system_log;

_system_log s_log;

void s_log_add_1_line(char *line)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	s_log.is_change=1;
 80007a0:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <s_log_add_1_line+0xc8>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
	if(s_log.line_nums  == MAX_LOG_LINE_NUMS) // remove first line
 80007a8:	4b2d      	ldr	r3, [pc, #180]	; (8000860 <s_log_add_1_line+0xc8>)
 80007aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80007ae:	2b16      	cmp	r3, #22
 80007b0:	d134      	bne.n	800081c <s_log_add_1_line+0x84>
	{
		char *seconnd = strstr(s_log.log,"\r\n");
 80007b2:	492c      	ldr	r1, [pc, #176]	; (8000864 <s_log_add_1_line+0xcc>)
 80007b4:	482a      	ldr	r0, [pc, #168]	; (8000860 <s_log_add_1_line+0xc8>)
 80007b6:	f00c f867 	bl	800c888 <strstr>
 80007ba:	60b8      	str	r0, [r7, #8]
		if(seconnd)
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d024      	beq.n	800080c <s_log_add_1_line+0x74>
		{
			seconnd += 2;
 80007c2:	68bb      	ldr	r3, [r7, #8]
 80007c4:	3302      	adds	r3, #2
 80007c6:	60bb      	str	r3, [r7, #8]
			s_log.s_size -= (seconnd - s_log.log);
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <s_log_add_1_line+0xc8>)
 80007ca:	f8b3 2202 	ldrh.w	r2, [r3, #514]	; 0x202
 80007ce:	68bb      	ldr	r3, [r7, #8]
 80007d0:	4923      	ldr	r1, [pc, #140]	; (8000860 <s_log_add_1_line+0xc8>)
 80007d2:	1a5b      	subs	r3, r3, r1
 80007d4:	b29b      	uxth	r3, r3
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	b29a      	uxth	r2, r3
 80007da:	4b21      	ldr	r3, [pc, #132]	; (8000860 <s_log_add_1_line+0xc8>)
 80007dc:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
			for(int i =0;i<s_log.s_size;i++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	e00b      	b.n	80007fe <s_log_add_1_line+0x66>
			{
				s_log.log[i] = seconnd[i];
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	68ba      	ldr	r2, [r7, #8]
 80007ea:	4413      	add	r3, r2
 80007ec:	7819      	ldrb	r1, [r3, #0]
 80007ee:	4a1c      	ldr	r2, [pc, #112]	; (8000860 <s_log_add_1_line+0xc8>)
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	4413      	add	r3, r2
 80007f4:	460a      	mov	r2, r1
 80007f6:	701a      	strb	r2, [r3, #0]
			for(int i =0;i<s_log.s_size;i++)
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	3301      	adds	r3, #1
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	4b18      	ldr	r3, [pc, #96]	; (8000860 <s_log_add_1_line+0xc8>)
 8000800:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8000804:	461a      	mov	r2, r3
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	4293      	cmp	r3, r2
 800080a:	dbec      	blt.n	80007e6 <s_log_add_1_line+0x4e>
			}
		}
		s_log.line_nums--;
 800080c:	4b14      	ldr	r3, [pc, #80]	; (8000860 <s_log_add_1_line+0xc8>)
 800080e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8000812:	3b01      	subs	r3, #1
 8000814:	b2da      	uxtb	r2, r3
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <s_log_add_1_line+0xc8>)
 8000818:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
	}
	s_log.s_size += sprintf(s_log.log+s_log.s_size,"%s\r\n",line);
 800081c:	4b10      	ldr	r3, [pc, #64]	; (8000860 <s_log_add_1_line+0xc8>)
 800081e:	f8b3 3202 	ldrh.w	r3, [r3, #514]	; 0x202
 8000822:	461a      	mov	r2, r3
 8000824:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <s_log_add_1_line+0xc8>)
 8000826:	4413      	add	r3, r2
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	490f      	ldr	r1, [pc, #60]	; (8000868 <s_log_add_1_line+0xd0>)
 800082c:	4618      	mov	r0, r3
 800082e:	f00c f80b 	bl	800c848 <siprintf>
 8000832:	4601      	mov	r1, r0
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <s_log_add_1_line+0xc8>)
 8000836:	f8b3 2202 	ldrh.w	r2, [r3, #514]	; 0x202
 800083a:	b28b      	uxth	r3, r1
 800083c:	4413      	add	r3, r2
 800083e:	b29a      	uxth	r2, r3
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <s_log_add_1_line+0xc8>)
 8000842:	f8a3 2202 	strh.w	r2, [r3, #514]	; 0x202
	s_log.line_nums ++;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <s_log_add_1_line+0xc8>)
 8000848:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800084c:	3301      	adds	r3, #1
 800084e:	b2da      	uxtb	r2, r3
 8000850:	4b03      	ldr	r3, [pc, #12]	; (8000860 <s_log_add_1_line+0xc8>)
 8000852:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
}
 8000856:	bf00      	nop
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000f80 	.word	0x20000f80
 8000864:	0800db38 	.word	0x0800db38
 8000868:	0800db3c 	.word	0x0800db3c

0800086c <s_log_clear>:
void s_log_clear(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
	s_log.is_change =1;
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <s_log_clear+0x1c>)
 8000872:	2201      	movs	r2, #1
 8000874:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
	memset(&s_log,0,sizeof(s_log));
 8000878:	f240 2206 	movw	r2, #518	; 0x206
 800087c:	2100      	movs	r1, #0
 800087e:	4802      	ldr	r0, [pc, #8]	; (8000888 <s_log_clear+0x1c>)
 8000880:	f00b ffc2 	bl	800c808 <memset>
}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000f80 	.word	0x20000f80

0800088c <Dw_write>:


static inline void Dw_write(uint8_t *data,uint16_t len)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	807b      	strh	r3, [r7, #2]
	uart_transmit_block(data, len, 1000);
 8000898:	887b      	ldrh	r3, [r7, #2]
 800089a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800089e:	4619      	mov	r1, r3
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f001 ffef 	bl	8002884 <uart_transmit_block>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <Dwin_Write_VP>:

	}
}

int Dwin_Write_VP(uint16_t Addr,uint16_t *data,uint16_t len)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b09c      	sub	sp, #112	; 0x70
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	6039      	str	r1, [r7, #0]
 80008b8:	80fb      	strh	r3, [r7, #6]
 80008ba:	4613      	mov	r3, r2
 80008bc:	80bb      	strh	r3, [r7, #4]
	uint8_t DwinBuf[100];
	DwinBuf[0]= 0x5A;
 80008be:	235a      	movs	r3, #90	; 0x5a
 80008c0:	723b      	strb	r3, [r7, #8]
	DwinBuf[1]= 0xA5;
 80008c2:	23a5      	movs	r3, #165	; 0xa5
 80008c4:	727b      	strb	r3, [r7, #9]
	DwinBuf[2]= (len+1)*2 +1;  //
 80008c6:	88bb      	ldrh	r3, [r7, #4]
 80008c8:	3301      	adds	r3, #1
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	b2db      	uxtb	r3, r3
 80008d0:	3301      	adds	r3, #1
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	72bb      	strb	r3, [r7, #10]
	DwinBuf[3]= 0x82;
 80008d6:	2382      	movs	r3, #130	; 0x82
 80008d8:	72fb      	strb	r3, [r7, #11]
	DwinBuf[4]= Addr>>8;
 80008da:	88fb      	ldrh	r3, [r7, #6]
 80008dc:	0a1b      	lsrs	r3, r3, #8
 80008de:	b29b      	uxth	r3, r3
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	733b      	strb	r3, [r7, #12]
	DwinBuf[5]= Addr;
 80008e4:	88fb      	ldrh	r3, [r7, #6]
 80008e6:	b2db      	uxtb	r3, r3
 80008e8:	737b      	strb	r3, [r7, #13]
	for(int i=0;i<len;i++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80008ee:	e01f      	b.n	8000930 <Dwin_Write_VP+0x82>
	{
		DwinBuf[6+i*2] = data[i]/256;
 80008f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	683a      	ldr	r2, [r7, #0]
 80008f6:	4413      	add	r3, r2
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	0a1b      	lsrs	r3, r3, #8
 80008fc:	b29a      	uxth	r2, r3
 80008fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000900:	3303      	adds	r3, #3
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	b2d2      	uxtb	r2, r2
 8000906:	3370      	adds	r3, #112	; 0x70
 8000908:	443b      	add	r3, r7
 800090a:	f803 2c68 	strb.w	r2, [r3, #-104]
		DwinBuf[6+i*2+1] = data[i];
 800090e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000910:	005b      	lsls	r3, r3, #1
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	4413      	add	r3, r2
 8000916:	881a      	ldrh	r2, [r3, #0]
 8000918:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800091a:	3303      	adds	r3, #3
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	3301      	adds	r3, #1
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	3370      	adds	r3, #112	; 0x70
 8000924:	443b      	add	r3, r7
 8000926:	f803 2c68 	strb.w	r2, [r3, #-104]
	for(int i=0;i<len;i++)
 800092a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800092c:	3301      	adds	r3, #1
 800092e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000930:	88bb      	ldrh	r3, [r7, #4]
 8000932:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000934:	429a      	cmp	r2, r3
 8000936:	dbdb      	blt.n	80008f0 <Dwin_Write_VP+0x42>
	}
    len = (len+1)*2 +4;
 8000938:	88bb      	ldrh	r3, [r7, #4]
 800093a:	3303      	adds	r3, #3
 800093c:	b29b      	uxth	r3, r3
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	80bb      	strh	r3, [r7, #4]
    Dw_write(DwinBuf, len);
 8000942:	88ba      	ldrh	r2, [r7, #4]
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ff9e 	bl	800088c <Dw_write>
	return 1;
 8000950:	2301      	movs	r3, #1
}
 8000952:	4618      	mov	r0, r3
 8000954:	3770      	adds	r7, #112	; 0x70
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <Dwin_switch_page>:
    len = (len+1)*2 +4;
    Dw_write(DwinBuf, len);
	return 1;
}
void Dwin_switch_page(int page_index)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b084      	sub	sp, #16
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
	uint16_t Buf[2] = {0x5A01,00};
 8000962:	f645 2301 	movw	r3, #23041	; 0x5a01
 8000966:	81bb      	strh	r3, [r7, #12]
 8000968:	2300      	movs	r3, #0
 800096a:	81fb      	strh	r3, [r7, #14]
	Buf[1] = page_index;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	b29b      	uxth	r3, r3
 8000970:	81fb      	strh	r3, [r7, #14]
	Dwin_Write_VP(0X0084,Buf,2);
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	2202      	movs	r2, #2
 8000978:	4619      	mov	r1, r3
 800097a:	2084      	movs	r0, #132	; 0x84
 800097c:	f7ff ff97 	bl	80008ae <Dwin_Write_VP>
}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <Dwin_init>:

void Dwin_init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	Dwin_reset();
 800098c:	f000 f812 	bl	80009b4 <Dwin_reset>
	HAL_Delay(1000);
 8000990:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000994:	f002 f826 	bl	80029e4 <HAL_Delay>
	Dwin_switch_page(05);
 8000998:	2005      	movs	r0, #5
 800099a:	f7ff ffde 	bl	800095a <Dwin_switch_page>
	memset(&s_log,0,sizeof(s_log));
 800099e:	f240 2206 	movw	r2, #518	; 0x206
 80009a2:	2100      	movs	r1, #0
 80009a4:	4802      	ldr	r0, [pc, #8]	; (80009b0 <Dwin_init+0x28>)
 80009a6:	f00b ff2f 	bl	800c808 <memset>
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000f80 	.word	0x20000f80

080009b4 <Dwin_reset>:


void Dwin_reset(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
	uint16_t Buf[2] = {0x55AA,0x5AA5};
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <Dwin_reset+0x20>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	607b      	str	r3, [r7, #4]
	Dwin_Write_VP(0X0004,Buf,2);
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2202      	movs	r2, #2
 80009c4:	4619      	mov	r1, r3
 80009c6:	2004      	movs	r0, #4
 80009c8:	f7ff ff71 	bl	80008ae <Dwin_Write_VP>
}
 80009cc:	bf00      	nop
 80009ce:	3708      	adds	r7, #8
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	0800db44 	.word	0x0800db44

080009d8 <dw_update_setup_page>:

int dw_update_setup_page(uint8_t pg,uint8_t stepnumber){
 80009d8:	b590      	push	{r4, r7, lr}
 80009da:	b089      	sub	sp, #36	; 0x24
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	460a      	mov	r2, r1
 80009e2:	71fb      	strb	r3, [r7, #7]
 80009e4:	4613      	mov	r3, r2
 80009e6:	71bb      	strb	r3, [r7, #6]
	if((pg < 1 ) || (stepnumber <1)){
 80009e8:	79fb      	ldrb	r3, [r7, #7]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d002      	beq.n	80009f4 <dw_update_setup_page+0x1c>
 80009ee:	79bb      	ldrb	r3, [r7, #6]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d102      	bne.n	80009fa <dw_update_setup_page+0x22>
			return -1;
 80009f4:	f04f 33ff 	mov.w	r3, #4294967295
 80009f8:	e056      	b.n	8000aa8 <dw_update_setup_page+0xd0>
	}
	uint16_t data[10];

	data[0] = pg;
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	813b      	strh	r3, [r7, #8]
	data[1] = stepnumber;
 8000a00:	79bb      	ldrb	r3, [r7, #6]
 8000a02:	b29b      	uxth	r3, r3
 8000a04:	817b      	strh	r3, [r7, #10]
	data[2] = system_data.flash_data.Program_para[pg-1][stepnumber-1].type;
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	1e59      	subs	r1, r3, #1
 8000a0a:	79bb      	ldrb	r3, [r7, #6]
 8000a0c:	1e5a      	subs	r2, r3, #1
 8000a0e:	4828      	ldr	r0, [pc, #160]	; (8000ab0 <dw_update_setup_page+0xd8>)
 8000a10:	4613      	mov	r3, r2
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	1a9b      	subs	r3, r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000a1c:	fb01 f202 	mul.w	r2, r1, r2
 8000a20:	4413      	add	r3, r2
 8000a22:	4403      	add	r3, r0
 8000a24:	332c      	adds	r3, #44	; 0x2c
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	81bb      	strh	r3, [r7, #12]
	data[3] = system_data.flash_data.Program_para[pg-1][stepnumber-1].wells;
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	1e59      	subs	r1, r3, #1
 8000a30:	79bb      	ldrb	r3, [r7, #6]
 8000a32:	1e5a      	subs	r2, r3, #1
 8000a34:	481e      	ldr	r0, [pc, #120]	; (8000ab0 <dw_update_setup_page+0xd8>)
 8000a36:	4613      	mov	r3, r2
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	1a9b      	subs	r3, r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000a42:	fb01 f202 	mul.w	r2, r1, r2
 8000a46:	4413      	add	r3, r2
 8000a48:	4403      	add	r3, r0
 8000a4a:	332d      	adds	r3, #45	; 0x2d
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	b29b      	uxth	r3, r3
 8000a50:	81fb      	strh	r3, [r7, #14]
	for(int i=4;i<10;i++)
 8000a52:	2304      	movs	r3, #4
 8000a54:	61fb      	str	r3, [r7, #28]
 8000a56:	e01b      	b.n	8000a90 <dw_update_setup_page+0xb8>
	{
		data[i] = system_data.flash_data.Program_para[pg-1][stepnumber-1].timing[i-4];
 8000a58:	79fb      	ldrb	r3, [r7, #7]
 8000a5a:	1e58      	subs	r0, r3, #1
 8000a5c:	79bb      	ldrb	r3, [r7, #6]
 8000a5e:	1e5a      	subs	r2, r3, #1
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	1f19      	subs	r1, r3, #4
 8000a64:	4c12      	ldr	r4, [pc, #72]	; (8000ab0 <dw_update_setup_page+0xd8>)
 8000a66:	4613      	mov	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	1a9b      	subs	r3, r3, r2
 8000a6c:	22af      	movs	r2, #175	; 0xaf
 8000a6e:	fb00 f202 	mul.w	r2, r0, r2
 8000a72:	4413      	add	r3, r2
 8000a74:	440b      	add	r3, r1
 8000a76:	3314      	adds	r3, #20
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	4423      	add	r3, r4
 8000a7c:	88da      	ldrh	r2, [r3, #6]
 8000a7e:	69fb      	ldr	r3, [r7, #28]
 8000a80:	005b      	lsls	r3, r3, #1
 8000a82:	3320      	adds	r3, #32
 8000a84:	443b      	add	r3, r7
 8000a86:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(int i=4;i<10;i++)
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	2b09      	cmp	r3, #9
 8000a94:	dde0      	ble.n	8000a58 <dw_update_setup_page+0x80>
	}
	Dwin_Write_VP(VP_SETUP_PARA,data,10);
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	220a      	movs	r2, #10
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8000aa2:	f7ff ff04 	bl	80008ae <Dwin_Write_VP>
	return 1;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3724      	adds	r7, #36	; 0x24
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd90      	pop	{r4, r7, pc}
 8000ab0:	2000017c 	.word	0x2000017c

08000ab4 <show_setup_page>:

void show_setup_page(uint8_t pg,uint8_t stepnumber){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	460a      	mov	r2, r1
 8000abe:	71fb      	strb	r3, [r7, #7]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	71bb      	strb	r3, [r7, #6]
	if((pg < 1 ) || (stepnumber <1)){
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d037      	beq.n	8000b3a <show_setup_page+0x86>
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d034      	beq.n	8000b3a <show_setup_page+0x86>
		return;
	}
	switch(system_data.flash_data.Program_para[pg-1][stepnumber-1].type){
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	1e59      	subs	r1, r3, #1
 8000ad4:	79bb      	ldrb	r3, [r7, #6]
 8000ad6:	1e5a      	subs	r2, r3, #1
 8000ad8:	481a      	ldr	r0, [pc, #104]	; (8000b44 <show_setup_page+0x90>)
 8000ada:	4613      	mov	r3, r2
 8000adc:	00db      	lsls	r3, r3, #3
 8000ade:	1a9b      	subs	r3, r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000ae6:	fb01 f202 	mul.w	r2, r1, r2
 8000aea:	4413      	add	r3, r2
 8000aec:	4403      	add	r3, r0
 8000aee:	332c      	adds	r3, #44	; 0x2c
 8000af0:	781b      	ldrb	r3, [r3, #0]
 8000af2:	2b03      	cmp	r3, #3
 8000af4:	d81a      	bhi.n	8000b2c <show_setup_page+0x78>
 8000af6:	a201      	add	r2, pc, #4	; (adr r2, 8000afc <show_setup_page+0x48>)
 8000af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000afc:	08000b0d 	.word	0x08000b0d
 8000b00:	08000b15 	.word	0x08000b15
 8000b04:	08000b1d 	.word	0x08000b1d
 8000b08:	08000b25 	.word	0x08000b25
		case (STEP_TYPE_NONE):
				Dwin_switch_page(PAGE_SETUP_STEP_NONE);
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff ff24 	bl	800095a <Dwin_switch_page>
				break;
 8000b12:	e00b      	b.n	8000b2c <show_setup_page+0x78>
		case (STEP_TYPE_SHAKE):
				Dwin_switch_page(PAGE_SETUP_STEP_SHAKE);
 8000b14:	2002      	movs	r0, #2
 8000b16:	f7ff ff20 	bl	800095a <Dwin_switch_page>
				break;
 8000b1a:	e007      	b.n	8000b2c <show_setup_page+0x78>
		case (STEP_TYPE_WASHING):
				Dwin_switch_page(PAGE_SETUP_STEP_WASHING);
 8000b1c:	2003      	movs	r0, #3
 8000b1e:	f7ff ff1c 	bl	800095a <Dwin_switch_page>
				break;
 8000b22:	e003      	b.n	8000b2c <show_setup_page+0x78>
		case (STEP_TYPE_DRYING):
				Dwin_switch_page(PAGE_SETUP_STEP_DRYING);
 8000b24:	2004      	movs	r0, #4
 8000b26:	f7ff ff18 	bl	800095a <Dwin_switch_page>
				break;
 8000b2a:	bf00      	nop
	}
	dw_update_setup_page(pg,stepnumber);
 8000b2c:	79ba      	ldrb	r2, [r7, #6]
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4611      	mov	r1, r2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ff50 	bl	80009d8 <dw_update_setup_page>
 8000b38:	e000      	b.n	8000b3c <show_setup_page+0x88>
		return;
 8000b3a:	bf00      	nop
}
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000017c 	.word	0x2000017c

08000b48 <dwin_update_step>:
//                 2F  FF      2F FF   30  00
//                                  8      10  11  12  13 14  15  16
//{5A}{A5}{18}{83}{3A}{00}{0A}{00}{00}{00}{01}{00}{01}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}
void dwin_update_step(uint8_t *data){
 8000b48:	b5b0      	push	{r4, r5, r7, lr}
 8000b4a:	b08a      	sub	sp, #40	; 0x28
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	6078      	str	r0, [r7, #4]
	_def_step step;
	uint8_t pg = data[8]; // 0x3000
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	7a1b      	ldrb	r3, [r3, #8]
 8000b54:	76fb      	strb	r3, [r7, #27]
	uint8_t stepindex = data[10]; // 0x3001
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7a9b      	ldrb	r3, [r3, #10]
 8000b5a:	76bb      	strb	r3, [r7, #26]
	step.type  =data[12];
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	7b1b      	ldrb	r3, [r3, #12]
 8000b60:	733b      	strb	r3, [r7, #12]
	step.wells =data[14];
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	7b9b      	ldrb	r3, [r3, #14]
 8000b66:	737b      	strb	r3, [r7, #13]
	for(int i=0;i<6;i++){
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]
 8000b6c:	e01c      	b.n	8000ba8 <dwin_update_step+0x60>
		step.timing[i] = (uint16_t)data[15+i*2]*256 + data[16+i*2];
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	005b      	lsls	r3, r3, #1
 8000b72:	330f      	adds	r3, #15
 8000b74:	461a      	mov	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	b29b      	uxth	r3, r3
 8000b7e:	021b      	lsls	r3, r3, #8
 8000b80:	b29a      	uxth	r2, r3
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3308      	adds	r3, #8
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4619      	mov	r1, r3
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	440b      	add	r3, r1
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	4413      	add	r3, r2
 8000b94:	b29a      	uxth	r2, r3
 8000b96:	69fb      	ldr	r3, [r7, #28]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	3320      	adds	r3, #32
 8000b9c:	443b      	add	r3, r7
 8000b9e:	f823 2c12 	strh.w	r2, [r3, #-18]
	for(int i=0;i<6;i++){
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	61fb      	str	r3, [r7, #28]
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	2b05      	cmp	r3, #5
 8000bac:	dddf      	ble.n	8000b6e <dwin_update_step+0x26>
	}

	dt_Modify_step(pg-1, stepindex-1, step);
 8000bae:	7efb      	ldrb	r3, [r7, #27]
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	b2dc      	uxtb	r4, r3
 8000bb4:	7ebb      	ldrb	r3, [r7, #26]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	b2dd      	uxtb	r5, r3
 8000bba:	466b      	mov	r3, sp
 8000bbc:	f107 0214 	add.w	r2, r7, #20
 8000bc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bc4:	6018      	str	r0, [r3, #0]
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	8019      	strh	r1, [r3, #0]
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	cb0c      	ldmia	r3, {r2, r3}
 8000bd0:	4629      	mov	r1, r5
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	f7ff fd58 	bl	8000688 <dt_Modify_step>
}
 8000bd8:	bf00      	nop
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bdb0      	pop	{r4, r5, r7, pc}

08000be0 <dwin_start_program>:

void dwin_start_program(uint8_t pg){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b09c      	sub	sp, #112	; 0x70
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]

//	s_log.s_size = sprintf(s_log.log,"\r\nIF I DIE");
	Dwin_switch_page(PAGE_RUNNING);
 8000bea:	2006      	movs	r0, #6
 8000bec:	f7ff feb5 	bl	800095a <Dwin_switch_page>
	s_log_clear();
 8000bf0:	f7ff fe3c 	bl	800086c <s_log_clear>
	HAL_Delay(1);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f001 fef5 	bl	80029e4 <HAL_Delay>
	char tmp[100];
	sprintf(tmp,"START PROGRAM %d",pg);
 8000bfa:	79fa      	ldrb	r2, [r7, #7]
 8000bfc:	f107 030c 	add.w	r3, r7, #12
 8000c00:	4906      	ldr	r1, [pc, #24]	; (8000c1c <dwin_start_program+0x3c>)
 8000c02:	4618      	mov	r0, r3
 8000c04:	f00b fe20 	bl	800c848 <siprintf>
	s_log_add_1_line(tmp);
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fdc3 	bl	8000798 <s_log_add_1_line>
//	Dwin_Write_VP_String(0x3800,s_log.log, s_log.s_size);
}
 8000c12:	bf00      	nop
 8000c14:	3770      	adds	r7, #112	; 0x70
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	0800db48 	.word	0x0800db48

08000c20 <dw_process_rx_buffer>:

static uint8_t current_pg_setup;
static uint8_t current_step_setup;
int dw_process_rx_buffer(uint8_t *data,uint16_t size){ //USART_CR2_TOEN
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	460b      	mov	r3, r1
 8000c2a:	807b      	strh	r3, [r7, #2]

	if(size < 5){
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d802      	bhi.n	8000c38 <dw_process_rx_buffer+0x18>
		return -1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
 8000c36:	e0f4      	b.n	8000e22 <dw_process_rx_buffer+0x202>
	}
	if(data[0] != 0x5A && data[1] != 0xA5 ){
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	2b5a      	cmp	r3, #90	; 0x5a
 8000c3e:	d007      	beq.n	8000c50 <dw_process_rx_buffer+0x30>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3301      	adds	r3, #1
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2ba5      	cmp	r3, #165	; 0xa5
 8000c48:	d002      	beq.n	8000c50 <dw_process_rx_buffer+0x30>
		return -2;
 8000c4a:	f06f 0301 	mvn.w	r3, #1
 8000c4e:	e0e8      	b.n	8000e22 <dw_process_rx_buffer+0x202>
	}
	uint16_t code = data[4];
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3304      	adds	r3, #4
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	81fb      	strh	r3, [r7, #14]
	code = code*256+ data[5];
 8000c58:	89fb      	ldrh	r3, [r7, #14]
 8000c5a:	021b      	lsls	r3, r3, #8
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3305      	adds	r3, #5
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	b29b      	uxth	r3, r3
 8000c66:	4413      	add	r3, r2
 8000c68:	81fb      	strh	r3, [r7, #14]
	uint16_t value;
	switch (code) {
 8000c6a:	89fb      	ldrh	r3, [r7, #14]
 8000c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c70:	f000 80ce 	beq.w	8000e10 <dw_process_rx_buffer+0x1f0>
 8000c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c78:	f300 80d1 	bgt.w	8000e1e <dw_process_rx_buffer+0x1fe>
 8000c7c:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 8000c80:	d072      	beq.n	8000d68 <dw_process_rx_buffer+0x148>
 8000c82:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 8000c86:	f300 80ca 	bgt.w	8000e1e <dw_process_rx_buffer+0x1fe>
 8000c8a:	f243 1201 	movw	r2, #12545	; 0x3101
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d064      	beq.n	8000d5c <dw_process_rx_buffer+0x13c>
 8000c92:	f243 1201 	movw	r2, #12545	; 0x3101
 8000c96:	4293      	cmp	r3, r2
 8000c98:	f300 80c1 	bgt.w	8000e1e <dw_process_rx_buffer+0x1fe>
 8000c9c:	f243 0201 	movw	r2, #12289	; 0x3001
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d04a      	beq.n	8000d3a <dw_process_rx_buffer+0x11a>
 8000ca4:	f243 0201 	movw	r2, #12289	; 0x3001
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	f300 80b8 	bgt.w	8000e1e <dw_process_rx_buffer+0x1fe>
 8000cae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000cb2:	d030      	beq.n	8000d16 <dw_process_rx_buffer+0xf6>
 8000cb4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000cb8:	f300 80b1 	bgt.w	8000e1e <dw_process_rx_buffer+0x1fe>
 8000cbc:	f242 5201 	movw	r2, #9473	; 0x2501
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	f000 80a1 	beq.w	8000e08 <dw_process_rx_buffer+0x1e8>
 8000cc6:	f242 5201 	movw	r2, #9473	; 0x2501
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	f300 80a7 	bgt.w	8000e1e <dw_process_rx_buffer+0x1fe>
 8000cd0:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 8000cd4:	f000 8094 	beq.w	8000e00 <dw_process_rx_buffer+0x1e0>
 8000cd8:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 8000cdc:	f300 809f 	bgt.w	8000e1e <dw_process_rx_buffer+0x1fe>
 8000ce0:	f242 3205 	movw	r2, #8965	; 0x2305
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d067      	beq.n	8000db8 <dw_process_rx_buffer+0x198>
 8000ce8:	f242 3205 	movw	r2, #8965	; 0x2305
 8000cec:	4293      	cmp	r3, r2
 8000cee:	f300 8096 	bgt.w	8000e1e <dw_process_rx_buffer+0x1fe>
 8000cf2:	f242 3204 	movw	r2, #8964	; 0x2304
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d070      	beq.n	8000ddc <dw_process_rx_buffer+0x1bc>
 8000cfa:	f242 3204 	movw	r2, #8964	; 0x2304
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	f300 808d 	bgt.w	8000e1e <dw_process_rx_buffer+0x1fe>
 8000d04:	f242 2204 	movw	r2, #8708	; 0x2204
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d043      	beq.n	8000d94 <dw_process_rx_buffer+0x174>
 8000d0c:	f242 2205 	movw	r2, #8709	; 0x2205
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d02d      	beq.n	8000d70 <dw_process_rx_buffer+0x150>
		case BT_START_PG:
				dwin_start_program(data[8]);
				break;

		default:
			break;
 8000d14:	e083      	b.n	8000e1e <dw_process_rx_buffer+0x1fe>
				current_pg_setup=value = data[8];
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3308      	adds	r3, #8
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	81bb      	strh	r3, [r7, #12]
 8000d1e:	89bb      	ldrh	r3, [r7, #12]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4b42      	ldr	r3, [pc, #264]	; (8000e2c <dw_process_rx_buffer+0x20c>)
 8000d24:	701a      	strb	r2, [r3, #0]
				current_step_setup =1;
 8000d26:	4b42      	ldr	r3, [pc, #264]	; (8000e30 <dw_process_rx_buffer+0x210>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
				show_setup_page(value,1);
 8000d2c:	89bb      	ldrh	r3, [r7, #12]
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2101      	movs	r1, #1
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff febe 	bl	8000ab4 <show_setup_page>
			break;
 8000d38:	e072      	b.n	8000e20 <dw_process_rx_buffer+0x200>
				current_step_setup = value = data[8];
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3308      	adds	r3, #8
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	81bb      	strh	r3, [r7, #12]
 8000d42:	89bb      	ldrh	r3, [r7, #12]
 8000d44:	b2da      	uxtb	r2, r3
 8000d46:	4b3a      	ldr	r3, [pc, #232]	; (8000e30 <dw_process_rx_buffer+0x210>)
 8000d48:	701a      	strb	r2, [r3, #0]
				show_setup_page(current_pg_setup,value);
 8000d4a:	4b38      	ldr	r3, [pc, #224]	; (8000e2c <dw_process_rx_buffer+0x20c>)
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	89ba      	ldrh	r2, [r7, #12]
 8000d50:	b2d2      	uxtb	r2, r2
 8000d52:	4611      	mov	r1, r2
 8000d54:	4618      	mov	r0, r3
 8000d56:	f7ff fead 	bl	8000ab4 <show_setup_page>
			break;
 8000d5a:	e061      	b.n	8000e20 <dw_process_rx_buffer+0x200>
				dw_update_step_numbers();
 8000d5c:	f000 f86e 	bl	8000e3c <dw_update_step_numbers>
				current_pg_setup =0;
 8000d60:	4b32      	ldr	r3, [pc, #200]	; (8000e2c <dw_process_rx_buffer+0x20c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
			break;
 8000d66:	e05b      	b.n	8000e20 <dw_process_rx_buffer+0x200>
				dwin_update_step(data);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff feed 	bl	8000b48 <dwin_update_step>
				break;
 8000d6e:	e057      	b.n	8000e20 <dw_process_rx_buffer+0x200>
				value = (uint16_t)data[7]*256+data[8];
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3307      	adds	r3, #7
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	b29a      	uxth	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3308      	adds	r3, #8
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	4413      	add	r3, r2
 8000d86:	81bb      	strh	r3, [r7, #12]
				step_mt_move_foward(&x_motor, value);
 8000d88:	89bb      	ldrh	r3, [r7, #12]
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4829      	ldr	r0, [pc, #164]	; (8000e34 <dw_process_rx_buffer+0x214>)
 8000d8e:	f000 fecd 	bl	8001b2c <step_mt_move_foward>
				break;
 8000d92:	e045      	b.n	8000e20 <dw_process_rx_buffer+0x200>
				value = (uint16_t)data[7]*256+data[8];
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3307      	adds	r3, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	021b      	lsls	r3, r3, #8
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3308      	adds	r3, #8
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	4413      	add	r3, r2
 8000daa:	81bb      	strh	r3, [r7, #12]
				step_mt_move_backward(&x_motor, value);
 8000dac:	89bb      	ldrh	r3, [r7, #12]
 8000dae:	4619      	mov	r1, r3
 8000db0:	4820      	ldr	r0, [pc, #128]	; (8000e34 <dw_process_rx_buffer+0x214>)
 8000db2:	f000 fed7 	bl	8001b64 <step_mt_move_backward>
				break;
 8000db6:	e033      	b.n	8000e20 <dw_process_rx_buffer+0x200>
				value = (uint16_t)data[7]*256+data[8];
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3307      	adds	r3, #7
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b29b      	uxth	r3, r3
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b29a      	uxth	r2, r3
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3308      	adds	r3, #8
 8000dc8:	781b      	ldrb	r3, [r3, #0]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4413      	add	r3, r2
 8000dce:	81bb      	strh	r3, [r7, #12]
				step_mt_move_foward(&z_motor, value);
 8000dd0:	89bb      	ldrh	r3, [r7, #12]
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4818      	ldr	r0, [pc, #96]	; (8000e38 <dw_process_rx_buffer+0x218>)
 8000dd6:	f000 fea9 	bl	8001b2c <step_mt_move_foward>
				break;
 8000dda:	e021      	b.n	8000e20 <dw_process_rx_buffer+0x200>
				value = (uint16_t)data[7]*256+data[8];
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3307      	adds	r3, #7
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	021b      	lsls	r3, r3, #8
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3308      	adds	r3, #8
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	4413      	add	r3, r2
 8000df2:	81bb      	strh	r3, [r7, #12]
				step_mt_move_backward(&z_motor, value);
 8000df4:	89bb      	ldrh	r3, [r7, #12]
 8000df6:	4619      	mov	r1, r3
 8000df8:	480f      	ldr	r0, [pc, #60]	; (8000e38 <dw_process_rx_buffer+0x218>)
 8000dfa:	f000 feb3 	bl	8001b64 <step_mt_move_backward>
				break;
 8000dfe:	e00f      	b.n	8000e20 <dw_process_rx_buffer+0x200>
				mt_move_to_home(&x_motor);
 8000e00:	480c      	ldr	r0, [pc, #48]	; (8000e34 <dw_process_rx_buffer+0x214>)
 8000e02:	f000 fe00 	bl	8001a06 <mt_move_to_home>
				break;
 8000e06:	e00b      	b.n	8000e20 <dw_process_rx_buffer+0x200>
				mt_move_to_home(&z_motor);
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <dw_process_rx_buffer+0x218>)
 8000e0a:	f000 fdfc 	bl	8001a06 <mt_move_to_home>
				break;
 8000e0e:	e007      	b.n	8000e20 <dw_process_rx_buffer+0x200>
				dwin_start_program(data[8]);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3308      	adds	r3, #8
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff fee2 	bl	8000be0 <dwin_start_program>
				break;
 8000e1c:	e000      	b.n	8000e20 <dw_process_rx_buffer+0x200>
			break;
 8000e1e:	bf00      	nop
	}
	return 1;
 8000e20:	2301      	movs	r3, #1
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3710      	adds	r7, #16
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20001186 	.word	0x20001186
 8000e30:	20001187 	.word	0x20001187
 8000e34:	20001508 	.word	0x20001508
 8000e38:	20001538 	.word	0x20001538

08000e3c <dw_update_step_numbers>:

int dw_update_step_numbers(void){
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	dt_calculator_pg_stepnumber();
 8000e40:	f7ff fbac 	bl	800059c <dt_calculator_pg_stepnumber>
	Dwin_Write_VP(VP_STEP_NUMBERS,system_data.pg_stepnumber,10);
 8000e44:	220a      	movs	r2, #10
 8000e46:	4904      	ldr	r1, [pc, #16]	; (8000e58 <dw_update_step_numbers+0x1c>)
 8000e48:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e4c:	f7ff fd2f 	bl	80008ae <Dwin_Write_VP>
	return 1;
 8000e50:	2301      	movs	r3, #1
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000f58 	.word	0x20000f58

08000e5c <dw_update_steper_positon>:

int dw_update_steper_positon(void){
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	static uint32_t time_tmp =0;
	if( (HAL_GetTick() > time_tmp)&&((x_motor.old_pos != x_motor.current_pos) || (z_motor.old_pos != z_motor.current_pos)))
 8000e62:	f001 fdb3 	bl	80029cc <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	4b21      	ldr	r3, [pc, #132]	; (8000ef0 <dw_update_steper_positon+0x94>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d93a      	bls.n	8000ee6 <dw_update_steper_positon+0x8a>
 8000e70:	4b20      	ldr	r3, [pc, #128]	; (8000ef4 <dw_update_steper_positon+0x98>)
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <dw_update_steper_positon+0x98>)
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d105      	bne.n	8000e88 <dw_update_steper_positon+0x2c>
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ef8 <dw_update_steper_positon+0x9c>)
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	4b1d      	ldr	r3, [pc, #116]	; (8000ef8 <dw_update_steper_positon+0x9c>)
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	429a      	cmp	r2, r3
 8000e86:	d02e      	beq.n	8000ee6 <dw_update_steper_positon+0x8a>
	{
		time_tmp = HAL_GetTick() +50;
 8000e88:	f001 fda0 	bl	80029cc <HAL_GetTick>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	3332      	adds	r3, #50	; 0x32
 8000e90:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <dw_update_steper_positon+0x94>)
 8000e92:	6013      	str	r3, [r2, #0]
		x_motor.old_pos = x_motor.current_pos;
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <dw_update_steper_positon+0x98>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <dw_update_steper_positon+0x98>)
 8000e9a:	6053      	str	r3, [r2, #4]
		z_motor.old_pos = z_motor.current_pos;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <dw_update_steper_positon+0x9c>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	4a15      	ldr	r2, [pc, #84]	; (8000ef8 <dw_update_steper_positon+0x9c>)
 8000ea2:	6053      	str	r3, [r2, #4]
		uint16_t data[4];
		data[0] = x_motor.current_pos/65535;
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <dw_update_steper_positon+0x98>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4a14      	ldr	r2, [pc, #80]	; (8000efc <dw_update_steper_positon+0xa0>)
 8000eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000eae:	0bdb      	lsrs	r3, r3, #15
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	803b      	strh	r3, [r7, #0]
		data[1] = x_motor.current_pos;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <dw_update_steper_positon+0x98>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	807b      	strh	r3, [r7, #2]
		data[2] = z_motor.current_pos/65535;
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <dw_update_steper_positon+0x9c>)
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <dw_update_steper_positon+0xa0>)
 8000ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec6:	0bdb      	lsrs	r3, r3, #15
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	80bb      	strh	r3, [r7, #4]
		data[3] = z_motor.current_pos;
 8000ecc:	4b0a      	ldr	r3, [pc, #40]	; (8000ef8 <dw_update_steper_positon+0x9c>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	80fb      	strh	r3, [r7, #6]
		Dwin_Write_VP(VP_X_STEP_MOTOR,data,4);
 8000ed4:	463b      	mov	r3, r7
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f44f 5008 	mov.w	r0, #8704	; 0x2200
 8000ede:	f7ff fce6 	bl	80008ae <Dwin_Write_VP>
		return 1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e000      	b.n	8000ee8 <dw_update_steper_positon+0x8c>
	}
	return 0;
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20001188 	.word	0x20001188
 8000ef4:	20001508 	.word	0x20001508
 8000ef8:	20001538 	.word	0x20001538
 8000efc:	80008001 	.word	0x80008001

08000f00 <write_flash>:
 * @param data Pointer to the data to be written
 * @param size Size of the data to be written, in bytes
 * @param address Memory address where the data will be written
 * @return HAL status
 */
HAL_StatusTypeDef write_flash(uint8_t* data, uint32_t size, uint32_t address) {
 8000f00:	b5b0      	push	{r4, r5, r7, lr}
 8000f02:	b086      	sub	sp, #24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	75fb      	strb	r3, [r7, #23]
    // Unlock flash
    HAL_FLASH_Unlock();
 8000f10:	f002 faf4 	bl	80034fc <HAL_FLASH_Unlock>

    // Erase sector
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <write_flash+0x78>)
 8000f16:	22b3      	movs	r2, #179	; 0xb3
 8000f18:	60da      	str	r2, [r3, #12]
	FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 8000f1a:	2102      	movs	r1, #2
 8000f1c:	2007      	movs	r0, #7
 8000f1e:	f002 fc4f 	bl	80037c0 <FLASH_Erase_Sector>

    if (status == HAL_OK) {
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d120      	bne.n	8000f6a <write_flash+0x6a>
        // Write data
        for (uint32_t i = 0; i < size; i++) {
 8000f28:	2300      	movs	r3, #0
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	e017      	b.n	8000f5e <write_flash+0x5e>
            status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address + i, data[i]);
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	18d1      	adds	r1, r2, r3
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	4413      	add	r3, r2
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	2200      	movs	r2, #0
 8000f40:	461c      	mov	r4, r3
 8000f42:	4615      	mov	r5, r2
 8000f44:	4622      	mov	r2, r4
 8000f46:	462b      	mov	r3, r5
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f002 fa83 	bl	8003454 <HAL_FLASH_Program>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d107      	bne.n	8000f68 <write_flash+0x68>
        for (uint32_t i = 0; i < size; i++) {
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	3301      	adds	r3, #1
 8000f5c:	613b      	str	r3, [r7, #16]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	429a      	cmp	r2, r3
 8000f64:	d3e3      	bcc.n	8000f2e <write_flash+0x2e>
 8000f66:	e000      	b.n	8000f6a <write_flash+0x6a>
                break;
 8000f68:	bf00      	nop
            }
        }
    }

    // Lock flash
    HAL_FLASH_Lock();
 8000f6a:	f002 fae9 	bl	8003540 <HAL_FLASH_Lock>

    return status;
 8000f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3718      	adds	r7, #24
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bdb0      	pop	{r4, r5, r7, pc}
 8000f78:	40023c00 	.word	0x40023c00

08000f7c <read_flash>:
 * @brief Reads data from flash memory
 * @param data Pointer to the buffer where the data will be stored
 * @param size Size of the data to be read, in bytes
 * @param address Memory address where the data will be read from
 */
void read_flash(uint8_t* data, uint32_t size, uint32_t address) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < size; i++) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e00b      	b.n	8000fa6 <read_flash+0x2a>
        data[i] = *((uint8_t*)(address + i));
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	4413      	add	r3, r2
 8000f94:	4619      	mov	r1, r3
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	780a      	ldrb	r2, [r1, #0]
 8000f9e:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	697a      	ldr	r2, [r7, #20]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d3ef      	bcc.n	8000f8e <read_flash+0x12>
    }
}
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	371c      	adds	r7, #28
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
	__NOP();
 8000fc8:	bf00      	nop
	return len;
 8000fca:	687b      	ldr	r3, [r7, #4]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fdc:	f001 fc90 	bl	8002900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fe0:	f000 f8a0 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe4:	f000 fbc8 	bl	8001778 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe8:	f000 fb88 	bl	80016fc <MX_DMA_Init>
  MX_I2C1_Init();
 8000fec:	f000 f904 	bl	80011f8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000ff0:	f000 f930 	bl	8001254 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000ff4:	f000 fb58 	bl	80016a8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000ff8:	f00a febc 	bl	800bd74 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000ffc:	f000 f960 	bl	80012c0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001000:	f000 fa4e 	bl	80014a0 <MX_TIM3_Init>
  MX_TIM8_Init();
 8001004:	f000 fb14 	bl	8001630 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001008:	f000 f9fc 	bl	8001404 <MX_TIM2_Init>
  MX_TIM5_Init();
 800100c:	f000 fac0 	bl	8001590 <MX_TIM5_Init>
//  HAL_FLASH_Unlock();
//  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
//  FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
//  HAL_FLASH_Program(TYPEPROGRAM_WORD,0x08060000, 0x11223344);
//  HAL_FLASH_Lock();
  Dwin_init();
 8001010:	f7ff fcba 	bl	8000988 <Dwin_init>
  dt_system_data_init();
 8001014:	f7ff fb78 	bl	8000708 <dt_system_data_init>
  uart_dma_start();
 8001018:	f001 fbd2 	bl	80027c0 <uart_dma_start>
  dw_update_step_numbers();
 800101c:	f7ff ff0e 	bl	8000e3c <dw_update_step_numbers>
//  HAL_TIM_Base_Start(&htim3);
  x_step_mt_int();
 8001020:	f000 fd60 	bl	8001ae4 <x_step_mt_int>
  z_step_mt_int();
 8001024:	f000 fee2 	bl	8001dec <z_step_mt_int>
  mt_move_to_home(&x_motor);
 8001028:	4837      	ldr	r0, [pc, #220]	; (8001108 <main+0x130>)
 800102a:	f000 fcec 	bl	8001a06 <mt_move_to_home>
  mt_move_to_home(&z_motor);
 800102e:	4837      	ldr	r0, [pc, #220]	; (800110c <main+0x134>)
 8001030:	f000 fce9 	bl	8001a06 <mt_move_to_home>
  while(1){  // home Z
	  z_step_motor_process();
 8001034:	f000 ff2c 	bl	8001e90 <z_step_motor_process>
	  dw_update_steper_positon();
 8001038:	f7ff ff10 	bl	8000e5c <dw_update_steper_positon>
	  if(z_motor.is_home)
 800103c:	4b33      	ldr	r3, [pc, #204]	; (800110c <main+0x134>)
 800103e:	7cdb      	ldrb	r3, [r3, #19]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f7      	beq.n	8001034 <main+0x5c>
		  break;
  }
  while(1){  // home Z
	  x_step_motor_process();
 8001044:	f000 fe1a 	bl	8001c7c <x_step_motor_process>
	  dw_update_steper_positon();
 8001048:	f7ff ff08 	bl	8000e5c <dw_update_steper_positon>
	  dw_update_steper_positon();
 800104c:	f7ff ff06 	bl	8000e5c <dw_update_steper_positon>
	  if(x_motor.is_home)
 8001050:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <main+0x130>)
 8001052:	7cdb      	ldrb	r3, [r3, #19]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d0f5      	beq.n	8001044 <main+0x6c>
//			char tmp[100];
//			sprintf(tmp,"CURRENT_TIME :%d",cnt ++);
//			s_log_add_1_line(tmp);
//		   ti = HAL_GetTick() +500;
//	  }
	  uart_process();
 8001058:	f001 fbca 	bl	80027f0 <uart_process>
	  x_step_motor_process();
 800105c:	f000 fe0e 	bl	8001c7c <x_step_motor_process>
	  dw_update_steper_positon();
 8001060:	f7ff fefc 	bl	8000e5c <dw_update_steper_positon>
	  z_step_motor_process();
 8001064:	f000 ff14 	bl	8001e90 <z_step_motor_process>
	  dw_update_steper_positon();
 8001068:	f7ff fef8 	bl	8000e5c <dw_update_steper_positon>
	  switch (usercommand) {
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <main+0x138>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	3b01      	subs	r3, #1
 8001072:	2b04      	cmp	r3, #4
 8001074:	d846      	bhi.n	8001104 <main+0x12c>
 8001076:	a201      	add	r2, pc, #4	; (adr r2, 800107c <main+0xa4>)
 8001078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107c:	080010b3 	.word	0x080010b3
 8001080:	080010c3 	.word	0x080010c3
 8001084:	080010d3 	.word	0x080010d3
 8001088:	080010e3 	.word	0x080010e3
 800108c:	080010f5 	.word	0x080010f5
		case 1:
			while(times)
			{
				HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001090:	2100      	movs	r1, #0
 8001092:	4820      	ldr	r0, [pc, #128]	; (8001114 <main+0x13c>)
 8001094:	f004 ffb8 	bl	8006008 <HAL_TIM_PWM_Start>
				HAL_Delay(200);
 8001098:	20c8      	movs	r0, #200	; 0xc8
 800109a:	f001 fca3 	bl	80029e4 <HAL_Delay>
				HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800109e:	2100      	movs	r1, #0
 80010a0:	481c      	ldr	r0, [pc, #112]	; (8001114 <main+0x13c>)
 80010a2:	f005 f879 	bl	8006198 <HAL_TIM_PWM_Stop>
				times --;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <main+0x140>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <main+0x140>)
 80010b0:	701a      	strb	r2, [r3, #0]
			while(times)
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <main+0x140>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1ea      	bne.n	8001090 <main+0xb8>
			}
			usercommand = 0;
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <main+0x138>)
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
			break;
 80010c0:	e021      	b.n	8001106 <main+0x12e>
		case 2:
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010c2:	2100      	movs	r1, #0
 80010c4:	4815      	ldr	r0, [pc, #84]	; (800111c <main+0x144>)
 80010c6:	f004 ff9f 	bl	8006008 <HAL_TIM_PWM_Start>
			usercommand = 0;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <main+0x138>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	701a      	strb	r2, [r3, #0]
			break;
 80010d0:	e019      	b.n	8001106 <main+0x12e>
		case 3:
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80010d2:	2100      	movs	r1, #0
 80010d4:	4811      	ldr	r0, [pc, #68]	; (800111c <main+0x144>)
 80010d6:	f005 f85f 	bl	8006198 <HAL_TIM_PWM_Stop>
			usercommand = 0;
 80010da:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <main+0x138>)
 80010dc:	2200      	movs	r2, #0
 80010de:	701a      	strb	r2, [r3, #0]
			break;
 80010e0:	e011      	b.n	8001106 <main+0x12e>
		case 4:
			HAL_GPIO_TogglePin(Z_MOTOR_EN_GPIO_Port, Z_MOTOR_EN_Pin);
 80010e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e6:	480e      	ldr	r0, [pc, #56]	; (8001120 <main+0x148>)
 80010e8:	f002 fd7f 	bl	8003bea <HAL_GPIO_TogglePin>
			usercommand = 0;
 80010ec:	4b08      	ldr	r3, [pc, #32]	; (8001110 <main+0x138>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
			break;
 80010f2:	e008      	b.n	8001106 <main+0x12e>
		case 5:
			HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80010f4:	2100      	movs	r1, #0
 80010f6:	4807      	ldr	r0, [pc, #28]	; (8001114 <main+0x13c>)
 80010f8:	f005 f8be 	bl	8006278 <HAL_TIM_PWM_Stop_IT>
			usercommand = 0;
 80010fc:	4b04      	ldr	r3, [pc, #16]	; (8001110 <main+0x138>)
 80010fe:	2200      	movs	r2, #0
 8001100:	701a      	strb	r2, [r3, #0]
			break;
 8001102:	e000      	b.n	8001106 <main+0x12e>
		default:
			break;
 8001104:	bf00      	nop
	  uart_process();
 8001106:	e7a7      	b.n	8001058 <main+0x80>
 8001108:	20001508 	.word	0x20001508
 800110c:	20001538 	.word	0x20001538
 8001110:	20001504 	.word	0x20001504
 8001114:	20001238 	.word	0x20001238
 8001118:	20001505 	.word	0x20001505
 800111c:	200012c8 	.word	0x200012c8
 8001120:	40020800 	.word	0x40020800

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	; 0x50
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 0320 	add.w	r3, r7, #32
 800112e:	2230      	movs	r2, #48	; 0x30
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f00b fb68 	bl	800c808 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 030c 	add.w	r3, r7, #12
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <SystemClock_Config+0xcc>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a27      	ldr	r2, [pc, #156]	; (80011f0 <SystemClock_Config+0xcc>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b25      	ldr	r3, [pc, #148]	; (80011f0 <SystemClock_Config+0xcc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001164:	2300      	movs	r3, #0
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <SystemClock_Config+0xd0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <SystemClock_Config+0xd0>)
 800116e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001172:	6013      	str	r3, [r2, #0]
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <SystemClock_Config+0xd0>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001180:	2301      	movs	r3, #1
 8001182:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001184:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001188:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118a:	2302      	movs	r3, #2
 800118c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001192:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001194:	2304      	movs	r3, #4
 8001196:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001198:	23a8      	movs	r3, #168	; 0xa8
 800119a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800119c:	2302      	movs	r3, #2
 800119e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011a0:	2307      	movs	r3, #7
 80011a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 f8fb 	bl	80053a4 <HAL_RCC_OscConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011b4:	f000 fc22 	bl	80019fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b8:	230f      	movs	r3, #15
 80011ba:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011bc:	2302      	movs	r3, #2
 80011be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011c4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011c8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80011ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011ce:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	2105      	movs	r1, #5
 80011d6:	4618      	mov	r0, r3
 80011d8:	f004 fb5c 	bl	8005894 <HAL_RCC_ClockConfig>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011e2:	f000 fc0b 	bl	80019fc <Error_Handler>
  }
}
 80011e6:	bf00      	nop
 80011e8:	3750      	adds	r7, #80	; 0x50
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800
 80011f4:	40007000 	.word	0x40007000

080011f8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011fc:	4b12      	ldr	r3, [pc, #72]	; (8001248 <MX_I2C1_Init+0x50>)
 80011fe:	4a13      	ldr	r2, [pc, #76]	; (800124c <MX_I2C1_Init+0x54>)
 8001200:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001202:	4b11      	ldr	r3, [pc, #68]	; (8001248 <MX_I2C1_Init+0x50>)
 8001204:	4a12      	ldr	r2, [pc, #72]	; (8001250 <MX_I2C1_Init+0x58>)
 8001206:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800120e:	4b0e      	ldr	r3, [pc, #56]	; (8001248 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001214:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <MX_I2C1_Init+0x50>)
 8001216:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <MX_I2C1_Init+0x50>)
 800121e:	2200      	movs	r2, #0
 8001220:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <MX_I2C1_Init+0x50>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <MX_I2C1_Init+0x50>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <MX_I2C1_Init+0x50>)
 8001230:	2200      	movs	r2, #0
 8001232:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001234:	4804      	ldr	r0, [pc, #16]	; (8001248 <MX_I2C1_Init+0x50>)
 8001236:	f002 fcf3 	bl	8003c20 <HAL_I2C_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001240:	f000 fbdc 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	2000118c 	.word	0x2000118c
 800124c:	40005400 	.word	0x40005400
 8001250:	000186a0 	.word	0x000186a0

08001254 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_SPI1_Init+0x64>)
 800125a:	4a18      	ldr	r2, [pc, #96]	; (80012bc <MX_SPI1_Init+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_SPI1_Init+0x64>)
 8001260:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001264:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_SPI1_Init+0x64>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <MX_SPI1_Init+0x64>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001272:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_SPI1_Init+0x64>)
 8001274:	2200      	movs	r2, #0
 8001276:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_SPI1_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_SPI1_Init+0x64>)
 8001280:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001284:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_SPI1_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <MX_SPI1_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_SPI1_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <MX_SPI1_Init+0x64>)
 800129a:	2200      	movs	r2, #0
 800129c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800129e:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_SPI1_Init+0x64>)
 80012a0:	220a      	movs	r2, #10
 80012a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012a4:	4804      	ldr	r0, [pc, #16]	; (80012b8 <MX_SPI1_Init+0x64>)
 80012a6:	f004 fd15 	bl	8005cd4 <HAL_SPI_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012b0:	f000 fba4 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200011e0 	.word	0x200011e0
 80012bc:	40013000 	.word	0x40013000

080012c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b096      	sub	sp, #88	; 0x58
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012ca:	2200      	movs	r2, #0
 80012cc:	601a      	str	r2, [r3, #0]
 80012ce:	605a      	str	r2, [r3, #4]
 80012d0:	609a      	str	r2, [r3, #8]
 80012d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
 80012ec:	611a      	str	r2, [r3, #16]
 80012ee:	615a      	str	r2, [r3, #20]
 80012f0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012f2:	1d3b      	adds	r3, r7, #4
 80012f4:	2220      	movs	r2, #32
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f00b fa85 	bl	800c808 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012fe:	4b3f      	ldr	r3, [pc, #252]	; (80013fc <MX_TIM1_Init+0x13c>)
 8001300:	4a3f      	ldr	r2, [pc, #252]	; (8001400 <MX_TIM1_Init+0x140>)
 8001302:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8001304:	4b3d      	ldr	r3, [pc, #244]	; (80013fc <MX_TIM1_Init+0x13c>)
 8001306:	2214      	movs	r2, #20
 8001308:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130a:	4b3c      	ldr	r3, [pc, #240]	; (80013fc <MX_TIM1_Init+0x13c>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001310:	4b3a      	ldr	r3, [pc, #232]	; (80013fc <MX_TIM1_Init+0x13c>)
 8001312:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001316:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001318:	4b38      	ldr	r3, [pc, #224]	; (80013fc <MX_TIM1_Init+0x13c>)
 800131a:	2200      	movs	r2, #0
 800131c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 199;
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <MX_TIM1_Init+0x13c>)
 8001320:	22c7      	movs	r2, #199	; 0xc7
 8001322:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001324:	4b35      	ldr	r3, [pc, #212]	; (80013fc <MX_TIM1_Init+0x13c>)
 8001326:	2200      	movs	r2, #0
 8001328:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800132a:	4834      	ldr	r0, [pc, #208]	; (80013fc <MX_TIM1_Init+0x13c>)
 800132c:	f004 fd5b 	bl	8005de6 <HAL_TIM_Base_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001336:	f000 fb61 	bl	80019fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800133a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800133e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001340:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001344:	4619      	mov	r1, r3
 8001346:	482d      	ldr	r0, [pc, #180]	; (80013fc <MX_TIM1_Init+0x13c>)
 8001348:	f005 f966 	bl	8006618 <HAL_TIM_ConfigClockSource>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001352:	f000 fb53 	bl	80019fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001356:	4829      	ldr	r0, [pc, #164]	; (80013fc <MX_TIM1_Init+0x13c>)
 8001358:	f004 fdfc 	bl	8005f54 <HAL_TIM_PWM_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001362:	f000 fb4b 	bl	80019fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001366:	2340      	movs	r3, #64	; 0x40
 8001368:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800136e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001372:	4619      	mov	r1, r3
 8001374:	4821      	ldr	r0, [pc, #132]	; (80013fc <MX_TIM1_Init+0x13c>)
 8001376:	f005 fdf9 	bl	8006f6c <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001380:	f000 fb3c 	bl	80019fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001384:	2360      	movs	r3, #96	; 0x60
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8001388:	f240 13f3 	movw	r3, #499	; 0x1f3
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001396:	2300      	movs	r3, #0
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800139e:	2300      	movs	r3, #0
 80013a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a6:	2200      	movs	r2, #0
 80013a8:	4619      	mov	r1, r3
 80013aa:	4814      	ldr	r0, [pc, #80]	; (80013fc <MX_TIM1_Init+0x13c>)
 80013ac:	f005 f872 	bl	8006494 <HAL_TIM_PWM_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80013b6:	f000 fb21 	bl	80019fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013d2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013d8:	1d3b      	adds	r3, r7, #4
 80013da:	4619      	mov	r1, r3
 80013dc:	4807      	ldr	r0, [pc, #28]	; (80013fc <MX_TIM1_Init+0x13c>)
 80013de:	f005 fe41 	bl	8007064 <HAL_TIMEx_ConfigBreakDeadTime>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80013e8:	f000 fb08 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013ec:	4803      	ldr	r0, [pc, #12]	; (80013fc <MX_TIM1_Init+0x13c>)
 80013ee:	f000 ff19 	bl	8002224 <HAL_TIM_MspPostInit>

}
 80013f2:	bf00      	nop
 80013f4:	3758      	adds	r7, #88	; 0x58
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20001238 	.word	0x20001238
 8001400:	40010000 	.word	0x40010000

08001404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141a:	1d3b      	adds	r3, r7, #4
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001422:	4b1e      	ldr	r3, [pc, #120]	; (800149c <MX_TIM2_Init+0x98>)
 8001424:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001428:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <MX_TIM2_Init+0x98>)
 800142c:	2200      	movs	r2, #0
 800142e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <MX_TIM2_Init+0x98>)
 8001432:	2200      	movs	r2, #0
 8001434:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001436:	4b19      	ldr	r3, [pc, #100]	; (800149c <MX_TIM2_Init+0x98>)
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <MX_TIM2_Init+0x98>)
 8001440:	2200      	movs	r2, #0
 8001442:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001444:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_TIM2_Init+0x98>)
 8001446:	2200      	movs	r2, #0
 8001448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800144a:	4814      	ldr	r0, [pc, #80]	; (800149c <MX_TIM2_Init+0x98>)
 800144c:	f004 fccb 	bl	8005de6 <HAL_TIM_Base_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001456:	f000 fad1 	bl	80019fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800145a:	2307      	movs	r3, #7
 800145c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800145e:	2300      	movs	r3, #0
 8001460:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <MX_TIM2_Init+0x98>)
 800146a:	f005 f99c 	bl	80067a6 <HAL_TIM_SlaveConfigSynchro>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001474:	f000 fac2 	bl	80019fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	4619      	mov	r1, r3
 8001484:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_TIM2_Init+0x98>)
 8001486:	f005 fd71 	bl	8006f6c <HAL_TIMEx_MasterConfigSynchronization>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001490:	f000 fab4 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001494:	bf00      	nop
 8001496:	3720      	adds	r7, #32
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20001280 	.word	0x20001280

080014a0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b08e      	sub	sp, #56	; 0x38
 80014a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b4:	f107 0320 	add.w	r3, r7, #32
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
 80014cc:	615a      	str	r2, [r3, #20]
 80014ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014d0:	4b2d      	ldr	r3, [pc, #180]	; (8001588 <MX_TIM3_Init+0xe8>)
 80014d2:	4a2e      	ldr	r2, [pc, #184]	; (800158c <MX_TIM3_Init+0xec>)
 80014d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 80014d6:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <MX_TIM3_Init+0xe8>)
 80014d8:	2214      	movs	r2, #20
 80014da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014dc:	4b2a      	ldr	r3, [pc, #168]	; (8001588 <MX_TIM3_Init+0xe8>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80014e2:	4b29      	ldr	r3, [pc, #164]	; (8001588 <MX_TIM3_Init+0xe8>)
 80014e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <MX_TIM3_Init+0xe8>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <MX_TIM3_Init+0xe8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014f6:	4824      	ldr	r0, [pc, #144]	; (8001588 <MX_TIM3_Init+0xe8>)
 80014f8:	f004 fc75 	bl	8005de6 <HAL_TIM_Base_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001502:	f000 fa7b 	bl	80019fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800150c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001510:	4619      	mov	r1, r3
 8001512:	481d      	ldr	r0, [pc, #116]	; (8001588 <MX_TIM3_Init+0xe8>)
 8001514:	f005 f880 	bl	8006618 <HAL_TIM_ConfigClockSource>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800151e:	f000 fa6d 	bl	80019fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001522:	4819      	ldr	r0, [pc, #100]	; (8001588 <MX_TIM3_Init+0xe8>)
 8001524:	f004 fd16 	bl	8005f54 <HAL_TIM_PWM_Init>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800152e:	f000 fa65 	bl	80019fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001532:	2340      	movs	r3, #64	; 0x40
 8001534:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800153a:	f107 0320 	add.w	r3, r7, #32
 800153e:	4619      	mov	r1, r3
 8001540:	4811      	ldr	r0, [pc, #68]	; (8001588 <MX_TIM3_Init+0xe8>)
 8001542:	f005 fd13 	bl	8006f6c <HAL_TIMEx_MasterConfigSynchronization>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800154c:	f000 fa56 	bl	80019fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001550:	2360      	movs	r3, #96	; 0x60
 8001552:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8001554:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001558:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155a:	2300      	movs	r3, #0
 800155c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	; (8001588 <MX_TIM3_Init+0xe8>)
 800156a:	f004 ff93 	bl	8006494 <HAL_TIM_PWM_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001574:	f000 fa42 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001578:	4803      	ldr	r0, [pc, #12]	; (8001588 <MX_TIM3_Init+0xe8>)
 800157a:	f000 fe53 	bl	8002224 <HAL_TIM_MspPostInit>

}
 800157e:	bf00      	nop
 8001580:	3738      	adds	r7, #56	; 0x38
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200012c8 	.word	0x200012c8
 800158c:	40000400 	.word	0x40000400

08001590 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b088      	sub	sp, #32
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
 80015a2:	60da      	str	r2, [r3, #12]
 80015a4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015ae:	4b1e      	ldr	r3, [pc, #120]	; (8001628 <MX_TIM5_Init+0x98>)
 80015b0:	4a1e      	ldr	r2, [pc, #120]	; (800162c <MX_TIM5_Init+0x9c>)
 80015b2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015b4:	4b1c      	ldr	r3, [pc, #112]	; (8001628 <MX_TIM5_Init+0x98>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ba:	4b1b      	ldr	r3, [pc, #108]	; (8001628 <MX_TIM5_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <MX_TIM5_Init+0x98>)
 80015c2:	f04f 32ff 	mov.w	r2, #4294967295
 80015c6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <MX_TIM5_Init+0x98>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <MX_TIM5_Init+0x98>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015d4:	4814      	ldr	r0, [pc, #80]	; (8001628 <MX_TIM5_Init+0x98>)
 80015d6:	f004 fc06 	bl	8005de6 <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80015e0:	f000 fa0c 	bl	80019fc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80015e4:	2307      	movs	r3, #7
 80015e6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80015e8:	2310      	movs	r3, #16
 80015ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	480d      	ldr	r0, [pc, #52]	; (8001628 <MX_TIM5_Init+0x98>)
 80015f4:	f005 f8d7 	bl	80067a6 <HAL_TIM_SlaveConfigSynchro>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80015fe:	f000 f9fd 	bl	80019fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	; (8001628 <MX_TIM5_Init+0x98>)
 8001610:	f005 fcac 	bl	8006f6c <HAL_TIMEx_MasterConfigSynchronization>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800161a:	f000 f9ef 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800161e:	bf00      	nop
 8001620:	3720      	adds	r7, #32
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20001310 	.word	0x20001310
 800162c:	40000c00 	.word	0x40000c00

08001630 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <MX_TIM8_Init+0x70>)
 8001640:	4a18      	ldr	r2, [pc, #96]	; (80016a4 <MX_TIM8_Init+0x74>)
 8001642:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <MX_TIM8_Init+0x70>)
 8001646:	2200      	movs	r2, #0
 8001648:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_TIM8_Init+0x70>)
 800164c:	2200      	movs	r2, #0
 800164e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001650:	4b13      	ldr	r3, [pc, #76]	; (80016a0 <MX_TIM8_Init+0x70>)
 8001652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001656:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <MX_TIM8_Init+0x70>)
 800165a:	2200      	movs	r2, #0
 800165c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800165e:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <MX_TIM8_Init+0x70>)
 8001660:	2200      	movs	r2, #0
 8001662:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <MX_TIM8_Init+0x70>)
 8001666:	2200      	movs	r2, #0
 8001668:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 800166a:	2108      	movs	r1, #8
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_TIM8_Init+0x70>)
 800166e:	f004 fec1 	bl	80063f4 <HAL_TIM_OnePulse_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_TIM8_Init+0x4c>
  {
    Error_Handler();
 8001678:	f000 f9c0 	bl	80019fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001680:	2300      	movs	r3, #0
 8001682:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001684:	463b      	mov	r3, r7
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	; (80016a0 <MX_TIM8_Init+0x70>)
 800168a:	f005 fc6f 	bl	8006f6c <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8001694:	f000 f9b2 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20001358 	.word	0x20001358
 80016a4:	40010400 	.word	0x40010400

080016a8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016ae:	4a12      	ldr	r2, [pc, #72]	; (80016f8 <MX_USART2_UART_Init+0x50>)
 80016b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016b2:	4b10      	ldr	r3, [pc, #64]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016cc:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016de:	4805      	ldr	r0, [pc, #20]	; (80016f4 <MX_USART2_UART_Init+0x4c>)
 80016e0:	f005 fd12 	bl	8007108 <HAL_UART_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ea:	f000 f987 	bl	80019fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20001400 	.word	0x20001400
 80016f8:	40004400 	.word	0x40004400

080016fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	607b      	str	r3, [r7, #4]
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <MX_DMA_Init+0x78>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	4a1a      	ldr	r2, [pc, #104]	; (8001774 <MX_DMA_Init+0x78>)
 800170c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001710:	6313      	str	r3, [r2, #48]	; 0x30
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <MX_DMA_Init+0x78>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_DMA_Init+0x78>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <MX_DMA_Init+0x78>)
 8001728:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_DMA_Init+0x78>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001736:	603b      	str	r3, [r7, #0]
 8001738:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	2010      	movs	r0, #16
 8001740:	f001 fa4f 	bl	8002be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001744:	2010      	movs	r0, #16
 8001746:	f001 fa68 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2011      	movs	r0, #17
 8001750:	f001 fa47 	bl	8002be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001754:	2011      	movs	r0, #17
 8001756:	f001 fa60 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2039      	movs	r0, #57	; 0x39
 8001760:	f001 fa3f 	bl	8002be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001764:	2039      	movs	r0, #57	; 0x39
 8001766:	f001 fa58 	bl	8002c1a <HAL_NVIC_EnableIRQ>

}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	61bb      	str	r3, [r7, #24]
 8001792:	4b94      	ldr	r3, [pc, #592]	; (80019e4 <MX_GPIO_Init+0x26c>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a93      	ldr	r2, [pc, #588]	; (80019e4 <MX_GPIO_Init+0x26c>)
 8001798:	f043 0310 	orr.w	r3, r3, #16
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b91      	ldr	r3, [pc, #580]	; (80019e4 <MX_GPIO_Init+0x26c>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0310 	and.w	r3, r3, #16
 80017a6:	61bb      	str	r3, [r7, #24]
 80017a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	4b8d      	ldr	r3, [pc, #564]	; (80019e4 <MX_GPIO_Init+0x26c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a8c      	ldr	r2, [pc, #560]	; (80019e4 <MX_GPIO_Init+0x26c>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b8a      	ldr	r3, [pc, #552]	; (80019e4 <MX_GPIO_Init+0x26c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
 80017ca:	4b86      	ldr	r3, [pc, #536]	; (80019e4 <MX_GPIO_Init+0x26c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a85      	ldr	r2, [pc, #532]	; (80019e4 <MX_GPIO_Init+0x26c>)
 80017d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b83      	ldr	r3, [pc, #524]	; (80019e4 <MX_GPIO_Init+0x26c>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017de:	613b      	str	r3, [r7, #16]
 80017e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	4b7f      	ldr	r3, [pc, #508]	; (80019e4 <MX_GPIO_Init+0x26c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a7e      	ldr	r2, [pc, #504]	; (80019e4 <MX_GPIO_Init+0x26c>)
 80017ec:	f043 0301 	orr.w	r3, r3, #1
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b7c      	ldr	r3, [pc, #496]	; (80019e4 <MX_GPIO_Init+0x26c>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0301 	and.w	r3, r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	4b78      	ldr	r3, [pc, #480]	; (80019e4 <MX_GPIO_Init+0x26c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4a77      	ldr	r2, [pc, #476]	; (80019e4 <MX_GPIO_Init+0x26c>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4b75      	ldr	r3, [pc, #468]	; (80019e4 <MX_GPIO_Init+0x26c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b71      	ldr	r3, [pc, #452]	; (80019e4 <MX_GPIO_Init+0x26c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a70      	ldr	r2, [pc, #448]	; (80019e4 <MX_GPIO_Init+0x26c>)
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b6e      	ldr	r3, [pc, #440]	; (80019e4 <MX_GPIO_Init+0x26c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|X_MOTOR_DIR_Pin|X_MOTOR_EN_Pin, GPIO_PIN_RESET);
 8001836:	2200      	movs	r2, #0
 8001838:	f640 4108 	movw	r1, #3080	; 0xc08
 800183c:	486a      	ldr	r0, [pc, #424]	; (80019e8 <MX_GPIO_Init+0x270>)
 800183e:	f002 f9bb 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001842:	2201      	movs	r2, #1
 8001844:	2101      	movs	r1, #1
 8001846:	4869      	ldr	r0, [pc, #420]	; (80019ec <MX_GPIO_Init+0x274>)
 8001848:	f002 f9b6 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800184c:	2200      	movs	r2, #0
 800184e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001852:	4867      	ldr	r0, [pc, #412]	; (80019f0 <MX_GPIO_Init+0x278>)
 8001854:	f002 f9b0 	bl	8003bb8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Z_MOTOR_DIR_Pin|Z_MOTOR_EN_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800185e:	4863      	ldr	r0, [pc, #396]	; (80019ec <MX_GPIO_Init+0x274>)
 8001860:	f002 f9aa 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin X_MOTOR_DIR_Pin X_MOTOR_EN_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|X_MOTOR_DIR_Pin|X_MOTOR_EN_Pin;
 8001864:	f640 4308 	movw	r3, #3080	; 0xc08
 8001868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186a:	2301      	movs	r3, #1
 800186c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001872:	2300      	movs	r3, #0
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001876:	f107 031c 	add.w	r3, r7, #28
 800187a:	4619      	mov	r1, r3
 800187c:	485a      	ldr	r0, [pc, #360]	; (80019e8 <MX_GPIO_Init+0x270>)
 800187e:	f001 ffe7 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Z_MOTOR_DIR_Pin Z_MOTOR_EN_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Z_MOTOR_DIR_Pin|Z_MOTOR_EN_Pin;
 8001882:	f240 1381 	movw	r3, #385	; 0x181
 8001886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001888:	2301      	movs	r3, #1
 800188a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188c:	2300      	movs	r3, #0
 800188e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001890:	2300      	movs	r3, #0
 8001892:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	4619      	mov	r1, r3
 800189a:	4854      	ldr	r0, [pc, #336]	; (80019ec <MX_GPIO_Init+0x274>)
 800189c:	f001 ffd8 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80018a0:	2308      	movs	r3, #8
 80018a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b0:	2305      	movs	r3, #5
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f107 031c 	add.w	r3, r7, #28
 80018b8:	4619      	mov	r1, r3
 80018ba:	484c      	ldr	r0, [pc, #304]	; (80019ec <MX_GPIO_Init+0x274>)
 80018bc:	f001 ffc8 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018c0:	2301      	movs	r3, #1
 80018c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 031c 	add.w	r3, r7, #28
 80018d2:	4619      	mov	r1, r3
 80018d4:	4847      	ldr	r0, [pc, #284]	; (80019f4 <MX_GPIO_Init+0x27c>)
 80018d6:	f001 ffbb 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80018da:	2310      	movs	r3, #16
 80018dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018ea:	2306      	movs	r3, #6
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	483f      	ldr	r0, [pc, #252]	; (80019f4 <MX_GPIO_Init+0x27c>)
 80018f6:	f001 ffab 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018fa:	2304      	movs	r3, #4
 80018fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	4619      	mov	r1, r3
 800190c:	483a      	ldr	r0, [pc, #232]	; (80019f8 <MX_GPIO_Init+0x280>)
 800190e:	f001 ff9f 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_HOME_SWITCH_Pin */
  GPIO_InitStruct.Pin = X_HOME_SWITCH_Pin;
 8001912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001918:	2300      	movs	r3, #0
 800191a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800191c:	2301      	movs	r3, #1
 800191e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X_HOME_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	4830      	ldr	r0, [pc, #192]	; (80019e8 <MX_GPIO_Init+0x270>)
 8001928:	f001 ff92 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800192c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800193e:	2305      	movs	r3, #5
 8001940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	482b      	ldr	r0, [pc, #172]	; (80019f8 <MX_GPIO_Init+0x280>)
 800194a:	f001 ff81 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800194e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001952:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195c:	2300      	movs	r3, #0
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	4822      	ldr	r0, [pc, #136]	; (80019f0 <MX_GPIO_Init+0x278>)
 8001968:	f001 ff72 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_HOME_SWITCH_Pin */
  GPIO_InitStruct.Pin = Z_HOME_SWITCH_Pin;
 800196c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001976:	2301      	movs	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Z_HOME_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	481a      	ldr	r0, [pc, #104]	; (80019ec <MX_GPIO_Init+0x274>)
 8001982:	f001 ff65 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001986:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800198a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001998:	2306      	movs	r3, #6
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	4812      	ldr	r0, [pc, #72]	; (80019ec <MX_GPIO_Init+0x274>)
 80019a4:	f001 ff54 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019a8:	2320      	movs	r3, #32
 80019aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ac:	2300      	movs	r3, #0
 80019ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	480d      	ldr	r0, [pc, #52]	; (80019f0 <MX_GPIO_Init+0x278>)
 80019bc:	f001 ff48 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80019c0:	2302      	movs	r3, #2
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019c4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80019ce:	f107 031c 	add.w	r3, r7, #28
 80019d2:	4619      	mov	r1, r3
 80019d4:	4804      	ldr	r0, [pc, #16]	; (80019e8 <MX_GPIO_Init+0x270>)
 80019d6:	f001 ff3b 	bl	8003850 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019da:	bf00      	nop
 80019dc:	3730      	adds	r7, #48	; 0x30
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020c00 	.word	0x40020c00
 80019f4:	40020000 	.word	0x40020000
 80019f8:	40020400 	.word	0x40020400

080019fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a00:	b672      	cpsid	i
}
 8001a02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a04:	e7fe      	b.n	8001a04 <Error_Handler+0x8>

08001a06 <mt_move_to_home>:
extern TIM_HandleTypeDef htim5;

_motor_typedef x_motor;


void mt_move_to_home(_motor_typedef *motor){
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
	if(motor->command == CMD_IDLE){
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7d1b      	ldrb	r3, [r3, #20]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d102      	bne.n	8001a1c <mt_move_to_home+0x16>
		motor->command = CMD_REQUEST_HOME;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	751a      	strb	r2, [r3, #20]
	}
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <x_mt_set_dir>:

void mt_set_target_position(_motor_typedef *motor,uint32_t new_position){
	motor->next_pos == new_position;
}

void x_mt_set_dir(){
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	if(x_motor.current_pos < x_motor.next_pos){
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <x_mt_set_dir+0x5c>)
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <x_mt_set_dir+0x5c>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d211      	bcs.n	8001a5c <x_mt_set_dir+0x34>
		x_motor.current_dir = DIR_FORWARD;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <x_mt_set_dir+0x5c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_FORWARD);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a44:	4810      	ldr	r0, [pc, #64]	; (8001a88 <x_mt_set_dir+0x60>)
 8001a46:	f002 f8b7 	bl	8003bb8 <HAL_GPIO_WritePin>
		htim2.Instance->CR1 &= ~(1<<4);
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <x_mt_set_dir+0x64>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <x_mt_set_dir+0x64>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f022 0210 	bic.w	r2, r2, #16
 8001a58:	601a      	str	r2, [r3, #0]
		x_motor.current_dir = DIR_BACKWARD;
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_BACKWARD);
		htim2.Instance->CR1 |= (1<<4);
	}

}
 8001a5a:	e010      	b.n	8001a7e <x_mt_set_dir+0x56>
		x_motor.current_dir = DIR_BACKWARD;
 8001a5c:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <x_mt_set_dir+0x5c>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_BACKWARD);
 8001a62:	2201      	movs	r2, #1
 8001a64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a68:	4807      	ldr	r0, [pc, #28]	; (8001a88 <x_mt_set_dir+0x60>)
 8001a6a:	f002 f8a5 	bl	8003bb8 <HAL_GPIO_WritePin>
		htim2.Instance->CR1 |= (1<<4);
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <x_mt_set_dir+0x64>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <x_mt_set_dir+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f042 0210 	orr.w	r2, r2, #16
 8001a7c:	601a      	str	r2, [r3, #0]
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20001508 	.word	0x20001508
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	20001280 	.word	0x20001280

08001a90 <x_mt_start>:


void x_mt_start(){
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001a94:	2100      	movs	r1, #0
 8001a96:	4802      	ldr	r0, [pc, #8]	; (8001aa0 <x_mt_start+0x10>)
 8001a98:	f004 fab6 	bl	8006008 <HAL_TIM_PWM_Start>
}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20001238 	.word	0x20001238

08001aa4 <x_mt_stop>:




void x_mt_stop()
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	4802      	ldr	r0, [pc, #8]	; (8001ab4 <x_mt_stop+0x10>)
 8001aac:	f004 fb74 	bl	8006198 <HAL_TIM_PWM_Stop>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20001238 	.word	0x20001238

08001ab8 <x_set_current_position>:

void x_mt_move_to_pos(uint32_t pos){
	x_motor.next_pos = pos;
}

void x_set_current_position(uint32_t pos){
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	x_motor.current_pos = pos;
 8001ac0:	4a06      	ldr	r2, [pc, #24]	; (8001adc <x_set_current_position+0x24>)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6093      	str	r3, [r2, #8]
	htim2.Instance->CNT = pos;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <x_set_current_position+0x28>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20001508 	.word	0x20001508
 8001ae0:	20001280 	.word	0x20001280

08001ae4 <x_step_mt_int>:


void x_step_mt_int(void){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	x_motor.current_pos= x_motor.next_pos = htim2.Instance->CNT = 0;
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <x_step_mt_int+0x3c>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2300      	movs	r3, #0
 8001aee:	6253      	str	r3, [r2, #36]	; 0x24
 8001af0:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <x_step_mt_int+0x40>)
 8001af2:	60d3      	str	r3, [r2, #12]
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <x_step_mt_int+0x40>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	4a0a      	ldr	r2, [pc, #40]	; (8001b24 <x_step_mt_int+0x40>)
 8001afa:	6093      	str	r3, [r2, #8]
	x_motor.old_pos = x_motor.ud_time =0;
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <x_step_mt_int+0x40>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <x_step_mt_int+0x40>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a07      	ldr	r2, [pc, #28]	; (8001b24 <x_step_mt_int+0x40>)
 8001b08:	6053      	str	r3, [r2, #4]
	x_motor.home_achieve = 0;
 8001b0a:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <x_step_mt_int+0x40>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	749a      	strb	r2, [r3, #18]
	x_motor.set_current_position = x_set_current_position;
 8001b10:	4b04      	ldr	r3, [pc, #16]	; (8001b24 <x_step_mt_int+0x40>)
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <x_step_mt_int+0x44>)
 8001b14:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Start(&htim2);
 8001b16:	4802      	ldr	r0, [pc, #8]	; (8001b20 <x_step_mt_int+0x3c>)
 8001b18:	f004 f9b4 	bl	8005e84 <HAL_TIM_Base_Start>
}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20001280 	.word	0x20001280
 8001b24:	20001508 	.word	0x20001508
 8001b28:	08001ab9 	.word	0x08001ab9

08001b2c <step_mt_move_foward>:

void step_mt_move_foward(_motor_typedef *step,uint32_t numstep){
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
	step->next_pos +=numstep;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	441a      	add	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60da      	str	r2, [r3, #12]
	if(step->next_pos > 2000000000)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	4a06      	ldr	r2, [pc, #24]	; (8001b60 <step_mt_move_foward+0x34>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d902      	bls.n	8001b52 <step_mt_move_foward+0x26>
	{
		step->next_pos =2000000000;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a04      	ldr	r2, [pc, #16]	; (8001b60 <step_mt_move_foward+0x34>)
 8001b50:	60da      	str	r2, [r3, #12]
	}
}
 8001b52:	bf00      	nop
 8001b54:	370c      	adds	r7, #12
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	77359400 	.word	0x77359400

08001b64 <step_mt_move_backward>:

void step_mt_move_backward(_motor_typedef *step,uint32_t numstep){
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
	step->next_pos -=numstep;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	1ad2      	subs	r2, r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60da      	str	r2, [r3, #12]
	if(step->next_pos > 2000000000)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <step_mt_move_backward+0x34>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d902      	bls.n	8001b8a <step_mt_move_backward+0x26>
	{
		step->next_pos =0;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
	}
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	77359400 	.word	0x77359400

08001b9c <x_step_motor_home_position>:

void x_step_motor_home_position()
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(X_HOME_SWITCH_GPIO_Port, X_HOME_SWITCH_Pin) && (!x_motor.is_home))
 8001ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba4:	4812      	ldr	r0, [pc, #72]	; (8001bf0 <x_step_motor_home_position+0x54>)
 8001ba6:	f001 ffef 	bl	8003b88 <HAL_GPIO_ReadPin>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d115      	bne.n	8001bdc <x_step_motor_home_position+0x40>
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <x_step_motor_home_position+0x58>)
 8001bb2:	7cdb      	ldrb	r3, [r3, #19]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d111      	bne.n	8001bdc <x_step_motor_home_position+0x40>
	{
		x_motor.home_achieve = 1;
 8001bb8:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <x_step_motor_home_position+0x58>)
 8001bba:	2201      	movs	r2, #1
 8001bbc:	749a      	strb	r2, [r3, #18]
		x_motor.is_home = 1;
 8001bbe:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <x_step_motor_home_position+0x58>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	74da      	strb	r2, [r3, #19]
		x_mt_stop();
 8001bc4:	f7ff ff6e 	bl	8001aa4 <x_mt_stop>
		x_motor.current_dir = htim2.Instance->CNT =0;
 8001bc8:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <x_step_motor_home_position+0x5c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	625a      	str	r2, [r3, #36]	; 0x24
 8001bd0:	4b08      	ldr	r3, [pc, #32]	; (8001bf4 <x_step_motor_home_position+0x58>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	741a      	strb	r2, [r3, #16]
		x_motor.next_pos = 0;
 8001bd6:	4b07      	ldr	r3, [pc, #28]	; (8001bf4 <x_step_motor_home_position+0x58>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	60da      	str	r2, [r3, #12]
	}
	if(htim2.Instance->CNT)
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <x_step_motor_home_position+0x5c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d002      	beq.n	8001bec <x_step_motor_home_position+0x50>
	{
		x_motor.is_home = 0;
 8001be6:	4b03      	ldr	r3, [pc, #12]	; (8001bf4 <x_step_motor_home_position+0x58>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	74da      	strb	r2, [r3, #19]
	}
}
 8001bec:	bf00      	nop
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	20001508 	.word	0x20001508
 8001bf8:	20001280 	.word	0x20001280

08001bfc <home_process>:

void home_process(_motor_typedef *motor)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
	switch (motor->command) {
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	7d1b      	ldrb	r3, [r3, #20]
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d029      	beq.n	8001c60 <home_process+0x64>
 8001c0c:	2b03      	cmp	r3, #3
 8001c0e:	dc2b      	bgt.n	8001c68 <home_process+0x6c>
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d002      	beq.n	8001c1a <home_process+0x1e>
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d01b      	beq.n	8001c50 <home_process+0x54>
			break;
		case CMD_HOME_FINSH:
			motor->command = CMD_IDLE;
			break;
		default:
			break;
 8001c18:	e026      	b.n	8001c68 <home_process+0x6c>
			if(motor->home_achieve && (motor->current_pos == 0))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	7c9b      	ldrb	r3, [r3, #18]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <home_process+0x36>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d103      	bne.n	8001c32 <home_process+0x36>
				motor->command = CMD_HOME_FINSH;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2203      	movs	r2, #3
 8001c2e:	751a      	strb	r2, [r3, #20]
				break;
 8001c30:	e01d      	b.n	8001c6e <home_process+0x72>
			if(!motor->home_achieve)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	7c9b      	ldrb	r3, [r3, #18]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d103      	bne.n	8001c42 <home_process+0x46>
				motor->set_current_position(200000000);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	699b      	ldr	r3, [r3, #24]
 8001c3e:	480e      	ldr	r0, [pc, #56]	; (8001c78 <home_process+0x7c>)
 8001c40:	4798      	blx	r3
			motor ->next_pos = 0;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
			motor->command = CMD_WAIT_HOME;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	751a      	strb	r2, [r3, #20]
			break;
 8001c4e:	e00e      	b.n	8001c6e <home_process+0x72>
			if(motor->current_pos == 0)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d109      	bne.n	8001c6c <home_process+0x70>
				motor->command = CMD_HOME_FINSH;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	751a      	strb	r2, [r3, #20]
			break;
 8001c5e:	e005      	b.n	8001c6c <home_process+0x70>
			motor->command = CMD_IDLE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	751a      	strb	r2, [r3, #20]
			break;
 8001c66:	e002      	b.n	8001c6e <home_process+0x72>
			break;
 8001c68:	bf00      	nop
 8001c6a:	e000      	b.n	8001c6e <home_process+0x72>
			break;
 8001c6c:	bf00      	nop
	}
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	0bebc200 	.word	0x0bebc200

08001c7c <x_step_motor_process>:
void x_step_motor_process(void){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
	x_motor.current_pos = htim2.Instance->CNT;
 8001c80:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <x_step_motor_process+0xb0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c86:	4a2a      	ldr	r2, [pc, #168]	; (8001d30 <x_step_motor_process+0xb4>)
 8001c88:	6093      	str	r3, [r2, #8]
	x_step_motor_home_position();
 8001c8a:	f7ff ff87 	bl	8001b9c <x_step_motor_home_position>
	home_process(&x_motor);
 8001c8e:	4828      	ldr	r0, [pc, #160]	; (8001d30 <x_step_motor_process+0xb4>)
 8001c90:	f7ff ffb4 	bl	8001bfc <home_process>
	switch (x_motor.state) {
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <x_step_motor_process+0xb4>)
 8001c96:	7c5b      	ldrb	r3, [r3, #17]
 8001c98:	2b03      	cmp	r3, #3
 8001c9a:	d83f      	bhi.n	8001d1c <x_step_motor_process+0xa0>
 8001c9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ca4 <x_step_motor_process+0x28>)
 8001c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca2:	bf00      	nop
 8001ca4:	08001cb5 	.word	0x08001cb5
 8001ca8:	08001cd1 	.word	0x08001cd1
 8001cac:	08001ce1 	.word	0x08001ce1
 8001cb0:	08001d11 	.word	0x08001d11
		case MT_STATE_IDLE:
			if(abs(x_motor.current_pos- x_motor.next_pos) > STEP_LOSS){
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <x_step_motor_process+0xb4>)
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	; (8001d30 <x_step_motor_process+0xb4>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	bfb8      	it	lt
 8001cc2:	425b      	neglt	r3, r3
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	dd2b      	ble.n	8001d20 <x_step_motor_process+0xa4>
				x_motor.state = MT_STATE_START;
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <x_step_motor_process+0xb4>)
 8001cca:	2201      	movs	r2, #1
 8001ccc:	745a      	strb	r2, [r3, #17]
			}
			break;
 8001cce:	e027      	b.n	8001d20 <x_step_motor_process+0xa4>
		case MT_STATE_START:
			x_mt_set_dir();
 8001cd0:	f7ff feaa 	bl	8001a28 <x_mt_set_dir>
			x_mt_start();
 8001cd4:	f7ff fedc 	bl	8001a90 <x_mt_start>
			x_motor.state = MT_STATE_RUNING;
 8001cd8:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <x_step_motor_process+0xb4>)
 8001cda:	2202      	movs	r2, #2
 8001cdc:	745a      	strb	r2, [r3, #17]
			break;
 8001cde:	e022      	b.n	8001d26 <x_step_motor_process+0xaa>
		case MT_STATE_RUNING:
			if(x_motor.current_dir == DIR_FORWARD){
 8001ce0:	4b13      	ldr	r3, [pc, #76]	; (8001d30 <x_step_motor_process+0xb4>)
 8001ce2:	7c1b      	ldrb	r3, [r3, #16]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <x_step_motor_process+0x80>
				if(x_motor.current_pos >= x_motor.next_pos){
 8001ce8:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <x_step_motor_process+0xb4>)
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <x_step_motor_process+0xb4>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d317      	bcc.n	8001d24 <x_step_motor_process+0xa8>
					x_motor.state = MT_STATE_STTOP;
 8001cf4:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <x_step_motor_process+0xb4>)
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	745a      	strb	r2, [r3, #17]
				}
			}
//			if(abs(x_motor.current_pos- x_motor.next_pos) < STEP_LOSS){
//							x_motor.state = MT_STATE_STTOP;
//			}
			break;
 8001cfa:	e013      	b.n	8001d24 <x_step_motor_process+0xa8>
				if(x_motor.current_pos <= x_motor.next_pos){
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <x_step_motor_process+0xb4>)
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <x_step_motor_process+0xb4>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d80d      	bhi.n	8001d24 <x_step_motor_process+0xa8>
					x_motor.state = MT_STATE_STTOP;
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <x_step_motor_process+0xb4>)
 8001d0a:	2203      	movs	r2, #3
 8001d0c:	745a      	strb	r2, [r3, #17]
			break;
 8001d0e:	e009      	b.n	8001d24 <x_step_motor_process+0xa8>
		case MT_STATE_STTOP:
			x_mt_stop();
 8001d10:	f7ff fec8 	bl	8001aa4 <x_mt_stop>
			x_motor.state = MT_STATE_IDLE;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <x_step_motor_process+0xb4>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	745a      	strb	r2, [r3, #17]
			break;
 8001d1a:	e004      	b.n	8001d26 <x_step_motor_process+0xaa>
		default:
			break;
 8001d1c:	bf00      	nop
 8001d1e:	e002      	b.n	8001d26 <x_step_motor_process+0xaa>
			break;
 8001d20:	bf00      	nop
 8001d22:	e000      	b.n	8001d26 <x_step_motor_process+0xaa>
			break;
 8001d24:	bf00      	nop
	}
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20001280 	.word	0x20001280
 8001d30:	20001508 	.word	0x20001508

08001d34 <z_mt_set_dir>:

_motor_typedef z_motor;



void z_mt_set_dir(){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	if(z_motor.current_pos < z_motor.next_pos){
 8001d38:	4b14      	ldr	r3, [pc, #80]	; (8001d8c <z_mt_set_dir+0x58>)
 8001d3a:	689a      	ldr	r2, [r3, #8]
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <z_mt_set_dir+0x58>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d210      	bcs.n	8001d66 <z_mt_set_dir+0x32>
		z_motor.current_dir = DIR_FORWARD;
 8001d44:	4b11      	ldr	r3, [pc, #68]	; (8001d8c <z_mt_set_dir+0x58>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_FORWARD);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	4810      	ldr	r0, [pc, #64]	; (8001d90 <z_mt_set_dir+0x5c>)
 8001d50:	f001 ff32 	bl	8003bb8 <HAL_GPIO_WritePin>
		htim5.Instance->CR1 &= ~(1<<4);
 8001d54:	4b0f      	ldr	r3, [pc, #60]	; (8001d94 <z_mt_set_dir+0x60>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <z_mt_set_dir+0x60>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 0210 	bic.w	r2, r2, #16
 8001d62:	601a      	str	r2, [r3, #0]
		z_motor.current_dir = DIR_BACKWARD;
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_BACKWARD);
		htim5.Instance->CR1 |= (1<<4);
	}

}
 8001d64:	e00f      	b.n	8001d86 <z_mt_set_dir+0x52>
		z_motor.current_dir = DIR_BACKWARD;
 8001d66:	4b09      	ldr	r3, [pc, #36]	; (8001d8c <z_mt_set_dir+0x58>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_BACKWARD);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	4807      	ldr	r0, [pc, #28]	; (8001d90 <z_mt_set_dir+0x5c>)
 8001d72:	f001 ff21 	bl	8003bb8 <HAL_GPIO_WritePin>
		htim5.Instance->CR1 |= (1<<4);
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <z_mt_set_dir+0x60>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <z_mt_set_dir+0x60>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 0210 	orr.w	r2, r2, #16
 8001d84:	601a      	str	r2, [r3, #0]
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	20001538 	.word	0x20001538
 8001d90:	40020800 	.word	0x40020800
 8001d94:	20001310 	.word	0x20001310

08001d98 <z_mt_start>:

void z_mt_start(){
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4802      	ldr	r0, [pc, #8]	; (8001da8 <z_mt_start+0x10>)
 8001da0:	f004 f932 	bl	8006008 <HAL_TIM_PWM_Start>
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	200012c8 	.word	0x200012c8

08001dac <z_mt_stop>:

void z_mt_stop()
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001db0:	2100      	movs	r1, #0
 8001db2:	4802      	ldr	r0, [pc, #8]	; (8001dbc <z_mt_stop+0x10>)
 8001db4:	f004 f9f0 	bl	8006198 <HAL_TIM_PWM_Stop>
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200012c8 	.word	0x200012c8

08001dc0 <z_set_current_position>:
	z_motor.current_pos = htim5.Instance->CNT;
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
	z_mt_set_dir(z_motor.current_pos,z_motor.next_pos);
}

void z_set_current_position(uint32_t pos){
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
	z_motor.current_pos = pos;
 8001dc8:	4a06      	ldr	r2, [pc, #24]	; (8001de4 <z_set_current_position+0x24>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6093      	str	r3, [r2, #8]
	htim5.Instance->CNT = pos;
 8001dce:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <z_set_current_position+0x28>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	687a      	ldr	r2, [r7, #4]
 8001dd4:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	20001538 	.word	0x20001538
 8001de8:	20001310 	.word	0x20001310

08001dec <z_step_mt_int>:
void z_step_mt_int(void){
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
	z_motor.current_pos= z_motor.next_pos = htim5.Instance->CNT = 0;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <z_step_mt_int+0x38>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	2300      	movs	r3, #0
 8001df6:	6253      	str	r3, [r2, #36]	; 0x24
 8001df8:	4a0b      	ldr	r2, [pc, #44]	; (8001e28 <z_step_mt_int+0x3c>)
 8001dfa:	60d3      	str	r3, [r2, #12]
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <z_step_mt_int+0x3c>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4a09      	ldr	r2, [pc, #36]	; (8001e28 <z_step_mt_int+0x3c>)
 8001e02:	6093      	str	r3, [r2, #8]
	z_motor.old_pos = z_motor.ud_time =0;
 8001e04:	4b08      	ldr	r3, [pc, #32]	; (8001e28 <z_step_mt_int+0x3c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	4b07      	ldr	r3, [pc, #28]	; (8001e28 <z_step_mt_int+0x3c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a06      	ldr	r2, [pc, #24]	; (8001e28 <z_step_mt_int+0x3c>)
 8001e10:	6053      	str	r3, [r2, #4]
	z_motor.set_current_position = z_set_current_position;
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <z_step_mt_int+0x3c>)
 8001e14:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <z_step_mt_int+0x40>)
 8001e16:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Start(&htim5);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <z_step_mt_int+0x38>)
 8001e1a:	f004 f833 	bl	8005e84 <HAL_TIM_Base_Start>
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20001310 	.word	0x20001310
 8001e28:	20001538 	.word	0x20001538
 8001e2c:	08001dc1 	.word	0x08001dc1

08001e30 <z_step_motor_home_position>:


void z_step_motor_home_position()
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(Z_HOME_SWITCH_GPIO_Port, Z_HOME_SWITCH_Pin) && (!z_motor.is_home))
 8001e34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e38:	4812      	ldr	r0, [pc, #72]	; (8001e84 <z_step_motor_home_position+0x54>)
 8001e3a:	f001 fea5 	bl	8003b88 <HAL_GPIO_ReadPin>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d114      	bne.n	8001e6e <z_step_motor_home_position+0x3e>
 8001e44:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <z_step_motor_home_position+0x58>)
 8001e46:	7cdb      	ldrb	r3, [r3, #19]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d110      	bne.n	8001e6e <z_step_motor_home_position+0x3e>
	{
		z_motor.home_achieve = 1;
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <z_step_motor_home_position+0x58>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	749a      	strb	r2, [r3, #18]
		z_motor.is_home = 1;
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <z_step_motor_home_position+0x58>)
 8001e54:	2201      	movs	r2, #1
 8001e56:	74da      	strb	r2, [r3, #19]
		z_mt_stop();
 8001e58:	f7ff ffa8 	bl	8001dac <z_mt_stop>
		z_motor.current_pos = htim5.Instance->CNT =0;
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <z_step_motor_home_position+0x5c>)
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2300      	movs	r3, #0
 8001e62:	6253      	str	r3, [r2, #36]	; 0x24
 8001e64:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <z_step_motor_home_position+0x58>)
 8001e66:	6093      	str	r3, [r2, #8]
		z_motor.next_pos = 0;
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <z_step_motor_home_position+0x58>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
	}
	if(htim5.Instance->CNT)
 8001e6e:	4b07      	ldr	r3, [pc, #28]	; (8001e8c <z_step_motor_home_position+0x5c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <z_step_motor_home_position+0x4e>
	{
		z_motor.is_home = 0;
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <z_step_motor_home_position+0x58>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	74da      	strb	r2, [r3, #19]
	}
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40020800 	.word	0x40020800
 8001e88:	20001538 	.word	0x20001538
 8001e8c:	20001310 	.word	0x20001310

08001e90 <z_step_motor_process>:

void z_step_motor_process(void){
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	z_motor.current_pos = htim5.Instance->CNT;
 8001e94:	4b2a      	ldr	r3, [pc, #168]	; (8001f40 <z_step_motor_process+0xb0>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	4a2a      	ldr	r2, [pc, #168]	; (8001f44 <z_step_motor_process+0xb4>)
 8001e9c:	6093      	str	r3, [r2, #8]
	z_step_motor_home_position();
 8001e9e:	f7ff ffc7 	bl	8001e30 <z_step_motor_home_position>
	home_process(&z_motor);
 8001ea2:	4828      	ldr	r0, [pc, #160]	; (8001f44 <z_step_motor_process+0xb4>)
 8001ea4:	f7ff feaa 	bl	8001bfc <home_process>
	switch (z_motor.state) {
 8001ea8:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <z_step_motor_process+0xb4>)
 8001eaa:	7c5b      	ldrb	r3, [r3, #17]
 8001eac:	2b03      	cmp	r3, #3
 8001eae:	d83f      	bhi.n	8001f30 <z_step_motor_process+0xa0>
 8001eb0:	a201      	add	r2, pc, #4	; (adr r2, 8001eb8 <z_step_motor_process+0x28>)
 8001eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb6:	bf00      	nop
 8001eb8:	08001ec9 	.word	0x08001ec9
 8001ebc:	08001ee5 	.word	0x08001ee5
 8001ec0:	08001ef5 	.word	0x08001ef5
 8001ec4:	08001f25 	.word	0x08001f25
		case MT_STATE_IDLE:
			if(abs(z_motor.current_pos- z_motor.next_pos) > STEP_LOSS){
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	; (8001f44 <z_step_motor_process+0xb4>)
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	4b1d      	ldr	r3, [pc, #116]	; (8001f44 <z_step_motor_process+0xb4>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	bfb8      	it	lt
 8001ed6:	425b      	neglt	r3, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	dd2b      	ble.n	8001f34 <z_step_motor_process+0xa4>
				z_motor.state = MT_STATE_START;
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <z_step_motor_process+0xb4>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	745a      	strb	r2, [r3, #17]
			}
			break;
 8001ee2:	e027      	b.n	8001f34 <z_step_motor_process+0xa4>
		case MT_STATE_START:
			z_mt_set_dir();
 8001ee4:	f7ff ff26 	bl	8001d34 <z_mt_set_dir>
			z_mt_start();
 8001ee8:	f7ff ff56 	bl	8001d98 <z_mt_start>
			z_motor.state = MT_STATE_RUNING;
 8001eec:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <z_step_motor_process+0xb4>)
 8001eee:	2202      	movs	r2, #2
 8001ef0:	745a      	strb	r2, [r3, #17]
			break;
 8001ef2:	e022      	b.n	8001f3a <z_step_motor_process+0xaa>
		case MT_STATE_RUNING:
			if(z_motor.current_dir == DIR_FORWARD){
 8001ef4:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <z_step_motor_process+0xb4>)
 8001ef6:	7c1b      	ldrb	r3, [r3, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d109      	bne.n	8001f10 <z_step_motor_process+0x80>
				if(z_motor.current_pos >= z_motor.next_pos){
 8001efc:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <z_step_motor_process+0xb4>)
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4b10      	ldr	r3, [pc, #64]	; (8001f44 <z_step_motor_process+0xb4>)
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d317      	bcc.n	8001f38 <z_step_motor_process+0xa8>
					z_motor.state = MT_STATE_STTOP;
 8001f08:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <z_step_motor_process+0xb4>)
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	745a      	strb	r2, [r3, #17]
				}
			}
//			if(abs(z_motor.current_pos- z_motor.next_pos) < STEP_LOSS){
//							z_motor.state = MT_STATE_STTOP;
//			}
			break;
 8001f0e:	e013      	b.n	8001f38 <z_step_motor_process+0xa8>
				if(z_motor.current_pos <= z_motor.next_pos){
 8001f10:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <z_step_motor_process+0xb4>)
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <z_step_motor_process+0xb4>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d80d      	bhi.n	8001f38 <z_step_motor_process+0xa8>
					z_motor.state = MT_STATE_STTOP;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <z_step_motor_process+0xb4>)
 8001f1e:	2203      	movs	r2, #3
 8001f20:	745a      	strb	r2, [r3, #17]
			break;
 8001f22:	e009      	b.n	8001f38 <z_step_motor_process+0xa8>
		case MT_STATE_STTOP:
			z_mt_stop();
 8001f24:	f7ff ff42 	bl	8001dac <z_mt_stop>
			z_motor.state = MT_STATE_IDLE;
 8001f28:	4b06      	ldr	r3, [pc, #24]	; (8001f44 <z_step_motor_process+0xb4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	745a      	strb	r2, [r3, #17]
			break;
 8001f2e:	e004      	b.n	8001f3a <z_step_motor_process+0xaa>
		default:
			break;
 8001f30:	bf00      	nop
 8001f32:	e002      	b.n	8001f3a <z_step_motor_process+0xaa>
			break;
 8001f34:	bf00      	nop
 8001f36:	e000      	b.n	8001f3a <z_step_motor_process+0xaa>
			break;
 8001f38:	bf00      	nop
	}
}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20001310 	.word	0x20001310
 8001f44:	20001538 	.word	0x20001538

08001f48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f56:	4a0f      	ldr	r2, [pc, #60]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	603b      	str	r3, [r7, #0]
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f78:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_MspInit+0x4c>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f86:	2007      	movs	r0, #7
 8001f88:	f000 fe20 	bl	8002bcc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800

08001f98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_I2C_MspInit+0x84>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d12c      	bne.n	8002014 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_I2C_MspInit+0x88>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a17      	ldr	r2, [pc, #92]	; (8002020 <HAL_I2C_MspInit+0x88>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_I2C_MspInit+0x88>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001fd6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fdc:	2312      	movs	r3, #18
 8001fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fe8:	2304      	movs	r3, #4
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fec:	f107 0314 	add.w	r3, r7, #20
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480c      	ldr	r0, [pc, #48]	; (8002024 <HAL_I2C_MspInit+0x8c>)
 8001ff4:	f001 fc2c 	bl	8003850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	4b08      	ldr	r3, [pc, #32]	; (8002020 <HAL_I2C_MspInit+0x88>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	4a07      	ldr	r2, [pc, #28]	; (8002020 <HAL_I2C_MspInit+0x88>)
 8002002:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002006:	6413      	str	r3, [r2, #64]	; 0x40
 8002008:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_I2C_MspInit+0x88>)
 800200a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002014:	bf00      	nop
 8002016:	3728      	adds	r7, #40	; 0x28
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	40005400 	.word	0x40005400
 8002020:	40023800 	.word	0x40023800
 8002024:	40020400 	.word	0x40020400

08002028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08a      	sub	sp, #40	; 0x28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a19      	ldr	r2, [pc, #100]	; (80020ac <HAL_SPI_MspInit+0x84>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d12b      	bne.n	80020a2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	4b18      	ldr	r3, [pc, #96]	; (80020b0 <HAL_SPI_MspInit+0x88>)
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	4a17      	ldr	r2, [pc, #92]	; (80020b0 <HAL_SPI_MspInit+0x88>)
 8002054:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002058:	6453      	str	r3, [r2, #68]	; 0x44
 800205a:	4b15      	ldr	r3, [pc, #84]	; (80020b0 <HAL_SPI_MspInit+0x88>)
 800205c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	4b11      	ldr	r3, [pc, #68]	; (80020b0 <HAL_SPI_MspInit+0x88>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	4a10      	ldr	r2, [pc, #64]	; (80020b0 <HAL_SPI_MspInit+0x88>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6313      	str	r3, [r2, #48]	; 0x30
 8002076:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_SPI_MspInit+0x88>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	60fb      	str	r3, [r7, #12]
 8002080:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002082:	23e0      	movs	r3, #224	; 0xe0
 8002084:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002086:	2302      	movs	r3, #2
 8002088:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208e:	2300      	movs	r3, #0
 8002090:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002092:	2305      	movs	r3, #5
 8002094:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002096:	f107 0314 	add.w	r3, r7, #20
 800209a:	4619      	mov	r1, r3
 800209c:	4805      	ldr	r0, [pc, #20]	; (80020b4 <HAL_SPI_MspInit+0x8c>)
 800209e:	f001 fbd7 	bl	8003850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80020a2:	bf00      	nop
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40013000 	.word	0x40013000
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40020000 	.word	0x40020000

080020b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a40      	ldr	r2, [pc, #256]	; (80021c8 <HAL_TIM_Base_MspInit+0x110>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d13e      	bne.n	8002148 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	4b3f      	ldr	r3, [pc, #252]	; (80021cc <HAL_TIM_Base_MspInit+0x114>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	4a3e      	ldr	r2, [pc, #248]	; (80021cc <HAL_TIM_Base_MspInit+0x114>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6453      	str	r3, [r2, #68]	; 0x44
 80020da:	4b3c      	ldr	r3, [pc, #240]	; (80021cc <HAL_TIM_Base_MspInit+0x114>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	f003 0301 	and.w	r3, r3, #1
 80020e2:	617b      	str	r3, [r7, #20]
 80020e4:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80020e6:	4b3a      	ldr	r3, [pc, #232]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 80020e8:	4a3a      	ldr	r2, [pc, #232]	; (80021d4 <HAL_TIM_Base_MspInit+0x11c>)
 80020ea:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80020ec:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 80020ee:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80020f2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020f4:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020fa:	4b35      	ldr	r3, [pc, #212]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002100:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 8002102:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002106:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002108:	4b31      	ldr	r3, [pc, #196]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 800210a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800210e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002110:	4b2f      	ldr	r3, [pc, #188]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 8002112:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002116:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002118:	4b2d      	ldr	r3, [pc, #180]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 800211a:	2200      	movs	r2, #0
 800211c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800211e:	4b2c      	ldr	r3, [pc, #176]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 8002120:	2200      	movs	r2, #0
 8002122:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 8002126:	2200      	movs	r2, #0
 8002128:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800212a:	4829      	ldr	r0, [pc, #164]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 800212c:	f000 fd90 	bl	8002c50 <HAL_DMA_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002136:	f7ff fc61 	bl	80019fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a24      	ldr	r2, [pc, #144]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 800213e:	625a      	str	r2, [r3, #36]	; 0x24
 8002140:	4a23      	ldr	r2, [pc, #140]	; (80021d0 <HAL_TIM_Base_MspInit+0x118>)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002146:	e03a      	b.n	80021be <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002150:	d10e      	bne.n	8002170 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	613b      	str	r3, [r7, #16]
 8002156:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <HAL_TIM_Base_MspInit+0x114>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	4a1c      	ldr	r2, [pc, #112]	; (80021cc <HAL_TIM_Base_MspInit+0x114>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6413      	str	r3, [r2, #64]	; 0x40
 8002162:	4b1a      	ldr	r3, [pc, #104]	; (80021cc <HAL_TIM_Base_MspInit+0x114>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	613b      	str	r3, [r7, #16]
 800216c:	693b      	ldr	r3, [r7, #16]
}
 800216e:	e026      	b.n	80021be <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a18      	ldr	r2, [pc, #96]	; (80021d8 <HAL_TIM_Base_MspInit+0x120>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d10e      	bne.n	8002198 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4b13      	ldr	r3, [pc, #76]	; (80021cc <HAL_TIM_Base_MspInit+0x114>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a12      	ldr	r2, [pc, #72]	; (80021cc <HAL_TIM_Base_MspInit+0x114>)
 8002184:	f043 0302 	orr.w	r3, r3, #2
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
 800218a:	4b10      	ldr	r3, [pc, #64]	; (80021cc <HAL_TIM_Base_MspInit+0x114>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]
}
 8002196:	e012      	b.n	80021be <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0f      	ldr	r2, [pc, #60]	; (80021dc <HAL_TIM_Base_MspInit+0x124>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10d      	bne.n	80021be <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <HAL_TIM_Base_MspInit+0x114>)
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	4a08      	ldr	r2, [pc, #32]	; (80021cc <HAL_TIM_Base_MspInit+0x114>)
 80021ac:	f043 0308 	orr.w	r3, r3, #8
 80021b0:	6413      	str	r3, [r2, #64]	; 0x40
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_TIM_Base_MspInit+0x114>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 0308 	and.w	r3, r3, #8
 80021ba:	60bb      	str	r3, [r7, #8]
 80021bc:	68bb      	ldr	r3, [r7, #8]
}
 80021be:	bf00      	nop
 80021c0:	3718      	adds	r7, #24
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40010000 	.word	0x40010000
 80021cc:	40023800 	.word	0x40023800
 80021d0:	200013a0 	.word	0x200013a0
 80021d4:	40026428 	.word	0x40026428
 80021d8:	40000400 	.word	0x40000400
 80021dc:	40000c00 	.word	0x40000c00

080021e0 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b085      	sub	sp, #20
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a0b      	ldr	r2, [pc, #44]	; (800221c <HAL_TIM_OnePulse_MspInit+0x3c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d10d      	bne.n	800220e <HAL_TIM_OnePulse_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <HAL_TIM_OnePulse_MspInit+0x40>)
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_TIM_OnePulse_MspInit+0x40>)
 80021fc:	f043 0302 	orr.w	r3, r3, #2
 8002200:	6453      	str	r3, [r2, #68]	; 0x44
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <HAL_TIM_OnePulse_MspInit+0x40>)
 8002204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	40010400 	.word	0x40010400
 8002220:	40023800 	.word	0x40023800

08002224 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <HAL_TIM_MspPostInit+0xb0>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d11f      	bne.n	8002286 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_TIM_MspPostInit+0xb4>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	4a22      	ldr	r2, [pc, #136]	; (80022d8 <HAL_TIM_MspPostInit+0xb4>)
 8002250:	f043 0310 	orr.w	r3, r3, #16
 8002254:	6313      	str	r3, [r2, #48]	; 0x30
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_TIM_MspPostInit+0xb4>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	613b      	str	r3, [r7, #16]
 8002260:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002262:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002266:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002268:	2302      	movs	r3, #2
 800226a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800226c:	2301      	movs	r3, #1
 800226e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002270:	2303      	movs	r3, #3
 8002272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002274:	2301      	movs	r3, #1
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002278:	f107 0314 	add.w	r3, r7, #20
 800227c:	4619      	mov	r1, r3
 800227e:	4817      	ldr	r0, [pc, #92]	; (80022dc <HAL_TIM_MspPostInit+0xb8>)
 8002280:	f001 fae6 	bl	8003850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002284:	e022      	b.n	80022cc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <HAL_TIM_MspPostInit+0xbc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d11d      	bne.n	80022cc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <HAL_TIM_MspPostInit+0xb4>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <HAL_TIM_MspPostInit+0xb4>)
 800229a:	f043 0304 	orr.w	r3, r3, #4
 800229e:	6313      	str	r3, [r2, #48]	; 0x30
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_TIM_MspPostInit+0xb4>)
 80022a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022ac:	2340      	movs	r3, #64	; 0x40
 80022ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b0:	2302      	movs	r3, #2
 80022b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b8:	2300      	movs	r3, #0
 80022ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022bc:	2302      	movs	r3, #2
 80022be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	4807      	ldr	r0, [pc, #28]	; (80022e4 <HAL_TIM_MspPostInit+0xc0>)
 80022c8:	f001 fac2 	bl	8003850 <HAL_GPIO_Init>
}
 80022cc:	bf00      	nop
 80022ce:	3728      	adds	r7, #40	; 0x28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40010000 	.word	0x40010000
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40000400 	.word	0x40000400
 80022e4:	40020800 	.word	0x40020800

080022e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08a      	sub	sp, #40	; 0x28
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f0:	f107 0314 	add.w	r3, r7, #20
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]
 80022f8:	605a      	str	r2, [r3, #4]
 80022fa:	609a      	str	r2, [r3, #8]
 80022fc:	60da      	str	r2, [r3, #12]
 80022fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a4b      	ldr	r2, [pc, #300]	; (8002434 <HAL_UART_MspInit+0x14c>)
 8002306:	4293      	cmp	r3, r2
 8002308:	f040 8090 	bne.w	800242c <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800230c:	2300      	movs	r3, #0
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	4b49      	ldr	r3, [pc, #292]	; (8002438 <HAL_UART_MspInit+0x150>)
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	4a48      	ldr	r2, [pc, #288]	; (8002438 <HAL_UART_MspInit+0x150>)
 8002316:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800231a:	6413      	str	r3, [r2, #64]	; 0x40
 800231c:	4b46      	ldr	r3, [pc, #280]	; (8002438 <HAL_UART_MspInit+0x150>)
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	2300      	movs	r3, #0
 800232a:	60fb      	str	r3, [r7, #12]
 800232c:	4b42      	ldr	r3, [pc, #264]	; (8002438 <HAL_UART_MspInit+0x150>)
 800232e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002330:	4a41      	ldr	r2, [pc, #260]	; (8002438 <HAL_UART_MspInit+0x150>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6313      	str	r3, [r2, #48]	; 0x30
 8002338:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <HAL_UART_MspInit+0x150>)
 800233a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002344:	230c      	movs	r3, #12
 8002346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800234c:	2301      	movs	r3, #1
 800234e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002350:	2303      	movs	r3, #3
 8002352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002354:	2307      	movs	r3, #7
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002358:	f107 0314 	add.w	r3, r7, #20
 800235c:	4619      	mov	r1, r3
 800235e:	4837      	ldr	r0, [pc, #220]	; (800243c <HAL_UART_MspInit+0x154>)
 8002360:	f001 fa76 	bl	8003850 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002364:	4b36      	ldr	r3, [pc, #216]	; (8002440 <HAL_UART_MspInit+0x158>)
 8002366:	4a37      	ldr	r2, [pc, #220]	; (8002444 <HAL_UART_MspInit+0x15c>)
 8002368:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800236a:	4b35      	ldr	r3, [pc, #212]	; (8002440 <HAL_UART_MspInit+0x158>)
 800236c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002370:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002372:	4b33      	ldr	r3, [pc, #204]	; (8002440 <HAL_UART_MspInit+0x158>)
 8002374:	2240      	movs	r2, #64	; 0x40
 8002376:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002378:	4b31      	ldr	r3, [pc, #196]	; (8002440 <HAL_UART_MspInit+0x158>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800237e:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_UART_MspInit+0x158>)
 8002380:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002384:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002386:	4b2e      	ldr	r3, [pc, #184]	; (8002440 <HAL_UART_MspInit+0x158>)
 8002388:	2200      	movs	r2, #0
 800238a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800238c:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <HAL_UART_MspInit+0x158>)
 800238e:	2200      	movs	r2, #0
 8002390:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002392:	4b2b      	ldr	r3, [pc, #172]	; (8002440 <HAL_UART_MspInit+0x158>)
 8002394:	2200      	movs	r2, #0
 8002396:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002398:	4b29      	ldr	r3, [pc, #164]	; (8002440 <HAL_UART_MspInit+0x158>)
 800239a:	2200      	movs	r2, #0
 800239c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800239e:	4b28      	ldr	r3, [pc, #160]	; (8002440 <HAL_UART_MspInit+0x158>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80023a4:	4826      	ldr	r0, [pc, #152]	; (8002440 <HAL_UART_MspInit+0x158>)
 80023a6:	f000 fc53 	bl	8002c50 <HAL_DMA_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80023b0:	f7ff fb24 	bl	80019fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a22      	ldr	r2, [pc, #136]	; (8002440 <HAL_UART_MspInit+0x158>)
 80023b8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ba:	4a21      	ldr	r2, [pc, #132]	; (8002440 <HAL_UART_MspInit+0x158>)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80023c0:	4b21      	ldr	r3, [pc, #132]	; (8002448 <HAL_UART_MspInit+0x160>)
 80023c2:	4a22      	ldr	r2, [pc, #136]	; (800244c <HAL_UART_MspInit+0x164>)
 80023c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80023c6:	4b20      	ldr	r3, [pc, #128]	; (8002448 <HAL_UART_MspInit+0x160>)
 80023c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023ce:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <HAL_UART_MspInit+0x160>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023d4:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <HAL_UART_MspInit+0x160>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <HAL_UART_MspInit+0x160>)
 80023dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <HAL_UART_MspInit+0x160>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023e8:	4b17      	ldr	r3, [pc, #92]	; (8002448 <HAL_UART_MspInit+0x160>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80023ee:	4b16      	ldr	r3, [pc, #88]	; (8002448 <HAL_UART_MspInit+0x160>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023f4:	4b14      	ldr	r3, [pc, #80]	; (8002448 <HAL_UART_MspInit+0x160>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023fa:	4b13      	ldr	r3, [pc, #76]	; (8002448 <HAL_UART_MspInit+0x160>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002400:	4811      	ldr	r0, [pc, #68]	; (8002448 <HAL_UART_MspInit+0x160>)
 8002402:	f000 fc25 	bl	8002c50 <HAL_DMA_Init>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 800240c:	f7ff faf6 	bl	80019fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	4a0d      	ldr	r2, [pc, #52]	; (8002448 <HAL_UART_MspInit+0x160>)
 8002414:	639a      	str	r2, [r3, #56]	; 0x38
 8002416:	4a0c      	ldr	r2, [pc, #48]	; (8002448 <HAL_UART_MspInit+0x160>)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800241c:	2200      	movs	r2, #0
 800241e:	2100      	movs	r1, #0
 8002420:	2026      	movs	r0, #38	; 0x26
 8002422:	f000 fbde 	bl	8002be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002426:	2026      	movs	r0, #38	; 0x26
 8002428:	f000 fbf7 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800242c:	bf00      	nop
 800242e:	3728      	adds	r7, #40	; 0x28
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40004400 	.word	0x40004400
 8002438:	40023800 	.word	0x40023800
 800243c:	40020000 	.word	0x40020000
 8002440:	20001444 	.word	0x20001444
 8002444:	400260a0 	.word	0x400260a0
 8002448:	200014a4 	.word	0x200014a4
 800244c:	40026088 	.word	0x40026088

08002450 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002454:	e7fe      	b.n	8002454 <NMI_Handler+0x4>

08002456 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002456:	b480      	push	{r7}
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800245a:	e7fe      	b.n	800245a <HardFault_Handler+0x4>

0800245c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002460:	e7fe      	b.n	8002460 <MemManage_Handler+0x4>

08002462 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002466:	e7fe      	b.n	8002466 <BusFault_Handler+0x4>

08002468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800246c:	e7fe      	b.n	800246c <UsageFault_Handler+0x4>

0800246e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246e:	b480      	push	{r7}
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002472:	bf00      	nop
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002480:	bf00      	nop
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr

0800248a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800248a:	b480      	push	{r7}
 800248c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800248e:	bf00      	nop
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800249c:	f000 fa82 	bl	80029a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024a8:	4802      	ldr	r0, [pc, #8]	; (80024b4 <DMA1_Stream5_IRQHandler+0x10>)
 80024aa:	f000 fd69 	bl	8002f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	200014a4 	.word	0x200014a4

080024b8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80024bc:	4802      	ldr	r0, [pc, #8]	; (80024c8 <DMA1_Stream6_IRQHandler+0x10>)
 80024be:	f000 fd5f 	bl	8002f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20001444 	.word	0x20001444

080024cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024d0:	4802      	ldr	r0, [pc, #8]	; (80024dc <USART2_IRQHandler+0x10>)
 80024d2:	f004 ff95 	bl	8007400 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024d6:	bf00      	nop
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	20001400 	.word	0x20001400

080024e0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80024e4:	4802      	ldr	r0, [pc, #8]	; (80024f0 <DMA2_Stream1_IRQHandler+0x10>)
 80024e6:	f000 fd4b 	bl	8002f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200013a0 	.word	0x200013a0

080024f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80024f8:	4802      	ldr	r0, [pc, #8]	; (8002504 <OTG_FS_IRQHandler+0x10>)
 80024fa:	f001 fe25 	bl	8004148 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	2000440c 	.word	0x2000440c

08002508 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002514:	2300      	movs	r3, #0
 8002516:	617b      	str	r3, [r7, #20]
 8002518:	e00a      	b.n	8002530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800251a:	f3af 8000 	nop.w
 800251e:	4601      	mov	r1, r0
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	1c5a      	adds	r2, r3, #1
 8002524:	60ba      	str	r2, [r7, #8]
 8002526:	b2ca      	uxtb	r2, r1
 8002528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	3301      	adds	r3, #1
 800252e:	617b      	str	r3, [r7, #20]
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	dbf0      	blt.n	800251a <_read+0x12>
  }

  return len;
 8002538:	687b      	ldr	r3, [r7, #4]
}
 800253a:	4618      	mov	r0, r3
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800254a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800256a:	605a      	str	r2, [r3, #4]
  return 0;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	370c      	adds	r7, #12
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr

0800257a <_isatty>:

int _isatty(int file)
{
 800257a:	b480      	push	{r7}
 800257c:	b083      	sub	sp, #12
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002582:	2301      	movs	r3, #1
}
 8002584:	4618      	mov	r0, r3
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	60f8      	str	r0, [r7, #12]
 8002598:	60b9      	str	r1, [r7, #8]
 800259a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b086      	sub	sp, #24
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025b4:	4a14      	ldr	r2, [pc, #80]	; (8002608 <_sbrk+0x5c>)
 80025b6:	4b15      	ldr	r3, [pc, #84]	; (800260c <_sbrk+0x60>)
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <_sbrk+0x64>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c8:	4b11      	ldr	r3, [pc, #68]	; (8002610 <_sbrk+0x64>)
 80025ca:	4a12      	ldr	r2, [pc, #72]	; (8002614 <_sbrk+0x68>)
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d207      	bcs.n	80025ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025dc:	f00a f8cc 	bl	800c778 <__errno>
 80025e0:	4603      	mov	r3, r0
 80025e2:	220c      	movs	r2, #12
 80025e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295
 80025ea:	e009      	b.n	8002600 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025ec:	4b08      	ldr	r3, [pc, #32]	; (8002610 <_sbrk+0x64>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <_sbrk+0x64>)
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4413      	add	r3, r2
 80025fa:	4a05      	ldr	r2, [pc, #20]	; (8002610 <_sbrk+0x64>)
 80025fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025fe:	68fb      	ldr	r3, [r7, #12]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20020000 	.word	0x20020000
 800260c:	00004000 	.word	0x00004000
 8002610:	20001568 	.word	0x20001568
 8002614:	20004b48 	.word	0x20004b48

08002618 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800261c:	4b06      	ldr	r3, [pc, #24]	; (8002638 <SystemInit+0x20>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <SystemInit+0x20>)
 8002624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800262c:	bf00      	nop
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <HAL_UART_TxCpltCallback>:
void uart_dma_stop(void);

_uart_frame tx[10];
static uint8_t tc=0,ti=0,to=0;
uint32_t uart_tc =0,uart_itc =0;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
	uart_itc++;
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <HAL_UART_TxCpltCallback+0x80>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	3301      	adds	r3, #1
 800264a:	4a1c      	ldr	r2, [pc, #112]	; (80026bc <HAL_UART_TxCpltCallback+0x80>)
 800264c:	6013      	str	r3, [r2, #0]
	if(tc)
 800264e:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HAL_UART_TxCpltCallback+0x84>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d02d      	beq.n	80026b2 <HAL_UART_TxCpltCallback+0x76>
	{
		if(HAL_UART_Transmit_DMA(&huart2, tx[to].data, tx[to].size) == HAL_OK){
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_UART_TxCpltCallback+0x88>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	f240 235a 	movw	r3, #602	; 0x25a
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	4a18      	ldr	r2, [pc, #96]	; (80026c8 <HAL_UART_TxCpltCallback+0x8c>)
 8002666:	4413      	add	r3, r2
 8002668:	1c99      	adds	r1, r3, #2
 800266a:	4b16      	ldr	r3, [pc, #88]	; (80026c4 <HAL_UART_TxCpltCallback+0x88>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	4a15      	ldr	r2, [pc, #84]	; (80026c8 <HAL_UART_TxCpltCallback+0x8c>)
 8002672:	f240 235a 	movw	r3, #602	; 0x25a
 8002676:	fb00 f303 	mul.w	r3, r0, r3
 800267a:	4413      	add	r3, r2
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	4812      	ldr	r0, [pc, #72]	; (80026cc <HAL_UART_TxCpltCallback+0x90>)
 8002682:	f004 fd8f 	bl	80071a4 <HAL_UART_Transmit_DMA>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d112      	bne.n	80026b2 <HAL_UART_TxCpltCallback+0x76>
				to++;
 800268c:	4b0d      	ldr	r3, [pc, #52]	; (80026c4 <HAL_UART_TxCpltCallback+0x88>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	3301      	adds	r3, #1
 8002692:	b2da      	uxtb	r2, r3
 8002694:	4b0b      	ldr	r3, [pc, #44]	; (80026c4 <HAL_UART_TxCpltCallback+0x88>)
 8002696:	701a      	strb	r2, [r3, #0]
				tc--;
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <HAL_UART_TxCpltCallback+0x84>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	3b01      	subs	r3, #1
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <HAL_UART_TxCpltCallback+0x84>)
 80026a2:	701a      	strb	r2, [r3, #0]
				if(to ==TX_SIZE)
 80026a4:	4b07      	ldr	r3, [pc, #28]	; (80026c4 <HAL_UART_TxCpltCallback+0x88>)
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b0a      	cmp	r3, #10
 80026aa:	d102      	bne.n	80026b2 <HAL_UART_TxCpltCallback+0x76>
					to = 0;
 80026ac:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_UART_TxCpltCallback+0x88>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80026b2:	bf00      	nop
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20002f04 	.word	0x20002f04
 80026c0:	20002efc 	.word	0x20002efc
 80026c4:	20002efe 	.word	0x20002efe
 80026c8:	20001778 	.word	0x20001778
 80026cc:	20001400 	.word	0x20001400

080026d0 <uart_transmit>:
void uart_transmit(uint8_t *data,uint8_t size)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	460b      	mov	r3, r1
 80026da:	70fb      	strb	r3, [r7, #3]
	uart_tc++;
 80026dc:	4b32      	ldr	r3, [pc, #200]	; (80027a8 <uart_transmit+0xd8>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	3301      	adds	r3, #1
 80026e2:	4a31      	ldr	r2, [pc, #196]	; (80027a8 <uart_transmit+0xd8>)
 80026e4:	6013      	str	r3, [r2, #0]
	tx[ti].size = size;
 80026e6:	4b31      	ldr	r3, [pc, #196]	; (80027ac <uart_transmit+0xdc>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	4618      	mov	r0, r3
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	b299      	uxth	r1, r3
 80026f0:	4a2f      	ldr	r2, [pc, #188]	; (80027b0 <uart_transmit+0xe0>)
 80026f2:	f240 235a 	movw	r3, #602	; 0x25a
 80026f6:	fb00 f303 	mul.w	r3, r0, r3
 80026fa:	4413      	add	r3, r2
 80026fc:	460a      	mov	r2, r1
 80026fe:	801a      	strh	r2, [r3, #0]
	memcpy(tx[ti].data,data,size);
 8002700:	4b2a      	ldr	r3, [pc, #168]	; (80027ac <uart_transmit+0xdc>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	461a      	mov	r2, r3
 8002706:	f240 235a 	movw	r3, #602	; 0x25a
 800270a:	fb02 f303 	mul.w	r3, r2, r3
 800270e:	4a28      	ldr	r2, [pc, #160]	; (80027b0 <uart_transmit+0xe0>)
 8002710:	4413      	add	r3, r2
 8002712:	3302      	adds	r3, #2
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	4618      	mov	r0, r3
 800271a:	f00a f867 	bl	800c7ec <memcpy>
	ti++;
 800271e:	4b23      	ldr	r3, [pc, #140]	; (80027ac <uart_transmit+0xdc>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	b2da      	uxtb	r2, r3
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <uart_transmit+0xdc>)
 8002728:	701a      	strb	r2, [r3, #0]
	if(ti ==TX_SIZE)
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <uart_transmit+0xdc>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b0a      	cmp	r3, #10
 8002730:	d102      	bne.n	8002738 <uart_transmit+0x68>
		ti = 0;
 8002732:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <uart_transmit+0xdc>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
	tc++;
 8002738:	4b1e      	ldr	r3, [pc, #120]	; (80027b4 <uart_transmit+0xe4>)
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	3301      	adds	r3, #1
 800273e:	b2da      	uxtb	r2, r3
 8002740:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <uart_transmit+0xe4>)
 8002742:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(&huart2, tx[to].data, tx[to].size) == HAL_OK){
 8002744:	4b1c      	ldr	r3, [pc, #112]	; (80027b8 <uart_transmit+0xe8>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	f240 235a 	movw	r3, #602	; 0x25a
 800274e:	fb02 f303 	mul.w	r3, r2, r3
 8002752:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <uart_transmit+0xe0>)
 8002754:	4413      	add	r3, r2
 8002756:	1c99      	adds	r1, r3, #2
 8002758:	4b17      	ldr	r3, [pc, #92]	; (80027b8 <uart_transmit+0xe8>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	4a14      	ldr	r2, [pc, #80]	; (80027b0 <uart_transmit+0xe0>)
 8002760:	f240 235a 	movw	r3, #602	; 0x25a
 8002764:	fb00 f303 	mul.w	r3, r0, r3
 8002768:	4413      	add	r3, r2
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	461a      	mov	r2, r3
 800276e:	4813      	ldr	r0, [pc, #76]	; (80027bc <uart_transmit+0xec>)
 8002770:	f004 fd18 	bl	80071a4 <HAL_UART_Transmit_DMA>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d112      	bne.n	80027a0 <uart_transmit+0xd0>
		to++;
 800277a:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <uart_transmit+0xe8>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	3301      	adds	r3, #1
 8002780:	b2da      	uxtb	r2, r3
 8002782:	4b0d      	ldr	r3, [pc, #52]	; (80027b8 <uart_transmit+0xe8>)
 8002784:	701a      	strb	r2, [r3, #0]
		tc--;
 8002786:	4b0b      	ldr	r3, [pc, #44]	; (80027b4 <uart_transmit+0xe4>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	3b01      	subs	r3, #1
 800278c:	b2da      	uxtb	r2, r3
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <uart_transmit+0xe4>)
 8002790:	701a      	strb	r2, [r3, #0]
		if(to ==TX_SIZE)
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <uart_transmit+0xe8>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b0a      	cmp	r3, #10
 8002798:	d102      	bne.n	80027a0 <uart_transmit+0xd0>
			to = 0;
 800279a:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <uart_transmit+0xe8>)
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]

	}
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	20002f00 	.word	0x20002f00
 80027ac:	20002efd 	.word	0x20002efd
 80027b0:	20001778 	.word	0x20001778
 80027b4:	20002efc 	.word	0x20002efc
 80027b8:	20002efe 	.word	0x20002efe
 80027bc:	20001400 	.word	0x20001400

080027c0 <uart_dma_start>:


void uart_dma_start(void){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, uart_rxbuf, UART_BUF_SIZE);
 80027c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c8:	4902      	ldr	r1, [pc, #8]	; (80027d4 <uart_dma_start+0x14>)
 80027ca:	4803      	ldr	r0, [pc, #12]	; (80027d8 <uart_dma_start+0x18>)
 80027cc:	f004 fd68 	bl	80072a0 <HAL_UART_Receive_DMA>
}
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	2000156c 	.word	0x2000156c
 80027d8:	20001400 	.word	0x20001400

080027dc <uart_dma_stop>:

void uart_dma_stop(void){
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart2);			//stop DMA
 80027e0:	4802      	ldr	r0, [pc, #8]	; (80027ec <uart_dma_stop+0x10>)
 80027e2:	f004 fd8d 	bl	8007300 <HAL_UART_DMAStop>
}
 80027e6:	bf00      	nop
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	20001400 	.word	0x20001400

080027f0 <uart_process>:

__weak int dw_process_rx_buffer(uint8_t *data,uint16_t size){
	return 0;
}

void uart_process(void){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
	if(huart2.hdmarx->Instance->NDTR != UART_BUF_SIZE) {
 80027f4:	4b1e      	ldr	r3, [pc, #120]	; (8002870 <uart_process+0x80>)
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002800:	d034      	beq.n	800286c <uart_process+0x7c>
	  if(huart2.hdmarx->Instance->NDTR != UART_Rx_recved) {
 8002802:	4b1b      	ldr	r3, [pc, #108]	; (8002870 <uart_process+0x80>)
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4a1a      	ldr	r2, [pc, #104]	; (8002874 <uart_process+0x84>)
 800280c:	8812      	ldrh	r2, [r2, #0]
 800280e:	4293      	cmp	r3, r2
 8002810:	d00d      	beq.n	800282e <uart_process+0x3e>
		  UART_Rx_recved = huart2.hdmarx->Instance->NDTR;
 8002812:	4b17      	ldr	r3, [pc, #92]	; (8002870 <uart_process+0x80>)
 8002814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	b29a      	uxth	r2, r3
 800281c:	4b15      	ldr	r3, [pc, #84]	; (8002874 <uart_process+0x84>)
 800281e:	801a      	strh	r2, [r3, #0]
		  UART_Rx_Time = HAL_GetTick() + 2;
 8002820:	f000 f8d4 	bl	80029cc <HAL_GetTick>
 8002824:	4603      	mov	r3, r0
 8002826:	3302      	adds	r3, #2
 8002828:	4a13      	ldr	r2, [pc, #76]	; (8002878 <uart_process+0x88>)
 800282a:	6013      	str	r3, [r2, #0]
			  uart_dma_start();
//			  process_data_rx_uart();
		  }
	  }
	}
}
 800282c:	e01e      	b.n	800286c <uart_process+0x7c>
		  if(HAL_GetTick()> UART_Rx_Time)  // timeoutframe
 800282e:	f000 f8cd 	bl	80029cc <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <uart_process+0x88>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d917      	bls.n	800286c <uart_process+0x7c>
			  uart_dma_stop();
 800283c:	f7ff ffce 	bl	80027dc <uart_dma_stop>
			  uart_rx_cnt++;
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <uart_process+0x8c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	3301      	adds	r3, #1
 8002846:	4a0d      	ldr	r2, [pc, #52]	; (800287c <uart_process+0x8c>)
 8002848:	6013      	str	r3, [r2, #0]
			  UART_Rx_recved =0;
 800284a:	4b0a      	ldr	r3, [pc, #40]	; (8002874 <uart_process+0x84>)
 800284c:	2200      	movs	r2, #0
 800284e:	801a      	strh	r2, [r3, #0]
			  dw_process_rx_buffer(uart_rxbuf, UART_BUF_SIZE - huart2.hdmarx->Instance->NDTR);
 8002850:	4b07      	ldr	r3, [pc, #28]	; (8002870 <uart_process+0x80>)
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	b29b      	uxth	r3, r3
 800285a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800285e:	b29b      	uxth	r3, r3
 8002860:	4619      	mov	r1, r3
 8002862:	4807      	ldr	r0, [pc, #28]	; (8002880 <uart_process+0x90>)
 8002864:	f7fe f9dc 	bl	8000c20 <dw_process_rx_buffer>
			  uart_dma_start();
 8002868:	f7ff ffaa 	bl	80027c0 <uart_dma_start>
}
 800286c:	bf00      	nop
 800286e:	bd80      	pop	{r7, pc}
 8002870:	20001400 	.word	0x20001400
 8002874:	2000176c 	.word	0x2000176c
 8002878:	20001770 	.word	0x20001770
 800287c:	20001774 	.word	0x20001774
 8002880:	2000156c 	.word	0x2000156c

08002884 <uart_transmit_block>:

HAL_StatusTypeDef uart_transmit_block(uint8_t *data,uint16_t size,uint16_t timeout){
 8002884:	b580      	push	{r7, lr}
 8002886:	b082      	sub	sp, #8
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	460b      	mov	r3, r1
 800288e:	807b      	strh	r3, [r7, #2]
 8002890:	4613      	mov	r3, r2
 8002892:	803b      	strh	r3, [r7, #0]
	//return HAL_UART_Transmit(&huart2, data, size, timeout);
	uart_transmit(data,size);
 8002894:	887b      	ldrh	r3, [r7, #2]
 8002896:	b2db      	uxtb	r3, r3
 8002898:	4619      	mov	r1, r3
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f7ff ff18 	bl	80026d0 <uart_transmit>
	return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
	...

080028ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028b0:	480d      	ldr	r0, [pc, #52]	; (80028e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028b2:	490e      	ldr	r1, [pc, #56]	; (80028ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80028b4:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028b8:	e002      	b.n	80028c0 <LoopCopyDataInit>

080028ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028be:	3304      	adds	r3, #4

080028c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028c4:	d3f9      	bcc.n	80028ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028c6:	4a0b      	ldr	r2, [pc, #44]	; (80028f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80028c8:	4c0b      	ldr	r4, [pc, #44]	; (80028f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80028ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028cc:	e001      	b.n	80028d2 <LoopFillZerobss>

080028ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d0:	3204      	adds	r2, #4

080028d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028d4:	d3fb      	bcc.n	80028ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80028d6:	f7ff fe9f 	bl	8002618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028da:	f009 ff53 	bl	800c784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028de:	f7fe fb7b 	bl	8000fd8 <main>
  bx  lr    
 80028e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028ec:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 80028f0:	0800ea48 	.word	0x0800ea48
  ldr r2, =_sbss
 80028f4:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 80028f8:	20004b48 	.word	0x20004b48

080028fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028fc:	e7fe      	b.n	80028fc <ADC_IRQHandler>
	...

08002900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_Init+0x40>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a0d      	ldr	r2, [pc, #52]	; (8002940 <HAL_Init+0x40>)
 800290a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800290e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002910:	4b0b      	ldr	r3, [pc, #44]	; (8002940 <HAL_Init+0x40>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a0a      	ldr	r2, [pc, #40]	; (8002940 <HAL_Init+0x40>)
 8002916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800291a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800291c:	4b08      	ldr	r3, [pc, #32]	; (8002940 <HAL_Init+0x40>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a07      	ldr	r2, [pc, #28]	; (8002940 <HAL_Init+0x40>)
 8002922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002928:	2003      	movs	r0, #3
 800292a:	f000 f94f 	bl	8002bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800292e:	2000      	movs	r0, #0
 8002930:	f000 f808 	bl	8002944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002934:	f7ff fb08 	bl	8001f48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40023c00 	.word	0x40023c00

08002944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_InitTick+0x54>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_InitTick+0x58>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4619      	mov	r1, r3
 8002956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295a:	fbb3 f3f1 	udiv	r3, r3, r1
 800295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f967 	bl	8002c36 <HAL_SYSTICK_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e00e      	b.n	8002990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b0f      	cmp	r3, #15
 8002976:	d80a      	bhi.n	800298e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002978:	2200      	movs	r2, #0
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f000 f92f 	bl	8002be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002984:	4a06      	ldr	r2, [pc, #24]	; (80029a0 <HAL_InitTick+0x5c>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e000      	b.n	8002990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	20000000 	.word	0x20000000
 800299c:	20000008 	.word	0x20000008
 80029a0:	20000004 	.word	0x20000004

080029a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_IncTick+0x20>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_IncTick+0x24>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <HAL_IncTick+0x24>)
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	20000008 	.word	0x20000008
 80029c8:	20002f08 	.word	0x20002f08

080029cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return uwTick;
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_GetTick+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	20002f08 	.word	0x20002f08

080029e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029ec:	f7ff ffee 	bl	80029cc <HAL_GetTick>
 80029f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d005      	beq.n	8002a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_Delay+0x44>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a0a:	bf00      	nop
 8002a0c:	f7ff ffde 	bl	80029cc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d8f7      	bhi.n	8002a0c <HAL_Delay+0x28>
  {
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000008 	.word	0x20000008

08002a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4907      	ldr	r1, [pc, #28]	; (8002ac8 <__NVIC_EnableIRQ+0x38>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0a      	blt.n	8002af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	490c      	ldr	r1, [pc, #48]	; (8002b18 <__NVIC_SetPriority+0x4c>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	440b      	add	r3, r1
 8002af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af4:	e00a      	b.n	8002b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4908      	ldr	r1, [pc, #32]	; (8002b1c <__NVIC_SetPriority+0x50>)
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3b04      	subs	r3, #4
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	440b      	add	r3, r1
 8002b0a:	761a      	strb	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f1c3 0307 	rsb	r3, r3, #7
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf28      	it	cs
 8002b3e:	2304      	movcs	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d902      	bls.n	8002b50 <NVIC_EncodePriority+0x30>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b03      	subs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <NVIC_EncodePriority+0x32>
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	4313      	orrs	r3, r2
         );
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	; 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b98:	d301      	bcc.n	8002b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00f      	b.n	8002bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <SysTick_Config+0x40>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba6:	210f      	movs	r1, #15
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	f7ff ff8e 	bl	8002acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <SysTick_Config+0x40>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <SysTick_Config+0x40>)
 8002bb8:	2207      	movs	r2, #7
 8002bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	e000e010 	.word	0xe000e010

08002bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ff29 	bl	8002a2c <__NVIC_SetPriorityGrouping>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf4:	f7ff ff3e 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	6978      	ldr	r0, [r7, #20]
 8002c00:	f7ff ff8e 	bl	8002b20 <NVIC_EncodePriority>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff5d 	bl	8002acc <__NVIC_SetPriority>
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff31 	bl	8002a90 <__NVIC_EnableIRQ>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffa2 	bl	8002b88 <SysTick_Config>
 8002c44:	4603      	mov	r3, r0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff feb6 	bl	80029cc <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e099      	b.n	8002da0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0201 	bic.w	r2, r2, #1
 8002c8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c8c:	e00f      	b.n	8002cae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c8e:	f7ff fe9d 	bl	80029cc <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	2b05      	cmp	r3, #5
 8002c9a:	d908      	bls.n	8002cae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e078      	b.n	8002da0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0301 	and.w	r3, r3, #1
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e8      	bne.n	8002c8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <HAL_DMA_Init+0x158>)
 8002cc8:	4013      	ands	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ce6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cf2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	2b04      	cmp	r3, #4
 8002d06:	d107      	bne.n	8002d18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	4313      	orrs	r3, r2
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f023 0307 	bic.w	r3, r3, #7
 8002d2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	d117      	bne.n	8002d72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00e      	beq.n	8002d72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fb01 	bl	800335c <DMA_CheckFifoParam>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d008      	beq.n	8002d72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2240      	movs	r2, #64	; 0x40
 8002d64:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2201      	movs	r2, #1
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e016      	b.n	8002da0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 fab8 	bl	80032f0 <DMA_CalcBaseAndBitshift>
 8002d80:	4603      	mov	r3, r0
 8002d82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d88:	223f      	movs	r2, #63	; 0x3f
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d9e:	2300      	movs	r3, #0
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3718      	adds	r7, #24
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	f010803f 	.word	0xf010803f

08002dac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]
 8002db8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_DMA_Start_IT+0x26>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e040      	b.n	8002e54 <HAL_DMA_Start_IT+0xa8>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d12f      	bne.n	8002e46 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2202      	movs	r2, #2
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 fa4a 	bl	8003294 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e04:	223f      	movs	r2, #63	; 0x3f
 8002e06:	409a      	lsls	r2, r3
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f042 0216 	orr.w	r2, r2, #22
 8002e1a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d007      	beq.n	8002e34 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0208 	orr.w	r2, r2, #8
 8002e32:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e005      	b.n	8002e52 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3718      	adds	r7, #24
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e68:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e6a:	f7ff fdaf 	bl	80029cc <HAL_GetTick>
 8002e6e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d008      	beq.n	8002e8e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2280      	movs	r2, #128	; 0x80
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e052      	b.n	8002f34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0216 	bic.w	r2, r2, #22
 8002e9c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	695a      	ldr	r2, [r3, #20]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d103      	bne.n	8002ebe <HAL_DMA_Abort+0x62>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d007      	beq.n	8002ece <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0208 	bic.w	r2, r2, #8
 8002ecc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0201 	bic.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ede:	e013      	b.n	8002f08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ee0:	f7ff fd74 	bl	80029cc <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b05      	cmp	r3, #5
 8002eec:	d90c      	bls.n	8002f08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2203      	movs	r2, #3
 8002ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e015      	b.n	8002f34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d1e4      	bne.n	8002ee0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	223f      	movs	r2, #63	; 0x3f
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d004      	beq.n	8002f5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2280      	movs	r2, #128	; 0x80
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e00c      	b.n	8002f74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2205      	movs	r2, #5
 8002f5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0201 	bic.w	r2, r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f8c:	4b8e      	ldr	r3, [pc, #568]	; (80031c8 <HAL_DMA_IRQHandler+0x248>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a8e      	ldr	r2, [pc, #568]	; (80031cc <HAL_DMA_IRQHandler+0x24c>)
 8002f92:	fba2 2303 	umull	r2, r3, r2, r3
 8002f96:	0a9b      	lsrs	r3, r3, #10
 8002f98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002faa:	2208      	movs	r2, #8
 8002fac:	409a      	lsls	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d01a      	beq.n	8002fec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d013      	beq.n	8002fec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0204 	bic.w	r2, r2, #4
 8002fd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	2208      	movs	r2, #8
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	f043 0201 	orr.w	r2, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d012      	beq.n	8003022 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	695b      	ldr	r3, [r3, #20]
 8003002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00b      	beq.n	8003022 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	2201      	movs	r2, #1
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800301a:	f043 0202 	orr.w	r2, r3, #2
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003026:	2204      	movs	r2, #4
 8003028:	409a      	lsls	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d012      	beq.n	8003058 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00b      	beq.n	8003058 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003044:	2204      	movs	r2, #4
 8003046:	409a      	lsls	r2, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	f043 0204 	orr.w	r2, r3, #4
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	2210      	movs	r2, #16
 800305e:	409a      	lsls	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d043      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0308 	and.w	r3, r3, #8
 8003072:	2b00      	cmp	r3, #0
 8003074:	d03c      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307a:	2210      	movs	r2, #16
 800307c:	409a      	lsls	r2, r3
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d018      	beq.n	80030c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d108      	bne.n	80030b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d024      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
 80030ae:	e01f      	b.n	80030f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01b      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	4798      	blx	r3
 80030c0:	e016      	b.n	80030f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d107      	bne.n	80030e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0208 	bic.w	r2, r2, #8
 80030de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	2220      	movs	r2, #32
 80030f6:	409a      	lsls	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 808f 	beq.w	8003220 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0310 	and.w	r3, r3, #16
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 8087 	beq.w	8003220 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003116:	2220      	movs	r2, #32
 8003118:	409a      	lsls	r2, r3
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b05      	cmp	r3, #5
 8003128:	d136      	bne.n	8003198 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f022 0216 	bic.w	r2, r2, #22
 8003138:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695a      	ldr	r2, [r3, #20]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003148:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <HAL_DMA_IRQHandler+0x1da>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003156:	2b00      	cmp	r3, #0
 8003158:	d007      	beq.n	800316a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681a      	ldr	r2, [r3, #0]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 0208 	bic.w	r2, r2, #8
 8003168:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	223f      	movs	r2, #63	; 0x3f
 8003170:	409a      	lsls	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800318a:	2b00      	cmp	r3, #0
 800318c:	d07e      	beq.n	800328c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	4798      	blx	r3
        }
        return;
 8003196:	e079      	b.n	800328c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d01d      	beq.n	80031e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10d      	bne.n	80031d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d031      	beq.n	8003220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c0:	6878      	ldr	r0, [r7, #4]
 80031c2:	4798      	blx	r3
 80031c4:	e02c      	b.n	8003220 <HAL_DMA_IRQHandler+0x2a0>
 80031c6:	bf00      	nop
 80031c8:	20000000 	.word	0x20000000
 80031cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d023      	beq.n	8003220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
 80031e0:	e01e      	b.n	8003220 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d10f      	bne.n	8003210 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0210 	bic.w	r2, r2, #16
 80031fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	2b00      	cmp	r3, #0
 8003226:	d032      	beq.n	800328e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322c:	f003 0301 	and.w	r3, r3, #1
 8003230:	2b00      	cmp	r3, #0
 8003232:	d022      	beq.n	800327a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2205      	movs	r2, #5
 8003238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0201 	bic.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	3301      	adds	r3, #1
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	429a      	cmp	r2, r3
 8003256:	d307      	bcc.n	8003268 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f2      	bne.n	800324c <HAL_DMA_IRQHandler+0x2cc>
 8003266:	e000      	b.n	800326a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003268:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	4798      	blx	r3
 800328a:	e000      	b.n	800328e <HAL_DMA_IRQHandler+0x30e>
        return;
 800328c:	bf00      	nop
    }
  }
}
 800328e:	3718      	adds	r7, #24
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	60b9      	str	r1, [r7, #8]
 800329e:	607a      	str	r2, [r7, #4]
 80032a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80032b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b40      	cmp	r3, #64	; 0x40
 80032c0:	d108      	bne.n	80032d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032d2:	e007      	b.n	80032e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	60da      	str	r2, [r3, #12]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	3b10      	subs	r3, #16
 8003300:	4a14      	ldr	r2, [pc, #80]	; (8003354 <DMA_CalcBaseAndBitshift+0x64>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	091b      	lsrs	r3, r3, #4
 8003308:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800330a:	4a13      	ldr	r2, [pc, #76]	; (8003358 <DMA_CalcBaseAndBitshift+0x68>)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4413      	add	r3, r2
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	461a      	mov	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2b03      	cmp	r3, #3
 800331c:	d909      	bls.n	8003332 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003326:	f023 0303 	bic.w	r3, r3, #3
 800332a:	1d1a      	adds	r2, r3, #4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	659a      	str	r2, [r3, #88]	; 0x58
 8003330:	e007      	b.n	8003342 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800333a:	f023 0303 	bic.w	r3, r3, #3
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003346:	4618      	mov	r0, r3
 8003348:	3714      	adds	r7, #20
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	aaaaaaab 	.word	0xaaaaaaab
 8003358:	0800e998 	.word	0x0800e998

0800335c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800335c:	b480      	push	{r7}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003364:	2300      	movs	r3, #0
 8003366:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800336c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d11f      	bne.n	80033b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b03      	cmp	r3, #3
 800337a:	d856      	bhi.n	800342a <DMA_CheckFifoParam+0xce>
 800337c:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <DMA_CheckFifoParam+0x28>)
 800337e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003382:	bf00      	nop
 8003384:	08003395 	.word	0x08003395
 8003388:	080033a7 	.word	0x080033a7
 800338c:	08003395 	.word	0x08003395
 8003390:	0800342b 	.word	0x0800342b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d046      	beq.n	800342e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a4:	e043      	b.n	800342e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033ae:	d140      	bne.n	8003432 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033b4:	e03d      	b.n	8003432 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033be:	d121      	bne.n	8003404 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	2b03      	cmp	r3, #3
 80033c4:	d837      	bhi.n	8003436 <DMA_CheckFifoParam+0xda>
 80033c6:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <DMA_CheckFifoParam+0x70>)
 80033c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033cc:	080033dd 	.word	0x080033dd
 80033d0:	080033e3 	.word	0x080033e3
 80033d4:	080033dd 	.word	0x080033dd
 80033d8:	080033f5 	.word	0x080033f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
      break;
 80033e0:	e030      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d025      	beq.n	800343a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f2:	e022      	b.n	800343a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033fc:	d11f      	bne.n	800343e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003402:	e01c      	b.n	800343e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d903      	bls.n	8003412 <DMA_CheckFifoParam+0xb6>
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2b03      	cmp	r3, #3
 800340e:	d003      	beq.n	8003418 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003410:	e018      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
      break;
 8003416:	e015      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00e      	beq.n	8003442 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	73fb      	strb	r3, [r7, #15]
      break;
 8003428:	e00b      	b.n	8003442 <DMA_CheckFifoParam+0xe6>
      break;
 800342a:	bf00      	nop
 800342c:	e00a      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      break;
 800342e:	bf00      	nop
 8003430:	e008      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      break;
 8003432:	bf00      	nop
 8003434:	e006      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      break;
 8003436:	bf00      	nop
 8003438:	e004      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      break;
 800343a:	bf00      	nop
 800343c:	e002      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      break;   
 800343e:	bf00      	nop
 8003440:	e000      	b.n	8003444 <DMA_CheckFifoParam+0xe8>
      break;
 8003442:	bf00      	nop
    }
  } 
  
  return status; 
 8003444:	7bfb      	ldrb	r3, [r7, #15]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3714      	adds	r7, #20
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop

08003454 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	60f8      	str	r0, [r7, #12]
 800345c:	60b9      	str	r1, [r7, #8]
 800345e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003466:	4b23      	ldr	r3, [pc, #140]	; (80034f4 <HAL_FLASH_Program+0xa0>)
 8003468:	7e1b      	ldrb	r3, [r3, #24]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d101      	bne.n	8003472 <HAL_FLASH_Program+0x1e>
 800346e:	2302      	movs	r3, #2
 8003470:	e03b      	b.n	80034ea <HAL_FLASH_Program+0x96>
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_FLASH_Program+0xa0>)
 8003474:	2201      	movs	r2, #1
 8003476:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003478:	f24c 3050 	movw	r0, #50000	; 0xc350
 800347c:	f000 f870 	bl	8003560 <FLASH_WaitForLastOperation>
 8003480:	4603      	mov	r3, r0
 8003482:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8003484:	7dfb      	ldrb	r3, [r7, #23]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d12b      	bne.n	80034e2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d105      	bne.n	800349c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003490:	783b      	ldrb	r3, [r7, #0]
 8003492:	4619      	mov	r1, r3
 8003494:	68b8      	ldr	r0, [r7, #8]
 8003496:	f000 f91b 	bl	80036d0 <FLASH_Program_Byte>
 800349a:	e016      	b.n	80034ca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d105      	bne.n	80034ae <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80034a2:	883b      	ldrh	r3, [r7, #0]
 80034a4:	4619      	mov	r1, r3
 80034a6:	68b8      	ldr	r0, [r7, #8]
 80034a8:	f000 f8ee 	bl	8003688 <FLASH_Program_HalfWord>
 80034ac:	e00d      	b.n	80034ca <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d105      	bne.n	80034c0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	4619      	mov	r1, r3
 80034b8:	68b8      	ldr	r0, [r7, #8]
 80034ba:	f000 f8c3 	bl	8003644 <FLASH_Program_Word>
 80034be:	e004      	b.n	80034ca <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80034c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80034c4:	68b8      	ldr	r0, [r7, #8]
 80034c6:	f000 f88b 	bl	80035e0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80034ca:	f24c 3050 	movw	r0, #50000	; 0xc350
 80034ce:	f000 f847 	bl	8003560 <FLASH_WaitForLastOperation>
 80034d2:	4603      	mov	r3, r0
 80034d4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80034d6:	4b08      	ldr	r3, [pc, #32]	; (80034f8 <HAL_FLASH_Program+0xa4>)
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	4a07      	ldr	r2, [pc, #28]	; (80034f8 <HAL_FLASH_Program+0xa4>)
 80034dc:	f023 0301 	bic.w	r3, r3, #1
 80034e0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80034e2:	4b04      	ldr	r3, [pc, #16]	; (80034f4 <HAL_FLASH_Program+0xa0>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	761a      	strb	r2, [r3, #24]
  
  return status;
 80034e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3718      	adds	r7, #24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20002f0c 	.word	0x20002f0c
 80034f8:	40023c00 	.word	0x40023c00

080034fc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003502:	2300      	movs	r3, #0
 8003504:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003506:	4b0b      	ldr	r3, [pc, #44]	; (8003534 <HAL_FLASH_Unlock+0x38>)
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	da0b      	bge.n	8003526 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_FLASH_Unlock+0x38>)
 8003510:	4a09      	ldr	r2, [pc, #36]	; (8003538 <HAL_FLASH_Unlock+0x3c>)
 8003512:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003514:	4b07      	ldr	r3, [pc, #28]	; (8003534 <HAL_FLASH_Unlock+0x38>)
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_FLASH_Unlock+0x40>)
 8003518:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_FLASH_Unlock+0x38>)
 800351c:	691b      	ldr	r3, [r3, #16]
 800351e:	2b00      	cmp	r3, #0
 8003520:	da01      	bge.n	8003526 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003526:	79fb      	ldrb	r3, [r7, #7]
}
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40023c00 	.word	0x40023c00
 8003538:	45670123 	.word	0x45670123
 800353c:	cdef89ab 	.word	0xcdef89ab

08003540 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_FLASH_Lock+0x1c>)
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	4a04      	ldr	r2, [pc, #16]	; (800355c <HAL_FLASH_Lock+0x1c>)
 800354a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800354e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40023c00 	.word	0x40023c00

08003560 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003560:	b580      	push	{r7, lr}
 8003562:	b084      	sub	sp, #16
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <FLASH_WaitForLastOperation+0x78>)
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003572:	f7ff fa2b 	bl	80029cc <HAL_GetTick>
 8003576:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8003578:	e010      	b.n	800359c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003580:	d00c      	beq.n	800359c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <FLASH_WaitForLastOperation+0x38>
 8003588:	f7ff fa20 	bl	80029cc <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	429a      	cmp	r2, r3
 8003596:	d201      	bcs.n	800359c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e019      	b.n	80035d0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800359c:	4b0f      	ldr	r3, [pc, #60]	; (80035dc <FLASH_WaitForLastOperation+0x7c>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d1e8      	bne.n	800357a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80035a8:	4b0c      	ldr	r3, [pc, #48]	; (80035dc <FLASH_WaitForLastOperation+0x7c>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <FLASH_WaitForLastOperation+0x7c>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80035ba:	4b08      	ldr	r3, [pc, #32]	; (80035dc <FLASH_WaitForLastOperation+0x7c>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80035c6:	f000 f8a5 	bl	8003714 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
  
}  
 80035d0:	4618      	mov	r0, r3
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20002f0c 	.word	0x20002f0c
 80035dc:	40023c00 	.word	0x40023c00

080035e0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b085      	sub	sp, #20
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035ec:	4b14      	ldr	r3, [pc, #80]	; (8003640 <FLASH_Program_DoubleWord+0x60>)
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <FLASH_Program_DoubleWord+0x60>)
 80035f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <FLASH_Program_DoubleWord+0x60>)
 80035fa:	691b      	ldr	r3, [r3, #16]
 80035fc:	4a10      	ldr	r2, [pc, #64]	; (8003640 <FLASH_Program_DoubleWord+0x60>)
 80035fe:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003602:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <FLASH_Program_DoubleWord+0x60>)
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <FLASH_Program_DoubleWord+0x60>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003616:	f3bf 8f6f 	isb	sy
}
 800361a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800361c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	f04f 0300 	mov.w	r3, #0
 8003628:	000a      	movs	r2, r1
 800362a:	2300      	movs	r3, #0
 800362c:	68f9      	ldr	r1, [r7, #12]
 800362e:	3104      	adds	r1, #4
 8003630:	4613      	mov	r3, r2
 8003632:	600b      	str	r3, [r1, #0]
}
 8003634:	bf00      	nop
 8003636:	3714      	adds	r7, #20
 8003638:	46bd      	mov	sp, r7
 800363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363e:	4770      	bx	lr
 8003640:	40023c00 	.word	0x40023c00

08003644 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
 800364c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800364e:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <FLASH_Program_Word+0x40>)
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	4a0c      	ldr	r2, [pc, #48]	; (8003684 <FLASH_Program_Word+0x40>)
 8003654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003658:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800365a:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <FLASH_Program_Word+0x40>)
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	4a09      	ldr	r2, [pc, #36]	; (8003684 <FLASH_Program_Word+0x40>)
 8003660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003664:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003666:	4b07      	ldr	r3, [pc, #28]	; (8003684 <FLASH_Program_Word+0x40>)
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	4a06      	ldr	r2, [pc, #24]	; (8003684 <FLASH_Program_Word+0x40>)
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	601a      	str	r2, [r3, #0]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40023c00 	.word	0x40023c00

08003688 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	460b      	mov	r3, r1
 8003692:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003694:	4b0d      	ldr	r3, [pc, #52]	; (80036cc <FLASH_Program_HalfWord+0x44>)
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	4a0c      	ldr	r2, [pc, #48]	; (80036cc <FLASH_Program_HalfWord+0x44>)
 800369a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800369e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80036a0:	4b0a      	ldr	r3, [pc, #40]	; (80036cc <FLASH_Program_HalfWord+0x44>)
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	4a09      	ldr	r2, [pc, #36]	; (80036cc <FLASH_Program_HalfWord+0x44>)
 80036a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <FLASH_Program_HalfWord+0x44>)
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <FLASH_Program_HalfWord+0x44>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	801a      	strh	r2, [r3, #0]
}
 80036be:	bf00      	nop
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	40023c00 	.word	0x40023c00

080036d0 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <FLASH_Program_Byte+0x40>)
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	4a0b      	ldr	r2, [pc, #44]	; (8003710 <FLASH_Program_Byte+0x40>)
 80036e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80036e8:	4b09      	ldr	r3, [pc, #36]	; (8003710 <FLASH_Program_Byte+0x40>)
 80036ea:	4a09      	ldr	r2, [pc, #36]	; (8003710 <FLASH_Program_Byte+0x40>)
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80036f0:	4b07      	ldr	r3, [pc, #28]	; (8003710 <FLASH_Program_Byte+0x40>)
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	4a06      	ldr	r2, [pc, #24]	; (8003710 <FLASH_Program_Byte+0x40>)
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	701a      	strb	r2, [r3, #0]
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40023c00 	.word	0x40023c00

08003714 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003718:	4b27      	ldr	r3, [pc, #156]	; (80037b8 <FLASH_SetErrorCode+0xa4>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	f003 0310 	and.w	r3, r3, #16
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <FLASH_SetErrorCode+0xa8>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f043 0310 	orr.w	r3, r3, #16
 800372c:	4a23      	ldr	r2, [pc, #140]	; (80037bc <FLASH_SetErrorCode+0xa8>)
 800372e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003730:	4b21      	ldr	r3, [pc, #132]	; (80037b8 <FLASH_SetErrorCode+0xa4>)
 8003732:	2210      	movs	r2, #16
 8003734:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <FLASH_SetErrorCode+0xa4>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d008      	beq.n	8003754 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003742:	4b1e      	ldr	r3, [pc, #120]	; (80037bc <FLASH_SetErrorCode+0xa8>)
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f043 0308 	orr.w	r3, r3, #8
 800374a:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <FLASH_SetErrorCode+0xa8>)
 800374c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800374e:	4b1a      	ldr	r3, [pc, #104]	; (80037b8 <FLASH_SetErrorCode+0xa4>)
 8003750:	2220      	movs	r2, #32
 8003752:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003754:	4b18      	ldr	r3, [pc, #96]	; (80037b8 <FLASH_SetErrorCode+0xa4>)
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375c:	2b00      	cmp	r3, #0
 800375e:	d008      	beq.n	8003772 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <FLASH_SetErrorCode+0xa8>)
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f043 0304 	orr.w	r3, r3, #4
 8003768:	4a14      	ldr	r2, [pc, #80]	; (80037bc <FLASH_SetErrorCode+0xa8>)
 800376a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800376c:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <FLASH_SetErrorCode+0xa4>)
 800376e:	2240      	movs	r2, #64	; 0x40
 8003770:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003772:	4b11      	ldr	r3, [pc, #68]	; (80037b8 <FLASH_SetErrorCode+0xa4>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800377e:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <FLASH_SetErrorCode+0xa8>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f043 0302 	orr.w	r3, r3, #2
 8003786:	4a0d      	ldr	r2, [pc, #52]	; (80037bc <FLASH_SetErrorCode+0xa8>)
 8003788:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <FLASH_SetErrorCode+0xa4>)
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003790:	4b09      	ldr	r3, [pc, #36]	; (80037b8 <FLASH_SetErrorCode+0xa4>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <FLASH_SetErrorCode+0xa8>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	f043 0320 	orr.w	r3, r3, #32
 80037a4:	4a05      	ldr	r2, [pc, #20]	; (80037bc <FLASH_SetErrorCode+0xa8>)
 80037a6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80037a8:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <FLASH_SetErrorCode+0xa4>)
 80037aa:	2202      	movs	r2, #2
 80037ac:	60da      	str	r2, [r3, #12]
  }
}
 80037ae:	bf00      	nop
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	40023c00 	.word	0x40023c00
 80037bc:	20002f0c 	.word	0x20002f0c

080037c0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d102      	bne.n	80037dc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	e010      	b.n	80037fe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d103      	bne.n	80037ea <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80037e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	e009      	b.n	80037fe <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80037ea:	78fb      	ldrb	r3, [r7, #3]
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d103      	bne.n	80037f8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80037f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	e002      	b.n	80037fe <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80037f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80037fc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80037fe:	4b13      	ldr	r3, [pc, #76]	; (800384c <FLASH_Erase_Sector+0x8c>)
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	4a12      	ldr	r2, [pc, #72]	; (800384c <FLASH_Erase_Sector+0x8c>)
 8003804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003808:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800380a:	4b10      	ldr	r3, [pc, #64]	; (800384c <FLASH_Erase_Sector+0x8c>)
 800380c:	691a      	ldr	r2, [r3, #16]
 800380e:	490f      	ldr	r1, [pc, #60]	; (800384c <FLASH_Erase_Sector+0x8c>)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <FLASH_Erase_Sector+0x8c>)
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	4a0c      	ldr	r2, [pc, #48]	; (800384c <FLASH_Erase_Sector+0x8c>)
 800381c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8003820:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <FLASH_Erase_Sector+0x8c>)
 8003824:	691a      	ldr	r2, [r3, #16]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4313      	orrs	r3, r2
 800382c:	4a07      	ldr	r2, [pc, #28]	; (800384c <FLASH_Erase_Sector+0x8c>)
 800382e:	f043 0302 	orr.w	r3, r3, #2
 8003832:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <FLASH_Erase_Sector+0x8c>)
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	4a04      	ldr	r2, [pc, #16]	; (800384c <FLASH_Erase_Sector+0x8c>)
 800383a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800383e:	6113      	str	r3, [r2, #16]
}
 8003840:	bf00      	nop
 8003842:	3714      	adds	r7, #20
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	40023c00 	.word	0x40023c00

08003850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	e16b      	b.n	8003b44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800386c:	2201      	movs	r2, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	429a      	cmp	r2, r3
 8003886:	f040 815a 	bne.w	8003b3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b01      	cmp	r3, #1
 8003894:	d005      	beq.n	80038a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d130      	bne.n	8003904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	2203      	movs	r2, #3
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d8:	2201      	movs	r2, #1
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 0201 	and.w	r2, r3, #1
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	2b03      	cmp	r3, #3
 800390e:	d017      	beq.n	8003940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	2203      	movs	r2, #3
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d123      	bne.n	8003994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	08da      	lsrs	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3208      	adds	r2, #8
 8003954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	220f      	movs	r2, #15
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	08da      	lsrs	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3208      	adds	r2, #8
 800398e:	69b9      	ldr	r1, [r7, #24]
 8003990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	2203      	movs	r2, #3
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0203 	and.w	r2, r3, #3
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80b4 	beq.w	8003b3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	4b60      	ldr	r3, [pc, #384]	; (8003b5c <HAL_GPIO_Init+0x30c>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	4a5f      	ldr	r2, [pc, #380]	; (8003b5c <HAL_GPIO_Init+0x30c>)
 80039e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e4:	6453      	str	r3, [r2, #68]	; 0x44
 80039e6:	4b5d      	ldr	r3, [pc, #372]	; (8003b5c <HAL_GPIO_Init+0x30c>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039f2:	4a5b      	ldr	r2, [pc, #364]	; (8003b60 <HAL_GPIO_Init+0x310>)
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	089b      	lsrs	r3, r3, #2
 80039f8:	3302      	adds	r3, #2
 80039fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	220f      	movs	r2, #15
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a52      	ldr	r2, [pc, #328]	; (8003b64 <HAL_GPIO_Init+0x314>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d02b      	beq.n	8003a76 <HAL_GPIO_Init+0x226>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a51      	ldr	r2, [pc, #324]	; (8003b68 <HAL_GPIO_Init+0x318>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d025      	beq.n	8003a72 <HAL_GPIO_Init+0x222>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a50      	ldr	r2, [pc, #320]	; (8003b6c <HAL_GPIO_Init+0x31c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01f      	beq.n	8003a6e <HAL_GPIO_Init+0x21e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a4f      	ldr	r2, [pc, #316]	; (8003b70 <HAL_GPIO_Init+0x320>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d019      	beq.n	8003a6a <HAL_GPIO_Init+0x21a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a4e      	ldr	r2, [pc, #312]	; (8003b74 <HAL_GPIO_Init+0x324>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_GPIO_Init+0x216>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a4d      	ldr	r2, [pc, #308]	; (8003b78 <HAL_GPIO_Init+0x328>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00d      	beq.n	8003a62 <HAL_GPIO_Init+0x212>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a4c      	ldr	r2, [pc, #304]	; (8003b7c <HAL_GPIO_Init+0x32c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d007      	beq.n	8003a5e <HAL_GPIO_Init+0x20e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4b      	ldr	r2, [pc, #300]	; (8003b80 <HAL_GPIO_Init+0x330>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d101      	bne.n	8003a5a <HAL_GPIO_Init+0x20a>
 8003a56:	2307      	movs	r3, #7
 8003a58:	e00e      	b.n	8003a78 <HAL_GPIO_Init+0x228>
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	e00c      	b.n	8003a78 <HAL_GPIO_Init+0x228>
 8003a5e:	2306      	movs	r3, #6
 8003a60:	e00a      	b.n	8003a78 <HAL_GPIO_Init+0x228>
 8003a62:	2305      	movs	r3, #5
 8003a64:	e008      	b.n	8003a78 <HAL_GPIO_Init+0x228>
 8003a66:	2304      	movs	r3, #4
 8003a68:	e006      	b.n	8003a78 <HAL_GPIO_Init+0x228>
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e004      	b.n	8003a78 <HAL_GPIO_Init+0x228>
 8003a6e:	2302      	movs	r3, #2
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_Init+0x228>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <HAL_GPIO_Init+0x228>
 8003a76:	2300      	movs	r3, #0
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	f002 0203 	and.w	r2, r2, #3
 8003a7e:	0092      	lsls	r2, r2, #2
 8003a80:	4093      	lsls	r3, r2
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a88:	4935      	ldr	r1, [pc, #212]	; (8003b60 <HAL_GPIO_Init+0x310>)
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	089b      	lsrs	r3, r3, #2
 8003a8e:	3302      	adds	r3, #2
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a96:	4b3b      	ldr	r3, [pc, #236]	; (8003b84 <HAL_GPIO_Init+0x334>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	43db      	mvns	r3, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d003      	beq.n	8003aba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003aba:	4a32      	ldr	r2, [pc, #200]	; (8003b84 <HAL_GPIO_Init+0x334>)
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac0:	4b30      	ldr	r3, [pc, #192]	; (8003b84 <HAL_GPIO_Init+0x334>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ae4:	4a27      	ldr	r2, [pc, #156]	; (8003b84 <HAL_GPIO_Init+0x334>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aea:	4b26      	ldr	r3, [pc, #152]	; (8003b84 <HAL_GPIO_Init+0x334>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	4013      	ands	r3, r2
 8003af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b0e:	4a1d      	ldr	r2, [pc, #116]	; (8003b84 <HAL_GPIO_Init+0x334>)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_GPIO_Init+0x334>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	4013      	ands	r3, r2
 8003b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b38:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <HAL_GPIO_Init+0x334>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	3301      	adds	r3, #1
 8003b42:	61fb      	str	r3, [r7, #28]
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	f67f ae90 	bls.w	800386c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3724      	adds	r7, #36	; 0x24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	40013800 	.word	0x40013800
 8003b64:	40020000 	.word	0x40020000
 8003b68:	40020400 	.word	0x40020400
 8003b6c:	40020800 	.word	0x40020800
 8003b70:	40020c00 	.word	0x40020c00
 8003b74:	40021000 	.word	0x40021000
 8003b78:	40021400 	.word	0x40021400
 8003b7c:	40021800 	.word	0x40021800
 8003b80:	40021c00 	.word	0x40021c00
 8003b84:	40013c00 	.word	0x40013c00

08003b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	887b      	ldrh	r3, [r7, #2]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e001      	b.n	8003baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bc8:	787b      	ldrb	r3, [r7, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003bd4:	e003      	b.n	8003bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003bd6:	887b      	ldrh	r3, [r7, #2]
 8003bd8:	041a      	lsls	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	619a      	str	r2, [r3, #24]
}
 8003bde:	bf00      	nop
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b085      	sub	sp, #20
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003bfc:	887a      	ldrh	r2, [r7, #2]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4013      	ands	r3, r2
 8003c02:	041a      	lsls	r2, r3, #16
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	43d9      	mvns	r1, r3
 8003c08:	887b      	ldrh	r3, [r7, #2]
 8003c0a:	400b      	ands	r3, r1
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	619a      	str	r2, [r3, #24]
}
 8003c12:	bf00      	nop
 8003c14:	3714      	adds	r7, #20
 8003c16:	46bd      	mov	sp, r7
 8003c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1c:	4770      	bx	lr
	...

08003c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d101      	bne.n	8003c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e12b      	b.n	8003e8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d106      	bne.n	8003c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f7fe f9a6 	bl	8001f98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2224      	movs	r2, #36	; 0x24
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0201 	bic.w	r2, r2, #1
 8003c62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c84:	f001 fffe 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 8003c88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	4a81      	ldr	r2, [pc, #516]	; (8003e94 <HAL_I2C_Init+0x274>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d807      	bhi.n	8003ca4 <HAL_I2C_Init+0x84>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a80      	ldr	r2, [pc, #512]	; (8003e98 <HAL_I2C_Init+0x278>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	bf94      	ite	ls
 8003c9c:	2301      	movls	r3, #1
 8003c9e:	2300      	movhi	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e006      	b.n	8003cb2 <HAL_I2C_Init+0x92>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	4a7d      	ldr	r2, [pc, #500]	; (8003e9c <HAL_I2C_Init+0x27c>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	bf94      	ite	ls
 8003cac:	2301      	movls	r3, #1
 8003cae:	2300      	movhi	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d001      	beq.n	8003cba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e0e7      	b.n	8003e8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4a78      	ldr	r2, [pc, #480]	; (8003ea0 <HAL_I2C_Init+0x280>)
 8003cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc2:	0c9b      	lsrs	r3, r3, #18
 8003cc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	4a6a      	ldr	r2, [pc, #424]	; (8003e94 <HAL_I2C_Init+0x274>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d802      	bhi.n	8003cf4 <HAL_I2C_Init+0xd4>
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	e009      	b.n	8003d08 <HAL_I2C_Init+0xe8>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cfa:	fb02 f303 	mul.w	r3, r2, r3
 8003cfe:	4a69      	ldr	r2, [pc, #420]	; (8003ea4 <HAL_I2C_Init+0x284>)
 8003d00:	fba2 2303 	umull	r2, r3, r2, r3
 8003d04:	099b      	lsrs	r3, r3, #6
 8003d06:	3301      	adds	r3, #1
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6812      	ldr	r2, [r2, #0]
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	69db      	ldr	r3, [r3, #28]
 8003d16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	495c      	ldr	r1, [pc, #368]	; (8003e94 <HAL_I2C_Init+0x274>)
 8003d24:	428b      	cmp	r3, r1
 8003d26:	d819      	bhi.n	8003d5c <HAL_I2C_Init+0x13c>
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	1e59      	subs	r1, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d36:	1c59      	adds	r1, r3, #1
 8003d38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d3c:	400b      	ands	r3, r1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <HAL_I2C_Init+0x138>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1e59      	subs	r1, r3, #1
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d50:	3301      	adds	r3, #1
 8003d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d56:	e051      	b.n	8003dfc <HAL_I2C_Init+0x1dc>
 8003d58:	2304      	movs	r3, #4
 8003d5a:	e04f      	b.n	8003dfc <HAL_I2C_Init+0x1dc>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d111      	bne.n	8003d88 <HAL_I2C_Init+0x168>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	1e58      	subs	r0, r3, #1
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6859      	ldr	r1, [r3, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	440b      	add	r3, r1
 8003d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d76:	3301      	adds	r3, #1
 8003d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	bf0c      	ite	eq
 8003d80:	2301      	moveq	r3, #1
 8003d82:	2300      	movne	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e012      	b.n	8003dae <HAL_I2C_Init+0x18e>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	1e58      	subs	r0, r3, #1
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6859      	ldr	r1, [r3, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	440b      	add	r3, r1
 8003d96:	0099      	lsls	r1, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d9e:	3301      	adds	r3, #1
 8003da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_I2C_Init+0x196>
 8003db2:	2301      	movs	r3, #1
 8003db4:	e022      	b.n	8003dfc <HAL_I2C_Init+0x1dc>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10e      	bne.n	8003ddc <HAL_I2C_Init+0x1bc>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	1e58      	subs	r0, r3, #1
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6859      	ldr	r1, [r3, #4]
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	005b      	lsls	r3, r3, #1
 8003dca:	440b      	add	r3, r1
 8003dcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dda:	e00f      	b.n	8003dfc <HAL_I2C_Init+0x1dc>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	1e58      	subs	r0, r3, #1
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6859      	ldr	r1, [r3, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	0099      	lsls	r1, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df2:	3301      	adds	r3, #1
 8003df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003df8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	6809      	ldr	r1, [r1, #0]
 8003e00:	4313      	orrs	r3, r2
 8003e02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69da      	ldr	r2, [r3, #28]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	430a      	orrs	r2, r1
 8003e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	6911      	ldr	r1, [r2, #16]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	68d2      	ldr	r2, [r2, #12]
 8003e36:	4311      	orrs	r1, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	430b      	orrs	r3, r1
 8003e3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695a      	ldr	r2, [r3, #20]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f042 0201 	orr.w	r2, r2, #1
 8003e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3710      	adds	r7, #16
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	000186a0 	.word	0x000186a0
 8003e98:	001e847f 	.word	0x001e847f
 8003e9c:	003d08ff 	.word	0x003d08ff
 8003ea0:	431bde83 	.word	0x431bde83
 8003ea4:	10624dd3 	.word	0x10624dd3

08003ea8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eaa:	b08f      	sub	sp, #60	; 0x3c
 8003eac:	af0a      	add	r7, sp, #40	; 0x28
 8003eae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e10f      	b.n	80040da <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f008 f92d 	bl	800c134 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2203      	movs	r2, #3
 8003ede:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d102      	bne.n	8003ef4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f004 fc80 	bl	80087fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	603b      	str	r3, [r7, #0]
 8003f04:	687e      	ldr	r6, [r7, #4]
 8003f06:	466d      	mov	r5, sp
 8003f08:	f106 0410 	add.w	r4, r6, #16
 8003f0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f18:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f1c:	1d33      	adds	r3, r6, #4
 8003f1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f20:	6838      	ldr	r0, [r7, #0]
 8003f22:	f004 fb57 	bl	80085d4 <USB_CoreInit>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d005      	beq.n	8003f38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0d0      	b.n	80040da <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2100      	movs	r1, #0
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f004 fc6e 	bl	8008820 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f44:	2300      	movs	r3, #0
 8003f46:	73fb      	strb	r3, [r7, #15]
 8003f48:	e04a      	b.n	8003fe0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f4a:	7bfa      	ldrb	r2, [r7, #15]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	333d      	adds	r3, #61	; 0x3d
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f5e:	7bfa      	ldrb	r2, [r7, #15]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	00db      	lsls	r3, r3, #3
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	333c      	adds	r3, #60	; 0x3c
 8003f6e:	7bfa      	ldrb	r2, [r7, #15]
 8003f70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f72:	7bfa      	ldrb	r2, [r7, #15]
 8003f74:	7bfb      	ldrb	r3, [r7, #15]
 8003f76:	b298      	uxth	r0, r3
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	4413      	add	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	3344      	adds	r3, #68	; 0x44
 8003f86:	4602      	mov	r2, r0
 8003f88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	4413      	add	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	3340      	adds	r3, #64	; 0x40
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003f9e:	7bfa      	ldrb	r2, [r7, #15]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	3348      	adds	r3, #72	; 0x48
 8003fae:	2200      	movs	r2, #0
 8003fb0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fb2:	7bfa      	ldrb	r2, [r7, #15]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	00db      	lsls	r3, r3, #3
 8003fba:	4413      	add	r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	334c      	adds	r3, #76	; 0x4c
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3354      	adds	r3, #84	; 0x54
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fda:	7bfb      	ldrb	r3, [r7, #15]
 8003fdc:	3301      	adds	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
 8003fe0:	7bfa      	ldrb	r2, [r7, #15]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d3af      	bcc.n	8003f4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	73fb      	strb	r3, [r7, #15]
 8003fee:	e044      	b.n	800407a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003ff0:	7bfa      	ldrb	r2, [r7, #15]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004002:	2200      	movs	r2, #0
 8004004:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004018:	7bfa      	ldrb	r2, [r7, #15]
 800401a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800401c:	7bfa      	ldrb	r2, [r7, #15]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	4613      	mov	r3, r2
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800402e:	2200      	movs	r2, #0
 8004030:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004032:	7bfa      	ldrb	r2, [r7, #15]
 8004034:	6879      	ldr	r1, [r7, #4]
 8004036:	4613      	mov	r3, r2
 8004038:	00db      	lsls	r3, r3, #3
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	440b      	add	r3, r1
 8004040:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004044:	2200      	movs	r2, #0
 8004046:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004048:	7bfa      	ldrb	r2, [r7, #15]
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	4413      	add	r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800405a:	2200      	movs	r2, #0
 800405c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800405e:	7bfa      	ldrb	r2, [r7, #15]
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004070:	2200      	movs	r2, #0
 8004072:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004074:	7bfb      	ldrb	r3, [r7, #15]
 8004076:	3301      	adds	r3, #1
 8004078:	73fb      	strb	r3, [r7, #15]
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	429a      	cmp	r2, r3
 8004082:	d3b5      	bcc.n	8003ff0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	603b      	str	r3, [r7, #0]
 800408a:	687e      	ldr	r6, [r7, #4]
 800408c:	466d      	mov	r5, sp
 800408e:	f106 0410 	add.w	r4, r6, #16
 8004092:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004094:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004096:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004098:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800409a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800409e:	e885 0003 	stmia.w	r5, {r0, r1}
 80040a2:	1d33      	adds	r3, r6, #4
 80040a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040a6:	6838      	ldr	r0, [r7, #0]
 80040a8:	f004 fc06 	bl	80088b8 <USB_DevInit>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2202      	movs	r2, #2
 80040b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e00d      	b.n	80040da <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f005 fd55 	bl	8009b82 <USB_DevDisconnect>

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040e2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b084      	sub	sp, #16
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_PCD_Start+0x1c>
 80040fa:	2302      	movs	r3, #2
 80040fc:	e020      	b.n	8004140 <HAL_PCD_Start+0x5e>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	2b01      	cmp	r3, #1
 800410c:	d109      	bne.n	8004122 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004112:	2b01      	cmp	r3, #1
 8004114:	d005      	beq.n	8004122 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f004 fb58 	bl	80087dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4618      	mov	r0, r3
 8004132:	f005 fd05 	bl	8009b40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800413e:	2300      	movs	r3, #0
}
 8004140:	4618      	mov	r0, r3
 8004142:	3710      	adds	r7, #16
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004148:	b590      	push	{r4, r7, lr}
 800414a:	b08d      	sub	sp, #52	; 0x34
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f005 fdc3 	bl	8009cea <USB_GetMode>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	f040 848a 	bne.w	8004a80 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4618      	mov	r0, r3
 8004172:	f005 fd27 	bl	8009bc4 <USB_ReadInterrupts>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8480 	beq.w	8004a7e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	0a1b      	lsrs	r3, r3, #8
 8004188:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f005 fd14 	bl	8009bc4 <USB_ReadInterrupts>
 800419c:	4603      	mov	r3, r0
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d107      	bne.n	80041b6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	695a      	ldr	r2, [r3, #20]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f002 0202 	and.w	r2, r2, #2
 80041b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f005 fd02 	bl	8009bc4 <USB_ReadInterrupts>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f003 0310 	and.w	r3, r3, #16
 80041c6:	2b10      	cmp	r3, #16
 80041c8:	d161      	bne.n	800428e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699a      	ldr	r2, [r3, #24]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f022 0210 	bic.w	r2, r2, #16
 80041d8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80041da:	6a3b      	ldr	r3, [r7, #32]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	f003 020f 	and.w	r2, r3, #15
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	4413      	add	r3, r2
 80041f6:	3304      	adds	r3, #4
 80041f8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	0c5b      	lsrs	r3, r3, #17
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	2b02      	cmp	r3, #2
 8004204:	d124      	bne.n	8004250 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800420c:	4013      	ands	r3, r2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d035      	beq.n	800427e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	091b      	lsrs	r3, r3, #4
 800421a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800421c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004220:	b29b      	uxth	r3, r3
 8004222:	461a      	mov	r2, r3
 8004224:	6a38      	ldr	r0, [r7, #32]
 8004226:	f005 fb39 	bl	800989c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	691a      	ldr	r2, [r3, #16]
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	091b      	lsrs	r3, r3, #4
 8004232:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004236:	441a      	add	r2, r3
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	6a1a      	ldr	r2, [r3, #32]
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004248:	441a      	add	r2, r3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	621a      	str	r2, [r3, #32]
 800424e:	e016      	b.n	800427e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	0c5b      	lsrs	r3, r3, #17
 8004254:	f003 030f 	and.w	r3, r3, #15
 8004258:	2b06      	cmp	r3, #6
 800425a:	d110      	bne.n	800427e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004262:	2208      	movs	r2, #8
 8004264:	4619      	mov	r1, r3
 8004266:	6a38      	ldr	r0, [r7, #32]
 8004268:	f005 fb18 	bl	800989c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004278:	441a      	add	r2, r3
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699a      	ldr	r2, [r3, #24]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f042 0210 	orr.w	r2, r2, #16
 800428c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4618      	mov	r0, r3
 8004294:	f005 fc96 	bl	8009bc4 <USB_ReadInterrupts>
 8004298:	4603      	mov	r3, r0
 800429a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800429e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042a2:	f040 80a7 	bne.w	80043f4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f005 fc9b 	bl	8009bea <USB_ReadDevAllOutEpInterrupt>
 80042b4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80042b6:	e099      	b.n	80043ec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 808e 	beq.w	80043e0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ca:	b2d2      	uxtb	r2, r2
 80042cc:	4611      	mov	r1, r2
 80042ce:	4618      	mov	r0, r3
 80042d0:	f005 fcbf 	bl	8009c52 <USB_ReadDevOutEPInterrupt>
 80042d4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0301 	and.w	r3, r3, #1
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00c      	beq.n	80042fa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	461a      	mov	r2, r3
 80042ee:	2301      	movs	r3, #1
 80042f0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80042f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 fec3 	bl	8005080 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f003 0308 	and.w	r3, r3, #8
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00c      	beq.n	800431e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	461a      	mov	r2, r3
 8004312:	2308      	movs	r3, #8
 8004314:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004316:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 ff99 	bl	8005250 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f003 0310 	and.w	r3, r3, #16
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	4413      	add	r3, r2
 8004330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004334:	461a      	mov	r2, r3
 8004336:	2310      	movs	r3, #16
 8004338:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d030      	beq.n	80043a6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	695b      	ldr	r3, [r3, #20]
 8004348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800434c:	2b80      	cmp	r3, #128	; 0x80
 800434e:	d109      	bne.n	8004364 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004350:	69fb      	ldr	r3, [r7, #28]
 8004352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800435e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004362:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004366:	4613      	mov	r3, r2
 8004368:	00db      	lsls	r3, r3, #3
 800436a:	4413      	add	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	4413      	add	r3, r2
 8004376:	3304      	adds	r3, #4
 8004378:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	78db      	ldrb	r3, [r3, #3]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d108      	bne.n	8004394 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2200      	movs	r2, #0
 8004386:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	b2db      	uxtb	r3, r3
 800438c:	4619      	mov	r1, r3
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f007 ffe4 	bl	800c35c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a0:	461a      	mov	r2, r3
 80043a2:	2302      	movs	r3, #2
 80043a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d008      	beq.n	80043c2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	015a      	lsls	r2, r3, #5
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	4413      	add	r3, r2
 80043b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043bc:	461a      	mov	r2, r3
 80043be:	2320      	movs	r3, #32
 80043c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d009      	beq.n	80043e0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d8:	461a      	mov	r2, r3
 80043da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	3301      	adds	r3, #1
 80043e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80043e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f47f af62 	bne.w	80042b8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f005 fbe3 	bl	8009bc4 <USB_ReadInterrupts>
 80043fe:	4603      	mov	r3, r0
 8004400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004404:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004408:	f040 80db 	bne.w	80045c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f005 fc04 	bl	8009c1e <USB_ReadDevAllInEpInterrupt>
 8004416:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800441c:	e0cd      	b.n	80045ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	f003 0301 	and.w	r3, r3, #1
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 80c2 	beq.w	80045ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004430:	b2d2      	uxtb	r2, r2
 8004432:	4611      	mov	r1, r2
 8004434:	4618      	mov	r0, r3
 8004436:	f005 fc2a 	bl	8009c8e <USB_ReadDevInEPInterrupt>
 800443a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d057      	beq.n	80044f6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	f003 030f 	and.w	r3, r3, #15
 800444c:	2201      	movs	r2, #1
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	43db      	mvns	r3, r3
 8004460:	69f9      	ldr	r1, [r7, #28]
 8004462:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004466:	4013      	ands	r3, r2
 8004468:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004476:	461a      	mov	r2, r3
 8004478:	2301      	movs	r3, #1
 800447a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691b      	ldr	r3, [r3, #16]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d132      	bne.n	80044ea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004484:	6879      	ldr	r1, [r7, #4]
 8004486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004488:	4613      	mov	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	4413      	add	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	334c      	adds	r3, #76	; 0x4c
 8004494:	6819      	ldr	r1, [r3, #0]
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800449a:	4613      	mov	r3, r2
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	4413      	add	r3, r2
 80044a0:	009b      	lsls	r3, r3, #2
 80044a2:	4403      	add	r3, r0
 80044a4:	3348      	adds	r3, #72	; 0x48
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4419      	add	r1, r3
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ae:	4613      	mov	r3, r2
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	4413      	add	r3, r2
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4403      	add	r3, r0
 80044b8:	334c      	adds	r3, #76	; 0x4c
 80044ba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d113      	bne.n	80044ea <HAL_PCD_IRQHandler+0x3a2>
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044c6:	4613      	mov	r3, r2
 80044c8:	00db      	lsls	r3, r3, #3
 80044ca:	4413      	add	r3, r2
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	440b      	add	r3, r1
 80044d0:	3354      	adds	r3, #84	; 0x54
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d108      	bne.n	80044ea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6818      	ldr	r0, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80044e2:	461a      	mov	r2, r3
 80044e4:	2101      	movs	r1, #1
 80044e6:	f005 fc31 	bl	8009d4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80044ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	4619      	mov	r1, r3
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f007 feae 	bl	800c252 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d008      	beq.n	8004512 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	015a      	lsls	r2, r3, #5
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	4413      	add	r3, r2
 8004508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450c:	461a      	mov	r2, r3
 800450e:	2308      	movs	r3, #8
 8004510:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f003 0310 	and.w	r3, r3, #16
 8004518:	2b00      	cmp	r3, #0
 800451a:	d008      	beq.n	800452e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800451c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	461a      	mov	r2, r3
 800452a:	2310      	movs	r3, #16
 800452c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	461a      	mov	r2, r3
 8004546:	2340      	movs	r3, #64	; 0x40
 8004548:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d023      	beq.n	800459c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004554:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004556:	6a38      	ldr	r0, [r7, #32]
 8004558:	f004 fb12 	bl	8008b80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800455c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800455e:	4613      	mov	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	4413      	add	r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	3338      	adds	r3, #56	; 0x38
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	4413      	add	r3, r2
 800456c:	3304      	adds	r3, #4
 800456e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	78db      	ldrb	r3, [r3, #3]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d108      	bne.n	800458a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	2200      	movs	r2, #0
 800457c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800457e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004580:	b2db      	uxtb	r3, r3
 8004582:	4619      	mov	r1, r3
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f007 fefb 	bl	800c380 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800458a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458c:	015a      	lsls	r2, r3, #5
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	4413      	add	r3, r2
 8004592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004596:	461a      	mov	r2, r3
 8004598:	2302      	movs	r3, #2
 800459a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80045a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fcdb 	bl	8004f64 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	3301      	adds	r3, #1
 80045b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f47f af2e 	bne.w	800441e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f005 fafc 	bl	8009bc4 <USB_ReadInterrupts>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d6:	d122      	bne.n	800461e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	69fa      	ldr	r2, [r7, #28]
 80045e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045e6:	f023 0301 	bic.w	r3, r3, #1
 80045ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d108      	bne.n	8004608 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045fe:	2100      	movs	r1, #0
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 fec3 	bl	800538c <HAL_PCDEx_LPM_Callback>
 8004606:	e002      	b.n	800460e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f007 fe99 	bl	800c340 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800461c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f005 face 	bl	8009bc4 <USB_ReadInterrupts>
 8004628:	4603      	mov	r3, r0
 800462a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800462e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004632:	d112      	bne.n	800465a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b01      	cmp	r3, #1
 8004642:	d102      	bne.n	800464a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f007 fe55 	bl	800c2f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	695a      	ldr	r2, [r3, #20]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004658:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4618      	mov	r0, r3
 8004660:	f005 fab0 	bl	8009bc4 <USB_ReadInterrupts>
 8004664:	4603      	mov	r3, r0
 8004666:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466e:	f040 80b7 	bne.w	80047e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004672:	69fb      	ldr	r3, [r7, #28]
 8004674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004680:	f023 0301 	bic.w	r3, r3, #1
 8004684:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2110      	movs	r1, #16
 800468c:	4618      	mov	r0, r3
 800468e:	f004 fa77 	bl	8008b80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004692:	2300      	movs	r3, #0
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004696:	e046      	b.n	8004726 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800469a:	015a      	lsls	r2, r3, #5
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	4413      	add	r3, r2
 80046a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a4:	461a      	mov	r2, r3
 80046a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80046ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046bc:	0151      	lsls	r1, r2, #5
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	440a      	add	r2, r1
 80046c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ce:	015a      	lsls	r2, r3, #5
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	4413      	add	r3, r2
 80046d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d8:	461a      	mov	r2, r3
 80046da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004710:	0151      	lsls	r1, r2, #5
 8004712:	69fa      	ldr	r2, [r7, #28]
 8004714:	440a      	add	r2, r1
 8004716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800471a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800471e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004722:	3301      	adds	r3, #1
 8004724:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800472c:	429a      	cmp	r2, r3
 800472e:	d3b3      	bcc.n	8004698 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	69fa      	ldr	r2, [r7, #28]
 800473a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800473e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004742:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	2b00      	cmp	r3, #0
 800474a:	d016      	beq.n	800477a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004756:	69fa      	ldr	r2, [r7, #28]
 8004758:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800475c:	f043 030b 	orr.w	r3, r3, #11
 8004760:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476c:	69fa      	ldr	r2, [r7, #28]
 800476e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004772:	f043 030b 	orr.w	r3, r3, #11
 8004776:	6453      	str	r3, [r2, #68]	; 0x44
 8004778:	e015      	b.n	80047a6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004788:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800478c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004790:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004798:	691b      	ldr	r3, [r3, #16]
 800479a:	69fa      	ldr	r2, [r7, #28]
 800479c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047a0:	f043 030b 	orr.w	r3, r3, #11
 80047a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80047b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6818      	ldr	r0, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047ca:	461a      	mov	r2, r3
 80047cc:	f005 fabe 	bl	8009d4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695a      	ldr	r2, [r3, #20]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80047de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4618      	mov	r0, r3
 80047e6:	f005 f9ed 	bl	8009bc4 <USB_ReadInterrupts>
 80047ea:	4603      	mov	r3, r0
 80047ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047f4:	d124      	bne.n	8004840 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f005 fa83 	bl	8009d06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4618      	mov	r0, r3
 8004806:	f004 fa38 	bl	8008c7a <USB_GetDevSpeed>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681c      	ldr	r4, [r3, #0]
 8004816:	f001 fa29 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 800481a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004820:	b2db      	uxtb	r3, r3
 8004822:	461a      	mov	r2, r3
 8004824:	4620      	mov	r0, r4
 8004826:	f003 ff37 	bl	8008698 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f007 fd39 	bl	800c2a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695a      	ldr	r2, [r3, #20]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800483e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f005 f9bd 	bl	8009bc4 <USB_ReadInterrupts>
 800484a:	4603      	mov	r3, r0
 800484c:	f003 0308 	and.w	r3, r3, #8
 8004850:	2b08      	cmp	r3, #8
 8004852:	d10a      	bne.n	800486a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f007 fd16 	bl	800c286 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695a      	ldr	r2, [r3, #20]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f002 0208 	and.w	r2, r2, #8
 8004868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4618      	mov	r0, r3
 8004870:	f005 f9a8 	bl	8009bc4 <USB_ReadInterrupts>
 8004874:	4603      	mov	r3, r0
 8004876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487a:	2b80      	cmp	r3, #128	; 0x80
 800487c:	d122      	bne.n	80048c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800488a:	2301      	movs	r3, #1
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
 800488e:	e014      	b.n	80048ba <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004890:	6879      	ldr	r1, [r7, #4]
 8004892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004894:	4613      	mov	r3, r2
 8004896:	00db      	lsls	r3, r3, #3
 8004898:	4413      	add	r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d105      	bne.n	80048b4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 fb27 	bl	8004f02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b6:	3301      	adds	r3, #1
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d3e5      	bcc.n	8004890 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f005 f97b 	bl	8009bc4 <USB_ReadInterrupts>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048d8:	d13b      	bne.n	8004952 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048da:	2301      	movs	r3, #1
 80048dc:	627b      	str	r3, [r7, #36]	; 0x24
 80048de:	e02b      	b.n	8004938 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80048e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80048f0:	6879      	ldr	r1, [r7, #4]
 80048f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048f4:	4613      	mov	r3, r2
 80048f6:	00db      	lsls	r3, r3, #3
 80048f8:	4413      	add	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	440b      	add	r3, r1
 80048fe:	3340      	adds	r3, #64	; 0x40
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d115      	bne.n	8004932 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004906:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004908:	2b00      	cmp	r3, #0
 800490a:	da12      	bge.n	8004932 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	333f      	adds	r3, #63	; 0x3f
 800491c:	2201      	movs	r2, #1
 800491e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004922:	b2db      	uxtb	r3, r3
 8004924:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004928:	b2db      	uxtb	r3, r3
 800492a:	4619      	mov	r1, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fae8 	bl	8004f02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	3301      	adds	r3, #1
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493e:	429a      	cmp	r2, r3
 8004940:	d3ce      	bcc.n	80048e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695a      	ldr	r2, [r3, #20]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f005 f934 	bl	8009bc4 <USB_ReadInterrupts>
 800495c:	4603      	mov	r3, r0
 800495e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004962:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004966:	d155      	bne.n	8004a14 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004968:	2301      	movs	r3, #1
 800496a:	627b      	str	r3, [r7, #36]	; 0x24
 800496c:	e045      	b.n	80049fa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	2b01      	cmp	r3, #1
 8004994:	d12e      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004996:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004998:	2b00      	cmp	r3, #0
 800499a:	da2b      	bge.n	80049f4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80049a8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d121      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b4:	4613      	mov	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	4413      	add	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	440b      	add	r3, r1
 80049be:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80049c2:	2201      	movs	r2, #1
 80049c4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80049c6:	6a3b      	ldr	r3, [r7, #32]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	695b      	ldr	r3, [r3, #20]
 80049d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10a      	bne.n	80049f4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	69fa      	ldr	r2, [r7, #28]
 80049e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049f0:	6053      	str	r3, [r2, #4]
            break;
 80049f2:	e007      	b.n	8004a04 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	3301      	adds	r3, #1
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d3b4      	bcc.n	800496e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695a      	ldr	r2, [r3, #20]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f005 f8d3 	bl	8009bc4 <USB_ReadInterrupts>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a28:	d10a      	bne.n	8004a40 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f007 fcba 	bl	800c3a4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	695a      	ldr	r2, [r3, #20]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f005 f8bd 	bl	8009bc4 <USB_ReadInterrupts>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d115      	bne.n	8004a80 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f007 fcaa 	bl	800c3c0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	6859      	ldr	r1, [r3, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	430a      	orrs	r2, r1
 8004a7a:	605a      	str	r2, [r3, #4]
 8004a7c:	e000      	b.n	8004a80 <HAL_PCD_IRQHandler+0x938>
      return;
 8004a7e:	bf00      	nop
    }
  }
}
 8004a80:	3734      	adds	r7, #52	; 0x34
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd90      	pop	{r4, r7, pc}

08004a86 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b082      	sub	sp, #8
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_PCD_SetAddress+0x1a>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e013      	b.n	8004ac8 <HAL_PCD_SetAddress+0x42>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	78fa      	ldrb	r2, [r7, #3]
 8004aac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f005 f81b 	bl	8009af4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ac6:	2300      	movs	r3, #0
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	4608      	mov	r0, r1
 8004ada:	4611      	mov	r1, r2
 8004adc:	461a      	mov	r2, r3
 8004ade:	4603      	mov	r3, r0
 8004ae0:	70fb      	strb	r3, [r7, #3]
 8004ae2:	460b      	mov	r3, r1
 8004ae4:	803b      	strh	r3, [r7, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004aee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	da0f      	bge.n	8004b16 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	f003 020f 	and.w	r2, r3, #15
 8004afc:	4613      	mov	r3, r2
 8004afe:	00db      	lsls	r3, r3, #3
 8004b00:	4413      	add	r3, r2
 8004b02:	009b      	lsls	r3, r3, #2
 8004b04:	3338      	adds	r3, #56	; 0x38
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	4413      	add	r3, r2
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2201      	movs	r2, #1
 8004b12:	705a      	strb	r2, [r3, #1]
 8004b14:	e00f      	b.n	8004b36 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b16:	78fb      	ldrb	r3, [r7, #3]
 8004b18:	f003 020f 	and.w	r2, r3, #15
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	00db      	lsls	r3, r3, #3
 8004b20:	4413      	add	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	3304      	adds	r3, #4
 8004b2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004b36:	78fb      	ldrb	r3, [r7, #3]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004b42:	883a      	ldrh	r2, [r7, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	78ba      	ldrb	r2, [r7, #2]
 8004b4c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	785b      	ldrb	r3, [r3, #1]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004b60:	78bb      	ldrb	r3, [r7, #2]
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d102      	bne.n	8004b6c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d101      	bne.n	8004b7a <HAL_PCD_EP_Open+0xaa>
 8004b76:	2302      	movs	r3, #2
 8004b78:	e00e      	b.n	8004b98 <HAL_PCD_EP_Open+0xc8>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68f9      	ldr	r1, [r7, #12]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f004 f89b 	bl	8008cc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004b96:	7afb      	ldrb	r3, [r7, #11]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	460b      	mov	r3, r1
 8004baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	da0f      	bge.n	8004bd4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bb4:	78fb      	ldrb	r3, [r7, #3]
 8004bb6:	f003 020f 	and.w	r2, r3, #15
 8004bba:	4613      	mov	r3, r2
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	3338      	adds	r3, #56	; 0x38
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3304      	adds	r3, #4
 8004bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	705a      	strb	r2, [r3, #1]
 8004bd2:	e00f      	b.n	8004bf4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bd4:	78fb      	ldrb	r3, [r7, #3]
 8004bd6:	f003 020f 	and.w	r2, r3, #15
 8004bda:	4613      	mov	r3, r2
 8004bdc:	00db      	lsls	r3, r3, #3
 8004bde:	4413      	add	r3, r2
 8004be0:	009b      	lsls	r3, r3, #2
 8004be2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	4413      	add	r3, r2
 8004bea:	3304      	adds	r3, #4
 8004bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_PCD_EP_Close+0x6e>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e00e      	b.n	8004c2c <HAL_PCD_EP_Close+0x8c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68f9      	ldr	r1, [r7, #12]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f004 f8d9 	bl	8008dd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	603b      	str	r3, [r7, #0]
 8004c40:	460b      	mov	r3, r1
 8004c42:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c44:	7afb      	ldrb	r3, [r7, #11]
 8004c46:	f003 020f 	and.w	r2, r3, #15
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	4413      	add	r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2200      	movs	r2, #0
 8004c74:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c76:	7afb      	ldrb	r3, [r7, #11]
 8004c78:	f003 030f 	and.w	r3, r3, #15
 8004c7c:	b2da      	uxtb	r2, r3
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d102      	bne.n	8004c90 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c90:	7afb      	ldrb	r3, [r7, #11]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d109      	bne.n	8004cae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	6979      	ldr	r1, [r7, #20]
 8004ca8:	f004 fbb8 	bl	800941c <USB_EP0StartXfer>
 8004cac:	e008      	b.n	8004cc0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6818      	ldr	r0, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	461a      	mov	r2, r3
 8004cba:	6979      	ldr	r1, [r7, #20]
 8004cbc:	f004 f966 	bl	8008f8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3718      	adds	r7, #24
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b083      	sub	sp, #12
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	6879      	ldr	r1, [r7, #4]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	00db      	lsls	r3, r3, #3
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004cec:	681b      	ldr	r3, [r3, #0]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cfa:	b580      	push	{r7, lr}
 8004cfc:	b086      	sub	sp, #24
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
 8004d06:	460b      	mov	r3, r1
 8004d08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d0a:	7afb      	ldrb	r3, [r7, #11]
 8004d0c:	f003 020f 	and.w	r2, r3, #15
 8004d10:	4613      	mov	r3, r2
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	4413      	add	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	3338      	adds	r3, #56	; 0x38
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	3304      	adds	r3, #4
 8004d20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2200      	movs	r2, #0
 8004d32:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	2201      	movs	r2, #1
 8004d38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	b2da      	uxtb	r2, r3
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d102      	bne.n	8004d54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d54:	7afb      	ldrb	r3, [r7, #11]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6818      	ldr	r0, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	6979      	ldr	r1, [r7, #20]
 8004d6c:	f004 fb56 	bl	800941c <USB_EP0StartXfer>
 8004d70:	e008      	b.n	8004d84 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	461a      	mov	r2, r3
 8004d7e:	6979      	ldr	r1, [r7, #20]
 8004d80:	f004 f904 	bl	8008f8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
 8004d96:	460b      	mov	r3, r1
 8004d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004d9a:	78fb      	ldrb	r3, [r7, #3]
 8004d9c:	f003 020f 	and.w	r2, r3, #15
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d901      	bls.n	8004dac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	e050      	b.n	8004e4e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	da0f      	bge.n	8004dd4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004db4:	78fb      	ldrb	r3, [r7, #3]
 8004db6:	f003 020f 	and.w	r2, r3, #15
 8004dba:	4613      	mov	r3, r2
 8004dbc:	00db      	lsls	r3, r3, #3
 8004dbe:	4413      	add	r3, r2
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	3338      	adds	r3, #56	; 0x38
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3304      	adds	r3, #4
 8004dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	705a      	strb	r2, [r3, #1]
 8004dd2:	e00d      	b.n	8004df0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004dd4:	78fa      	ldrb	r2, [r7, #3]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	3304      	adds	r3, #4
 8004de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2201      	movs	r2, #1
 8004df4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004df6:	78fb      	ldrb	r3, [r7, #3]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	b2da      	uxtb	r2, r3
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d101      	bne.n	8004e10 <HAL_PCD_EP_SetStall+0x82>
 8004e0c:	2302      	movs	r3, #2
 8004e0e:	e01e      	b.n	8004e4e <HAL_PCD_EP_SetStall+0xc0>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68f9      	ldr	r1, [r7, #12]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f004 fd94 	bl	800994c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e24:	78fb      	ldrb	r3, [r7, #3]
 8004e26:	f003 030f 	and.w	r3, r3, #15
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10a      	bne.n	8004e44 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6818      	ldr	r0, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	b2d9      	uxtb	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f004 ff84 	bl	8009d4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004e62:	78fb      	ldrb	r3, [r7, #3]
 8004e64:	f003 020f 	and.w	r2, r3, #15
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d901      	bls.n	8004e74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004e70:	2301      	movs	r3, #1
 8004e72:	e042      	b.n	8004efa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	da0f      	bge.n	8004e9c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	f003 020f 	and.w	r2, r3, #15
 8004e82:	4613      	mov	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	3338      	adds	r3, #56	; 0x38
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	4413      	add	r3, r2
 8004e90:	3304      	adds	r3, #4
 8004e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2201      	movs	r2, #1
 8004e98:	705a      	strb	r2, [r3, #1]
 8004e9a:	e00f      	b.n	8004ebc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	f003 020f 	and.w	r2, r3, #15
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	00db      	lsls	r3, r3, #3
 8004ea6:	4413      	add	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	f003 030f 	and.w	r3, r3, #15
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_PCD_EP_ClrStall+0x86>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e00e      	b.n	8004efa <HAL_PCD_EP_ClrStall+0xa4>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68f9      	ldr	r1, [r7, #12]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f004 fd9c 	bl	8009a28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3710      	adds	r7, #16
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	da0c      	bge.n	8004f30 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f16:	78fb      	ldrb	r3, [r7, #3]
 8004f18:	f003 020f 	and.w	r2, r3, #15
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	3338      	adds	r3, #56	; 0x38
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	4413      	add	r3, r2
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	e00c      	b.n	8004f4a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f30:	78fb      	ldrb	r3, [r7, #3]
 8004f32:	f003 020f 	and.w	r2, r3, #15
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	4413      	add	r3, r2
 8004f46:	3304      	adds	r3, #4
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f004 fbbb 	bl	80096cc <USB_EPStopXfer>
 8004f56:	4603      	mov	r3, r0
 8004f58:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3710      	adds	r7, #16
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}

08004f64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b08a      	sub	sp, #40	; 0x28
 8004f68:	af02      	add	r7, sp, #8
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	00db      	lsls	r3, r3, #3
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	3338      	adds	r3, #56	; 0x38
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	4413      	add	r3, r2
 8004f88:	3304      	adds	r3, #4
 8004f8a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6a1a      	ldr	r2, [r3, #32]
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	699b      	ldr	r3, [r3, #24]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d901      	bls.n	8004f9c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e06c      	b.n	8005076 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	699a      	ldr	r2, [r3, #24]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d902      	bls.n	8004fb8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	3303      	adds	r3, #3
 8004fbc:	089b      	lsrs	r3, r3, #2
 8004fbe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004fc0:	e02b      	b.n	800501a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	699a      	ldr	r2, [r3, #24]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	69fa      	ldr	r2, [r7, #28]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d902      	bls.n	8004fde <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	3303      	adds	r3, #3
 8004fe2:	089b      	lsrs	r3, r3, #2
 8004fe4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	6919      	ldr	r1, [r3, #16]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	6978      	ldr	r0, [r7, #20]
 8004ffe:	f004 fc0f 	bl	8009820 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	691a      	ldr	r2, [r3, #16]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	441a      	add	r2, r3
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a1a      	ldr	r2, [r3, #32]
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	441a      	add	r2, r3
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	b29b      	uxth	r3, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	429a      	cmp	r2, r3
 800502e:	d809      	bhi.n	8005044 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1a      	ldr	r2, [r3, #32]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005038:	429a      	cmp	r2, r3
 800503a:	d203      	bcs.n	8005044 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1be      	bne.n	8004fc2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	699a      	ldr	r2, [r3, #24]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	429a      	cmp	r2, r3
 800504e:	d811      	bhi.n	8005074 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	f003 030f 	and.w	r3, r3, #15
 8005056:	2201      	movs	r2, #1
 8005058:	fa02 f303 	lsl.w	r3, r2, r3
 800505c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	43db      	mvns	r3, r3
 800506a:	6939      	ldr	r1, [r7, #16]
 800506c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005070:	4013      	ands	r3, r2
 8005072:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3720      	adds	r7, #32
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
	...

08005080 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	333c      	adds	r3, #60	; 0x3c
 8005098:	3304      	adds	r3, #4
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	015a      	lsls	r2, r3, #5
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	4413      	add	r3, r2
 80050a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d17b      	bne.n	80051ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f003 0308 	and.w	r3, r3, #8
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d015      	beq.n	80050ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	4a61      	ldr	r2, [pc, #388]	; (8005248 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	f240 80b9 	bls.w	800523c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 80b3 	beq.w	800523c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050e2:	461a      	mov	r2, r3
 80050e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050e8:	6093      	str	r3, [r2, #8]
 80050ea:	e0a7      	b.n	800523c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f003 0320 	and.w	r3, r3, #32
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d009      	beq.n	800510a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005102:	461a      	mov	r2, r3
 8005104:	2320      	movs	r3, #32
 8005106:	6093      	str	r3, [r2, #8]
 8005108:	e098      	b.n	800523c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005110:	2b00      	cmp	r3, #0
 8005112:	f040 8093 	bne.w	800523c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	4a4b      	ldr	r2, [pc, #300]	; (8005248 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d90f      	bls.n	800513e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00a      	beq.n	800513e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	015a      	lsls	r2, r3, #5
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	4413      	add	r3, r2
 8005130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005134:	461a      	mov	r2, r3
 8005136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800513a:	6093      	str	r3, [r2, #8]
 800513c:	e07e      	b.n	800523c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800513e:	683a      	ldr	r2, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	4413      	add	r3, r2
 8005150:	3304      	adds	r3, #4
 8005152:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	0159      	lsls	r1, r3, #5
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	440b      	add	r3, r1
 8005160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800516a:	1ad2      	subs	r2, r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d114      	bne.n	80051a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d109      	bne.n	8005192 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6818      	ldr	r0, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005188:	461a      	mov	r2, r3
 800518a:	2101      	movs	r1, #1
 800518c:	f004 fdde 	bl	8009d4c <USB_EP0_OutStart>
 8005190:	e006      	b.n	80051a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	691a      	ldr	r2, [r3, #16]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	441a      	add	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f007 f838 	bl	800c21c <HAL_PCD_DataOutStageCallback>
 80051ac:	e046      	b.n	800523c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	4a26      	ldr	r2, [pc, #152]	; (800524c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d124      	bne.n	8005200 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00a      	beq.n	80051d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	461a      	mov	r2, r3
 80051ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051d2:	6093      	str	r3, [r2, #8]
 80051d4:	e032      	b.n	800523c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	f003 0320 	and.w	r3, r3, #32
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d008      	beq.n	80051f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	461a      	mov	r2, r3
 80051ee:	2320      	movs	r3, #32
 80051f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	4619      	mov	r1, r3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f007 f80f 	bl	800c21c <HAL_PCD_DataOutStageCallback>
 80051fe:	e01d      	b.n	800523c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d114      	bne.n	8005230 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005206:	6879      	ldr	r1, [r7, #4]
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	4613      	mov	r3, r2
 800520c:	00db      	lsls	r3, r3, #3
 800520e:	4413      	add	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	440b      	add	r3, r1
 8005214:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d108      	bne.n	8005230 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6818      	ldr	r0, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005228:	461a      	mov	r2, r3
 800522a:	2100      	movs	r1, #0
 800522c:	f004 fd8e 	bl	8009d4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	b2db      	uxtb	r3, r3
 8005234:	4619      	mov	r1, r3
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f006 fff0 	bl	800c21c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3720      	adds	r7, #32
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	4f54300a 	.word	0x4f54300a
 800524c:	4f54310a 	.word	0x4f54310a

08005250 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b086      	sub	sp, #24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	333c      	adds	r3, #60	; 0x3c
 8005268:	3304      	adds	r3, #4
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	015a      	lsls	r2, r3, #5
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	4413      	add	r3, r2
 8005276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4a15      	ldr	r2, [pc, #84]	; (80052d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d90e      	bls.n	80052a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800528c:	2b00      	cmp	r3, #0
 800528e:	d009      	beq.n	80052a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	461a      	mov	r2, r3
 800529e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f006 ffa7 	bl	800c1f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4a0a      	ldr	r2, [pc, #40]	; (80052d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d90c      	bls.n	80052cc <PCD_EP_OutSetupPacket_int+0x7c>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d108      	bne.n	80052cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6818      	ldr	r0, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052c4:	461a      	mov	r2, r3
 80052c6:	2101      	movs	r1, #1
 80052c8:	f004 fd40 	bl	8009d4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	4f54300a 	.word	0x4f54300a

080052dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	460b      	mov	r3, r1
 80052e6:	70fb      	strb	r3, [r7, #3]
 80052e8:	4613      	mov	r3, r2
 80052ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d107      	bne.n	800530a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80052fa:	883b      	ldrh	r3, [r7, #0]
 80052fc:	0419      	lsls	r1, r3, #16
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	430a      	orrs	r2, r1
 8005306:	629a      	str	r2, [r3, #40]	; 0x28
 8005308:	e028      	b.n	800535c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005310:	0c1b      	lsrs	r3, r3, #16
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	4413      	add	r3, r2
 8005316:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005318:	2300      	movs	r3, #0
 800531a:	73fb      	strb	r3, [r7, #15]
 800531c:	e00d      	b.n	800533a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	7bfb      	ldrb	r3, [r7, #15]
 8005324:	3340      	adds	r3, #64	; 0x40
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	4413      	add	r3, r2
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	4413      	add	r3, r2
 8005332:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005334:	7bfb      	ldrb	r3, [r7, #15]
 8005336:	3301      	adds	r3, #1
 8005338:	73fb      	strb	r3, [r7, #15]
 800533a:	7bfa      	ldrb	r2, [r7, #15]
 800533c:	78fb      	ldrb	r3, [r7, #3]
 800533e:	3b01      	subs	r3, #1
 8005340:	429a      	cmp	r2, r3
 8005342:	d3ec      	bcc.n	800531e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005344:	883b      	ldrh	r3, [r7, #0]
 8005346:	0418      	lsls	r0, r3, #16
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6819      	ldr	r1, [r3, #0]
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	3b01      	subs	r3, #1
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	4302      	orrs	r2, r0
 8005354:	3340      	adds	r3, #64	; 0x40
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3714      	adds	r7, #20
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr

0800536a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800536a:	b480      	push	{r7}
 800536c:	b083      	sub	sp, #12
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	460b      	mov	r3, r1
 8005374:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	887a      	ldrh	r2, [r7, #2]
 800537c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	460b      	mov	r3, r1
 8005396:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b086      	sub	sp, #24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e267      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d075      	beq.n	80054ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053c2:	4b88      	ldr	r3, [pc, #544]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d00c      	beq.n	80053e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ce:	4b85      	ldr	r3, [pc, #532]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053d6:	2b08      	cmp	r3, #8
 80053d8:	d112      	bne.n	8005400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053da:	4b82      	ldr	r3, [pc, #520]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053e6:	d10b      	bne.n	8005400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e8:	4b7e      	ldr	r3, [pc, #504]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d05b      	beq.n	80054ac <HAL_RCC_OscConfig+0x108>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d157      	bne.n	80054ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e242      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005408:	d106      	bne.n	8005418 <HAL_RCC_OscConfig+0x74>
 800540a:	4b76      	ldr	r3, [pc, #472]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a75      	ldr	r2, [pc, #468]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e01d      	b.n	8005454 <HAL_RCC_OscConfig+0xb0>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005420:	d10c      	bne.n	800543c <HAL_RCC_OscConfig+0x98>
 8005422:	4b70      	ldr	r3, [pc, #448]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a6f      	ldr	r2, [pc, #444]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4b6d      	ldr	r3, [pc, #436]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a6c      	ldr	r2, [pc, #432]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e00b      	b.n	8005454 <HAL_RCC_OscConfig+0xb0>
 800543c:	4b69      	ldr	r3, [pc, #420]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a68      	ldr	r2, [pc, #416]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	4b66      	ldr	r3, [pc, #408]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a65      	ldr	r2, [pc, #404]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 800544e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d013      	beq.n	8005484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800545c:	f7fd fab6 	bl	80029cc <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005464:	f7fd fab2 	bl	80029cc <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b64      	cmp	r3, #100	; 0x64
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e207      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005476:	4b5b      	ldr	r3, [pc, #364]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0xc0>
 8005482:	e014      	b.n	80054ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005484:	f7fd faa2 	bl	80029cc <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800548c:	f7fd fa9e 	bl	80029cc <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	; 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e1f3      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800549e:	4b51      	ldr	r3, [pc, #324]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0xe8>
 80054aa:	e000      	b.n	80054ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d063      	beq.n	8005582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ba:	4b4a      	ldr	r3, [pc, #296]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00b      	beq.n	80054de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c6:	4b47      	ldr	r3, [pc, #284]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054ce:	2b08      	cmp	r3, #8
 80054d0:	d11c      	bne.n	800550c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054d2:	4b44      	ldr	r3, [pc, #272]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d116      	bne.n	800550c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054de:	4b41      	ldr	r3, [pc, #260]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f003 0302 	and.w	r3, r3, #2
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d005      	beq.n	80054f6 <HAL_RCC_OscConfig+0x152>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d001      	beq.n	80054f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e1c7      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f6:	4b3b      	ldr	r3, [pc, #236]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	4937      	ldr	r1, [pc, #220]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005506:	4313      	orrs	r3, r2
 8005508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800550a:	e03a      	b.n	8005582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d020      	beq.n	8005556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005514:	4b34      	ldr	r3, [pc, #208]	; (80055e8 <HAL_RCC_OscConfig+0x244>)
 8005516:	2201      	movs	r2, #1
 8005518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551a:	f7fd fa57 	bl	80029cc <HAL_GetTick>
 800551e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005520:	e008      	b.n	8005534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005522:	f7fd fa53 	bl	80029cc <HAL_GetTick>
 8005526:	4602      	mov	r2, r0
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	1ad3      	subs	r3, r2, r3
 800552c:	2b02      	cmp	r3, #2
 800552e:	d901      	bls.n	8005534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e1a8      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005534:	4b2b      	ldr	r3, [pc, #172]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0302 	and.w	r3, r3, #2
 800553c:	2b00      	cmp	r3, #0
 800553e:	d0f0      	beq.n	8005522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005540:	4b28      	ldr	r3, [pc, #160]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4925      	ldr	r1, [pc, #148]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005550:	4313      	orrs	r3, r2
 8005552:	600b      	str	r3, [r1, #0]
 8005554:	e015      	b.n	8005582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <HAL_RCC_OscConfig+0x244>)
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fd fa36 	bl	80029cc <HAL_GetTick>
 8005560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005562:	e008      	b.n	8005576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005564:	f7fd fa32 	bl	80029cc <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	2b02      	cmp	r3, #2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e187      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005576:	4b1b      	ldr	r3, [pc, #108]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1f0      	bne.n	8005564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d036      	beq.n	80055fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d016      	beq.n	80055c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005596:	4b15      	ldr	r3, [pc, #84]	; (80055ec <HAL_RCC_OscConfig+0x248>)
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800559c:	f7fd fa16 	bl	80029cc <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055a4:	f7fd fa12 	bl	80029cc <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e167      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055b6:	4b0b      	ldr	r3, [pc, #44]	; (80055e4 <HAL_RCC_OscConfig+0x240>)
 80055b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCC_OscConfig+0x200>
 80055c2:	e01b      	b.n	80055fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c4:	4b09      	ldr	r3, [pc, #36]	; (80055ec <HAL_RCC_OscConfig+0x248>)
 80055c6:	2200      	movs	r2, #0
 80055c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ca:	f7fd f9ff 	bl	80029cc <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d0:	e00e      	b.n	80055f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055d2:	f7fd f9fb 	bl	80029cc <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d907      	bls.n	80055f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e150      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
 80055e4:	40023800 	.word	0x40023800
 80055e8:	42470000 	.word	0x42470000
 80055ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f0:	4b88      	ldr	r3, [pc, #544]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 80055f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1ea      	bne.n	80055d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8097 	beq.w	8005738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800560e:	4b81      	ldr	r3, [pc, #516]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005616:	2b00      	cmp	r3, #0
 8005618:	d10f      	bne.n	800563a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800561a:	2300      	movs	r3, #0
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	4b7d      	ldr	r3, [pc, #500]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 8005620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005622:	4a7c      	ldr	r2, [pc, #496]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 8005624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005628:	6413      	str	r3, [r2, #64]	; 0x40
 800562a:	4b7a      	ldr	r3, [pc, #488]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005632:	60bb      	str	r3, [r7, #8]
 8005634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005636:	2301      	movs	r3, #1
 8005638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563a:	4b77      	ldr	r3, [pc, #476]	; (8005818 <HAL_RCC_OscConfig+0x474>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005642:	2b00      	cmp	r3, #0
 8005644:	d118      	bne.n	8005678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005646:	4b74      	ldr	r3, [pc, #464]	; (8005818 <HAL_RCC_OscConfig+0x474>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a73      	ldr	r2, [pc, #460]	; (8005818 <HAL_RCC_OscConfig+0x474>)
 800564c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005652:	f7fd f9bb 	bl	80029cc <HAL_GetTick>
 8005656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005658:	e008      	b.n	800566c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565a:	f7fd f9b7 	bl	80029cc <HAL_GetTick>
 800565e:	4602      	mov	r2, r0
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	1ad3      	subs	r3, r2, r3
 8005664:	2b02      	cmp	r3, #2
 8005666:	d901      	bls.n	800566c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e10c      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566c:	4b6a      	ldr	r3, [pc, #424]	; (8005818 <HAL_RCC_OscConfig+0x474>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0f0      	beq.n	800565a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	2b01      	cmp	r3, #1
 800567e:	d106      	bne.n	800568e <HAL_RCC_OscConfig+0x2ea>
 8005680:	4b64      	ldr	r3, [pc, #400]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	4a63      	ldr	r2, [pc, #396]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 8005686:	f043 0301 	orr.w	r3, r3, #1
 800568a:	6713      	str	r3, [r2, #112]	; 0x70
 800568c:	e01c      	b.n	80056c8 <HAL_RCC_OscConfig+0x324>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	2b05      	cmp	r3, #5
 8005694:	d10c      	bne.n	80056b0 <HAL_RCC_OscConfig+0x30c>
 8005696:	4b5f      	ldr	r3, [pc, #380]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 8005698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569a:	4a5e      	ldr	r2, [pc, #376]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 800569c:	f043 0304 	orr.w	r3, r3, #4
 80056a0:	6713      	str	r3, [r2, #112]	; 0x70
 80056a2:	4b5c      	ldr	r3, [pc, #368]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	4a5b      	ldr	r2, [pc, #364]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 80056a8:	f043 0301 	orr.w	r3, r3, #1
 80056ac:	6713      	str	r3, [r2, #112]	; 0x70
 80056ae:	e00b      	b.n	80056c8 <HAL_RCC_OscConfig+0x324>
 80056b0:	4b58      	ldr	r3, [pc, #352]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 80056b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b4:	4a57      	ldr	r2, [pc, #348]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 80056b6:	f023 0301 	bic.w	r3, r3, #1
 80056ba:	6713      	str	r3, [r2, #112]	; 0x70
 80056bc:	4b55      	ldr	r3, [pc, #340]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 80056be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c0:	4a54      	ldr	r2, [pc, #336]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 80056c2:	f023 0304 	bic.w	r3, r3, #4
 80056c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d015      	beq.n	80056fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d0:	f7fd f97c 	bl	80029cc <HAL_GetTick>
 80056d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056d6:	e00a      	b.n	80056ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056d8:	f7fd f978 	bl	80029cc <HAL_GetTick>
 80056dc:	4602      	mov	r2, r0
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e0cb      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ee:	4b49      	ldr	r3, [pc, #292]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	f003 0302 	and.w	r3, r3, #2
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0ee      	beq.n	80056d8 <HAL_RCC_OscConfig+0x334>
 80056fa:	e014      	b.n	8005726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056fc:	f7fd f966 	bl	80029cc <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005702:	e00a      	b.n	800571a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005704:	f7fd f962 	bl	80029cc <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005712:	4293      	cmp	r3, r2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e0b5      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571a:	4b3e      	ldr	r3, [pc, #248]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 800571c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1ee      	bne.n	8005704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d105      	bne.n	8005738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800572c:	4b39      	ldr	r3, [pc, #228]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 800572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005730:	4a38      	ldr	r2, [pc, #224]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 8005732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005736:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 80a1 	beq.w	8005884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005742:	4b34      	ldr	r3, [pc, #208]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f003 030c 	and.w	r3, r3, #12
 800574a:	2b08      	cmp	r3, #8
 800574c:	d05c      	beq.n	8005808 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d141      	bne.n	80057da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005756:	4b31      	ldr	r3, [pc, #196]	; (800581c <HAL_RCC_OscConfig+0x478>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800575c:	f7fd f936 	bl	80029cc <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005762:	e008      	b.n	8005776 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005764:	f7fd f932 	bl	80029cc <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d901      	bls.n	8005776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005772:	2303      	movs	r3, #3
 8005774:	e087      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005776:	4b27      	ldr	r3, [pc, #156]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577e:	2b00      	cmp	r3, #0
 8005780:	d1f0      	bne.n	8005764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	69da      	ldr	r2, [r3, #28]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005790:	019b      	lsls	r3, r3, #6
 8005792:	431a      	orrs	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005798:	085b      	lsrs	r3, r3, #1
 800579a:	3b01      	subs	r3, #1
 800579c:	041b      	lsls	r3, r3, #16
 800579e:	431a      	orrs	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	061b      	lsls	r3, r3, #24
 80057a6:	491b      	ldr	r1, [pc, #108]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 80057a8:	4313      	orrs	r3, r2
 80057aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ac:	4b1b      	ldr	r3, [pc, #108]	; (800581c <HAL_RCC_OscConfig+0x478>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b2:	f7fd f90b 	bl	80029cc <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057ba:	f7fd f907 	bl	80029cc <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e05c      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057cc:	4b11      	ldr	r3, [pc, #68]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x416>
 80057d8:	e054      	b.n	8005884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057da:	4b10      	ldr	r3, [pc, #64]	; (800581c <HAL_RCC_OscConfig+0x478>)
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e0:	f7fd f8f4 	bl	80029cc <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e8:	f7fd f8f0 	bl	80029cc <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e045      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fa:	4b06      	ldr	r3, [pc, #24]	; (8005814 <HAL_RCC_OscConfig+0x470>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1f0      	bne.n	80057e8 <HAL_RCC_OscConfig+0x444>
 8005806:	e03d      	b.n	8005884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d107      	bne.n	8005820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e038      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
 8005814:	40023800 	.word	0x40023800
 8005818:	40007000 	.word	0x40007000
 800581c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005820:	4b1b      	ldr	r3, [pc, #108]	; (8005890 <HAL_RCC_OscConfig+0x4ec>)
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	2b01      	cmp	r3, #1
 800582c:	d028      	beq.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005838:	429a      	cmp	r2, r3
 800583a:	d121      	bne.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005846:	429a      	cmp	r2, r3
 8005848:	d11a      	bne.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005850:	4013      	ands	r3, r2
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005858:	4293      	cmp	r3, r2
 800585a:	d111      	bne.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	3b01      	subs	r3, #1
 800586a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800586c:	429a      	cmp	r2, r3
 800586e:	d107      	bne.n	8005880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d001      	beq.n	8005884 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3718      	adds	r7, #24
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	40023800 	.word	0x40023800

08005894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d101      	bne.n	80058a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e0cc      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058a8:	4b68      	ldr	r3, [pc, #416]	; (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	683a      	ldr	r2, [r7, #0]
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d90c      	bls.n	80058d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b6:	4b65      	ldr	r3, [pc, #404]	; (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80058b8:	683a      	ldr	r2, [r7, #0]
 80058ba:	b2d2      	uxtb	r2, r2
 80058bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058be:	4b63      	ldr	r3, [pc, #396]	; (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0307 	and.w	r3, r3, #7
 80058c6:	683a      	ldr	r2, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e0b8      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0302 	and.w	r3, r3, #2
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d020      	beq.n	800591e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0304 	and.w	r3, r3, #4
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058e8:	4b59      	ldr	r3, [pc, #356]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4a58      	ldr	r2, [pc, #352]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005900:	4b53      	ldr	r3, [pc, #332]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	4a52      	ldr	r2, [pc, #328]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800590a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800590c:	4b50      	ldr	r3, [pc, #320]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	494d      	ldr	r1, [pc, #308]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	4313      	orrs	r3, r2
 800591c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0301 	and.w	r3, r3, #1
 8005926:	2b00      	cmp	r3, #0
 8005928:	d044      	beq.n	80059b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d107      	bne.n	8005942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005932:	4b47      	ldr	r3, [pc, #284]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d119      	bne.n	8005972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e07f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d003      	beq.n	8005952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800594e:	2b03      	cmp	r3, #3
 8005950:	d107      	bne.n	8005962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005952:	4b3f      	ldr	r3, [pc, #252]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d109      	bne.n	8005972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e06f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005962:	4b3b      	ldr	r3, [pc, #236]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d101      	bne.n	8005972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e067      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005972:	4b37      	ldr	r3, [pc, #220]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	f023 0203 	bic.w	r2, r3, #3
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4934      	ldr	r1, [pc, #208]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	4313      	orrs	r3, r2
 8005982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005984:	f7fd f822 	bl	80029cc <HAL_GetTick>
 8005988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598a:	e00a      	b.n	80059a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800598c:	f7fd f81e 	bl	80029cc <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	f241 3288 	movw	r2, #5000	; 0x1388
 800599a:	4293      	cmp	r3, r2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e04f      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a2:	4b2b      	ldr	r3, [pc, #172]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f003 020c 	and.w	r2, r3, #12
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d1eb      	bne.n	800598c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059b4:	4b25      	ldr	r3, [pc, #148]	; (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d20c      	bcs.n	80059dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c2:	4b22      	ldr	r3, [pc, #136]	; (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b20      	ldr	r3, [pc, #128]	; (8005a4c <HAL_RCC_ClockConfig+0x1b8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e032      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0304 	and.w	r3, r3, #4
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d008      	beq.n	80059fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059e8:	4b19      	ldr	r3, [pc, #100]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	4916      	ldr	r1, [pc, #88]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0308 	and.w	r3, r3, #8
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a06:	4b12      	ldr	r3, [pc, #72]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	00db      	lsls	r3, r3, #3
 8005a14:	490e      	ldr	r1, [pc, #56]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a1a:	f000 f821 	bl	8005a60 <HAL_RCC_GetSysClockFreq>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	4b0b      	ldr	r3, [pc, #44]	; (8005a50 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	091b      	lsrs	r3, r3, #4
 8005a26:	f003 030f 	and.w	r3, r3, #15
 8005a2a:	490a      	ldr	r1, [pc, #40]	; (8005a54 <HAL_RCC_ClockConfig+0x1c0>)
 8005a2c:	5ccb      	ldrb	r3, [r1, r3]
 8005a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a32:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <HAL_RCC_ClockConfig+0x1c4>)
 8005a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a36:	4b09      	ldr	r3, [pc, #36]	; (8005a5c <HAL_RCC_ClockConfig+0x1c8>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fc ff82 	bl	8002944 <HAL_InitTick>

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	40023c00 	.word	0x40023c00
 8005a50:	40023800 	.word	0x40023800
 8005a54:	0800e980 	.word	0x0800e980
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	20000004 	.word	0x20000004

08005a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a64:	b094      	sub	sp, #80	; 0x50
 8005a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a70:	2300      	movs	r3, #0
 8005a72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a78:	4b79      	ldr	r3, [pc, #484]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f003 030c 	and.w	r3, r3, #12
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d00d      	beq.n	8005aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	f200 80e1 	bhi.w	8005c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_RCC_GetSysClockFreq+0x34>
 8005a8e:	2b04      	cmp	r3, #4
 8005a90:	d003      	beq.n	8005a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a92:	e0db      	b.n	8005c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a94:	4b73      	ldr	r3, [pc, #460]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a98:	e0db      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a9a:	4b73      	ldr	r3, [pc, #460]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a9e:	e0d8      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005aa0:	4b6f      	ldr	r3, [pc, #444]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aaa:	4b6d      	ldr	r3, [pc, #436]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d063      	beq.n	8005b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ab6:	4b6a      	ldr	r3, [pc, #424]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	099b      	lsrs	r3, r3, #6
 8005abc:	2200      	movs	r2, #0
 8005abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8005aca:	2300      	movs	r3, #0
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
 8005ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ad2:	4622      	mov	r2, r4
 8005ad4:	462b      	mov	r3, r5
 8005ad6:	f04f 0000 	mov.w	r0, #0
 8005ada:	f04f 0100 	mov.w	r1, #0
 8005ade:	0159      	lsls	r1, r3, #5
 8005ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ae4:	0150      	lsls	r0, r2, #5
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4621      	mov	r1, r4
 8005aec:	1a51      	subs	r1, r2, r1
 8005aee:	6139      	str	r1, [r7, #16]
 8005af0:	4629      	mov	r1, r5
 8005af2:	eb63 0301 	sbc.w	r3, r3, r1
 8005af6:	617b      	str	r3, [r7, #20]
 8005af8:	f04f 0200 	mov.w	r2, #0
 8005afc:	f04f 0300 	mov.w	r3, #0
 8005b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b04:	4659      	mov	r1, fp
 8005b06:	018b      	lsls	r3, r1, #6
 8005b08:	4651      	mov	r1, sl
 8005b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b0e:	4651      	mov	r1, sl
 8005b10:	018a      	lsls	r2, r1, #6
 8005b12:	4651      	mov	r1, sl
 8005b14:	ebb2 0801 	subs.w	r8, r2, r1
 8005b18:	4659      	mov	r1, fp
 8005b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	f04f 0300 	mov.w	r3, #0
 8005b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b32:	4690      	mov	r8, r2
 8005b34:	4699      	mov	r9, r3
 8005b36:	4623      	mov	r3, r4
 8005b38:	eb18 0303 	adds.w	r3, r8, r3
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	462b      	mov	r3, r5
 8005b40:	eb49 0303 	adc.w	r3, r9, r3
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	f04f 0200 	mov.w	r2, #0
 8005b4a:	f04f 0300 	mov.w	r3, #0
 8005b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b52:	4629      	mov	r1, r5
 8005b54:	024b      	lsls	r3, r1, #9
 8005b56:	4621      	mov	r1, r4
 8005b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b5c:	4621      	mov	r1, r4
 8005b5e:	024a      	lsls	r2, r1, #9
 8005b60:	4610      	mov	r0, r2
 8005b62:	4619      	mov	r1, r3
 8005b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b66:	2200      	movs	r2, #0
 8005b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b70:	f7fa fb7e 	bl	8000270 <__aeabi_uldivmod>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4613      	mov	r3, r2
 8005b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b7c:	e058      	b.n	8005c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b7e:	4b38      	ldr	r3, [pc, #224]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	099b      	lsrs	r3, r3, #6
 8005b84:	2200      	movs	r2, #0
 8005b86:	4618      	mov	r0, r3
 8005b88:	4611      	mov	r1, r2
 8005b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b8e:	623b      	str	r3, [r7, #32]
 8005b90:	2300      	movs	r3, #0
 8005b92:	627b      	str	r3, [r7, #36]	; 0x24
 8005b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b98:	4642      	mov	r2, r8
 8005b9a:	464b      	mov	r3, r9
 8005b9c:	f04f 0000 	mov.w	r0, #0
 8005ba0:	f04f 0100 	mov.w	r1, #0
 8005ba4:	0159      	lsls	r1, r3, #5
 8005ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005baa:	0150      	lsls	r0, r2, #5
 8005bac:	4602      	mov	r2, r0
 8005bae:	460b      	mov	r3, r1
 8005bb0:	4641      	mov	r1, r8
 8005bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bb6:	4649      	mov	r1, r9
 8005bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bbc:	f04f 0200 	mov.w	r2, #0
 8005bc0:	f04f 0300 	mov.w	r3, #0
 8005bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8005bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8005bd8:	f04f 0200 	mov.w	r2, #0
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	00eb      	lsls	r3, r5, #3
 8005be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005be6:	00e2      	lsls	r2, r4, #3
 8005be8:	4614      	mov	r4, r2
 8005bea:	461d      	mov	r5, r3
 8005bec:	4643      	mov	r3, r8
 8005bee:	18e3      	adds	r3, r4, r3
 8005bf0:	603b      	str	r3, [r7, #0]
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	eb45 0303 	adc.w	r3, r5, r3
 8005bf8:	607b      	str	r3, [r7, #4]
 8005bfa:	f04f 0200 	mov.w	r2, #0
 8005bfe:	f04f 0300 	mov.w	r3, #0
 8005c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c06:	4629      	mov	r1, r5
 8005c08:	028b      	lsls	r3, r1, #10
 8005c0a:	4621      	mov	r1, r4
 8005c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c10:	4621      	mov	r1, r4
 8005c12:	028a      	lsls	r2, r1, #10
 8005c14:	4610      	mov	r0, r2
 8005c16:	4619      	mov	r1, r3
 8005c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	61fa      	str	r2, [r7, #28]
 8005c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c24:	f7fa fb24 	bl	8000270 <__aeabi_uldivmod>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	0c1b      	lsrs	r3, r3, #16
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	005b      	lsls	r3, r3, #1
 8005c3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c4a:	e002      	b.n	8005c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c4c:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3750      	adds	r7, #80	; 0x50
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c5e:	bf00      	nop
 8005c60:	40023800 	.word	0x40023800
 8005c64:	00f42400 	.word	0x00f42400
 8005c68:	007a1200 	.word	0x007a1200

08005c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c72:	681b      	ldr	r3, [r3, #0]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	46bd      	mov	sp, r7
 8005c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7c:	4770      	bx	lr
 8005c7e:	bf00      	nop
 8005c80:	20000000 	.word	0x20000000

08005c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c88:	f7ff fff0 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	4b05      	ldr	r3, [pc, #20]	; (8005ca4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	0a9b      	lsrs	r3, r3, #10
 8005c94:	f003 0307 	and.w	r3, r3, #7
 8005c98:	4903      	ldr	r1, [pc, #12]	; (8005ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c9a:	5ccb      	ldrb	r3, [r1, r3]
 8005c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	0800e990 	.word	0x0800e990

08005cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cb0:	f7ff ffdc 	bl	8005c6c <HAL_RCC_GetHCLKFreq>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	4b05      	ldr	r3, [pc, #20]	; (8005ccc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	0b5b      	lsrs	r3, r3, #13
 8005cbc:	f003 0307 	and.w	r3, r3, #7
 8005cc0:	4903      	ldr	r1, [pc, #12]	; (8005cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cc2:	5ccb      	ldrb	r3, [r1, r3]
 8005cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40023800 	.word	0x40023800
 8005cd0:	0800e990 	.word	0x0800e990

08005cd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d101      	bne.n	8005ce6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e07b      	b.n	8005dde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d108      	bne.n	8005d00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cf6:	d009      	beq.n	8005d0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	61da      	str	r2, [r3, #28]
 8005cfe:	e005      	b.n	8005d0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005d18:	b2db      	uxtb	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d106      	bne.n	8005d2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f7fc f97e 	bl	8002028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2202      	movs	r2, #2
 8005d30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d54:	431a      	orrs	r2, r3
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	68db      	ldr	r3, [r3, #12]
 8005d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	431a      	orrs	r2, r3
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	695b      	ldr	r3, [r3, #20]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	431a      	orrs	r2, r3
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d86:	431a      	orrs	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a1b      	ldr	r3, [r3, #32]
 8005d8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d90:	ea42 0103 	orr.w	r1, r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	0c1b      	lsrs	r3, r3, #16
 8005daa:	f003 0104 	and.w	r1, r3, #4
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db2:	f003 0210 	and.w	r2, r3, #16
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	430a      	orrs	r2, r1
 8005dbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005dcc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3708      	adds	r7, #8
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}

08005de6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de6:	b580      	push	{r7, lr}
 8005de8:	b082      	sub	sp, #8
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e041      	b.n	8005e7c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d106      	bne.n	8005e12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7fc f953 	bl	80020b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2202      	movs	r2, #2
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	3304      	adds	r3, #4
 8005e22:	4619      	mov	r1, r3
 8005e24:	4610      	mov	r0, r2
 8005e26:	f000 fd01 	bl	800682c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2201      	movs	r2, #1
 8005e36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e7a:	2300      	movs	r3, #0
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3708      	adds	r7, #8
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d001      	beq.n	8005e9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005e98:	2301      	movs	r3, #1
 8005e9a:	e046      	b.n	8005f2a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2202      	movs	r2, #2
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a23      	ldr	r2, [pc, #140]	; (8005f38 <HAL_TIM_Base_Start+0xb4>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d022      	beq.n	8005ef4 <HAL_TIM_Base_Start+0x70>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb6:	d01d      	beq.n	8005ef4 <HAL_TIM_Base_Start+0x70>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a1f      	ldr	r2, [pc, #124]	; (8005f3c <HAL_TIM_Base_Start+0xb8>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d018      	beq.n	8005ef4 <HAL_TIM_Base_Start+0x70>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a1e      	ldr	r2, [pc, #120]	; (8005f40 <HAL_TIM_Base_Start+0xbc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d013      	beq.n	8005ef4 <HAL_TIM_Base_Start+0x70>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a1c      	ldr	r2, [pc, #112]	; (8005f44 <HAL_TIM_Base_Start+0xc0>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00e      	beq.n	8005ef4 <HAL_TIM_Base_Start+0x70>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1b      	ldr	r2, [pc, #108]	; (8005f48 <HAL_TIM_Base_Start+0xc4>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d009      	beq.n	8005ef4 <HAL_TIM_Base_Start+0x70>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a19      	ldr	r2, [pc, #100]	; (8005f4c <HAL_TIM_Base_Start+0xc8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d004      	beq.n	8005ef4 <HAL_TIM_Base_Start+0x70>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a18      	ldr	r2, [pc, #96]	; (8005f50 <HAL_TIM_Base_Start+0xcc>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d111      	bne.n	8005f18 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	689b      	ldr	r3, [r3, #8]
 8005efa:	f003 0307 	and.w	r3, r3, #7
 8005efe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2b06      	cmp	r3, #6
 8005f04:	d010      	beq.n	8005f28 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0201 	orr.w	r2, r2, #1
 8005f14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f16:	e007      	b.n	8005f28 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3714      	adds	r7, #20
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40000400 	.word	0x40000400
 8005f40:	40000800 	.word	0x40000800
 8005f44:	40000c00 	.word	0x40000c00
 8005f48:	40010400 	.word	0x40010400
 8005f4c:	40014000 	.word	0x40014000
 8005f50:	40001800 	.word	0x40001800

08005f54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e041      	b.n	8005fea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f839 	bl	8005ff2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4619      	mov	r1, r3
 8005f92:	4610      	mov	r0, r2
 8005f94:	f000 fc4a 	bl	800682c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fe8:	2300      	movs	r3, #0
}
 8005fea:	4618      	mov	r0, r3
 8005fec:	3708      	adds	r7, #8
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr
	...

08006008 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
 8006010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d109      	bne.n	800602c <HAL_TIM_PWM_Start+0x24>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800601e:	b2db      	uxtb	r3, r3
 8006020:	2b01      	cmp	r3, #1
 8006022:	bf14      	ite	ne
 8006024:	2301      	movne	r3, #1
 8006026:	2300      	moveq	r3, #0
 8006028:	b2db      	uxtb	r3, r3
 800602a:	e022      	b.n	8006072 <HAL_TIM_PWM_Start+0x6a>
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	2b04      	cmp	r3, #4
 8006030:	d109      	bne.n	8006046 <HAL_TIM_PWM_Start+0x3e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b01      	cmp	r3, #1
 800603c:	bf14      	ite	ne
 800603e:	2301      	movne	r3, #1
 8006040:	2300      	moveq	r3, #0
 8006042:	b2db      	uxtb	r3, r3
 8006044:	e015      	b.n	8006072 <HAL_TIM_PWM_Start+0x6a>
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	2b08      	cmp	r3, #8
 800604a:	d109      	bne.n	8006060 <HAL_TIM_PWM_Start+0x58>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006052:	b2db      	uxtb	r3, r3
 8006054:	2b01      	cmp	r3, #1
 8006056:	bf14      	ite	ne
 8006058:	2301      	movne	r3, #1
 800605a:	2300      	moveq	r3, #0
 800605c:	b2db      	uxtb	r3, r3
 800605e:	e008      	b.n	8006072 <HAL_TIM_PWM_Start+0x6a>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	bf14      	ite	ne
 800606c:	2301      	movne	r3, #1
 800606e:	2300      	moveq	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e07c      	b.n	8006174 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d104      	bne.n	800608a <HAL_TIM_PWM_Start+0x82>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006088:	e013      	b.n	80060b2 <HAL_TIM_PWM_Start+0xaa>
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b04      	cmp	r3, #4
 800608e:	d104      	bne.n	800609a <HAL_TIM_PWM_Start+0x92>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006098:	e00b      	b.n	80060b2 <HAL_TIM_PWM_Start+0xaa>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b08      	cmp	r3, #8
 800609e:	d104      	bne.n	80060aa <HAL_TIM_PWM_Start+0xa2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2202      	movs	r2, #2
 80060a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060a8:	e003      	b.n	80060b2 <HAL_TIM_PWM_Start+0xaa>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2202      	movs	r2, #2
 80060ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2201      	movs	r2, #1
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 ff31 	bl	8006f22 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a2d      	ldr	r2, [pc, #180]	; (800617c <HAL_TIM_PWM_Start+0x174>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIM_PWM_Start+0xcc>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a2c      	ldr	r2, [pc, #176]	; (8006180 <HAL_TIM_PWM_Start+0x178>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d101      	bne.n	80060d8 <HAL_TIM_PWM_Start+0xd0>
 80060d4:	2301      	movs	r3, #1
 80060d6:	e000      	b.n	80060da <HAL_TIM_PWM_Start+0xd2>
 80060d8:	2300      	movs	r3, #0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d007      	beq.n	80060ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a22      	ldr	r2, [pc, #136]	; (800617c <HAL_TIM_PWM_Start+0x174>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d022      	beq.n	800613e <HAL_TIM_PWM_Start+0x136>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006100:	d01d      	beq.n	800613e <HAL_TIM_PWM_Start+0x136>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1f      	ldr	r2, [pc, #124]	; (8006184 <HAL_TIM_PWM_Start+0x17c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d018      	beq.n	800613e <HAL_TIM_PWM_Start+0x136>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1d      	ldr	r2, [pc, #116]	; (8006188 <HAL_TIM_PWM_Start+0x180>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_TIM_PWM_Start+0x136>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a1c      	ldr	r2, [pc, #112]	; (800618c <HAL_TIM_PWM_Start+0x184>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00e      	beq.n	800613e <HAL_TIM_PWM_Start+0x136>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a16      	ldr	r2, [pc, #88]	; (8006180 <HAL_TIM_PWM_Start+0x178>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_TIM_PWM_Start+0x136>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a18      	ldr	r2, [pc, #96]	; (8006190 <HAL_TIM_PWM_Start+0x188>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_TIM_PWM_Start+0x136>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a16      	ldr	r2, [pc, #88]	; (8006194 <HAL_TIM_PWM_Start+0x18c>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d111      	bne.n	8006162 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 0307 	and.w	r3, r3, #7
 8006148:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2b06      	cmp	r3, #6
 800614e:	d010      	beq.n	8006172 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f042 0201 	orr.w	r2, r2, #1
 800615e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006160:	e007      	b.n	8006172 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0201 	orr.w	r2, r2, #1
 8006170:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	40010000 	.word	0x40010000
 8006180:	40010400 	.word	0x40010400
 8006184:	40000400 	.word	0x40000400
 8006188:	40000800 	.word	0x40000800
 800618c:	40000c00 	.word	0x40000c00
 8006190:	40014000 	.word	0x40014000
 8006194:	40001800 	.word	0x40001800

08006198 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2200      	movs	r2, #0
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f000 feb9 	bl	8006f22 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a2e      	ldr	r2, [pc, #184]	; (8006270 <HAL_TIM_PWM_Stop+0xd8>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d004      	beq.n	80061c4 <HAL_TIM_PWM_Stop+0x2c>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a2d      	ldr	r2, [pc, #180]	; (8006274 <HAL_TIM_PWM_Stop+0xdc>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d101      	bne.n	80061c8 <HAL_TIM_PWM_Stop+0x30>
 80061c4:	2301      	movs	r3, #1
 80061c6:	e000      	b.n	80061ca <HAL_TIM_PWM_Stop+0x32>
 80061c8:	2300      	movs	r3, #0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d017      	beq.n	80061fe <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6a1a      	ldr	r2, [r3, #32]
 80061d4:	f241 1311 	movw	r3, #4369	; 0x1111
 80061d8:	4013      	ands	r3, r2
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10f      	bne.n	80061fe <HAL_TIM_PWM_Stop+0x66>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6a1a      	ldr	r2, [r3, #32]
 80061e4:	f240 4344 	movw	r3, #1092	; 0x444
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d107      	bne.n	80061fe <HAL_TIM_PWM_Stop+0x66>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6a1a      	ldr	r2, [r3, #32]
 8006204:	f241 1311 	movw	r3, #4369	; 0x1111
 8006208:	4013      	ands	r3, r2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10f      	bne.n	800622e <HAL_TIM_PWM_Stop+0x96>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	6a1a      	ldr	r2, [r3, #32]
 8006214:	f240 4344 	movw	r3, #1092	; 0x444
 8006218:	4013      	ands	r3, r2
 800621a:	2b00      	cmp	r3, #0
 800621c:	d107      	bne.n	800622e <HAL_TIM_PWM_Stop+0x96>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0201 	bic.w	r2, r2, #1
 800622c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <HAL_TIM_PWM_Stop+0xa6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800623c:	e013      	b.n	8006266 <HAL_TIM_PWM_Stop+0xce>
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	2b04      	cmp	r3, #4
 8006242:	d104      	bne.n	800624e <HAL_TIM_PWM_Stop+0xb6>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800624c:	e00b      	b.n	8006266 <HAL_TIM_PWM_Stop+0xce>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d104      	bne.n	800625e <HAL_TIM_PWM_Stop+0xc6>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800625c:	e003      	b.n	8006266 <HAL_TIM_PWM_Stop+0xce>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	40010000 	.word	0x40010000
 8006274:	40010400 	.word	0x40010400

08006278 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	2b0c      	cmp	r3, #12
 800628a:	d841      	bhi.n	8006310 <HAL_TIM_PWM_Stop_IT+0x98>
 800628c:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800628e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006292:	bf00      	nop
 8006294:	080062c9 	.word	0x080062c9
 8006298:	08006311 	.word	0x08006311
 800629c:	08006311 	.word	0x08006311
 80062a0:	08006311 	.word	0x08006311
 80062a4:	080062db 	.word	0x080062db
 80062a8:	08006311 	.word	0x08006311
 80062ac:	08006311 	.word	0x08006311
 80062b0:	08006311 	.word	0x08006311
 80062b4:	080062ed 	.word	0x080062ed
 80062b8:	08006311 	.word	0x08006311
 80062bc:	08006311 	.word	0x08006311
 80062c0:	08006311 	.word	0x08006311
 80062c4:	080062ff 	.word	0x080062ff
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f022 0202 	bic.w	r2, r2, #2
 80062d6:	60da      	str	r2, [r3, #12]
      break;
 80062d8:	e01d      	b.n	8006316 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0204 	bic.w	r2, r2, #4
 80062e8:	60da      	str	r2, [r3, #12]
      break;
 80062ea:	e014      	b.n	8006316 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68da      	ldr	r2, [r3, #12]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f022 0208 	bic.w	r2, r2, #8
 80062fa:	60da      	str	r2, [r3, #12]
      break;
 80062fc:	e00b      	b.n	8006316 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0210 	bic.w	r2, r2, #16
 800630c:	60da      	str	r2, [r3, #12]
      break;
 800630e:	e002      	b.n	8006316 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
      break;
 8006314:	bf00      	nop
  }

  if (status == HAL_OK)
 8006316:	7bfb      	ldrb	r3, [r7, #15]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d161      	bne.n	80063e0 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2200      	movs	r2, #0
 8006322:	6839      	ldr	r1, [r7, #0]
 8006324:	4618      	mov	r0, r3
 8006326:	f000 fdfc 	bl	8006f22 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a2f      	ldr	r2, [pc, #188]	; (80063ec <HAL_TIM_PWM_Stop_IT+0x174>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d004      	beq.n	800633e <HAL_TIM_PWM_Stop_IT+0xc6>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a2d      	ldr	r2, [pc, #180]	; (80063f0 <HAL_TIM_PWM_Stop_IT+0x178>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d101      	bne.n	8006342 <HAL_TIM_PWM_Stop_IT+0xca>
 800633e:	2301      	movs	r3, #1
 8006340:	e000      	b.n	8006344 <HAL_TIM_PWM_Stop_IT+0xcc>
 8006342:	2300      	movs	r3, #0
 8006344:	2b00      	cmp	r3, #0
 8006346:	d017      	beq.n	8006378 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6a1a      	ldr	r2, [r3, #32]
 800634e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006352:	4013      	ands	r3, r2
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10f      	bne.n	8006378 <HAL_TIM_PWM_Stop_IT+0x100>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6a1a      	ldr	r2, [r3, #32]
 800635e:	f240 4344 	movw	r3, #1092	; 0x444
 8006362:	4013      	ands	r3, r2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d107      	bne.n	8006378 <HAL_TIM_PWM_Stop_IT+0x100>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006376:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6a1a      	ldr	r2, [r3, #32]
 800637e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006382:	4013      	ands	r3, r2
 8006384:	2b00      	cmp	r3, #0
 8006386:	d10f      	bne.n	80063a8 <HAL_TIM_PWM_Stop_IT+0x130>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6a1a      	ldr	r2, [r3, #32]
 800638e:	f240 4344 	movw	r3, #1092	; 0x444
 8006392:	4013      	ands	r3, r2
 8006394:	2b00      	cmp	r3, #0
 8006396:	d107      	bne.n	80063a8 <HAL_TIM_PWM_Stop_IT+0x130>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f022 0201 	bic.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d104      	bne.n	80063b8 <HAL_TIM_PWM_Stop_IT+0x140>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b6:	e013      	b.n	80063e0 <HAL_TIM_PWM_Stop_IT+0x168>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	d104      	bne.n	80063c8 <HAL_TIM_PWM_Stop_IT+0x150>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063c6:	e00b      	b.n	80063e0 <HAL_TIM_PWM_Stop_IT+0x168>
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b08      	cmp	r3, #8
 80063cc:	d104      	bne.n	80063d8 <HAL_TIM_PWM_Stop_IT+0x160>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063d6:	e003      	b.n	80063e0 <HAL_TIM_PWM_Stop_IT+0x168>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80063e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	40010000 	.word	0x40010000
 80063f0:	40010400 	.word	0x40010400

080063f4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d101      	bne.n	8006408 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e041      	b.n	800648c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b00      	cmp	r3, #0
 8006412:	d106      	bne.n	8006422 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f7fb fedf 	bl	80021e0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2202      	movs	r2, #2
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f000 f9f9 	bl	800682c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0208 	bic.w	r2, r2, #8
 8006448:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	6819      	ldr	r1, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3708      	adds	r7, #8
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}

08006494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a0:	2300      	movs	r3, #0
 80064a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d101      	bne.n	80064b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064ae:	2302      	movs	r3, #2
 80064b0:	e0ae      	b.n	8006610 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2b0c      	cmp	r3, #12
 80064be:	f200 809f 	bhi.w	8006600 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80064c2:	a201      	add	r2, pc, #4	; (adr r2, 80064c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c8:	080064fd 	.word	0x080064fd
 80064cc:	08006601 	.word	0x08006601
 80064d0:	08006601 	.word	0x08006601
 80064d4:	08006601 	.word	0x08006601
 80064d8:	0800653d 	.word	0x0800653d
 80064dc:	08006601 	.word	0x08006601
 80064e0:	08006601 	.word	0x08006601
 80064e4:	08006601 	.word	0x08006601
 80064e8:	0800657f 	.word	0x0800657f
 80064ec:	08006601 	.word	0x08006601
 80064f0:	08006601 	.word	0x08006601
 80064f4:	08006601 	.word	0x08006601
 80064f8:	080065bf 	.word	0x080065bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68b9      	ldr	r1, [r7, #8]
 8006502:	4618      	mov	r0, r3
 8006504:	f000 fa32 	bl	800696c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	699a      	ldr	r2, [r3, #24]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0208 	orr.w	r2, r2, #8
 8006516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	699a      	ldr	r2, [r3, #24]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 0204 	bic.w	r2, r2, #4
 8006526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	6999      	ldr	r1, [r3, #24]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	691a      	ldr	r2, [r3, #16]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	430a      	orrs	r2, r1
 8006538:	619a      	str	r2, [r3, #24]
      break;
 800653a:	e064      	b.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68b9      	ldr	r1, [r7, #8]
 8006542:	4618      	mov	r0, r3
 8006544:	f000 fa82 	bl	8006a4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	699a      	ldr	r2, [r3, #24]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	6999      	ldr	r1, [r3, #24]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	021a      	lsls	r2, r3, #8
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	430a      	orrs	r2, r1
 800657a:	619a      	str	r2, [r3, #24]
      break;
 800657c:	e043      	b.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68b9      	ldr	r1, [r7, #8]
 8006584:	4618      	mov	r0, r3
 8006586:	f000 fad7 	bl	8006b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	69da      	ldr	r2, [r3, #28]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f042 0208 	orr.w	r2, r2, #8
 8006598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f022 0204 	bic.w	r2, r2, #4
 80065a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	69d9      	ldr	r1, [r3, #28]
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	430a      	orrs	r2, r1
 80065ba:	61da      	str	r2, [r3, #28]
      break;
 80065bc:	e023      	b.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fb2b 	bl	8006c20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	69da      	ldr	r2, [r3, #28]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	69da      	ldr	r2, [r3, #28]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	69d9      	ldr	r1, [r3, #28]
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	691b      	ldr	r3, [r3, #16]
 80065f4:	021a      	lsls	r2, r3, #8
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	61da      	str	r2, [r3, #28]
      break;
 80065fe:	e002      	b.n	8006606 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	75fb      	strb	r3, [r7, #23]
      break;
 8006604:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800660e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006610:	4618      	mov	r0, r3
 8006612:	3718      	adds	r7, #24
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIM_ConfigClockSource+0x1c>
 8006630:	2302      	movs	r3, #2
 8006632:	e0b4      	b.n	800679e <HAL_TIM_ConfigClockSource+0x186>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800665a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666c:	d03e      	beq.n	80066ec <HAL_TIM_ConfigClockSource+0xd4>
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006672:	f200 8087 	bhi.w	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667a:	f000 8086 	beq.w	800678a <HAL_TIM_ConfigClockSource+0x172>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006682:	d87f      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 8006684:	2b70      	cmp	r3, #112	; 0x70
 8006686:	d01a      	beq.n	80066be <HAL_TIM_ConfigClockSource+0xa6>
 8006688:	2b70      	cmp	r3, #112	; 0x70
 800668a:	d87b      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 800668c:	2b60      	cmp	r3, #96	; 0x60
 800668e:	d050      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x11a>
 8006690:	2b60      	cmp	r3, #96	; 0x60
 8006692:	d877      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 8006694:	2b50      	cmp	r3, #80	; 0x50
 8006696:	d03c      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0xfa>
 8006698:	2b50      	cmp	r3, #80	; 0x50
 800669a:	d873      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 800669c:	2b40      	cmp	r3, #64	; 0x40
 800669e:	d058      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x13a>
 80066a0:	2b40      	cmp	r3, #64	; 0x40
 80066a2:	d86f      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 80066a4:	2b30      	cmp	r3, #48	; 0x30
 80066a6:	d064      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066a8:	2b30      	cmp	r3, #48	; 0x30
 80066aa:	d86b      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d060      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d867      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d05c      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066b8:	2b10      	cmp	r3, #16
 80066ba:	d05a      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066bc:	e062      	b.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6899      	ldr	r1, [r3, #8]
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	f000 fc08 	bl	8006ee2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	609a      	str	r2, [r3, #8]
      break;
 80066ea:	e04f      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6899      	ldr	r1, [r3, #8]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	f000 fbf1 	bl	8006ee2 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800670e:	609a      	str	r2, [r3, #8]
      break;
 8006710:	e03c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6859      	ldr	r1, [r3, #4]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	461a      	mov	r2, r3
 8006720:	f000 fb65 	bl	8006dee <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2150      	movs	r1, #80	; 0x50
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fbbe 	bl	8006eac <TIM_ITRx_SetConfig>
      break;
 8006730:	e02c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6859      	ldr	r1, [r3, #4]
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
 800673e:	461a      	mov	r2, r3
 8006740:	f000 fb84 	bl	8006e4c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2160      	movs	r1, #96	; 0x60
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fbae 	bl	8006eac <TIM_ITRx_SetConfig>
      break;
 8006750:	e01c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6818      	ldr	r0, [r3, #0]
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6859      	ldr	r1, [r3, #4]
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
 800675e:	461a      	mov	r2, r3
 8006760:	f000 fb45 	bl	8006dee <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2140      	movs	r1, #64	; 0x40
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fb9e 	bl	8006eac <TIM_ITRx_SetConfig>
      break;
 8006770:	e00c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	4610      	mov	r0, r2
 800677e:	f000 fb95 	bl	8006eac <TIM_ITRx_SetConfig>
      break;
 8006782:	e003      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	e000      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800678a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b082      	sub	sp, #8
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
 80067ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d101      	bne.n	80067be <HAL_TIM_SlaveConfigSynchro+0x18>
 80067ba:	2302      	movs	r3, #2
 80067bc:	e031      	b.n	8006822 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2202      	movs	r2, #2
 80067ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80067ce:	6839      	ldr	r1, [r7, #0]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f000 fa7b 	bl	8006ccc <TIM_SlaveTimer_SetConfig>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d009      	beq.n	80067f0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e018      	b.n	8006822 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067fe:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800680e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
	...

0800682c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	4a40      	ldr	r2, [pc, #256]	; (8006940 <TIM_Base_SetConfig+0x114>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d013      	beq.n	800686c <TIM_Base_SetConfig+0x40>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800684a:	d00f      	beq.n	800686c <TIM_Base_SetConfig+0x40>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a3d      	ldr	r2, [pc, #244]	; (8006944 <TIM_Base_SetConfig+0x118>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d00b      	beq.n	800686c <TIM_Base_SetConfig+0x40>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	4a3c      	ldr	r2, [pc, #240]	; (8006948 <TIM_Base_SetConfig+0x11c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d007      	beq.n	800686c <TIM_Base_SetConfig+0x40>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a3b      	ldr	r2, [pc, #236]	; (800694c <TIM_Base_SetConfig+0x120>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d003      	beq.n	800686c <TIM_Base_SetConfig+0x40>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a3a      	ldr	r2, [pc, #232]	; (8006950 <TIM_Base_SetConfig+0x124>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d108      	bne.n	800687e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	4313      	orrs	r3, r2
 800687c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a2f      	ldr	r2, [pc, #188]	; (8006940 <TIM_Base_SetConfig+0x114>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d02b      	beq.n	80068de <TIM_Base_SetConfig+0xb2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800688c:	d027      	beq.n	80068de <TIM_Base_SetConfig+0xb2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a2c      	ldr	r2, [pc, #176]	; (8006944 <TIM_Base_SetConfig+0x118>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d023      	beq.n	80068de <TIM_Base_SetConfig+0xb2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a2b      	ldr	r2, [pc, #172]	; (8006948 <TIM_Base_SetConfig+0x11c>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d01f      	beq.n	80068de <TIM_Base_SetConfig+0xb2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a2a      	ldr	r2, [pc, #168]	; (800694c <TIM_Base_SetConfig+0x120>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d01b      	beq.n	80068de <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a29      	ldr	r2, [pc, #164]	; (8006950 <TIM_Base_SetConfig+0x124>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d017      	beq.n	80068de <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a28      	ldr	r2, [pc, #160]	; (8006954 <TIM_Base_SetConfig+0x128>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d013      	beq.n	80068de <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a27      	ldr	r2, [pc, #156]	; (8006958 <TIM_Base_SetConfig+0x12c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d00f      	beq.n	80068de <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a26      	ldr	r2, [pc, #152]	; (800695c <TIM_Base_SetConfig+0x130>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00b      	beq.n	80068de <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a25      	ldr	r2, [pc, #148]	; (8006960 <TIM_Base_SetConfig+0x134>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d007      	beq.n	80068de <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a24      	ldr	r2, [pc, #144]	; (8006964 <TIM_Base_SetConfig+0x138>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d003      	beq.n	80068de <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a23      	ldr	r2, [pc, #140]	; (8006968 <TIM_Base_SetConfig+0x13c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d108      	bne.n	80068f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	689a      	ldr	r2, [r3, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a0a      	ldr	r2, [pc, #40]	; (8006940 <TIM_Base_SetConfig+0x114>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d003      	beq.n	8006924 <TIM_Base_SetConfig+0xf8>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a0c      	ldr	r2, [pc, #48]	; (8006950 <TIM_Base_SetConfig+0x124>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d103      	bne.n	800692c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2201      	movs	r2, #1
 8006930:	615a      	str	r2, [r3, #20]
}
 8006932:	bf00      	nop
 8006934:	3714      	adds	r7, #20
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr
 800693e:	bf00      	nop
 8006940:	40010000 	.word	0x40010000
 8006944:	40000400 	.word	0x40000400
 8006948:	40000800 	.word	0x40000800
 800694c:	40000c00 	.word	0x40000c00
 8006950:	40010400 	.word	0x40010400
 8006954:	40014000 	.word	0x40014000
 8006958:	40014400 	.word	0x40014400
 800695c:	40014800 	.word	0x40014800
 8006960:	40001800 	.word	0x40001800
 8006964:	40001c00 	.word	0x40001c00
 8006968:	40002000 	.word	0x40002000

0800696c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800696c:	b480      	push	{r7}
 800696e:	b087      	sub	sp, #28
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	f023 0201 	bic.w	r2, r3, #1
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f023 0303 	bic.w	r3, r3, #3
 80069a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f023 0302 	bic.w	r3, r3, #2
 80069b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	697a      	ldr	r2, [r7, #20]
 80069bc:	4313      	orrs	r3, r2
 80069be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a20      	ldr	r2, [pc, #128]	; (8006a44 <TIM_OC1_SetConfig+0xd8>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d003      	beq.n	80069d0 <TIM_OC1_SetConfig+0x64>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	4a1f      	ldr	r2, [pc, #124]	; (8006a48 <TIM_OC1_SetConfig+0xdc>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d10c      	bne.n	80069ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f023 0308 	bic.w	r3, r3, #8
 80069d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	4313      	orrs	r3, r2
 80069e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	f023 0304 	bic.w	r3, r3, #4
 80069e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4a15      	ldr	r2, [pc, #84]	; (8006a44 <TIM_OC1_SetConfig+0xd8>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d003      	beq.n	80069fa <TIM_OC1_SetConfig+0x8e>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a14      	ldr	r2, [pc, #80]	; (8006a48 <TIM_OC1_SetConfig+0xdc>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d111      	bne.n	8006a1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	695b      	ldr	r3, [r3, #20]
 8006a0e:	693a      	ldr	r2, [r7, #16]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	685a      	ldr	r2, [r3, #4]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	621a      	str	r2, [r3, #32]
}
 8006a38:	bf00      	nop
 8006a3a:	371c      	adds	r7, #28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	40010000 	.word	0x40010000
 8006a48:	40010400 	.word	0x40010400

08006a4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b087      	sub	sp, #28
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	f023 0210 	bic.w	r2, r3, #16
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	021b      	lsls	r3, r3, #8
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	f023 0320 	bic.w	r3, r3, #32
 8006a96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	011b      	lsls	r3, r3, #4
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a22      	ldr	r2, [pc, #136]	; (8006b30 <TIM_OC2_SetConfig+0xe4>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_OC2_SetConfig+0x68>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a21      	ldr	r2, [pc, #132]	; (8006b34 <TIM_OC2_SetConfig+0xe8>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d10d      	bne.n	8006ad0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ace:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a17      	ldr	r2, [pc, #92]	; (8006b30 <TIM_OC2_SetConfig+0xe4>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d003      	beq.n	8006ae0 <TIM_OC2_SetConfig+0x94>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a16      	ldr	r2, [pc, #88]	; (8006b34 <TIM_OC2_SetConfig+0xe8>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d113      	bne.n	8006b08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	699b      	ldr	r3, [r3, #24]
 8006b00:	009b      	lsls	r3, r3, #2
 8006b02:	693a      	ldr	r2, [r7, #16]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	693a      	ldr	r2, [r7, #16]
 8006b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	697a      	ldr	r2, [r7, #20]
 8006b20:	621a      	str	r2, [r3, #32]
}
 8006b22:	bf00      	nop
 8006b24:	371c      	adds	r7, #28
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	40010000 	.word	0x40010000
 8006b34:	40010400 	.word	0x40010400

08006b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b087      	sub	sp, #28
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69db      	ldr	r3, [r3, #28]
 8006b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f023 0303 	bic.w	r3, r3, #3
 8006b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68fa      	ldr	r2, [r7, #12]
 8006b76:	4313      	orrs	r3, r2
 8006b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	697a      	ldr	r2, [r7, #20]
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a21      	ldr	r2, [pc, #132]	; (8006c18 <TIM_OC3_SetConfig+0xe0>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d003      	beq.n	8006b9e <TIM_OC3_SetConfig+0x66>
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	4a20      	ldr	r2, [pc, #128]	; (8006c1c <TIM_OC3_SetConfig+0xe4>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d10d      	bne.n	8006bba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ba4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	021b      	lsls	r3, r3, #8
 8006bac:	697a      	ldr	r2, [r7, #20]
 8006bae:	4313      	orrs	r3, r2
 8006bb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a16      	ldr	r2, [pc, #88]	; (8006c18 <TIM_OC3_SetConfig+0xe0>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d003      	beq.n	8006bca <TIM_OC3_SetConfig+0x92>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a15      	ldr	r2, [pc, #84]	; (8006c1c <TIM_OC3_SetConfig+0xe4>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d113      	bne.n	8006bf2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	011b      	lsls	r3, r3, #4
 8006bec:	693a      	ldr	r2, [r7, #16]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	697a      	ldr	r2, [r7, #20]
 8006c0a:	621a      	str	r2, [r3, #32]
}
 8006c0c:	bf00      	nop
 8006c0e:	371c      	adds	r7, #28
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	40010000 	.word	0x40010000
 8006c1c:	40010400 	.word	0x40010400

08006c20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b087      	sub	sp, #28
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6a1b      	ldr	r3, [r3, #32]
 8006c2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	021b      	lsls	r3, r3, #8
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4313      	orrs	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	031b      	lsls	r3, r3, #12
 8006c72:	693a      	ldr	r2, [r7, #16]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a12      	ldr	r2, [pc, #72]	; (8006cc4 <TIM_OC4_SetConfig+0xa4>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d003      	beq.n	8006c88 <TIM_OC4_SetConfig+0x68>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	4a11      	ldr	r2, [pc, #68]	; (8006cc8 <TIM_OC4_SetConfig+0xa8>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d109      	bne.n	8006c9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	695b      	ldr	r3, [r3, #20]
 8006c94:	019b      	lsls	r3, r3, #6
 8006c96:	697a      	ldr	r2, [r7, #20]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	40010000 	.word	0x40010000
 8006cc8:	40010400 	.word	0x40010400

08006ccc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b086      	sub	sp, #24
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	689b      	ldr	r3, [r3, #8]
 8006ce0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	f023 0307 	bic.w	r3, r3, #7
 8006cfa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	693a      	ldr	r2, [r7, #16]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	693a      	ldr	r2, [r7, #16]
 8006d0c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	685b      	ldr	r3, [r3, #4]
 8006d12:	2b70      	cmp	r3, #112	; 0x70
 8006d14:	d01a      	beq.n	8006d4c <TIM_SlaveTimer_SetConfig+0x80>
 8006d16:	2b70      	cmp	r3, #112	; 0x70
 8006d18:	d860      	bhi.n	8006ddc <TIM_SlaveTimer_SetConfig+0x110>
 8006d1a:	2b60      	cmp	r3, #96	; 0x60
 8006d1c:	d054      	beq.n	8006dc8 <TIM_SlaveTimer_SetConfig+0xfc>
 8006d1e:	2b60      	cmp	r3, #96	; 0x60
 8006d20:	d85c      	bhi.n	8006ddc <TIM_SlaveTimer_SetConfig+0x110>
 8006d22:	2b50      	cmp	r3, #80	; 0x50
 8006d24:	d046      	beq.n	8006db4 <TIM_SlaveTimer_SetConfig+0xe8>
 8006d26:	2b50      	cmp	r3, #80	; 0x50
 8006d28:	d858      	bhi.n	8006ddc <TIM_SlaveTimer_SetConfig+0x110>
 8006d2a:	2b40      	cmp	r3, #64	; 0x40
 8006d2c:	d019      	beq.n	8006d62 <TIM_SlaveTimer_SetConfig+0x96>
 8006d2e:	2b40      	cmp	r3, #64	; 0x40
 8006d30:	d854      	bhi.n	8006ddc <TIM_SlaveTimer_SetConfig+0x110>
 8006d32:	2b30      	cmp	r3, #48	; 0x30
 8006d34:	d055      	beq.n	8006de2 <TIM_SlaveTimer_SetConfig+0x116>
 8006d36:	2b30      	cmp	r3, #48	; 0x30
 8006d38:	d850      	bhi.n	8006ddc <TIM_SlaveTimer_SetConfig+0x110>
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d051      	beq.n	8006de2 <TIM_SlaveTimer_SetConfig+0x116>
 8006d3e:	2b20      	cmp	r3, #32
 8006d40:	d84c      	bhi.n	8006ddc <TIM_SlaveTimer_SetConfig+0x110>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d04d      	beq.n	8006de2 <TIM_SlaveTimer_SetConfig+0x116>
 8006d46:	2b10      	cmp	r3, #16
 8006d48:	d04b      	beq.n	8006de2 <TIM_SlaveTimer_SetConfig+0x116>
 8006d4a:	e047      	b.n	8006ddc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	68d9      	ldr	r1, [r3, #12]
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	689a      	ldr	r2, [r3, #8]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	f000 f8c1 	bl	8006ee2 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006d60:	e040      	b.n	8006de4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b05      	cmp	r3, #5
 8006d68:	d101      	bne.n	8006d6e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e03b      	b.n	8006de6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	6a1a      	ldr	r2, [r3, #32]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d94:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	621a      	str	r2, [r3, #32]
      break;
 8006db2:	e017      	b.n	8006de4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6818      	ldr	r0, [r3, #0]
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	6899      	ldr	r1, [r3, #8]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	f000 f814 	bl	8006dee <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006dc6:	e00d      	b.n	8006de4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6818      	ldr	r0, [r3, #0]
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	6899      	ldr	r1, [r3, #8]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f000 f839 	bl	8006e4c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006dda:	e003      	b.n	8006de4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	75fb      	strb	r3, [r7, #23]
      break;
 8006de0:	e000      	b.n	8006de4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006de2:	bf00      	nop
  }

  return status;
 8006de4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3718      	adds	r7, #24
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dee:	b480      	push	{r7}
 8006df0:	b087      	sub	sp, #28
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	60f8      	str	r0, [r7, #12]
 8006df6:	60b9      	str	r1, [r7, #8]
 8006df8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6a1b      	ldr	r3, [r3, #32]
 8006e04:	f023 0201 	bic.w	r2, r3, #1
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	f023 030a 	bic.w	r3, r3, #10
 8006e2a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	621a      	str	r2, [r3, #32]
}
 8006e40:	bf00      	nop
 8006e42:	371c      	adds	r7, #28
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	f023 0210 	bic.w	r2, r3, #16
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	031b      	lsls	r3, r3, #12
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	011b      	lsls	r3, r3, #4
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	697a      	ldr	r2, [r7, #20]
 8006e98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	621a      	str	r2, [r3, #32]
}
 8006ea0:	bf00      	nop
 8006ea2:	371c      	adds	r7, #28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eaa:	4770      	bx	lr

08006eac <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
 8006eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ec4:	683a      	ldr	r2, [r7, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f043 0307 	orr.w	r3, r3, #7
 8006ece:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	609a      	str	r2, [r3, #8]
}
 8006ed6:	bf00      	nop
 8006ed8:	3714      	adds	r7, #20
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr

08006ee2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ee2:	b480      	push	{r7}
 8006ee4:	b087      	sub	sp, #28
 8006ee6:	af00      	add	r7, sp, #0
 8006ee8:	60f8      	str	r0, [r7, #12]
 8006eea:	60b9      	str	r1, [r7, #8]
 8006eec:	607a      	str	r2, [r7, #4]
 8006eee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006efc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	021a      	lsls	r2, r3, #8
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	431a      	orrs	r2, r3
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	609a      	str	r2, [r3, #8]
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f22:	b480      	push	{r7}
 8006f24:	b087      	sub	sp, #28
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f003 031f 	and.w	r3, r3, #31
 8006f34:	2201      	movs	r2, #1
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6a1a      	ldr	r2, [r3, #32]
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	43db      	mvns	r3, r3
 8006f44:	401a      	ands	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	6a1a      	ldr	r2, [r3, #32]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	f003 031f 	and.w	r3, r3, #31
 8006f54:	6879      	ldr	r1, [r7, #4]
 8006f56:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	621a      	str	r2, [r3, #32]
}
 8006f60:	bf00      	nop
 8006f62:	371c      	adds	r7, #28
 8006f64:	46bd      	mov	sp, r7
 8006f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6a:	4770      	bx	lr

08006f6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f6c:	b480      	push	{r7}
 8006f6e:	b085      	sub	sp, #20
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d101      	bne.n	8006f84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f80:	2302      	movs	r3, #2
 8006f82:	e05a      	b.n	800703a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006faa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a21      	ldr	r2, [pc, #132]	; (8007048 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d022      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd0:	d01d      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1d      	ldr	r2, [pc, #116]	; (800704c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d018      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1b      	ldr	r2, [pc, #108]	; (8007050 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d013      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1a      	ldr	r2, [pc, #104]	; (8007054 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d00e      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a18      	ldr	r2, [pc, #96]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d009      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a17      	ldr	r2, [pc, #92]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d004      	beq.n	800700e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a15      	ldr	r2, [pc, #84]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d10c      	bne.n	8007028 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007014:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	4313      	orrs	r3, r2
 800701e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40010000 	.word	0x40010000
 800704c:	40000400 	.word	0x40000400
 8007050:	40000800 	.word	0x40000800
 8007054:	40000c00 	.word	0x40000c00
 8007058:	40010400 	.word	0x40010400
 800705c:	40014000 	.word	0x40014000
 8007060:	40001800 	.word	0x40001800

08007064 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
 800706c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800706e:	2300      	movs	r3, #0
 8007070:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007078:	2b01      	cmp	r3, #1
 800707a:	d101      	bne.n	8007080 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800707c:	2302      	movs	r3, #2
 800707e:	e03d      	b.n	80070fc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	4313      	orrs	r3, r2
 8007094:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	695b      	ldr	r3, [r3, #20]
 80070d8:	4313      	orrs	r3, r2
 80070da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	4313      	orrs	r3, r2
 80070e8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	3714      	adds	r7, #20
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b082      	sub	sp, #8
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d101      	bne.n	800711a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e03f      	b.n	800719a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7fb f8da 	bl	80022e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2224      	movs	r2, #36	; 0x24
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68da      	ldr	r2, [r3, #12]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800714a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 ffcd 	bl	80080ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	695a      	ldr	r2, [r3, #20]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68da      	ldr	r2, [r3, #12]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2200      	movs	r2, #0
 8007186:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2220      	movs	r2, #32
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3708      	adds	r7, #8
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b08c      	sub	sp, #48	; 0x30
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	4613      	mov	r3, r2
 80071b0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b20      	cmp	r3, #32
 80071bc:	d165      	bne.n	800728a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d002      	beq.n	80071ca <HAL_UART_Transmit_DMA+0x26>
 80071c4:	88fb      	ldrh	r3, [r7, #6]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e05e      	b.n	800728c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d4:	2b01      	cmp	r3, #1
 80071d6:	d101      	bne.n	80071dc <HAL_UART_Transmit_DMA+0x38>
 80071d8:	2302      	movs	r3, #2
 80071da:	e057      	b.n	800728c <HAL_UART_Transmit_DMA+0xe8>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2201      	movs	r2, #1
 80071e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80071e4:	68ba      	ldr	r2, [r7, #8]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	88fa      	ldrh	r2, [r7, #6]
 80071ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	88fa      	ldrh	r2, [r7, #6]
 80071f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2221      	movs	r2, #33	; 0x21
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007208:	4a22      	ldr	r2, [pc, #136]	; (8007294 <HAL_UART_Transmit_DMA+0xf0>)
 800720a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007210:	4a21      	ldr	r2, [pc, #132]	; (8007298 <HAL_UART_Transmit_DMA+0xf4>)
 8007212:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007218:	4a20      	ldr	r2, [pc, #128]	; (800729c <HAL_UART_Transmit_DMA+0xf8>)
 800721a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007220:	2200      	movs	r2, #0
 8007222:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007224:	f107 0308 	add.w	r3, r7, #8
 8007228:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800722e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007230:	6819      	ldr	r1, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3304      	adds	r3, #4
 8007238:	461a      	mov	r2, r3
 800723a:	88fb      	ldrh	r3, [r7, #6]
 800723c:	f7fb fdb6 	bl	8002dac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007248:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3314      	adds	r3, #20
 8007258:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800725a:	69bb      	ldr	r3, [r7, #24]
 800725c:	e853 3f00 	ldrex	r3, [r3]
 8007260:	617b      	str	r3, [r7, #20]
   return(result);
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007268:	62bb      	str	r3, [r7, #40]	; 0x28
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3314      	adds	r3, #20
 8007270:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007272:	627a      	str	r2, [r7, #36]	; 0x24
 8007274:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007276:	6a39      	ldr	r1, [r7, #32]
 8007278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800727a:	e841 2300 	strex	r3, r2, [r1]
 800727e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1e5      	bne.n	8007252 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8007286:	2300      	movs	r3, #0
 8007288:	e000      	b.n	800728c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800728a:	2302      	movs	r3, #2
  }
}
 800728c:	4618      	mov	r0, r3
 800728e:	3730      	adds	r7, #48	; 0x30
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	08007985 	.word	0x08007985
 8007298:	08007a1f 	.word	0x08007a1f
 800729c:	08007b97 	.word	0x08007b97

080072a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	60f8      	str	r0, [r7, #12]
 80072a8:	60b9      	str	r1, [r7, #8]
 80072aa:	4613      	mov	r3, r2
 80072ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b20      	cmp	r3, #32
 80072b8:	d11d      	bne.n	80072f6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d002      	beq.n	80072c6 <HAL_UART_Receive_DMA+0x26>
 80072c0:	88fb      	ldrh	r3, [r7, #6]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e016      	b.n	80072f8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d101      	bne.n	80072d8 <HAL_UART_Receive_DMA+0x38>
 80072d4:	2302      	movs	r3, #2
 80072d6:	e00f      	b.n	80072f8 <HAL_UART_Receive_DMA+0x58>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80072e6:	88fb      	ldrh	r3, [r7, #6]
 80072e8:	461a      	mov	r2, r3
 80072ea:	68b9      	ldr	r1, [r7, #8]
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 fc9d 	bl	8007c2c <UART_Start_Receive_DMA>
 80072f2:	4603      	mov	r3, r0
 80072f4:	e000      	b.n	80072f8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80072f6:	2302      	movs	r3, #2
  }
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3710      	adds	r7, #16
 80072fc:	46bd      	mov	sp, r7
 80072fe:	bd80      	pop	{r7, pc}

08007300 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b090      	sub	sp, #64	; 0x40
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007308:	2300      	movs	r3, #0
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007316:	2b80      	cmp	r3, #128	; 0x80
 8007318:	bf0c      	ite	eq
 800731a:	2301      	moveq	r3, #1
 800731c:	2300      	movne	r3, #0
 800731e:	b2db      	uxtb	r3, r3
 8007320:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007328:	b2db      	uxtb	r3, r3
 800732a:	2b21      	cmp	r3, #33	; 0x21
 800732c:	d128      	bne.n	8007380 <HAL_UART_DMAStop+0x80>
 800732e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007330:	2b00      	cmp	r3, #0
 8007332:	d025      	beq.n	8007380 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3314      	adds	r3, #20
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	e853 3f00 	ldrex	r3, [r3]
 8007342:	623b      	str	r3, [r7, #32]
   return(result);
 8007344:	6a3b      	ldr	r3, [r7, #32]
 8007346:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800734a:	63bb      	str	r3, [r7, #56]	; 0x38
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	3314      	adds	r3, #20
 8007352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007354:	633a      	str	r2, [r7, #48]	; 0x30
 8007356:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800735a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e5      	bne.n	8007334 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800736c:	2b00      	cmp	r3, #0
 800736e:	d004      	beq.n	800737a <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007374:	4618      	mov	r0, r3
 8007376:	f7fb fd71 	bl	8002e5c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f000 fcf4 	bl	8007d68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	695b      	ldr	r3, [r3, #20]
 8007386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738a:	2b40      	cmp	r3, #64	; 0x40
 800738c:	bf0c      	ite	eq
 800738e:	2301      	moveq	r3, #1
 8007390:	2300      	movne	r3, #0
 8007392:	b2db      	uxtb	r3, r3
 8007394:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b22      	cmp	r3, #34	; 0x22
 80073a0:	d128      	bne.n	80073f4 <HAL_UART_DMAStop+0xf4>
 80073a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d025      	beq.n	80073f4 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3314      	adds	r3, #20
 80073ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073be:	637b      	str	r3, [r7, #52]	; 0x34
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3314      	adds	r3, #20
 80073c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80073c8:	61fa      	str	r2, [r7, #28]
 80073ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	69b9      	ldr	r1, [r7, #24]
 80073ce:	69fa      	ldr	r2, [r7, #28]
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	617b      	str	r3, [r7, #20]
   return(result);
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e5      	bne.n	80073a8 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d004      	beq.n	80073ee <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e8:	4618      	mov	r0, r3
 80073ea:	f7fb fd37 	bl	8002e5c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 fce2 	bl	8007db8 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3740      	adds	r7, #64	; 0x40
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b0ba      	sub	sp, #232	; 0xe8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007426:	2300      	movs	r3, #0
 8007428:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800742c:	2300      	movs	r3, #0
 800742e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800743e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10f      	bne.n	8007466 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <HAL_UART_IRQHandler+0x66>
 8007452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fd89 	bl	8007f76 <UART_Receive_IT>
      return;
 8007464:	e256      	b.n	8007914 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 80de 	beq.w	800762c <HAL_UART_IRQHandler+0x22c>
 8007470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d106      	bne.n	800748a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800747c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007480:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80d1 	beq.w	800762c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800748a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00b      	beq.n	80074ae <HAL_UART_IRQHandler+0xae>
 8007496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800749a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a6:	f043 0201 	orr.w	r2, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00b      	beq.n	80074d2 <HAL_UART_IRQHandler+0xd2>
 80074ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	f043 0202 	orr.w	r2, r3, #2
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00b      	beq.n	80074f6 <HAL_UART_IRQHandler+0xf6>
 80074de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ee:	f043 0204 	orr.w	r2, r3, #4
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d011      	beq.n	8007526 <HAL_UART_IRQHandler+0x126>
 8007502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b00      	cmp	r3, #0
 800750c:	d105      	bne.n	800751a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800750e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800751e:	f043 0208 	orr.w	r2, r3, #8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 81ed 	beq.w	800790a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <HAL_UART_IRQHandler+0x14e>
 800753c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fd14 	bl	8007f76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007558:	2b40      	cmp	r3, #64	; 0x40
 800755a:	bf0c      	ite	eq
 800755c:	2301      	moveq	r3, #1
 800755e:	2300      	movne	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d103      	bne.n	800757a <HAL_UART_IRQHandler+0x17a>
 8007572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d04f      	beq.n	800761a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fc1c 	bl	8007db8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758a:	2b40      	cmp	r3, #64	; 0x40
 800758c:	d141      	bne.n	8007612 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3314      	adds	r3, #20
 8007594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3314      	adds	r3, #20
 80075b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1d9      	bne.n	800758e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d013      	beq.n	800760a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e6:	4a7d      	ldr	r2, [pc, #500]	; (80077dc <HAL_UART_IRQHandler+0x3dc>)
 80075e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fb fca4 	bl	8002f3c <HAL_DMA_Abort_IT>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d016      	beq.n	8007628 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007608:	e00e      	b.n	8007628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f9a4 	bl	8007958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007610:	e00a      	b.n	8007628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f9a0 	bl	8007958 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007618:	e006      	b.n	8007628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f99c 	bl	8007958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007626:	e170      	b.n	800790a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007628:	bf00      	nop
    return;
 800762a:	e16e      	b.n	800790a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007630:	2b01      	cmp	r3, #1
 8007632:	f040 814a 	bne.w	80078ca <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800763a:	f003 0310 	and.w	r3, r3, #16
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8143 	beq.w	80078ca <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007648:	f003 0310 	and.w	r3, r3, #16
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 813c 	beq.w	80078ca <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007652:	2300      	movs	r3, #0
 8007654:	60bb      	str	r3, [r7, #8]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60bb      	str	r3, [r7, #8]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	60bb      	str	r3, [r7, #8]
 8007666:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007672:	2b40      	cmp	r3, #64	; 0x40
 8007674:	f040 80b4 	bne.w	80077e0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007684:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8140 	beq.w	800790e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007696:	429a      	cmp	r2, r3
 8007698:	f080 8139 	bcs.w	800790e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076a2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ae:	f000 8088 	beq.w	80077c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	330c      	adds	r3, #12
 80076b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80076de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80076e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1d9      	bne.n	80076b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3314      	adds	r3, #20
 8007704:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800770e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007710:	f023 0301 	bic.w	r3, r3, #1
 8007714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3314      	adds	r3, #20
 800771e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007722:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007726:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800772a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e1      	bne.n	80076fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3314      	adds	r3, #20
 8007740:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800774a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800774c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3314      	adds	r3, #20
 800775a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800775e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007760:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007764:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800776c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e3      	bne.n	800773a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007790:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007792:	f023 0310 	bic.w	r3, r3, #16
 8007796:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	330c      	adds	r3, #12
 80077a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80077a4:	65ba      	str	r2, [r7, #88]	; 0x58
 80077a6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e3      	bne.n	8007780 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fb fb4d 	bl	8002e5c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	1ad3      	subs	r3, r2, r3
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f8ca 	bl	800796c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80077d8:	e099      	b.n	800790e <HAL_UART_IRQHandler+0x50e>
 80077da:	bf00      	nop
 80077dc:	08007e7f 	.word	0x08007e7f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	1ad3      	subs	r3, r2, r3
 80077ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	f000 808b 	beq.w	8007912 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80077fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8086 	beq.w	8007912 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	330c      	adds	r3, #12
 800780c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800781c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	330c      	adds	r3, #12
 8007826:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800782a:	647a      	str	r2, [r7, #68]	; 0x44
 800782c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e3      	bne.n	8007806 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3314      	adds	r3, #20
 8007844:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	623b      	str	r3, [r7, #32]
   return(result);
 800784e:	6a3b      	ldr	r3, [r7, #32]
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3314      	adds	r3, #20
 800785e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007862:	633a      	str	r2, [r7, #48]	; 0x30
 8007864:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e3      	bne.n	800783e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2220      	movs	r2, #32
 800787a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	330c      	adds	r3, #12
 800788a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	60fb      	str	r3, [r7, #12]
   return(result);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f023 0310 	bic.w	r3, r3, #16
 800789a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	330c      	adds	r3, #12
 80078a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80078a8:	61fa      	str	r2, [r7, #28]
 80078aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	69b9      	ldr	r1, [r7, #24]
 80078ae:	69fa      	ldr	r2, [r7, #28]
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	617b      	str	r3, [r7, #20]
   return(result);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e3      	bne.n	8007884 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f852 	bl	800796c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80078c8:	e023      	b.n	8007912 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80078ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d009      	beq.n	80078ea <HAL_UART_IRQHandler+0x4ea>
 80078d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fadf 	bl	8007ea6 <UART_Transmit_IT>
    return;
 80078e8:	e014      	b.n	8007914 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80078ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00e      	beq.n	8007914 <HAL_UART_IRQHandler+0x514>
 80078f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d008      	beq.n	8007914 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fb1f 	bl	8007f46 <UART_EndTransmit_IT>
    return;
 8007908:	e004      	b.n	8007914 <HAL_UART_IRQHandler+0x514>
    return;
 800790a:	bf00      	nop
 800790c:	e002      	b.n	8007914 <HAL_UART_IRQHandler+0x514>
      return;
 800790e:	bf00      	nop
 8007910:	e000      	b.n	8007914 <HAL_UART_IRQHandler+0x514>
      return;
 8007912:	bf00      	nop
  }
}
 8007914:	37e8      	adds	r7, #232	; 0xe8
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop

0800791c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	460b      	mov	r3, r1
 8007976:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b090      	sub	sp, #64	; 0x40
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007990:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799c:	2b00      	cmp	r3, #0
 800799e:	d137      	bne.n	8007a10 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80079a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a2:	2200      	movs	r2, #0
 80079a4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80079a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3314      	adds	r3, #20
 80079ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b0:	e853 3f00 	ldrex	r3, [r3]
 80079b4:	623b      	str	r3, [r7, #32]
   return(result);
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80079be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	3314      	adds	r3, #20
 80079c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80079c6:	633a      	str	r2, [r7, #48]	; 0x30
 80079c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80079cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079ce:	e841 2300 	strex	r3, r2, [r1]
 80079d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80079d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1e5      	bne.n	80079a6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	330c      	adds	r3, #12
 80079e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	e853 3f00 	ldrex	r3, [r3]
 80079e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80079f0:	637b      	str	r3, [r7, #52]	; 0x34
 80079f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	330c      	adds	r3, #12
 80079f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079fa:	61fa      	str	r2, [r7, #28]
 80079fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	69b9      	ldr	r1, [r7, #24]
 8007a00:	69fa      	ldr	r2, [r7, #28]
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	617b      	str	r3, [r7, #20]
   return(result);
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e5      	bne.n	80079da <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007a0e:	e002      	b.n	8007a16 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007a10:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007a12:	f7fa fe13 	bl	800263c <HAL_UART_TxCpltCallback>
}
 8007a16:	bf00      	nop
 8007a18:	3740      	adds	r7, #64	; 0x40
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b084      	sub	sp, #16
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f7ff ff75 	bl	800791c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	b09c      	sub	sp, #112	; 0x70
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a46:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d172      	bne.n	8007b3c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007a56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a58:	2200      	movs	r2, #0
 8007a5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	330c      	adds	r3, #12
 8007a62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a72:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	330c      	adds	r3, #12
 8007a7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a7c:	65ba      	str	r2, [r7, #88]	; 0x58
 8007a7e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e5      	bne.n	8007a5c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	3314      	adds	r3, #20
 8007a96:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a9a:	e853 3f00 	ldrex	r3, [r3]
 8007a9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aa2:	f023 0301 	bic.w	r3, r3, #1
 8007aa6:	667b      	str	r3, [r7, #100]	; 0x64
 8007aa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3314      	adds	r3, #20
 8007aae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007ab0:	647a      	str	r2, [r7, #68]	; 0x44
 8007ab2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ab8:	e841 2300 	strex	r3, r2, [r1]
 8007abc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d1e5      	bne.n	8007a90 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ac4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3314      	adds	r3, #20
 8007aca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ace:	e853 3f00 	ldrex	r3, [r3]
 8007ad2:	623b      	str	r3, [r7, #32]
   return(result);
 8007ad4:	6a3b      	ldr	r3, [r7, #32]
 8007ad6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ada:	663b      	str	r3, [r7, #96]	; 0x60
 8007adc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	3314      	adds	r3, #20
 8007ae2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007ae4:	633a      	str	r2, [r7, #48]	; 0x30
 8007ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aec:	e841 2300 	strex	r3, r2, [r1]
 8007af0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d1e5      	bne.n	8007ac4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007af8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007afa:	2220      	movs	r2, #32
 8007afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d119      	bne.n	8007b3c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	330c      	adds	r3, #12
 8007b0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b10:	693b      	ldr	r3, [r7, #16]
 8007b12:	e853 3f00 	ldrex	r3, [r3]
 8007b16:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f023 0310 	bic.w	r3, r3, #16
 8007b1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	330c      	adds	r3, #12
 8007b26:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b28:	61fa      	str	r2, [r7, #28]
 8007b2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2c:	69b9      	ldr	r1, [r7, #24]
 8007b2e:	69fa      	ldr	r2, [r7, #28]
 8007b30:	e841 2300 	strex	r3, r2, [r1]
 8007b34:	617b      	str	r3, [r7, #20]
   return(result);
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e5      	bne.n	8007b08 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d106      	bne.n	8007b52 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b48:	4619      	mov	r1, r3
 8007b4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b4c:	f7ff ff0e 	bl	800796c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b50:	e002      	b.n	8007b58 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8007b52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8007b54:	f7ff feec 	bl	8007930 <HAL_UART_RxCpltCallback>
}
 8007b58:	bf00      	nop
 8007b5a:	3770      	adds	r7, #112	; 0x70
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6c:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d108      	bne.n	8007b88 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007b7a:	085b      	lsrs	r3, r3, #1
 8007b7c:	b29b      	uxth	r3, r3
 8007b7e:	4619      	mov	r1, r3
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7ff fef3 	bl	800796c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b86:	e002      	b.n	8007b8e <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007b88:	68f8      	ldr	r0, [r7, #12]
 8007b8a:	f7ff fedb 	bl	8007944 <HAL_UART_RxHalfCpltCallback>
}
 8007b8e:	bf00      	nop
 8007b90:	3710      	adds	r7, #16
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bd80      	pop	{r7, pc}

08007b96 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b96:	b580      	push	{r7, lr}
 8007b98:	b084      	sub	sp, #16
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb2:	2b80      	cmp	r3, #128	; 0x80
 8007bb4:	bf0c      	ite	eq
 8007bb6:	2301      	moveq	r3, #1
 8007bb8:	2300      	movne	r3, #0
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	2b21      	cmp	r3, #33	; 0x21
 8007bc8:	d108      	bne.n	8007bdc <UART_DMAError+0x46>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d005      	beq.n	8007bdc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007bd6:	68b8      	ldr	r0, [r7, #8]
 8007bd8:	f000 f8c6 	bl	8007d68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be6:	2b40      	cmp	r3, #64	; 0x40
 8007be8:	bf0c      	ite	eq
 8007bea:	2301      	moveq	r3, #1
 8007bec:	2300      	movne	r3, #0
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b22      	cmp	r3, #34	; 0x22
 8007bfc:	d108      	bne.n	8007c10 <UART_DMAError+0x7a>
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2200      	movs	r2, #0
 8007c08:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007c0a:	68b8      	ldr	r0, [r7, #8]
 8007c0c:	f000 f8d4 	bl	8007db8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c14:	f043 0210 	orr.w	r2, r3, #16
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c1c:	68b8      	ldr	r0, [r7, #8]
 8007c1e:	f7ff fe9b 	bl	8007958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c22:	bf00      	nop
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
	...

08007c2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b098      	sub	sp, #96	; 0x60
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	60f8      	str	r0, [r7, #12]
 8007c34:	60b9      	str	r1, [r7, #8]
 8007c36:	4613      	mov	r3, r2
 8007c38:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	88fa      	ldrh	r2, [r7, #6]
 8007c44:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2222      	movs	r2, #34	; 0x22
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c58:	4a40      	ldr	r2, [pc, #256]	; (8007d5c <UART_Start_Receive_DMA+0x130>)
 8007c5a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c60:	4a3f      	ldr	r2, [pc, #252]	; (8007d60 <UART_Start_Receive_DMA+0x134>)
 8007c62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c68:	4a3e      	ldr	r2, [pc, #248]	; (8007d64 <UART_Start_Receive_DMA+0x138>)
 8007c6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c70:	2200      	movs	r2, #0
 8007c72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007c74:	f107 0308 	add.w	r3, r7, #8
 8007c78:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3304      	adds	r3, #4
 8007c84:	4619      	mov	r1, r3
 8007c86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	88fb      	ldrh	r3, [r7, #6]
 8007c8c:	f7fb f88e 	bl	8002dac <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007c90:	2300      	movs	r3, #0
 8007c92:	613b      	str	r3, [r7, #16]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	613b      	str	r3, [r7, #16]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	613b      	str	r3, [r7, #16]
 8007ca4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d019      	beq.n	8007cea <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	330c      	adds	r3, #12
 8007cbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cc0:	e853 3f00 	ldrex	r3, [r3]
 8007cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ccc:	65bb      	str	r3, [r7, #88]	; 0x58
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	330c      	adds	r3, #12
 8007cd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007cd6:	64fa      	str	r2, [r7, #76]	; 0x4c
 8007cd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cda:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007cdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007cde:	e841 2300 	strex	r3, r2, [r1]
 8007ce2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1e5      	bne.n	8007cb6 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	3314      	adds	r3, #20
 8007cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf4:	e853 3f00 	ldrex	r3, [r3]
 8007cf8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfc:	f043 0301 	orr.w	r3, r3, #1
 8007d00:	657b      	str	r3, [r7, #84]	; 0x54
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3314      	adds	r3, #20
 8007d08:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d0a:	63ba      	str	r2, [r7, #56]	; 0x38
 8007d0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e5      	bne.n	8007cea <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3314      	adds	r3, #20
 8007d24:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d34:	653b      	str	r3, [r7, #80]	; 0x50
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3314      	adds	r3, #20
 8007d3c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007d3e:	627a      	str	r2, [r7, #36]	; 0x24
 8007d40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d42:	6a39      	ldr	r1, [r7, #32]
 8007d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d46:	e841 2300 	strex	r3, r2, [r1]
 8007d4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1e5      	bne.n	8007d1e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	3760      	adds	r7, #96	; 0x60
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	08007a3b 	.word	0x08007a3b
 8007d60:	08007b61 	.word	0x08007b61
 8007d64:	08007b97 	.word	0x08007b97

08007d68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b089      	sub	sp, #36	; 0x24
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	330c      	adds	r3, #12
 8007d76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d86:	61fb      	str	r3, [r7, #28]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	330c      	adds	r3, #12
 8007d8e:	69fa      	ldr	r2, [r7, #28]
 8007d90:	61ba      	str	r2, [r7, #24]
 8007d92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6979      	ldr	r1, [r7, #20]
 8007d96:	69ba      	ldr	r2, [r7, #24]
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	613b      	str	r3, [r7, #16]
   return(result);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e5      	bne.n	8007d70 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2220      	movs	r2, #32
 8007da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007dac:	bf00      	nop
 8007dae:	3724      	adds	r7, #36	; 0x24
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b095      	sub	sp, #84	; 0x54
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	330c      	adds	r3, #12
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dca:	e853 3f00 	ldrex	r3, [r3]
 8007dce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	330c      	adds	r3, #12
 8007dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007de0:	643a      	str	r2, [r7, #64]	; 0x40
 8007de2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007de6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007de8:	e841 2300 	strex	r3, r2, [r1]
 8007dec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1e5      	bne.n	8007dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	3314      	adds	r3, #20
 8007dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	e853 3f00 	ldrex	r3, [r3]
 8007e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	f023 0301 	bic.w	r3, r3, #1
 8007e0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	3314      	adds	r3, #20
 8007e12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007e14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e1c:	e841 2300 	strex	r3, r2, [r1]
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d1e5      	bne.n	8007df4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d119      	bne.n	8007e64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	330c      	adds	r3, #12
 8007e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	e853 3f00 	ldrex	r3, [r3]
 8007e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	f023 0310 	bic.w	r3, r3, #16
 8007e46:	647b      	str	r3, [r7, #68]	; 0x44
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	330c      	adds	r3, #12
 8007e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e50:	61ba      	str	r2, [r7, #24]
 8007e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e54:	6979      	ldr	r1, [r7, #20]
 8007e56:	69ba      	ldr	r2, [r7, #24]
 8007e58:	e841 2300 	strex	r3, r2, [r1]
 8007e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e5      	bne.n	8007e30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2220      	movs	r2, #32
 8007e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007e72:	bf00      	nop
 8007e74:	3754      	adds	r7, #84	; 0x54
 8007e76:	46bd      	mov	sp, r7
 8007e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7c:	4770      	bx	lr

08007e7e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2200      	movs	r2, #0
 8007e96:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff fd5d 	bl	8007958 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eb4:	b2db      	uxtb	r3, r3
 8007eb6:	2b21      	cmp	r3, #33	; 0x21
 8007eb8:	d13e      	bne.n	8007f38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ec2:	d114      	bne.n	8007eee <UART_Transmit_IT+0x48>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	691b      	ldr	r3, [r3, #16]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d110      	bne.n	8007eee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	881b      	ldrh	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ee0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	1c9a      	adds	r2, r3, #2
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	621a      	str	r2, [r3, #32]
 8007eec:	e008      	b.n	8007f00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6a1b      	ldr	r3, [r3, #32]
 8007ef2:	1c59      	adds	r1, r3, #1
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	6211      	str	r1, [r2, #32]
 8007ef8:	781a      	ldrb	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10f      	bne.n	8007f34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68da      	ldr	r2, [r3, #12]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	68da      	ldr	r2, [r3, #12]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	e000      	b.n	8007f3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f38:	2302      	movs	r3, #2
  }
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b082      	sub	sp, #8
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2220      	movs	r2, #32
 8007f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7fa fb68 	bl	800263c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b08c      	sub	sp, #48	; 0x30
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	2b22      	cmp	r3, #34	; 0x22
 8007f88:	f040 80ab 	bne.w	80080e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f94:	d117      	bne.n	8007fc6 <UART_Receive_IT+0x50>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	691b      	ldr	r3, [r3, #16]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d113      	bne.n	8007fc6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	1c9a      	adds	r2, r3, #2
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	629a      	str	r2, [r3, #40]	; 0x28
 8007fc4:	e026      	b.n	8008014 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fd8:	d007      	beq.n	8007fea <UART_Receive_IT+0x74>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <UART_Receive_IT+0x82>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d106      	bne.n	8007ff8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	b2da      	uxtb	r2, r3
 8007ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff4:	701a      	strb	r2, [r3, #0]
 8007ff6:	e008      	b.n	800800a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008004:	b2da      	uxtb	r2, r3
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800800e:	1c5a      	adds	r2, r3, #1
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008018:	b29b      	uxth	r3, r3
 800801a:	3b01      	subs	r3, #1
 800801c:	b29b      	uxth	r3, r3
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	4619      	mov	r1, r3
 8008022:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008024:	2b00      	cmp	r3, #0
 8008026:	d15a      	bne.n	80080de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	68da      	ldr	r2, [r3, #12]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f022 0220 	bic.w	r2, r2, #32
 8008036:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68da      	ldr	r2, [r3, #12]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008046:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	695a      	ldr	r2, [r3, #20]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f022 0201 	bic.w	r2, r2, #1
 8008056:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2220      	movs	r2, #32
 800805c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008064:	2b01      	cmp	r3, #1
 8008066:	d135      	bne.n	80080d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	330c      	adds	r3, #12
 8008074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	e853 3f00 	ldrex	r3, [r3]
 800807c:	613b      	str	r3, [r7, #16]
   return(result);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f023 0310 	bic.w	r3, r3, #16
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	330c      	adds	r3, #12
 800808c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800808e:	623a      	str	r2, [r7, #32]
 8008090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	69f9      	ldr	r1, [r7, #28]
 8008094:	6a3a      	ldr	r2, [r7, #32]
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	61bb      	str	r3, [r7, #24]
   return(result);
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e5      	bne.n	800806e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0310 	and.w	r3, r3, #16
 80080ac:	2b10      	cmp	r3, #16
 80080ae:	d10a      	bne.n	80080c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff fc4d 	bl	800796c <HAL_UARTEx_RxEventCallback>
 80080d2:	e002      	b.n	80080da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7ff fc2b 	bl	8007930 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	e002      	b.n	80080e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e000      	b.n	80080e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80080e2:	2302      	movs	r3, #2
  }
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3730      	adds	r7, #48	; 0x30
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080f0:	b0c0      	sub	sp, #256	; 0x100
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008108:	68d9      	ldr	r1, [r3, #12]
 800810a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	ea40 0301 	orr.w	r3, r0, r1
 8008114:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	431a      	orrs	r2, r3
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	431a      	orrs	r2, r3
 800812c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008144:	f021 010c 	bic.w	r1, r1, #12
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008152:	430b      	orrs	r3, r1
 8008154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008166:	6999      	ldr	r1, [r3, #24]
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	ea40 0301 	orr.w	r3, r0, r1
 8008172:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	4b8f      	ldr	r3, [pc, #572]	; (80083b8 <UART_SetConfig+0x2cc>)
 800817c:	429a      	cmp	r2, r3
 800817e:	d005      	beq.n	800818c <UART_SetConfig+0xa0>
 8008180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b8d      	ldr	r3, [pc, #564]	; (80083bc <UART_SetConfig+0x2d0>)
 8008188:	429a      	cmp	r2, r3
 800818a:	d104      	bne.n	8008196 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800818c:	f7fd fd8e 	bl	8005cac <HAL_RCC_GetPCLK2Freq>
 8008190:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008194:	e003      	b.n	800819e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008196:	f7fd fd75 	bl	8005c84 <HAL_RCC_GetPCLK1Freq>
 800819a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800819e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a8:	f040 810c 	bne.w	80083c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80081b6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80081ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80081be:	4622      	mov	r2, r4
 80081c0:	462b      	mov	r3, r5
 80081c2:	1891      	adds	r1, r2, r2
 80081c4:	65b9      	str	r1, [r7, #88]	; 0x58
 80081c6:	415b      	adcs	r3, r3
 80081c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80081ce:	4621      	mov	r1, r4
 80081d0:	eb12 0801 	adds.w	r8, r2, r1
 80081d4:	4629      	mov	r1, r5
 80081d6:	eb43 0901 	adc.w	r9, r3, r1
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081ee:	4690      	mov	r8, r2
 80081f0:	4699      	mov	r9, r3
 80081f2:	4623      	mov	r3, r4
 80081f4:	eb18 0303 	adds.w	r3, r8, r3
 80081f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80081fc:	462b      	mov	r3, r5
 80081fe:	eb49 0303 	adc.w	r3, r9, r3
 8008202:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008212:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008216:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800821a:	460b      	mov	r3, r1
 800821c:	18db      	adds	r3, r3, r3
 800821e:	653b      	str	r3, [r7, #80]	; 0x50
 8008220:	4613      	mov	r3, r2
 8008222:	eb42 0303 	adc.w	r3, r2, r3
 8008226:	657b      	str	r3, [r7, #84]	; 0x54
 8008228:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800822c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008230:	f7f8 f81e 	bl	8000270 <__aeabi_uldivmod>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4b61      	ldr	r3, [pc, #388]	; (80083c0 <UART_SetConfig+0x2d4>)
 800823a:	fba3 2302 	umull	r2, r3, r3, r2
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	011c      	lsls	r4, r3, #4
 8008242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008246:	2200      	movs	r2, #0
 8008248:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800824c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008250:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008254:	4642      	mov	r2, r8
 8008256:	464b      	mov	r3, r9
 8008258:	1891      	adds	r1, r2, r2
 800825a:	64b9      	str	r1, [r7, #72]	; 0x48
 800825c:	415b      	adcs	r3, r3
 800825e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008260:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008264:	4641      	mov	r1, r8
 8008266:	eb12 0a01 	adds.w	sl, r2, r1
 800826a:	4649      	mov	r1, r9
 800826c:	eb43 0b01 	adc.w	fp, r3, r1
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	f04f 0300 	mov.w	r3, #0
 8008278:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800827c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008284:	4692      	mov	sl, r2
 8008286:	469b      	mov	fp, r3
 8008288:	4643      	mov	r3, r8
 800828a:	eb1a 0303 	adds.w	r3, sl, r3
 800828e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008292:	464b      	mov	r3, r9
 8008294:	eb4b 0303 	adc.w	r3, fp, r3
 8008298:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800829c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082a8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80082ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80082b0:	460b      	mov	r3, r1
 80082b2:	18db      	adds	r3, r3, r3
 80082b4:	643b      	str	r3, [r7, #64]	; 0x40
 80082b6:	4613      	mov	r3, r2
 80082b8:	eb42 0303 	adc.w	r3, r2, r3
 80082bc:	647b      	str	r3, [r7, #68]	; 0x44
 80082be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80082c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80082c6:	f7f7 ffd3 	bl	8000270 <__aeabi_uldivmod>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4611      	mov	r1, r2
 80082d0:	4b3b      	ldr	r3, [pc, #236]	; (80083c0 <UART_SetConfig+0x2d4>)
 80082d2:	fba3 2301 	umull	r2, r3, r3, r1
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	2264      	movs	r2, #100	; 0x64
 80082da:	fb02 f303 	mul.w	r3, r2, r3
 80082de:	1acb      	subs	r3, r1, r3
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80082e6:	4b36      	ldr	r3, [pc, #216]	; (80083c0 <UART_SetConfig+0x2d4>)
 80082e8:	fba3 2302 	umull	r2, r3, r3, r2
 80082ec:	095b      	lsrs	r3, r3, #5
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80082f4:	441c      	add	r4, r3
 80082f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082fa:	2200      	movs	r2, #0
 80082fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008300:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008304:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008308:	4642      	mov	r2, r8
 800830a:	464b      	mov	r3, r9
 800830c:	1891      	adds	r1, r2, r2
 800830e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008310:	415b      	adcs	r3, r3
 8008312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008318:	4641      	mov	r1, r8
 800831a:	1851      	adds	r1, r2, r1
 800831c:	6339      	str	r1, [r7, #48]	; 0x30
 800831e:	4649      	mov	r1, r9
 8008320:	414b      	adcs	r3, r1
 8008322:	637b      	str	r3, [r7, #52]	; 0x34
 8008324:	f04f 0200 	mov.w	r2, #0
 8008328:	f04f 0300 	mov.w	r3, #0
 800832c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008330:	4659      	mov	r1, fp
 8008332:	00cb      	lsls	r3, r1, #3
 8008334:	4651      	mov	r1, sl
 8008336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800833a:	4651      	mov	r1, sl
 800833c:	00ca      	lsls	r2, r1, #3
 800833e:	4610      	mov	r0, r2
 8008340:	4619      	mov	r1, r3
 8008342:	4603      	mov	r3, r0
 8008344:	4642      	mov	r2, r8
 8008346:	189b      	adds	r3, r3, r2
 8008348:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800834c:	464b      	mov	r3, r9
 800834e:	460a      	mov	r2, r1
 8008350:	eb42 0303 	adc.w	r3, r2, r3
 8008354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008364:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008368:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800836c:	460b      	mov	r3, r1
 800836e:	18db      	adds	r3, r3, r3
 8008370:	62bb      	str	r3, [r7, #40]	; 0x28
 8008372:	4613      	mov	r3, r2
 8008374:	eb42 0303 	adc.w	r3, r2, r3
 8008378:	62fb      	str	r3, [r7, #44]	; 0x2c
 800837a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800837e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008382:	f7f7 ff75 	bl	8000270 <__aeabi_uldivmod>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4b0d      	ldr	r3, [pc, #52]	; (80083c0 <UART_SetConfig+0x2d4>)
 800838c:	fba3 1302 	umull	r1, r3, r3, r2
 8008390:	095b      	lsrs	r3, r3, #5
 8008392:	2164      	movs	r1, #100	; 0x64
 8008394:	fb01 f303 	mul.w	r3, r1, r3
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	3332      	adds	r3, #50	; 0x32
 800839e:	4a08      	ldr	r2, [pc, #32]	; (80083c0 <UART_SetConfig+0x2d4>)
 80083a0:	fba2 2303 	umull	r2, r3, r2, r3
 80083a4:	095b      	lsrs	r3, r3, #5
 80083a6:	f003 0207 	and.w	r2, r3, #7
 80083aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4422      	add	r2, r4
 80083b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083b4:	e105      	b.n	80085c2 <UART_SetConfig+0x4d6>
 80083b6:	bf00      	nop
 80083b8:	40011000 	.word	0x40011000
 80083bc:	40011400 	.word	0x40011400
 80083c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80083c8:	2200      	movs	r2, #0
 80083ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083ce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80083d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80083d6:	4642      	mov	r2, r8
 80083d8:	464b      	mov	r3, r9
 80083da:	1891      	adds	r1, r2, r2
 80083dc:	6239      	str	r1, [r7, #32]
 80083de:	415b      	adcs	r3, r3
 80083e0:	627b      	str	r3, [r7, #36]	; 0x24
 80083e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083e6:	4641      	mov	r1, r8
 80083e8:	1854      	adds	r4, r2, r1
 80083ea:	4649      	mov	r1, r9
 80083ec:	eb43 0501 	adc.w	r5, r3, r1
 80083f0:	f04f 0200 	mov.w	r2, #0
 80083f4:	f04f 0300 	mov.w	r3, #0
 80083f8:	00eb      	lsls	r3, r5, #3
 80083fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083fe:	00e2      	lsls	r2, r4, #3
 8008400:	4614      	mov	r4, r2
 8008402:	461d      	mov	r5, r3
 8008404:	4643      	mov	r3, r8
 8008406:	18e3      	adds	r3, r4, r3
 8008408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800840c:	464b      	mov	r3, r9
 800840e:	eb45 0303 	adc.w	r3, r5, r3
 8008412:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008422:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008426:	f04f 0200 	mov.w	r2, #0
 800842a:	f04f 0300 	mov.w	r3, #0
 800842e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008432:	4629      	mov	r1, r5
 8008434:	008b      	lsls	r3, r1, #2
 8008436:	4621      	mov	r1, r4
 8008438:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800843c:	4621      	mov	r1, r4
 800843e:	008a      	lsls	r2, r1, #2
 8008440:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008444:	f7f7 ff14 	bl	8000270 <__aeabi_uldivmod>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	4b60      	ldr	r3, [pc, #384]	; (80085d0 <UART_SetConfig+0x4e4>)
 800844e:	fba3 2302 	umull	r2, r3, r3, r2
 8008452:	095b      	lsrs	r3, r3, #5
 8008454:	011c      	lsls	r4, r3, #4
 8008456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800845a:	2200      	movs	r2, #0
 800845c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008460:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008464:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008468:	4642      	mov	r2, r8
 800846a:	464b      	mov	r3, r9
 800846c:	1891      	adds	r1, r2, r2
 800846e:	61b9      	str	r1, [r7, #24]
 8008470:	415b      	adcs	r3, r3
 8008472:	61fb      	str	r3, [r7, #28]
 8008474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008478:	4641      	mov	r1, r8
 800847a:	1851      	adds	r1, r2, r1
 800847c:	6139      	str	r1, [r7, #16]
 800847e:	4649      	mov	r1, r9
 8008480:	414b      	adcs	r3, r1
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008490:	4659      	mov	r1, fp
 8008492:	00cb      	lsls	r3, r1, #3
 8008494:	4651      	mov	r1, sl
 8008496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800849a:	4651      	mov	r1, sl
 800849c:	00ca      	lsls	r2, r1, #3
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	4603      	mov	r3, r0
 80084a4:	4642      	mov	r2, r8
 80084a6:	189b      	adds	r3, r3, r2
 80084a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80084ac:	464b      	mov	r3, r9
 80084ae:	460a      	mov	r2, r1
 80084b0:	eb42 0303 	adc.w	r3, r2, r3
 80084b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80084b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80084c2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80084c4:	f04f 0200 	mov.w	r2, #0
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80084d0:	4649      	mov	r1, r9
 80084d2:	008b      	lsls	r3, r1, #2
 80084d4:	4641      	mov	r1, r8
 80084d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084da:	4641      	mov	r1, r8
 80084dc:	008a      	lsls	r2, r1, #2
 80084de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80084e2:	f7f7 fec5 	bl	8000270 <__aeabi_uldivmod>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4b39      	ldr	r3, [pc, #228]	; (80085d0 <UART_SetConfig+0x4e4>)
 80084ec:	fba3 1302 	umull	r1, r3, r3, r2
 80084f0:	095b      	lsrs	r3, r3, #5
 80084f2:	2164      	movs	r1, #100	; 0x64
 80084f4:	fb01 f303 	mul.w	r3, r1, r3
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	011b      	lsls	r3, r3, #4
 80084fc:	3332      	adds	r3, #50	; 0x32
 80084fe:	4a34      	ldr	r2, [pc, #208]	; (80085d0 <UART_SetConfig+0x4e4>)
 8008500:	fba2 2303 	umull	r2, r3, r2, r3
 8008504:	095b      	lsrs	r3, r3, #5
 8008506:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800850a:	441c      	add	r4, r3
 800850c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008510:	2200      	movs	r2, #0
 8008512:	673b      	str	r3, [r7, #112]	; 0x70
 8008514:	677a      	str	r2, [r7, #116]	; 0x74
 8008516:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800851a:	4642      	mov	r2, r8
 800851c:	464b      	mov	r3, r9
 800851e:	1891      	adds	r1, r2, r2
 8008520:	60b9      	str	r1, [r7, #8]
 8008522:	415b      	adcs	r3, r3
 8008524:	60fb      	str	r3, [r7, #12]
 8008526:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800852a:	4641      	mov	r1, r8
 800852c:	1851      	adds	r1, r2, r1
 800852e:	6039      	str	r1, [r7, #0]
 8008530:	4649      	mov	r1, r9
 8008532:	414b      	adcs	r3, r1
 8008534:	607b      	str	r3, [r7, #4]
 8008536:	f04f 0200 	mov.w	r2, #0
 800853a:	f04f 0300 	mov.w	r3, #0
 800853e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008542:	4659      	mov	r1, fp
 8008544:	00cb      	lsls	r3, r1, #3
 8008546:	4651      	mov	r1, sl
 8008548:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800854c:	4651      	mov	r1, sl
 800854e:	00ca      	lsls	r2, r1, #3
 8008550:	4610      	mov	r0, r2
 8008552:	4619      	mov	r1, r3
 8008554:	4603      	mov	r3, r0
 8008556:	4642      	mov	r2, r8
 8008558:	189b      	adds	r3, r3, r2
 800855a:	66bb      	str	r3, [r7, #104]	; 0x68
 800855c:	464b      	mov	r3, r9
 800855e:	460a      	mov	r2, r1
 8008560:	eb42 0303 	adc.w	r3, r2, r3
 8008564:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	663b      	str	r3, [r7, #96]	; 0x60
 8008570:	667a      	str	r2, [r7, #100]	; 0x64
 8008572:	f04f 0200 	mov.w	r2, #0
 8008576:	f04f 0300 	mov.w	r3, #0
 800857a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800857e:	4649      	mov	r1, r9
 8008580:	008b      	lsls	r3, r1, #2
 8008582:	4641      	mov	r1, r8
 8008584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008588:	4641      	mov	r1, r8
 800858a:	008a      	lsls	r2, r1, #2
 800858c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008590:	f7f7 fe6e 	bl	8000270 <__aeabi_uldivmod>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4b0d      	ldr	r3, [pc, #52]	; (80085d0 <UART_SetConfig+0x4e4>)
 800859a:	fba3 1302 	umull	r1, r3, r3, r2
 800859e:	095b      	lsrs	r3, r3, #5
 80085a0:	2164      	movs	r1, #100	; 0x64
 80085a2:	fb01 f303 	mul.w	r3, r1, r3
 80085a6:	1ad3      	subs	r3, r2, r3
 80085a8:	011b      	lsls	r3, r3, #4
 80085aa:	3332      	adds	r3, #50	; 0x32
 80085ac:	4a08      	ldr	r2, [pc, #32]	; (80085d0 <UART_SetConfig+0x4e4>)
 80085ae:	fba2 2303 	umull	r2, r3, r2, r3
 80085b2:	095b      	lsrs	r3, r3, #5
 80085b4:	f003 020f 	and.w	r2, r3, #15
 80085b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4422      	add	r2, r4
 80085c0:	609a      	str	r2, [r3, #8]
}
 80085c2:	bf00      	nop
 80085c4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80085c8:	46bd      	mov	sp, r7
 80085ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085ce:	bf00      	nop
 80085d0:	51eb851f 	.word	0x51eb851f

080085d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085d4:	b084      	sub	sp, #16
 80085d6:	b580      	push	{r7, lr}
 80085d8:	b084      	sub	sp, #16
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
 80085de:	f107 001c 	add.w	r0, r7, #28
 80085e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80085e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d122      	bne.n	8008632 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68db      	ldr	r3, [r3, #12]
 80085fc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008600:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68db      	ldr	r3, [r3, #12]
 800860c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008614:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008616:	2b01      	cmp	r3, #1
 8008618:	d105      	bne.n	8008626 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68db      	ldr	r3, [r3, #12]
 800861e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f001 fbee 	bl	8009e08 <USB_CoreReset>
 800862c:	4603      	mov	r3, r0
 800862e:	73fb      	strb	r3, [r7, #15]
 8008630:	e01a      	b.n	8008668 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f001 fbe2 	bl	8009e08 <USB_CoreReset>
 8008644:	4603      	mov	r3, r0
 8008646:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008648:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800864a:	2b00      	cmp	r3, #0
 800864c:	d106      	bne.n	800865c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	639a      	str	r2, [r3, #56]	; 0x38
 800865a:	e005      	b.n	8008668 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008660:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800866a:	2b01      	cmp	r3, #1
 800866c:	d10b      	bne.n	8008686 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f043 0206 	orr.w	r2, r3, #6
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	f043 0220 	orr.w	r2, r3, #32
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008686:	7bfb      	ldrb	r3, [r7, #15]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3710      	adds	r7, #16
 800868c:	46bd      	mov	sp, r7
 800868e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008692:	b004      	add	sp, #16
 8008694:	4770      	bx	lr
	...

08008698 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008698:	b480      	push	{r7}
 800869a:	b087      	sub	sp, #28
 800869c:	af00      	add	r7, sp, #0
 800869e:	60f8      	str	r0, [r7, #12]
 80086a0:	60b9      	str	r1, [r7, #8]
 80086a2:	4613      	mov	r3, r2
 80086a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	2b02      	cmp	r3, #2
 80086aa:	d165      	bne.n	8008778 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80086ac:	68bb      	ldr	r3, [r7, #8]
 80086ae:	4a41      	ldr	r2, [pc, #260]	; (80087b4 <USB_SetTurnaroundTime+0x11c>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d906      	bls.n	80086c2 <USB_SetTurnaroundTime+0x2a>
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	4a40      	ldr	r2, [pc, #256]	; (80087b8 <USB_SetTurnaroundTime+0x120>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d202      	bcs.n	80086c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80086bc:	230f      	movs	r3, #15
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	e062      	b.n	8008788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	4a3c      	ldr	r2, [pc, #240]	; (80087b8 <USB_SetTurnaroundTime+0x120>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d306      	bcc.n	80086d8 <USB_SetTurnaroundTime+0x40>
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	4a3b      	ldr	r2, [pc, #236]	; (80087bc <USB_SetTurnaroundTime+0x124>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d202      	bcs.n	80086d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80086d2:	230e      	movs	r3, #14
 80086d4:	617b      	str	r3, [r7, #20]
 80086d6:	e057      	b.n	8008788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	4a38      	ldr	r2, [pc, #224]	; (80087bc <USB_SetTurnaroundTime+0x124>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d306      	bcc.n	80086ee <USB_SetTurnaroundTime+0x56>
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	4a37      	ldr	r2, [pc, #220]	; (80087c0 <USB_SetTurnaroundTime+0x128>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d202      	bcs.n	80086ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80086e8:	230d      	movs	r3, #13
 80086ea:	617b      	str	r3, [r7, #20]
 80086ec:	e04c      	b.n	8008788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	4a33      	ldr	r2, [pc, #204]	; (80087c0 <USB_SetTurnaroundTime+0x128>)
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d306      	bcc.n	8008704 <USB_SetTurnaroundTime+0x6c>
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	4a32      	ldr	r2, [pc, #200]	; (80087c4 <USB_SetTurnaroundTime+0x12c>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d802      	bhi.n	8008704 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80086fe:	230c      	movs	r3, #12
 8008700:	617b      	str	r3, [r7, #20]
 8008702:	e041      	b.n	8008788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	4a2f      	ldr	r2, [pc, #188]	; (80087c4 <USB_SetTurnaroundTime+0x12c>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d906      	bls.n	800871a <USB_SetTurnaroundTime+0x82>
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	4a2e      	ldr	r2, [pc, #184]	; (80087c8 <USB_SetTurnaroundTime+0x130>)
 8008710:	4293      	cmp	r3, r2
 8008712:	d802      	bhi.n	800871a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008714:	230b      	movs	r3, #11
 8008716:	617b      	str	r3, [r7, #20]
 8008718:	e036      	b.n	8008788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	4a2a      	ldr	r2, [pc, #168]	; (80087c8 <USB_SetTurnaroundTime+0x130>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d906      	bls.n	8008730 <USB_SetTurnaroundTime+0x98>
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	4a29      	ldr	r2, [pc, #164]	; (80087cc <USB_SetTurnaroundTime+0x134>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d802      	bhi.n	8008730 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800872a:	230a      	movs	r3, #10
 800872c:	617b      	str	r3, [r7, #20]
 800872e:	e02b      	b.n	8008788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	4a26      	ldr	r2, [pc, #152]	; (80087cc <USB_SetTurnaroundTime+0x134>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d906      	bls.n	8008746 <USB_SetTurnaroundTime+0xae>
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	4a25      	ldr	r2, [pc, #148]	; (80087d0 <USB_SetTurnaroundTime+0x138>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d202      	bcs.n	8008746 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008740:	2309      	movs	r3, #9
 8008742:	617b      	str	r3, [r7, #20]
 8008744:	e020      	b.n	8008788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008746:	68bb      	ldr	r3, [r7, #8]
 8008748:	4a21      	ldr	r2, [pc, #132]	; (80087d0 <USB_SetTurnaroundTime+0x138>)
 800874a:	4293      	cmp	r3, r2
 800874c:	d306      	bcc.n	800875c <USB_SetTurnaroundTime+0xc4>
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	4a20      	ldr	r2, [pc, #128]	; (80087d4 <USB_SetTurnaroundTime+0x13c>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d802      	bhi.n	800875c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008756:	2308      	movs	r3, #8
 8008758:	617b      	str	r3, [r7, #20]
 800875a:	e015      	b.n	8008788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	4a1d      	ldr	r2, [pc, #116]	; (80087d4 <USB_SetTurnaroundTime+0x13c>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d906      	bls.n	8008772 <USB_SetTurnaroundTime+0xda>
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	4a1c      	ldr	r2, [pc, #112]	; (80087d8 <USB_SetTurnaroundTime+0x140>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d202      	bcs.n	8008772 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800876c:	2307      	movs	r3, #7
 800876e:	617b      	str	r3, [r7, #20]
 8008770:	e00a      	b.n	8008788 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008772:	2306      	movs	r3, #6
 8008774:	617b      	str	r3, [r7, #20]
 8008776:	e007      	b.n	8008788 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008778:	79fb      	ldrb	r3, [r7, #7]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d102      	bne.n	8008784 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800877e:	2309      	movs	r3, #9
 8008780:	617b      	str	r3, [r7, #20]
 8008782:	e001      	b.n	8008788 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008784:	2309      	movs	r3, #9
 8008786:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	68da      	ldr	r2, [r3, #12]
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	029b      	lsls	r3, r3, #10
 800879c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80087a0:	431a      	orrs	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80087a6:	2300      	movs	r3, #0
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	371c      	adds	r7, #28
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr
 80087b4:	00d8acbf 	.word	0x00d8acbf
 80087b8:	00e4e1c0 	.word	0x00e4e1c0
 80087bc:	00f42400 	.word	0x00f42400
 80087c0:	01067380 	.word	0x01067380
 80087c4:	011a499f 	.word	0x011a499f
 80087c8:	01312cff 	.word	0x01312cff
 80087cc:	014ca43f 	.word	0x014ca43f
 80087d0:	016e3600 	.word	0x016e3600
 80087d4:	01a6ab1f 	.word	0x01a6ab1f
 80087d8:	01e84800 	.word	0x01e84800

080087dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f043 0201 	orr.w	r2, r3, #1
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087fe:	b480      	push	{r7}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	f023 0201 	bic.w	r2, r3, #1
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008812:	2300      	movs	r3, #0
}
 8008814:	4618      	mov	r0, r3
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b084      	sub	sp, #16
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	460b      	mov	r3, r1
 800882a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800882c:	2300      	movs	r3, #0
 800882e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800883c:	78fb      	ldrb	r3, [r7, #3]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d115      	bne.n	800886e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	68db      	ldr	r3, [r3, #12]
 8008846:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800884e:	2001      	movs	r0, #1
 8008850:	f7fa f8c8 	bl	80029e4 <HAL_Delay>
      ms++;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	3301      	adds	r3, #1
 8008858:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f001 fa45 	bl	8009cea <USB_GetMode>
 8008860:	4603      	mov	r3, r0
 8008862:	2b01      	cmp	r3, #1
 8008864:	d01e      	beq.n	80088a4 <USB_SetCurrentMode+0x84>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b31      	cmp	r3, #49	; 0x31
 800886a:	d9f0      	bls.n	800884e <USB_SetCurrentMode+0x2e>
 800886c:	e01a      	b.n	80088a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800886e:	78fb      	ldrb	r3, [r7, #3]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d115      	bne.n	80088a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008880:	2001      	movs	r0, #1
 8008882:	f7fa f8af 	bl	80029e4 <HAL_Delay>
      ms++;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3301      	adds	r3, #1
 800888a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 fa2c 	bl	8009cea <USB_GetMode>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d005      	beq.n	80088a4 <USB_SetCurrentMode+0x84>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2b31      	cmp	r3, #49	; 0x31
 800889c:	d9f0      	bls.n	8008880 <USB_SetCurrentMode+0x60>
 800889e:	e001      	b.n	80088a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80088a0:	2301      	movs	r3, #1
 80088a2:	e005      	b.n	80088b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	2b32      	cmp	r3, #50	; 0x32
 80088a8:	d101      	bne.n	80088ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e000      	b.n	80088b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80088ae:	2300      	movs	r3, #0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3710      	adds	r7, #16
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80088b8:	b084      	sub	sp, #16
 80088ba:	b580      	push	{r7, lr}
 80088bc:	b086      	sub	sp, #24
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
 80088c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80088c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088ca:	2300      	movs	r3, #0
 80088cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088d2:	2300      	movs	r3, #0
 80088d4:	613b      	str	r3, [r7, #16]
 80088d6:	e009      	b.n	80088ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	3340      	adds	r3, #64	; 0x40
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	4413      	add	r3, r2
 80088e2:	2200      	movs	r2, #0
 80088e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	3301      	adds	r3, #1
 80088ea:	613b      	str	r3, [r7, #16]
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	2b0e      	cmp	r3, #14
 80088f0:	d9f2      	bls.n	80088d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d11c      	bne.n	8008932 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	68fa      	ldr	r2, [r7, #12]
 8008902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008906:	f043 0302 	orr.w	r3, r3, #2
 800890a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008910:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008928:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	639a      	str	r2, [r3, #56]	; 0x38
 8008930:	e00b      	b.n	800894a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008936:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008942:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008950:	461a      	mov	r2, r3
 8008952:	2300      	movs	r3, #0
 8008954:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895c:	4619      	mov	r1, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008964:	461a      	mov	r2, r3
 8008966:	680b      	ldr	r3, [r1, #0]
 8008968:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800896a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800896c:	2b01      	cmp	r3, #1
 800896e:	d10c      	bne.n	800898a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008972:	2b00      	cmp	r3, #0
 8008974:	d104      	bne.n	8008980 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008976:	2100      	movs	r1, #0
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f965 	bl	8008c48 <USB_SetDevSpeed>
 800897e:	e008      	b.n	8008992 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008980:	2101      	movs	r1, #1
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f960 	bl	8008c48 <USB_SetDevSpeed>
 8008988:	e003      	b.n	8008992 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800898a:	2103      	movs	r1, #3
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 f95b 	bl	8008c48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008992:	2110      	movs	r1, #16
 8008994:	6878      	ldr	r0, [r7, #4]
 8008996:	f000 f8f3 	bl	8008b80 <USB_FlushTxFifo>
 800899a:	4603      	mov	r3, r0
 800899c:	2b00      	cmp	r3, #0
 800899e:	d001      	beq.n	80089a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80089a0:	2301      	movs	r3, #1
 80089a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 f91f 	bl	8008be8 <USB_FlushRxFifo>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d001      	beq.n	80089b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80089b0:	2301      	movs	r3, #1
 80089b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ba:	461a      	mov	r2, r3
 80089bc:	2300      	movs	r3, #0
 80089be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c6:	461a      	mov	r2, r3
 80089c8:	2300      	movs	r3, #0
 80089ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d2:	461a      	mov	r2, r3
 80089d4:	2300      	movs	r3, #0
 80089d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089d8:	2300      	movs	r3, #0
 80089da:	613b      	str	r3, [r7, #16]
 80089dc:	e043      	b.n	8008a66 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089f4:	d118      	bne.n	8008a28 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80089f6:	693b      	ldr	r3, [r7, #16]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a08:	461a      	mov	r2, r3
 8008a0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	e013      	b.n	8008a3a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	015a      	lsls	r2, r3, #5
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	4413      	add	r3, r2
 8008a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a24:	6013      	str	r3, [r2, #0]
 8008a26:	e008      	b.n	8008a3a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	015a      	lsls	r2, r3, #5
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	4413      	add	r3, r2
 8008a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a34:	461a      	mov	r2, r3
 8008a36:	2300      	movs	r3, #0
 8008a38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a46:	461a      	mov	r2, r3
 8008a48:	2300      	movs	r3, #0
 8008a4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	015a      	lsls	r2, r3, #5
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4413      	add	r3, r2
 8008a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	3301      	adds	r3, #1
 8008a64:	613b      	str	r3, [r7, #16]
 8008a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a68:	693a      	ldr	r2, [r7, #16]
 8008a6a:	429a      	cmp	r2, r3
 8008a6c:	d3b7      	bcc.n	80089de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a6e:	2300      	movs	r3, #0
 8008a70:	613b      	str	r3, [r7, #16]
 8008a72:	e043      	b.n	8008afc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a8a:	d118      	bne.n	8008abe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008aa4:	6013      	str	r3, [r2, #0]
 8008aa6:	e013      	b.n	8008ad0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008aba:	6013      	str	r3, [r2, #0]
 8008abc:	e008      	b.n	8008ad0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aca:	461a      	mov	r2, r3
 8008acc:	2300      	movs	r3, #0
 8008ace:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008adc:	461a      	mov	r2, r3
 8008ade:	2300      	movs	r3, #0
 8008ae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	015a      	lsls	r2, r3, #5
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4413      	add	r3, r2
 8008aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aee:	461a      	mov	r2, r3
 8008af0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008af4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008af6:	693b      	ldr	r3, [r7, #16]
 8008af8:	3301      	adds	r3, #1
 8008afa:	613b      	str	r3, [r7, #16]
 8008afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d3b7      	bcc.n	8008a74 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d105      	bne.n	8008b38 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	699b      	ldr	r3, [r3, #24]
 8008b30:	f043 0210 	orr.w	r2, r3, #16
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	699a      	ldr	r2, [r3, #24]
 8008b3c:	4b0f      	ldr	r3, [pc, #60]	; (8008b7c <USB_DevInit+0x2c4>)
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d005      	beq.n	8008b56 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	699b      	ldr	r3, [r3, #24]
 8008b4e:	f043 0208 	orr.w	r2, r3, #8
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d107      	bne.n	8008b6c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	699b      	ldr	r3, [r3, #24]
 8008b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b64:	f043 0304 	orr.w	r3, r3, #4
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b78:	b004      	add	sp, #16
 8008b7a:	4770      	bx	lr
 8008b7c:	803c3800 	.word	0x803c3800

08008b80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b085      	sub	sp, #20
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3301      	adds	r3, #1
 8008b92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	4a13      	ldr	r2, [pc, #76]	; (8008be4 <USB_FlushTxFifo+0x64>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d901      	bls.n	8008ba0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	e01b      	b.n	8008bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	691b      	ldr	r3, [r3, #16]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	daf2      	bge.n	8008b8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008bac:	683b      	ldr	r3, [r7, #0]
 8008bae:	019b      	lsls	r3, r3, #6
 8008bb0:	f043 0220 	orr.w	r2, r3, #32
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	4a08      	ldr	r2, [pc, #32]	; (8008be4 <USB_FlushTxFifo+0x64>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d901      	bls.n	8008bca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e006      	b.n	8008bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	691b      	ldr	r3, [r3, #16]
 8008bce:	f003 0320 	and.w	r3, r3, #32
 8008bd2:	2b20      	cmp	r3, #32
 8008bd4:	d0f0      	beq.n	8008bb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	00030d40 	.word	0x00030d40

08008be8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	4a11      	ldr	r2, [pc, #68]	; (8008c44 <USB_FlushRxFifo+0x5c>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d901      	bls.n	8008c06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c02:	2303      	movs	r3, #3
 8008c04:	e018      	b.n	8008c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	691b      	ldr	r3, [r3, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	daf2      	bge.n	8008bf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2210      	movs	r2, #16
 8008c16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	4a08      	ldr	r2, [pc, #32]	; (8008c44 <USB_FlushRxFifo+0x5c>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d901      	bls.n	8008c2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c26:	2303      	movs	r3, #3
 8008c28:	e006      	b.n	8008c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	f003 0310 	and.w	r3, r3, #16
 8008c32:	2b10      	cmp	r3, #16
 8008c34:	d0f0      	beq.n	8008c18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c36:	2300      	movs	r3, #0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr
 8008c44:	00030d40 	.word	0x00030d40

08008c48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b085      	sub	sp, #20
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	460b      	mov	r3, r1
 8008c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	78fb      	ldrb	r3, [r7, #3]
 8008c62:	68f9      	ldr	r1, [r7, #12]
 8008c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3714      	adds	r7, #20
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b087      	sub	sp, #28
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f003 0306 	and.w	r3, r3, #6
 8008c92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d102      	bne.n	8008ca0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	75fb      	strb	r3, [r7, #23]
 8008c9e:	e00a      	b.n	8008cb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d002      	beq.n	8008cac <USB_GetDevSpeed+0x32>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2b06      	cmp	r3, #6
 8008caa:	d102      	bne.n	8008cb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008cac:	2302      	movs	r3, #2
 8008cae:	75fb      	strb	r3, [r7, #23]
 8008cb0:	e001      	b.n	8008cb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008cb2:	230f      	movs	r3, #15
 8008cb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	371c      	adds	r7, #28
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	781b      	ldrb	r3, [r3, #0]
 8008cd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	785b      	ldrb	r3, [r3, #1]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d13a      	bne.n	8008d56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce6:	69da      	ldr	r2, [r3, #28]
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	781b      	ldrb	r3, [r3, #0]
 8008cec:	f003 030f 	and.w	r3, r3, #15
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	68f9      	ldr	r1, [r7, #12]
 8008cfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	015a      	lsls	r2, r3, #5
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	4413      	add	r3, r2
 8008d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d155      	bne.n	8008dc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	68db      	ldr	r3, [r3, #12]
 8008d2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	791b      	ldrb	r3, [r3, #4]
 8008d32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	059b      	lsls	r3, r3, #22
 8008d3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	68ba      	ldr	r2, [r7, #8]
 8008d40:	0151      	lsls	r1, r2, #5
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	440a      	add	r2, r1
 8008d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d52:	6013      	str	r3, [r2, #0]
 8008d54:	e036      	b.n	8008dc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d5c:	69da      	ldr	r2, [r3, #28]
 8008d5e:	683b      	ldr	r3, [r7, #0]
 8008d60:	781b      	ldrb	r3, [r3, #0]
 8008d62:	f003 030f 	and.w	r3, r3, #15
 8008d66:	2101      	movs	r1, #1
 8008d68:	fa01 f303 	lsl.w	r3, r1, r3
 8008d6c:	041b      	lsls	r3, r3, #16
 8008d6e:	68f9      	ldr	r1, [r7, #12]
 8008d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d74:	4313      	orrs	r3, r2
 8008d76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d11a      	bne.n	8008dc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	791b      	ldrb	r3, [r3, #4]
 8008da8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008daa:	430b      	orrs	r3, r1
 8008dac:	4313      	orrs	r3, r2
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	0151      	lsls	r1, r2, #5
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	440a      	add	r2, r1
 8008db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
	...

08008dd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	785b      	ldrb	r3, [r3, #1]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d161      	bne.n	8008eb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	015a      	lsls	r2, r3, #5
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	4413      	add	r3, r2
 8008df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e06:	d11f      	bne.n	8008e48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	015a      	lsls	r2, r3, #5
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	4413      	add	r3, r2
 8008e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68ba      	ldr	r2, [r7, #8]
 8008e18:	0151      	lsls	r1, r2, #5
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	440a      	add	r2, r1
 8008e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008e26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	015a      	lsls	r2, r3, #5
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	4413      	add	r3, r2
 8008e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	68ba      	ldr	r2, [r7, #8]
 8008e38:	0151      	lsls	r1, r2, #5
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	440a      	add	r2, r1
 8008e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008e46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e50:	683b      	ldr	r3, [r7, #0]
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	f003 030f 	and.w	r3, r3, #15
 8008e58:	2101      	movs	r1, #1
 8008e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	43db      	mvns	r3, r3
 8008e62:	68f9      	ldr	r1, [r7, #12]
 8008e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e68:	4013      	ands	r3, r2
 8008e6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e72:	69da      	ldr	r2, [r3, #28]
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	f003 030f 	and.w	r3, r3, #15
 8008e7c:	2101      	movs	r1, #1
 8008e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e82:	b29b      	uxth	r3, r3
 8008e84:	43db      	mvns	r3, r3
 8008e86:	68f9      	ldr	r1, [r7, #12]
 8008e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e8c:	4013      	ands	r3, r2
 8008e8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	0159      	lsls	r1, r3, #5
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	440b      	add	r3, r1
 8008ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eaa:	4619      	mov	r1, r3
 8008eac:	4b35      	ldr	r3, [pc, #212]	; (8008f84 <USB_DeactivateEndpoint+0x1b0>)
 8008eae:	4013      	ands	r3, r2
 8008eb0:	600b      	str	r3, [r1, #0]
 8008eb2:	e060      	b.n	8008f76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008eca:	d11f      	bne.n	8008f0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	015a      	lsls	r2, r3, #5
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68ba      	ldr	r2, [r7, #8]
 8008edc:	0151      	lsls	r1, r2, #5
 8008ede:	68fa      	ldr	r2, [r7, #12]
 8008ee0:	440a      	add	r2, r1
 8008ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ee6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008eea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68ba      	ldr	r2, [r7, #8]
 8008efc:	0151      	lsls	r1, r2, #5
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	440a      	add	r2, r1
 8008f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	f003 030f 	and.w	r3, r3, #15
 8008f1c:	2101      	movs	r1, #1
 8008f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008f22:	041b      	lsls	r3, r3, #16
 8008f24:	43db      	mvns	r3, r3
 8008f26:	68f9      	ldr	r1, [r7, #12]
 8008f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f2c:	4013      	ands	r3, r2
 8008f2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f36:	69da      	ldr	r2, [r3, #28]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	781b      	ldrb	r3, [r3, #0]
 8008f3c:	f003 030f 	and.w	r3, r3, #15
 8008f40:	2101      	movs	r1, #1
 8008f42:	fa01 f303 	lsl.w	r3, r1, r3
 8008f46:	041b      	lsls	r3, r3, #16
 8008f48:	43db      	mvns	r3, r3
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f50:	4013      	ands	r3, r2
 8008f52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f60:	681a      	ldr	r2, [r3, #0]
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	0159      	lsls	r1, r3, #5
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	440b      	add	r3, r1
 8008f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <USB_DeactivateEndpoint+0x1b4>)
 8008f72:	4013      	ands	r3, r2
 8008f74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008f76:	2300      	movs	r3, #0
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3714      	adds	r7, #20
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	ec337800 	.word	0xec337800
 8008f88:	eff37800 	.word	0xeff37800

08008f8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b08a      	sub	sp, #40	; 0x28
 8008f90:	af02      	add	r7, sp, #8
 8008f92:	60f8      	str	r0, [r7, #12]
 8008f94:	60b9      	str	r1, [r7, #8]
 8008f96:	4613      	mov	r3, r2
 8008f98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	785b      	ldrb	r3, [r3, #1]
 8008fa8:	2b01      	cmp	r3, #1
 8008faa:	f040 815c 	bne.w	8009266 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d132      	bne.n	800901c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	015a      	lsls	r2, r3, #5
 8008fba:	69fb      	ldr	r3, [r7, #28]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	69ba      	ldr	r2, [r7, #24]
 8008fc6:	0151      	lsls	r1, r2, #5
 8008fc8:	69fa      	ldr	r2, [r7, #28]
 8008fca:	440a      	add	r2, r1
 8008fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008fd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008fd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	015a      	lsls	r2, r3, #5
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	69ba      	ldr	r2, [r7, #24]
 8008fea:	0151      	lsls	r1, r2, #5
 8008fec:	69fa      	ldr	r2, [r7, #28]
 8008fee:	440a      	add	r2, r1
 8008ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ff8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	015a      	lsls	r2, r3, #5
 8008ffe:	69fb      	ldr	r3, [r7, #28]
 8009000:	4413      	add	r3, r2
 8009002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	69ba      	ldr	r2, [r7, #24]
 800900a:	0151      	lsls	r1, r2, #5
 800900c:	69fa      	ldr	r2, [r7, #28]
 800900e:	440a      	add	r2, r1
 8009010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009014:	0cdb      	lsrs	r3, r3, #19
 8009016:	04db      	lsls	r3, r3, #19
 8009018:	6113      	str	r3, [r2, #16]
 800901a:	e074      	b.n	8009106 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800901c:	69bb      	ldr	r3, [r7, #24]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009028:	691b      	ldr	r3, [r3, #16]
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	0151      	lsls	r1, r2, #5
 800902e:	69fa      	ldr	r2, [r7, #28]
 8009030:	440a      	add	r2, r1
 8009032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009036:	0cdb      	lsrs	r3, r3, #19
 8009038:	04db      	lsls	r3, r3, #19
 800903a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800903c:	69bb      	ldr	r3, [r7, #24]
 800903e:	015a      	lsls	r2, r3, #5
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	4413      	add	r3, r2
 8009044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	69ba      	ldr	r2, [r7, #24]
 800904c:	0151      	lsls	r1, r2, #5
 800904e:	69fa      	ldr	r2, [r7, #28]
 8009050:	440a      	add	r2, r1
 8009052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009056:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800905a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800905e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009060:	69bb      	ldr	r3, [r7, #24]
 8009062:	015a      	lsls	r2, r3, #5
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	4413      	add	r3, r2
 8009068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800906c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800906e:	68bb      	ldr	r3, [r7, #8]
 8009070:	6999      	ldr	r1, [r3, #24]
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	440b      	add	r3, r1
 8009078:	1e59      	subs	r1, r3, #1
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009082:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009084:	4b9d      	ldr	r3, [pc, #628]	; (80092fc <USB_EPStartXfer+0x370>)
 8009086:	400b      	ands	r3, r1
 8009088:	69b9      	ldr	r1, [r7, #24]
 800908a:	0148      	lsls	r0, r1, #5
 800908c:	69f9      	ldr	r1, [r7, #28]
 800908e:	4401      	add	r1, r0
 8009090:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009094:	4313      	orrs	r3, r2
 8009096:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009098:	69bb      	ldr	r3, [r7, #24]
 800909a:	015a      	lsls	r2, r3, #5
 800909c:	69fb      	ldr	r3, [r7, #28]
 800909e:	4413      	add	r3, r2
 80090a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090a4:	691a      	ldr	r2, [r3, #16]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ae:	69b9      	ldr	r1, [r7, #24]
 80090b0:	0148      	lsls	r0, r1, #5
 80090b2:	69f9      	ldr	r1, [r7, #28]
 80090b4:	4401      	add	r1, r0
 80090b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090ba:	4313      	orrs	r3, r2
 80090bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80090be:	68bb      	ldr	r3, [r7, #8]
 80090c0:	791b      	ldrb	r3, [r3, #4]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d11f      	bne.n	8009106 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	015a      	lsls	r2, r3, #5
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	4413      	add	r3, r2
 80090ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	69ba      	ldr	r2, [r7, #24]
 80090d6:	0151      	lsls	r1, r2, #5
 80090d8:	69fa      	ldr	r2, [r7, #28]
 80090da:	440a      	add	r2, r1
 80090dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80090e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80090e6:	69bb      	ldr	r3, [r7, #24]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	69ba      	ldr	r2, [r7, #24]
 80090f6:	0151      	lsls	r1, r2, #5
 80090f8:	69fa      	ldr	r2, [r7, #28]
 80090fa:	440a      	add	r2, r1
 80090fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009100:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009104:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009106:	79fb      	ldrb	r3, [r7, #7]
 8009108:	2b01      	cmp	r3, #1
 800910a:	d14b      	bne.n	80091a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	695b      	ldr	r3, [r3, #20]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d009      	beq.n	8009128 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	4413      	add	r3, r2
 800911c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009120:	461a      	mov	r2, r3
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	695b      	ldr	r3, [r3, #20]
 8009126:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	791b      	ldrb	r3, [r3, #4]
 800912c:	2b01      	cmp	r3, #1
 800912e:	d128      	bne.n	8009182 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800913c:	2b00      	cmp	r3, #0
 800913e:	d110      	bne.n	8009162 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009140:	69bb      	ldr	r3, [r7, #24]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	4413      	add	r3, r2
 8009148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	69ba      	ldr	r2, [r7, #24]
 8009150:	0151      	lsls	r1, r2, #5
 8009152:	69fa      	ldr	r2, [r7, #28]
 8009154:	440a      	add	r2, r1
 8009156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800915a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800915e:	6013      	str	r3, [r2, #0]
 8009160:	e00f      	b.n	8009182 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009162:	69bb      	ldr	r3, [r7, #24]
 8009164:	015a      	lsls	r2, r3, #5
 8009166:	69fb      	ldr	r3, [r7, #28]
 8009168:	4413      	add	r3, r2
 800916a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	69ba      	ldr	r2, [r7, #24]
 8009172:	0151      	lsls	r1, r2, #5
 8009174:	69fa      	ldr	r2, [r7, #28]
 8009176:	440a      	add	r2, r1
 8009178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800917c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009180:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009182:	69bb      	ldr	r3, [r7, #24]
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	69ba      	ldr	r2, [r7, #24]
 8009192:	0151      	lsls	r1, r2, #5
 8009194:	69fa      	ldr	r2, [r7, #28]
 8009196:	440a      	add	r2, r1
 8009198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800919c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091a0:	6013      	str	r3, [r2, #0]
 80091a2:	e133      	b.n	800940c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	69ba      	ldr	r2, [r7, #24]
 80091b4:	0151      	lsls	r1, r2, #5
 80091b6:	69fa      	ldr	r2, [r7, #28]
 80091b8:	440a      	add	r2, r1
 80091ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	791b      	ldrb	r3, [r3, #4]
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d015      	beq.n	80091f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 811b 	beq.w	800940c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	f003 030f 	and.w	r3, r3, #15
 80091e6:	2101      	movs	r1, #1
 80091e8:	fa01 f303 	lsl.w	r3, r1, r3
 80091ec:	69f9      	ldr	r1, [r7, #28]
 80091ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091f2:	4313      	orrs	r3, r2
 80091f4:	634b      	str	r3, [r1, #52]	; 0x34
 80091f6:	e109      	b.n	800940c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80091f8:	69fb      	ldr	r3, [r7, #28]
 80091fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fe:	689b      	ldr	r3, [r3, #8]
 8009200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009204:	2b00      	cmp	r3, #0
 8009206:	d110      	bne.n	800922a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009208:	69bb      	ldr	r3, [r7, #24]
 800920a:	015a      	lsls	r2, r3, #5
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	4413      	add	r3, r2
 8009210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	69ba      	ldr	r2, [r7, #24]
 8009218:	0151      	lsls	r1, r2, #5
 800921a:	69fa      	ldr	r2, [r7, #28]
 800921c:	440a      	add	r2, r1
 800921e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009226:	6013      	str	r3, [r2, #0]
 8009228:	e00f      	b.n	800924a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800922a:	69bb      	ldr	r3, [r7, #24]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	69fb      	ldr	r3, [r7, #28]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	69ba      	ldr	r2, [r7, #24]
 800923a:	0151      	lsls	r1, r2, #5
 800923c:	69fa      	ldr	r2, [r7, #28]
 800923e:	440a      	add	r2, r1
 8009240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009248:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	6919      	ldr	r1, [r3, #16]
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	781a      	ldrb	r2, [r3, #0]
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	b298      	uxth	r0, r3
 8009258:	79fb      	ldrb	r3, [r7, #7]
 800925a:	9300      	str	r3, [sp, #0]
 800925c:	4603      	mov	r3, r0
 800925e:	68f8      	ldr	r0, [r7, #12]
 8009260:	f000 fade 	bl	8009820 <USB_WritePacket>
 8009264:	e0d2      	b.n	800940c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009266:	69bb      	ldr	r3, [r7, #24]
 8009268:	015a      	lsls	r2, r3, #5
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	4413      	add	r3, r2
 800926e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009272:	691b      	ldr	r3, [r3, #16]
 8009274:	69ba      	ldr	r2, [r7, #24]
 8009276:	0151      	lsls	r1, r2, #5
 8009278:	69fa      	ldr	r2, [r7, #28]
 800927a:	440a      	add	r2, r1
 800927c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009280:	0cdb      	lsrs	r3, r3, #19
 8009282:	04db      	lsls	r3, r3, #19
 8009284:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009286:	69bb      	ldr	r3, [r7, #24]
 8009288:	015a      	lsls	r2, r3, #5
 800928a:	69fb      	ldr	r3, [r7, #28]
 800928c:	4413      	add	r3, r2
 800928e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	0151      	lsls	r1, r2, #5
 8009298:	69fa      	ldr	r2, [r7, #28]
 800929a:	440a      	add	r2, r1
 800929c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80092a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80092a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d126      	bne.n	8009300 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	015a      	lsls	r2, r3, #5
 80092b6:	69fb      	ldr	r3, [r7, #28]
 80092b8:	4413      	add	r3, r2
 80092ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092be:	691a      	ldr	r2, [r3, #16]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80092c8:	69b9      	ldr	r1, [r7, #24]
 80092ca:	0148      	lsls	r0, r1, #5
 80092cc:	69f9      	ldr	r1, [r7, #28]
 80092ce:	4401      	add	r1, r0
 80092d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80092d4:	4313      	orrs	r3, r2
 80092d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092d8:	69bb      	ldr	r3, [r7, #24]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	69fb      	ldr	r3, [r7, #28]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	69ba      	ldr	r2, [r7, #24]
 80092e8:	0151      	lsls	r1, r2, #5
 80092ea:	69fa      	ldr	r2, [r7, #28]
 80092ec:	440a      	add	r2, r1
 80092ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092f6:	6113      	str	r3, [r2, #16]
 80092f8:	e03a      	b.n	8009370 <USB_EPStartXfer+0x3e4>
 80092fa:	bf00      	nop
 80092fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	699a      	ldr	r2, [r3, #24]
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	4413      	add	r3, r2
 800930a:	1e5a      	subs	r2, r3, #1
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	fbb2 f3f3 	udiv	r3, r2, r3
 8009314:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	68db      	ldr	r3, [r3, #12]
 800931a:	8afa      	ldrh	r2, [r7, #22]
 800931c:	fb03 f202 	mul.w	r2, r3, r2
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	69fb      	ldr	r3, [r7, #28]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009330:	691a      	ldr	r2, [r3, #16]
 8009332:	8afb      	ldrh	r3, [r7, #22]
 8009334:	04d9      	lsls	r1, r3, #19
 8009336:	4b38      	ldr	r3, [pc, #224]	; (8009418 <USB_EPStartXfer+0x48c>)
 8009338:	400b      	ands	r3, r1
 800933a:	69b9      	ldr	r1, [r7, #24]
 800933c:	0148      	lsls	r0, r1, #5
 800933e:	69f9      	ldr	r1, [r7, #28]
 8009340:	4401      	add	r1, r0
 8009342:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009346:	4313      	orrs	r3, r2
 8009348:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	015a      	lsls	r2, r3, #5
 800934e:	69fb      	ldr	r3, [r7, #28]
 8009350:	4413      	add	r3, r2
 8009352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009356:	691a      	ldr	r2, [r3, #16]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	69db      	ldr	r3, [r3, #28]
 800935c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009360:	69b9      	ldr	r1, [r7, #24]
 8009362:	0148      	lsls	r0, r1, #5
 8009364:	69f9      	ldr	r1, [r7, #28]
 8009366:	4401      	add	r1, r0
 8009368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800936c:	4313      	orrs	r3, r2
 800936e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	2b01      	cmp	r3, #1
 8009374:	d10d      	bne.n	8009392 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009376:	68bb      	ldr	r3, [r7, #8]
 8009378:	691b      	ldr	r3, [r3, #16]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d009      	beq.n	8009392 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	6919      	ldr	r1, [r3, #16]
 8009382:	69bb      	ldr	r3, [r7, #24]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	69fb      	ldr	r3, [r7, #28]
 8009388:	4413      	add	r3, r2
 800938a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800938e:	460a      	mov	r2, r1
 8009390:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	791b      	ldrb	r3, [r3, #4]
 8009396:	2b01      	cmp	r3, #1
 8009398:	d128      	bne.n	80093ec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d110      	bne.n	80093cc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80093aa:	69bb      	ldr	r3, [r7, #24]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	69ba      	ldr	r2, [r7, #24]
 80093ba:	0151      	lsls	r1, r2, #5
 80093bc:	69fa      	ldr	r2, [r7, #28]
 80093be:	440a      	add	r2, r1
 80093c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093c8:	6013      	str	r3, [r2, #0]
 80093ca:	e00f      	b.n	80093ec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80093cc:	69bb      	ldr	r3, [r7, #24]
 80093ce:	015a      	lsls	r2, r3, #5
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	4413      	add	r3, r2
 80093d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	69ba      	ldr	r2, [r7, #24]
 80093dc:	0151      	lsls	r1, r2, #5
 80093de:	69fa      	ldr	r2, [r7, #28]
 80093e0:	440a      	add	r2, r1
 80093e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093ec:	69bb      	ldr	r3, [r7, #24]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	69ba      	ldr	r2, [r7, #24]
 80093fc:	0151      	lsls	r1, r2, #5
 80093fe:	69fa      	ldr	r2, [r7, #28]
 8009400:	440a      	add	r2, r1
 8009402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800940a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800940c:	2300      	movs	r3, #0
}
 800940e:	4618      	mov	r0, r3
 8009410:	3720      	adds	r7, #32
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	1ff80000 	.word	0x1ff80000

0800941c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800941c:	b480      	push	{r7}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	4613      	mov	r3, r2
 8009428:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	785b      	ldrb	r3, [r3, #1]
 8009438:	2b01      	cmp	r3, #1
 800943a:	f040 80ce 	bne.w	80095da <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800943e:	68bb      	ldr	r3, [r7, #8]
 8009440:	699b      	ldr	r3, [r3, #24]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d132      	bne.n	80094ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	697b      	ldr	r3, [r7, #20]
 800944c:	4413      	add	r3, r2
 800944e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	0151      	lsls	r1, r2, #5
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	440a      	add	r2, r1
 800945c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	015a      	lsls	r2, r3, #5
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	4413      	add	r3, r2
 8009472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	693a      	ldr	r2, [r7, #16]
 800947a:	0151      	lsls	r1, r2, #5
 800947c:	697a      	ldr	r2, [r7, #20]
 800947e:	440a      	add	r2, r1
 8009480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009488:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800948a:	693b      	ldr	r3, [r7, #16]
 800948c:	015a      	lsls	r2, r3, #5
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	4413      	add	r3, r2
 8009492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	0151      	lsls	r1, r2, #5
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	440a      	add	r2, r1
 80094a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094a4:	0cdb      	lsrs	r3, r3, #19
 80094a6:	04db      	lsls	r3, r3, #19
 80094a8:	6113      	str	r3, [r2, #16]
 80094aa:	e04e      	b.n	800954a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	015a      	lsls	r2, r3, #5
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	4413      	add	r3, r2
 80094b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	0151      	lsls	r1, r2, #5
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	440a      	add	r2, r1
 80094c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094c6:	0cdb      	lsrs	r3, r3, #19
 80094c8:	04db      	lsls	r3, r3, #19
 80094ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	015a      	lsls	r2, r3, #5
 80094d0:	697b      	ldr	r3, [r7, #20]
 80094d2:	4413      	add	r3, r2
 80094d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	693a      	ldr	r2, [r7, #16]
 80094dc:	0151      	lsls	r1, r2, #5
 80094de:	697a      	ldr	r2, [r7, #20]
 80094e0:	440a      	add	r2, r1
 80094e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	699a      	ldr	r2, [r3, #24]
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d903      	bls.n	8009504 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	68da      	ldr	r2, [r3, #12]
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009504:	693b      	ldr	r3, [r7, #16]
 8009506:	015a      	lsls	r2, r3, #5
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	4413      	add	r3, r2
 800950c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	693a      	ldr	r2, [r7, #16]
 8009514:	0151      	lsls	r1, r2, #5
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	440a      	add	r2, r1
 800951a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800951e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009530:	691a      	ldr	r2, [r3, #16]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	699b      	ldr	r3, [r3, #24]
 8009536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800953a:	6939      	ldr	r1, [r7, #16]
 800953c:	0148      	lsls	r0, r1, #5
 800953e:	6979      	ldr	r1, [r7, #20]
 8009540:	4401      	add	r1, r0
 8009542:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009546:	4313      	orrs	r3, r2
 8009548:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800954a:	79fb      	ldrb	r3, [r7, #7]
 800954c:	2b01      	cmp	r3, #1
 800954e:	d11e      	bne.n	800958e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	695b      	ldr	r3, [r3, #20]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d009      	beq.n	800956c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009558:	693b      	ldr	r3, [r7, #16]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	4413      	add	r3, r2
 8009560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009564:	461a      	mov	r2, r3
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	015a      	lsls	r2, r3, #5
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	4413      	add	r3, r2
 8009574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	693a      	ldr	r2, [r7, #16]
 800957c:	0151      	lsls	r1, r2, #5
 800957e:	697a      	ldr	r2, [r7, #20]
 8009580:	440a      	add	r2, r1
 8009582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800958a:	6013      	str	r3, [r2, #0]
 800958c:	e097      	b.n	80096be <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	015a      	lsls	r2, r3, #5
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	4413      	add	r3, r2
 8009596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	693a      	ldr	r2, [r7, #16]
 800959e:	0151      	lsls	r1, r2, #5
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	440a      	add	r2, r1
 80095a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80095ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	699b      	ldr	r3, [r3, #24]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	f000 8083 	beq.w	80096be <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80095b8:	697b      	ldr	r3, [r7, #20]
 80095ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	f003 030f 	and.w	r3, r3, #15
 80095c8:	2101      	movs	r1, #1
 80095ca:	fa01 f303 	lsl.w	r3, r1, r3
 80095ce:	6979      	ldr	r1, [r7, #20]
 80095d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80095d4:	4313      	orrs	r3, r2
 80095d6:	634b      	str	r3, [r1, #52]	; 0x34
 80095d8:	e071      	b.n	80096be <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	015a      	lsls	r2, r3, #5
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	4413      	add	r3, r2
 80095e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	0151      	lsls	r1, r2, #5
 80095ec:	697a      	ldr	r2, [r7, #20]
 80095ee:	440a      	add	r2, r1
 80095f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095f4:	0cdb      	lsrs	r3, r3, #19
 80095f6:	04db      	lsls	r3, r3, #19
 80095f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	015a      	lsls	r2, r3, #5
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	4413      	add	r3, r2
 8009602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	0151      	lsls	r1, r2, #5
 800960c:	697a      	ldr	r2, [r7, #20]
 800960e:	440a      	add	r2, r1
 8009610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009614:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009618:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800961c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	699b      	ldr	r3, [r3, #24]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d003      	beq.n	800962e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	68da      	ldr	r2, [r3, #12]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	68da      	ldr	r2, [r3, #12]
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009636:	693b      	ldr	r3, [r7, #16]
 8009638:	015a      	lsls	r2, r3, #5
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	4413      	add	r3, r2
 800963e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009642:	691b      	ldr	r3, [r3, #16]
 8009644:	693a      	ldr	r2, [r7, #16]
 8009646:	0151      	lsls	r1, r2, #5
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	440a      	add	r2, r1
 800964c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	015a      	lsls	r2, r3, #5
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	4413      	add	r3, r2
 800965e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009662:	691a      	ldr	r2, [r3, #16]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	69db      	ldr	r3, [r3, #28]
 8009668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800966c:	6939      	ldr	r1, [r7, #16]
 800966e:	0148      	lsls	r0, r1, #5
 8009670:	6979      	ldr	r1, [r7, #20]
 8009672:	4401      	add	r1, r0
 8009674:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009678:	4313      	orrs	r3, r2
 800967a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800967c:	79fb      	ldrb	r3, [r7, #7]
 800967e:	2b01      	cmp	r3, #1
 8009680:	d10d      	bne.n	800969e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d009      	beq.n	800969e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	6919      	ldr	r1, [r3, #16]
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	015a      	lsls	r2, r3, #5
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	4413      	add	r3, r2
 8009696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800969a:	460a      	mov	r2, r1
 800969c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	015a      	lsls	r2, r3, #5
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	4413      	add	r3, r2
 80096a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	0151      	lsls	r1, r2, #5
 80096b0:	697a      	ldr	r2, [r7, #20]
 80096b2:	440a      	add	r2, r1
 80096b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80096b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b087      	sub	sp, #28
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	785b      	ldrb	r3, [r3, #1]
 80096e6:	2b01      	cmp	r3, #1
 80096e8:	d14a      	bne.n	8009780 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80096fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009702:	f040 8086 	bne.w	8009812 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	781b      	ldrb	r3, [r3, #0]
 800970a:	015a      	lsls	r2, r3, #5
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	4413      	add	r3, r2
 8009710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	683a      	ldr	r2, [r7, #0]
 8009718:	7812      	ldrb	r2, [r2, #0]
 800971a:	0151      	lsls	r1, r2, #5
 800971c:	693a      	ldr	r2, [r7, #16]
 800971e:	440a      	add	r2, r1
 8009720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009724:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009728:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	015a      	lsls	r2, r3, #5
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	4413      	add	r3, r2
 8009734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	683a      	ldr	r2, [r7, #0]
 800973c:	7812      	ldrb	r2, [r2, #0]
 800973e:	0151      	lsls	r1, r2, #5
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	440a      	add	r2, r1
 8009744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800974c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3301      	adds	r3, #1
 8009752:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f242 7210 	movw	r2, #10000	; 0x2710
 800975a:	4293      	cmp	r3, r2
 800975c:	d902      	bls.n	8009764 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	75fb      	strb	r3, [r7, #23]
          break;
 8009762:	e056      	b.n	8009812 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	781b      	ldrb	r3, [r3, #0]
 8009768:	015a      	lsls	r2, r3, #5
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	4413      	add	r3, r2
 800976e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800977c:	d0e7      	beq.n	800974e <USB_EPStopXfer+0x82>
 800977e:	e048      	b.n	8009812 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	015a      	lsls	r2, r3, #5
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009798:	d13b      	bne.n	8009812 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	781b      	ldrb	r3, [r3, #0]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	683a      	ldr	r2, [r7, #0]
 80097ac:	7812      	ldrb	r2, [r2, #0]
 80097ae:	0151      	lsls	r1, r2, #5
 80097b0:	693a      	ldr	r2, [r7, #16]
 80097b2:	440a      	add	r2, r1
 80097b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80097bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	015a      	lsls	r2, r3, #5
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	683a      	ldr	r2, [r7, #0]
 80097d0:	7812      	ldrb	r2, [r2, #0]
 80097d2:	0151      	lsls	r1, r2, #5
 80097d4:	693a      	ldr	r2, [r7, #16]
 80097d6:	440a      	add	r2, r1
 80097d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3301      	adds	r3, #1
 80097e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d902      	bls.n	80097f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	75fb      	strb	r3, [r7, #23]
          break;
 80097f6:	e00c      	b.n	8009812 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	781b      	ldrb	r3, [r3, #0]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800980c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009810:	d0e7      	beq.n	80097e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009812:	7dfb      	ldrb	r3, [r7, #23]
}
 8009814:	4618      	mov	r0, r3
 8009816:	371c      	adds	r7, #28
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009820:	b480      	push	{r7}
 8009822:	b089      	sub	sp, #36	; 0x24
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	60b9      	str	r1, [r7, #8]
 800982a:	4611      	mov	r1, r2
 800982c:	461a      	mov	r2, r3
 800982e:	460b      	mov	r3, r1
 8009830:	71fb      	strb	r3, [r7, #7]
 8009832:	4613      	mov	r3, r2
 8009834:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800983e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009842:	2b00      	cmp	r3, #0
 8009844:	d123      	bne.n	800988e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009846:	88bb      	ldrh	r3, [r7, #4]
 8009848:	3303      	adds	r3, #3
 800984a:	089b      	lsrs	r3, r3, #2
 800984c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800984e:	2300      	movs	r3, #0
 8009850:	61bb      	str	r3, [r7, #24]
 8009852:	e018      	b.n	8009886 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009854:	79fb      	ldrb	r3, [r7, #7]
 8009856:	031a      	lsls	r2, r3, #12
 8009858:	697b      	ldr	r3, [r7, #20]
 800985a:	4413      	add	r3, r2
 800985c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009860:	461a      	mov	r2, r3
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	3301      	adds	r3, #1
 800986c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	3301      	adds	r3, #1
 8009872:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	3301      	adds	r3, #1
 8009878:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800987a:	69fb      	ldr	r3, [r7, #28]
 800987c:	3301      	adds	r3, #1
 800987e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009880:	69bb      	ldr	r3, [r7, #24]
 8009882:	3301      	adds	r3, #1
 8009884:	61bb      	str	r3, [r7, #24]
 8009886:	69ba      	ldr	r2, [r7, #24]
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	429a      	cmp	r2, r3
 800988c:	d3e2      	bcc.n	8009854 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3724      	adds	r7, #36	; 0x24
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800989c:	b480      	push	{r7}
 800989e:	b08b      	sub	sp, #44	; 0x2c
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80098b2:	88fb      	ldrh	r3, [r7, #6]
 80098b4:	089b      	lsrs	r3, r3, #2
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80098ba:	88fb      	ldrh	r3, [r7, #6]
 80098bc:	f003 0303 	and.w	r3, r3, #3
 80098c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80098c2:	2300      	movs	r3, #0
 80098c4:	623b      	str	r3, [r7, #32]
 80098c6:	e014      	b.n	80098f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ce:	681a      	ldr	r2, [r3, #0]
 80098d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80098d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d6:	3301      	adds	r3, #1
 80098d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098dc:	3301      	adds	r3, #1
 80098de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e2:	3301      	adds	r3, #1
 80098e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	3301      	adds	r3, #1
 80098ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	3301      	adds	r3, #1
 80098f0:	623b      	str	r3, [r7, #32]
 80098f2:	6a3a      	ldr	r2, [r7, #32]
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d3e6      	bcc.n	80098c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80098fa:	8bfb      	ldrh	r3, [r7, #30]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01e      	beq.n	800993e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009900:	2300      	movs	r3, #0
 8009902:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800990a:	461a      	mov	r2, r3
 800990c:	f107 0310 	add.w	r3, r7, #16
 8009910:	6812      	ldr	r2, [r2, #0]
 8009912:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009914:	693a      	ldr	r2, [r7, #16]
 8009916:	6a3b      	ldr	r3, [r7, #32]
 8009918:	b2db      	uxtb	r3, r3
 800991a:	00db      	lsls	r3, r3, #3
 800991c:	fa22 f303 	lsr.w	r3, r2, r3
 8009920:	b2da      	uxtb	r2, r3
 8009922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009924:	701a      	strb	r2, [r3, #0]
      i++;
 8009926:	6a3b      	ldr	r3, [r7, #32]
 8009928:	3301      	adds	r3, #1
 800992a:	623b      	str	r3, [r7, #32]
      pDest++;
 800992c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992e:	3301      	adds	r3, #1
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009932:	8bfb      	ldrh	r3, [r7, #30]
 8009934:	3b01      	subs	r3, #1
 8009936:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009938:	8bfb      	ldrh	r3, [r7, #30]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d1ea      	bne.n	8009914 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800993e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009940:	4618      	mov	r0, r3
 8009942:	372c      	adds	r7, #44	; 0x2c
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800994c:	b480      	push	{r7}
 800994e:	b085      	sub	sp, #20
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
 8009954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	785b      	ldrb	r3, [r3, #1]
 8009964:	2b01      	cmp	r3, #1
 8009966:	d12c      	bne.n	80099c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2b00      	cmp	r3, #0
 8009978:	db12      	blt.n	80099a0 <USB_EPSetStall+0x54>
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00f      	beq.n	80099a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	68ba      	ldr	r2, [r7, #8]
 8009990:	0151      	lsls	r1, r2, #5
 8009992:	68fa      	ldr	r2, [r7, #12]
 8009994:	440a      	add	r2, r1
 8009996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800999a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800999e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	015a      	lsls	r2, r3, #5
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	4413      	add	r3, r2
 80099a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	0151      	lsls	r1, r2, #5
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	440a      	add	r2, r1
 80099b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80099be:	6013      	str	r3, [r2, #0]
 80099c0:	e02b      	b.n	8009a1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	015a      	lsls	r2, r3, #5
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4413      	add	r3, r2
 80099ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	db12      	blt.n	80099fa <USB_EPSetStall+0xae>
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00f      	beq.n	80099fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	015a      	lsls	r2, r3, #5
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	4413      	add	r3, r2
 80099e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	0151      	lsls	r1, r2, #5
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	440a      	add	r2, r1
 80099f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80099f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80099f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	015a      	lsls	r2, r3, #5
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	4413      	add	r3, r2
 8009a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68ba      	ldr	r2, [r7, #8]
 8009a0a:	0151      	lsls	r1, r2, #5
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	440a      	add	r2, r1
 8009a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009a1a:	2300      	movs	r3, #0
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3714      	adds	r7, #20
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	781b      	ldrb	r3, [r3, #0]
 8009a3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	785b      	ldrb	r3, [r3, #1]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d128      	bne.n	8009a96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	015a      	lsls	r2, r3, #5
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	4413      	add	r3, r2
 8009a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	0151      	lsls	r1, r2, #5
 8009a56:	68fa      	ldr	r2, [r7, #12]
 8009a58:	440a      	add	r2, r1
 8009a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009a62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	791b      	ldrb	r3, [r3, #4]
 8009a68:	2b03      	cmp	r3, #3
 8009a6a:	d003      	beq.n	8009a74 <USB_EPClearStall+0x4c>
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	791b      	ldrb	r3, [r3, #4]
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d138      	bne.n	8009ae6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	015a      	lsls	r2, r3, #5
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	0151      	lsls	r1, r2, #5
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	440a      	add	r2, r1
 8009a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009a92:	6013      	str	r3, [r2, #0]
 8009a94:	e027      	b.n	8009ae6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	015a      	lsls	r2, r3, #5
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	0151      	lsls	r1, r2, #5
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	440a      	add	r2, r1
 8009aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ab0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ab4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	791b      	ldrb	r3, [r3, #4]
 8009aba:	2b03      	cmp	r3, #3
 8009abc:	d003      	beq.n	8009ac6 <USB_EPClearStall+0x9e>
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	791b      	ldrb	r3, [r3, #4]
 8009ac2:	2b02      	cmp	r3, #2
 8009ac4:	d10f      	bne.n	8009ae6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	015a      	lsls	r2, r3, #5
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	4413      	add	r3, r2
 8009ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	68ba      	ldr	r2, [r7, #8]
 8009ad6:	0151      	lsls	r1, r2, #5
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	440a      	add	r2, r1
 8009adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ae4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3714      	adds	r7, #20
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b085      	sub	sp, #20
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
 8009afc:	460b      	mov	r3, r1
 8009afe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68fa      	ldr	r2, [r7, #12]
 8009b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009b16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	78fb      	ldrb	r3, [r7, #3]
 8009b22:	011b      	lsls	r3, r3, #4
 8009b24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009b28:	68f9      	ldr	r1, [r7, #12]
 8009b2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3714      	adds	r7, #20
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b5a:	f023 0303 	bic.w	r3, r3, #3
 8009b5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b66:	685b      	ldr	r3, [r3, #4]
 8009b68:	68fa      	ldr	r2, [r7, #12]
 8009b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b6e:	f023 0302 	bic.w	r3, r3, #2
 8009b72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3714      	adds	r7, #20
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr

08009b82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009b82:	b480      	push	{r7}
 8009b84:	b085      	sub	sp, #20
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	68fa      	ldr	r2, [r7, #12]
 8009b98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b9c:	f023 0303 	bic.w	r3, r3, #3
 8009ba0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba8:	685b      	ldr	r3, [r3, #4]
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009bb0:	f043 0302 	orr.w	r3, r3, #2
 8009bb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009bb6:	2300      	movs	r3, #0
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	3714      	adds	r7, #20
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009bc4:	b480      	push	{r7}
 8009bc6:	b085      	sub	sp, #20
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	699b      	ldr	r3, [r3, #24]
 8009bd6:	68fa      	ldr	r2, [r7, #12]
 8009bd8:	4013      	ands	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b085      	sub	sp, #20
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bfc:	699b      	ldr	r3, [r3, #24]
 8009bfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c06:	69db      	ldr	r3, [r3, #28]
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	4013      	ands	r3, r2
 8009c0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	0c1b      	lsrs	r3, r3, #16
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3714      	adds	r7, #20
 8009c16:	46bd      	mov	sp, r7
 8009c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1c:	4770      	bx	lr

08009c1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009c1e:	b480      	push	{r7}
 8009c20:	b085      	sub	sp, #20
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c30:	699b      	ldr	r3, [r3, #24]
 8009c32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c3a:	69db      	ldr	r3, [r3, #28]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	4013      	ands	r3, r2
 8009c40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	b29b      	uxth	r3, r3
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c52:	b480      	push	{r7}
 8009c54:	b085      	sub	sp, #20
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009c62:	78fb      	ldrb	r3, [r7, #3]
 8009c64:	015a      	lsls	r2, r3, #5
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	4413      	add	r3, r2
 8009c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c78:	695b      	ldr	r3, [r3, #20]
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	4013      	ands	r3, r2
 8009c7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009c80:	68bb      	ldr	r3, [r7, #8]
}
 8009c82:	4618      	mov	r0, r3
 8009c84:	3714      	adds	r7, #20
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b087      	sub	sp, #28
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]
 8009c96:	460b      	mov	r3, r1
 8009c98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009c9e:	697b      	ldr	r3, [r7, #20]
 8009ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009cb2:	78fb      	ldrb	r3, [r7, #3]
 8009cb4:	f003 030f 	and.w	r3, r3, #15
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	fa22 f303 	lsr.w	r3, r2, r3
 8009cbe:	01db      	lsls	r3, r3, #7
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009cc8:	78fb      	ldrb	r3, [r7, #3]
 8009cca:	015a      	lsls	r2, r3, #5
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	4413      	add	r3, r2
 8009cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009cdc:	68bb      	ldr	r3, [r7, #8]
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	371c      	adds	r7, #28
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce8:	4770      	bx	lr

08009cea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009cea:	b480      	push	{r7}
 8009cec:	b083      	sub	sp, #12
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	f003 0301 	and.w	r3, r3, #1
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b085      	sub	sp, #20
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	68fa      	ldr	r2, [r7, #12]
 8009d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009d24:	f023 0307 	bic.w	r3, r3, #7
 8009d28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d30:	685b      	ldr	r3, [r3, #4]
 8009d32:	68fa      	ldr	r2, [r7, #12]
 8009d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	460b      	mov	r3, r1
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	333c      	adds	r3, #60	; 0x3c
 8009d62:	3304      	adds	r3, #4
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009d68:	693b      	ldr	r3, [r7, #16]
 8009d6a:	4a26      	ldr	r2, [pc, #152]	; (8009e04 <USB_EP0_OutStart+0xb8>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d90a      	bls.n	8009d86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d80:	d101      	bne.n	8009d86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	e037      	b.n	8009df6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009d86:	697b      	ldr	r3, [r7, #20]
 8009d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	2300      	movs	r3, #0
 8009d90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d98:	691b      	ldr	r3, [r3, #16]
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009da4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dac:	691b      	ldr	r3, [r3, #16]
 8009dae:	697a      	ldr	r2, [r7, #20]
 8009db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009db4:	f043 0318 	orr.w	r3, r3, #24
 8009db8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	697a      	ldr	r2, [r7, #20]
 8009dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009dcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009dce:	7afb      	ldrb	r3, [r7, #11]
 8009dd0:	2b01      	cmp	r3, #1
 8009dd2:	d10f      	bne.n	8009df4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dda:	461a      	mov	r2, r3
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	697a      	ldr	r2, [r7, #20]
 8009dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009df2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	371c      	adds	r7, #28
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	4f54300a 	.word	0x4f54300a

08009e08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	3301      	adds	r3, #1
 8009e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	4a13      	ldr	r2, [pc, #76]	; (8009e6c <USB_CoreReset+0x64>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d901      	bls.n	8009e26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009e22:	2303      	movs	r3, #3
 8009e24:	e01b      	b.n	8009e5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	daf2      	bge.n	8009e14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	f043 0201 	orr.w	r2, r3, #1
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	3301      	adds	r3, #1
 8009e42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	4a09      	ldr	r2, [pc, #36]	; (8009e6c <USB_CoreReset+0x64>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d901      	bls.n	8009e50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	e006      	b.n	8009e5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	691b      	ldr	r3, [r3, #16]
 8009e54:	f003 0301 	and.w	r3, r3, #1
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d0f0      	beq.n	8009e3e <USB_CoreReset+0x36>

  return HAL_OK;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	4618      	mov	r0, r3
 8009e60:	3714      	adds	r7, #20
 8009e62:	46bd      	mov	sp, r7
 8009e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e68:	4770      	bx	lr
 8009e6a:	bf00      	nop
 8009e6c:	00030d40 	.word	0x00030d40

08009e70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	460b      	mov	r3, r1
 8009e7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009e80:	f002 fc36 	bl	800c6f0 <USBD_static_malloc>
 8009e84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d109      	bne.n	8009ea0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	32b0      	adds	r2, #176	; 0xb0
 8009e96:	2100      	movs	r1, #0
 8009e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009e9c:	2302      	movs	r3, #2
 8009e9e:	e0d4      	b.n	800a04a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009ea0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009ea4:	2100      	movs	r1, #0
 8009ea6:	68f8      	ldr	r0, [r7, #12]
 8009ea8:	f002 fcae 	bl	800c808 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	32b0      	adds	r2, #176	; 0xb0
 8009eb6:	68f9      	ldr	r1, [r7, #12]
 8009eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	32b0      	adds	r2, #176	; 0xb0
 8009ec6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	7c1b      	ldrb	r3, [r3, #16]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d138      	bne.n	8009f4a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009ed8:	4b5e      	ldr	r3, [pc, #376]	; (800a054 <USBD_CDC_Init+0x1e4>)
 8009eda:	7819      	ldrb	r1, [r3, #0]
 8009edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ee0:	2202      	movs	r2, #2
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f002 fae1 	bl	800c4aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009ee8:	4b5a      	ldr	r3, [pc, #360]	; (800a054 <USBD_CDC_Init+0x1e4>)
 8009eea:	781b      	ldrb	r3, [r3, #0]
 8009eec:	f003 020f 	and.w	r2, r3, #15
 8009ef0:	6879      	ldr	r1, [r7, #4]
 8009ef2:	4613      	mov	r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	4413      	add	r3, r2
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	440b      	add	r3, r1
 8009efc:	3324      	adds	r3, #36	; 0x24
 8009efe:	2201      	movs	r2, #1
 8009f00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009f02:	4b55      	ldr	r3, [pc, #340]	; (800a058 <USBD_CDC_Init+0x1e8>)
 8009f04:	7819      	ldrb	r1, [r3, #0]
 8009f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f0a:	2202      	movs	r2, #2
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f002 facc 	bl	800c4aa <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009f12:	4b51      	ldr	r3, [pc, #324]	; (800a058 <USBD_CDC_Init+0x1e8>)
 8009f14:	781b      	ldrb	r3, [r3, #0]
 8009f16:	f003 020f 	and.w	r2, r3, #15
 8009f1a:	6879      	ldr	r1, [r7, #4]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	009b      	lsls	r3, r3, #2
 8009f20:	4413      	add	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f2a:	2201      	movs	r2, #1
 8009f2c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009f2e:	4b4b      	ldr	r3, [pc, #300]	; (800a05c <USBD_CDC_Init+0x1ec>)
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	f003 020f 	and.w	r2, r3, #15
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	4613      	mov	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4413      	add	r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	440b      	add	r3, r1
 8009f42:	3326      	adds	r3, #38	; 0x26
 8009f44:	2210      	movs	r2, #16
 8009f46:	801a      	strh	r2, [r3, #0]
 8009f48:	e035      	b.n	8009fb6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009f4a:	4b42      	ldr	r3, [pc, #264]	; (800a054 <USBD_CDC_Init+0x1e4>)
 8009f4c:	7819      	ldrb	r1, [r3, #0]
 8009f4e:	2340      	movs	r3, #64	; 0x40
 8009f50:	2202      	movs	r2, #2
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f002 faa9 	bl	800c4aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009f58:	4b3e      	ldr	r3, [pc, #248]	; (800a054 <USBD_CDC_Init+0x1e4>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	f003 020f 	and.w	r2, r3, #15
 8009f60:	6879      	ldr	r1, [r7, #4]
 8009f62:	4613      	mov	r3, r2
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	4413      	add	r3, r2
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	440b      	add	r3, r1
 8009f6c:	3324      	adds	r3, #36	; 0x24
 8009f6e:	2201      	movs	r2, #1
 8009f70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009f72:	4b39      	ldr	r3, [pc, #228]	; (800a058 <USBD_CDC_Init+0x1e8>)
 8009f74:	7819      	ldrb	r1, [r3, #0]
 8009f76:	2340      	movs	r3, #64	; 0x40
 8009f78:	2202      	movs	r2, #2
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f002 fa95 	bl	800c4aa <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009f80:	4b35      	ldr	r3, [pc, #212]	; (800a058 <USBD_CDC_Init+0x1e8>)
 8009f82:	781b      	ldrb	r3, [r3, #0]
 8009f84:	f003 020f 	and.w	r2, r3, #15
 8009f88:	6879      	ldr	r1, [r7, #4]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	4413      	add	r3, r2
 8009f90:	009b      	lsls	r3, r3, #2
 8009f92:	440b      	add	r3, r1
 8009f94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009f98:	2201      	movs	r2, #1
 8009f9a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009f9c:	4b2f      	ldr	r3, [pc, #188]	; (800a05c <USBD_CDC_Init+0x1ec>)
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	f003 020f 	and.w	r2, r3, #15
 8009fa4:	6879      	ldr	r1, [r7, #4]
 8009fa6:	4613      	mov	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	4413      	add	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	440b      	add	r3, r1
 8009fb0:	3326      	adds	r3, #38	; 0x26
 8009fb2:	2210      	movs	r2, #16
 8009fb4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009fb6:	4b29      	ldr	r3, [pc, #164]	; (800a05c <USBD_CDC_Init+0x1ec>)
 8009fb8:	7819      	ldrb	r1, [r3, #0]
 8009fba:	2308      	movs	r3, #8
 8009fbc:	2203      	movs	r2, #3
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f002 fa73 	bl	800c4aa <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009fc4:	4b25      	ldr	r3, [pc, #148]	; (800a05c <USBD_CDC_Init+0x1ec>)
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	f003 020f 	and.w	r2, r3, #15
 8009fcc:	6879      	ldr	r1, [r7, #4]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	440b      	add	r3, r1
 8009fd8:	3324      	adds	r3, #36	; 0x24
 8009fda:	2201      	movs	r2, #1
 8009fdc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009fec:	687a      	ldr	r2, [r7, #4]
 8009fee:	33b0      	adds	r3, #176	; 0xb0
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	4413      	add	r3, r2
 8009ff4:	685b      	ldr	r3, [r3, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2200      	movs	r2, #0
 8009ffe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2200      	movs	r2, #0
 800a006:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a010:	2b00      	cmp	r3, #0
 800a012:	d101      	bne.n	800a018 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a014:	2302      	movs	r3, #2
 800a016:	e018      	b.n	800a04a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	7c1b      	ldrb	r3, [r3, #16]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10a      	bne.n	800a036 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a020:	4b0d      	ldr	r3, [pc, #52]	; (800a058 <USBD_CDC_Init+0x1e8>)
 800a022:	7819      	ldrb	r1, [r3, #0]
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a02a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f002 fb2a 	bl	800c688 <USBD_LL_PrepareReceive>
 800a034:	e008      	b.n	800a048 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a036:	4b08      	ldr	r3, [pc, #32]	; (800a058 <USBD_CDC_Init+0x1e8>)
 800a038:	7819      	ldrb	r1, [r3, #0]
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a040:	2340      	movs	r3, #64	; 0x40
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f002 fb20 	bl	800c688 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a048:	2300      	movs	r3, #0
}
 800a04a:	4618      	mov	r0, r3
 800a04c:	3710      	adds	r7, #16
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	20000093 	.word	0x20000093
 800a058:	20000094 	.word	0x20000094
 800a05c:	20000095 	.word	0x20000095

0800a060 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b082      	sub	sp, #8
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
 800a068:	460b      	mov	r3, r1
 800a06a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a06c:	4b3a      	ldr	r3, [pc, #232]	; (800a158 <USBD_CDC_DeInit+0xf8>)
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	4619      	mov	r1, r3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f002 fa3f 	bl	800c4f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a078:	4b37      	ldr	r3, [pc, #220]	; (800a158 <USBD_CDC_DeInit+0xf8>)
 800a07a:	781b      	ldrb	r3, [r3, #0]
 800a07c:	f003 020f 	and.w	r2, r3, #15
 800a080:	6879      	ldr	r1, [r7, #4]
 800a082:	4613      	mov	r3, r2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	440b      	add	r3, r1
 800a08c:	3324      	adds	r3, #36	; 0x24
 800a08e:	2200      	movs	r2, #0
 800a090:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a092:	4b32      	ldr	r3, [pc, #200]	; (800a15c <USBD_CDC_DeInit+0xfc>)
 800a094:	781b      	ldrb	r3, [r3, #0]
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f002 fa2c 	bl	800c4f6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a09e:	4b2f      	ldr	r3, [pc, #188]	; (800a15c <USBD_CDC_DeInit+0xfc>)
 800a0a0:	781b      	ldrb	r3, [r3, #0]
 800a0a2:	f003 020f 	and.w	r2, r3, #15
 800a0a6:	6879      	ldr	r1, [r7, #4]
 800a0a8:	4613      	mov	r3, r2
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	009b      	lsls	r3, r3, #2
 800a0b0:	440b      	add	r3, r1
 800a0b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a0ba:	4b29      	ldr	r3, [pc, #164]	; (800a160 <USBD_CDC_DeInit+0x100>)
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f002 fa18 	bl	800c4f6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a0c6:	4b26      	ldr	r3, [pc, #152]	; (800a160 <USBD_CDC_DeInit+0x100>)
 800a0c8:	781b      	ldrb	r3, [r3, #0]
 800a0ca:	f003 020f 	and.w	r2, r3, #15
 800a0ce:	6879      	ldr	r1, [r7, #4]
 800a0d0:	4613      	mov	r3, r2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	009b      	lsls	r3, r3, #2
 800a0d8:	440b      	add	r3, r1
 800a0da:	3324      	adds	r3, #36	; 0x24
 800a0dc:	2200      	movs	r2, #0
 800a0de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a0e0:	4b1f      	ldr	r3, [pc, #124]	; (800a160 <USBD_CDC_DeInit+0x100>)
 800a0e2:	781b      	ldrb	r3, [r3, #0]
 800a0e4:	f003 020f 	and.w	r2, r3, #15
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	3326      	adds	r3, #38	; 0x26
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	32b0      	adds	r2, #176	; 0xb0
 800a104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d01f      	beq.n	800a14c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	33b0      	adds	r3, #176	; 0xb0
 800a116:	009b      	lsls	r3, r3, #2
 800a118:	4413      	add	r3, r2
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	32b0      	adds	r2, #176	; 0xb0
 800a12a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a12e:	4618      	mov	r0, r3
 800a130:	f002 faec 	bl	800c70c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	32b0      	adds	r2, #176	; 0xb0
 800a13e:	2100      	movs	r1, #0
 800a140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a14c:	2300      	movs	r3, #0
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3708      	adds	r7, #8
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20000093 	.word	0x20000093
 800a15c:	20000094 	.word	0x20000094
 800a160:	20000095 	.word	0x20000095

0800a164 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	32b0      	adds	r2, #176	; 0xb0
 800a178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a17e:	2300      	movs	r3, #0
 800a180:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a182:	2300      	movs	r3, #0
 800a184:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a186:	2300      	movs	r3, #0
 800a188:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d101      	bne.n	800a194 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a190:	2303      	movs	r3, #3
 800a192:	e0bf      	b.n	800a314 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d050      	beq.n	800a242 <USBD_CDC_Setup+0xde>
 800a1a0:	2b20      	cmp	r3, #32
 800a1a2:	f040 80af 	bne.w	800a304 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	88db      	ldrh	r3, [r3, #6]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d03a      	beq.n	800a224 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	b25b      	sxtb	r3, r3
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	da1b      	bge.n	800a1f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	33b0      	adds	r3, #176	; 0xb0
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4413      	add	r3, r2
 800a1c6:	685b      	ldr	r3, [r3, #4]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	683a      	ldr	r2, [r7, #0]
 800a1cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a1ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a1d0:	683a      	ldr	r2, [r7, #0]
 800a1d2:	88d2      	ldrh	r2, [r2, #6]
 800a1d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	88db      	ldrh	r3, [r3, #6]
 800a1da:	2b07      	cmp	r3, #7
 800a1dc:	bf28      	it	cs
 800a1de:	2307      	movcs	r3, #7
 800a1e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	89fa      	ldrh	r2, [r7, #14]
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f001 fd43 	bl	800bc74 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a1ee:	e090      	b.n	800a312 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	785a      	ldrb	r2, [r3, #1]
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	88db      	ldrh	r3, [r3, #6]
 800a1fe:	2b3f      	cmp	r3, #63	; 0x3f
 800a200:	d803      	bhi.n	800a20a <USBD_CDC_Setup+0xa6>
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	88db      	ldrh	r3, [r3, #6]
 800a206:	b2da      	uxtb	r2, r3
 800a208:	e000      	b.n	800a20c <USBD_CDC_Setup+0xa8>
 800a20a:	2240      	movs	r2, #64	; 0x40
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a212:	6939      	ldr	r1, [r7, #16]
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a21a:	461a      	mov	r2, r3
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	f001 fd55 	bl	800bccc <USBD_CtlPrepareRx>
      break;
 800a222:	e076      	b.n	800a312 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	33b0      	adds	r3, #176	; 0xb0
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	4413      	add	r3, r2
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	689b      	ldr	r3, [r3, #8]
 800a236:	683a      	ldr	r2, [r7, #0]
 800a238:	7850      	ldrb	r0, [r2, #1]
 800a23a:	2200      	movs	r2, #0
 800a23c:	6839      	ldr	r1, [r7, #0]
 800a23e:	4798      	blx	r3
      break;
 800a240:	e067      	b.n	800a312 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	785b      	ldrb	r3, [r3, #1]
 800a246:	2b0b      	cmp	r3, #11
 800a248:	d851      	bhi.n	800a2ee <USBD_CDC_Setup+0x18a>
 800a24a:	a201      	add	r2, pc, #4	; (adr r2, 800a250 <USBD_CDC_Setup+0xec>)
 800a24c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a250:	0800a281 	.word	0x0800a281
 800a254:	0800a2fd 	.word	0x0800a2fd
 800a258:	0800a2ef 	.word	0x0800a2ef
 800a25c:	0800a2ef 	.word	0x0800a2ef
 800a260:	0800a2ef 	.word	0x0800a2ef
 800a264:	0800a2ef 	.word	0x0800a2ef
 800a268:	0800a2ef 	.word	0x0800a2ef
 800a26c:	0800a2ef 	.word	0x0800a2ef
 800a270:	0800a2ef 	.word	0x0800a2ef
 800a274:	0800a2ef 	.word	0x0800a2ef
 800a278:	0800a2ab 	.word	0x0800a2ab
 800a27c:	0800a2d5 	.word	0x0800a2d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a286:	b2db      	uxtb	r3, r3
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d107      	bne.n	800a29c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a28c:	f107 030a 	add.w	r3, r7, #10
 800a290:	2202      	movs	r2, #2
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f001 fced 	bl	800bc74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a29a:	e032      	b.n	800a302 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a29c:	6839      	ldr	r1, [r7, #0]
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f001 fc77 	bl	800bb92 <USBD_CtlError>
            ret = USBD_FAIL;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	75fb      	strb	r3, [r7, #23]
          break;
 800a2a8:	e02b      	b.n	800a302 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b0:	b2db      	uxtb	r3, r3
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d107      	bne.n	800a2c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a2b6:	f107 030d 	add.w	r3, r7, #13
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	4619      	mov	r1, r3
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f001 fcd8 	bl	800bc74 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a2c4:	e01d      	b.n	800a302 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a2c6:	6839      	ldr	r1, [r7, #0]
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f001 fc62 	bl	800bb92 <USBD_CtlError>
            ret = USBD_FAIL;
 800a2ce:	2303      	movs	r3, #3
 800a2d0:	75fb      	strb	r3, [r7, #23]
          break;
 800a2d2:	e016      	b.n	800a302 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2da:	b2db      	uxtb	r3, r3
 800a2dc:	2b03      	cmp	r3, #3
 800a2de:	d00f      	beq.n	800a300 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f001 fc55 	bl	800bb92 <USBD_CtlError>
            ret = USBD_FAIL;
 800a2e8:	2303      	movs	r3, #3
 800a2ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a2ec:	e008      	b.n	800a300 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 fc4e 	bl	800bb92 <USBD_CtlError>
          ret = USBD_FAIL;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	75fb      	strb	r3, [r7, #23]
          break;
 800a2fa:	e002      	b.n	800a302 <USBD_CDC_Setup+0x19e>
          break;
 800a2fc:	bf00      	nop
 800a2fe:	e008      	b.n	800a312 <USBD_CDC_Setup+0x1ae>
          break;
 800a300:	bf00      	nop
      }
      break;
 800a302:	e006      	b.n	800a312 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a304:	6839      	ldr	r1, [r7, #0]
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f001 fc43 	bl	800bb92 <USBD_CtlError>
      ret = USBD_FAIL;
 800a30c:	2303      	movs	r3, #3
 800a30e:	75fb      	strb	r3, [r7, #23]
      break;
 800a310:	bf00      	nop
  }

  return (uint8_t)ret;
 800a312:	7dfb      	ldrb	r3, [r7, #23]
}
 800a314:	4618      	mov	r0, r3
 800a316:	3718      	adds	r7, #24
 800a318:	46bd      	mov	sp, r7
 800a31a:	bd80      	pop	{r7, pc}

0800a31c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b084      	sub	sp, #16
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	460b      	mov	r3, r1
 800a326:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a32e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	32b0      	adds	r2, #176	; 0xb0
 800a33a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d101      	bne.n	800a346 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a342:	2303      	movs	r3, #3
 800a344:	e065      	b.n	800a412 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	32b0      	adds	r2, #176	; 0xb0
 800a350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a354:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a356:	78fb      	ldrb	r3, [r7, #3]
 800a358:	f003 020f 	and.w	r2, r3, #15
 800a35c:	6879      	ldr	r1, [r7, #4]
 800a35e:	4613      	mov	r3, r2
 800a360:	009b      	lsls	r3, r3, #2
 800a362:	4413      	add	r3, r2
 800a364:	009b      	lsls	r3, r3, #2
 800a366:	440b      	add	r3, r1
 800a368:	3318      	adds	r3, #24
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d02f      	beq.n	800a3d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a370:	78fb      	ldrb	r3, [r7, #3]
 800a372:	f003 020f 	and.w	r2, r3, #15
 800a376:	6879      	ldr	r1, [r7, #4]
 800a378:	4613      	mov	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	440b      	add	r3, r1
 800a382:	3318      	adds	r3, #24
 800a384:	681a      	ldr	r2, [r3, #0]
 800a386:	78fb      	ldrb	r3, [r7, #3]
 800a388:	f003 010f 	and.w	r1, r3, #15
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	460b      	mov	r3, r1
 800a390:	00db      	lsls	r3, r3, #3
 800a392:	440b      	add	r3, r1
 800a394:	009b      	lsls	r3, r3, #2
 800a396:	4403      	add	r3, r0
 800a398:	3348      	adds	r3, #72	; 0x48
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a3a0:	fb01 f303 	mul.w	r3, r1, r3
 800a3a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d112      	bne.n	800a3d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a3aa:	78fb      	ldrb	r3, [r7, #3]
 800a3ac:	f003 020f 	and.w	r2, r3, #15
 800a3b0:	6879      	ldr	r1, [r7, #4]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	009b      	lsls	r3, r3, #2
 800a3ba:	440b      	add	r3, r1
 800a3bc:	3318      	adds	r3, #24
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a3c2:	78f9      	ldrb	r1, [r7, #3]
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	6878      	ldr	r0, [r7, #4]
 800a3ca:	f002 f93c 	bl	800c646 <USBD_LL_Transmit>
 800a3ce:	e01f      	b.n	800a410 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3de:	687a      	ldr	r2, [r7, #4]
 800a3e0:	33b0      	adds	r3, #176	; 0xb0
 800a3e2:	009b      	lsls	r3, r3, #2
 800a3e4:	4413      	add	r3, r2
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d010      	beq.n	800a410 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	33b0      	adds	r3, #176	; 0xb0
 800a3f8:	009b      	lsls	r3, r3, #2
 800a3fa:	4413      	add	r3, r2
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	691b      	ldr	r3, [r3, #16]
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a40c:	78fa      	ldrb	r2, [r7, #3]
 800a40e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a410:	2300      	movs	r3, #0
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	460b      	mov	r3, r1
 800a424:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	32b0      	adds	r2, #176	; 0xb0
 800a430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a434:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	32b0      	adds	r2, #176	; 0xb0
 800a440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a448:	2303      	movs	r3, #3
 800a44a:	e01a      	b.n	800a482 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a44c:	78fb      	ldrb	r3, [r7, #3]
 800a44e:	4619      	mov	r1, r3
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f002 f93a 	bl	800c6ca <USBD_LL_GetRxDataSize>
 800a456:	4602      	mov	r2, r0
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a464:	687a      	ldr	r2, [r7, #4]
 800a466:	33b0      	adds	r3, #176	; 0xb0
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	68fa      	ldr	r2, [r7, #12]
 800a472:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a47c:	4611      	mov	r1, r2
 800a47e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	32b0      	adds	r2, #176	; 0xb0
 800a49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a4a8:	2303      	movs	r3, #3
 800a4aa:	e025      	b.n	800a4f8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4b2:	687a      	ldr	r2, [r7, #4]
 800a4b4:	33b0      	adds	r3, #176	; 0xb0
 800a4b6:	009b      	lsls	r3, r3, #2
 800a4b8:	4413      	add	r3, r2
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d01a      	beq.n	800a4f6 <USBD_CDC_EP0_RxReady+0x6c>
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a4c6:	2bff      	cmp	r3, #255	; 0xff
 800a4c8:	d015      	beq.n	800a4f6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a4d0:	687a      	ldr	r2, [r7, #4]
 800a4d2:	33b0      	adds	r3, #176	; 0xb0
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	68fa      	ldr	r2, [r7, #12]
 800a4de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a4e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a4e4:	68fa      	ldr	r2, [r7, #12]
 800a4e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a4ea:	b292      	uxth	r2, r2
 800a4ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	22ff      	movs	r2, #255	; 0xff
 800a4f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b086      	sub	sp, #24
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a508:	2182      	movs	r1, #130	; 0x82
 800a50a:	4818      	ldr	r0, [pc, #96]	; (800a56c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a50c:	f000 fd09 	bl	800af22 <USBD_GetEpDesc>
 800a510:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a512:	2101      	movs	r1, #1
 800a514:	4815      	ldr	r0, [pc, #84]	; (800a56c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a516:	f000 fd04 	bl	800af22 <USBD_GetEpDesc>
 800a51a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a51c:	2181      	movs	r1, #129	; 0x81
 800a51e:	4813      	ldr	r0, [pc, #76]	; (800a56c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a520:	f000 fcff 	bl	800af22 <USBD_GetEpDesc>
 800a524:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d002      	beq.n	800a532 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	2210      	movs	r2, #16
 800a530:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d006      	beq.n	800a546 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	2200      	movs	r2, #0
 800a53c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a540:	711a      	strb	r2, [r3, #4]
 800a542:	2200      	movs	r2, #0
 800a544:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d006      	beq.n	800a55a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a554:	711a      	strb	r2, [r3, #4]
 800a556:	2200      	movs	r2, #0
 800a558:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2243      	movs	r2, #67	; 0x43
 800a55e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a560:	4b02      	ldr	r3, [pc, #8]	; (800a56c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a562:	4618      	mov	r0, r3
 800a564:	3718      	adds	r7, #24
 800a566:	46bd      	mov	sp, r7
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	20000050 	.word	0x20000050

0800a570 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b086      	sub	sp, #24
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a578:	2182      	movs	r1, #130	; 0x82
 800a57a:	4818      	ldr	r0, [pc, #96]	; (800a5dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a57c:	f000 fcd1 	bl	800af22 <USBD_GetEpDesc>
 800a580:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a582:	2101      	movs	r1, #1
 800a584:	4815      	ldr	r0, [pc, #84]	; (800a5dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a586:	f000 fccc 	bl	800af22 <USBD_GetEpDesc>
 800a58a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a58c:	2181      	movs	r1, #129	; 0x81
 800a58e:	4813      	ldr	r0, [pc, #76]	; (800a5dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a590:	f000 fcc7 	bl	800af22 <USBD_GetEpDesc>
 800a594:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a596:	697b      	ldr	r3, [r7, #20]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d002      	beq.n	800a5a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	2210      	movs	r2, #16
 800a5a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d006      	beq.n	800a5b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	711a      	strb	r2, [r3, #4]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	f042 0202 	orr.w	r2, r2, #2
 800a5b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d006      	beq.n	800a5ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2200      	movs	r2, #0
 800a5c0:	711a      	strb	r2, [r3, #4]
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	f042 0202 	orr.w	r2, r2, #2
 800a5c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2243      	movs	r2, #67	; 0x43
 800a5ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a5d0:	4b02      	ldr	r3, [pc, #8]	; (800a5dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3718      	adds	r7, #24
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000050 	.word	0x20000050

0800a5e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b086      	sub	sp, #24
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a5e8:	2182      	movs	r1, #130	; 0x82
 800a5ea:	4818      	ldr	r0, [pc, #96]	; (800a64c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a5ec:	f000 fc99 	bl	800af22 <USBD_GetEpDesc>
 800a5f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a5f2:	2101      	movs	r1, #1
 800a5f4:	4815      	ldr	r0, [pc, #84]	; (800a64c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a5f6:	f000 fc94 	bl	800af22 <USBD_GetEpDesc>
 800a5fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a5fc:	2181      	movs	r1, #129	; 0x81
 800a5fe:	4813      	ldr	r0, [pc, #76]	; (800a64c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a600:	f000 fc8f 	bl	800af22 <USBD_GetEpDesc>
 800a604:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	2210      	movs	r2, #16
 800a610:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	2b00      	cmp	r3, #0
 800a616:	d006      	beq.n	800a626 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a620:	711a      	strb	r2, [r3, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d006      	beq.n	800a63a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a634:	711a      	strb	r2, [r3, #4]
 800a636:	2200      	movs	r2, #0
 800a638:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2243      	movs	r2, #67	; 0x43
 800a63e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a640:	4b02      	ldr	r3, [pc, #8]	; (800a64c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a642:	4618      	mov	r0, r3
 800a644:	3718      	adds	r7, #24
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20000050 	.word	0x20000050

0800a650 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	220a      	movs	r2, #10
 800a65c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a65e:	4b03      	ldr	r3, [pc, #12]	; (800a66c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a660:	4618      	mov	r0, r3
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr
 800a66c:	2000000c 	.word	0x2000000c

0800a670 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a670:	b480      	push	{r7}
 800a672:	b083      	sub	sp, #12
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
 800a678:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d101      	bne.n	800a684 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a680:	2303      	movs	r3, #3
 800a682:	e009      	b.n	800a698 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a68a:	687a      	ldr	r2, [r7, #4]
 800a68c:	33b0      	adds	r3, #176	; 0xb0
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	4413      	add	r3, r2
 800a692:	683a      	ldr	r2, [r7, #0]
 800a694:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a696:	2300      	movs	r3, #0
}
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b087      	sub	sp, #28
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	32b0      	adds	r2, #176	; 0xb0
 800a6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6be:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d101      	bne.n	800a6ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e008      	b.n	800a6dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a6ca:	697b      	ldr	r3, [r7, #20]
 800a6cc:	68ba      	ldr	r2, [r7, #8]
 800a6ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	371c      	adds	r7, #28
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e6:	4770      	bx	lr

0800a6e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	32b0      	adds	r2, #176	; 0xb0
 800a6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a700:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d101      	bne.n	800a70c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a708:	2303      	movs	r3, #3
 800a70a:	e004      	b.n	800a716 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	683a      	ldr	r2, [r7, #0]
 800a710:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a714:	2300      	movs	r3, #0
}
 800a716:	4618      	mov	r0, r3
 800a718:	3714      	adds	r7, #20
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
	...

0800a724 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	32b0      	adds	r2, #176	; 0xb0
 800a736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a73a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	32b0      	adds	r2, #176	; 0xb0
 800a746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d101      	bne.n	800a752 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a74e:	2303      	movs	r3, #3
 800a750:	e018      	b.n	800a784 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	7c1b      	ldrb	r3, [r3, #16]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d10a      	bne.n	800a770 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a75a:	4b0c      	ldr	r3, [pc, #48]	; (800a78c <USBD_CDC_ReceivePacket+0x68>)
 800a75c:	7819      	ldrb	r1, [r3, #0]
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a764:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f001 ff8d 	bl	800c688 <USBD_LL_PrepareReceive>
 800a76e:	e008      	b.n	800a782 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a770:	4b06      	ldr	r3, [pc, #24]	; (800a78c <USBD_CDC_ReceivePacket+0x68>)
 800a772:	7819      	ldrb	r1, [r3, #0]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a77a:	2340      	movs	r3, #64	; 0x40
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f001 ff83 	bl	800c688 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	20000094 	.word	0x20000094

0800a790 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af00      	add	r7, sp, #0
 800a796:	60f8      	str	r0, [r7, #12]
 800a798:	60b9      	str	r1, [r7, #8]
 800a79a:	4613      	mov	r3, r2
 800a79c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d101      	bne.n	800a7a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	e01f      	b.n	800a7e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d003      	beq.n	800a7ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	68ba      	ldr	r2, [r7, #8]
 800a7ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	2201      	movs	r2, #1
 800a7d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	79fa      	ldrb	r2, [r7, #7]
 800a7da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a7dc:	68f8      	ldr	r0, [r7, #12]
 800a7de:	f001 fdfd 	bl	800c3dc <USBD_LL_Init>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d101      	bne.n	800a808 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a804:	2303      	movs	r3, #3
 800a806:	e025      	b.n	800a854 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	32ae      	adds	r2, #174	; 0xae
 800a81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a820:	2b00      	cmp	r3, #0
 800a822:	d00f      	beq.n	800a844 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	32ae      	adds	r2, #174	; 0xae
 800a82e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a834:	f107 020e 	add.w	r2, r7, #14
 800a838:	4610      	mov	r0, r2
 800a83a:	4798      	blx	r3
 800a83c:	4602      	mov	r2, r0
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a84a:	1c5a      	adds	r2, r3, #1
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a852:	2300      	movs	r3, #0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3710      	adds	r7, #16
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f001 fe05 	bl	800c474 <USBD_LL_Start>
 800a86a:	4603      	mov	r3, r0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3708      	adds	r7, #8
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}

0800a874 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a87c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a87e:	4618      	mov	r0, r3
 800a880:	370c      	adds	r7, #12
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b084      	sub	sp, #16
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
 800a892:	460b      	mov	r3, r1
 800a894:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a896:	2300      	movs	r3, #0
 800a898:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d009      	beq.n	800a8b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	78fa      	ldrb	r2, [r7, #3]
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	6878      	ldr	r0, [r7, #4]
 800a8b2:	4798      	blx	r3
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a8b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}

0800a8c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8c2:	b580      	push	{r7, lr}
 800a8c4:	b084      	sub	sp, #16
 800a8c6:	af00      	add	r7, sp, #0
 800a8c8:	6078      	str	r0, [r7, #4]
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	78fa      	ldrb	r2, [r7, #3]
 800a8dc:	4611      	mov	r1, r2
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	4798      	blx	r3
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d001      	beq.n	800a8ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a8e8:	2303      	movs	r3, #3
 800a8ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}

0800a8f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a8f6:	b580      	push	{r7, lr}
 800a8f8:	b084      	sub	sp, #16
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
 800a8fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a906:	6839      	ldr	r1, [r7, #0]
 800a908:	4618      	mov	r0, r3
 800a90a:	f001 f908 	bl	800bb1e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2201      	movs	r2, #1
 800a912:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a91c:	461a      	mov	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a92a:	f003 031f 	and.w	r3, r3, #31
 800a92e:	2b02      	cmp	r3, #2
 800a930:	d01a      	beq.n	800a968 <USBD_LL_SetupStage+0x72>
 800a932:	2b02      	cmp	r3, #2
 800a934:	d822      	bhi.n	800a97c <USBD_LL_SetupStage+0x86>
 800a936:	2b00      	cmp	r3, #0
 800a938:	d002      	beq.n	800a940 <USBD_LL_SetupStage+0x4a>
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d00a      	beq.n	800a954 <USBD_LL_SetupStage+0x5e>
 800a93e:	e01d      	b.n	800a97c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fb5f 	bl	800b00c <USBD_StdDevReq>
 800a94e:	4603      	mov	r3, r0
 800a950:	73fb      	strb	r3, [r7, #15]
      break;
 800a952:	e020      	b.n	800a996 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a95a:	4619      	mov	r1, r3
 800a95c:	6878      	ldr	r0, [r7, #4]
 800a95e:	f000 fbc7 	bl	800b0f0 <USBD_StdItfReq>
 800a962:	4603      	mov	r3, r0
 800a964:	73fb      	strb	r3, [r7, #15]
      break;
 800a966:	e016      	b.n	800a996 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 fc29 	bl	800b1c8 <USBD_StdEPReq>
 800a976:	4603      	mov	r3, r0
 800a978:	73fb      	strb	r3, [r7, #15]
      break;
 800a97a:	e00c      	b.n	800a996 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a982:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a986:	b2db      	uxtb	r3, r3
 800a988:	4619      	mov	r1, r3
 800a98a:	6878      	ldr	r0, [r7, #4]
 800a98c:	f001 fdd2 	bl	800c534 <USBD_LL_StallEP>
 800a990:	4603      	mov	r3, r0
 800a992:	73fb      	strb	r3, [r7, #15]
      break;
 800a994:	bf00      	nop
  }

  return ret;
 800a996:	7bfb      	ldrb	r3, [r7, #15]
}
 800a998:	4618      	mov	r0, r3
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bd80      	pop	{r7, pc}

0800a9a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b086      	sub	sp, #24
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	460b      	mov	r3, r1
 800a9aa:	607a      	str	r2, [r7, #4]
 800a9ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a9b2:	7afb      	ldrb	r3, [r7, #11]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d16e      	bne.n	800aa96 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a9be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	f040 8098 	bne.w	800aafc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	689a      	ldr	r2, [r3, #8]
 800a9d0:	693b      	ldr	r3, [r7, #16]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d913      	bls.n	800aa00 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a9d8:	693b      	ldr	r3, [r7, #16]
 800a9da:	689a      	ldr	r2, [r3, #8]
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	1ad2      	subs	r2, r2, r3
 800a9e2:	693b      	ldr	r3, [r7, #16]
 800a9e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a9e6:	693b      	ldr	r3, [r7, #16]
 800a9e8:	68da      	ldr	r2, [r3, #12]
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	689b      	ldr	r3, [r3, #8]
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	bf28      	it	cs
 800a9f2:	4613      	movcs	r3, r2
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	6879      	ldr	r1, [r7, #4]
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f001 f984 	bl	800bd06 <USBD_CtlContinueRx>
 800a9fe:	e07d      	b.n	800aafc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa06:	f003 031f 	and.w	r3, r3, #31
 800aa0a:	2b02      	cmp	r3, #2
 800aa0c:	d014      	beq.n	800aa38 <USBD_LL_DataOutStage+0x98>
 800aa0e:	2b02      	cmp	r3, #2
 800aa10:	d81d      	bhi.n	800aa4e <USBD_LL_DataOutStage+0xae>
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d002      	beq.n	800aa1c <USBD_LL_DataOutStage+0x7c>
 800aa16:	2b01      	cmp	r3, #1
 800aa18:	d003      	beq.n	800aa22 <USBD_LL_DataOutStage+0x82>
 800aa1a:	e018      	b.n	800aa4e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	75bb      	strb	r3, [r7, #22]
            break;
 800aa20:	e018      	b.n	800aa54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	68f8      	ldr	r0, [r7, #12]
 800aa2e:	f000 fa5e 	bl	800aeee <USBD_CoreFindIF>
 800aa32:	4603      	mov	r3, r0
 800aa34:	75bb      	strb	r3, [r7, #22]
            break;
 800aa36:	e00d      	b.n	800aa54 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aa3e:	b2db      	uxtb	r3, r3
 800aa40:	4619      	mov	r1, r3
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f000 fa60 	bl	800af08 <USBD_CoreFindEP>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	75bb      	strb	r3, [r7, #22]
            break;
 800aa4c:	e002      	b.n	800aa54 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aa4e:	2300      	movs	r3, #0
 800aa50:	75bb      	strb	r3, [r7, #22]
            break;
 800aa52:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aa54:	7dbb      	ldrb	r3, [r7, #22]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d119      	bne.n	800aa8e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa60:	b2db      	uxtb	r3, r3
 800aa62:	2b03      	cmp	r3, #3
 800aa64:	d113      	bne.n	800aa8e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aa66:	7dba      	ldrb	r2, [r7, #22]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	32ae      	adds	r2, #174	; 0xae
 800aa6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa70:	691b      	ldr	r3, [r3, #16]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d00b      	beq.n	800aa8e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aa76:	7dba      	ldrb	r2, [r7, #22]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aa7e:	7dba      	ldrb	r2, [r7, #22]
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	32ae      	adds	r2, #174	; 0xae
 800aa84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa88:	691b      	ldr	r3, [r3, #16]
 800aa8a:	68f8      	ldr	r0, [r7, #12]
 800aa8c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f001 f94a 	bl	800bd28 <USBD_CtlSendStatus>
 800aa94:	e032      	b.n	800aafc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800aa96:	7afb      	ldrb	r3, [r7, #11]
 800aa98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f000 fa31 	bl	800af08 <USBD_CoreFindEP>
 800aaa6:	4603      	mov	r3, r0
 800aaa8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aaaa:	7dbb      	ldrb	r3, [r7, #22]
 800aaac:	2bff      	cmp	r3, #255	; 0xff
 800aaae:	d025      	beq.n	800aafc <USBD_LL_DataOutStage+0x15c>
 800aab0:	7dbb      	ldrb	r3, [r7, #22]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d122      	bne.n	800aafc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d117      	bne.n	800aaf2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800aac2:	7dba      	ldrb	r2, [r7, #22]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	32ae      	adds	r2, #174	; 0xae
 800aac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d00f      	beq.n	800aaf2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800aad2:	7dba      	ldrb	r2, [r7, #22]
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800aada:	7dba      	ldrb	r2, [r7, #22]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	32ae      	adds	r2, #174	; 0xae
 800aae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	7afa      	ldrb	r2, [r7, #11]
 800aae8:	4611      	mov	r1, r2
 800aaea:	68f8      	ldr	r0, [r7, #12]
 800aaec:	4798      	blx	r3
 800aaee:	4603      	mov	r3, r0
 800aaf0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800aaf2:	7dfb      	ldrb	r3, [r7, #23]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800aaf8:	7dfb      	ldrb	r3, [r7, #23]
 800aafa:	e000      	b.n	800aafe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800aafc:	2300      	movs	r3, #0
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3718      	adds	r7, #24
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}

0800ab06 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab06:	b580      	push	{r7, lr}
 800ab08:	b086      	sub	sp, #24
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	60f8      	str	r0, [r7, #12]
 800ab0e:	460b      	mov	r3, r1
 800ab10:	607a      	str	r2, [r7, #4]
 800ab12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ab14:	7afb      	ldrb	r3, [r7, #11]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d16f      	bne.n	800abfa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	3314      	adds	r3, #20
 800ab1e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d15a      	bne.n	800abe0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	689a      	ldr	r2, [r3, #8]
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	68db      	ldr	r3, [r3, #12]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	d914      	bls.n	800ab60 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	689a      	ldr	r2, [r3, #8]
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	68db      	ldr	r3, [r3, #12]
 800ab3e:	1ad2      	subs	r2, r2, r3
 800ab40:	693b      	ldr	r3, [r7, #16]
 800ab42:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	689b      	ldr	r3, [r3, #8]
 800ab48:	461a      	mov	r2, r3
 800ab4a:	6879      	ldr	r1, [r7, #4]
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f001 f8ac 	bl	800bcaa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab52:	2300      	movs	r3, #0
 800ab54:	2200      	movs	r2, #0
 800ab56:	2100      	movs	r1, #0
 800ab58:	68f8      	ldr	r0, [r7, #12]
 800ab5a:	f001 fd95 	bl	800c688 <USBD_LL_PrepareReceive>
 800ab5e:	e03f      	b.n	800abe0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	68da      	ldr	r2, [r3, #12]
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	689b      	ldr	r3, [r3, #8]
 800ab68:	429a      	cmp	r2, r3
 800ab6a:	d11c      	bne.n	800aba6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	685a      	ldr	r2, [r3, #4]
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d316      	bcc.n	800aba6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	685a      	ldr	r2, [r3, #4]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d20f      	bcs.n	800aba6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ab86:	2200      	movs	r2, #0
 800ab88:	2100      	movs	r1, #0
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f001 f88d 	bl	800bcaa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab98:	2300      	movs	r3, #0
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	2100      	movs	r1, #0
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f001 fd72 	bl	800c688 <USBD_LL_PrepareReceive>
 800aba4:	e01c      	b.n	800abe0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abac:	b2db      	uxtb	r3, r3
 800abae:	2b03      	cmp	r3, #3
 800abb0:	d10f      	bne.n	800abd2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abb8:	68db      	ldr	r3, [r3, #12]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d009      	beq.n	800abd2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	2200      	movs	r2, #0
 800abc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abcc:	68db      	ldr	r3, [r3, #12]
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800abd2:	2180      	movs	r1, #128	; 0x80
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f001 fcad 	bl	800c534 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800abda:	68f8      	ldr	r0, [r7, #12]
 800abdc:	f001 f8b7 	bl	800bd4e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d03a      	beq.n	800ac60 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800abea:	68f8      	ldr	r0, [r7, #12]
 800abec:	f7ff fe42 	bl	800a874 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800abf8:	e032      	b.n	800ac60 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800abfa:	7afb      	ldrb	r3, [r7, #11]
 800abfc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	4619      	mov	r1, r3
 800ac04:	68f8      	ldr	r0, [r7, #12]
 800ac06:	f000 f97f 	bl	800af08 <USBD_CoreFindEP>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac0e:	7dfb      	ldrb	r3, [r7, #23]
 800ac10:	2bff      	cmp	r3, #255	; 0xff
 800ac12:	d025      	beq.n	800ac60 <USBD_LL_DataInStage+0x15a>
 800ac14:	7dfb      	ldrb	r3, [r7, #23]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d122      	bne.n	800ac60 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac20:	b2db      	uxtb	r3, r3
 800ac22:	2b03      	cmp	r3, #3
 800ac24:	d11c      	bne.n	800ac60 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ac26:	7dfa      	ldrb	r2, [r7, #23]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	32ae      	adds	r2, #174	; 0xae
 800ac2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d014      	beq.n	800ac60 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ac36:	7dfa      	ldrb	r2, [r7, #23]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ac3e:	7dfa      	ldrb	r2, [r7, #23]
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	32ae      	adds	r2, #174	; 0xae
 800ac44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac48:	695b      	ldr	r3, [r3, #20]
 800ac4a:	7afa      	ldrb	r2, [r7, #11]
 800ac4c:	4611      	mov	r1, r2
 800ac4e:	68f8      	ldr	r0, [r7, #12]
 800ac50:	4798      	blx	r3
 800ac52:	4603      	mov	r3, r0
 800ac54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ac56:	7dbb      	ldrb	r3, [r7, #22]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ac5c:	7dbb      	ldrb	r3, [r7, #22]
 800ac5e:	e000      	b.n	800ac62 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ac60:	2300      	movs	r3, #0
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3718      	adds	r7, #24
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b084      	sub	sp, #16
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac72:	2300      	movs	r3, #0
 800ac74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2201      	movs	r2, #1
 800ac7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d014      	beq.n	800acd0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d00e      	beq.n	800acd0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acb8:	685b      	ldr	r3, [r3, #4]
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	6852      	ldr	r2, [r2, #4]
 800acbe:	b2d2      	uxtb	r2, r2
 800acc0:	4611      	mov	r1, r2
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	4798      	blx	r3
 800acc6:	4603      	mov	r3, r0
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d001      	beq.n	800acd0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800accc:	2303      	movs	r3, #3
 800acce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acd0:	2340      	movs	r3, #64	; 0x40
 800acd2:	2200      	movs	r2, #0
 800acd4:	2100      	movs	r1, #0
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f001 fbe7 	bl	800c4aa <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2240      	movs	r2, #64	; 0x40
 800ace8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800acec:	2340      	movs	r3, #64	; 0x40
 800acee:	2200      	movs	r2, #0
 800acf0:	2180      	movs	r1, #128	; 0x80
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f001 fbd9 	bl	800c4aa <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2201      	movs	r2, #1
 800acfc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2240      	movs	r2, #64	; 0x40
 800ad02:	621a      	str	r2, [r3, #32]

  return ret;
 800ad04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3710      	adds	r7, #16
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}

0800ad0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b083      	sub	sp, #12
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	460b      	mov	r3, r1
 800ad18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	78fa      	ldrb	r2, [r7, #3]
 800ad1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	370c      	adds	r7, #12
 800ad26:	46bd      	mov	sp, r7
 800ad28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2c:	4770      	bx	lr

0800ad2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad2e:	b480      	push	{r7}
 800ad30:	b083      	sub	sp, #12
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	2204      	movs	r2, #4
 800ad48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	370c      	adds	r7, #12
 800ad52:	46bd      	mov	sp, r7
 800ad54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad58:	4770      	bx	lr

0800ad5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad5a:	b480      	push	{r7}
 800ad5c:	b083      	sub	sp, #12
 800ad5e:	af00      	add	r7, sp, #0
 800ad60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	2b04      	cmp	r3, #4
 800ad6c:	d106      	bne.n	800ad7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ad74:	b2da      	uxtb	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	370c      	adds	r7, #12
 800ad82:	46bd      	mov	sp, r7
 800ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad88:	4770      	bx	lr

0800ad8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	b082      	sub	sp, #8
 800ad8e:	af00      	add	r7, sp, #0
 800ad90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d110      	bne.n	800adc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00b      	beq.n	800adc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adae:	69db      	ldr	r3, [r3, #28]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d005      	beq.n	800adc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	460b      	mov	r3, r1
 800add4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	32ae      	adds	r2, #174	; 0xae
 800ade0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ade8:	2303      	movs	r3, #3
 800adea:	e01c      	b.n	800ae26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	2b03      	cmp	r3, #3
 800adf6:	d115      	bne.n	800ae24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	32ae      	adds	r2, #174	; 0xae
 800ae02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae06:	6a1b      	ldr	r3, [r3, #32]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00b      	beq.n	800ae24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	32ae      	adds	r2, #174	; 0xae
 800ae16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae1a:	6a1b      	ldr	r3, [r3, #32]
 800ae1c:	78fa      	ldrb	r2, [r7, #3]
 800ae1e:	4611      	mov	r1, r2
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}

0800ae2e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ae2e:	b580      	push	{r7, lr}
 800ae30:	b082      	sub	sp, #8
 800ae32:	af00      	add	r7, sp, #0
 800ae34:	6078      	str	r0, [r7, #4]
 800ae36:	460b      	mov	r3, r1
 800ae38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	32ae      	adds	r2, #174	; 0xae
 800ae44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d101      	bne.n	800ae50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ae4c:	2303      	movs	r3, #3
 800ae4e:	e01c      	b.n	800ae8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2b03      	cmp	r3, #3
 800ae5a:	d115      	bne.n	800ae88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	32ae      	adds	r2, #174	; 0xae
 800ae66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00b      	beq.n	800ae88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	32ae      	adds	r2, #174	; 0xae
 800ae7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae80:	78fa      	ldrb	r2, [r7, #3]
 800ae82:	4611      	mov	r1, r2
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae88:	2300      	movs	r3, #0
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	3708      	adds	r7, #8
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	bd80      	pop	{r7, pc}

0800ae92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b083      	sub	sp, #12
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b084      	sub	sp, #16
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d00e      	beq.n	800aee4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	6852      	ldr	r2, [r2, #4]
 800aed2:	b2d2      	uxtb	r2, r2
 800aed4:	4611      	mov	r1, r2
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	4798      	blx	r3
 800aeda:	4603      	mov	r3, r0
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d001      	beq.n	800aee4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800aee0:	2303      	movs	r3, #3
 800aee2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3710      	adds	r7, #16
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bd80      	pop	{r7, pc}

0800aeee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aeee:	b480      	push	{r7}
 800aef0:	b083      	sub	sp, #12
 800aef2:	af00      	add	r7, sp, #0
 800aef4:	6078      	str	r0, [r7, #4]
 800aef6:	460b      	mov	r3, r1
 800aef8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aefa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	370c      	adds	r7, #12
 800af00:	46bd      	mov	sp, r7
 800af02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af06:	4770      	bx	lr

0800af08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	460b      	mov	r3, r1
 800af12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800af14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af16:	4618      	mov	r0, r3
 800af18:	370c      	adds	r7, #12
 800af1a:	46bd      	mov	sp, r7
 800af1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af20:	4770      	bx	lr

0800af22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800af22:	b580      	push	{r7, lr}
 800af24:	b086      	sub	sp, #24
 800af26:	af00      	add	r7, sp, #0
 800af28:	6078      	str	r0, [r7, #4]
 800af2a:	460b      	mov	r3, r1
 800af2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800af36:	2300      	movs	r3, #0
 800af38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	885b      	ldrh	r3, [r3, #2]
 800af3e:	b29a      	uxth	r2, r3
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	b29b      	uxth	r3, r3
 800af46:	429a      	cmp	r2, r3
 800af48:	d920      	bls.n	800af8c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	b29b      	uxth	r3, r3
 800af50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800af52:	e013      	b.n	800af7c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800af54:	f107 030a 	add.w	r3, r7, #10
 800af58:	4619      	mov	r1, r3
 800af5a:	6978      	ldr	r0, [r7, #20]
 800af5c:	f000 f81b 	bl	800af96 <USBD_GetNextDesc>
 800af60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800af62:	697b      	ldr	r3, [r7, #20]
 800af64:	785b      	ldrb	r3, [r3, #1]
 800af66:	2b05      	cmp	r3, #5
 800af68:	d108      	bne.n	800af7c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	789b      	ldrb	r3, [r3, #2]
 800af72:	78fa      	ldrb	r2, [r7, #3]
 800af74:	429a      	cmp	r2, r3
 800af76:	d008      	beq.n	800af8a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800af78:	2300      	movs	r3, #0
 800af7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	885b      	ldrh	r3, [r3, #2]
 800af80:	b29a      	uxth	r2, r3
 800af82:	897b      	ldrh	r3, [r7, #10]
 800af84:	429a      	cmp	r2, r3
 800af86:	d8e5      	bhi.n	800af54 <USBD_GetEpDesc+0x32>
 800af88:	e000      	b.n	800af8c <USBD_GetEpDesc+0x6a>
          break;
 800af8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800af8c:	693b      	ldr	r3, [r7, #16]
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3718      	adds	r7, #24
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}

0800af96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800af96:	b480      	push	{r7}
 800af98:	b085      	sub	sp, #20
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	881a      	ldrh	r2, [r3, #0]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	b29b      	uxth	r3, r3
 800afae:	4413      	add	r3, r2
 800afb0:	b29a      	uxth	r2, r3
 800afb2:	683b      	ldr	r3, [r7, #0]
 800afb4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	781b      	ldrb	r3, [r3, #0]
 800afba:	461a      	mov	r2, r3
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4413      	add	r3, r2
 800afc0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800afc2:	68fb      	ldr	r3, [r7, #12]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr

0800afd0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b087      	sub	sp, #28
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	3301      	adds	r3, #1
 800afe6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800afee:	8a3b      	ldrh	r3, [r7, #16]
 800aff0:	021b      	lsls	r3, r3, #8
 800aff2:	b21a      	sxth	r2, r3
 800aff4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aff8:	4313      	orrs	r3, r2
 800affa:	b21b      	sxth	r3, r3
 800affc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800affe:	89fb      	ldrh	r3, [r7, #14]
}
 800b000:	4618      	mov	r0, r3
 800b002:	371c      	adds	r7, #28
 800b004:	46bd      	mov	sp, r7
 800b006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00a:	4770      	bx	lr

0800b00c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b084      	sub	sp, #16
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
 800b014:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b016:	2300      	movs	r3, #0
 800b018:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b022:	2b40      	cmp	r3, #64	; 0x40
 800b024:	d005      	beq.n	800b032 <USBD_StdDevReq+0x26>
 800b026:	2b40      	cmp	r3, #64	; 0x40
 800b028:	d857      	bhi.n	800b0da <USBD_StdDevReq+0xce>
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d00f      	beq.n	800b04e <USBD_StdDevReq+0x42>
 800b02e:	2b20      	cmp	r3, #32
 800b030:	d153      	bne.n	800b0da <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	32ae      	adds	r2, #174	; 0xae
 800b03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b040:	689b      	ldr	r3, [r3, #8]
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	4798      	blx	r3
 800b048:	4603      	mov	r3, r0
 800b04a:	73fb      	strb	r3, [r7, #15]
      break;
 800b04c:	e04a      	b.n	800b0e4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b04e:	683b      	ldr	r3, [r7, #0]
 800b050:	785b      	ldrb	r3, [r3, #1]
 800b052:	2b09      	cmp	r3, #9
 800b054:	d83b      	bhi.n	800b0ce <USBD_StdDevReq+0xc2>
 800b056:	a201      	add	r2, pc, #4	; (adr r2, 800b05c <USBD_StdDevReq+0x50>)
 800b058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b05c:	0800b0b1 	.word	0x0800b0b1
 800b060:	0800b0c5 	.word	0x0800b0c5
 800b064:	0800b0cf 	.word	0x0800b0cf
 800b068:	0800b0bb 	.word	0x0800b0bb
 800b06c:	0800b0cf 	.word	0x0800b0cf
 800b070:	0800b08f 	.word	0x0800b08f
 800b074:	0800b085 	.word	0x0800b085
 800b078:	0800b0cf 	.word	0x0800b0cf
 800b07c:	0800b0a7 	.word	0x0800b0a7
 800b080:	0800b099 	.word	0x0800b099
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 fa3c 	bl	800b504 <USBD_GetDescriptor>
          break;
 800b08c:	e024      	b.n	800b0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	f000 fba1 	bl	800b7d8 <USBD_SetAddress>
          break;
 800b096:	e01f      	b.n	800b0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	f000 fbe0 	bl	800b860 <USBD_SetConfig>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	73fb      	strb	r3, [r7, #15]
          break;
 800b0a4:	e018      	b.n	800b0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 fc83 	bl	800b9b4 <USBD_GetConfig>
          break;
 800b0ae:	e013      	b.n	800b0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 fcb4 	bl	800ba20 <USBD_GetStatus>
          break;
 800b0b8:	e00e      	b.n	800b0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b0ba:	6839      	ldr	r1, [r7, #0]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f000 fce3 	bl	800ba88 <USBD_SetFeature>
          break;
 800b0c2:	e009      	b.n	800b0d8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b0c4:	6839      	ldr	r1, [r7, #0]
 800b0c6:	6878      	ldr	r0, [r7, #4]
 800b0c8:	f000 fd07 	bl	800bada <USBD_ClrFeature>
          break;
 800b0cc:	e004      	b.n	800b0d8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b0ce:	6839      	ldr	r1, [r7, #0]
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f000 fd5e 	bl	800bb92 <USBD_CtlError>
          break;
 800b0d6:	bf00      	nop
      }
      break;
 800b0d8:	e004      	b.n	800b0e4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b0da:	6839      	ldr	r1, [r7, #0]
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f000 fd58 	bl	800bb92 <USBD_CtlError>
      break;
 800b0e2:	bf00      	nop
  }

  return ret;
 800b0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3710      	adds	r7, #16
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop

0800b0f0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f0:	b580      	push	{r7, lr}
 800b0f2:	b084      	sub	sp, #16
 800b0f4:	af00      	add	r7, sp, #0
 800b0f6:	6078      	str	r0, [r7, #4]
 800b0f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b106:	2b40      	cmp	r3, #64	; 0x40
 800b108:	d005      	beq.n	800b116 <USBD_StdItfReq+0x26>
 800b10a:	2b40      	cmp	r3, #64	; 0x40
 800b10c:	d852      	bhi.n	800b1b4 <USBD_StdItfReq+0xc4>
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <USBD_StdItfReq+0x26>
 800b112:	2b20      	cmp	r3, #32
 800b114:	d14e      	bne.n	800b1b4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11c:	b2db      	uxtb	r3, r3
 800b11e:	3b01      	subs	r3, #1
 800b120:	2b02      	cmp	r3, #2
 800b122:	d840      	bhi.n	800b1a6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	889b      	ldrh	r3, [r3, #4]
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d836      	bhi.n	800b19c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	889b      	ldrh	r3, [r3, #4]
 800b132:	b2db      	uxtb	r3, r3
 800b134:	4619      	mov	r1, r3
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7ff fed9 	bl	800aeee <USBD_CoreFindIF>
 800b13c:	4603      	mov	r3, r0
 800b13e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b140:	7bbb      	ldrb	r3, [r7, #14]
 800b142:	2bff      	cmp	r3, #255	; 0xff
 800b144:	d01d      	beq.n	800b182 <USBD_StdItfReq+0x92>
 800b146:	7bbb      	ldrb	r3, [r7, #14]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d11a      	bne.n	800b182 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b14c:	7bba      	ldrb	r2, [r7, #14]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	32ae      	adds	r2, #174	; 0xae
 800b152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b156:	689b      	ldr	r3, [r3, #8]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00f      	beq.n	800b17c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b15c:	7bba      	ldrb	r2, [r7, #14]
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b164:	7bba      	ldrb	r2, [r7, #14]
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	32ae      	adds	r2, #174	; 0xae
 800b16a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	6839      	ldr	r1, [r7, #0]
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	4798      	blx	r3
 800b176:	4603      	mov	r3, r0
 800b178:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b17a:	e004      	b.n	800b186 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b17c:	2303      	movs	r3, #3
 800b17e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b180:	e001      	b.n	800b186 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b182:	2303      	movs	r3, #3
 800b184:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b186:	683b      	ldr	r3, [r7, #0]
 800b188:	88db      	ldrh	r3, [r3, #6]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d110      	bne.n	800b1b0 <USBD_StdItfReq+0xc0>
 800b18e:	7bfb      	ldrb	r3, [r7, #15]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d10d      	bne.n	800b1b0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fdc7 	bl	800bd28 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b19a:	e009      	b.n	800b1b0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b19c:	6839      	ldr	r1, [r7, #0]
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fcf7 	bl	800bb92 <USBD_CtlError>
          break;
 800b1a4:	e004      	b.n	800b1b0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b1a6:	6839      	ldr	r1, [r7, #0]
 800b1a8:	6878      	ldr	r0, [r7, #4]
 800b1aa:	f000 fcf2 	bl	800bb92 <USBD_CtlError>
          break;
 800b1ae:	e000      	b.n	800b1b2 <USBD_StdItfReq+0xc2>
          break;
 800b1b0:	bf00      	nop
      }
      break;
 800b1b2:	e004      	b.n	800b1be <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fceb 	bl	800bb92 <USBD_CtlError>
      break;
 800b1bc:	bf00      	nop
  }

  return ret;
 800b1be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3710      	adds	r7, #16
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	889b      	ldrh	r3, [r3, #4]
 800b1da:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1e4:	2b40      	cmp	r3, #64	; 0x40
 800b1e6:	d007      	beq.n	800b1f8 <USBD_StdEPReq+0x30>
 800b1e8:	2b40      	cmp	r3, #64	; 0x40
 800b1ea:	f200 817f 	bhi.w	800b4ec <USBD_StdEPReq+0x324>
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d02a      	beq.n	800b248 <USBD_StdEPReq+0x80>
 800b1f2:	2b20      	cmp	r3, #32
 800b1f4:	f040 817a 	bne.w	800b4ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b1f8:	7bbb      	ldrb	r3, [r7, #14]
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f7ff fe83 	bl	800af08 <USBD_CoreFindEP>
 800b202:	4603      	mov	r3, r0
 800b204:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b206:	7b7b      	ldrb	r3, [r7, #13]
 800b208:	2bff      	cmp	r3, #255	; 0xff
 800b20a:	f000 8174 	beq.w	800b4f6 <USBD_StdEPReq+0x32e>
 800b20e:	7b7b      	ldrb	r3, [r7, #13]
 800b210:	2b00      	cmp	r3, #0
 800b212:	f040 8170 	bne.w	800b4f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b216:	7b7a      	ldrb	r2, [r7, #13]
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b21e:	7b7a      	ldrb	r2, [r7, #13]
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	32ae      	adds	r2, #174	; 0xae
 800b224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	f000 8163 	beq.w	800b4f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b230:	7b7a      	ldrb	r2, [r7, #13]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	32ae      	adds	r2, #174	; 0xae
 800b236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	4798      	blx	r3
 800b242:	4603      	mov	r3, r0
 800b244:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b246:	e156      	b.n	800b4f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	785b      	ldrb	r3, [r3, #1]
 800b24c:	2b03      	cmp	r3, #3
 800b24e:	d008      	beq.n	800b262 <USBD_StdEPReq+0x9a>
 800b250:	2b03      	cmp	r3, #3
 800b252:	f300 8145 	bgt.w	800b4e0 <USBD_StdEPReq+0x318>
 800b256:	2b00      	cmp	r3, #0
 800b258:	f000 809b 	beq.w	800b392 <USBD_StdEPReq+0x1ca>
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d03c      	beq.n	800b2da <USBD_StdEPReq+0x112>
 800b260:	e13e      	b.n	800b4e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d002      	beq.n	800b274 <USBD_StdEPReq+0xac>
 800b26e:	2b03      	cmp	r3, #3
 800b270:	d016      	beq.n	800b2a0 <USBD_StdEPReq+0xd8>
 800b272:	e02c      	b.n	800b2ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b274:	7bbb      	ldrb	r3, [r7, #14]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00d      	beq.n	800b296 <USBD_StdEPReq+0xce>
 800b27a:	7bbb      	ldrb	r3, [r7, #14]
 800b27c:	2b80      	cmp	r3, #128	; 0x80
 800b27e:	d00a      	beq.n	800b296 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b280:	7bbb      	ldrb	r3, [r7, #14]
 800b282:	4619      	mov	r1, r3
 800b284:	6878      	ldr	r0, [r7, #4]
 800b286:	f001 f955 	bl	800c534 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b28a:	2180      	movs	r1, #128	; 0x80
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	f001 f951 	bl	800c534 <USBD_LL_StallEP>
 800b292:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b294:	e020      	b.n	800b2d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b296:	6839      	ldr	r1, [r7, #0]
 800b298:	6878      	ldr	r0, [r7, #4]
 800b29a:	f000 fc7a 	bl	800bb92 <USBD_CtlError>
              break;
 800b29e:	e01b      	b.n	800b2d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	885b      	ldrh	r3, [r3, #2]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d10e      	bne.n	800b2c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b2a8:	7bbb      	ldrb	r3, [r7, #14]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d00b      	beq.n	800b2c6 <USBD_StdEPReq+0xfe>
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
 800b2b0:	2b80      	cmp	r3, #128	; 0x80
 800b2b2:	d008      	beq.n	800b2c6 <USBD_StdEPReq+0xfe>
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	88db      	ldrh	r3, [r3, #6]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d104      	bne.n	800b2c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2bc:	7bbb      	ldrb	r3, [r7, #14]
 800b2be:	4619      	mov	r1, r3
 800b2c0:	6878      	ldr	r0, [r7, #4]
 800b2c2:	f001 f937 	bl	800c534 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 fd2e 	bl	800bd28 <USBD_CtlSendStatus>

              break;
 800b2cc:	e004      	b.n	800b2d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b2ce:	6839      	ldr	r1, [r7, #0]
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f000 fc5e 	bl	800bb92 <USBD_CtlError>
              break;
 800b2d6:	bf00      	nop
          }
          break;
 800b2d8:	e107      	b.n	800b4ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d002      	beq.n	800b2ec <USBD_StdEPReq+0x124>
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d016      	beq.n	800b318 <USBD_StdEPReq+0x150>
 800b2ea:	e04b      	b.n	800b384 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2ec:	7bbb      	ldrb	r3, [r7, #14]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00d      	beq.n	800b30e <USBD_StdEPReq+0x146>
 800b2f2:	7bbb      	ldrb	r3, [r7, #14]
 800b2f4:	2b80      	cmp	r3, #128	; 0x80
 800b2f6:	d00a      	beq.n	800b30e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2f8:	7bbb      	ldrb	r3, [r7, #14]
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f001 f919 	bl	800c534 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b302:	2180      	movs	r1, #128	; 0x80
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f001 f915 	bl	800c534 <USBD_LL_StallEP>
 800b30a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b30c:	e040      	b.n	800b390 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b30e:	6839      	ldr	r1, [r7, #0]
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	f000 fc3e 	bl	800bb92 <USBD_CtlError>
              break;
 800b316:	e03b      	b.n	800b390 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	885b      	ldrh	r3, [r3, #2]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d136      	bne.n	800b38e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b320:	7bbb      	ldrb	r3, [r7, #14]
 800b322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b326:	2b00      	cmp	r3, #0
 800b328:	d004      	beq.n	800b334 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b32a:	7bbb      	ldrb	r3, [r7, #14]
 800b32c:	4619      	mov	r1, r3
 800b32e:	6878      	ldr	r0, [r7, #4]
 800b330:	f001 f91f 	bl	800c572 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fcf7 	bl	800bd28 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b33a:	7bbb      	ldrb	r3, [r7, #14]
 800b33c:	4619      	mov	r1, r3
 800b33e:	6878      	ldr	r0, [r7, #4]
 800b340:	f7ff fde2 	bl	800af08 <USBD_CoreFindEP>
 800b344:	4603      	mov	r3, r0
 800b346:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b348:	7b7b      	ldrb	r3, [r7, #13]
 800b34a:	2bff      	cmp	r3, #255	; 0xff
 800b34c:	d01f      	beq.n	800b38e <USBD_StdEPReq+0x1c6>
 800b34e:	7b7b      	ldrb	r3, [r7, #13]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d11c      	bne.n	800b38e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b354:	7b7a      	ldrb	r2, [r7, #13]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b35c:	7b7a      	ldrb	r2, [r7, #13]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	32ae      	adds	r2, #174	; 0xae
 800b362:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b366:	689b      	ldr	r3, [r3, #8]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d010      	beq.n	800b38e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b36c:	7b7a      	ldrb	r2, [r7, #13]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	32ae      	adds	r2, #174	; 0xae
 800b372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b376:	689b      	ldr	r3, [r3, #8]
 800b378:	6839      	ldr	r1, [r7, #0]
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	4798      	blx	r3
 800b37e:	4603      	mov	r3, r0
 800b380:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b382:	e004      	b.n	800b38e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fc03 	bl	800bb92 <USBD_CtlError>
              break;
 800b38c:	e000      	b.n	800b390 <USBD_StdEPReq+0x1c8>
              break;
 800b38e:	bf00      	nop
          }
          break;
 800b390:	e0ab      	b.n	800b4ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	2b02      	cmp	r3, #2
 800b39c:	d002      	beq.n	800b3a4 <USBD_StdEPReq+0x1dc>
 800b39e:	2b03      	cmp	r3, #3
 800b3a0:	d032      	beq.n	800b408 <USBD_StdEPReq+0x240>
 800b3a2:	e097      	b.n	800b4d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3a4:	7bbb      	ldrb	r3, [r7, #14]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d007      	beq.n	800b3ba <USBD_StdEPReq+0x1f2>
 800b3aa:	7bbb      	ldrb	r3, [r7, #14]
 800b3ac:	2b80      	cmp	r3, #128	; 0x80
 800b3ae:	d004      	beq.n	800b3ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fbed 	bl	800bb92 <USBD_CtlError>
                break;
 800b3b8:	e091      	b.n	800b4de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	da0b      	bge.n	800b3da <USBD_StdEPReq+0x212>
 800b3c2:	7bbb      	ldrb	r3, [r7, #14]
 800b3c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	009b      	lsls	r3, r3, #2
 800b3cc:	4413      	add	r3, r2
 800b3ce:	009b      	lsls	r3, r3, #2
 800b3d0:	3310      	adds	r3, #16
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	3304      	adds	r3, #4
 800b3d8:	e00b      	b.n	800b3f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b3da:	7bbb      	ldrb	r3, [r7, #14]
 800b3dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4413      	add	r3, r2
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b3ec:	687a      	ldr	r2, [r7, #4]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	3304      	adds	r3, #4
 800b3f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	2202      	movs	r2, #2
 800b3fe:	4619      	mov	r1, r3
 800b400:	6878      	ldr	r0, [r7, #4]
 800b402:	f000 fc37 	bl	800bc74 <USBD_CtlSendData>
              break;
 800b406:	e06a      	b.n	800b4de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b408:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	da11      	bge.n	800b434 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b410:	7bbb      	ldrb	r3, [r7, #14]
 800b412:	f003 020f 	and.w	r2, r3, #15
 800b416:	6879      	ldr	r1, [r7, #4]
 800b418:	4613      	mov	r3, r2
 800b41a:	009b      	lsls	r3, r3, #2
 800b41c:	4413      	add	r3, r2
 800b41e:	009b      	lsls	r3, r3, #2
 800b420:	440b      	add	r3, r1
 800b422:	3324      	adds	r3, #36	; 0x24
 800b424:	881b      	ldrh	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d117      	bne.n	800b45a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f000 fbb0 	bl	800bb92 <USBD_CtlError>
                  break;
 800b432:	e054      	b.n	800b4de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b434:	7bbb      	ldrb	r3, [r7, #14]
 800b436:	f003 020f 	and.w	r2, r3, #15
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	4613      	mov	r3, r2
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	4413      	add	r3, r2
 800b442:	009b      	lsls	r3, r3, #2
 800b444:	440b      	add	r3, r1
 800b446:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b44a:	881b      	ldrh	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d104      	bne.n	800b45a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 fb9d 	bl	800bb92 <USBD_CtlError>
                  break;
 800b458:	e041      	b.n	800b4de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b45a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	da0b      	bge.n	800b47a <USBD_StdEPReq+0x2b2>
 800b462:	7bbb      	ldrb	r3, [r7, #14]
 800b464:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b468:	4613      	mov	r3, r2
 800b46a:	009b      	lsls	r3, r3, #2
 800b46c:	4413      	add	r3, r2
 800b46e:	009b      	lsls	r3, r3, #2
 800b470:	3310      	adds	r3, #16
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	4413      	add	r3, r2
 800b476:	3304      	adds	r3, #4
 800b478:	e00b      	b.n	800b492 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b47a:	7bbb      	ldrb	r3, [r7, #14]
 800b47c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b480:	4613      	mov	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b48c:	687a      	ldr	r2, [r7, #4]
 800b48e:	4413      	add	r3, r2
 800b490:	3304      	adds	r3, #4
 800b492:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b494:	7bbb      	ldrb	r3, [r7, #14]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d002      	beq.n	800b4a0 <USBD_StdEPReq+0x2d8>
 800b49a:	7bbb      	ldrb	r3, [r7, #14]
 800b49c:	2b80      	cmp	r3, #128	; 0x80
 800b49e:	d103      	bne.n	800b4a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	601a      	str	r2, [r3, #0]
 800b4a6:	e00e      	b.n	800b4c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b4a8:	7bbb      	ldrb	r3, [r7, #14]
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f001 f87f 	bl	800c5b0 <USBD_LL_IsStallEP>
 800b4b2:	4603      	mov	r3, r0
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d003      	beq.n	800b4c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	601a      	str	r2, [r3, #0]
 800b4be:	e002      	b.n	800b4c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	2202      	movs	r2, #2
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	6878      	ldr	r0, [r7, #4]
 800b4ce:	f000 fbd1 	bl	800bc74 <USBD_CtlSendData>
              break;
 800b4d2:	e004      	b.n	800b4de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b4d4:	6839      	ldr	r1, [r7, #0]
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f000 fb5b 	bl	800bb92 <USBD_CtlError>
              break;
 800b4dc:	bf00      	nop
          }
          break;
 800b4de:	e004      	b.n	800b4ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b4e0:	6839      	ldr	r1, [r7, #0]
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fb55 	bl	800bb92 <USBD_CtlError>
          break;
 800b4e8:	bf00      	nop
      }
      break;
 800b4ea:	e005      	b.n	800b4f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b4ec:	6839      	ldr	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 fb4f 	bl	800bb92 <USBD_CtlError>
      break;
 800b4f4:	e000      	b.n	800b4f8 <USBD_StdEPReq+0x330>
      break;
 800b4f6:	bf00      	nop
  }

  return ret;
 800b4f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3710      	adds	r7, #16
 800b4fe:	46bd      	mov	sp, r7
 800b500:	bd80      	pop	{r7, pc}
	...

0800b504 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b084      	sub	sp, #16
 800b508:	af00      	add	r7, sp, #0
 800b50a:	6078      	str	r0, [r7, #4]
 800b50c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b50e:	2300      	movs	r3, #0
 800b510:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b512:	2300      	movs	r3, #0
 800b514:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b516:	2300      	movs	r3, #0
 800b518:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b51a:	683b      	ldr	r3, [r7, #0]
 800b51c:	885b      	ldrh	r3, [r3, #2]
 800b51e:	0a1b      	lsrs	r3, r3, #8
 800b520:	b29b      	uxth	r3, r3
 800b522:	3b01      	subs	r3, #1
 800b524:	2b06      	cmp	r3, #6
 800b526:	f200 8128 	bhi.w	800b77a <USBD_GetDescriptor+0x276>
 800b52a:	a201      	add	r2, pc, #4	; (adr r2, 800b530 <USBD_GetDescriptor+0x2c>)
 800b52c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b530:	0800b54d 	.word	0x0800b54d
 800b534:	0800b565 	.word	0x0800b565
 800b538:	0800b5a5 	.word	0x0800b5a5
 800b53c:	0800b77b 	.word	0x0800b77b
 800b540:	0800b77b 	.word	0x0800b77b
 800b544:	0800b71b 	.word	0x0800b71b
 800b548:	0800b747 	.word	0x0800b747
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	7c12      	ldrb	r2, [r2, #16]
 800b558:	f107 0108 	add.w	r1, r7, #8
 800b55c:	4610      	mov	r0, r2
 800b55e:	4798      	blx	r3
 800b560:	60f8      	str	r0, [r7, #12]
      break;
 800b562:	e112      	b.n	800b78a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	7c1b      	ldrb	r3, [r3, #16]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10d      	bne.n	800b588 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b574:	f107 0208 	add.w	r2, r7, #8
 800b578:	4610      	mov	r0, r2
 800b57a:	4798      	blx	r3
 800b57c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	3301      	adds	r3, #1
 800b582:	2202      	movs	r2, #2
 800b584:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b586:	e100      	b.n	800b78a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b590:	f107 0208 	add.w	r2, r7, #8
 800b594:	4610      	mov	r0, r2
 800b596:	4798      	blx	r3
 800b598:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	3301      	adds	r3, #1
 800b59e:	2202      	movs	r2, #2
 800b5a0:	701a      	strb	r2, [r3, #0]
      break;
 800b5a2:	e0f2      	b.n	800b78a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	885b      	ldrh	r3, [r3, #2]
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	2b05      	cmp	r3, #5
 800b5ac:	f200 80ac 	bhi.w	800b708 <USBD_GetDescriptor+0x204>
 800b5b0:	a201      	add	r2, pc, #4	; (adr r2, 800b5b8 <USBD_GetDescriptor+0xb4>)
 800b5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b6:	bf00      	nop
 800b5b8:	0800b5d1 	.word	0x0800b5d1
 800b5bc:	0800b605 	.word	0x0800b605
 800b5c0:	0800b639 	.word	0x0800b639
 800b5c4:	0800b66d 	.word	0x0800b66d
 800b5c8:	0800b6a1 	.word	0x0800b6a1
 800b5cc:	0800b6d5 	.word	0x0800b6d5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d00b      	beq.n	800b5f4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b5e2:	685b      	ldr	r3, [r3, #4]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	7c12      	ldrb	r2, [r2, #16]
 800b5e8:	f107 0108 	add.w	r1, r7, #8
 800b5ec:	4610      	mov	r0, r2
 800b5ee:	4798      	blx	r3
 800b5f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5f2:	e091      	b.n	800b718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f000 facb 	bl	800bb92 <USBD_CtlError>
            err++;
 800b5fc:	7afb      	ldrb	r3, [r7, #11]
 800b5fe:	3301      	adds	r3, #1
 800b600:	72fb      	strb	r3, [r7, #11]
          break;
 800b602:	e089      	b.n	800b718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b60a:	689b      	ldr	r3, [r3, #8]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d00b      	beq.n	800b628 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b616:	689b      	ldr	r3, [r3, #8]
 800b618:	687a      	ldr	r2, [r7, #4]
 800b61a:	7c12      	ldrb	r2, [r2, #16]
 800b61c:	f107 0108 	add.w	r1, r7, #8
 800b620:	4610      	mov	r0, r2
 800b622:	4798      	blx	r3
 800b624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b626:	e077      	b.n	800b718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b628:	6839      	ldr	r1, [r7, #0]
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 fab1 	bl	800bb92 <USBD_CtlError>
            err++;
 800b630:	7afb      	ldrb	r3, [r7, #11]
 800b632:	3301      	adds	r3, #1
 800b634:	72fb      	strb	r3, [r7, #11]
          break;
 800b636:	e06f      	b.n	800b718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b63e:	68db      	ldr	r3, [r3, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00b      	beq.n	800b65c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	687a      	ldr	r2, [r7, #4]
 800b64e:	7c12      	ldrb	r2, [r2, #16]
 800b650:	f107 0108 	add.w	r1, r7, #8
 800b654:	4610      	mov	r0, r2
 800b656:	4798      	blx	r3
 800b658:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b65a:	e05d      	b.n	800b718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b65c:	6839      	ldr	r1, [r7, #0]
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fa97 	bl	800bb92 <USBD_CtlError>
            err++;
 800b664:	7afb      	ldrb	r3, [r7, #11]
 800b666:	3301      	adds	r3, #1
 800b668:	72fb      	strb	r3, [r7, #11]
          break;
 800b66a:	e055      	b.n	800b718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b672:	691b      	ldr	r3, [r3, #16]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d00b      	beq.n	800b690 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b67e:	691b      	ldr	r3, [r3, #16]
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	7c12      	ldrb	r2, [r2, #16]
 800b684:	f107 0108 	add.w	r1, r7, #8
 800b688:	4610      	mov	r0, r2
 800b68a:	4798      	blx	r3
 800b68c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b68e:	e043      	b.n	800b718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b690:	6839      	ldr	r1, [r7, #0]
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 fa7d 	bl	800bb92 <USBD_CtlError>
            err++;
 800b698:	7afb      	ldrb	r3, [r7, #11]
 800b69a:	3301      	adds	r3, #1
 800b69c:	72fb      	strb	r3, [r7, #11]
          break;
 800b69e:	e03b      	b.n	800b718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6a6:	695b      	ldr	r3, [r3, #20]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d00b      	beq.n	800b6c4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6b2:	695b      	ldr	r3, [r3, #20]
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	7c12      	ldrb	r2, [r2, #16]
 800b6b8:	f107 0108 	add.w	r1, r7, #8
 800b6bc:	4610      	mov	r0, r2
 800b6be:	4798      	blx	r3
 800b6c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6c2:	e029      	b.n	800b718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6c4:	6839      	ldr	r1, [r7, #0]
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 fa63 	bl	800bb92 <USBD_CtlError>
            err++;
 800b6cc:	7afb      	ldrb	r3, [r7, #11]
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	72fb      	strb	r3, [r7, #11]
          break;
 800b6d2:	e021      	b.n	800b718 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6da:	699b      	ldr	r3, [r3, #24]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00b      	beq.n	800b6f8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6e6:	699b      	ldr	r3, [r3, #24]
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	7c12      	ldrb	r2, [r2, #16]
 800b6ec:	f107 0108 	add.w	r1, r7, #8
 800b6f0:	4610      	mov	r0, r2
 800b6f2:	4798      	blx	r3
 800b6f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6f6:	e00f      	b.n	800b718 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6f8:	6839      	ldr	r1, [r7, #0]
 800b6fa:	6878      	ldr	r0, [r7, #4]
 800b6fc:	f000 fa49 	bl	800bb92 <USBD_CtlError>
            err++;
 800b700:	7afb      	ldrb	r3, [r7, #11]
 800b702:	3301      	adds	r3, #1
 800b704:	72fb      	strb	r3, [r7, #11]
          break;
 800b706:	e007      	b.n	800b718 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fa41 	bl	800bb92 <USBD_CtlError>
          err++;
 800b710:	7afb      	ldrb	r3, [r7, #11]
 800b712:	3301      	adds	r3, #1
 800b714:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b716:	bf00      	nop
      }
      break;
 800b718:	e037      	b.n	800b78a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	7c1b      	ldrb	r3, [r3, #16]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d109      	bne.n	800b736 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b72a:	f107 0208 	add.w	r2, r7, #8
 800b72e:	4610      	mov	r0, r2
 800b730:	4798      	blx	r3
 800b732:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b734:	e029      	b.n	800b78a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b736:	6839      	ldr	r1, [r7, #0]
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 fa2a 	bl	800bb92 <USBD_CtlError>
        err++;
 800b73e:	7afb      	ldrb	r3, [r7, #11]
 800b740:	3301      	adds	r3, #1
 800b742:	72fb      	strb	r3, [r7, #11]
      break;
 800b744:	e021      	b.n	800b78a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	7c1b      	ldrb	r3, [r3, #16]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d10d      	bne.n	800b76a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b756:	f107 0208 	add.w	r2, r7, #8
 800b75a:	4610      	mov	r0, r2
 800b75c:	4798      	blx	r3
 800b75e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	3301      	adds	r3, #1
 800b764:	2207      	movs	r2, #7
 800b766:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b768:	e00f      	b.n	800b78a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b76a:	6839      	ldr	r1, [r7, #0]
 800b76c:	6878      	ldr	r0, [r7, #4]
 800b76e:	f000 fa10 	bl	800bb92 <USBD_CtlError>
        err++;
 800b772:	7afb      	ldrb	r3, [r7, #11]
 800b774:	3301      	adds	r3, #1
 800b776:	72fb      	strb	r3, [r7, #11]
      break;
 800b778:	e007      	b.n	800b78a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 fa08 	bl	800bb92 <USBD_CtlError>
      err++;
 800b782:	7afb      	ldrb	r3, [r7, #11]
 800b784:	3301      	adds	r3, #1
 800b786:	72fb      	strb	r3, [r7, #11]
      break;
 800b788:	bf00      	nop
  }

  if (err != 0U)
 800b78a:	7afb      	ldrb	r3, [r7, #11]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d11e      	bne.n	800b7ce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b790:	683b      	ldr	r3, [r7, #0]
 800b792:	88db      	ldrh	r3, [r3, #6]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d016      	beq.n	800b7c6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b798:	893b      	ldrh	r3, [r7, #8]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00e      	beq.n	800b7bc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b79e:	683b      	ldr	r3, [r7, #0]
 800b7a0:	88da      	ldrh	r2, [r3, #6]
 800b7a2:	893b      	ldrh	r3, [r7, #8]
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	bf28      	it	cs
 800b7a8:	4613      	movcs	r3, r2
 800b7aa:	b29b      	uxth	r3, r3
 800b7ac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b7ae:	893b      	ldrh	r3, [r7, #8]
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	68f9      	ldr	r1, [r7, #12]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fa5d 	bl	800bc74 <USBD_CtlSendData>
 800b7ba:	e009      	b.n	800b7d0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b7bc:	6839      	ldr	r1, [r7, #0]
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f9e7 	bl	800bb92 <USBD_CtlError>
 800b7c4:	e004      	b.n	800b7d0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 faae 	bl	800bd28 <USBD_CtlSendStatus>
 800b7cc:	e000      	b.n	800b7d0 <USBD_GetDescriptor+0x2cc>
    return;
 800b7ce:	bf00      	nop
  }
}
 800b7d0:	3710      	adds	r7, #16
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop

0800b7d8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	889b      	ldrh	r3, [r3, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d131      	bne.n	800b84e <USBD_SetAddress+0x76>
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	88db      	ldrh	r3, [r3, #6]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d12d      	bne.n	800b84e <USBD_SetAddress+0x76>
 800b7f2:	683b      	ldr	r3, [r7, #0]
 800b7f4:	885b      	ldrh	r3, [r3, #2]
 800b7f6:	2b7f      	cmp	r3, #127	; 0x7f
 800b7f8:	d829      	bhi.n	800b84e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b7fa:	683b      	ldr	r3, [r7, #0]
 800b7fc:	885b      	ldrh	r3, [r3, #2]
 800b7fe:	b2db      	uxtb	r3, r3
 800b800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b804:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	2b03      	cmp	r3, #3
 800b810:	d104      	bne.n	800b81c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	6878      	ldr	r0, [r7, #4]
 800b816:	f000 f9bc 	bl	800bb92 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b81a:	e01d      	b.n	800b858 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	7bfa      	ldrb	r2, [r7, #15]
 800b820:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b824:	7bfb      	ldrb	r3, [r7, #15]
 800b826:	4619      	mov	r1, r3
 800b828:	6878      	ldr	r0, [r7, #4]
 800b82a:	f000 feed 	bl	800c608 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 fa7a 	bl	800bd28 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b834:	7bfb      	ldrb	r3, [r7, #15]
 800b836:	2b00      	cmp	r3, #0
 800b838:	d004      	beq.n	800b844 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2202      	movs	r2, #2
 800b83e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b842:	e009      	b.n	800b858 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b84c:	e004      	b.n	800b858 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b84e:	6839      	ldr	r1, [r7, #0]
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f000 f99e 	bl	800bb92 <USBD_CtlError>
  }
}
 800b856:	bf00      	nop
 800b858:	bf00      	nop
 800b85a:	3710      	adds	r7, #16
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}

0800b860 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	885b      	ldrh	r3, [r3, #2]
 800b872:	b2da      	uxtb	r2, r3
 800b874:	4b4e      	ldr	r3, [pc, #312]	; (800b9b0 <USBD_SetConfig+0x150>)
 800b876:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b878:	4b4d      	ldr	r3, [pc, #308]	; (800b9b0 <USBD_SetConfig+0x150>)
 800b87a:	781b      	ldrb	r3, [r3, #0]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d905      	bls.n	800b88c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b880:	6839      	ldr	r1, [r7, #0]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f985 	bl	800bb92 <USBD_CtlError>
    return USBD_FAIL;
 800b888:	2303      	movs	r3, #3
 800b88a:	e08c      	b.n	800b9a6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b892:	b2db      	uxtb	r3, r3
 800b894:	2b02      	cmp	r3, #2
 800b896:	d002      	beq.n	800b89e <USBD_SetConfig+0x3e>
 800b898:	2b03      	cmp	r3, #3
 800b89a:	d029      	beq.n	800b8f0 <USBD_SetConfig+0x90>
 800b89c:	e075      	b.n	800b98a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b89e:	4b44      	ldr	r3, [pc, #272]	; (800b9b0 <USBD_SetConfig+0x150>)
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d020      	beq.n	800b8e8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b8a6:	4b42      	ldr	r3, [pc, #264]	; (800b9b0 <USBD_SetConfig+0x150>)
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	461a      	mov	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8b0:	4b3f      	ldr	r3, [pc, #252]	; (800b9b0 <USBD_SetConfig+0x150>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f7fe ffe7 	bl	800a88a <USBD_SetClassConfig>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b8c0:	7bfb      	ldrb	r3, [r7, #15]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d008      	beq.n	800b8d8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b8c6:	6839      	ldr	r1, [r7, #0]
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f962 	bl	800bb92 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2202      	movs	r2, #2
 800b8d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b8d6:	e065      	b.n	800b9a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fa25 	bl	800bd28 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	2203      	movs	r2, #3
 800b8e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b8e6:	e05d      	b.n	800b9a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 fa1d 	bl	800bd28 <USBD_CtlSendStatus>
      break;
 800b8ee:	e059      	b.n	800b9a4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b8f0:	4b2f      	ldr	r3, [pc, #188]	; (800b9b0 <USBD_SetConfig+0x150>)
 800b8f2:	781b      	ldrb	r3, [r3, #0]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d112      	bne.n	800b91e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2202      	movs	r2, #2
 800b8fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b900:	4b2b      	ldr	r3, [pc, #172]	; (800b9b0 <USBD_SetConfig+0x150>)
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	461a      	mov	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b90a:	4b29      	ldr	r3, [pc, #164]	; (800b9b0 <USBD_SetConfig+0x150>)
 800b90c:	781b      	ldrb	r3, [r3, #0]
 800b90e:	4619      	mov	r1, r3
 800b910:	6878      	ldr	r0, [r7, #4]
 800b912:	f7fe ffd6 	bl	800a8c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b916:	6878      	ldr	r0, [r7, #4]
 800b918:	f000 fa06 	bl	800bd28 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b91c:	e042      	b.n	800b9a4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b91e:	4b24      	ldr	r3, [pc, #144]	; (800b9b0 <USBD_SetConfig+0x150>)
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	461a      	mov	r2, r3
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	685b      	ldr	r3, [r3, #4]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d02a      	beq.n	800b982 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	b2db      	uxtb	r3, r3
 800b932:	4619      	mov	r1, r3
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f7fe ffc4 	bl	800a8c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b93a:	4b1d      	ldr	r3, [pc, #116]	; (800b9b0 <USBD_SetConfig+0x150>)
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	461a      	mov	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b944:	4b1a      	ldr	r3, [pc, #104]	; (800b9b0 <USBD_SetConfig+0x150>)
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	4619      	mov	r1, r3
 800b94a:	6878      	ldr	r0, [r7, #4]
 800b94c:	f7fe ff9d 	bl	800a88a <USBD_SetClassConfig>
 800b950:	4603      	mov	r3, r0
 800b952:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b954:	7bfb      	ldrb	r3, [r7, #15]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d00f      	beq.n	800b97a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f000 f918 	bl	800bb92 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	b2db      	uxtb	r3, r3
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7fe ffa9 	bl	800a8c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2202      	movs	r2, #2
 800b974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b978:	e014      	b.n	800b9a4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 f9d4 	bl	800bd28 <USBD_CtlSendStatus>
      break;
 800b980:	e010      	b.n	800b9a4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f9d0 	bl	800bd28 <USBD_CtlSendStatus>
      break;
 800b988:	e00c      	b.n	800b9a4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b98a:	6839      	ldr	r1, [r7, #0]
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f900 	bl	800bb92 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b992:	4b07      	ldr	r3, [pc, #28]	; (800b9b0 <USBD_SetConfig+0x150>)
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	4619      	mov	r1, r3
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f7fe ff92 	bl	800a8c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b99e:	2303      	movs	r3, #3
 800b9a0:	73fb      	strb	r3, [r7, #15]
      break;
 800b9a2:	bf00      	nop
  }

  return ret;
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3710      	adds	r7, #16
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20002f2c 	.word	0x20002f2c

0800b9b4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9b4:	b580      	push	{r7, lr}
 800b9b6:	b082      	sub	sp, #8
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	88db      	ldrh	r3, [r3, #6]
 800b9c2:	2b01      	cmp	r3, #1
 800b9c4:	d004      	beq.n	800b9d0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	6878      	ldr	r0, [r7, #4]
 800b9ca:	f000 f8e2 	bl	800bb92 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b9ce:	e023      	b.n	800ba18 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	2b02      	cmp	r3, #2
 800b9da:	dc02      	bgt.n	800b9e2 <USBD_GetConfig+0x2e>
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	dc03      	bgt.n	800b9e8 <USBD_GetConfig+0x34>
 800b9e0:	e015      	b.n	800ba0e <USBD_GetConfig+0x5a>
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d00b      	beq.n	800b9fe <USBD_GetConfig+0x4a>
 800b9e6:	e012      	b.n	800ba0e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	3308      	adds	r3, #8
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f93c 	bl	800bc74 <USBD_CtlSendData>
        break;
 800b9fc:	e00c      	b.n	800ba18 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	3304      	adds	r3, #4
 800ba02:	2201      	movs	r2, #1
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 f934 	bl	800bc74 <USBD_CtlSendData>
        break;
 800ba0c:	e004      	b.n	800ba18 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ba0e:	6839      	ldr	r1, [r7, #0]
 800ba10:	6878      	ldr	r0, [r7, #4]
 800ba12:	f000 f8be 	bl	800bb92 <USBD_CtlError>
        break;
 800ba16:	bf00      	nop
}
 800ba18:	bf00      	nop
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}

0800ba20 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
 800ba28:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba30:	b2db      	uxtb	r3, r3
 800ba32:	3b01      	subs	r3, #1
 800ba34:	2b02      	cmp	r3, #2
 800ba36:	d81e      	bhi.n	800ba76 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	88db      	ldrh	r3, [r3, #6]
 800ba3c:	2b02      	cmp	r3, #2
 800ba3e:	d004      	beq.n	800ba4a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ba40:	6839      	ldr	r1, [r7, #0]
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f8a5 	bl	800bb92 <USBD_CtlError>
        break;
 800ba48:	e01a      	b.n	800ba80 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	2201      	movs	r2, #1
 800ba4e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d005      	beq.n	800ba66 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	f043 0202 	orr.w	r2, r3, #2
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	330c      	adds	r3, #12
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 f900 	bl	800bc74 <USBD_CtlSendData>
      break;
 800ba74:	e004      	b.n	800ba80 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ba76:	6839      	ldr	r1, [r7, #0]
 800ba78:	6878      	ldr	r0, [r7, #4]
 800ba7a:	f000 f88a 	bl	800bb92 <USBD_CtlError>
      break;
 800ba7e:	bf00      	nop
  }
}
 800ba80:	bf00      	nop
 800ba82:	3708      	adds	r7, #8
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
 800ba90:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	885b      	ldrh	r3, [r3, #2]
 800ba96:	2b01      	cmp	r3, #1
 800ba98:	d107      	bne.n	800baaa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	2201      	movs	r2, #1
 800ba9e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 f940 	bl	800bd28 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800baa8:	e013      	b.n	800bad2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	885b      	ldrh	r3, [r3, #2]
 800baae:	2b02      	cmp	r3, #2
 800bab0:	d10b      	bne.n	800baca <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800bab2:	683b      	ldr	r3, [r7, #0]
 800bab4:	889b      	ldrh	r3, [r3, #4]
 800bab6:	0a1b      	lsrs	r3, r3, #8
 800bab8:	b29b      	uxth	r3, r3
 800baba:	b2da      	uxtb	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f000 f930 	bl	800bd28 <USBD_CtlSendStatus>
}
 800bac8:	e003      	b.n	800bad2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800baca:	6839      	ldr	r1, [r7, #0]
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f000 f860 	bl	800bb92 <USBD_CtlError>
}
 800bad2:	bf00      	nop
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b082      	sub	sp, #8
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
 800bae2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800baea:	b2db      	uxtb	r3, r3
 800baec:	3b01      	subs	r3, #1
 800baee:	2b02      	cmp	r3, #2
 800baf0:	d80b      	bhi.n	800bb0a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	885b      	ldrh	r3, [r3, #2]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d10c      	bne.n	800bb14 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2200      	movs	r2, #0
 800bafe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f910 	bl	800bd28 <USBD_CtlSendStatus>
      }
      break;
 800bb08:	e004      	b.n	800bb14 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bb0a:	6839      	ldr	r1, [r7, #0]
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 f840 	bl	800bb92 <USBD_CtlError>
      break;
 800bb12:	e000      	b.n	800bb16 <USBD_ClrFeature+0x3c>
      break;
 800bb14:	bf00      	nop
  }
}
 800bb16:	bf00      	nop
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b084      	sub	sp, #16
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	781a      	ldrb	r2, [r3, #0]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	3301      	adds	r3, #1
 800bb38:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	781a      	ldrb	r2, [r3, #0]
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	3301      	adds	r3, #1
 800bb46:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f7ff fa41 	bl	800afd0 <SWAPBYTE>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	461a      	mov	r2, r3
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	3301      	adds	r3, #1
 800bb5a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	3301      	adds	r3, #1
 800bb60:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bb62:	68f8      	ldr	r0, [r7, #12]
 800bb64:	f7ff fa34 	bl	800afd0 <SWAPBYTE>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	3301      	adds	r3, #1
 800bb74:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bb76:	68fb      	ldr	r3, [r7, #12]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bb7c:	68f8      	ldr	r0, [r7, #12]
 800bb7e:	f7ff fa27 	bl	800afd0 <SWAPBYTE>
 800bb82:	4603      	mov	r3, r0
 800bb84:	461a      	mov	r2, r3
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	80da      	strh	r2, [r3, #6]
}
 800bb8a:	bf00      	nop
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b082      	sub	sp, #8
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb9c:	2180      	movs	r1, #128	; 0x80
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fcc8 	bl	800c534 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bba4:	2100      	movs	r1, #0
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 fcc4 	bl	800c534 <USBD_LL_StallEP>
}
 800bbac:	bf00      	nop
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	60f8      	str	r0, [r7, #12]
 800bbbc:	60b9      	str	r1, [r7, #8]
 800bbbe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d036      	beq.n	800bc38 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bbce:	6938      	ldr	r0, [r7, #16]
 800bbd0:	f000 f836 	bl	800bc40 <USBD_GetLen>
 800bbd4:	4603      	mov	r3, r0
 800bbd6:	3301      	adds	r3, #1
 800bbd8:	b29b      	uxth	r3, r3
 800bbda:	005b      	lsls	r3, r3, #1
 800bbdc:	b29a      	uxth	r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	7812      	ldrb	r2, [r2, #0]
 800bbec:	701a      	strb	r2, [r3, #0]
  idx++;
 800bbee:	7dfb      	ldrb	r3, [r7, #23]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bbf4:	7dfb      	ldrb	r3, [r7, #23]
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	2203      	movs	r2, #3
 800bbfc:	701a      	strb	r2, [r3, #0]
  idx++;
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
 800bc00:	3301      	adds	r3, #1
 800bc02:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bc04:	e013      	b.n	800bc2e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bc06:	7dfb      	ldrb	r3, [r7, #23]
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	693a      	ldr	r2, [r7, #16]
 800bc0e:	7812      	ldrb	r2, [r2, #0]
 800bc10:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	3301      	adds	r3, #1
 800bc16:	613b      	str	r3, [r7, #16]
    idx++;
 800bc18:	7dfb      	ldrb	r3, [r7, #23]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bc1e:	7dfb      	ldrb	r3, [r7, #23]
 800bc20:	68ba      	ldr	r2, [r7, #8]
 800bc22:	4413      	add	r3, r2
 800bc24:	2200      	movs	r2, #0
 800bc26:	701a      	strb	r2, [r3, #0]
    idx++;
 800bc28:	7dfb      	ldrb	r3, [r7, #23]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bc2e:	693b      	ldr	r3, [r7, #16]
 800bc30:	781b      	ldrb	r3, [r3, #0]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d1e7      	bne.n	800bc06 <USBD_GetString+0x52>
 800bc36:	e000      	b.n	800bc3a <USBD_GetString+0x86>
    return;
 800bc38:	bf00      	nop
  }
}
 800bc3a:	3718      	adds	r7, #24
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc40:	b480      	push	{r7}
 800bc42:	b085      	sub	sp, #20
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bc50:	e005      	b.n	800bc5e <USBD_GetLen+0x1e>
  {
    len++;
 800bc52:	7bfb      	ldrb	r3, [r7, #15]
 800bc54:	3301      	adds	r3, #1
 800bc56:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	3301      	adds	r3, #1
 800bc5c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	781b      	ldrb	r3, [r3, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d1f5      	bne.n	800bc52 <USBD_GetLen+0x12>
  }

  return len;
 800bc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc68:	4618      	mov	r0, r3
 800bc6a:	3714      	adds	r7, #20
 800bc6c:	46bd      	mov	sp, r7
 800bc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc72:	4770      	bx	lr

0800bc74 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2202      	movs	r2, #2
 800bc84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68ba      	ldr	r2, [r7, #8]
 800bc98:	2100      	movs	r1, #0
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f000 fcd3 	bl	800c646 <USBD_LL_Transmit>

  return USBD_OK;
 800bca0:	2300      	movs	r3, #0
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3710      	adds	r7, #16
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bcaa:	b580      	push	{r7, lr}
 800bcac:	b084      	sub	sp, #16
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	60f8      	str	r0, [r7, #12]
 800bcb2:	60b9      	str	r1, [r7, #8]
 800bcb4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	2100      	movs	r1, #0
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f000 fcc2 	bl	800c646 <USBD_LL_Transmit>

  return USBD_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2203      	movs	r2, #3
 800bcdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	2100      	movs	r1, #0
 800bcf6:	68f8      	ldr	r0, [r7, #12]
 800bcf8:	f000 fcc6 	bl	800c688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcfc:	2300      	movs	r3, #0
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b084      	sub	sp, #16
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	60f8      	str	r0, [r7, #12]
 800bd0e:	60b9      	str	r1, [r7, #8]
 800bd10:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	2100      	movs	r1, #0
 800bd18:	68f8      	ldr	r0, [r7, #12]
 800bd1a:	f000 fcb5 	bl	800c688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}

0800bd28 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b082      	sub	sp, #8
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	2204      	movs	r2, #4
 800bd34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bd38:	2300      	movs	r3, #0
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	2100      	movs	r1, #0
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f000 fc81 	bl	800c646 <USBD_LL_Transmit>

  return USBD_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b082      	sub	sp, #8
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2205      	movs	r2, #5
 800bd5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd5e:	2300      	movs	r3, #0
 800bd60:	2200      	movs	r2, #0
 800bd62:	2100      	movs	r1, #0
 800bd64:	6878      	ldr	r0, [r7, #4]
 800bd66:	f000 fc8f 	bl	800c688 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd6a:	2300      	movs	r3, #0
}
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	3708      	adds	r7, #8
 800bd70:	46bd      	mov	sp, r7
 800bd72:	bd80      	pop	{r7, pc}

0800bd74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bd74:	b580      	push	{r7, lr}
 800bd76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	4912      	ldr	r1, [pc, #72]	; (800bdc4 <MX_USB_DEVICE_Init+0x50>)
 800bd7c:	4812      	ldr	r0, [pc, #72]	; (800bdc8 <MX_USB_DEVICE_Init+0x54>)
 800bd7e:	f7fe fd07 	bl	800a790 <USBD_Init>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d001      	beq.n	800bd8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bd88:	f7f5 fe38 	bl	80019fc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bd8c:	490f      	ldr	r1, [pc, #60]	; (800bdcc <MX_USB_DEVICE_Init+0x58>)
 800bd8e:	480e      	ldr	r0, [pc, #56]	; (800bdc8 <MX_USB_DEVICE_Init+0x54>)
 800bd90:	f7fe fd2e 	bl	800a7f0 <USBD_RegisterClass>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d001      	beq.n	800bd9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bd9a:	f7f5 fe2f 	bl	80019fc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bd9e:	490c      	ldr	r1, [pc, #48]	; (800bdd0 <MX_USB_DEVICE_Init+0x5c>)
 800bda0:	4809      	ldr	r0, [pc, #36]	; (800bdc8 <MX_USB_DEVICE_Init+0x54>)
 800bda2:	f7fe fc65 	bl	800a670 <USBD_CDC_RegisterInterface>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d001      	beq.n	800bdb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bdac:	f7f5 fe26 	bl	80019fc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bdb0:	4805      	ldr	r0, [pc, #20]	; (800bdc8 <MX_USB_DEVICE_Init+0x54>)
 800bdb2:	f7fe fd53 	bl	800a85c <USBD_Start>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d001      	beq.n	800bdc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bdbc:	f7f5 fe1e 	bl	80019fc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bdc0:	bf00      	nop
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	200000ac 	.word	0x200000ac
 800bdc8:	20002f30 	.word	0x20002f30
 800bdcc:	20000018 	.word	0x20000018
 800bdd0:	20000098 	.word	0x20000098

0800bdd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bdd8:	2200      	movs	r2, #0
 800bdda:	4905      	ldr	r1, [pc, #20]	; (800bdf0 <CDC_Init_FS+0x1c>)
 800bddc:	4805      	ldr	r0, [pc, #20]	; (800bdf4 <CDC_Init_FS+0x20>)
 800bdde:	f7fe fc61 	bl	800a6a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bde2:	4905      	ldr	r1, [pc, #20]	; (800bdf8 <CDC_Init_FS+0x24>)
 800bde4:	4803      	ldr	r0, [pc, #12]	; (800bdf4 <CDC_Init_FS+0x20>)
 800bde6:	f7fe fc7f 	bl	800a6e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bdea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bdec:	4618      	mov	r0, r3
 800bdee:	bd80      	pop	{r7, pc}
 800bdf0:	20003a0c 	.word	0x20003a0c
 800bdf4:	20002f30 	.word	0x20002f30
 800bdf8:	2000320c 	.word	0x2000320c

0800bdfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800be00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800be02:	4618      	mov	r0, r3
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	4603      	mov	r3, r0
 800be14:	6039      	str	r1, [r7, #0]
 800be16:	71fb      	strb	r3, [r7, #7]
 800be18:	4613      	mov	r3, r2
 800be1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800be1c:	79fb      	ldrb	r3, [r7, #7]
 800be1e:	2b23      	cmp	r3, #35	; 0x23
 800be20:	d84a      	bhi.n	800beb8 <CDC_Control_FS+0xac>
 800be22:	a201      	add	r2, pc, #4	; (adr r2, 800be28 <CDC_Control_FS+0x1c>)
 800be24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be28:	0800beb9 	.word	0x0800beb9
 800be2c:	0800beb9 	.word	0x0800beb9
 800be30:	0800beb9 	.word	0x0800beb9
 800be34:	0800beb9 	.word	0x0800beb9
 800be38:	0800beb9 	.word	0x0800beb9
 800be3c:	0800beb9 	.word	0x0800beb9
 800be40:	0800beb9 	.word	0x0800beb9
 800be44:	0800beb9 	.word	0x0800beb9
 800be48:	0800beb9 	.word	0x0800beb9
 800be4c:	0800beb9 	.word	0x0800beb9
 800be50:	0800beb9 	.word	0x0800beb9
 800be54:	0800beb9 	.word	0x0800beb9
 800be58:	0800beb9 	.word	0x0800beb9
 800be5c:	0800beb9 	.word	0x0800beb9
 800be60:	0800beb9 	.word	0x0800beb9
 800be64:	0800beb9 	.word	0x0800beb9
 800be68:	0800beb9 	.word	0x0800beb9
 800be6c:	0800beb9 	.word	0x0800beb9
 800be70:	0800beb9 	.word	0x0800beb9
 800be74:	0800beb9 	.word	0x0800beb9
 800be78:	0800beb9 	.word	0x0800beb9
 800be7c:	0800beb9 	.word	0x0800beb9
 800be80:	0800beb9 	.word	0x0800beb9
 800be84:	0800beb9 	.word	0x0800beb9
 800be88:	0800beb9 	.word	0x0800beb9
 800be8c:	0800beb9 	.word	0x0800beb9
 800be90:	0800beb9 	.word	0x0800beb9
 800be94:	0800beb9 	.word	0x0800beb9
 800be98:	0800beb9 	.word	0x0800beb9
 800be9c:	0800beb9 	.word	0x0800beb9
 800bea0:	0800beb9 	.word	0x0800beb9
 800bea4:	0800beb9 	.word	0x0800beb9
 800bea8:	0800beb9 	.word	0x0800beb9
 800beac:	0800beb9 	.word	0x0800beb9
 800beb0:	0800beb9 	.word	0x0800beb9
 800beb4:	0800beb9 	.word	0x0800beb9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800beb8:	bf00      	nop
  }

  return (USBD_OK);
 800beba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bebc:	4618      	mov	r0, r3
 800bebe:	370c      	adds	r7, #12
 800bec0:	46bd      	mov	sp, r7
 800bec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec6:	4770      	bx	lr

0800bec8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bed2:	6879      	ldr	r1, [r7, #4]
 800bed4:	4805      	ldr	r0, [pc, #20]	; (800beec <CDC_Receive_FS+0x24>)
 800bed6:	f7fe fc07 	bl	800a6e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800beda:	4804      	ldr	r0, [pc, #16]	; (800beec <CDC_Receive_FS+0x24>)
 800bedc:	f7fe fc22 	bl	800a724 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bee0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bee2:	4618      	mov	r0, r3
 800bee4:	3708      	adds	r7, #8
 800bee6:	46bd      	mov	sp, r7
 800bee8:	bd80      	pop	{r7, pc}
 800beea:	bf00      	nop
 800beec:	20002f30 	.word	0x20002f30

0800bef0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bef0:	b480      	push	{r7}
 800bef2:	b087      	sub	sp, #28
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	4613      	mov	r3, r2
 800befc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800befe:	2300      	movs	r3, #0
 800bf00:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bf02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf06:	4618      	mov	r0, r3
 800bf08:	371c      	adds	r7, #28
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
	...

0800bf14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b083      	sub	sp, #12
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	6039      	str	r1, [r7, #0]
 800bf1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bf20:	683b      	ldr	r3, [r7, #0]
 800bf22:	2212      	movs	r2, #18
 800bf24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bf26:	4b03      	ldr	r3, [pc, #12]	; (800bf34 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bf28:	4618      	mov	r0, r3
 800bf2a:	370c      	adds	r7, #12
 800bf2c:	46bd      	mov	sp, r7
 800bf2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf32:	4770      	bx	lr
 800bf34:	200000c8 	.word	0x200000c8

0800bf38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b083      	sub	sp, #12
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	4603      	mov	r3, r0
 800bf40:	6039      	str	r1, [r7, #0]
 800bf42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	2204      	movs	r2, #4
 800bf48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bf4a:	4b03      	ldr	r3, [pc, #12]	; (800bf58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr
 800bf58:	200000dc 	.word	0x200000dc

0800bf5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	4603      	mov	r3, r0
 800bf64:	6039      	str	r1, [r7, #0]
 800bf66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bf68:	79fb      	ldrb	r3, [r7, #7]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d105      	bne.n	800bf7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf6e:	683a      	ldr	r2, [r7, #0]
 800bf70:	4907      	ldr	r1, [pc, #28]	; (800bf90 <USBD_FS_ProductStrDescriptor+0x34>)
 800bf72:	4808      	ldr	r0, [pc, #32]	; (800bf94 <USBD_FS_ProductStrDescriptor+0x38>)
 800bf74:	f7ff fe1e 	bl	800bbb4 <USBD_GetString>
 800bf78:	e004      	b.n	800bf84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bf7a:	683a      	ldr	r2, [r7, #0]
 800bf7c:	4904      	ldr	r1, [pc, #16]	; (800bf90 <USBD_FS_ProductStrDescriptor+0x34>)
 800bf7e:	4805      	ldr	r0, [pc, #20]	; (800bf94 <USBD_FS_ProductStrDescriptor+0x38>)
 800bf80:	f7ff fe18 	bl	800bbb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf84:	4b02      	ldr	r3, [pc, #8]	; (800bf90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
 800bf8e:	bf00      	nop
 800bf90:	2000420c 	.word	0x2000420c
 800bf94:	0800db5c 	.word	0x0800db5c

0800bf98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b082      	sub	sp, #8
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	6039      	str	r1, [r7, #0]
 800bfa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	4904      	ldr	r1, [pc, #16]	; (800bfb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bfa8:	4804      	ldr	r0, [pc, #16]	; (800bfbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bfaa:	f7ff fe03 	bl	800bbb4 <USBD_GetString>
  return USBD_StrDesc;
 800bfae:	4b02      	ldr	r3, [pc, #8]	; (800bfb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3708      	adds	r7, #8
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}
 800bfb8:	2000420c 	.word	0x2000420c
 800bfbc:	0800db74 	.word	0x0800db74

0800bfc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b082      	sub	sp, #8
 800bfc4:	af00      	add	r7, sp, #0
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	6039      	str	r1, [r7, #0]
 800bfca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bfcc:	683b      	ldr	r3, [r7, #0]
 800bfce:	221a      	movs	r2, #26
 800bfd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bfd2:	f000 f843 	bl	800c05c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bfd6:	4b02      	ldr	r3, [pc, #8]	; (800bfe0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3708      	adds	r7, #8
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bd80      	pop	{r7, pc}
 800bfe0:	200000e0 	.word	0x200000e0

0800bfe4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b082      	sub	sp, #8
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	4603      	mov	r3, r0
 800bfec:	6039      	str	r1, [r7, #0]
 800bfee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bff0:	79fb      	ldrb	r3, [r7, #7]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d105      	bne.n	800c002 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bff6:	683a      	ldr	r2, [r7, #0]
 800bff8:	4907      	ldr	r1, [pc, #28]	; (800c018 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bffa:	4808      	ldr	r0, [pc, #32]	; (800c01c <USBD_FS_ConfigStrDescriptor+0x38>)
 800bffc:	f7ff fdda 	bl	800bbb4 <USBD_GetString>
 800c000:	e004      	b.n	800c00c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c002:	683a      	ldr	r2, [r7, #0]
 800c004:	4904      	ldr	r1, [pc, #16]	; (800c018 <USBD_FS_ConfigStrDescriptor+0x34>)
 800c006:	4805      	ldr	r0, [pc, #20]	; (800c01c <USBD_FS_ConfigStrDescriptor+0x38>)
 800c008:	f7ff fdd4 	bl	800bbb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c00c:	4b02      	ldr	r3, [pc, #8]	; (800c018 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3708      	adds	r7, #8
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	2000420c 	.word	0x2000420c
 800c01c:	0800db88 	.word	0x0800db88

0800c020 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b082      	sub	sp, #8
 800c024:	af00      	add	r7, sp, #0
 800c026:	4603      	mov	r3, r0
 800c028:	6039      	str	r1, [r7, #0]
 800c02a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c02c:	79fb      	ldrb	r3, [r7, #7]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d105      	bne.n	800c03e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	4907      	ldr	r1, [pc, #28]	; (800c054 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c036:	4808      	ldr	r0, [pc, #32]	; (800c058 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c038:	f7ff fdbc 	bl	800bbb4 <USBD_GetString>
 800c03c:	e004      	b.n	800c048 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c03e:	683a      	ldr	r2, [r7, #0]
 800c040:	4904      	ldr	r1, [pc, #16]	; (800c054 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c042:	4805      	ldr	r0, [pc, #20]	; (800c058 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c044:	f7ff fdb6 	bl	800bbb4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c048:	4b02      	ldr	r3, [pc, #8]	; (800c054 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	2000420c 	.word	0x2000420c
 800c058:	0800db94 	.word	0x0800db94

0800c05c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c05c:	b580      	push	{r7, lr}
 800c05e:	b084      	sub	sp, #16
 800c060:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c062:	4b0f      	ldr	r3, [pc, #60]	; (800c0a0 <Get_SerialNum+0x44>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c068:	4b0e      	ldr	r3, [pc, #56]	; (800c0a4 <Get_SerialNum+0x48>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c06e:	4b0e      	ldr	r3, [pc, #56]	; (800c0a8 <Get_SerialNum+0x4c>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c074:	68fa      	ldr	r2, [r7, #12]
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	4413      	add	r3, r2
 800c07a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d009      	beq.n	800c096 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c082:	2208      	movs	r2, #8
 800c084:	4909      	ldr	r1, [pc, #36]	; (800c0ac <Get_SerialNum+0x50>)
 800c086:	68f8      	ldr	r0, [r7, #12]
 800c088:	f000 f814 	bl	800c0b4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c08c:	2204      	movs	r2, #4
 800c08e:	4908      	ldr	r1, [pc, #32]	; (800c0b0 <Get_SerialNum+0x54>)
 800c090:	68b8      	ldr	r0, [r7, #8]
 800c092:	f000 f80f 	bl	800c0b4 <IntToUnicode>
  }
}
 800c096:	bf00      	nop
 800c098:	3710      	adds	r7, #16
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	1fff7a10 	.word	0x1fff7a10
 800c0a4:	1fff7a14 	.word	0x1fff7a14
 800c0a8:	1fff7a18 	.word	0x1fff7a18
 800c0ac:	200000e2 	.word	0x200000e2
 800c0b0:	200000f2 	.word	0x200000f2

0800c0b4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c0b4:	b480      	push	{r7}
 800c0b6:	b087      	sub	sp, #28
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	4613      	mov	r3, r2
 800c0c0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	75fb      	strb	r3, [r7, #23]
 800c0ca:	e027      	b.n	800c11c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	0f1b      	lsrs	r3, r3, #28
 800c0d0:	2b09      	cmp	r3, #9
 800c0d2:	d80b      	bhi.n	800c0ec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	0f1b      	lsrs	r3, r3, #28
 800c0d8:	b2da      	uxtb	r2, r3
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
 800c0dc:	005b      	lsls	r3, r3, #1
 800c0de:	4619      	mov	r1, r3
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	440b      	add	r3, r1
 800c0e4:	3230      	adds	r2, #48	; 0x30
 800c0e6:	b2d2      	uxtb	r2, r2
 800c0e8:	701a      	strb	r2, [r3, #0]
 800c0ea:	e00a      	b.n	800c102 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	0f1b      	lsrs	r3, r3, #28
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	7dfb      	ldrb	r3, [r7, #23]
 800c0f4:	005b      	lsls	r3, r3, #1
 800c0f6:	4619      	mov	r1, r3
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	440b      	add	r3, r1
 800c0fc:	3237      	adds	r2, #55	; 0x37
 800c0fe:	b2d2      	uxtb	r2, r2
 800c100:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	011b      	lsls	r3, r3, #4
 800c106:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c108:	7dfb      	ldrb	r3, [r7, #23]
 800c10a:	005b      	lsls	r3, r3, #1
 800c10c:	3301      	adds	r3, #1
 800c10e:	68ba      	ldr	r2, [r7, #8]
 800c110:	4413      	add	r3, r2
 800c112:	2200      	movs	r2, #0
 800c114:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c116:	7dfb      	ldrb	r3, [r7, #23]
 800c118:	3301      	adds	r3, #1
 800c11a:	75fb      	strb	r3, [r7, #23]
 800c11c:	7dfa      	ldrb	r2, [r7, #23]
 800c11e:	79fb      	ldrb	r3, [r7, #7]
 800c120:	429a      	cmp	r2, r3
 800c122:	d3d3      	bcc.n	800c0cc <IntToUnicode+0x18>
  }
}
 800c124:	bf00      	nop
 800c126:	bf00      	nop
 800c128:	371c      	adds	r7, #28
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
	...

0800c134 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08a      	sub	sp, #40	; 0x28
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c13c:	f107 0314 	add.w	r3, r7, #20
 800c140:	2200      	movs	r2, #0
 800c142:	601a      	str	r2, [r3, #0]
 800c144:	605a      	str	r2, [r3, #4]
 800c146:	609a      	str	r2, [r3, #8]
 800c148:	60da      	str	r2, [r3, #12]
 800c14a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c154:	d147      	bne.n	800c1e6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c156:	2300      	movs	r3, #0
 800c158:	613b      	str	r3, [r7, #16]
 800c15a:	4b25      	ldr	r3, [pc, #148]	; (800c1f0 <HAL_PCD_MspInit+0xbc>)
 800c15c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15e:	4a24      	ldr	r2, [pc, #144]	; (800c1f0 <HAL_PCD_MspInit+0xbc>)
 800c160:	f043 0301 	orr.w	r3, r3, #1
 800c164:	6313      	str	r3, [r2, #48]	; 0x30
 800c166:	4b22      	ldr	r3, [pc, #136]	; (800c1f0 <HAL_PCD_MspInit+0xbc>)
 800c168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c16a:	f003 0301 	and.w	r3, r3, #1
 800c16e:	613b      	str	r3, [r7, #16]
 800c170:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c172:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c178:	2300      	movs	r3, #0
 800c17a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c17c:	2300      	movs	r3, #0
 800c17e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c180:	f107 0314 	add.w	r3, r7, #20
 800c184:	4619      	mov	r1, r3
 800c186:	481b      	ldr	r0, [pc, #108]	; (800c1f4 <HAL_PCD_MspInit+0xc0>)
 800c188:	f7f7 fb62 	bl	8003850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c18c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c190:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c192:	2302      	movs	r3, #2
 800c194:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c196:	2300      	movs	r3, #0
 800c198:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800c19a:	2300      	movs	r3, #0
 800c19c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c19e:	230a      	movs	r3, #10
 800c1a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c1a2:	f107 0314 	add.w	r3, r7, #20
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	4812      	ldr	r0, [pc, #72]	; (800c1f4 <HAL_PCD_MspInit+0xc0>)
 800c1aa:	f7f7 fb51 	bl	8003850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c1ae:	4b10      	ldr	r3, [pc, #64]	; (800c1f0 <HAL_PCD_MspInit+0xbc>)
 800c1b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1b2:	4a0f      	ldr	r2, [pc, #60]	; (800c1f0 <HAL_PCD_MspInit+0xbc>)
 800c1b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1b8:	6353      	str	r3, [r2, #52]	; 0x34
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60fb      	str	r3, [r7, #12]
 800c1be:	4b0c      	ldr	r3, [pc, #48]	; (800c1f0 <HAL_PCD_MspInit+0xbc>)
 800c1c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1c2:	4a0b      	ldr	r2, [pc, #44]	; (800c1f0 <HAL_PCD_MspInit+0xbc>)
 800c1c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c1c8:	6453      	str	r3, [r2, #68]	; 0x44
 800c1ca:	4b09      	ldr	r3, [pc, #36]	; (800c1f0 <HAL_PCD_MspInit+0xbc>)
 800c1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c1d2:	60fb      	str	r3, [r7, #12]
 800c1d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2100      	movs	r1, #0
 800c1da:	2043      	movs	r0, #67	; 0x43
 800c1dc:	f7f6 fd01 	bl	8002be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c1e0:	2043      	movs	r0, #67	; 0x43
 800c1e2:	f7f6 fd1a 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c1e6:	bf00      	nop
 800c1e8:	3728      	adds	r7, #40	; 0x28
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	40023800 	.word	0x40023800
 800c1f4:	40020000 	.word	0x40020000

0800c1f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c20c:	4619      	mov	r1, r3
 800c20e:	4610      	mov	r0, r2
 800c210:	f7fe fb71 	bl	800a8f6 <USBD_LL_SetupStage>
}
 800c214:	bf00      	nop
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	460b      	mov	r3, r1
 800c226:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c22e:	78fa      	ldrb	r2, [r7, #3]
 800c230:	6879      	ldr	r1, [r7, #4]
 800c232:	4613      	mov	r3, r2
 800c234:	00db      	lsls	r3, r3, #3
 800c236:	4413      	add	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	440b      	add	r3, r1
 800c23c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c240:	681a      	ldr	r2, [r3, #0]
 800c242:	78fb      	ldrb	r3, [r7, #3]
 800c244:	4619      	mov	r1, r3
 800c246:	f7fe fbab 	bl	800a9a0 <USBD_LL_DataOutStage>
}
 800c24a:	bf00      	nop
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}

0800c252 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c252:	b580      	push	{r7, lr}
 800c254:	b082      	sub	sp, #8
 800c256:	af00      	add	r7, sp, #0
 800c258:	6078      	str	r0, [r7, #4]
 800c25a:	460b      	mov	r3, r1
 800c25c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c264:	78fa      	ldrb	r2, [r7, #3]
 800c266:	6879      	ldr	r1, [r7, #4]
 800c268:	4613      	mov	r3, r2
 800c26a:	00db      	lsls	r3, r3, #3
 800c26c:	4413      	add	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	440b      	add	r3, r1
 800c272:	334c      	adds	r3, #76	; 0x4c
 800c274:	681a      	ldr	r2, [r3, #0]
 800c276:	78fb      	ldrb	r3, [r7, #3]
 800c278:	4619      	mov	r1, r3
 800c27a:	f7fe fc44 	bl	800ab06 <USBD_LL_DataInStage>
}
 800c27e:	bf00      	nop
 800c280:	3708      	adds	r7, #8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}

0800c286 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c286:	b580      	push	{r7, lr}
 800c288:	b082      	sub	sp, #8
 800c28a:	af00      	add	r7, sp, #0
 800c28c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c294:	4618      	mov	r0, r3
 800c296:	f7fe fd78 	bl	800ad8a <USBD_LL_SOF>
}
 800c29a:	bf00      	nop
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}

0800c2a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b084      	sub	sp, #16
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	68db      	ldr	r3, [r3, #12]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d102      	bne.n	800c2bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	73fb      	strb	r3, [r7, #15]
 800c2ba:	e008      	b.n	800c2ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	68db      	ldr	r3, [r3, #12]
 800c2c0:	2b02      	cmp	r3, #2
 800c2c2:	d102      	bne.n	800c2ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	73fb      	strb	r3, [r7, #15]
 800c2c8:	e001      	b.n	800c2ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c2ca:	f7f5 fb97 	bl	80019fc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2d4:	7bfa      	ldrb	r2, [r7, #15]
 800c2d6:	4611      	mov	r1, r2
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fe fd18 	bl	800ad0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fe fcc0 	bl	800ac6a <USBD_LL_Reset>
}
 800c2ea:	bf00      	nop
 800c2ec:	3710      	adds	r7, #16
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
	...

0800c2f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b082      	sub	sp, #8
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe fd13 	bl	800ad2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	687a      	ldr	r2, [r7, #4]
 800c314:	6812      	ldr	r2, [r2, #0]
 800c316:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c31a:	f043 0301 	orr.w	r3, r3, #1
 800c31e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6a1b      	ldr	r3, [r3, #32]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d005      	beq.n	800c334 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c328:	4b04      	ldr	r3, [pc, #16]	; (800c33c <HAL_PCD_SuspendCallback+0x48>)
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	4a03      	ldr	r2, [pc, #12]	; (800c33c <HAL_PCD_SuspendCallback+0x48>)
 800c32e:	f043 0306 	orr.w	r3, r3, #6
 800c332:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c334:	bf00      	nop
 800c336:	3708      	adds	r7, #8
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	e000ed00 	.word	0xe000ed00

0800c340 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c34e:	4618      	mov	r0, r3
 800c350:	f7fe fd03 	bl	800ad5a <USBD_LL_Resume>
}
 800c354:	bf00      	nop
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b082      	sub	sp, #8
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	460b      	mov	r3, r1
 800c366:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c36e:	78fa      	ldrb	r2, [r7, #3]
 800c370:	4611      	mov	r1, r2
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe fd5b 	bl	800ae2e <USBD_LL_IsoOUTIncomplete>
}
 800c378:	bf00      	nop
 800c37a:	3708      	adds	r7, #8
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b082      	sub	sp, #8
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
 800c388:	460b      	mov	r3, r1
 800c38a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c392:	78fa      	ldrb	r2, [r7, #3]
 800c394:	4611      	mov	r1, r2
 800c396:	4618      	mov	r0, r3
 800c398:	f7fe fd17 	bl	800adca <USBD_LL_IsoINIncomplete>
}
 800c39c:	bf00      	nop
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	f7fe fd6d 	bl	800ae92 <USBD_LL_DevConnected>
}
 800c3b8:	bf00      	nop
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}

0800c3c0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b082      	sub	sp, #8
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fe fd6a 	bl	800aea8 <USBD_LL_DevDisconnected>
}
 800c3d4:	bf00      	nop
 800c3d6:	3708      	adds	r7, #8
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d13c      	bne.n	800c466 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c3ec:	4a20      	ldr	r2, [pc, #128]	; (800c470 <USBD_LL_Init+0x94>)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	4a1e      	ldr	r2, [pc, #120]	; (800c470 <USBD_LL_Init+0x94>)
 800c3f8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c3fc:	4b1c      	ldr	r3, [pc, #112]	; (800c470 <USBD_LL_Init+0x94>)
 800c3fe:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c402:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c404:	4b1a      	ldr	r3, [pc, #104]	; (800c470 <USBD_LL_Init+0x94>)
 800c406:	2204      	movs	r2, #4
 800c408:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c40a:	4b19      	ldr	r3, [pc, #100]	; (800c470 <USBD_LL_Init+0x94>)
 800c40c:	2202      	movs	r2, #2
 800c40e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c410:	4b17      	ldr	r3, [pc, #92]	; (800c470 <USBD_LL_Init+0x94>)
 800c412:	2200      	movs	r2, #0
 800c414:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c416:	4b16      	ldr	r3, [pc, #88]	; (800c470 <USBD_LL_Init+0x94>)
 800c418:	2202      	movs	r2, #2
 800c41a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c41c:	4b14      	ldr	r3, [pc, #80]	; (800c470 <USBD_LL_Init+0x94>)
 800c41e:	2200      	movs	r2, #0
 800c420:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c422:	4b13      	ldr	r3, [pc, #76]	; (800c470 <USBD_LL_Init+0x94>)
 800c424:	2200      	movs	r2, #0
 800c426:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c428:	4b11      	ldr	r3, [pc, #68]	; (800c470 <USBD_LL_Init+0x94>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c42e:	4b10      	ldr	r3, [pc, #64]	; (800c470 <USBD_LL_Init+0x94>)
 800c430:	2201      	movs	r2, #1
 800c432:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c434:	4b0e      	ldr	r3, [pc, #56]	; (800c470 <USBD_LL_Init+0x94>)
 800c436:	2200      	movs	r2, #0
 800c438:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c43a:	480d      	ldr	r0, [pc, #52]	; (800c470 <USBD_LL_Init+0x94>)
 800c43c:	f7f7 fd34 	bl	8003ea8 <HAL_PCD_Init>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d001      	beq.n	800c44a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c446:	f7f5 fad9 	bl	80019fc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c44a:	2180      	movs	r1, #128	; 0x80
 800c44c:	4808      	ldr	r0, [pc, #32]	; (800c470 <USBD_LL_Init+0x94>)
 800c44e:	f7f8 ff8c 	bl	800536a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c452:	2240      	movs	r2, #64	; 0x40
 800c454:	2100      	movs	r1, #0
 800c456:	4806      	ldr	r0, [pc, #24]	; (800c470 <USBD_LL_Init+0x94>)
 800c458:	f7f8 ff40 	bl	80052dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c45c:	2280      	movs	r2, #128	; 0x80
 800c45e:	2101      	movs	r1, #1
 800c460:	4803      	ldr	r0, [pc, #12]	; (800c470 <USBD_LL_Init+0x94>)
 800c462:	f7f8 ff3b 	bl	80052dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c466:	2300      	movs	r3, #0
}
 800c468:	4618      	mov	r0, r3
 800c46a:	3708      	adds	r7, #8
 800c46c:	46bd      	mov	sp, r7
 800c46e:	bd80      	pop	{r7, pc}
 800c470:	2000440c 	.word	0x2000440c

0800c474 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c480:	2300      	movs	r3, #0
 800c482:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7f7 fe29 	bl	80040e2 <HAL_PCD_Start>
 800c490:	4603      	mov	r3, r0
 800c492:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c494:	7bfb      	ldrb	r3, [r7, #15]
 800c496:	4618      	mov	r0, r3
 800c498:	f000 f942 	bl	800c720 <USBD_Get_USB_Status>
 800c49c:	4603      	mov	r3, r0
 800c49e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3710      	adds	r7, #16
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b084      	sub	sp, #16
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
 800c4b2:	4608      	mov	r0, r1
 800c4b4:	4611      	mov	r1, r2
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	70fb      	strb	r3, [r7, #3]
 800c4bc:	460b      	mov	r3, r1
 800c4be:	70bb      	strb	r3, [r7, #2]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c4d2:	78bb      	ldrb	r3, [r7, #2]
 800c4d4:	883a      	ldrh	r2, [r7, #0]
 800c4d6:	78f9      	ldrb	r1, [r7, #3]
 800c4d8:	f7f8 fafa 	bl	8004ad0 <HAL_PCD_EP_Open>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4e0:	7bfb      	ldrb	r3, [r7, #15]
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	f000 f91c 	bl	800c720 <USBD_Get_USB_Status>
 800c4e8:	4603      	mov	r3, r0
 800c4ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	3710      	adds	r7, #16
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	bd80      	pop	{r7, pc}

0800c4f6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4f6:	b580      	push	{r7, lr}
 800c4f8:	b084      	sub	sp, #16
 800c4fa:	af00      	add	r7, sp, #0
 800c4fc:	6078      	str	r0, [r7, #4]
 800c4fe:	460b      	mov	r3, r1
 800c500:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c502:	2300      	movs	r3, #0
 800c504:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c506:	2300      	movs	r3, #0
 800c508:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c510:	78fa      	ldrb	r2, [r7, #3]
 800c512:	4611      	mov	r1, r2
 800c514:	4618      	mov	r0, r3
 800c516:	f7f8 fb43 	bl	8004ba0 <HAL_PCD_EP_Close>
 800c51a:	4603      	mov	r3, r0
 800c51c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c51e:	7bfb      	ldrb	r3, [r7, #15]
 800c520:	4618      	mov	r0, r3
 800c522:	f000 f8fd 	bl	800c720 <USBD_Get_USB_Status>
 800c526:	4603      	mov	r3, r0
 800c528:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c52a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	460b      	mov	r3, r1
 800c53e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c544:	2300      	movs	r3, #0
 800c546:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c54e:	78fa      	ldrb	r2, [r7, #3]
 800c550:	4611      	mov	r1, r2
 800c552:	4618      	mov	r0, r3
 800c554:	f7f8 fc1b 	bl	8004d8e <HAL_PCD_EP_SetStall>
 800c558:	4603      	mov	r3, r0
 800c55a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c55c:	7bfb      	ldrb	r3, [r7, #15]
 800c55e:	4618      	mov	r0, r3
 800c560:	f000 f8de 	bl	800c720 <USBD_Get_USB_Status>
 800c564:	4603      	mov	r3, r0
 800c566:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c568:	7bbb      	ldrb	r3, [r7, #14]
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	3710      	adds	r7, #16
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}

0800c572 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c572:	b580      	push	{r7, lr}
 800c574:	b084      	sub	sp, #16
 800c576:	af00      	add	r7, sp, #0
 800c578:	6078      	str	r0, [r7, #4]
 800c57a:	460b      	mov	r3, r1
 800c57c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c57e:	2300      	movs	r3, #0
 800c580:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c582:	2300      	movs	r3, #0
 800c584:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c58c:	78fa      	ldrb	r2, [r7, #3]
 800c58e:	4611      	mov	r1, r2
 800c590:	4618      	mov	r0, r3
 800c592:	f7f8 fc60 	bl	8004e56 <HAL_PCD_EP_ClrStall>
 800c596:	4603      	mov	r3, r0
 800c598:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c59a:	7bfb      	ldrb	r3, [r7, #15]
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 f8bf 	bl	800c720 <USBD_Get_USB_Status>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c5a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3710      	adds	r7, #16
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b085      	sub	sp, #20
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	460b      	mov	r3, r1
 800c5ba:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c5c2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c5c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	da0b      	bge.n	800c5e4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c5cc:	78fb      	ldrb	r3, [r7, #3]
 800c5ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5d2:	68f9      	ldr	r1, [r7, #12]
 800c5d4:	4613      	mov	r3, r2
 800c5d6:	00db      	lsls	r3, r3, #3
 800c5d8:	4413      	add	r3, r2
 800c5da:	009b      	lsls	r3, r3, #2
 800c5dc:	440b      	add	r3, r1
 800c5de:	333e      	adds	r3, #62	; 0x3e
 800c5e0:	781b      	ldrb	r3, [r3, #0]
 800c5e2:	e00b      	b.n	800c5fc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c5e4:	78fb      	ldrb	r3, [r7, #3]
 800c5e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c5ea:	68f9      	ldr	r1, [r7, #12]
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	00db      	lsls	r3, r3, #3
 800c5f0:	4413      	add	r3, r2
 800c5f2:	009b      	lsls	r3, r3, #2
 800c5f4:	440b      	add	r3, r1
 800c5f6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c5fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3714      	adds	r7, #20
 800c600:	46bd      	mov	sp, r7
 800c602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c606:	4770      	bx	lr

0800c608 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	460b      	mov	r3, r1
 800c612:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c618:	2300      	movs	r3, #0
 800c61a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c622:	78fa      	ldrb	r2, [r7, #3]
 800c624:	4611      	mov	r1, r2
 800c626:	4618      	mov	r0, r3
 800c628:	f7f8 fa2d 	bl	8004a86 <HAL_PCD_SetAddress>
 800c62c:	4603      	mov	r3, r0
 800c62e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c630:	7bfb      	ldrb	r3, [r7, #15]
 800c632:	4618      	mov	r0, r3
 800c634:	f000 f874 	bl	800c720 <USBD_Get_USB_Status>
 800c638:	4603      	mov	r3, r0
 800c63a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c63c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b086      	sub	sp, #24
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	60f8      	str	r0, [r7, #12]
 800c64e:	607a      	str	r2, [r7, #4]
 800c650:	603b      	str	r3, [r7, #0]
 800c652:	460b      	mov	r3, r1
 800c654:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c656:	2300      	movs	r3, #0
 800c658:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c65a:	2300      	movs	r3, #0
 800c65c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c664:	7af9      	ldrb	r1, [r7, #11]
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	687a      	ldr	r2, [r7, #4]
 800c66a:	f7f8 fb46 	bl	8004cfa <HAL_PCD_EP_Transmit>
 800c66e:	4603      	mov	r3, r0
 800c670:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c672:	7dfb      	ldrb	r3, [r7, #23]
 800c674:	4618      	mov	r0, r3
 800c676:	f000 f853 	bl	800c720 <USBD_Get_USB_Status>
 800c67a:	4603      	mov	r3, r0
 800c67c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c67e:	7dbb      	ldrb	r3, [r7, #22]
}
 800c680:	4618      	mov	r0, r3
 800c682:	3718      	adds	r7, #24
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c688:	b580      	push	{r7, lr}
 800c68a:	b086      	sub	sp, #24
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	607a      	str	r2, [r7, #4]
 800c692:	603b      	str	r3, [r7, #0]
 800c694:	460b      	mov	r3, r1
 800c696:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c69c:	2300      	movs	r3, #0
 800c69e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c6a6:	7af9      	ldrb	r1, [r7, #11]
 800c6a8:	683b      	ldr	r3, [r7, #0]
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	f7f8 fac2 	bl	8004c34 <HAL_PCD_EP_Receive>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6b4:	7dfb      	ldrb	r3, [r7, #23]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f000 f832 	bl	800c720 <USBD_Get_USB_Status>
 800c6bc:	4603      	mov	r3, r0
 800c6be:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c6c0:	7dbb      	ldrb	r3, [r7, #22]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3718      	adds	r7, #24
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b082      	sub	sp, #8
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	460b      	mov	r3, r1
 800c6d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c6dc:	78fa      	ldrb	r2, [r7, #3]
 800c6de:	4611      	mov	r1, r2
 800c6e0:	4618      	mov	r0, r3
 800c6e2:	f7f8 faf2 	bl	8004cca <HAL_PCD_EP_GetRxCount>
 800c6e6:	4603      	mov	r3, r0
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3708      	adds	r7, #8
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b083      	sub	sp, #12
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c6f8:	4b03      	ldr	r3, [pc, #12]	; (800c708 <USBD_static_malloc+0x18>)
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop
 800c708:	20004918 	.word	0x20004918

0800c70c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]

}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c720:	b480      	push	{r7}
 800c722:	b085      	sub	sp, #20
 800c724:	af00      	add	r7, sp, #0
 800c726:	4603      	mov	r3, r0
 800c728:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c72a:	2300      	movs	r3, #0
 800c72c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c72e:	79fb      	ldrb	r3, [r7, #7]
 800c730:	2b03      	cmp	r3, #3
 800c732:	d817      	bhi.n	800c764 <USBD_Get_USB_Status+0x44>
 800c734:	a201      	add	r2, pc, #4	; (adr r2, 800c73c <USBD_Get_USB_Status+0x1c>)
 800c736:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c73a:	bf00      	nop
 800c73c:	0800c74d 	.word	0x0800c74d
 800c740:	0800c753 	.word	0x0800c753
 800c744:	0800c759 	.word	0x0800c759
 800c748:	0800c75f 	.word	0x0800c75f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c74c:	2300      	movs	r3, #0
 800c74e:	73fb      	strb	r3, [r7, #15]
    break;
 800c750:	e00b      	b.n	800c76a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c752:	2303      	movs	r3, #3
 800c754:	73fb      	strb	r3, [r7, #15]
    break;
 800c756:	e008      	b.n	800c76a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c758:	2301      	movs	r3, #1
 800c75a:	73fb      	strb	r3, [r7, #15]
    break;
 800c75c:	e005      	b.n	800c76a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c75e:	2303      	movs	r3, #3
 800c760:	73fb      	strb	r3, [r7, #15]
    break;
 800c762:	e002      	b.n	800c76a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c764:	2303      	movs	r3, #3
 800c766:	73fb      	strb	r3, [r7, #15]
    break;
 800c768:	bf00      	nop
  }
  return usb_status;
 800c76a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3714      	adds	r7, #20
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <__errno>:
 800c778:	4b01      	ldr	r3, [pc, #4]	; (800c780 <__errno+0x8>)
 800c77a:	6818      	ldr	r0, [r3, #0]
 800c77c:	4770      	bx	lr
 800c77e:	bf00      	nop
 800c780:	200000fc 	.word	0x200000fc

0800c784 <__libc_init_array>:
 800c784:	b570      	push	{r4, r5, r6, lr}
 800c786:	4d0d      	ldr	r5, [pc, #52]	; (800c7bc <__libc_init_array+0x38>)
 800c788:	4c0d      	ldr	r4, [pc, #52]	; (800c7c0 <__libc_init_array+0x3c>)
 800c78a:	1b64      	subs	r4, r4, r5
 800c78c:	10a4      	asrs	r4, r4, #2
 800c78e:	2600      	movs	r6, #0
 800c790:	42a6      	cmp	r6, r4
 800c792:	d109      	bne.n	800c7a8 <__libc_init_array+0x24>
 800c794:	4d0b      	ldr	r5, [pc, #44]	; (800c7c4 <__libc_init_array+0x40>)
 800c796:	4c0c      	ldr	r4, [pc, #48]	; (800c7c8 <__libc_init_array+0x44>)
 800c798:	f001 f9b0 	bl	800dafc <_init>
 800c79c:	1b64      	subs	r4, r4, r5
 800c79e:	10a4      	asrs	r4, r4, #2
 800c7a0:	2600      	movs	r6, #0
 800c7a2:	42a6      	cmp	r6, r4
 800c7a4:	d105      	bne.n	800c7b2 <__libc_init_array+0x2e>
 800c7a6:	bd70      	pop	{r4, r5, r6, pc}
 800c7a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7ac:	4798      	blx	r3
 800c7ae:	3601      	adds	r6, #1
 800c7b0:	e7ee      	b.n	800c790 <__libc_init_array+0xc>
 800c7b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7b6:	4798      	blx	r3
 800c7b8:	3601      	adds	r6, #1
 800c7ba:	e7f2      	b.n	800c7a2 <__libc_init_array+0x1e>
 800c7bc:	0800ea40 	.word	0x0800ea40
 800c7c0:	0800ea40 	.word	0x0800ea40
 800c7c4:	0800ea40 	.word	0x0800ea40
 800c7c8:	0800ea44 	.word	0x0800ea44

0800c7cc <memcmp>:
 800c7cc:	b510      	push	{r4, lr}
 800c7ce:	3901      	subs	r1, #1
 800c7d0:	4402      	add	r2, r0
 800c7d2:	4290      	cmp	r0, r2
 800c7d4:	d101      	bne.n	800c7da <memcmp+0xe>
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	e005      	b.n	800c7e6 <memcmp+0x1a>
 800c7da:	7803      	ldrb	r3, [r0, #0]
 800c7dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c7e0:	42a3      	cmp	r3, r4
 800c7e2:	d001      	beq.n	800c7e8 <memcmp+0x1c>
 800c7e4:	1b18      	subs	r0, r3, r4
 800c7e6:	bd10      	pop	{r4, pc}
 800c7e8:	3001      	adds	r0, #1
 800c7ea:	e7f2      	b.n	800c7d2 <memcmp+0x6>

0800c7ec <memcpy>:
 800c7ec:	440a      	add	r2, r1
 800c7ee:	4291      	cmp	r1, r2
 800c7f0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c7f4:	d100      	bne.n	800c7f8 <memcpy+0xc>
 800c7f6:	4770      	bx	lr
 800c7f8:	b510      	push	{r4, lr}
 800c7fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c802:	4291      	cmp	r1, r2
 800c804:	d1f9      	bne.n	800c7fa <memcpy+0xe>
 800c806:	bd10      	pop	{r4, pc}

0800c808 <memset>:
 800c808:	4402      	add	r2, r0
 800c80a:	4603      	mov	r3, r0
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d100      	bne.n	800c812 <memset+0xa>
 800c810:	4770      	bx	lr
 800c812:	f803 1b01 	strb.w	r1, [r3], #1
 800c816:	e7f9      	b.n	800c80c <memset+0x4>

0800c818 <iprintf>:
 800c818:	b40f      	push	{r0, r1, r2, r3}
 800c81a:	4b0a      	ldr	r3, [pc, #40]	; (800c844 <iprintf+0x2c>)
 800c81c:	b513      	push	{r0, r1, r4, lr}
 800c81e:	681c      	ldr	r4, [r3, #0]
 800c820:	b124      	cbz	r4, 800c82c <iprintf+0x14>
 800c822:	69a3      	ldr	r3, [r4, #24]
 800c824:	b913      	cbnz	r3, 800c82c <iprintf+0x14>
 800c826:	4620      	mov	r0, r4
 800c828:	f000 f89c 	bl	800c964 <__sinit>
 800c82c:	ab05      	add	r3, sp, #20
 800c82e:	9a04      	ldr	r2, [sp, #16]
 800c830:	68a1      	ldr	r1, [r4, #8]
 800c832:	9301      	str	r3, [sp, #4]
 800c834:	4620      	mov	r0, r4
 800c836:	f000 fb4f 	bl	800ced8 <_vfiprintf_r>
 800c83a:	b002      	add	sp, #8
 800c83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c840:	b004      	add	sp, #16
 800c842:	4770      	bx	lr
 800c844:	200000fc 	.word	0x200000fc

0800c848 <siprintf>:
 800c848:	b40e      	push	{r1, r2, r3}
 800c84a:	b500      	push	{lr}
 800c84c:	b09c      	sub	sp, #112	; 0x70
 800c84e:	ab1d      	add	r3, sp, #116	; 0x74
 800c850:	9002      	str	r0, [sp, #8]
 800c852:	9006      	str	r0, [sp, #24]
 800c854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c858:	4809      	ldr	r0, [pc, #36]	; (800c880 <siprintf+0x38>)
 800c85a:	9107      	str	r1, [sp, #28]
 800c85c:	9104      	str	r1, [sp, #16]
 800c85e:	4909      	ldr	r1, [pc, #36]	; (800c884 <siprintf+0x3c>)
 800c860:	f853 2b04 	ldr.w	r2, [r3], #4
 800c864:	9105      	str	r1, [sp, #20]
 800c866:	6800      	ldr	r0, [r0, #0]
 800c868:	9301      	str	r3, [sp, #4]
 800c86a:	a902      	add	r1, sp, #8
 800c86c:	f000 fa0a 	bl	800cc84 <_svfiprintf_r>
 800c870:	9b02      	ldr	r3, [sp, #8]
 800c872:	2200      	movs	r2, #0
 800c874:	701a      	strb	r2, [r3, #0]
 800c876:	b01c      	add	sp, #112	; 0x70
 800c878:	f85d eb04 	ldr.w	lr, [sp], #4
 800c87c:	b003      	add	sp, #12
 800c87e:	4770      	bx	lr
 800c880:	200000fc 	.word	0x200000fc
 800c884:	ffff0208 	.word	0xffff0208

0800c888 <strstr>:
 800c888:	780a      	ldrb	r2, [r1, #0]
 800c88a:	b570      	push	{r4, r5, r6, lr}
 800c88c:	b96a      	cbnz	r2, 800c8aa <strstr+0x22>
 800c88e:	bd70      	pop	{r4, r5, r6, pc}
 800c890:	429a      	cmp	r2, r3
 800c892:	d109      	bne.n	800c8a8 <strstr+0x20>
 800c894:	460c      	mov	r4, r1
 800c896:	4605      	mov	r5, r0
 800c898:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d0f6      	beq.n	800c88e <strstr+0x6>
 800c8a0:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c8a4:	429e      	cmp	r6, r3
 800c8a6:	d0f7      	beq.n	800c898 <strstr+0x10>
 800c8a8:	3001      	adds	r0, #1
 800c8aa:	7803      	ldrb	r3, [r0, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d1ef      	bne.n	800c890 <strstr+0x8>
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	e7ec      	b.n	800c88e <strstr+0x6>

0800c8b4 <std>:
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	b510      	push	{r4, lr}
 800c8b8:	4604      	mov	r4, r0
 800c8ba:	e9c0 3300 	strd	r3, r3, [r0]
 800c8be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c8c2:	6083      	str	r3, [r0, #8]
 800c8c4:	8181      	strh	r1, [r0, #12]
 800c8c6:	6643      	str	r3, [r0, #100]	; 0x64
 800c8c8:	81c2      	strh	r2, [r0, #14]
 800c8ca:	6183      	str	r3, [r0, #24]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	2208      	movs	r2, #8
 800c8d0:	305c      	adds	r0, #92	; 0x5c
 800c8d2:	f7ff ff99 	bl	800c808 <memset>
 800c8d6:	4b05      	ldr	r3, [pc, #20]	; (800c8ec <std+0x38>)
 800c8d8:	6263      	str	r3, [r4, #36]	; 0x24
 800c8da:	4b05      	ldr	r3, [pc, #20]	; (800c8f0 <std+0x3c>)
 800c8dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c8de:	4b05      	ldr	r3, [pc, #20]	; (800c8f4 <std+0x40>)
 800c8e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c8e2:	4b05      	ldr	r3, [pc, #20]	; (800c8f8 <std+0x44>)
 800c8e4:	6224      	str	r4, [r4, #32]
 800c8e6:	6323      	str	r3, [r4, #48]	; 0x30
 800c8e8:	bd10      	pop	{r4, pc}
 800c8ea:	bf00      	nop
 800c8ec:	0800d481 	.word	0x0800d481
 800c8f0:	0800d4a3 	.word	0x0800d4a3
 800c8f4:	0800d4db 	.word	0x0800d4db
 800c8f8:	0800d4ff 	.word	0x0800d4ff

0800c8fc <_cleanup_r>:
 800c8fc:	4901      	ldr	r1, [pc, #4]	; (800c904 <_cleanup_r+0x8>)
 800c8fe:	f000 b8af 	b.w	800ca60 <_fwalk_reent>
 800c902:	bf00      	nop
 800c904:	0800d7d9 	.word	0x0800d7d9

0800c908 <__sfmoreglue>:
 800c908:	b570      	push	{r4, r5, r6, lr}
 800c90a:	2268      	movs	r2, #104	; 0x68
 800c90c:	1e4d      	subs	r5, r1, #1
 800c90e:	4355      	muls	r5, r2
 800c910:	460e      	mov	r6, r1
 800c912:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c916:	f000 f8e5 	bl	800cae4 <_malloc_r>
 800c91a:	4604      	mov	r4, r0
 800c91c:	b140      	cbz	r0, 800c930 <__sfmoreglue+0x28>
 800c91e:	2100      	movs	r1, #0
 800c920:	e9c0 1600 	strd	r1, r6, [r0]
 800c924:	300c      	adds	r0, #12
 800c926:	60a0      	str	r0, [r4, #8]
 800c928:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c92c:	f7ff ff6c 	bl	800c808 <memset>
 800c930:	4620      	mov	r0, r4
 800c932:	bd70      	pop	{r4, r5, r6, pc}

0800c934 <__sfp_lock_acquire>:
 800c934:	4801      	ldr	r0, [pc, #4]	; (800c93c <__sfp_lock_acquire+0x8>)
 800c936:	f000 b8b3 	b.w	800caa0 <__retarget_lock_acquire_recursive>
 800c93a:	bf00      	nop
 800c93c:	20004b39 	.word	0x20004b39

0800c940 <__sfp_lock_release>:
 800c940:	4801      	ldr	r0, [pc, #4]	; (800c948 <__sfp_lock_release+0x8>)
 800c942:	f000 b8ae 	b.w	800caa2 <__retarget_lock_release_recursive>
 800c946:	bf00      	nop
 800c948:	20004b39 	.word	0x20004b39

0800c94c <__sinit_lock_acquire>:
 800c94c:	4801      	ldr	r0, [pc, #4]	; (800c954 <__sinit_lock_acquire+0x8>)
 800c94e:	f000 b8a7 	b.w	800caa0 <__retarget_lock_acquire_recursive>
 800c952:	bf00      	nop
 800c954:	20004b3a 	.word	0x20004b3a

0800c958 <__sinit_lock_release>:
 800c958:	4801      	ldr	r0, [pc, #4]	; (800c960 <__sinit_lock_release+0x8>)
 800c95a:	f000 b8a2 	b.w	800caa2 <__retarget_lock_release_recursive>
 800c95e:	bf00      	nop
 800c960:	20004b3a 	.word	0x20004b3a

0800c964 <__sinit>:
 800c964:	b510      	push	{r4, lr}
 800c966:	4604      	mov	r4, r0
 800c968:	f7ff fff0 	bl	800c94c <__sinit_lock_acquire>
 800c96c:	69a3      	ldr	r3, [r4, #24]
 800c96e:	b11b      	cbz	r3, 800c978 <__sinit+0x14>
 800c970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c974:	f7ff bff0 	b.w	800c958 <__sinit_lock_release>
 800c978:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c97c:	6523      	str	r3, [r4, #80]	; 0x50
 800c97e:	4b13      	ldr	r3, [pc, #76]	; (800c9cc <__sinit+0x68>)
 800c980:	4a13      	ldr	r2, [pc, #76]	; (800c9d0 <__sinit+0x6c>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	62a2      	str	r2, [r4, #40]	; 0x28
 800c986:	42a3      	cmp	r3, r4
 800c988:	bf04      	itt	eq
 800c98a:	2301      	moveq	r3, #1
 800c98c:	61a3      	streq	r3, [r4, #24]
 800c98e:	4620      	mov	r0, r4
 800c990:	f000 f820 	bl	800c9d4 <__sfp>
 800c994:	6060      	str	r0, [r4, #4]
 800c996:	4620      	mov	r0, r4
 800c998:	f000 f81c 	bl	800c9d4 <__sfp>
 800c99c:	60a0      	str	r0, [r4, #8]
 800c99e:	4620      	mov	r0, r4
 800c9a0:	f000 f818 	bl	800c9d4 <__sfp>
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	60e0      	str	r0, [r4, #12]
 800c9a8:	2104      	movs	r1, #4
 800c9aa:	6860      	ldr	r0, [r4, #4]
 800c9ac:	f7ff ff82 	bl	800c8b4 <std>
 800c9b0:	68a0      	ldr	r0, [r4, #8]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	2109      	movs	r1, #9
 800c9b6:	f7ff ff7d 	bl	800c8b4 <std>
 800c9ba:	68e0      	ldr	r0, [r4, #12]
 800c9bc:	2202      	movs	r2, #2
 800c9be:	2112      	movs	r1, #18
 800c9c0:	f7ff ff78 	bl	800c8b4 <std>
 800c9c4:	2301      	movs	r3, #1
 800c9c6:	61a3      	str	r3, [r4, #24]
 800c9c8:	e7d2      	b.n	800c970 <__sinit+0xc>
 800c9ca:	bf00      	nop
 800c9cc:	0800e9a0 	.word	0x0800e9a0
 800c9d0:	0800c8fd 	.word	0x0800c8fd

0800c9d4 <__sfp>:
 800c9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9d6:	4607      	mov	r7, r0
 800c9d8:	f7ff ffac 	bl	800c934 <__sfp_lock_acquire>
 800c9dc:	4b1e      	ldr	r3, [pc, #120]	; (800ca58 <__sfp+0x84>)
 800c9de:	681e      	ldr	r6, [r3, #0]
 800c9e0:	69b3      	ldr	r3, [r6, #24]
 800c9e2:	b913      	cbnz	r3, 800c9ea <__sfp+0x16>
 800c9e4:	4630      	mov	r0, r6
 800c9e6:	f7ff ffbd 	bl	800c964 <__sinit>
 800c9ea:	3648      	adds	r6, #72	; 0x48
 800c9ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	d503      	bpl.n	800c9fc <__sfp+0x28>
 800c9f4:	6833      	ldr	r3, [r6, #0]
 800c9f6:	b30b      	cbz	r3, 800ca3c <__sfp+0x68>
 800c9f8:	6836      	ldr	r6, [r6, #0]
 800c9fa:	e7f7      	b.n	800c9ec <__sfp+0x18>
 800c9fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ca00:	b9d5      	cbnz	r5, 800ca38 <__sfp+0x64>
 800ca02:	4b16      	ldr	r3, [pc, #88]	; (800ca5c <__sfp+0x88>)
 800ca04:	60e3      	str	r3, [r4, #12]
 800ca06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ca0a:	6665      	str	r5, [r4, #100]	; 0x64
 800ca0c:	f000 f847 	bl	800ca9e <__retarget_lock_init_recursive>
 800ca10:	f7ff ff96 	bl	800c940 <__sfp_lock_release>
 800ca14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ca18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ca1c:	6025      	str	r5, [r4, #0]
 800ca1e:	61a5      	str	r5, [r4, #24]
 800ca20:	2208      	movs	r2, #8
 800ca22:	4629      	mov	r1, r5
 800ca24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ca28:	f7ff feee 	bl	800c808 <memset>
 800ca2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ca30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ca34:	4620      	mov	r0, r4
 800ca36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca38:	3468      	adds	r4, #104	; 0x68
 800ca3a:	e7d9      	b.n	800c9f0 <__sfp+0x1c>
 800ca3c:	2104      	movs	r1, #4
 800ca3e:	4638      	mov	r0, r7
 800ca40:	f7ff ff62 	bl	800c908 <__sfmoreglue>
 800ca44:	4604      	mov	r4, r0
 800ca46:	6030      	str	r0, [r6, #0]
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d1d5      	bne.n	800c9f8 <__sfp+0x24>
 800ca4c:	f7ff ff78 	bl	800c940 <__sfp_lock_release>
 800ca50:	230c      	movs	r3, #12
 800ca52:	603b      	str	r3, [r7, #0]
 800ca54:	e7ee      	b.n	800ca34 <__sfp+0x60>
 800ca56:	bf00      	nop
 800ca58:	0800e9a0 	.word	0x0800e9a0
 800ca5c:	ffff0001 	.word	0xffff0001

0800ca60 <_fwalk_reent>:
 800ca60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca64:	4606      	mov	r6, r0
 800ca66:	4688      	mov	r8, r1
 800ca68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca6c:	2700      	movs	r7, #0
 800ca6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca72:	f1b9 0901 	subs.w	r9, r9, #1
 800ca76:	d505      	bpl.n	800ca84 <_fwalk_reent+0x24>
 800ca78:	6824      	ldr	r4, [r4, #0]
 800ca7a:	2c00      	cmp	r4, #0
 800ca7c:	d1f7      	bne.n	800ca6e <_fwalk_reent+0xe>
 800ca7e:	4638      	mov	r0, r7
 800ca80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca84:	89ab      	ldrh	r3, [r5, #12]
 800ca86:	2b01      	cmp	r3, #1
 800ca88:	d907      	bls.n	800ca9a <_fwalk_reent+0x3a>
 800ca8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca8e:	3301      	adds	r3, #1
 800ca90:	d003      	beq.n	800ca9a <_fwalk_reent+0x3a>
 800ca92:	4629      	mov	r1, r5
 800ca94:	4630      	mov	r0, r6
 800ca96:	47c0      	blx	r8
 800ca98:	4307      	orrs	r7, r0
 800ca9a:	3568      	adds	r5, #104	; 0x68
 800ca9c:	e7e9      	b.n	800ca72 <_fwalk_reent+0x12>

0800ca9e <__retarget_lock_init_recursive>:
 800ca9e:	4770      	bx	lr

0800caa0 <__retarget_lock_acquire_recursive>:
 800caa0:	4770      	bx	lr

0800caa2 <__retarget_lock_release_recursive>:
 800caa2:	4770      	bx	lr

0800caa4 <sbrk_aligned>:
 800caa4:	b570      	push	{r4, r5, r6, lr}
 800caa6:	4e0e      	ldr	r6, [pc, #56]	; (800cae0 <sbrk_aligned+0x3c>)
 800caa8:	460c      	mov	r4, r1
 800caaa:	6831      	ldr	r1, [r6, #0]
 800caac:	4605      	mov	r5, r0
 800caae:	b911      	cbnz	r1, 800cab6 <sbrk_aligned+0x12>
 800cab0:	f000 fcd6 	bl	800d460 <_sbrk_r>
 800cab4:	6030      	str	r0, [r6, #0]
 800cab6:	4621      	mov	r1, r4
 800cab8:	4628      	mov	r0, r5
 800caba:	f000 fcd1 	bl	800d460 <_sbrk_r>
 800cabe:	1c43      	adds	r3, r0, #1
 800cac0:	d00a      	beq.n	800cad8 <sbrk_aligned+0x34>
 800cac2:	1cc4      	adds	r4, r0, #3
 800cac4:	f024 0403 	bic.w	r4, r4, #3
 800cac8:	42a0      	cmp	r0, r4
 800caca:	d007      	beq.n	800cadc <sbrk_aligned+0x38>
 800cacc:	1a21      	subs	r1, r4, r0
 800cace:	4628      	mov	r0, r5
 800cad0:	f000 fcc6 	bl	800d460 <_sbrk_r>
 800cad4:	3001      	adds	r0, #1
 800cad6:	d101      	bne.n	800cadc <sbrk_aligned+0x38>
 800cad8:	f04f 34ff 	mov.w	r4, #4294967295
 800cadc:	4620      	mov	r0, r4
 800cade:	bd70      	pop	{r4, r5, r6, pc}
 800cae0:	20004b40 	.word	0x20004b40

0800cae4 <_malloc_r>:
 800cae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cae8:	1ccd      	adds	r5, r1, #3
 800caea:	f025 0503 	bic.w	r5, r5, #3
 800caee:	3508      	adds	r5, #8
 800caf0:	2d0c      	cmp	r5, #12
 800caf2:	bf38      	it	cc
 800caf4:	250c      	movcc	r5, #12
 800caf6:	2d00      	cmp	r5, #0
 800caf8:	4607      	mov	r7, r0
 800cafa:	db01      	blt.n	800cb00 <_malloc_r+0x1c>
 800cafc:	42a9      	cmp	r1, r5
 800cafe:	d905      	bls.n	800cb0c <_malloc_r+0x28>
 800cb00:	230c      	movs	r3, #12
 800cb02:	603b      	str	r3, [r7, #0]
 800cb04:	2600      	movs	r6, #0
 800cb06:	4630      	mov	r0, r6
 800cb08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb0c:	4e2e      	ldr	r6, [pc, #184]	; (800cbc8 <_malloc_r+0xe4>)
 800cb0e:	f000 ff31 	bl	800d974 <__malloc_lock>
 800cb12:	6833      	ldr	r3, [r6, #0]
 800cb14:	461c      	mov	r4, r3
 800cb16:	bb34      	cbnz	r4, 800cb66 <_malloc_r+0x82>
 800cb18:	4629      	mov	r1, r5
 800cb1a:	4638      	mov	r0, r7
 800cb1c:	f7ff ffc2 	bl	800caa4 <sbrk_aligned>
 800cb20:	1c43      	adds	r3, r0, #1
 800cb22:	4604      	mov	r4, r0
 800cb24:	d14d      	bne.n	800cbc2 <_malloc_r+0xde>
 800cb26:	6834      	ldr	r4, [r6, #0]
 800cb28:	4626      	mov	r6, r4
 800cb2a:	2e00      	cmp	r6, #0
 800cb2c:	d140      	bne.n	800cbb0 <_malloc_r+0xcc>
 800cb2e:	6823      	ldr	r3, [r4, #0]
 800cb30:	4631      	mov	r1, r6
 800cb32:	4638      	mov	r0, r7
 800cb34:	eb04 0803 	add.w	r8, r4, r3
 800cb38:	f000 fc92 	bl	800d460 <_sbrk_r>
 800cb3c:	4580      	cmp	r8, r0
 800cb3e:	d13a      	bne.n	800cbb6 <_malloc_r+0xd2>
 800cb40:	6821      	ldr	r1, [r4, #0]
 800cb42:	3503      	adds	r5, #3
 800cb44:	1a6d      	subs	r5, r5, r1
 800cb46:	f025 0503 	bic.w	r5, r5, #3
 800cb4a:	3508      	adds	r5, #8
 800cb4c:	2d0c      	cmp	r5, #12
 800cb4e:	bf38      	it	cc
 800cb50:	250c      	movcc	r5, #12
 800cb52:	4629      	mov	r1, r5
 800cb54:	4638      	mov	r0, r7
 800cb56:	f7ff ffa5 	bl	800caa4 <sbrk_aligned>
 800cb5a:	3001      	adds	r0, #1
 800cb5c:	d02b      	beq.n	800cbb6 <_malloc_r+0xd2>
 800cb5e:	6823      	ldr	r3, [r4, #0]
 800cb60:	442b      	add	r3, r5
 800cb62:	6023      	str	r3, [r4, #0]
 800cb64:	e00e      	b.n	800cb84 <_malloc_r+0xa0>
 800cb66:	6822      	ldr	r2, [r4, #0]
 800cb68:	1b52      	subs	r2, r2, r5
 800cb6a:	d41e      	bmi.n	800cbaa <_malloc_r+0xc6>
 800cb6c:	2a0b      	cmp	r2, #11
 800cb6e:	d916      	bls.n	800cb9e <_malloc_r+0xba>
 800cb70:	1961      	adds	r1, r4, r5
 800cb72:	42a3      	cmp	r3, r4
 800cb74:	6025      	str	r5, [r4, #0]
 800cb76:	bf18      	it	ne
 800cb78:	6059      	strne	r1, [r3, #4]
 800cb7a:	6863      	ldr	r3, [r4, #4]
 800cb7c:	bf08      	it	eq
 800cb7e:	6031      	streq	r1, [r6, #0]
 800cb80:	5162      	str	r2, [r4, r5]
 800cb82:	604b      	str	r3, [r1, #4]
 800cb84:	4638      	mov	r0, r7
 800cb86:	f104 060b 	add.w	r6, r4, #11
 800cb8a:	f000 fef9 	bl	800d980 <__malloc_unlock>
 800cb8e:	f026 0607 	bic.w	r6, r6, #7
 800cb92:	1d23      	adds	r3, r4, #4
 800cb94:	1af2      	subs	r2, r6, r3
 800cb96:	d0b6      	beq.n	800cb06 <_malloc_r+0x22>
 800cb98:	1b9b      	subs	r3, r3, r6
 800cb9a:	50a3      	str	r3, [r4, r2]
 800cb9c:	e7b3      	b.n	800cb06 <_malloc_r+0x22>
 800cb9e:	6862      	ldr	r2, [r4, #4]
 800cba0:	42a3      	cmp	r3, r4
 800cba2:	bf0c      	ite	eq
 800cba4:	6032      	streq	r2, [r6, #0]
 800cba6:	605a      	strne	r2, [r3, #4]
 800cba8:	e7ec      	b.n	800cb84 <_malloc_r+0xa0>
 800cbaa:	4623      	mov	r3, r4
 800cbac:	6864      	ldr	r4, [r4, #4]
 800cbae:	e7b2      	b.n	800cb16 <_malloc_r+0x32>
 800cbb0:	4634      	mov	r4, r6
 800cbb2:	6876      	ldr	r6, [r6, #4]
 800cbb4:	e7b9      	b.n	800cb2a <_malloc_r+0x46>
 800cbb6:	230c      	movs	r3, #12
 800cbb8:	603b      	str	r3, [r7, #0]
 800cbba:	4638      	mov	r0, r7
 800cbbc:	f000 fee0 	bl	800d980 <__malloc_unlock>
 800cbc0:	e7a1      	b.n	800cb06 <_malloc_r+0x22>
 800cbc2:	6025      	str	r5, [r4, #0]
 800cbc4:	e7de      	b.n	800cb84 <_malloc_r+0xa0>
 800cbc6:	bf00      	nop
 800cbc8:	20004b3c 	.word	0x20004b3c

0800cbcc <__ssputs_r>:
 800cbcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbd0:	688e      	ldr	r6, [r1, #8]
 800cbd2:	429e      	cmp	r6, r3
 800cbd4:	4682      	mov	sl, r0
 800cbd6:	460c      	mov	r4, r1
 800cbd8:	4690      	mov	r8, r2
 800cbda:	461f      	mov	r7, r3
 800cbdc:	d838      	bhi.n	800cc50 <__ssputs_r+0x84>
 800cbde:	898a      	ldrh	r2, [r1, #12]
 800cbe0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbe4:	d032      	beq.n	800cc4c <__ssputs_r+0x80>
 800cbe6:	6825      	ldr	r5, [r4, #0]
 800cbe8:	6909      	ldr	r1, [r1, #16]
 800cbea:	eba5 0901 	sub.w	r9, r5, r1
 800cbee:	6965      	ldr	r5, [r4, #20]
 800cbf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbf8:	3301      	adds	r3, #1
 800cbfa:	444b      	add	r3, r9
 800cbfc:	106d      	asrs	r5, r5, #1
 800cbfe:	429d      	cmp	r5, r3
 800cc00:	bf38      	it	cc
 800cc02:	461d      	movcc	r5, r3
 800cc04:	0553      	lsls	r3, r2, #21
 800cc06:	d531      	bpl.n	800cc6c <__ssputs_r+0xa0>
 800cc08:	4629      	mov	r1, r5
 800cc0a:	f7ff ff6b 	bl	800cae4 <_malloc_r>
 800cc0e:	4606      	mov	r6, r0
 800cc10:	b950      	cbnz	r0, 800cc28 <__ssputs_r+0x5c>
 800cc12:	230c      	movs	r3, #12
 800cc14:	f8ca 3000 	str.w	r3, [sl]
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc1e:	81a3      	strh	r3, [r4, #12]
 800cc20:	f04f 30ff 	mov.w	r0, #4294967295
 800cc24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc28:	6921      	ldr	r1, [r4, #16]
 800cc2a:	464a      	mov	r2, r9
 800cc2c:	f7ff fdde 	bl	800c7ec <memcpy>
 800cc30:	89a3      	ldrh	r3, [r4, #12]
 800cc32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc3a:	81a3      	strh	r3, [r4, #12]
 800cc3c:	6126      	str	r6, [r4, #16]
 800cc3e:	6165      	str	r5, [r4, #20]
 800cc40:	444e      	add	r6, r9
 800cc42:	eba5 0509 	sub.w	r5, r5, r9
 800cc46:	6026      	str	r6, [r4, #0]
 800cc48:	60a5      	str	r5, [r4, #8]
 800cc4a:	463e      	mov	r6, r7
 800cc4c:	42be      	cmp	r6, r7
 800cc4e:	d900      	bls.n	800cc52 <__ssputs_r+0x86>
 800cc50:	463e      	mov	r6, r7
 800cc52:	6820      	ldr	r0, [r4, #0]
 800cc54:	4632      	mov	r2, r6
 800cc56:	4641      	mov	r1, r8
 800cc58:	f000 fe72 	bl	800d940 <memmove>
 800cc5c:	68a3      	ldr	r3, [r4, #8]
 800cc5e:	1b9b      	subs	r3, r3, r6
 800cc60:	60a3      	str	r3, [r4, #8]
 800cc62:	6823      	ldr	r3, [r4, #0]
 800cc64:	4433      	add	r3, r6
 800cc66:	6023      	str	r3, [r4, #0]
 800cc68:	2000      	movs	r0, #0
 800cc6a:	e7db      	b.n	800cc24 <__ssputs_r+0x58>
 800cc6c:	462a      	mov	r2, r5
 800cc6e:	f000 fed9 	bl	800da24 <_realloc_r>
 800cc72:	4606      	mov	r6, r0
 800cc74:	2800      	cmp	r0, #0
 800cc76:	d1e1      	bne.n	800cc3c <__ssputs_r+0x70>
 800cc78:	6921      	ldr	r1, [r4, #16]
 800cc7a:	4650      	mov	r0, sl
 800cc7c:	f000 fe86 	bl	800d98c <_free_r>
 800cc80:	e7c7      	b.n	800cc12 <__ssputs_r+0x46>
	...

0800cc84 <_svfiprintf_r>:
 800cc84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc88:	4698      	mov	r8, r3
 800cc8a:	898b      	ldrh	r3, [r1, #12]
 800cc8c:	061b      	lsls	r3, r3, #24
 800cc8e:	b09d      	sub	sp, #116	; 0x74
 800cc90:	4607      	mov	r7, r0
 800cc92:	460d      	mov	r5, r1
 800cc94:	4614      	mov	r4, r2
 800cc96:	d50e      	bpl.n	800ccb6 <_svfiprintf_r+0x32>
 800cc98:	690b      	ldr	r3, [r1, #16]
 800cc9a:	b963      	cbnz	r3, 800ccb6 <_svfiprintf_r+0x32>
 800cc9c:	2140      	movs	r1, #64	; 0x40
 800cc9e:	f7ff ff21 	bl	800cae4 <_malloc_r>
 800cca2:	6028      	str	r0, [r5, #0]
 800cca4:	6128      	str	r0, [r5, #16]
 800cca6:	b920      	cbnz	r0, 800ccb2 <_svfiprintf_r+0x2e>
 800cca8:	230c      	movs	r3, #12
 800ccaa:	603b      	str	r3, [r7, #0]
 800ccac:	f04f 30ff 	mov.w	r0, #4294967295
 800ccb0:	e0d1      	b.n	800ce56 <_svfiprintf_r+0x1d2>
 800ccb2:	2340      	movs	r3, #64	; 0x40
 800ccb4:	616b      	str	r3, [r5, #20]
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	9309      	str	r3, [sp, #36]	; 0x24
 800ccba:	2320      	movs	r3, #32
 800ccbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccc4:	2330      	movs	r3, #48	; 0x30
 800ccc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ce70 <_svfiprintf_r+0x1ec>
 800ccca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccce:	f04f 0901 	mov.w	r9, #1
 800ccd2:	4623      	mov	r3, r4
 800ccd4:	469a      	mov	sl, r3
 800ccd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccda:	b10a      	cbz	r2, 800cce0 <_svfiprintf_r+0x5c>
 800ccdc:	2a25      	cmp	r2, #37	; 0x25
 800ccde:	d1f9      	bne.n	800ccd4 <_svfiprintf_r+0x50>
 800cce0:	ebba 0b04 	subs.w	fp, sl, r4
 800cce4:	d00b      	beq.n	800ccfe <_svfiprintf_r+0x7a>
 800cce6:	465b      	mov	r3, fp
 800cce8:	4622      	mov	r2, r4
 800ccea:	4629      	mov	r1, r5
 800ccec:	4638      	mov	r0, r7
 800ccee:	f7ff ff6d 	bl	800cbcc <__ssputs_r>
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	f000 80aa 	beq.w	800ce4c <_svfiprintf_r+0x1c8>
 800ccf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccfa:	445a      	add	r2, fp
 800ccfc:	9209      	str	r2, [sp, #36]	; 0x24
 800ccfe:	f89a 3000 	ldrb.w	r3, [sl]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	f000 80a2 	beq.w	800ce4c <_svfiprintf_r+0x1c8>
 800cd08:	2300      	movs	r3, #0
 800cd0a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd12:	f10a 0a01 	add.w	sl, sl, #1
 800cd16:	9304      	str	r3, [sp, #16]
 800cd18:	9307      	str	r3, [sp, #28]
 800cd1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd1e:	931a      	str	r3, [sp, #104]	; 0x68
 800cd20:	4654      	mov	r4, sl
 800cd22:	2205      	movs	r2, #5
 800cd24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd28:	4851      	ldr	r0, [pc, #324]	; (800ce70 <_svfiprintf_r+0x1ec>)
 800cd2a:	f7f3 fa51 	bl	80001d0 <memchr>
 800cd2e:	9a04      	ldr	r2, [sp, #16]
 800cd30:	b9d8      	cbnz	r0, 800cd6a <_svfiprintf_r+0xe6>
 800cd32:	06d0      	lsls	r0, r2, #27
 800cd34:	bf44      	itt	mi
 800cd36:	2320      	movmi	r3, #32
 800cd38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd3c:	0711      	lsls	r1, r2, #28
 800cd3e:	bf44      	itt	mi
 800cd40:	232b      	movmi	r3, #43	; 0x2b
 800cd42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd46:	f89a 3000 	ldrb.w	r3, [sl]
 800cd4a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd4c:	d015      	beq.n	800cd7a <_svfiprintf_r+0xf6>
 800cd4e:	9a07      	ldr	r2, [sp, #28]
 800cd50:	4654      	mov	r4, sl
 800cd52:	2000      	movs	r0, #0
 800cd54:	f04f 0c0a 	mov.w	ip, #10
 800cd58:	4621      	mov	r1, r4
 800cd5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd5e:	3b30      	subs	r3, #48	; 0x30
 800cd60:	2b09      	cmp	r3, #9
 800cd62:	d94e      	bls.n	800ce02 <_svfiprintf_r+0x17e>
 800cd64:	b1b0      	cbz	r0, 800cd94 <_svfiprintf_r+0x110>
 800cd66:	9207      	str	r2, [sp, #28]
 800cd68:	e014      	b.n	800cd94 <_svfiprintf_r+0x110>
 800cd6a:	eba0 0308 	sub.w	r3, r0, r8
 800cd6e:	fa09 f303 	lsl.w	r3, r9, r3
 800cd72:	4313      	orrs	r3, r2
 800cd74:	9304      	str	r3, [sp, #16]
 800cd76:	46a2      	mov	sl, r4
 800cd78:	e7d2      	b.n	800cd20 <_svfiprintf_r+0x9c>
 800cd7a:	9b03      	ldr	r3, [sp, #12]
 800cd7c:	1d19      	adds	r1, r3, #4
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	9103      	str	r1, [sp, #12]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	bfbb      	ittet	lt
 800cd86:	425b      	neglt	r3, r3
 800cd88:	f042 0202 	orrlt.w	r2, r2, #2
 800cd8c:	9307      	strge	r3, [sp, #28]
 800cd8e:	9307      	strlt	r3, [sp, #28]
 800cd90:	bfb8      	it	lt
 800cd92:	9204      	strlt	r2, [sp, #16]
 800cd94:	7823      	ldrb	r3, [r4, #0]
 800cd96:	2b2e      	cmp	r3, #46	; 0x2e
 800cd98:	d10c      	bne.n	800cdb4 <_svfiprintf_r+0x130>
 800cd9a:	7863      	ldrb	r3, [r4, #1]
 800cd9c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd9e:	d135      	bne.n	800ce0c <_svfiprintf_r+0x188>
 800cda0:	9b03      	ldr	r3, [sp, #12]
 800cda2:	1d1a      	adds	r2, r3, #4
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	9203      	str	r2, [sp, #12]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	bfb8      	it	lt
 800cdac:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdb0:	3402      	adds	r4, #2
 800cdb2:	9305      	str	r3, [sp, #20]
 800cdb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce80 <_svfiprintf_r+0x1fc>
 800cdb8:	7821      	ldrb	r1, [r4, #0]
 800cdba:	2203      	movs	r2, #3
 800cdbc:	4650      	mov	r0, sl
 800cdbe:	f7f3 fa07 	bl	80001d0 <memchr>
 800cdc2:	b140      	cbz	r0, 800cdd6 <_svfiprintf_r+0x152>
 800cdc4:	2340      	movs	r3, #64	; 0x40
 800cdc6:	eba0 000a 	sub.w	r0, r0, sl
 800cdca:	fa03 f000 	lsl.w	r0, r3, r0
 800cdce:	9b04      	ldr	r3, [sp, #16]
 800cdd0:	4303      	orrs	r3, r0
 800cdd2:	3401      	adds	r4, #1
 800cdd4:	9304      	str	r3, [sp, #16]
 800cdd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdda:	4826      	ldr	r0, [pc, #152]	; (800ce74 <_svfiprintf_r+0x1f0>)
 800cddc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cde0:	2206      	movs	r2, #6
 800cde2:	f7f3 f9f5 	bl	80001d0 <memchr>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	d038      	beq.n	800ce5c <_svfiprintf_r+0x1d8>
 800cdea:	4b23      	ldr	r3, [pc, #140]	; (800ce78 <_svfiprintf_r+0x1f4>)
 800cdec:	bb1b      	cbnz	r3, 800ce36 <_svfiprintf_r+0x1b2>
 800cdee:	9b03      	ldr	r3, [sp, #12]
 800cdf0:	3307      	adds	r3, #7
 800cdf2:	f023 0307 	bic.w	r3, r3, #7
 800cdf6:	3308      	adds	r3, #8
 800cdf8:	9303      	str	r3, [sp, #12]
 800cdfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdfc:	4433      	add	r3, r6
 800cdfe:	9309      	str	r3, [sp, #36]	; 0x24
 800ce00:	e767      	b.n	800ccd2 <_svfiprintf_r+0x4e>
 800ce02:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce06:	460c      	mov	r4, r1
 800ce08:	2001      	movs	r0, #1
 800ce0a:	e7a5      	b.n	800cd58 <_svfiprintf_r+0xd4>
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	3401      	adds	r4, #1
 800ce10:	9305      	str	r3, [sp, #20]
 800ce12:	4619      	mov	r1, r3
 800ce14:	f04f 0c0a 	mov.w	ip, #10
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce1e:	3a30      	subs	r2, #48	; 0x30
 800ce20:	2a09      	cmp	r2, #9
 800ce22:	d903      	bls.n	800ce2c <_svfiprintf_r+0x1a8>
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d0c5      	beq.n	800cdb4 <_svfiprintf_r+0x130>
 800ce28:	9105      	str	r1, [sp, #20]
 800ce2a:	e7c3      	b.n	800cdb4 <_svfiprintf_r+0x130>
 800ce2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce30:	4604      	mov	r4, r0
 800ce32:	2301      	movs	r3, #1
 800ce34:	e7f0      	b.n	800ce18 <_svfiprintf_r+0x194>
 800ce36:	ab03      	add	r3, sp, #12
 800ce38:	9300      	str	r3, [sp, #0]
 800ce3a:	462a      	mov	r2, r5
 800ce3c:	4b0f      	ldr	r3, [pc, #60]	; (800ce7c <_svfiprintf_r+0x1f8>)
 800ce3e:	a904      	add	r1, sp, #16
 800ce40:	4638      	mov	r0, r7
 800ce42:	f3af 8000 	nop.w
 800ce46:	1c42      	adds	r2, r0, #1
 800ce48:	4606      	mov	r6, r0
 800ce4a:	d1d6      	bne.n	800cdfa <_svfiprintf_r+0x176>
 800ce4c:	89ab      	ldrh	r3, [r5, #12]
 800ce4e:	065b      	lsls	r3, r3, #25
 800ce50:	f53f af2c 	bmi.w	800ccac <_svfiprintf_r+0x28>
 800ce54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce56:	b01d      	add	sp, #116	; 0x74
 800ce58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce5c:	ab03      	add	r3, sp, #12
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	462a      	mov	r2, r5
 800ce62:	4b06      	ldr	r3, [pc, #24]	; (800ce7c <_svfiprintf_r+0x1f8>)
 800ce64:	a904      	add	r1, sp, #16
 800ce66:	4638      	mov	r0, r7
 800ce68:	f000 f9d4 	bl	800d214 <_printf_i>
 800ce6c:	e7eb      	b.n	800ce46 <_svfiprintf_r+0x1c2>
 800ce6e:	bf00      	nop
 800ce70:	0800ea04 	.word	0x0800ea04
 800ce74:	0800ea0e 	.word	0x0800ea0e
 800ce78:	00000000 	.word	0x00000000
 800ce7c:	0800cbcd 	.word	0x0800cbcd
 800ce80:	0800ea0a 	.word	0x0800ea0a

0800ce84 <__sfputc_r>:
 800ce84:	6893      	ldr	r3, [r2, #8]
 800ce86:	3b01      	subs	r3, #1
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	b410      	push	{r4}
 800ce8c:	6093      	str	r3, [r2, #8]
 800ce8e:	da08      	bge.n	800cea2 <__sfputc_r+0x1e>
 800ce90:	6994      	ldr	r4, [r2, #24]
 800ce92:	42a3      	cmp	r3, r4
 800ce94:	db01      	blt.n	800ce9a <__sfputc_r+0x16>
 800ce96:	290a      	cmp	r1, #10
 800ce98:	d103      	bne.n	800cea2 <__sfputc_r+0x1e>
 800ce9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce9e:	f000 bb33 	b.w	800d508 <__swbuf_r>
 800cea2:	6813      	ldr	r3, [r2, #0]
 800cea4:	1c58      	adds	r0, r3, #1
 800cea6:	6010      	str	r0, [r2, #0]
 800cea8:	7019      	strb	r1, [r3, #0]
 800ceaa:	4608      	mov	r0, r1
 800ceac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ceb0:	4770      	bx	lr

0800ceb2 <__sfputs_r>:
 800ceb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb4:	4606      	mov	r6, r0
 800ceb6:	460f      	mov	r7, r1
 800ceb8:	4614      	mov	r4, r2
 800ceba:	18d5      	adds	r5, r2, r3
 800cebc:	42ac      	cmp	r4, r5
 800cebe:	d101      	bne.n	800cec4 <__sfputs_r+0x12>
 800cec0:	2000      	movs	r0, #0
 800cec2:	e007      	b.n	800ced4 <__sfputs_r+0x22>
 800cec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cec8:	463a      	mov	r2, r7
 800ceca:	4630      	mov	r0, r6
 800cecc:	f7ff ffda 	bl	800ce84 <__sfputc_r>
 800ced0:	1c43      	adds	r3, r0, #1
 800ced2:	d1f3      	bne.n	800cebc <__sfputs_r+0xa>
 800ced4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ced8 <_vfiprintf_r>:
 800ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cedc:	460d      	mov	r5, r1
 800cede:	b09d      	sub	sp, #116	; 0x74
 800cee0:	4614      	mov	r4, r2
 800cee2:	4698      	mov	r8, r3
 800cee4:	4606      	mov	r6, r0
 800cee6:	b118      	cbz	r0, 800cef0 <_vfiprintf_r+0x18>
 800cee8:	6983      	ldr	r3, [r0, #24]
 800ceea:	b90b      	cbnz	r3, 800cef0 <_vfiprintf_r+0x18>
 800ceec:	f7ff fd3a 	bl	800c964 <__sinit>
 800cef0:	4b89      	ldr	r3, [pc, #548]	; (800d118 <_vfiprintf_r+0x240>)
 800cef2:	429d      	cmp	r5, r3
 800cef4:	d11b      	bne.n	800cf2e <_vfiprintf_r+0x56>
 800cef6:	6875      	ldr	r5, [r6, #4]
 800cef8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cefa:	07d9      	lsls	r1, r3, #31
 800cefc:	d405      	bmi.n	800cf0a <_vfiprintf_r+0x32>
 800cefe:	89ab      	ldrh	r3, [r5, #12]
 800cf00:	059a      	lsls	r2, r3, #22
 800cf02:	d402      	bmi.n	800cf0a <_vfiprintf_r+0x32>
 800cf04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf06:	f7ff fdcb 	bl	800caa0 <__retarget_lock_acquire_recursive>
 800cf0a:	89ab      	ldrh	r3, [r5, #12]
 800cf0c:	071b      	lsls	r3, r3, #28
 800cf0e:	d501      	bpl.n	800cf14 <_vfiprintf_r+0x3c>
 800cf10:	692b      	ldr	r3, [r5, #16]
 800cf12:	b9eb      	cbnz	r3, 800cf50 <_vfiprintf_r+0x78>
 800cf14:	4629      	mov	r1, r5
 800cf16:	4630      	mov	r0, r6
 800cf18:	f000 fb5a 	bl	800d5d0 <__swsetup_r>
 800cf1c:	b1c0      	cbz	r0, 800cf50 <_vfiprintf_r+0x78>
 800cf1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf20:	07dc      	lsls	r4, r3, #31
 800cf22:	d50e      	bpl.n	800cf42 <_vfiprintf_r+0x6a>
 800cf24:	f04f 30ff 	mov.w	r0, #4294967295
 800cf28:	b01d      	add	sp, #116	; 0x74
 800cf2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2e:	4b7b      	ldr	r3, [pc, #492]	; (800d11c <_vfiprintf_r+0x244>)
 800cf30:	429d      	cmp	r5, r3
 800cf32:	d101      	bne.n	800cf38 <_vfiprintf_r+0x60>
 800cf34:	68b5      	ldr	r5, [r6, #8]
 800cf36:	e7df      	b.n	800cef8 <_vfiprintf_r+0x20>
 800cf38:	4b79      	ldr	r3, [pc, #484]	; (800d120 <_vfiprintf_r+0x248>)
 800cf3a:	429d      	cmp	r5, r3
 800cf3c:	bf08      	it	eq
 800cf3e:	68f5      	ldreq	r5, [r6, #12]
 800cf40:	e7da      	b.n	800cef8 <_vfiprintf_r+0x20>
 800cf42:	89ab      	ldrh	r3, [r5, #12]
 800cf44:	0598      	lsls	r0, r3, #22
 800cf46:	d4ed      	bmi.n	800cf24 <_vfiprintf_r+0x4c>
 800cf48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf4a:	f7ff fdaa 	bl	800caa2 <__retarget_lock_release_recursive>
 800cf4e:	e7e9      	b.n	800cf24 <_vfiprintf_r+0x4c>
 800cf50:	2300      	movs	r3, #0
 800cf52:	9309      	str	r3, [sp, #36]	; 0x24
 800cf54:	2320      	movs	r3, #32
 800cf56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf5e:	2330      	movs	r3, #48	; 0x30
 800cf60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d124 <_vfiprintf_r+0x24c>
 800cf64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf68:	f04f 0901 	mov.w	r9, #1
 800cf6c:	4623      	mov	r3, r4
 800cf6e:	469a      	mov	sl, r3
 800cf70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf74:	b10a      	cbz	r2, 800cf7a <_vfiprintf_r+0xa2>
 800cf76:	2a25      	cmp	r2, #37	; 0x25
 800cf78:	d1f9      	bne.n	800cf6e <_vfiprintf_r+0x96>
 800cf7a:	ebba 0b04 	subs.w	fp, sl, r4
 800cf7e:	d00b      	beq.n	800cf98 <_vfiprintf_r+0xc0>
 800cf80:	465b      	mov	r3, fp
 800cf82:	4622      	mov	r2, r4
 800cf84:	4629      	mov	r1, r5
 800cf86:	4630      	mov	r0, r6
 800cf88:	f7ff ff93 	bl	800ceb2 <__sfputs_r>
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	f000 80aa 	beq.w	800d0e6 <_vfiprintf_r+0x20e>
 800cf92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf94:	445a      	add	r2, fp
 800cf96:	9209      	str	r2, [sp, #36]	; 0x24
 800cf98:	f89a 3000 	ldrb.w	r3, [sl]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	f000 80a2 	beq.w	800d0e6 <_vfiprintf_r+0x20e>
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfac:	f10a 0a01 	add.w	sl, sl, #1
 800cfb0:	9304      	str	r3, [sp, #16]
 800cfb2:	9307      	str	r3, [sp, #28]
 800cfb4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfb8:	931a      	str	r3, [sp, #104]	; 0x68
 800cfba:	4654      	mov	r4, sl
 800cfbc:	2205      	movs	r2, #5
 800cfbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfc2:	4858      	ldr	r0, [pc, #352]	; (800d124 <_vfiprintf_r+0x24c>)
 800cfc4:	f7f3 f904 	bl	80001d0 <memchr>
 800cfc8:	9a04      	ldr	r2, [sp, #16]
 800cfca:	b9d8      	cbnz	r0, 800d004 <_vfiprintf_r+0x12c>
 800cfcc:	06d1      	lsls	r1, r2, #27
 800cfce:	bf44      	itt	mi
 800cfd0:	2320      	movmi	r3, #32
 800cfd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfd6:	0713      	lsls	r3, r2, #28
 800cfd8:	bf44      	itt	mi
 800cfda:	232b      	movmi	r3, #43	; 0x2b
 800cfdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfe0:	f89a 3000 	ldrb.w	r3, [sl]
 800cfe4:	2b2a      	cmp	r3, #42	; 0x2a
 800cfe6:	d015      	beq.n	800d014 <_vfiprintf_r+0x13c>
 800cfe8:	9a07      	ldr	r2, [sp, #28]
 800cfea:	4654      	mov	r4, sl
 800cfec:	2000      	movs	r0, #0
 800cfee:	f04f 0c0a 	mov.w	ip, #10
 800cff2:	4621      	mov	r1, r4
 800cff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cff8:	3b30      	subs	r3, #48	; 0x30
 800cffa:	2b09      	cmp	r3, #9
 800cffc:	d94e      	bls.n	800d09c <_vfiprintf_r+0x1c4>
 800cffe:	b1b0      	cbz	r0, 800d02e <_vfiprintf_r+0x156>
 800d000:	9207      	str	r2, [sp, #28]
 800d002:	e014      	b.n	800d02e <_vfiprintf_r+0x156>
 800d004:	eba0 0308 	sub.w	r3, r0, r8
 800d008:	fa09 f303 	lsl.w	r3, r9, r3
 800d00c:	4313      	orrs	r3, r2
 800d00e:	9304      	str	r3, [sp, #16]
 800d010:	46a2      	mov	sl, r4
 800d012:	e7d2      	b.n	800cfba <_vfiprintf_r+0xe2>
 800d014:	9b03      	ldr	r3, [sp, #12]
 800d016:	1d19      	adds	r1, r3, #4
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	9103      	str	r1, [sp, #12]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	bfbb      	ittet	lt
 800d020:	425b      	neglt	r3, r3
 800d022:	f042 0202 	orrlt.w	r2, r2, #2
 800d026:	9307      	strge	r3, [sp, #28]
 800d028:	9307      	strlt	r3, [sp, #28]
 800d02a:	bfb8      	it	lt
 800d02c:	9204      	strlt	r2, [sp, #16]
 800d02e:	7823      	ldrb	r3, [r4, #0]
 800d030:	2b2e      	cmp	r3, #46	; 0x2e
 800d032:	d10c      	bne.n	800d04e <_vfiprintf_r+0x176>
 800d034:	7863      	ldrb	r3, [r4, #1]
 800d036:	2b2a      	cmp	r3, #42	; 0x2a
 800d038:	d135      	bne.n	800d0a6 <_vfiprintf_r+0x1ce>
 800d03a:	9b03      	ldr	r3, [sp, #12]
 800d03c:	1d1a      	adds	r2, r3, #4
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	9203      	str	r2, [sp, #12]
 800d042:	2b00      	cmp	r3, #0
 800d044:	bfb8      	it	lt
 800d046:	f04f 33ff 	movlt.w	r3, #4294967295
 800d04a:	3402      	adds	r4, #2
 800d04c:	9305      	str	r3, [sp, #20]
 800d04e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d134 <_vfiprintf_r+0x25c>
 800d052:	7821      	ldrb	r1, [r4, #0]
 800d054:	2203      	movs	r2, #3
 800d056:	4650      	mov	r0, sl
 800d058:	f7f3 f8ba 	bl	80001d0 <memchr>
 800d05c:	b140      	cbz	r0, 800d070 <_vfiprintf_r+0x198>
 800d05e:	2340      	movs	r3, #64	; 0x40
 800d060:	eba0 000a 	sub.w	r0, r0, sl
 800d064:	fa03 f000 	lsl.w	r0, r3, r0
 800d068:	9b04      	ldr	r3, [sp, #16]
 800d06a:	4303      	orrs	r3, r0
 800d06c:	3401      	adds	r4, #1
 800d06e:	9304      	str	r3, [sp, #16]
 800d070:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d074:	482c      	ldr	r0, [pc, #176]	; (800d128 <_vfiprintf_r+0x250>)
 800d076:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d07a:	2206      	movs	r2, #6
 800d07c:	f7f3 f8a8 	bl	80001d0 <memchr>
 800d080:	2800      	cmp	r0, #0
 800d082:	d03f      	beq.n	800d104 <_vfiprintf_r+0x22c>
 800d084:	4b29      	ldr	r3, [pc, #164]	; (800d12c <_vfiprintf_r+0x254>)
 800d086:	bb1b      	cbnz	r3, 800d0d0 <_vfiprintf_r+0x1f8>
 800d088:	9b03      	ldr	r3, [sp, #12]
 800d08a:	3307      	adds	r3, #7
 800d08c:	f023 0307 	bic.w	r3, r3, #7
 800d090:	3308      	adds	r3, #8
 800d092:	9303      	str	r3, [sp, #12]
 800d094:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d096:	443b      	add	r3, r7
 800d098:	9309      	str	r3, [sp, #36]	; 0x24
 800d09a:	e767      	b.n	800cf6c <_vfiprintf_r+0x94>
 800d09c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0a0:	460c      	mov	r4, r1
 800d0a2:	2001      	movs	r0, #1
 800d0a4:	e7a5      	b.n	800cff2 <_vfiprintf_r+0x11a>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	3401      	adds	r4, #1
 800d0aa:	9305      	str	r3, [sp, #20]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	f04f 0c0a 	mov.w	ip, #10
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0b8:	3a30      	subs	r2, #48	; 0x30
 800d0ba:	2a09      	cmp	r2, #9
 800d0bc:	d903      	bls.n	800d0c6 <_vfiprintf_r+0x1ee>
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d0c5      	beq.n	800d04e <_vfiprintf_r+0x176>
 800d0c2:	9105      	str	r1, [sp, #20]
 800d0c4:	e7c3      	b.n	800d04e <_vfiprintf_r+0x176>
 800d0c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0ca:	4604      	mov	r4, r0
 800d0cc:	2301      	movs	r3, #1
 800d0ce:	e7f0      	b.n	800d0b2 <_vfiprintf_r+0x1da>
 800d0d0:	ab03      	add	r3, sp, #12
 800d0d2:	9300      	str	r3, [sp, #0]
 800d0d4:	462a      	mov	r2, r5
 800d0d6:	4b16      	ldr	r3, [pc, #88]	; (800d130 <_vfiprintf_r+0x258>)
 800d0d8:	a904      	add	r1, sp, #16
 800d0da:	4630      	mov	r0, r6
 800d0dc:	f3af 8000 	nop.w
 800d0e0:	4607      	mov	r7, r0
 800d0e2:	1c78      	adds	r0, r7, #1
 800d0e4:	d1d6      	bne.n	800d094 <_vfiprintf_r+0x1bc>
 800d0e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0e8:	07d9      	lsls	r1, r3, #31
 800d0ea:	d405      	bmi.n	800d0f8 <_vfiprintf_r+0x220>
 800d0ec:	89ab      	ldrh	r3, [r5, #12]
 800d0ee:	059a      	lsls	r2, r3, #22
 800d0f0:	d402      	bmi.n	800d0f8 <_vfiprintf_r+0x220>
 800d0f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0f4:	f7ff fcd5 	bl	800caa2 <__retarget_lock_release_recursive>
 800d0f8:	89ab      	ldrh	r3, [r5, #12]
 800d0fa:	065b      	lsls	r3, r3, #25
 800d0fc:	f53f af12 	bmi.w	800cf24 <_vfiprintf_r+0x4c>
 800d100:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d102:	e711      	b.n	800cf28 <_vfiprintf_r+0x50>
 800d104:	ab03      	add	r3, sp, #12
 800d106:	9300      	str	r3, [sp, #0]
 800d108:	462a      	mov	r2, r5
 800d10a:	4b09      	ldr	r3, [pc, #36]	; (800d130 <_vfiprintf_r+0x258>)
 800d10c:	a904      	add	r1, sp, #16
 800d10e:	4630      	mov	r0, r6
 800d110:	f000 f880 	bl	800d214 <_printf_i>
 800d114:	e7e4      	b.n	800d0e0 <_vfiprintf_r+0x208>
 800d116:	bf00      	nop
 800d118:	0800e9c4 	.word	0x0800e9c4
 800d11c:	0800e9e4 	.word	0x0800e9e4
 800d120:	0800e9a4 	.word	0x0800e9a4
 800d124:	0800ea04 	.word	0x0800ea04
 800d128:	0800ea0e 	.word	0x0800ea0e
 800d12c:	00000000 	.word	0x00000000
 800d130:	0800ceb3 	.word	0x0800ceb3
 800d134:	0800ea0a 	.word	0x0800ea0a

0800d138 <_printf_common>:
 800d138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d13c:	4616      	mov	r6, r2
 800d13e:	4699      	mov	r9, r3
 800d140:	688a      	ldr	r2, [r1, #8]
 800d142:	690b      	ldr	r3, [r1, #16]
 800d144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d148:	4293      	cmp	r3, r2
 800d14a:	bfb8      	it	lt
 800d14c:	4613      	movlt	r3, r2
 800d14e:	6033      	str	r3, [r6, #0]
 800d150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d154:	4607      	mov	r7, r0
 800d156:	460c      	mov	r4, r1
 800d158:	b10a      	cbz	r2, 800d15e <_printf_common+0x26>
 800d15a:	3301      	adds	r3, #1
 800d15c:	6033      	str	r3, [r6, #0]
 800d15e:	6823      	ldr	r3, [r4, #0]
 800d160:	0699      	lsls	r1, r3, #26
 800d162:	bf42      	ittt	mi
 800d164:	6833      	ldrmi	r3, [r6, #0]
 800d166:	3302      	addmi	r3, #2
 800d168:	6033      	strmi	r3, [r6, #0]
 800d16a:	6825      	ldr	r5, [r4, #0]
 800d16c:	f015 0506 	ands.w	r5, r5, #6
 800d170:	d106      	bne.n	800d180 <_printf_common+0x48>
 800d172:	f104 0a19 	add.w	sl, r4, #25
 800d176:	68e3      	ldr	r3, [r4, #12]
 800d178:	6832      	ldr	r2, [r6, #0]
 800d17a:	1a9b      	subs	r3, r3, r2
 800d17c:	42ab      	cmp	r3, r5
 800d17e:	dc26      	bgt.n	800d1ce <_printf_common+0x96>
 800d180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d184:	1e13      	subs	r3, r2, #0
 800d186:	6822      	ldr	r2, [r4, #0]
 800d188:	bf18      	it	ne
 800d18a:	2301      	movne	r3, #1
 800d18c:	0692      	lsls	r2, r2, #26
 800d18e:	d42b      	bmi.n	800d1e8 <_printf_common+0xb0>
 800d190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d194:	4649      	mov	r1, r9
 800d196:	4638      	mov	r0, r7
 800d198:	47c0      	blx	r8
 800d19a:	3001      	adds	r0, #1
 800d19c:	d01e      	beq.n	800d1dc <_printf_common+0xa4>
 800d19e:	6823      	ldr	r3, [r4, #0]
 800d1a0:	68e5      	ldr	r5, [r4, #12]
 800d1a2:	6832      	ldr	r2, [r6, #0]
 800d1a4:	f003 0306 	and.w	r3, r3, #6
 800d1a8:	2b04      	cmp	r3, #4
 800d1aa:	bf08      	it	eq
 800d1ac:	1aad      	subeq	r5, r5, r2
 800d1ae:	68a3      	ldr	r3, [r4, #8]
 800d1b0:	6922      	ldr	r2, [r4, #16]
 800d1b2:	bf0c      	ite	eq
 800d1b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1b8:	2500      	movne	r5, #0
 800d1ba:	4293      	cmp	r3, r2
 800d1bc:	bfc4      	itt	gt
 800d1be:	1a9b      	subgt	r3, r3, r2
 800d1c0:	18ed      	addgt	r5, r5, r3
 800d1c2:	2600      	movs	r6, #0
 800d1c4:	341a      	adds	r4, #26
 800d1c6:	42b5      	cmp	r5, r6
 800d1c8:	d11a      	bne.n	800d200 <_printf_common+0xc8>
 800d1ca:	2000      	movs	r0, #0
 800d1cc:	e008      	b.n	800d1e0 <_printf_common+0xa8>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	4652      	mov	r2, sl
 800d1d2:	4649      	mov	r1, r9
 800d1d4:	4638      	mov	r0, r7
 800d1d6:	47c0      	blx	r8
 800d1d8:	3001      	adds	r0, #1
 800d1da:	d103      	bne.n	800d1e4 <_printf_common+0xac>
 800d1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e4:	3501      	adds	r5, #1
 800d1e6:	e7c6      	b.n	800d176 <_printf_common+0x3e>
 800d1e8:	18e1      	adds	r1, r4, r3
 800d1ea:	1c5a      	adds	r2, r3, #1
 800d1ec:	2030      	movs	r0, #48	; 0x30
 800d1ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d1f2:	4422      	add	r2, r4
 800d1f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d1fc:	3302      	adds	r3, #2
 800d1fe:	e7c7      	b.n	800d190 <_printf_common+0x58>
 800d200:	2301      	movs	r3, #1
 800d202:	4622      	mov	r2, r4
 800d204:	4649      	mov	r1, r9
 800d206:	4638      	mov	r0, r7
 800d208:	47c0      	blx	r8
 800d20a:	3001      	adds	r0, #1
 800d20c:	d0e6      	beq.n	800d1dc <_printf_common+0xa4>
 800d20e:	3601      	adds	r6, #1
 800d210:	e7d9      	b.n	800d1c6 <_printf_common+0x8e>
	...

0800d214 <_printf_i>:
 800d214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d218:	7e0f      	ldrb	r7, [r1, #24]
 800d21a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d21c:	2f78      	cmp	r7, #120	; 0x78
 800d21e:	4691      	mov	r9, r2
 800d220:	4680      	mov	r8, r0
 800d222:	460c      	mov	r4, r1
 800d224:	469a      	mov	sl, r3
 800d226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d22a:	d807      	bhi.n	800d23c <_printf_i+0x28>
 800d22c:	2f62      	cmp	r7, #98	; 0x62
 800d22e:	d80a      	bhi.n	800d246 <_printf_i+0x32>
 800d230:	2f00      	cmp	r7, #0
 800d232:	f000 80d8 	beq.w	800d3e6 <_printf_i+0x1d2>
 800d236:	2f58      	cmp	r7, #88	; 0x58
 800d238:	f000 80a3 	beq.w	800d382 <_printf_i+0x16e>
 800d23c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d244:	e03a      	b.n	800d2bc <_printf_i+0xa8>
 800d246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d24a:	2b15      	cmp	r3, #21
 800d24c:	d8f6      	bhi.n	800d23c <_printf_i+0x28>
 800d24e:	a101      	add	r1, pc, #4	; (adr r1, 800d254 <_printf_i+0x40>)
 800d250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d254:	0800d2ad 	.word	0x0800d2ad
 800d258:	0800d2c1 	.word	0x0800d2c1
 800d25c:	0800d23d 	.word	0x0800d23d
 800d260:	0800d23d 	.word	0x0800d23d
 800d264:	0800d23d 	.word	0x0800d23d
 800d268:	0800d23d 	.word	0x0800d23d
 800d26c:	0800d2c1 	.word	0x0800d2c1
 800d270:	0800d23d 	.word	0x0800d23d
 800d274:	0800d23d 	.word	0x0800d23d
 800d278:	0800d23d 	.word	0x0800d23d
 800d27c:	0800d23d 	.word	0x0800d23d
 800d280:	0800d3cd 	.word	0x0800d3cd
 800d284:	0800d2f1 	.word	0x0800d2f1
 800d288:	0800d3af 	.word	0x0800d3af
 800d28c:	0800d23d 	.word	0x0800d23d
 800d290:	0800d23d 	.word	0x0800d23d
 800d294:	0800d3ef 	.word	0x0800d3ef
 800d298:	0800d23d 	.word	0x0800d23d
 800d29c:	0800d2f1 	.word	0x0800d2f1
 800d2a0:	0800d23d 	.word	0x0800d23d
 800d2a4:	0800d23d 	.word	0x0800d23d
 800d2a8:	0800d3b7 	.word	0x0800d3b7
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	1d1a      	adds	r2, r3, #4
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	602a      	str	r2, [r5, #0]
 800d2b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e0a3      	b.n	800d408 <_printf_i+0x1f4>
 800d2c0:	6820      	ldr	r0, [r4, #0]
 800d2c2:	6829      	ldr	r1, [r5, #0]
 800d2c4:	0606      	lsls	r6, r0, #24
 800d2c6:	f101 0304 	add.w	r3, r1, #4
 800d2ca:	d50a      	bpl.n	800d2e2 <_printf_i+0xce>
 800d2cc:	680e      	ldr	r6, [r1, #0]
 800d2ce:	602b      	str	r3, [r5, #0]
 800d2d0:	2e00      	cmp	r6, #0
 800d2d2:	da03      	bge.n	800d2dc <_printf_i+0xc8>
 800d2d4:	232d      	movs	r3, #45	; 0x2d
 800d2d6:	4276      	negs	r6, r6
 800d2d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2dc:	485e      	ldr	r0, [pc, #376]	; (800d458 <_printf_i+0x244>)
 800d2de:	230a      	movs	r3, #10
 800d2e0:	e019      	b.n	800d316 <_printf_i+0x102>
 800d2e2:	680e      	ldr	r6, [r1, #0]
 800d2e4:	602b      	str	r3, [r5, #0]
 800d2e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d2ea:	bf18      	it	ne
 800d2ec:	b236      	sxthne	r6, r6
 800d2ee:	e7ef      	b.n	800d2d0 <_printf_i+0xbc>
 800d2f0:	682b      	ldr	r3, [r5, #0]
 800d2f2:	6820      	ldr	r0, [r4, #0]
 800d2f4:	1d19      	adds	r1, r3, #4
 800d2f6:	6029      	str	r1, [r5, #0]
 800d2f8:	0601      	lsls	r1, r0, #24
 800d2fa:	d501      	bpl.n	800d300 <_printf_i+0xec>
 800d2fc:	681e      	ldr	r6, [r3, #0]
 800d2fe:	e002      	b.n	800d306 <_printf_i+0xf2>
 800d300:	0646      	lsls	r6, r0, #25
 800d302:	d5fb      	bpl.n	800d2fc <_printf_i+0xe8>
 800d304:	881e      	ldrh	r6, [r3, #0]
 800d306:	4854      	ldr	r0, [pc, #336]	; (800d458 <_printf_i+0x244>)
 800d308:	2f6f      	cmp	r7, #111	; 0x6f
 800d30a:	bf0c      	ite	eq
 800d30c:	2308      	moveq	r3, #8
 800d30e:	230a      	movne	r3, #10
 800d310:	2100      	movs	r1, #0
 800d312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d316:	6865      	ldr	r5, [r4, #4]
 800d318:	60a5      	str	r5, [r4, #8]
 800d31a:	2d00      	cmp	r5, #0
 800d31c:	bfa2      	ittt	ge
 800d31e:	6821      	ldrge	r1, [r4, #0]
 800d320:	f021 0104 	bicge.w	r1, r1, #4
 800d324:	6021      	strge	r1, [r4, #0]
 800d326:	b90e      	cbnz	r6, 800d32c <_printf_i+0x118>
 800d328:	2d00      	cmp	r5, #0
 800d32a:	d04d      	beq.n	800d3c8 <_printf_i+0x1b4>
 800d32c:	4615      	mov	r5, r2
 800d32e:	fbb6 f1f3 	udiv	r1, r6, r3
 800d332:	fb03 6711 	mls	r7, r3, r1, r6
 800d336:	5dc7      	ldrb	r7, [r0, r7]
 800d338:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d33c:	4637      	mov	r7, r6
 800d33e:	42bb      	cmp	r3, r7
 800d340:	460e      	mov	r6, r1
 800d342:	d9f4      	bls.n	800d32e <_printf_i+0x11a>
 800d344:	2b08      	cmp	r3, #8
 800d346:	d10b      	bne.n	800d360 <_printf_i+0x14c>
 800d348:	6823      	ldr	r3, [r4, #0]
 800d34a:	07de      	lsls	r6, r3, #31
 800d34c:	d508      	bpl.n	800d360 <_printf_i+0x14c>
 800d34e:	6923      	ldr	r3, [r4, #16]
 800d350:	6861      	ldr	r1, [r4, #4]
 800d352:	4299      	cmp	r1, r3
 800d354:	bfde      	ittt	le
 800d356:	2330      	movle	r3, #48	; 0x30
 800d358:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d35c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d360:	1b52      	subs	r2, r2, r5
 800d362:	6122      	str	r2, [r4, #16]
 800d364:	f8cd a000 	str.w	sl, [sp]
 800d368:	464b      	mov	r3, r9
 800d36a:	aa03      	add	r2, sp, #12
 800d36c:	4621      	mov	r1, r4
 800d36e:	4640      	mov	r0, r8
 800d370:	f7ff fee2 	bl	800d138 <_printf_common>
 800d374:	3001      	adds	r0, #1
 800d376:	d14c      	bne.n	800d412 <_printf_i+0x1fe>
 800d378:	f04f 30ff 	mov.w	r0, #4294967295
 800d37c:	b004      	add	sp, #16
 800d37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d382:	4835      	ldr	r0, [pc, #212]	; (800d458 <_printf_i+0x244>)
 800d384:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d388:	6829      	ldr	r1, [r5, #0]
 800d38a:	6823      	ldr	r3, [r4, #0]
 800d38c:	f851 6b04 	ldr.w	r6, [r1], #4
 800d390:	6029      	str	r1, [r5, #0]
 800d392:	061d      	lsls	r5, r3, #24
 800d394:	d514      	bpl.n	800d3c0 <_printf_i+0x1ac>
 800d396:	07df      	lsls	r7, r3, #31
 800d398:	bf44      	itt	mi
 800d39a:	f043 0320 	orrmi.w	r3, r3, #32
 800d39e:	6023      	strmi	r3, [r4, #0]
 800d3a0:	b91e      	cbnz	r6, 800d3aa <_printf_i+0x196>
 800d3a2:	6823      	ldr	r3, [r4, #0]
 800d3a4:	f023 0320 	bic.w	r3, r3, #32
 800d3a8:	6023      	str	r3, [r4, #0]
 800d3aa:	2310      	movs	r3, #16
 800d3ac:	e7b0      	b.n	800d310 <_printf_i+0xfc>
 800d3ae:	6823      	ldr	r3, [r4, #0]
 800d3b0:	f043 0320 	orr.w	r3, r3, #32
 800d3b4:	6023      	str	r3, [r4, #0]
 800d3b6:	2378      	movs	r3, #120	; 0x78
 800d3b8:	4828      	ldr	r0, [pc, #160]	; (800d45c <_printf_i+0x248>)
 800d3ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d3be:	e7e3      	b.n	800d388 <_printf_i+0x174>
 800d3c0:	0659      	lsls	r1, r3, #25
 800d3c2:	bf48      	it	mi
 800d3c4:	b2b6      	uxthmi	r6, r6
 800d3c6:	e7e6      	b.n	800d396 <_printf_i+0x182>
 800d3c8:	4615      	mov	r5, r2
 800d3ca:	e7bb      	b.n	800d344 <_printf_i+0x130>
 800d3cc:	682b      	ldr	r3, [r5, #0]
 800d3ce:	6826      	ldr	r6, [r4, #0]
 800d3d0:	6961      	ldr	r1, [r4, #20]
 800d3d2:	1d18      	adds	r0, r3, #4
 800d3d4:	6028      	str	r0, [r5, #0]
 800d3d6:	0635      	lsls	r5, r6, #24
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	d501      	bpl.n	800d3e0 <_printf_i+0x1cc>
 800d3dc:	6019      	str	r1, [r3, #0]
 800d3de:	e002      	b.n	800d3e6 <_printf_i+0x1d2>
 800d3e0:	0670      	lsls	r0, r6, #25
 800d3e2:	d5fb      	bpl.n	800d3dc <_printf_i+0x1c8>
 800d3e4:	8019      	strh	r1, [r3, #0]
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	6123      	str	r3, [r4, #16]
 800d3ea:	4615      	mov	r5, r2
 800d3ec:	e7ba      	b.n	800d364 <_printf_i+0x150>
 800d3ee:	682b      	ldr	r3, [r5, #0]
 800d3f0:	1d1a      	adds	r2, r3, #4
 800d3f2:	602a      	str	r2, [r5, #0]
 800d3f4:	681d      	ldr	r5, [r3, #0]
 800d3f6:	6862      	ldr	r2, [r4, #4]
 800d3f8:	2100      	movs	r1, #0
 800d3fa:	4628      	mov	r0, r5
 800d3fc:	f7f2 fee8 	bl	80001d0 <memchr>
 800d400:	b108      	cbz	r0, 800d406 <_printf_i+0x1f2>
 800d402:	1b40      	subs	r0, r0, r5
 800d404:	6060      	str	r0, [r4, #4]
 800d406:	6863      	ldr	r3, [r4, #4]
 800d408:	6123      	str	r3, [r4, #16]
 800d40a:	2300      	movs	r3, #0
 800d40c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d410:	e7a8      	b.n	800d364 <_printf_i+0x150>
 800d412:	6923      	ldr	r3, [r4, #16]
 800d414:	462a      	mov	r2, r5
 800d416:	4649      	mov	r1, r9
 800d418:	4640      	mov	r0, r8
 800d41a:	47d0      	blx	sl
 800d41c:	3001      	adds	r0, #1
 800d41e:	d0ab      	beq.n	800d378 <_printf_i+0x164>
 800d420:	6823      	ldr	r3, [r4, #0]
 800d422:	079b      	lsls	r3, r3, #30
 800d424:	d413      	bmi.n	800d44e <_printf_i+0x23a>
 800d426:	68e0      	ldr	r0, [r4, #12]
 800d428:	9b03      	ldr	r3, [sp, #12]
 800d42a:	4298      	cmp	r0, r3
 800d42c:	bfb8      	it	lt
 800d42e:	4618      	movlt	r0, r3
 800d430:	e7a4      	b.n	800d37c <_printf_i+0x168>
 800d432:	2301      	movs	r3, #1
 800d434:	4632      	mov	r2, r6
 800d436:	4649      	mov	r1, r9
 800d438:	4640      	mov	r0, r8
 800d43a:	47d0      	blx	sl
 800d43c:	3001      	adds	r0, #1
 800d43e:	d09b      	beq.n	800d378 <_printf_i+0x164>
 800d440:	3501      	adds	r5, #1
 800d442:	68e3      	ldr	r3, [r4, #12]
 800d444:	9903      	ldr	r1, [sp, #12]
 800d446:	1a5b      	subs	r3, r3, r1
 800d448:	42ab      	cmp	r3, r5
 800d44a:	dcf2      	bgt.n	800d432 <_printf_i+0x21e>
 800d44c:	e7eb      	b.n	800d426 <_printf_i+0x212>
 800d44e:	2500      	movs	r5, #0
 800d450:	f104 0619 	add.w	r6, r4, #25
 800d454:	e7f5      	b.n	800d442 <_printf_i+0x22e>
 800d456:	bf00      	nop
 800d458:	0800ea15 	.word	0x0800ea15
 800d45c:	0800ea26 	.word	0x0800ea26

0800d460 <_sbrk_r>:
 800d460:	b538      	push	{r3, r4, r5, lr}
 800d462:	4d06      	ldr	r5, [pc, #24]	; (800d47c <_sbrk_r+0x1c>)
 800d464:	2300      	movs	r3, #0
 800d466:	4604      	mov	r4, r0
 800d468:	4608      	mov	r0, r1
 800d46a:	602b      	str	r3, [r5, #0]
 800d46c:	f7f5 f89e 	bl	80025ac <_sbrk>
 800d470:	1c43      	adds	r3, r0, #1
 800d472:	d102      	bne.n	800d47a <_sbrk_r+0x1a>
 800d474:	682b      	ldr	r3, [r5, #0]
 800d476:	b103      	cbz	r3, 800d47a <_sbrk_r+0x1a>
 800d478:	6023      	str	r3, [r4, #0]
 800d47a:	bd38      	pop	{r3, r4, r5, pc}
 800d47c:	20004b44 	.word	0x20004b44

0800d480 <__sread>:
 800d480:	b510      	push	{r4, lr}
 800d482:	460c      	mov	r4, r1
 800d484:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d488:	f000 fafc 	bl	800da84 <_read_r>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	bfab      	itete	ge
 800d490:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d492:	89a3      	ldrhlt	r3, [r4, #12]
 800d494:	181b      	addge	r3, r3, r0
 800d496:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d49a:	bfac      	ite	ge
 800d49c:	6563      	strge	r3, [r4, #84]	; 0x54
 800d49e:	81a3      	strhlt	r3, [r4, #12]
 800d4a0:	bd10      	pop	{r4, pc}

0800d4a2 <__swrite>:
 800d4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4a6:	461f      	mov	r7, r3
 800d4a8:	898b      	ldrh	r3, [r1, #12]
 800d4aa:	05db      	lsls	r3, r3, #23
 800d4ac:	4605      	mov	r5, r0
 800d4ae:	460c      	mov	r4, r1
 800d4b0:	4616      	mov	r6, r2
 800d4b2:	d505      	bpl.n	800d4c0 <__swrite+0x1e>
 800d4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4b8:	2302      	movs	r3, #2
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	f000 f9c8 	bl	800d850 <_lseek_r>
 800d4c0:	89a3      	ldrh	r3, [r4, #12]
 800d4c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d4c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d4ca:	81a3      	strh	r3, [r4, #12]
 800d4cc:	4632      	mov	r2, r6
 800d4ce:	463b      	mov	r3, r7
 800d4d0:	4628      	mov	r0, r5
 800d4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d6:	f000 b869 	b.w	800d5ac <_write_r>

0800d4da <__sseek>:
 800d4da:	b510      	push	{r4, lr}
 800d4dc:	460c      	mov	r4, r1
 800d4de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4e2:	f000 f9b5 	bl	800d850 <_lseek_r>
 800d4e6:	1c43      	adds	r3, r0, #1
 800d4e8:	89a3      	ldrh	r3, [r4, #12]
 800d4ea:	bf15      	itete	ne
 800d4ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800d4ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d4f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d4f6:	81a3      	strheq	r3, [r4, #12]
 800d4f8:	bf18      	it	ne
 800d4fa:	81a3      	strhne	r3, [r4, #12]
 800d4fc:	bd10      	pop	{r4, pc}

0800d4fe <__sclose>:
 800d4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d502:	f000 b8d3 	b.w	800d6ac <_close_r>
	...

0800d508 <__swbuf_r>:
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	460e      	mov	r6, r1
 800d50c:	4614      	mov	r4, r2
 800d50e:	4605      	mov	r5, r0
 800d510:	b118      	cbz	r0, 800d51a <__swbuf_r+0x12>
 800d512:	6983      	ldr	r3, [r0, #24]
 800d514:	b90b      	cbnz	r3, 800d51a <__swbuf_r+0x12>
 800d516:	f7ff fa25 	bl	800c964 <__sinit>
 800d51a:	4b21      	ldr	r3, [pc, #132]	; (800d5a0 <__swbuf_r+0x98>)
 800d51c:	429c      	cmp	r4, r3
 800d51e:	d12b      	bne.n	800d578 <__swbuf_r+0x70>
 800d520:	686c      	ldr	r4, [r5, #4]
 800d522:	69a3      	ldr	r3, [r4, #24]
 800d524:	60a3      	str	r3, [r4, #8]
 800d526:	89a3      	ldrh	r3, [r4, #12]
 800d528:	071a      	lsls	r2, r3, #28
 800d52a:	d52f      	bpl.n	800d58c <__swbuf_r+0x84>
 800d52c:	6923      	ldr	r3, [r4, #16]
 800d52e:	b36b      	cbz	r3, 800d58c <__swbuf_r+0x84>
 800d530:	6923      	ldr	r3, [r4, #16]
 800d532:	6820      	ldr	r0, [r4, #0]
 800d534:	1ac0      	subs	r0, r0, r3
 800d536:	6963      	ldr	r3, [r4, #20]
 800d538:	b2f6      	uxtb	r6, r6
 800d53a:	4283      	cmp	r3, r0
 800d53c:	4637      	mov	r7, r6
 800d53e:	dc04      	bgt.n	800d54a <__swbuf_r+0x42>
 800d540:	4621      	mov	r1, r4
 800d542:	4628      	mov	r0, r5
 800d544:	f000 f948 	bl	800d7d8 <_fflush_r>
 800d548:	bb30      	cbnz	r0, 800d598 <__swbuf_r+0x90>
 800d54a:	68a3      	ldr	r3, [r4, #8]
 800d54c:	3b01      	subs	r3, #1
 800d54e:	60a3      	str	r3, [r4, #8]
 800d550:	6823      	ldr	r3, [r4, #0]
 800d552:	1c5a      	adds	r2, r3, #1
 800d554:	6022      	str	r2, [r4, #0]
 800d556:	701e      	strb	r6, [r3, #0]
 800d558:	6963      	ldr	r3, [r4, #20]
 800d55a:	3001      	adds	r0, #1
 800d55c:	4283      	cmp	r3, r0
 800d55e:	d004      	beq.n	800d56a <__swbuf_r+0x62>
 800d560:	89a3      	ldrh	r3, [r4, #12]
 800d562:	07db      	lsls	r3, r3, #31
 800d564:	d506      	bpl.n	800d574 <__swbuf_r+0x6c>
 800d566:	2e0a      	cmp	r6, #10
 800d568:	d104      	bne.n	800d574 <__swbuf_r+0x6c>
 800d56a:	4621      	mov	r1, r4
 800d56c:	4628      	mov	r0, r5
 800d56e:	f000 f933 	bl	800d7d8 <_fflush_r>
 800d572:	b988      	cbnz	r0, 800d598 <__swbuf_r+0x90>
 800d574:	4638      	mov	r0, r7
 800d576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d578:	4b0a      	ldr	r3, [pc, #40]	; (800d5a4 <__swbuf_r+0x9c>)
 800d57a:	429c      	cmp	r4, r3
 800d57c:	d101      	bne.n	800d582 <__swbuf_r+0x7a>
 800d57e:	68ac      	ldr	r4, [r5, #8]
 800d580:	e7cf      	b.n	800d522 <__swbuf_r+0x1a>
 800d582:	4b09      	ldr	r3, [pc, #36]	; (800d5a8 <__swbuf_r+0xa0>)
 800d584:	429c      	cmp	r4, r3
 800d586:	bf08      	it	eq
 800d588:	68ec      	ldreq	r4, [r5, #12]
 800d58a:	e7ca      	b.n	800d522 <__swbuf_r+0x1a>
 800d58c:	4621      	mov	r1, r4
 800d58e:	4628      	mov	r0, r5
 800d590:	f000 f81e 	bl	800d5d0 <__swsetup_r>
 800d594:	2800      	cmp	r0, #0
 800d596:	d0cb      	beq.n	800d530 <__swbuf_r+0x28>
 800d598:	f04f 37ff 	mov.w	r7, #4294967295
 800d59c:	e7ea      	b.n	800d574 <__swbuf_r+0x6c>
 800d59e:	bf00      	nop
 800d5a0:	0800e9c4 	.word	0x0800e9c4
 800d5a4:	0800e9e4 	.word	0x0800e9e4
 800d5a8:	0800e9a4 	.word	0x0800e9a4

0800d5ac <_write_r>:
 800d5ac:	b538      	push	{r3, r4, r5, lr}
 800d5ae:	4d07      	ldr	r5, [pc, #28]	; (800d5cc <_write_r+0x20>)
 800d5b0:	4604      	mov	r4, r0
 800d5b2:	4608      	mov	r0, r1
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	602a      	str	r2, [r5, #0]
 800d5ba:	461a      	mov	r2, r3
 800d5bc:	f7f3 fcfe 	bl	8000fbc <_write>
 800d5c0:	1c43      	adds	r3, r0, #1
 800d5c2:	d102      	bne.n	800d5ca <_write_r+0x1e>
 800d5c4:	682b      	ldr	r3, [r5, #0]
 800d5c6:	b103      	cbz	r3, 800d5ca <_write_r+0x1e>
 800d5c8:	6023      	str	r3, [r4, #0]
 800d5ca:	bd38      	pop	{r3, r4, r5, pc}
 800d5cc:	20004b44 	.word	0x20004b44

0800d5d0 <__swsetup_r>:
 800d5d0:	4b32      	ldr	r3, [pc, #200]	; (800d69c <__swsetup_r+0xcc>)
 800d5d2:	b570      	push	{r4, r5, r6, lr}
 800d5d4:	681d      	ldr	r5, [r3, #0]
 800d5d6:	4606      	mov	r6, r0
 800d5d8:	460c      	mov	r4, r1
 800d5da:	b125      	cbz	r5, 800d5e6 <__swsetup_r+0x16>
 800d5dc:	69ab      	ldr	r3, [r5, #24]
 800d5de:	b913      	cbnz	r3, 800d5e6 <__swsetup_r+0x16>
 800d5e0:	4628      	mov	r0, r5
 800d5e2:	f7ff f9bf 	bl	800c964 <__sinit>
 800d5e6:	4b2e      	ldr	r3, [pc, #184]	; (800d6a0 <__swsetup_r+0xd0>)
 800d5e8:	429c      	cmp	r4, r3
 800d5ea:	d10f      	bne.n	800d60c <__swsetup_r+0x3c>
 800d5ec:	686c      	ldr	r4, [r5, #4]
 800d5ee:	89a3      	ldrh	r3, [r4, #12]
 800d5f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d5f4:	0719      	lsls	r1, r3, #28
 800d5f6:	d42c      	bmi.n	800d652 <__swsetup_r+0x82>
 800d5f8:	06dd      	lsls	r5, r3, #27
 800d5fa:	d411      	bmi.n	800d620 <__swsetup_r+0x50>
 800d5fc:	2309      	movs	r3, #9
 800d5fe:	6033      	str	r3, [r6, #0]
 800d600:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d604:	81a3      	strh	r3, [r4, #12]
 800d606:	f04f 30ff 	mov.w	r0, #4294967295
 800d60a:	e03e      	b.n	800d68a <__swsetup_r+0xba>
 800d60c:	4b25      	ldr	r3, [pc, #148]	; (800d6a4 <__swsetup_r+0xd4>)
 800d60e:	429c      	cmp	r4, r3
 800d610:	d101      	bne.n	800d616 <__swsetup_r+0x46>
 800d612:	68ac      	ldr	r4, [r5, #8]
 800d614:	e7eb      	b.n	800d5ee <__swsetup_r+0x1e>
 800d616:	4b24      	ldr	r3, [pc, #144]	; (800d6a8 <__swsetup_r+0xd8>)
 800d618:	429c      	cmp	r4, r3
 800d61a:	bf08      	it	eq
 800d61c:	68ec      	ldreq	r4, [r5, #12]
 800d61e:	e7e6      	b.n	800d5ee <__swsetup_r+0x1e>
 800d620:	0758      	lsls	r0, r3, #29
 800d622:	d512      	bpl.n	800d64a <__swsetup_r+0x7a>
 800d624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d626:	b141      	cbz	r1, 800d63a <__swsetup_r+0x6a>
 800d628:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d62c:	4299      	cmp	r1, r3
 800d62e:	d002      	beq.n	800d636 <__swsetup_r+0x66>
 800d630:	4630      	mov	r0, r6
 800d632:	f000 f9ab 	bl	800d98c <_free_r>
 800d636:	2300      	movs	r3, #0
 800d638:	6363      	str	r3, [r4, #52]	; 0x34
 800d63a:	89a3      	ldrh	r3, [r4, #12]
 800d63c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d640:	81a3      	strh	r3, [r4, #12]
 800d642:	2300      	movs	r3, #0
 800d644:	6063      	str	r3, [r4, #4]
 800d646:	6923      	ldr	r3, [r4, #16]
 800d648:	6023      	str	r3, [r4, #0]
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	f043 0308 	orr.w	r3, r3, #8
 800d650:	81a3      	strh	r3, [r4, #12]
 800d652:	6923      	ldr	r3, [r4, #16]
 800d654:	b94b      	cbnz	r3, 800d66a <__swsetup_r+0x9a>
 800d656:	89a3      	ldrh	r3, [r4, #12]
 800d658:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d65c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d660:	d003      	beq.n	800d66a <__swsetup_r+0x9a>
 800d662:	4621      	mov	r1, r4
 800d664:	4630      	mov	r0, r6
 800d666:	f000 f92b 	bl	800d8c0 <__smakebuf_r>
 800d66a:	89a0      	ldrh	r0, [r4, #12]
 800d66c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d670:	f010 0301 	ands.w	r3, r0, #1
 800d674:	d00a      	beq.n	800d68c <__swsetup_r+0xbc>
 800d676:	2300      	movs	r3, #0
 800d678:	60a3      	str	r3, [r4, #8]
 800d67a:	6963      	ldr	r3, [r4, #20]
 800d67c:	425b      	negs	r3, r3
 800d67e:	61a3      	str	r3, [r4, #24]
 800d680:	6923      	ldr	r3, [r4, #16]
 800d682:	b943      	cbnz	r3, 800d696 <__swsetup_r+0xc6>
 800d684:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d688:	d1ba      	bne.n	800d600 <__swsetup_r+0x30>
 800d68a:	bd70      	pop	{r4, r5, r6, pc}
 800d68c:	0781      	lsls	r1, r0, #30
 800d68e:	bf58      	it	pl
 800d690:	6963      	ldrpl	r3, [r4, #20]
 800d692:	60a3      	str	r3, [r4, #8]
 800d694:	e7f4      	b.n	800d680 <__swsetup_r+0xb0>
 800d696:	2000      	movs	r0, #0
 800d698:	e7f7      	b.n	800d68a <__swsetup_r+0xba>
 800d69a:	bf00      	nop
 800d69c:	200000fc 	.word	0x200000fc
 800d6a0:	0800e9c4 	.word	0x0800e9c4
 800d6a4:	0800e9e4 	.word	0x0800e9e4
 800d6a8:	0800e9a4 	.word	0x0800e9a4

0800d6ac <_close_r>:
 800d6ac:	b538      	push	{r3, r4, r5, lr}
 800d6ae:	4d06      	ldr	r5, [pc, #24]	; (800d6c8 <_close_r+0x1c>)
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	4604      	mov	r4, r0
 800d6b4:	4608      	mov	r0, r1
 800d6b6:	602b      	str	r3, [r5, #0]
 800d6b8:	f7f4 ff43 	bl	8002542 <_close>
 800d6bc:	1c43      	adds	r3, r0, #1
 800d6be:	d102      	bne.n	800d6c6 <_close_r+0x1a>
 800d6c0:	682b      	ldr	r3, [r5, #0]
 800d6c2:	b103      	cbz	r3, 800d6c6 <_close_r+0x1a>
 800d6c4:	6023      	str	r3, [r4, #0]
 800d6c6:	bd38      	pop	{r3, r4, r5, pc}
 800d6c8:	20004b44 	.word	0x20004b44

0800d6cc <__sflush_r>:
 800d6cc:	898a      	ldrh	r2, [r1, #12]
 800d6ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6d2:	4605      	mov	r5, r0
 800d6d4:	0710      	lsls	r0, r2, #28
 800d6d6:	460c      	mov	r4, r1
 800d6d8:	d458      	bmi.n	800d78c <__sflush_r+0xc0>
 800d6da:	684b      	ldr	r3, [r1, #4]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	dc05      	bgt.n	800d6ec <__sflush_r+0x20>
 800d6e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	dc02      	bgt.n	800d6ec <__sflush_r+0x20>
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6ee:	2e00      	cmp	r6, #0
 800d6f0:	d0f9      	beq.n	800d6e6 <__sflush_r+0x1a>
 800d6f2:	2300      	movs	r3, #0
 800d6f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6f8:	682f      	ldr	r7, [r5, #0]
 800d6fa:	602b      	str	r3, [r5, #0]
 800d6fc:	d032      	beq.n	800d764 <__sflush_r+0x98>
 800d6fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	075a      	lsls	r2, r3, #29
 800d704:	d505      	bpl.n	800d712 <__sflush_r+0x46>
 800d706:	6863      	ldr	r3, [r4, #4]
 800d708:	1ac0      	subs	r0, r0, r3
 800d70a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d70c:	b10b      	cbz	r3, 800d712 <__sflush_r+0x46>
 800d70e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d710:	1ac0      	subs	r0, r0, r3
 800d712:	2300      	movs	r3, #0
 800d714:	4602      	mov	r2, r0
 800d716:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d718:	6a21      	ldr	r1, [r4, #32]
 800d71a:	4628      	mov	r0, r5
 800d71c:	47b0      	blx	r6
 800d71e:	1c43      	adds	r3, r0, #1
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	d106      	bne.n	800d732 <__sflush_r+0x66>
 800d724:	6829      	ldr	r1, [r5, #0]
 800d726:	291d      	cmp	r1, #29
 800d728:	d82c      	bhi.n	800d784 <__sflush_r+0xb8>
 800d72a:	4a2a      	ldr	r2, [pc, #168]	; (800d7d4 <__sflush_r+0x108>)
 800d72c:	40ca      	lsrs	r2, r1
 800d72e:	07d6      	lsls	r6, r2, #31
 800d730:	d528      	bpl.n	800d784 <__sflush_r+0xb8>
 800d732:	2200      	movs	r2, #0
 800d734:	6062      	str	r2, [r4, #4]
 800d736:	04d9      	lsls	r1, r3, #19
 800d738:	6922      	ldr	r2, [r4, #16]
 800d73a:	6022      	str	r2, [r4, #0]
 800d73c:	d504      	bpl.n	800d748 <__sflush_r+0x7c>
 800d73e:	1c42      	adds	r2, r0, #1
 800d740:	d101      	bne.n	800d746 <__sflush_r+0x7a>
 800d742:	682b      	ldr	r3, [r5, #0]
 800d744:	b903      	cbnz	r3, 800d748 <__sflush_r+0x7c>
 800d746:	6560      	str	r0, [r4, #84]	; 0x54
 800d748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d74a:	602f      	str	r7, [r5, #0]
 800d74c:	2900      	cmp	r1, #0
 800d74e:	d0ca      	beq.n	800d6e6 <__sflush_r+0x1a>
 800d750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d754:	4299      	cmp	r1, r3
 800d756:	d002      	beq.n	800d75e <__sflush_r+0x92>
 800d758:	4628      	mov	r0, r5
 800d75a:	f000 f917 	bl	800d98c <_free_r>
 800d75e:	2000      	movs	r0, #0
 800d760:	6360      	str	r0, [r4, #52]	; 0x34
 800d762:	e7c1      	b.n	800d6e8 <__sflush_r+0x1c>
 800d764:	6a21      	ldr	r1, [r4, #32]
 800d766:	2301      	movs	r3, #1
 800d768:	4628      	mov	r0, r5
 800d76a:	47b0      	blx	r6
 800d76c:	1c41      	adds	r1, r0, #1
 800d76e:	d1c7      	bne.n	800d700 <__sflush_r+0x34>
 800d770:	682b      	ldr	r3, [r5, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d0c4      	beq.n	800d700 <__sflush_r+0x34>
 800d776:	2b1d      	cmp	r3, #29
 800d778:	d001      	beq.n	800d77e <__sflush_r+0xb2>
 800d77a:	2b16      	cmp	r3, #22
 800d77c:	d101      	bne.n	800d782 <__sflush_r+0xb6>
 800d77e:	602f      	str	r7, [r5, #0]
 800d780:	e7b1      	b.n	800d6e6 <__sflush_r+0x1a>
 800d782:	89a3      	ldrh	r3, [r4, #12]
 800d784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d788:	81a3      	strh	r3, [r4, #12]
 800d78a:	e7ad      	b.n	800d6e8 <__sflush_r+0x1c>
 800d78c:	690f      	ldr	r7, [r1, #16]
 800d78e:	2f00      	cmp	r7, #0
 800d790:	d0a9      	beq.n	800d6e6 <__sflush_r+0x1a>
 800d792:	0793      	lsls	r3, r2, #30
 800d794:	680e      	ldr	r6, [r1, #0]
 800d796:	bf08      	it	eq
 800d798:	694b      	ldreq	r3, [r1, #20]
 800d79a:	600f      	str	r7, [r1, #0]
 800d79c:	bf18      	it	ne
 800d79e:	2300      	movne	r3, #0
 800d7a0:	eba6 0807 	sub.w	r8, r6, r7
 800d7a4:	608b      	str	r3, [r1, #8]
 800d7a6:	f1b8 0f00 	cmp.w	r8, #0
 800d7aa:	dd9c      	ble.n	800d6e6 <__sflush_r+0x1a>
 800d7ac:	6a21      	ldr	r1, [r4, #32]
 800d7ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7b0:	4643      	mov	r3, r8
 800d7b2:	463a      	mov	r2, r7
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	47b0      	blx	r6
 800d7b8:	2800      	cmp	r0, #0
 800d7ba:	dc06      	bgt.n	800d7ca <__sflush_r+0xfe>
 800d7bc:	89a3      	ldrh	r3, [r4, #12]
 800d7be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7c2:	81a3      	strh	r3, [r4, #12]
 800d7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d7c8:	e78e      	b.n	800d6e8 <__sflush_r+0x1c>
 800d7ca:	4407      	add	r7, r0
 800d7cc:	eba8 0800 	sub.w	r8, r8, r0
 800d7d0:	e7e9      	b.n	800d7a6 <__sflush_r+0xda>
 800d7d2:	bf00      	nop
 800d7d4:	20400001 	.word	0x20400001

0800d7d8 <_fflush_r>:
 800d7d8:	b538      	push	{r3, r4, r5, lr}
 800d7da:	690b      	ldr	r3, [r1, #16]
 800d7dc:	4605      	mov	r5, r0
 800d7de:	460c      	mov	r4, r1
 800d7e0:	b913      	cbnz	r3, 800d7e8 <_fflush_r+0x10>
 800d7e2:	2500      	movs	r5, #0
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	bd38      	pop	{r3, r4, r5, pc}
 800d7e8:	b118      	cbz	r0, 800d7f2 <_fflush_r+0x1a>
 800d7ea:	6983      	ldr	r3, [r0, #24]
 800d7ec:	b90b      	cbnz	r3, 800d7f2 <_fflush_r+0x1a>
 800d7ee:	f7ff f8b9 	bl	800c964 <__sinit>
 800d7f2:	4b14      	ldr	r3, [pc, #80]	; (800d844 <_fflush_r+0x6c>)
 800d7f4:	429c      	cmp	r4, r3
 800d7f6:	d11b      	bne.n	800d830 <_fflush_r+0x58>
 800d7f8:	686c      	ldr	r4, [r5, #4]
 800d7fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d0ef      	beq.n	800d7e2 <_fflush_r+0xa>
 800d802:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d804:	07d0      	lsls	r0, r2, #31
 800d806:	d404      	bmi.n	800d812 <_fflush_r+0x3a>
 800d808:	0599      	lsls	r1, r3, #22
 800d80a:	d402      	bmi.n	800d812 <_fflush_r+0x3a>
 800d80c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d80e:	f7ff f947 	bl	800caa0 <__retarget_lock_acquire_recursive>
 800d812:	4628      	mov	r0, r5
 800d814:	4621      	mov	r1, r4
 800d816:	f7ff ff59 	bl	800d6cc <__sflush_r>
 800d81a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d81c:	07da      	lsls	r2, r3, #31
 800d81e:	4605      	mov	r5, r0
 800d820:	d4e0      	bmi.n	800d7e4 <_fflush_r+0xc>
 800d822:	89a3      	ldrh	r3, [r4, #12]
 800d824:	059b      	lsls	r3, r3, #22
 800d826:	d4dd      	bmi.n	800d7e4 <_fflush_r+0xc>
 800d828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d82a:	f7ff f93a 	bl	800caa2 <__retarget_lock_release_recursive>
 800d82e:	e7d9      	b.n	800d7e4 <_fflush_r+0xc>
 800d830:	4b05      	ldr	r3, [pc, #20]	; (800d848 <_fflush_r+0x70>)
 800d832:	429c      	cmp	r4, r3
 800d834:	d101      	bne.n	800d83a <_fflush_r+0x62>
 800d836:	68ac      	ldr	r4, [r5, #8]
 800d838:	e7df      	b.n	800d7fa <_fflush_r+0x22>
 800d83a:	4b04      	ldr	r3, [pc, #16]	; (800d84c <_fflush_r+0x74>)
 800d83c:	429c      	cmp	r4, r3
 800d83e:	bf08      	it	eq
 800d840:	68ec      	ldreq	r4, [r5, #12]
 800d842:	e7da      	b.n	800d7fa <_fflush_r+0x22>
 800d844:	0800e9c4 	.word	0x0800e9c4
 800d848:	0800e9e4 	.word	0x0800e9e4
 800d84c:	0800e9a4 	.word	0x0800e9a4

0800d850 <_lseek_r>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	4d07      	ldr	r5, [pc, #28]	; (800d870 <_lseek_r+0x20>)
 800d854:	4604      	mov	r4, r0
 800d856:	4608      	mov	r0, r1
 800d858:	4611      	mov	r1, r2
 800d85a:	2200      	movs	r2, #0
 800d85c:	602a      	str	r2, [r5, #0]
 800d85e:	461a      	mov	r2, r3
 800d860:	f7f4 fe96 	bl	8002590 <_lseek>
 800d864:	1c43      	adds	r3, r0, #1
 800d866:	d102      	bne.n	800d86e <_lseek_r+0x1e>
 800d868:	682b      	ldr	r3, [r5, #0]
 800d86a:	b103      	cbz	r3, 800d86e <_lseek_r+0x1e>
 800d86c:	6023      	str	r3, [r4, #0]
 800d86e:	bd38      	pop	{r3, r4, r5, pc}
 800d870:	20004b44 	.word	0x20004b44

0800d874 <__swhatbuf_r>:
 800d874:	b570      	push	{r4, r5, r6, lr}
 800d876:	460e      	mov	r6, r1
 800d878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d87c:	2900      	cmp	r1, #0
 800d87e:	b096      	sub	sp, #88	; 0x58
 800d880:	4614      	mov	r4, r2
 800d882:	461d      	mov	r5, r3
 800d884:	da08      	bge.n	800d898 <__swhatbuf_r+0x24>
 800d886:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d88a:	2200      	movs	r2, #0
 800d88c:	602a      	str	r2, [r5, #0]
 800d88e:	061a      	lsls	r2, r3, #24
 800d890:	d410      	bmi.n	800d8b4 <__swhatbuf_r+0x40>
 800d892:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d896:	e00e      	b.n	800d8b6 <__swhatbuf_r+0x42>
 800d898:	466a      	mov	r2, sp
 800d89a:	f000 f905 	bl	800daa8 <_fstat_r>
 800d89e:	2800      	cmp	r0, #0
 800d8a0:	dbf1      	blt.n	800d886 <__swhatbuf_r+0x12>
 800d8a2:	9a01      	ldr	r2, [sp, #4]
 800d8a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d8ac:	425a      	negs	r2, r3
 800d8ae:	415a      	adcs	r2, r3
 800d8b0:	602a      	str	r2, [r5, #0]
 800d8b2:	e7ee      	b.n	800d892 <__swhatbuf_r+0x1e>
 800d8b4:	2340      	movs	r3, #64	; 0x40
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	6023      	str	r3, [r4, #0]
 800d8ba:	b016      	add	sp, #88	; 0x58
 800d8bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d8c0 <__smakebuf_r>:
 800d8c0:	898b      	ldrh	r3, [r1, #12]
 800d8c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8c4:	079d      	lsls	r5, r3, #30
 800d8c6:	4606      	mov	r6, r0
 800d8c8:	460c      	mov	r4, r1
 800d8ca:	d507      	bpl.n	800d8dc <__smakebuf_r+0x1c>
 800d8cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8d0:	6023      	str	r3, [r4, #0]
 800d8d2:	6123      	str	r3, [r4, #16]
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	6163      	str	r3, [r4, #20]
 800d8d8:	b002      	add	sp, #8
 800d8da:	bd70      	pop	{r4, r5, r6, pc}
 800d8dc:	ab01      	add	r3, sp, #4
 800d8de:	466a      	mov	r2, sp
 800d8e0:	f7ff ffc8 	bl	800d874 <__swhatbuf_r>
 800d8e4:	9900      	ldr	r1, [sp, #0]
 800d8e6:	4605      	mov	r5, r0
 800d8e8:	4630      	mov	r0, r6
 800d8ea:	f7ff f8fb 	bl	800cae4 <_malloc_r>
 800d8ee:	b948      	cbnz	r0, 800d904 <__smakebuf_r+0x44>
 800d8f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8f4:	059a      	lsls	r2, r3, #22
 800d8f6:	d4ef      	bmi.n	800d8d8 <__smakebuf_r+0x18>
 800d8f8:	f023 0303 	bic.w	r3, r3, #3
 800d8fc:	f043 0302 	orr.w	r3, r3, #2
 800d900:	81a3      	strh	r3, [r4, #12]
 800d902:	e7e3      	b.n	800d8cc <__smakebuf_r+0xc>
 800d904:	4b0d      	ldr	r3, [pc, #52]	; (800d93c <__smakebuf_r+0x7c>)
 800d906:	62b3      	str	r3, [r6, #40]	; 0x28
 800d908:	89a3      	ldrh	r3, [r4, #12]
 800d90a:	6020      	str	r0, [r4, #0]
 800d90c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d910:	81a3      	strh	r3, [r4, #12]
 800d912:	9b00      	ldr	r3, [sp, #0]
 800d914:	6163      	str	r3, [r4, #20]
 800d916:	9b01      	ldr	r3, [sp, #4]
 800d918:	6120      	str	r0, [r4, #16]
 800d91a:	b15b      	cbz	r3, 800d934 <__smakebuf_r+0x74>
 800d91c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d920:	4630      	mov	r0, r6
 800d922:	f000 f8d3 	bl	800dacc <_isatty_r>
 800d926:	b128      	cbz	r0, 800d934 <__smakebuf_r+0x74>
 800d928:	89a3      	ldrh	r3, [r4, #12]
 800d92a:	f023 0303 	bic.w	r3, r3, #3
 800d92e:	f043 0301 	orr.w	r3, r3, #1
 800d932:	81a3      	strh	r3, [r4, #12]
 800d934:	89a0      	ldrh	r0, [r4, #12]
 800d936:	4305      	orrs	r5, r0
 800d938:	81a5      	strh	r5, [r4, #12]
 800d93a:	e7cd      	b.n	800d8d8 <__smakebuf_r+0x18>
 800d93c:	0800c8fd 	.word	0x0800c8fd

0800d940 <memmove>:
 800d940:	4288      	cmp	r0, r1
 800d942:	b510      	push	{r4, lr}
 800d944:	eb01 0402 	add.w	r4, r1, r2
 800d948:	d902      	bls.n	800d950 <memmove+0x10>
 800d94a:	4284      	cmp	r4, r0
 800d94c:	4623      	mov	r3, r4
 800d94e:	d807      	bhi.n	800d960 <memmove+0x20>
 800d950:	1e43      	subs	r3, r0, #1
 800d952:	42a1      	cmp	r1, r4
 800d954:	d008      	beq.n	800d968 <memmove+0x28>
 800d956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d95a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d95e:	e7f8      	b.n	800d952 <memmove+0x12>
 800d960:	4402      	add	r2, r0
 800d962:	4601      	mov	r1, r0
 800d964:	428a      	cmp	r2, r1
 800d966:	d100      	bne.n	800d96a <memmove+0x2a>
 800d968:	bd10      	pop	{r4, pc}
 800d96a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d96e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d972:	e7f7      	b.n	800d964 <memmove+0x24>

0800d974 <__malloc_lock>:
 800d974:	4801      	ldr	r0, [pc, #4]	; (800d97c <__malloc_lock+0x8>)
 800d976:	f7ff b893 	b.w	800caa0 <__retarget_lock_acquire_recursive>
 800d97a:	bf00      	nop
 800d97c:	20004b38 	.word	0x20004b38

0800d980 <__malloc_unlock>:
 800d980:	4801      	ldr	r0, [pc, #4]	; (800d988 <__malloc_unlock+0x8>)
 800d982:	f7ff b88e 	b.w	800caa2 <__retarget_lock_release_recursive>
 800d986:	bf00      	nop
 800d988:	20004b38 	.word	0x20004b38

0800d98c <_free_r>:
 800d98c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d98e:	2900      	cmp	r1, #0
 800d990:	d044      	beq.n	800da1c <_free_r+0x90>
 800d992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d996:	9001      	str	r0, [sp, #4]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f1a1 0404 	sub.w	r4, r1, #4
 800d99e:	bfb8      	it	lt
 800d9a0:	18e4      	addlt	r4, r4, r3
 800d9a2:	f7ff ffe7 	bl	800d974 <__malloc_lock>
 800d9a6:	4a1e      	ldr	r2, [pc, #120]	; (800da20 <_free_r+0x94>)
 800d9a8:	9801      	ldr	r0, [sp, #4]
 800d9aa:	6813      	ldr	r3, [r2, #0]
 800d9ac:	b933      	cbnz	r3, 800d9bc <_free_r+0x30>
 800d9ae:	6063      	str	r3, [r4, #4]
 800d9b0:	6014      	str	r4, [r2, #0]
 800d9b2:	b003      	add	sp, #12
 800d9b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9b8:	f7ff bfe2 	b.w	800d980 <__malloc_unlock>
 800d9bc:	42a3      	cmp	r3, r4
 800d9be:	d908      	bls.n	800d9d2 <_free_r+0x46>
 800d9c0:	6825      	ldr	r5, [r4, #0]
 800d9c2:	1961      	adds	r1, r4, r5
 800d9c4:	428b      	cmp	r3, r1
 800d9c6:	bf01      	itttt	eq
 800d9c8:	6819      	ldreq	r1, [r3, #0]
 800d9ca:	685b      	ldreq	r3, [r3, #4]
 800d9cc:	1949      	addeq	r1, r1, r5
 800d9ce:	6021      	streq	r1, [r4, #0]
 800d9d0:	e7ed      	b.n	800d9ae <_free_r+0x22>
 800d9d2:	461a      	mov	r2, r3
 800d9d4:	685b      	ldr	r3, [r3, #4]
 800d9d6:	b10b      	cbz	r3, 800d9dc <_free_r+0x50>
 800d9d8:	42a3      	cmp	r3, r4
 800d9da:	d9fa      	bls.n	800d9d2 <_free_r+0x46>
 800d9dc:	6811      	ldr	r1, [r2, #0]
 800d9de:	1855      	adds	r5, r2, r1
 800d9e0:	42a5      	cmp	r5, r4
 800d9e2:	d10b      	bne.n	800d9fc <_free_r+0x70>
 800d9e4:	6824      	ldr	r4, [r4, #0]
 800d9e6:	4421      	add	r1, r4
 800d9e8:	1854      	adds	r4, r2, r1
 800d9ea:	42a3      	cmp	r3, r4
 800d9ec:	6011      	str	r1, [r2, #0]
 800d9ee:	d1e0      	bne.n	800d9b2 <_free_r+0x26>
 800d9f0:	681c      	ldr	r4, [r3, #0]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	6053      	str	r3, [r2, #4]
 800d9f6:	4421      	add	r1, r4
 800d9f8:	6011      	str	r1, [r2, #0]
 800d9fa:	e7da      	b.n	800d9b2 <_free_r+0x26>
 800d9fc:	d902      	bls.n	800da04 <_free_r+0x78>
 800d9fe:	230c      	movs	r3, #12
 800da00:	6003      	str	r3, [r0, #0]
 800da02:	e7d6      	b.n	800d9b2 <_free_r+0x26>
 800da04:	6825      	ldr	r5, [r4, #0]
 800da06:	1961      	adds	r1, r4, r5
 800da08:	428b      	cmp	r3, r1
 800da0a:	bf04      	itt	eq
 800da0c:	6819      	ldreq	r1, [r3, #0]
 800da0e:	685b      	ldreq	r3, [r3, #4]
 800da10:	6063      	str	r3, [r4, #4]
 800da12:	bf04      	itt	eq
 800da14:	1949      	addeq	r1, r1, r5
 800da16:	6021      	streq	r1, [r4, #0]
 800da18:	6054      	str	r4, [r2, #4]
 800da1a:	e7ca      	b.n	800d9b2 <_free_r+0x26>
 800da1c:	b003      	add	sp, #12
 800da1e:	bd30      	pop	{r4, r5, pc}
 800da20:	20004b3c 	.word	0x20004b3c

0800da24 <_realloc_r>:
 800da24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da28:	4680      	mov	r8, r0
 800da2a:	4614      	mov	r4, r2
 800da2c:	460e      	mov	r6, r1
 800da2e:	b921      	cbnz	r1, 800da3a <_realloc_r+0x16>
 800da30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da34:	4611      	mov	r1, r2
 800da36:	f7ff b855 	b.w	800cae4 <_malloc_r>
 800da3a:	b92a      	cbnz	r2, 800da48 <_realloc_r+0x24>
 800da3c:	f7ff ffa6 	bl	800d98c <_free_r>
 800da40:	4625      	mov	r5, r4
 800da42:	4628      	mov	r0, r5
 800da44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da48:	f000 f850 	bl	800daec <_malloc_usable_size_r>
 800da4c:	4284      	cmp	r4, r0
 800da4e:	4607      	mov	r7, r0
 800da50:	d802      	bhi.n	800da58 <_realloc_r+0x34>
 800da52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da56:	d812      	bhi.n	800da7e <_realloc_r+0x5a>
 800da58:	4621      	mov	r1, r4
 800da5a:	4640      	mov	r0, r8
 800da5c:	f7ff f842 	bl	800cae4 <_malloc_r>
 800da60:	4605      	mov	r5, r0
 800da62:	2800      	cmp	r0, #0
 800da64:	d0ed      	beq.n	800da42 <_realloc_r+0x1e>
 800da66:	42bc      	cmp	r4, r7
 800da68:	4622      	mov	r2, r4
 800da6a:	4631      	mov	r1, r6
 800da6c:	bf28      	it	cs
 800da6e:	463a      	movcs	r2, r7
 800da70:	f7fe febc 	bl	800c7ec <memcpy>
 800da74:	4631      	mov	r1, r6
 800da76:	4640      	mov	r0, r8
 800da78:	f7ff ff88 	bl	800d98c <_free_r>
 800da7c:	e7e1      	b.n	800da42 <_realloc_r+0x1e>
 800da7e:	4635      	mov	r5, r6
 800da80:	e7df      	b.n	800da42 <_realloc_r+0x1e>
	...

0800da84 <_read_r>:
 800da84:	b538      	push	{r3, r4, r5, lr}
 800da86:	4d07      	ldr	r5, [pc, #28]	; (800daa4 <_read_r+0x20>)
 800da88:	4604      	mov	r4, r0
 800da8a:	4608      	mov	r0, r1
 800da8c:	4611      	mov	r1, r2
 800da8e:	2200      	movs	r2, #0
 800da90:	602a      	str	r2, [r5, #0]
 800da92:	461a      	mov	r2, r3
 800da94:	f7f4 fd38 	bl	8002508 <_read>
 800da98:	1c43      	adds	r3, r0, #1
 800da9a:	d102      	bne.n	800daa2 <_read_r+0x1e>
 800da9c:	682b      	ldr	r3, [r5, #0]
 800da9e:	b103      	cbz	r3, 800daa2 <_read_r+0x1e>
 800daa0:	6023      	str	r3, [r4, #0]
 800daa2:	bd38      	pop	{r3, r4, r5, pc}
 800daa4:	20004b44 	.word	0x20004b44

0800daa8 <_fstat_r>:
 800daa8:	b538      	push	{r3, r4, r5, lr}
 800daaa:	4d07      	ldr	r5, [pc, #28]	; (800dac8 <_fstat_r+0x20>)
 800daac:	2300      	movs	r3, #0
 800daae:	4604      	mov	r4, r0
 800dab0:	4608      	mov	r0, r1
 800dab2:	4611      	mov	r1, r2
 800dab4:	602b      	str	r3, [r5, #0]
 800dab6:	f7f4 fd50 	bl	800255a <_fstat>
 800daba:	1c43      	adds	r3, r0, #1
 800dabc:	d102      	bne.n	800dac4 <_fstat_r+0x1c>
 800dabe:	682b      	ldr	r3, [r5, #0]
 800dac0:	b103      	cbz	r3, 800dac4 <_fstat_r+0x1c>
 800dac2:	6023      	str	r3, [r4, #0]
 800dac4:	bd38      	pop	{r3, r4, r5, pc}
 800dac6:	bf00      	nop
 800dac8:	20004b44 	.word	0x20004b44

0800dacc <_isatty_r>:
 800dacc:	b538      	push	{r3, r4, r5, lr}
 800dace:	4d06      	ldr	r5, [pc, #24]	; (800dae8 <_isatty_r+0x1c>)
 800dad0:	2300      	movs	r3, #0
 800dad2:	4604      	mov	r4, r0
 800dad4:	4608      	mov	r0, r1
 800dad6:	602b      	str	r3, [r5, #0]
 800dad8:	f7f4 fd4f 	bl	800257a <_isatty>
 800dadc:	1c43      	adds	r3, r0, #1
 800dade:	d102      	bne.n	800dae6 <_isatty_r+0x1a>
 800dae0:	682b      	ldr	r3, [r5, #0]
 800dae2:	b103      	cbz	r3, 800dae6 <_isatty_r+0x1a>
 800dae4:	6023      	str	r3, [r4, #0]
 800dae6:	bd38      	pop	{r3, r4, r5, pc}
 800dae8:	20004b44 	.word	0x20004b44

0800daec <_malloc_usable_size_r>:
 800daec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daf0:	1f18      	subs	r0, r3, #4
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	bfbc      	itt	lt
 800daf6:	580b      	ldrlt	r3, [r1, r0]
 800daf8:	18c0      	addlt	r0, r0, r3
 800dafa:	4770      	bx	lr

0800dafc <_init>:
 800dafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dafe:	bf00      	nop
 800db00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db02:	bc08      	pop	{r3}
 800db04:	469e      	mov	lr, r3
 800db06:	4770      	bx	lr

0800db08 <_fini>:
 800db08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db0a:	bf00      	nop
 800db0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db0e:	bc08      	pop	{r3}
 800db10:	469e      	mov	lr, r3
 800db12:	4770      	bx	lr
