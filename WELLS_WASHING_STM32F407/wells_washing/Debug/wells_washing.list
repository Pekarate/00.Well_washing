
wells_washing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb40  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a18  0800ecd0  0800ecd0  0001ecd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080106e8  080106e8  00030160  2**0
                  CONTENTS
  4 .ARM          00000008  080106e8  080106e8  000206e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080106f0  080106f0  00030160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080106f0  080106f0  000206f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080106f4  080106f4  000206f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  080106f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030160  2**0
                  CONTENTS
 10 .bss          00005fb8  20000160  20000160  00030160  2**2
                  ALLOC
 11 ._user_heap_stack 0000c000  20006118  20006118  00030160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 13 .debug_info   000213ee  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000503a  00000000  00000000  0005157e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d58  00000000  00000000  000565b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b68  00000000  00000000  00058310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027c11  00000000  00000000  00059e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029f8b  00000000  00000000  00081a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d669a  00000000  00000000  000aba14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001820ae  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008468  00000000  00000000  00182100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ecb8 	.word	0x0800ecb8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800ecb8 	.word	0x0800ecb8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <is_data_init>:

_def_step step;


int is_data_init()
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	if(system_data.flash_data.factory_code != FACTORY_CODE)
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <is_data_init+0x24>)
 800057a:	f8b3 3fcc 	ldrh.w	r3, [r3, #4044]	; 0xfcc
 800057e:	f645 225a 	movw	r2, #23130	; 0x5a5a
 8000582:	4293      	cmp	r3, r2
 8000584:	d001      	beq.n	800058a <is_data_init+0x16>
	{
		return 0;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <is_data_init+0x18>
	}
	return 1;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000017c 	.word	0x2000017c

0800059c <dt_calculator_pg_stepnumber>:

void dt_calculator_pg_stepnumber(void){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	for(int i=0;i<10;i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e031      	b.n	800060c <dt_calculator_pg_stepnumber+0x70>
	{
		system_data.pg_stepnumber[i] =0;
 80005a8:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <dt_calculator_pg_stepnumber+0x84>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f503 63fd 	add.w	r3, r3, #2024	; 0x7e8
 80005b0:	2100      	movs	r1, #0
 80005b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j=0;j<25;j++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	e01f      	b.n	80005fc <dt_calculator_pg_stepnumber+0x60>
		{
			if(system_data.flash_data.Program_para[i][j].type == STEP_TYPE_NONE )
 80005bc:	4918      	ldr	r1, [pc, #96]	; (8000620 <dt_calculator_pg_stepnumber+0x84>)
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	4613      	mov	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	009a      	lsls	r2, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	4413      	add	r3, r2
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	440b      	add	r3, r1
 80005d2:	332c      	adds	r3, #44	; 0x2c
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d014      	beq.n	8000604 <dt_calculator_pg_stepnumber+0x68>
			{
				break;
			}
			system_data.pg_stepnumber[i]++;
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <dt_calculator_pg_stepnumber+0x84>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f503 63fd 	add.w	r3, r3, #2024	; 0x7e8
 80005e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e6:	3301      	adds	r3, #1
 80005e8:	b299      	uxth	r1, r3
 80005ea:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <dt_calculator_pg_stepnumber+0x84>)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f503 63fd 	add.w	r3, r3, #2024	; 0x7e8
 80005f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j=0;j<25;j++)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	2b18      	cmp	r3, #24
 8000600:	dddc      	ble.n	80005bc <dt_calculator_pg_stepnumber+0x20>
 8000602:	e000      	b.n	8000606 <dt_calculator_pg_stepnumber+0x6a>
				break;
 8000604:	bf00      	nop
	for(int i=0;i<10;i++)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3301      	adds	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b09      	cmp	r3, #9
 8000610:	ddca      	ble.n	80005a8 <dt_calculator_pg_stepnumber+0xc>
		}
	}
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	2000017c 	.word	0x2000017c

08000624 <is_step_differrent>:
//			system_data.pg_stepnumber[i]++;
//		}
	}
}

int is_step_differrent(uint8_t pg,uint8_t stepindex ,_def_step step){
 8000624:	b082      	sub	sp, #8
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	f107 0c10 	add.w	ip, r7, #16
 8000630:	e88c 000c 	stmia.w	ip, {r2, r3}
 8000634:	4603      	mov	r3, r0
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	460b      	mov	r3, r1
 800063a:	71bb      	strb	r3, [r7, #6]
	return memcmp(&system_data.flash_data.Program_para[pg][stepindex], &step, sizeof(_def_step));
 800063c:	79fa      	ldrb	r2, [r7, #7]
 800063e:	79b9      	ldrb	r1, [r7, #6]
 8000640:	4613      	mov	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	009a      	lsls	r2, r3, #2
 8000648:	4413      	add	r3, r2
 800064a:	440b      	add	r3, r1
 800064c:	011b      	lsls	r3, r3, #4
 800064e:	3328      	adds	r3, #40	; 0x28
 8000650:	4a08      	ldr	r2, [pc, #32]	; (8000674 <is_step_differrent+0x50>)
 8000652:	4413      	add	r3, r2
 8000654:	3304      	adds	r3, #4
 8000656:	2210      	movs	r2, #16
 8000658:	f107 0110 	add.w	r1, r7, #16
 800065c:	4618      	mov	r0, r3
 800065e:	f00d f933 	bl	800d8c8 <memcmp>
 8000662:	4603      	mov	r3, r0
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800066e:	b002      	add	sp, #8
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	2000017c 	.word	0x2000017c

08000678 <dt_Modify_step>:

void dt_Modify_step(uint8_t pg,uint8_t stepindex ,_def_step step)
{
 8000678:	b082      	sub	sp, #8
 800067a:	b5b0      	push	{r4, r5, r7, lr}
 800067c:	b084      	sub	sp, #16
 800067e:	af02      	add	r7, sp, #8
 8000680:	f107 0418 	add.w	r4, r7, #24
 8000684:	e884 000c 	stmia.w	r4, {r2, r3}
 8000688:	4603      	mov	r3, r0
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	460b      	mov	r3, r1
 800068e:	71bb      	strb	r3, [r7, #6]
	if(is_step_differrent(pg,stepindex ,step))
 8000690:	79bd      	ldrb	r5, [r7, #6]
 8000692:	79fc      	ldrb	r4, [r7, #7]
 8000694:	466a      	mov	r2, sp
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800069e:	e882 0003 	stmia.w	r2, {r0, r1}
 80006a2:	f107 0318 	add.w	r3, r7, #24
 80006a6:	cb0c      	ldmia	r3, {r2, r3}
 80006a8:	4629      	mov	r1, r5
 80006aa:	4620      	mov	r0, r4
 80006ac:	f7ff ffba 	bl	8000624 <is_step_differrent>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d014      	beq.n	80006e0 <dt_Modify_step+0x68>
	{
		memcpy(&system_data.flash_data.Program_para[pg][stepindex],&step,sizeof(_def_step));
 80006b6:	79fa      	ldrb	r2, [r7, #7]
 80006b8:	79b9      	ldrb	r1, [r7, #6]
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	009a      	lsls	r2, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	3328      	adds	r3, #40	; 0x28
 80006ca:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <dt_Modify_step+0x78>)
 80006cc:	4413      	add	r3, r2
 80006ce:	3304      	adds	r3, #4
 80006d0:	2210      	movs	r2, #16
 80006d2:	f107 0118 	add.w	r1, r7, #24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f00d f906 	bl	800d8e8 <memcpy>
		dt_store_system_data();
 80006dc:	f000 f834 	bl	8000748 <dt_store_system_data>
	}
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80006ea:	b002      	add	sp, #8
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	2000017c 	.word	0x2000017c

080006f4 <dt_system_data_init>:

void dt_system_data_init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	read_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS);
 80006f8:	4a10      	ldr	r2, [pc, #64]	; (800073c <dt_system_data_init+0x48>)
 80006fa:	f44f 617d 	mov.w	r1, #4048	; 0xfd0
 80006fe:	4810      	ldr	r0, [pc, #64]	; (8000740 <dt_system_data_init+0x4c>)
 8000700:	f000 fc74 	bl	8000fec <read_flash>
	if(!is_data_init())
 8000704:	f7ff ff36 	bl	8000574 <is_data_init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d112      	bne.n	8000734 <dt_system_data_init+0x40>
	{
		memcpy(&system_data.flash_data,&flash_defaul,sizeof(_flash_data));
 800070e:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <dt_system_data_init+0x4c>)
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <dt_system_data_init+0x50>)
 8000712:	4610      	mov	r0, r2
 8000714:	4619      	mov	r1, r3
 8000716:	f44f 637d 	mov.w	r3, #4048	; 0xfd0
 800071a:	461a      	mov	r2, r3
 800071c:	f00d f8e4 	bl	800d8e8 <memcpy>
		if(write_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS) != HAL_OK)
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <dt_system_data_init+0x48>)
 8000722:	f44f 617d 	mov.w	r1, #4048	; 0xfd0
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <dt_system_data_init+0x4c>)
 8000728:	f000 fc22 	bl	8000f70 <write_flash>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d000      	beq.n	8000734 <dt_system_data_init+0x40>
		{
			//do when write flash fail
			__NOP();
 8000732:	bf00      	nop
		}
	}
	dt_calculator_pg_stepnumber();
 8000734:	f7ff ff32 	bl	800059c <dt_calculator_pg_stepnumber>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08060000 	.word	0x08060000
 8000740:	2000017c 	.word	0x2000017c
 8000744:	0800f660 	.word	0x0800f660

08000748 <dt_store_system_data>:

HAL_StatusTypeDef dt_store_system_data(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res = write_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS);
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <dt_store_system_data+0x30>)
 8000750:	f44f 617d 	mov.w	r1, #4048	; 0xfd0
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <dt_store_system_data+0x34>)
 8000756:	f000 fc0b 	bl	8000f70 <write_flash>
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	if( res != HAL_OK){
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d004      	beq.n	800076e <dt_store_system_data+0x26>
		printf("wirte flash fail! error code : %d",res);
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <dt_store_system_data+0x38>)
 800076a:	f00d f8d3 	bl	800d914 <iprintf>
	}
	return res;
 800076e:	79fb      	ldrb	r3, [r7, #7]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08060000 	.word	0x08060000
 800077c:	2000017c 	.word	0x2000017c
 8000780:	0800ecd0 	.word	0x0800ecd0

08000784 <Dw_write>:
	memset(&s_log,0,sizeof(s_log));
}


static inline void Dw_write(uint8_t *data,uint16_t len)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	807b      	strh	r3, [r7, #2]
	uart_transmit_block(data, len, 1000);
 8000790:	887b      	ldrh	r3, [r7, #2]
 8000792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000796:	4619      	mov	r1, r3
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f003 f95d 	bl	8003a58 <uart_transmit_block>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <Dwin_Write_VP>:

	}
}

int Dwin_Write_VP(uint16_t Addr,uint16_t *data,uint16_t len)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b09c      	sub	sp, #112	; 0x70
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	6039      	str	r1, [r7, #0]
 80007b0:	80fb      	strh	r3, [r7, #6]
 80007b2:	4613      	mov	r3, r2
 80007b4:	80bb      	strh	r3, [r7, #4]
	uint8_t DwinBuf[100];
	DwinBuf[0]= 0x5A;
 80007b6:	235a      	movs	r3, #90	; 0x5a
 80007b8:	723b      	strb	r3, [r7, #8]
	DwinBuf[1]= 0xA5;
 80007ba:	23a5      	movs	r3, #165	; 0xa5
 80007bc:	727b      	strb	r3, [r7, #9]
	DwinBuf[2]= (len+1)*2 +1;  //
 80007be:	88bb      	ldrh	r3, [r7, #4]
 80007c0:	3301      	adds	r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	3301      	adds	r3, #1
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	72bb      	strb	r3, [r7, #10]
	DwinBuf[3]= 0x82;
 80007ce:	2382      	movs	r3, #130	; 0x82
 80007d0:	72fb      	strb	r3, [r7, #11]
	DwinBuf[4]= Addr>>8;
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	733b      	strb	r3, [r7, #12]
	DwinBuf[5]= Addr;
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	737b      	strb	r3, [r7, #13]
	for(int i=0;i<len;i++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80007e6:	e01f      	b.n	8000828 <Dwin_Write_VP+0x82>
	{
		DwinBuf[6+i*2] = data[i]/256;
 80007e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	0a1b      	lsrs	r3, r3, #8
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007f8:	3303      	adds	r3, #3
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	b2d2      	uxtb	r2, r2
 80007fe:	3370      	adds	r3, #112	; 0x70
 8000800:	443b      	add	r3, r7
 8000802:	f803 2c68 	strb.w	r2, [r3, #-104]
		DwinBuf[6+i*2+1] = data[i];
 8000806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	881a      	ldrh	r2, [r3, #0]
 8000810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000812:	3303      	adds	r3, #3
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	3301      	adds	r3, #1
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	3370      	adds	r3, #112	; 0x70
 800081c:	443b      	add	r3, r7
 800081e:	f803 2c68 	strb.w	r2, [r3, #-104]
	for(int i=0;i<len;i++)
 8000822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000824:	3301      	adds	r3, #1
 8000826:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000828:	88bb      	ldrh	r3, [r7, #4]
 800082a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800082c:	429a      	cmp	r2, r3
 800082e:	dbdb      	blt.n	80007e8 <Dwin_Write_VP+0x42>
	}
    len = (len+1)*2 +4;
 8000830:	88bb      	ldrh	r3, [r7, #4]
 8000832:	3303      	adds	r3, #3
 8000834:	b29b      	uxth	r3, r3
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	80bb      	strh	r3, [r7, #4]
    Dw_write(DwinBuf, len);
 800083a:	88ba      	ldrh	r2, [r7, #4]
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff9e 	bl	8000784 <Dw_write>
	return 1;
 8000848:	2301      	movs	r3, #1
}
 800084a:	4618      	mov	r0, r3
 800084c:	3770      	adds	r7, #112	; 0x70
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <Dwin_switch_page>:
    len = (len+1)*2 +4;
    Dw_write(DwinBuf, len);
	return 1;
}
void Dwin_switch_page(int page_index)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
	uint16_t Buf[2] = {0x5A01,00};
 800085a:	f645 2301 	movw	r3, #23041	; 0x5a01
 800085e:	81bb      	strh	r3, [r7, #12]
 8000860:	2300      	movs	r3, #0
 8000862:	81fb      	strh	r3, [r7, #14]
	Buf[1] = page_index;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	b29b      	uxth	r3, r3
 8000868:	81fb      	strh	r3, [r7, #14]
	Dwin_Write_VP(0X0084,Buf,2);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2202      	movs	r2, #2
 8000870:	4619      	mov	r1, r3
 8000872:	2084      	movs	r0, #132	; 0x84
 8000874:	f7ff ff97 	bl	80007a6 <Dwin_Write_VP>
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <Dwin_switch_running_page>:
void Dwin_switch_running_page(uint8_t pg,uint8_t stepnumber)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	71bb      	strb	r3, [r7, #6]
	switch (system_data.flash_data.Program_para[pg][stepnumber].type) {
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	79b9      	ldrb	r1, [r7, #6]
 8000894:	4815      	ldr	r0, [pc, #84]	; (80008ec <Dwin_switch_running_page+0x6c>)
 8000896:	4613      	mov	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	009a      	lsls	r2, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	4403      	add	r3, r0
 80008a6:	332c      	adds	r3, #44	; 0x2c
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d00e      	beq.n	80008cc <Dwin_switch_running_page+0x4c>
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	dc10      	bgt.n	80008d4 <Dwin_switch_running_page+0x54>
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d002      	beq.n	80008bc <Dwin_switch_running_page+0x3c>
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d004      	beq.n	80008c4 <Dwin_switch_running_page+0x44>
			break;
		case STEP_TYPE_DRYING:
			Dwin_switch_page(PAGE_RUNNING_STEP_DRYING);
			break;
		default:
			break;
 80008ba:	e00b      	b.n	80008d4 <Dwin_switch_running_page+0x54>
			Dwin_switch_page(PAGE_RUNNING_STEP_SHAKE);
 80008bc:	2009      	movs	r0, #9
 80008be:	f7ff ffc8 	bl	8000852 <Dwin_switch_page>
			break;
 80008c2:	e008      	b.n	80008d6 <Dwin_switch_running_page+0x56>
			Dwin_switch_page(PAGE_RUNNING_STEP_WASHING);
 80008c4:	200a      	movs	r0, #10
 80008c6:	f7ff ffc4 	bl	8000852 <Dwin_switch_page>
			break;
 80008ca:	e004      	b.n	80008d6 <Dwin_switch_running_page+0x56>
			Dwin_switch_page(PAGE_RUNNING_STEP_DRYING);
 80008cc:	200b      	movs	r0, #11
 80008ce:	f7ff ffc0 	bl	8000852 <Dwin_switch_page>
			break;
 80008d2:	e000      	b.n	80008d6 <Dwin_switch_running_page+0x56>
			break;
 80008d4:	bf00      	nop
	}
	dw_update_setup_page(pg,stepnumber);
 80008d6:	79ba      	ldrb	r2, [r7, #6]
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	4611      	mov	r1, r2
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f82b 	bl	8000938 <dw_update_setup_page>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000017c 	.word	0x2000017c

080008f0 <Dwin_init>:

void Dwin_init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	Dwin_reset();
 80008f4:	f000 f80e 	bl	8000914 <Dwin_reset>
	HAL_Delay(1000);
 80008f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fc:	f003 f95c 	bl	8003bb8 <HAL_Delay>
//	Dwin_switch_page(05);
	memset(&s_log,0,sizeof(s_log));
 8000900:	f240 2206 	movw	r2, #518	; 0x206
 8000904:	2100      	movs	r1, #0
 8000906:	4802      	ldr	r0, [pc, #8]	; (8000910 <Dwin_init+0x20>)
 8000908:	f00c fffc 	bl	800d904 <memset>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20001174 	.word	0x20001174

08000914 <Dwin_reset>:


void Dwin_reset(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	uint16_t Buf[2] = {0x55AA,0x5AA5};
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <Dwin_reset+0x20>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	607b      	str	r3, [r7, #4]
	Dwin_Write_VP(0X0004,Buf,2);
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2202      	movs	r2, #2
 8000924:	4619      	mov	r1, r3
 8000926:	2004      	movs	r0, #4
 8000928:	f7ff ff3d 	bl	80007a6 <Dwin_Write_VP>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	0800ed00 	.word	0x0800ed00

08000938 <dw_update_setup_page>:

int dw_update_setup_page(uint8_t pg,uint8_t stepnumber){
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b08b      	sub	sp, #44	; 0x2c
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	71bb      	strb	r3, [r7, #6]
	if((pg > NUM_MAX_WELL ) || (stepnumber >24)){
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	2b0a      	cmp	r3, #10
 800094c:	d802      	bhi.n	8000954 <dw_update_setup_page+0x1c>
 800094e:	79bb      	ldrb	r3, [r7, #6]
 8000950:	2b18      	cmp	r3, #24
 8000952:	d902      	bls.n	800095a <dw_update_setup_page+0x22>
			return -1;
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
 8000958:	e058      	b.n	8000a0c <dw_update_setup_page+0xd4>
	}
	uint16_t data[12];

	data[0] = pg+1;
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	b29b      	uxth	r3, r3
 800095e:	3301      	adds	r3, #1
 8000960:	b29b      	uxth	r3, r3
 8000962:	81bb      	strh	r3, [r7, #12]
	data[1] = stepnumber+1;
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	b29b      	uxth	r3, r3
 8000968:	3301      	adds	r3, #1
 800096a:	b29b      	uxth	r3, r3
 800096c:	81fb      	strh	r3, [r7, #14]
	data[2] = system_data.flash_data.Program_para[pg][stepnumber].type;
 800096e:	79fa      	ldrb	r2, [r7, #7]
 8000970:	79b9      	ldrb	r1, [r7, #6]
 8000972:	4828      	ldr	r0, [pc, #160]	; (8000a14 <dw_update_setup_page+0xdc>)
 8000974:	4613      	mov	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	009a      	lsls	r2, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	440b      	add	r3, r1
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	4403      	add	r3, r0
 8000984:	332c      	adds	r3, #44	; 0x2c
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b29b      	uxth	r3, r3
 800098a:	823b      	strh	r3, [r7, #16]
	data[3] = system_data.flash_data.Program_para[pg][stepnumber].wells;
 800098c:	79fa      	ldrb	r2, [r7, #7]
 800098e:	79b9      	ldrb	r1, [r7, #6]
 8000990:	4820      	ldr	r0, [pc, #128]	; (8000a14 <dw_update_setup_page+0xdc>)
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	009a      	lsls	r2, r3, #2
 800099a:	4413      	add	r3, r2
 800099c:	440b      	add	r3, r1
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	4403      	add	r3, r0
 80009a2:	332d      	adds	r3, #45	; 0x2d
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	827b      	strh	r3, [r7, #18]
	if((data[3] == 0) || (data[3] >= MAX_WELLS_NUM) )
 80009aa:	8a7b      	ldrh	r3, [r7, #18]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <dw_update_setup_page+0x7e>
 80009b0:	8a7b      	ldrh	r3, [r7, #18]
 80009b2:	2b09      	cmp	r3, #9
 80009b4:	d901      	bls.n	80009ba <dw_update_setup_page+0x82>
		data[3] = 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	827b      	strh	r3, [r7, #18]
	for(int i=4;i<11;i++)
 80009ba:	2304      	movs	r3, #4
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
 80009be:	e019      	b.n	80009f4 <dw_update_setup_page+0xbc>
	{
		data[i] = system_data.flash_data.Program_para[pg][stepnumber].timing[i-4];
 80009c0:	79fa      	ldrb	r2, [r7, #7]
 80009c2:	79b8      	ldrb	r0, [r7, #6]
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	1f19      	subs	r1, r3, #4
 80009c8:	4c12      	ldr	r4, [pc, #72]	; (8000a14 <dw_update_setup_page+0xdc>)
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	009a      	lsls	r2, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	4403      	add	r3, r0
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	440b      	add	r3, r1
 80009da:	3314      	adds	r3, #20
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4423      	add	r3, r4
 80009e0:	88da      	ldrh	r2, [r3, #6]
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	3328      	adds	r3, #40	; 0x28
 80009e8:	443b      	add	r3, r7
 80009ea:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for(int i=4;i<11;i++)
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	3301      	adds	r3, #1
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	2b0a      	cmp	r3, #10
 80009f8:	dde2      	ble.n	80009c0 <dw_update_setup_page+0x88>
	}
	Dwin_Write_VP(VP_SETUP_PARA,data,11);
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	220b      	movs	r2, #11
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8000a06:	f7ff fece 	bl	80007a6 <Dwin_Write_VP>
	return 1;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	372c      	adds	r7, #44	; 0x2c
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	2000017c 	.word	0x2000017c

08000a18 <show_user_page>:

void show_user_page(){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	Dwin_switch_page(PAGE_SETUP_USER_CTL);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f7ff ff18 	bl	8000852 <Dwin_switch_page>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <show_setup_page>:
void show_setup_page(uint8_t pg,uint8_t stepnumber){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	71bb      	strb	r3, [r7, #6]
	if((pg > NUM_MAX_WELL ) || (stepnumber >24)){
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b0a      	cmp	r3, #10
 8000a3c:	d827      	bhi.n	8000a8e <show_setup_page+0x66>
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	2b18      	cmp	r3, #24
 8000a42:	d824      	bhi.n	8000a8e <show_setup_page+0x66>
		return;
	}
	switch(system_data.flash_data.Program_para[pg][stepnumber].type){
 8000a44:	79fa      	ldrb	r2, [r7, #7]
 8000a46:	79b9      	ldrb	r1, [r7, #6]
 8000a48:	4813      	ldr	r0, [pc, #76]	; (8000a98 <show_setup_page+0x70>)
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	009a      	lsls	r2, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	4403      	add	r3, r0
 8000a5a:	332c      	adds	r3, #44	; 0x2c
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d002      	beq.n	8000a68 <show_setup_page+0x40>
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d004      	beq.n	8000a70 <show_setup_page+0x48>
 8000a66:	e007      	b.n	8000a78 <show_setup_page+0x50>
		case (STEP_TYPE_WASHING):
				Dwin_switch_page(PAGE_SETUP_STEP_WASHING);
 8000a68:	2007      	movs	r0, #7
 8000a6a:	f7ff fef2 	bl	8000852 <Dwin_switch_page>
				break;
 8000a6e:	e007      	b.n	8000a80 <show_setup_page+0x58>
		case (STEP_TYPE_DRYING):
				Dwin_switch_page(PAGE_SETUP_STEP_DRYING);
 8000a70:	2008      	movs	r0, #8
 8000a72:	f7ff feee 	bl	8000852 <Dwin_switch_page>
				break;
 8000a76:	e003      	b.n	8000a80 <show_setup_page+0x58>
		default:
				Dwin_switch_page(PAGE_SETUP_STEP_SHAKE);
 8000a78:	2006      	movs	r0, #6
 8000a7a:	f7ff feea 	bl	8000852 <Dwin_switch_page>
			break;
 8000a7e:	bf00      	nop
	}
	dw_update_setup_page(pg,stepnumber);
 8000a80:	79ba      	ldrb	r2, [r7, #6]
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff56 	bl	8000938 <dw_update_setup_page>
 8000a8c:	e000      	b.n	8000a90 <show_setup_page+0x68>
		return;
 8000a8e:	bf00      	nop
}
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000017c 	.word	0x2000017c

08000a9c <dwin_update_step>:
//                 2F  FF      2F FF   30  00
//                                  8      10  11  12  13 14  15  16
//{5A}{A5}{18}{83}{3A}{00}{0A}{00}{00}{00}{01}{00}{01}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}
void dwin_update_step(uint8_t *data){
 8000a9c:	b5b0      	push	{r4, r5, r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	6078      	str	r0, [r7, #4]
	_def_step step;
	uint8_t pg = data[8]; // 0x3000
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7a1b      	ldrb	r3, [r3, #8]
 8000aa8:	76fb      	strb	r3, [r7, #27]
	uint8_t stepindex = data[10]; // 0x3001
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	7a9b      	ldrb	r3, [r3, #10]
 8000aae:	76bb      	strb	r3, [r7, #26]
	step.wells =data[14];
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7b9b      	ldrb	r3, [r3, #14]
 8000ab4:	727b      	strb	r3, [r7, #9]
	if(step.wells> NUM_MAX_WELL)
 8000ab6:	7a7b      	ldrb	r3, [r7, #9]
 8000ab8:	2b0a      	cmp	r3, #10
 8000aba:	d846      	bhi.n	8000b4a <dwin_update_step+0xae>
			return;
	switch (step.wells) {
 8000abc:	7a7b      	ldrb	r3, [r7, #9]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d002      	beq.n	8000ac8 <dwin_update_step+0x2c>
 8000ac2:	2b0a      	cmp	r3, #10
 8000ac4:	d003      	beq.n	8000ace <dwin_update_step+0x32>
 8000ac6:	e005      	b.n	8000ad4 <dwin_update_step+0x38>
		case 1:
			step.type = STEP_TYPE_SHAKE;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	723b      	strb	r3, [r7, #8]
			break;
 8000acc:	e005      	b.n	8000ada <dwin_update_step+0x3e>
		case NUM_MAX_WELL:
			step.type = STEP_TYPE_DRYING;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	723b      	strb	r3, [r7, #8]
			break;
 8000ad2:	e002      	b.n	8000ada <dwin_update_step+0x3e>
		default:
			step.type = STEP_TYPE_WASHING;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	723b      	strb	r3, [r7, #8]
			break;
 8000ad8:	bf00      	nop
	}
	for(int i=0;i<7;i++){
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	e01c      	b.n	8000b1a <dwin_update_step+0x7e>
		step.timing[i] = (uint16_t)data[15+i*2]*256 + data[16+i*2];
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	330f      	adds	r3, #15
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4413      	add	r3, r2
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	3308      	adds	r3, #8
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	440b      	add	r3, r1
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	4413      	add	r3, r2
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	3320      	adds	r3, #32
 8000b0e:	443b      	add	r3, r7
 8000b10:	f823 2c16 	strh.w	r2, [r3, #-22]
	for(int i=0;i<7;i++){
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	3301      	adds	r3, #1
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	2b06      	cmp	r3, #6
 8000b1e:	dddf      	ble.n	8000ae0 <dwin_update_step+0x44>
	}
	dt_Modify_step(pg-1, stepindex-1, step);
 8000b20:	7efb      	ldrb	r3, [r7, #27]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	b2dc      	uxtb	r4, r3
 8000b26:	7ebb      	ldrb	r3, [r7, #26]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	b2dd      	uxtb	r5, r3
 8000b2c:	466a      	mov	r2, sp
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b36:	e882 0003 	stmia.w	r2, {r0, r1}
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	cb0c      	ldmia	r3, {r2, r3}
 8000b40:	4629      	mov	r1, r5
 8000b42:	4620      	mov	r0, r4
 8000b44:	f7ff fd98 	bl	8000678 <dt_Modify_step>
 8000b48:	e000      	b.n	8000b4c <dwin_update_step+0xb0>
			return;
 8000b4a:	bf00      	nop
}
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000b54 <dwin_start_program>:

void dwin_start_program(uint8_t pg){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b09c      	sub	sp, #112	; 0x70
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]

//	s_log.s_size = sprintf(s_log.log,"\r\nIF I DIE");
//	Dwin_switch_page(PAGE_MANUAL_CONTROL);
//	s_log_clear();
	HAL_Delay(1);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f003 f82a 	bl	8003bb8 <HAL_Delay>
	char tmp[100];
	sprintf(tmp,"START PROGRAM %d",pg);
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4907      	ldr	r1, [pc, #28]	; (8000b88 <dwin_start_program+0x34>)
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f00c ff5f 	bl	800da30 <siprintf>
	pg_start(pg-1, 0);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 f95c 	bl	8002e38 <pg_start>

//	s_log_add_1_line(tmp);
//	Dwin_Write_VP_String(0x3800,s_log.log, s_log.s_size);
}
 8000b80:	bf00      	nop
 8000b82:	3770      	adds	r7, #112	; 0x70
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	0800ed04 	.word	0x0800ed04

08000b8c <dwin_change_target_well>:
void dwin_stop_program(void){


}
void dwin_change_target_well(uint8_t well){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	if(well> NUM_MAX_WELL)
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b0a      	cmp	r3, #10
 8000b9a:	d812      	bhi.n	8000bc2 <dwin_change_target_well+0x36>
		return;
	uint8_t target_page = PAGE_SETUP_STEP_SHAKE;
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	73fb      	strb	r3, [r7, #15]
	switch (well) {
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d007      	beq.n	8000bb6 <dwin_change_target_well+0x2a>
 8000ba6:	2b0a      	cmp	r3, #10
 8000ba8:	d102      	bne.n	8000bb0 <dwin_change_target_well+0x24>
		case 1:
			break;
		case NUM_MAX_WELL:
			target_page = PAGE_SETUP_STEP_DRYING;
 8000baa:	2308      	movs	r3, #8
 8000bac:	73fb      	strb	r3, [r7, #15]
			break;
 8000bae:	e003      	b.n	8000bb8 <dwin_change_target_well+0x2c>
		default:
			target_page = PAGE_SETUP_STEP_WASHING;
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	73fb      	strb	r3, [r7, #15]
			break;
 8000bb4:	e000      	b.n	8000bb8 <dwin_change_target_well+0x2c>
			break;
 8000bb6:	bf00      	nop
	}
	Dwin_switch_page(target_page);
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fe49 	bl	8000852 <Dwin_switch_page>
 8000bc0:	e000      	b.n	8000bc4 <dwin_change_target_well+0x38>
		return;
 8000bc2:	bf00      	nop
}
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <dw_process_rx_buffer>:
static uint8_t current_pg_setup;
static uint8_t current_step_setup;
int dw_process_rx_buffer(uint8_t *data,uint16_t size){ //USART_CR2_TOEN
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]

	if(size < 5){
 8000bd8:	887b      	ldrh	r3, [r7, #2]
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d802      	bhi.n	8000be4 <dw_process_rx_buffer+0x18>
		return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	e144      	b.n	8000e6e <dw_process_rx_buffer+0x2a2>
	}
	if(data[0] != 0x5A && data[1] != 0xA5 ){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b5a      	cmp	r3, #90	; 0x5a
 8000bea:	d007      	beq.n	8000bfc <dw_process_rx_buffer+0x30>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2ba5      	cmp	r3, #165	; 0xa5
 8000bf4:	d002      	beq.n	8000bfc <dw_process_rx_buffer+0x30>
		return -2;
 8000bf6:	f06f 0301 	mvn.w	r3, #1
 8000bfa:	e138      	b.n	8000e6e <dw_process_rx_buffer+0x2a2>
	}
	uint16_t code = data[4];
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	81fb      	strh	r3, [r7, #14]
	code = code*256+ data[5];
 8000c04:	89fb      	ldrh	r3, [r7, #14]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3305      	adds	r3, #5
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4413      	add	r3, r2
 8000c14:	81fb      	strh	r3, [r7, #14]
	uint16_t value;
	switch (code) {
 8000c16:	89fb      	ldrh	r3, [r7, #14]
 8000c18:	f244 0202 	movw	r2, #16386	; 0x4002
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	f000 8110 	beq.w	8000e42 <dw_process_rx_buffer+0x276>
 8000c22:	f244 0202 	movw	r2, #16386	; 0x4002
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f300 811d 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c2c:	f244 0201 	movw	r2, #16385	; 0x4001
 8000c30:	4293      	cmp	r3, r2
 8000c32:	f000 8103 	beq.w	8000e3c <dw_process_rx_buffer+0x270>
 8000c36:	f244 0201 	movw	r2, #16385	; 0x4001
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	f300 8113 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c44:	f000 80f3 	beq.w	8000e2e <dw_process_rx_buffer+0x262>
 8000c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c4c:	f300 810b 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c50:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 8000c54:	f000 8097 	beq.w	8000d86 <dw_process_rx_buffer+0x1ba>
 8000c58:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 8000c5c:	f300 8103 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c60:	f243 1201 	movw	r2, #12545	; 0x3101
 8000c64:	4293      	cmp	r3, r2
 8000c66:	f000 8088 	beq.w	8000d7a <dw_process_rx_buffer+0x1ae>
 8000c6a:	f243 1201 	movw	r2, #12545	; 0x3101
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	f300 80f9 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c74:	f243 0203 	movw	r2, #12291	; 0x3003
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d057      	beq.n	8000d2c <dw_process_rx_buffer+0x160>
 8000c7c:	f243 0203 	movw	r2, #12291	; 0x3003
 8000c80:	4293      	cmp	r3, r2
 8000c82:	f300 80f0 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c86:	f243 0201 	movw	r2, #12289	; 0x3001
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d060      	beq.n	8000d50 <dw_process_rx_buffer+0x184>
 8000c8e:	f243 0201 	movw	r2, #12289	; 0x3001
 8000c92:	4293      	cmp	r3, r2
 8000c94:	f300 80e7 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000c9c:	d032      	beq.n	8000d04 <dw_process_rx_buffer+0x138>
 8000c9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000ca2:	f300 80e0 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000ca6:	f242 5201 	movw	r2, #9473	; 0x2501
 8000caa:	4293      	cmp	r3, r2
 8000cac:	f000 80bb 	beq.w	8000e26 <dw_process_rx_buffer+0x25a>
 8000cb0:	f242 5201 	movw	r2, #9473	; 0x2501
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	f300 80d6 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000cba:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 8000cbe:	f000 80ae 	beq.w	8000e1e <dw_process_rx_buffer+0x252>
 8000cc2:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 8000cc6:	f300 80ce 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000cca:	f242 3205 	movw	r2, #8965	; 0x2305
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	f000 8081 	beq.w	8000dd6 <dw_process_rx_buffer+0x20a>
 8000cd4:	f242 3205 	movw	r2, #8965	; 0x2305
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	f300 80c4 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000cde:	f242 3204 	movw	r2, #8964	; 0x2304
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	f000 8089 	beq.w	8000dfa <dw_process_rx_buffer+0x22e>
 8000ce8:	f242 3204 	movw	r2, #8964	; 0x2304
 8000cec:	4293      	cmp	r3, r2
 8000cee:	f300 80ba 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000cf2:	f242 2204 	movw	r2, #8708	; 0x2204
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d05b      	beq.n	8000db2 <dw_process_rx_buffer+0x1e6>
 8000cfa:	f242 2205 	movw	r2, #8709	; 0x2205
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d045      	beq.n	8000d8e <dw_process_rx_buffer+0x1c2>
					show_user_page();
				}
				break;

		default:
			break;
 8000d02:	e0b0      	b.n	8000e66 <dw_process_rx_buffer+0x29a>
				current_pg_setup=value = data[8];
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3308      	adds	r3, #8
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	81bb      	strh	r3, [r7, #12]
 8000d0c:	89bb      	ldrh	r3, [r7, #12]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b59      	ldr	r3, [pc, #356]	; (8000e78 <dw_process_rx_buffer+0x2ac>)
 8000d12:	701a      	strb	r2, [r3, #0]
				current_step_setup =1;
 8000d14:	4b59      	ldr	r3, [pc, #356]	; (8000e7c <dw_process_rx_buffer+0x2b0>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
				show_setup_page(value-1,0);
 8000d1a:	89bb      	ldrh	r3, [r7, #12]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fe7f 	bl	8000a28 <show_setup_page>
			break;
 8000d2a:	e09f      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				value = (uint16_t)data[7]*256+data[8];
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3307      	adds	r3, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3308      	adds	r3, #8
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	4413      	add	r3, r2
 8000d42:	81bb      	strh	r3, [r7, #12]
				dwin_change_target_well(value);
 8000d44:	89bb      	ldrh	r3, [r7, #12]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff1f 	bl	8000b8c <dwin_change_target_well>
				break;
 8000d4e:	e08d      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				current_step_setup = value = data[8];
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3308      	adds	r3, #8
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	81bb      	strh	r3, [r7, #12]
 8000d58:	89bb      	ldrh	r3, [r7, #12]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b47      	ldr	r3, [pc, #284]	; (8000e7c <dw_process_rx_buffer+0x2b0>)
 8000d5e:	701a      	strb	r2, [r3, #0]
				show_setup_page(current_pg_setup-1,value-1);
 8000d60:	4b45      	ldr	r3, [pc, #276]	; (8000e78 <dw_process_rx_buffer+0x2ac>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	89bb      	ldrh	r3, [r7, #12]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	4619      	mov	r1, r3
 8000d72:	4610      	mov	r0, r2
 8000d74:	f7ff fe58 	bl	8000a28 <show_setup_page>
			break;
 8000d78:	e078      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				dw_update_step_numbers();
 8000d7a:	f000 f885 	bl	8000e88 <dw_update_step_numbers>
				current_pg_setup =0;
 8000d7e:	4b3e      	ldr	r3, [pc, #248]	; (8000e78 <dw_process_rx_buffer+0x2ac>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
			break;
 8000d84:	e072      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				dwin_update_step(data);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fe88 	bl	8000a9c <dwin_update_step>
				break;
 8000d8c:	e06e      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				value = (uint16_t)data[7]*256+data[8];
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3307      	adds	r3, #7
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3308      	adds	r3, #8
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	4413      	add	r3, r2
 8000da4:	81bb      	strh	r3, [r7, #12]
				step_mt_move_foward(&x_motor, value);
 8000da6:	89bb      	ldrh	r3, [r7, #12]
 8000da8:	4619      	mov	r1, r3
 8000daa:	4835      	ldr	r0, [pc, #212]	; (8000e80 <dw_process_rx_buffer+0x2b4>)
 8000dac:	f000 ff34 	bl	8001c18 <step_mt_move_foward>
				break;
 8000db0:	e05c      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				value = (uint16_t)data[7]*256+data[8];
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3307      	adds	r3, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3308      	adds	r3, #8
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4413      	add	r3, r2
 8000dc8:	81bb      	strh	r3, [r7, #12]
				step_mt_move_backward(&x_motor, value);
 8000dca:	89bb      	ldrh	r3, [r7, #12]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482c      	ldr	r0, [pc, #176]	; (8000e80 <dw_process_rx_buffer+0x2b4>)
 8000dd0:	f000 ff3e 	bl	8001c50 <step_mt_move_backward>
				break;
 8000dd4:	e04a      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				value = (uint16_t)data[7]*256+data[8];
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3307      	adds	r3, #7
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3308      	adds	r3, #8
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	81bb      	strh	r3, [r7, #12]
				step_mt_move_foward(&z_motor, value);
 8000dee:	89bb      	ldrh	r3, [r7, #12]
 8000df0:	4619      	mov	r1, r3
 8000df2:	4824      	ldr	r0, [pc, #144]	; (8000e84 <dw_process_rx_buffer+0x2b8>)
 8000df4:	f000 ff10 	bl	8001c18 <step_mt_move_foward>
				break;
 8000df8:	e038      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				value = (uint16_t)data[7]*256+data[8];
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3307      	adds	r3, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3308      	adds	r3, #8
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	81bb      	strh	r3, [r7, #12]
				step_mt_move_backward(&z_motor, value);
 8000e12:	89bb      	ldrh	r3, [r7, #12]
 8000e14:	4619      	mov	r1, r3
 8000e16:	481b      	ldr	r0, [pc, #108]	; (8000e84 <dw_process_rx_buffer+0x2b8>)
 8000e18:	f000 ff1a 	bl	8001c50 <step_mt_move_backward>
				break;
 8000e1c:	e026      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				mt_move_to_home(&x_motor);
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <dw_process_rx_buffer+0x2b4>)
 8000e20:	f000 fe59 	bl	8001ad6 <mt_move_to_home>
				break;
 8000e24:	e022      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				mt_move_to_home(&z_motor);
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <dw_process_rx_buffer+0x2b8>)
 8000e28:	f000 fe55 	bl	8001ad6 <mt_move_to_home>
				break;
 8000e2c:	e01e      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				dwin_start_program(data[8]);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3308      	adds	r3, #8
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fe8d 	bl	8000b54 <dwin_start_program>
				break;
 8000e3a:	e017      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				pg_stop();
 8000e3c:	f002 f828 	bl	8002e90 <pg_stop>
				break;
 8000e40:	e014      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				value = (uint16_t)data[7]*256+data[8];
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3307      	adds	r3, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3308      	adds	r3, #8
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	81bb      	strh	r3, [r7, #12]
				if(value == 1)
 8000e5a:	89bb      	ldrh	r3, [r7, #12]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d104      	bne.n	8000e6a <dw_process_rx_buffer+0x29e>
					show_user_page();
 8000e60:	f7ff fdda 	bl	8000a18 <show_user_page>
				break;
 8000e64:	e001      	b.n	8000e6a <dw_process_rx_buffer+0x29e>
			break;
 8000e66:	bf00      	nop
 8000e68:	e000      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				break;
 8000e6a:	bf00      	nop
	}
	return 1;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000137a 	.word	0x2000137a
 8000e7c:	2000137b 	.word	0x2000137b
 8000e80:	20002abc 	.word	0x20002abc
 8000e84:	20002aec 	.word	0x20002aec

08000e88 <dw_update_step_numbers>:

int dw_update_step_numbers(void){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	dt_calculator_pg_stepnumber();
 8000e8c:	f7ff fb86 	bl	800059c <dt_calculator_pg_stepnumber>
	Dwin_Write_VP(VP_STEP_NUMBERS,system_data.pg_stepnumber,10);
 8000e90:	220a      	movs	r2, #10
 8000e92:	4904      	ldr	r1, [pc, #16]	; (8000ea4 <dw_update_step_numbers+0x1c>)
 8000e94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e98:	f7ff fc85 	bl	80007a6 <Dwin_Write_VP>
	return 1;
 8000e9c:	2301      	movs	r3, #1
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000114c 	.word	0x2000114c

08000ea8 <dw_update_steper_positon>:
float xxxx;
int dw_update_steper_positon(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
	static uint32_t time_tmp =0;
	if( (HAL_GetTick() > time_tmp)&&((x_motor.old_pos != x_motor.current_pos) || (z_motor.old_pos != z_motor.current_pos)))
 8000eae:	f002 fe77 	bl	8003ba0 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <dw_update_steper_positon+0xb8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d94b      	bls.n	8000f54 <dw_update_steper_positon+0xac>
 8000ebc:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <dw_update_steper_positon+0xbc>)
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <dw_update_steper_positon+0xbc>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d105      	bne.n	8000ed4 <dw_update_steper_positon+0x2c>
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <dw_update_steper_positon+0xc0>)
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <dw_update_steper_positon+0xc0>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d03f      	beq.n	8000f54 <dw_update_steper_positon+0xac>
	{
		time_tmp = HAL_GetTick() +50;
 8000ed4:	f002 fe64 	bl	8003ba0 <HAL_GetTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	3332      	adds	r3, #50	; 0x32
 8000edc:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <dw_update_steper_positon+0xb8>)
 8000ede:	6013      	str	r3, [r2, #0]
		x_motor.old_pos = x_motor.current_pos;
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <dw_update_steper_positon+0xbc>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <dw_update_steper_positon+0xbc>)
 8000ee6:	6053      	str	r3, [r2, #4]
		z_motor.old_pos = z_motor.current_pos;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <dw_update_steper_positon+0xc0>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <dw_update_steper_positon+0xc0>)
 8000eee:	6053      	str	r3, [r2, #4]
		uint16_t data[4];
		float tmp = (float)x_motor.current_pos/PULSES_PER_MM;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <dw_update_steper_positon+0xbc>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	ee07 3a90 	vmov	s15, r3
 8000ef8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000efc:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8000f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f04:	edc7 7a00 	vstr	s15, [r7]
		uint16_t *p = (uint16_t *)&tmp;
 8000f08:	463b      	mov	r3, r7
 8000f0a:	60fb      	str	r3, [r7, #12]
		data[0] = p[1];
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	885b      	ldrh	r3, [r3, #2]
 8000f10:	80bb      	strh	r3, [r7, #4]
		data[1] = p[0];
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	80fb      	strh	r3, [r7, #6]
		tmp = (float)z_motor.current_pos/PULSES_PER_MM;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <dw_update_steper_positon+0xc0>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f24:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8000f28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f2c:	edc7 7a00 	vstr	s15, [r7]
		xxxx= tmp;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <dw_update_steper_positon+0xc4>)
 8000f34:	6013      	str	r3, [r2, #0]
		data[2] = p[1];
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	885b      	ldrh	r3, [r3, #2]
 8000f3a:	813b      	strh	r3, [r7, #8]
		data[3] = p[0];
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	817b      	strh	r3, [r7, #10]
		Dwin_Write_VP(VP_X_STEP_MOTOR,data,4);
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2204      	movs	r2, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	f44f 5008 	mov.w	r0, #8704	; 0x2200
 8000f4c:	f7ff fc2b 	bl	80007a6 <Dwin_Write_VP>
		return 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <dw_update_steper_positon+0xae>
	}
	return 0;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20001380 	.word	0x20001380
 8000f64:	20002abc 	.word	0x20002abc
 8000f68:	20002aec 	.word	0x20002aec
 8000f6c:	2000137c 	.word	0x2000137c

08000f70 <write_flash>:
 * @param data Pointer to the data to be written
 * @param size Size of the data to be written, in bytes
 * @param address Memory address where the data will be written
 * @return HAL status
 */
HAL_StatusTypeDef write_flash(uint8_t* data, uint32_t size, uint32_t address) {
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	75fb      	strb	r3, [r7, #23]
    // Unlock flash
    HAL_FLASH_Unlock();
 8000f80:	f003 fba6 	bl	80046d0 <HAL_FLASH_Unlock>

    // Erase sector
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <write_flash+0x78>)
 8000f86:	22b3      	movs	r2, #179	; 0xb3
 8000f88:	60da      	str	r2, [r3, #12]
	FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	2007      	movs	r0, #7
 8000f8e:	f003 fd01 	bl	8004994 <FLASH_Erase_Sector>

    if (status == HAL_OK) {
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d120      	bne.n	8000fda <write_flash+0x6a>
        // Write data
        for (uint32_t i = 0; i < size; i++) {
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	e017      	b.n	8000fce <write_flash+0x5e>
            status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address + i, data[i]);
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	18d1      	adds	r1, r2, r3
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2200      	movs	r2, #0
 8000fb0:	461c      	mov	r4, r3
 8000fb2:	4615      	mov	r5, r2
 8000fb4:	4622      	mov	r2, r4
 8000fb6:	462b      	mov	r3, r5
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f003 fb35 	bl	8004628 <HAL_FLASH_Program>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d107      	bne.n	8000fd8 <write_flash+0x68>
        for (uint32_t i = 0; i < size; i++) {
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d3e3      	bcc.n	8000f9e <write_flash+0x2e>
 8000fd6:	e000      	b.n	8000fda <write_flash+0x6a>
                break;
 8000fd8:	bf00      	nop
            }
        }
    }

    // Lock flash
    HAL_FLASH_Lock();
 8000fda:	f003 fb9b 	bl	8004714 <HAL_FLASH_Lock>

    return status;
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <read_flash>:
 * @brief Reads data from flash memory
 * @param data Pointer to the buffer where the data will be stored
 * @param size Size of the data to be read, in bytes
 * @param address Memory address where the data will be read from
 */
void read_flash(uint8_t* data, uint32_t size, uint32_t address) {
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < size; i++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e00b      	b.n	8001016 <read_flash+0x2a>
        data[i] = *((uint8_t*)(address + i));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	4413      	add	r3, r2
 8001004:	4619      	mov	r1, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	4413      	add	r3, r2
 800100c:	780a      	ldrb	r2, [r1, #0]
 800100e:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3301      	adds	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	429a      	cmp	r2, r3
 800101c:	d3ef      	bcc.n	8000ffe <read_flash+0x12>
    }
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <debug_process>:
_debug_frame debuglog[LOG_FRAME];
uint8_t debug_cnt = 0;
static uint8_t out_index = 0;
static uint8_t in_index = 0;
void debug_process()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

	if(debug_cnt)
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <debug_process+0x6c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d02c      	beq.n	8001092 <debug_process+0x66>
	{
		if(CDC_Transmit_FS(debuglog[out_index].data,debuglog[out_index].size)==USBD_OK)
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <debug_process+0x70>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	2365      	movs	r3, #101	; 0x65
 8001040:	fb02 f303 	mul.w	r3, r2, r3
 8001044:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <debug_process+0x74>)
 8001046:	4413      	add	r3, r2
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <debug_process+0x70>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	4913      	ldr	r1, [pc, #76]	; (80010a0 <debug_process+0x74>)
 8001052:	2365      	movs	r3, #101	; 0x65
 8001054:	fb00 f303 	mul.w	r3, r0, r3
 8001058:	440b      	add	r3, r1
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	4610      	mov	r0, r2
 8001062:	f00b ff9d 	bl	800cfa0 <CDC_Transmit_FS>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d112      	bne.n	8001092 <debug_process+0x66>
		{
			out_index++;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <debug_process+0x70>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <debug_process+0x70>)
 8001076:	701a      	strb	r2, [r3, #0]
			if(out_index == LOG_FRAME)
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <debug_process+0x70>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b32      	cmp	r3, #50	; 0x32
 800107e:	d102      	bne.n	8001086 <debug_process+0x5a>
				out_index =0;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <debug_process+0x70>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
			debug_cnt--;
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <debug_process+0x6c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	3b01      	subs	r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b02      	ldr	r3, [pc, #8]	; (8001098 <debug_process+0x6c>)
 8001090:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20002ab6 	.word	0x20002ab6
 800109c:	20002ab7 	.word	0x20002ab7
 80010a0:	200016fc 	.word	0x200016fc

080010a4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]

	debuglog[in_index].size = len;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <_write+0x80>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	b2d9      	uxtb	r1, r3
 80010ba:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <_write+0x84>)
 80010bc:	2365      	movs	r3, #101	; 0x65
 80010be:	fb00 f303 	mul.w	r3, r0, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	460a      	mov	r2, r1
 80010c6:	701a      	strb	r2, [r3, #0]
	memcpy(debuglog[in_index].data,ptr,len);
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <_write+0x80>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	2365      	movs	r3, #101	; 0x65
 80010d0:	fb02 f303 	mul.w	r3, r2, r3
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_write+0x84>)
 80010d6:	4413      	add	r3, r2
 80010d8:	3301      	adds	r3, #1
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	4618      	mov	r0, r3
 80010e0:	f00c fc02 	bl	800d8e8 <memcpy>
	debug_cnt++;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_write+0x88>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <_write+0x88>)
 80010ee:	701a      	strb	r2, [r3, #0]
	if(debug_cnt>LOG_FRAME)
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <_write+0x88>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b32      	cmp	r3, #50	; 0x32
 80010f6:	d902      	bls.n	80010fe <_write+0x5a>
	{
		debug_cnt = LOG_FRAME;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <_write+0x88>)
 80010fa:	2232      	movs	r2, #50	; 0x32
 80010fc:	701a      	strb	r2, [r3, #0]
	}
	in_index++;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <_write+0x80>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <_write+0x80>)
 8001108:	701a      	strb	r2, [r3, #0]
	if(in_index == LOG_FRAME)
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <_write+0x80>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b32      	cmp	r3, #50	; 0x32
 8001110:	d102      	bne.n	8001118 <_write+0x74>
		in_index =0;
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <_write+0x80>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	return len;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20002ab8 	.word	0x20002ab8
 8001128:	200016fc 	.word	0x200016fc
 800112c:	20002ab6 	.word	0x20002ab6

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f002 fcce 	bl	8003ad4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001138:	f000 f85c 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113c:	f000 fb84 	bl	8001848 <MX_GPIO_Init>
  MX_DMA_Init();
 8001140:	f000 fb44 	bl	80017cc <MX_DMA_Init>
  MX_I2C1_Init();
 8001144:	f000 f8c0 	bl	80012c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001148:	f000 f8ec 	bl	8001324 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800114c:	f000 fb14 	bl	8001778 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001150:	f00b fe68 	bl	800ce24 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001154:	f000 f91c 	bl	8001390 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001158:	f000 fa0a 	bl	8001570 <MX_TIM3_Init>
  MX_TIM8_Init();
 800115c:	f000 fad0 	bl	8001700 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001160:	f000 f9b8 	bl	80014d4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001164:	f000 fa7c 	bl	8001660 <MX_TIM5_Init>
//  HAL_FLASH_Unlock();
//  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
//  FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
//  HAL_FLASH_Program(TYPEPROGRAM_WORD,0x08060000, 0x11223344);
//  HAL_FLASH_Lock();
  Dwin_init();
 8001168:	f7ff fbc2 	bl	80008f0 <Dwin_init>
  dt_system_data_init();
 800116c:	f7ff fac2 	bl	80006f4 <dt_system_data_init>
  uart_dma_start();
 8001170:	f002 fc10 	bl	8003994 <uart_dma_start>
  dw_update_step_numbers();
 8001174:	f7ff fe88 	bl	8000e88 <dw_update_step_numbers>
//  HAL_TIM_Base_Start(&htim3);
  x_step_mt_int();
 8001178:	f000 fd2a 	bl	8001bd0 <x_step_mt_int>
  z_step_mt_int();
 800117c:	f000 feaa 	bl	8001ed4 <z_step_mt_int>
  mt_move_to_home(&x_motor);
 8001180:	4818      	ldr	r0, [pc, #96]	; (80011e4 <main+0xb4>)
 8001182:	f000 fca8 	bl	8001ad6 <mt_move_to_home>
  mt_move_to_home(&z_motor);
 8001186:	4818      	ldr	r0, [pc, #96]	; (80011e8 <main+0xb8>)
 8001188:	f000 fca5 	bl	8001ad6 <mt_move_to_home>
  while(1){  // home Z
	  z_step_motor_process();
 800118c:	f000 fef0 	bl	8001f70 <z_step_motor_process>
	  dw_update_steper_positon();
 8001190:	f7ff fe8a 	bl	8000ea8 <dw_update_steper_positon>
	  if(z_motor.is_home)
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <main+0xb8>)
 8001196:	7cdb      	ldrb	r3, [r3, #19]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f7      	beq.n	800118c <main+0x5c>
		  break;
  }
  while(1){  // home Z
	  x_step_motor_process();
 800119c:	f000 fde2 	bl	8001d64 <x_step_motor_process>
	  dw_update_steper_positon();
 80011a0:	f7ff fe82 	bl	8000ea8 <dw_update_steper_positon>
	  dw_update_steper_positon();
 80011a4:	f7ff fe80 	bl	8000ea8 <dw_update_steper_positon>
	  if(x_motor.is_home)
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <main+0xb4>)
 80011aa:	7cdb      	ldrb	r3, [r3, #19]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d100      	bne.n	80011b2 <main+0x82>
	  x_step_motor_process();
 80011b0:	e7f4      	b.n	800119c <main+0x6c>
		  break;
 80011b2:	bf00      	nop
 }
//  uint32_t ti;
  printf("code started \n");
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <main+0xbc>)
 80011b6:	f00c fc33 	bl	800da20 <puts>
  HAL_Delay(100);
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f002 fcfc 	bl	8003bb8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  usercommand =1;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <main+0xc0>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  debug_process();
 80011c6:	f7ff ff31 	bl	800102c <debug_process>
//			sprintf(tmp,"CURRENT_TIME :%d",cnt ++);
//			s_log_add_1_line(tmp);
//		   ti = HAL_GetTick() +500;
//	  }
//	  step_shake_process();
	  pg_process_loop();
 80011ca:	f001 fee7 	bl	8002f9c <pg_process_loop>
	  uart_process();
 80011ce:	f002 fbf9 	bl	80039c4 <uart_process>
	  x_step_motor_process();
 80011d2:	f000 fdc7 	bl	8001d64 <x_step_motor_process>
	  dw_update_steper_positon();
 80011d6:	f7ff fe67 	bl	8000ea8 <dw_update_steper_positon>
	  z_step_motor_process();
 80011da:	f000 fec9 	bl	8001f70 <z_step_motor_process>
	  dw_update_steper_positon();
 80011de:	f7ff fe63 	bl	8000ea8 <dw_update_steper_positon>
	  debug_process();
 80011e2:	e7f0      	b.n	80011c6 <main+0x96>
 80011e4:	20002abc 	.word	0x20002abc
 80011e8:	20002aec 	.word	0x20002aec
 80011ec:	0800ed18 	.word	0x0800ed18
 80011f0:	20002ab9 	.word	0x20002ab9

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2230      	movs	r2, #48	; 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00c fb7e 	bl	800d904 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <SystemClock_Config+0xcc>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <SystemClock_Config+0xcc>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <SystemClock_Config+0xcc>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <SystemClock_Config+0xd0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <SystemClock_Config+0xd0>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <SystemClock_Config+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001268:	23a8      	movs	r3, #168	; 0xa8
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001270:	2307      	movs	r3, #7
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f005 f963 	bl	8006544 <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001284:	f000 fc22 	bl	8001acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001294:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800129a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2105      	movs	r1, #5
 80012a6:	4618      	mov	r0, r3
 80012a8:	f005 fbc4 	bl	8006a34 <HAL_RCC_ClockConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012b2:	f000 fc0b 	bl	8001acc <Error_Handler>
  }
}
 80012b6:	bf00      	nop
 80012b8:	3750      	adds	r7, #80	; 0x50
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C1_Init+0x50>)
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <MX_I2C1_Init+0x54>)
 80012d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_I2C1_Init+0x50>)
 80012d4:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_I2C1_Init+0x58>)
 80012d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_I2C1_Init+0x50>)
 80012e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_I2C1_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_I2C1_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_I2C1_Init+0x50>)
 8001306:	f003 fd5b 	bl	8004dc0 <HAL_I2C_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001310:	f000 fbdc 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20001384 	.word	0x20001384
 800131c:	40005400 	.word	0x40005400
 8001320:	000186a0 	.word	0x000186a0

08001324 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_SPI1_Init+0x64>)
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <MX_SPI1_Init+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_SPI1_Init+0x64>)
 8001330:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001334:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_SPI1_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_SPI1_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_SPI1_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_SPI1_Init+0x64>)
 8001350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001354:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_SPI1_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_SPI1_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_SPI1_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_SPI1_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_SPI1_Init+0x64>)
 8001370:	220a      	movs	r2, #10
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_SPI1_Init+0x64>)
 8001376:	f005 fd7d 	bl	8006e74 <HAL_SPI_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001380:	f000 fba4 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200013d8 	.word	0x200013d8
 800138c:	40013000 	.word	0x40013000

08001390 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b096      	sub	sp, #88	; 0x58
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2220      	movs	r2, #32
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00c fa9b 	bl	800d904 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013d0:	4a3f      	ldr	r2, [pc, #252]	; (80014d0 <MX_TIM1_Init+0x140>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 80013d4:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013d6:	2214      	movs	r2, #20
 80013d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80013e0:	4b3a      	ldr	r3, [pc, #232]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b38      	ldr	r3, [pc, #224]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 199;
 80013ee:	4b37      	ldr	r3, [pc, #220]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013f0:	22c7      	movs	r2, #199	; 0xc7
 80013f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b35      	ldr	r3, [pc, #212]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013fa:	4834      	ldr	r0, [pc, #208]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013fc:	f005 fdc3 	bl	8006f86 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001406:	f000 fb61 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001410:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001414:	4619      	mov	r1, r3
 8001416:	482d      	ldr	r0, [pc, #180]	; (80014cc <MX_TIM1_Init+0x13c>)
 8001418:	f006 f910 	bl	800763c <HAL_TIM_ConfigClockSource>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001422:	f000 fb53 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001426:	4829      	ldr	r0, [pc, #164]	; (80014cc <MX_TIM1_Init+0x13c>)
 8001428:	f005 fe64 	bl	80070f4 <HAL_TIM_PWM_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001432:	f000 fb4b 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001436:	2340      	movs	r3, #64	; 0x40
 8001438:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800143e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001442:	4619      	mov	r1, r3
 8001444:	4821      	ldr	r0, [pc, #132]	; (80014cc <MX_TIM1_Init+0x13c>)
 8001446:	f006 fda3 	bl	8007f90 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001450:	f000 fb3c 	bl	8001acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001454:	2360      	movs	r3, #96	; 0x60
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8001458:	f240 13f3 	movw	r3, #499	; 0x1f3
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001462:	2300      	movs	r3, #0
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_TIM1_Init+0x13c>)
 800147c:	f006 f81c 	bl	80074b8 <HAL_TIM_PWM_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001486:	f000 fb21 	bl	8001acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800149e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <MX_TIM1_Init+0x13c>)
 80014ae:	f006 fdeb 	bl	8008088 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80014b8:	f000 fb08 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <MX_TIM1_Init+0x13c>)
 80014be:	f001 ff9b 	bl	80033f8 <HAL_TIM_MspPostInit>

}
 80014c2:	bf00      	nop
 80014c4:	3758      	adds	r7, #88	; 0x58
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20001430 	.word	0x20001430
 80014d0:	40010000 	.word	0x40010000

080014d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	; (800156c <MX_TIM2_Init+0x98>)
 80014f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_TIM2_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_TIM2_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_TIM2_Init+0x98>)
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_TIM2_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_TIM2_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <MX_TIM2_Init+0x98>)
 800151c:	f005 fd33 	bl	8006f86 <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001526:	f000 fad1 	bl	8001acc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800152a:	2307      	movs	r3, #7
 800152c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	4619      	mov	r1, r3
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <MX_TIM2_Init+0x98>)
 800153a:	f006 f946 	bl	80077ca <HAL_TIM_SlaveConfigSynchro>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001544:	f000 fac2 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_TIM2_Init+0x98>)
 8001556:	f006 fd1b 	bl	8007f90 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001560:	f000 fab4 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20001478 	.word	0x20001478

08001570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08e      	sub	sp, #56	; 0x38
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	615a      	str	r2, [r3, #20]
 800159e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015a0:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015a2:	4a2e      	ldr	r2, [pc, #184]	; (800165c <MX_TIM3_Init+0xec>)
 80015a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 80015a6:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015a8:	2214      	movs	r2, #20
 80015aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015c6:	4824      	ldr	r0, [pc, #144]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015c8:	f005 fcdd 	bl	8006f86 <HAL_TIM_Base_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015d2:	f000 fa7b 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e0:	4619      	mov	r1, r3
 80015e2:	481d      	ldr	r0, [pc, #116]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015e4:	f006 f82a 	bl	800763c <HAL_TIM_ConfigClockSource>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015ee:	f000 fa6d 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015f2:	4819      	ldr	r0, [pc, #100]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015f4:	f005 fd7e 	bl	80070f4 <HAL_TIM_PWM_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015fe:	f000 fa65 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	4619      	mov	r1, r3
 8001610:	4811      	ldr	r0, [pc, #68]	; (8001658 <MX_TIM3_Init+0xe8>)
 8001612:	f006 fcbd 	bl	8007f90 <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800161c:	f000 fa56 	bl	8001acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001620:	2360      	movs	r3, #96	; 0x60
 8001622:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8001624:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001628:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	4619      	mov	r1, r3
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM3_Init+0xe8>)
 800163a:	f005 ff3d 	bl	80074b8 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001644:	f000 fa42 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM3_Init+0xe8>)
 800164a:	f001 fed5 	bl	80033f8 <HAL_TIM_MspPostInit>

}
 800164e:	bf00      	nop
 8001650:	3738      	adds	r7, #56	; 0x38
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200014c0 	.word	0x200014c0
 800165c:	40000400 	.word	0x40000400

08001660 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <MX_TIM5_Init+0x98>)
 8001680:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <MX_TIM5_Init+0x9c>)
 8001682:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_TIM5_Init+0x98>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_TIM5_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_TIM5_Init+0x98>)
 8001692:	f04f 32ff 	mov.w	r2, #4294967295
 8001696:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_TIM5_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_TIM5_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016a4:	4814      	ldr	r0, [pc, #80]	; (80016f8 <MX_TIM5_Init+0x98>)
 80016a6:	f005 fc6e 	bl	8006f86 <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80016b0:	f000 fa0c 	bl	8001acc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80016b4:	2307      	movs	r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80016b8:	2310      	movs	r3, #16
 80016ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	4619      	mov	r1, r3
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <MX_TIM5_Init+0x98>)
 80016c4:	f006 f881 	bl	80077ca <HAL_TIM_SlaveConfigSynchro>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80016ce:	f000 f9fd 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4619      	mov	r1, r3
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <MX_TIM5_Init+0x98>)
 80016e0:	f006 fc56 	bl	8007f90 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80016ea:	f000 f9ef 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20001508 	.word	0x20001508
 80016fc:	40000c00 	.word	0x40000c00

08001700 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001706:	463b      	mov	r3, r7
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_TIM8_Init+0x70>)
 8001710:	4a18      	ldr	r2, [pc, #96]	; (8001774 <MX_TIM8_Init+0x74>)
 8001712:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <MX_TIM8_Init+0x70>)
 8001716:	2200      	movs	r2, #0
 8001718:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_TIM8_Init+0x70>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <MX_TIM8_Init+0x70>)
 8001722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001726:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_TIM8_Init+0x70>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_TIM8_Init+0x70>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_TIM8_Init+0x70>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 800173a:	2108      	movs	r1, #8
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <MX_TIM8_Init+0x70>)
 800173e:	f005 fe6b 	bl	8007418 <HAL_TIM_OnePulse_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM8_Init+0x4c>
  {
    Error_Handler();
 8001748:	f000 f9c0 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001754:	463b      	mov	r3, r7
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_TIM8_Init+0x70>)
 800175a:	f006 fc19 	bl	8007f90 <HAL_TIMEx_MasterConfigSynchronization>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8001764:	f000 f9b2 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20001550 	.word	0x20001550
 8001774:	40010400 	.word	0x40010400

08001778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <MX_USART2_UART_Init+0x50>)
 8001780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 80017b0:	f006 fcbc 	bl	800812c <HAL_UART_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ba:	f000 f987 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200015f8 	.word	0x200015f8
 80017c8:	40004400 	.word	0x40004400

080017cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_DMA_Init+0x78>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <MX_DMA_Init+0x78>)
 80017dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_DMA_Init+0x78>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_DMA_Init+0x78>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <MX_DMA_Init+0x78>)
 80017f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_DMA_Init+0x78>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2010      	movs	r0, #16
 8001810:	f002 fad1 	bl	8003db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001814:	2010      	movs	r0, #16
 8001816:	f002 faea 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2011      	movs	r0, #17
 8001820:	f002 fac9 	bl	8003db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001824:	2011      	movs	r0, #17
 8001826:	f002 fae2 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2039      	movs	r0, #57	; 0x39
 8001830:	f002 fac1 	bl	8003db6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001834:	2039      	movs	r0, #57	; 0x39
 8001836:	f002 fada 	bl	8003dee <HAL_NVIC_EnableIRQ>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	4b94      	ldr	r3, [pc, #592]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a93      	ldr	r2, [pc, #588]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 8001868:	f043 0310 	orr.w	r3, r3, #16
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b91      	ldr	r3, [pc, #580]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	4b8d      	ldr	r3, [pc, #564]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a8c      	ldr	r2, [pc, #560]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b8a      	ldr	r3, [pc, #552]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b86      	ldr	r3, [pc, #536]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a85      	ldr	r2, [pc, #532]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b83      	ldr	r3, [pc, #524]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b7f      	ldr	r3, [pc, #508]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a7e      	ldr	r2, [pc, #504]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b7c      	ldr	r3, [pc, #496]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b78      	ldr	r3, [pc, #480]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a77      	ldr	r2, [pc, #476]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b75      	ldr	r3, [pc, #468]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b71      	ldr	r3, [pc, #452]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a70      	ldr	r2, [pc, #448]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b6e      	ldr	r3, [pc, #440]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|X_MOTOR_DIR_Pin|X_MOTOR_EN_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f640 4108 	movw	r1, #3080	; 0xc08
 800190c:	486a      	ldr	r0, [pc, #424]	; (8001ab8 <MX_GPIO_Init+0x270>)
 800190e:	f003 fa3d 	bl	8004d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	2101      	movs	r1, #1
 8001916:	4869      	ldr	r0, [pc, #420]	; (8001abc <MX_GPIO_Init+0x274>)
 8001918:	f003 fa38 	bl	8004d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|HEATER_Pin|PUMP2_Pin|PUMP1_Pin
 800191c:	2200      	movs	r2, #0
 800191e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001922:	4867      	ldr	r0, [pc, #412]	; (8001ac0 <MX_GPIO_Init+0x278>)
 8001924:	f003 fa32 	bl	8004d8c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Z_MOTOR_DIR_Pin|Z_MOTOR_EN_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800192e:	4863      	ldr	r0, [pc, #396]	; (8001abc <MX_GPIO_Init+0x274>)
 8001930:	f003 fa2c 	bl	8004d8c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin X_MOTOR_DIR_Pin X_MOTOR_EN_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|X_MOTOR_DIR_Pin|X_MOTOR_EN_Pin;
 8001934:	f640 4308 	movw	r3, #3080	; 0xc08
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	4619      	mov	r1, r3
 800194c:	485a      	ldr	r0, [pc, #360]	; (8001ab8 <MX_GPIO_Init+0x270>)
 800194e:	f003 f869 	bl	8004a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Z_MOTOR_DIR_Pin Z_MOTOR_EN_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Z_MOTOR_DIR_Pin|Z_MOTOR_EN_Pin;
 8001952:	f240 1381 	movw	r3, #385	; 0x181
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001958:	2301      	movs	r3, #1
 800195a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	4854      	ldr	r0, [pc, #336]	; (8001abc <MX_GPIO_Init+0x274>)
 800196c:	f003 f85a 	bl	8004a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001970:	2308      	movs	r3, #8
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001980:	2305      	movs	r3, #5
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	484c      	ldr	r0, [pc, #304]	; (8001abc <MX_GPIO_Init+0x274>)
 800198c:	f003 f84a 	bl	8004a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001990:	2301      	movs	r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001994:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4847      	ldr	r0, [pc, #284]	; (8001ac4 <MX_GPIO_Init+0x27c>)
 80019a6:	f003 f83d 	bl	8004a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80019aa:	2310      	movs	r3, #16
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019ba:	2306      	movs	r3, #6
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	483f      	ldr	r0, [pc, #252]	; (8001ac4 <MX_GPIO_Init+0x27c>)
 80019c6:	f003 f82d 	bl	8004a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80019ca:	2304      	movs	r3, #4
 80019cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	483a      	ldr	r0, [pc, #232]	; (8001ac8 <MX_GPIO_Init+0x280>)
 80019de:	f003 f821 	bl	8004a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_HOME_SWITCH_Pin */
  GPIO_InitStruct.Pin = X_HOME_SWITCH_Pin;
 80019e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X_HOME_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	4830      	ldr	r0, [pc, #192]	; (8001ab8 <MX_GPIO_Init+0x270>)
 80019f8:	f003 f814 	bl	8004a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80019fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a0e:	2305      	movs	r3, #5
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	482b      	ldr	r0, [pc, #172]	; (8001ac8 <MX_GPIO_Init+0x280>)
 8001a1a:	f003 f803 	bl	8004a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : WS_SOLUTION_EMPTY_Pin WS_SOLUTION_FULL_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = WS_SOLUTION_EMPTY_Pin|WS_SOLUTION_FULL_Pin|OTG_FS_OverCurrent_Pin;
 8001a1e:	f44f 6342 	mov.w	r3, #3104	; 0xc20
 8001a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4823      	ldr	r0, [pc, #140]	; (8001ac0 <MX_GPIO_Init+0x278>)
 8001a34:	f002 fff6 	bl	8004a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin HEATER_Pin PUMP2_Pin PUMP1_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|HEATER_Pin|PUMP2_Pin|PUMP1_Pin
 8001a38:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001a3c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	481b      	ldr	r0, [pc, #108]	; (8001ac0 <MX_GPIO_Init+0x278>)
 8001a52:	f002 ffe7 	bl	8004a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_HOME_SWITCH_Pin */
  GPIO_InitStruct.Pin = Z_HOME_SWITCH_Pin;
 8001a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Z_HOME_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <MX_GPIO_Init+0x274>)
 8001a6c:	f002 ffda 	bl	8004a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a82:	2306      	movs	r3, #6
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480b      	ldr	r0, [pc, #44]	; (8001abc <MX_GPIO_Init+0x274>)
 8001a8e:	f002 ffc9 	bl	8004a24 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a96:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <MX_GPIO_Init+0x270>)
 8001aa8:	f002 ffbc 	bl	8004a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aac:	bf00      	nop
 8001aae:	3730      	adds	r7, #48	; 0x30
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400

08001acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <Error_Handler+0x8>

08001ad6 <mt_move_to_home>:
extern TIM_HandleTypeDef htim5;

_motor_typedef x_motor;


void mt_move_to_home(_motor_typedef *motor){
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	if(motor->command == CMD_IDLE){
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7d1b      	ldrb	r3, [r3, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <mt_move_to_home+0x16>
		motor->command = CMD_REQUEST_HOME;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	751a      	strb	r2, [r3, #20]
	}
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <mt_set_target_position>:

void mt_set_target_position(_motor_typedef *motor,uint32_t new_position){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
	motor->next_pos = new_position;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	60da      	str	r2, [r3, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <x_mt_set_dir>:

void x_mt_set_dir(){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	if(x_motor.current_pos < x_motor.next_pos){
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <x_mt_set_dir+0x5c>)
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <x_mt_set_dir+0x5c>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d211      	bcs.n	8001b48 <x_mt_set_dir+0x34>
		x_motor.current_dir = DIR_FORWARD;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <x_mt_set_dir+0x5c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_FORWARD);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b30:	4810      	ldr	r0, [pc, #64]	; (8001b74 <x_mt_set_dir+0x60>)
 8001b32:	f003 f92b 	bl	8004d8c <HAL_GPIO_WritePin>
		htim2.Instance->CR1 &= ~(1<<4);
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <x_mt_set_dir+0x64>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <x_mt_set_dir+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0210 	bic.w	r2, r2, #16
 8001b44:	601a      	str	r2, [r3, #0]
		x_motor.current_dir = DIR_BACKWARD;
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_BACKWARD);
		htim2.Instance->CR1 |= (1<<4);
	}

}
 8001b46:	e010      	b.n	8001b6a <x_mt_set_dir+0x56>
		x_motor.current_dir = DIR_BACKWARD;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <x_mt_set_dir+0x5c>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_BACKWARD);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <x_mt_set_dir+0x60>)
 8001b56:	f003 f919 	bl	8004d8c <HAL_GPIO_WritePin>
		htim2.Instance->CR1 |= (1<<4);
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <x_mt_set_dir+0x64>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <x_mt_set_dir+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0210 	orr.w	r2, r2, #16
 8001b68:	601a      	str	r2, [r3, #0]
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20002abc 	.word	0x20002abc
 8001b74:	40021000 	.word	0x40021000
 8001b78:	20001478 	.word	0x20001478

08001b7c <x_mt_start>:


void x_mt_start(){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b80:	2100      	movs	r1, #0
 8001b82:	4802      	ldr	r0, [pc, #8]	; (8001b8c <x_mt_start+0x10>)
 8001b84:	f005 fb10 	bl	80071a8 <HAL_TIM_PWM_Start>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20001430 	.word	0x20001430

08001b90 <x_mt_stop>:




void x_mt_stop()
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001b94:	2100      	movs	r1, #0
 8001b96:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <x_mt_stop+0x10>)
 8001b98:	f005 fbce 	bl	8007338 <HAL_TIM_PWM_Stop>
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20001430 	.word	0x20001430

08001ba4 <x_set_current_position>:

void x_mt_move_to_pos(uint32_t pos){
	x_motor.next_pos = pos;
}

void x_set_current_position(uint32_t pos){
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	x_motor.current_pos = pos;
 8001bac:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <x_set_current_position+0x24>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6093      	str	r3, [r2, #8]
	htim2.Instance->CNT = pos;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <x_set_current_position+0x28>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20002abc 	.word	0x20002abc
 8001bcc:	20001478 	.word	0x20001478

08001bd0 <x_step_mt_int>:


void x_step_mt_int(void){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	x_motor.current_pos= x_motor.next_pos = htim2.Instance->CNT = 0;
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <x_step_mt_int+0x3c>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	6253      	str	r3, [r2, #36]	; 0x24
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <x_step_mt_int+0x40>)
 8001bde:	60d3      	str	r3, [r2, #12]
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <x_step_mt_int+0x40>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <x_step_mt_int+0x40>)
 8001be6:	6093      	str	r3, [r2, #8]
	x_motor.old_pos = x_motor.ud_time =0;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <x_step_mt_int+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <x_step_mt_int+0x40>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <x_step_mt_int+0x40>)
 8001bf4:	6053      	str	r3, [r2, #4]
	x_motor.home_achieve = 0;
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <x_step_mt_int+0x40>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	749a      	strb	r2, [r3, #18]
	x_motor.set_current_position = x_set_current_position;
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <x_step_mt_int+0x40>)
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <x_step_mt_int+0x44>)
 8001c00:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Start(&htim2);
 8001c02:	4802      	ldr	r0, [pc, #8]	; (8001c0c <x_step_mt_int+0x3c>)
 8001c04:	f005 fa0e 	bl	8007024 <HAL_TIM_Base_Start>
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20001478 	.word	0x20001478
 8001c10:	20002abc 	.word	0x20002abc
 8001c14:	08001ba5 	.word	0x08001ba5

08001c18 <step_mt_move_foward>:

void step_mt_move_foward(_motor_typedef *step,uint32_t numstep){
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
	step->next_pos +=numstep;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	441a      	add	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	60da      	str	r2, [r3, #12]
	if(step->next_pos > 2000000000)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <step_mt_move_foward+0x34>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d902      	bls.n	8001c3e <step_mt_move_foward+0x26>
	{
		step->next_pos =2000000000;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <step_mt_move_foward+0x34>)
 8001c3c:	60da      	str	r2, [r3, #12]
	}
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	77359400 	.word	0x77359400

08001c50 <step_mt_move_backward>:

void step_mt_move_backward(_motor_typedef *step,uint32_t numstep){
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
	step->next_pos -=numstep;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	1ad2      	subs	r2, r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60da      	str	r2, [r3, #12]
	if(step->next_pos > 2000000000)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <step_mt_move_backward+0x34>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d902      	bls.n	8001c76 <step_mt_move_backward+0x26>
	{
		step->next_pos =0;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
	}
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	77359400 	.word	0x77359400

08001c88 <x_step_motor_home_position>:

void x_step_motor_home_position()
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(X_HOME_SWITCH_GPIO_Port, X_HOME_SWITCH_Pin) && (!x_motor.is_home))
 8001c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c90:	4811      	ldr	r0, [pc, #68]	; (8001cd8 <x_step_motor_home_position+0x50>)
 8001c92:	f003 f863 	bl	8004d5c <HAL_GPIO_ReadPin>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d112      	bne.n	8001cc2 <x_step_motor_home_position+0x3a>
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <x_step_motor_home_position+0x54>)
 8001c9e:	7cdb      	ldrb	r3, [r3, #19]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10e      	bne.n	8001cc2 <x_step_motor_home_position+0x3a>
	{
		x_motor.home_achieve = 1;
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <x_step_motor_home_position+0x54>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	749a      	strb	r2, [r3, #18]
		x_motor.is_home = 1;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <x_step_motor_home_position+0x54>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	74da      	strb	r2, [r3, #19]
		x_mt_stop();
 8001cb0:	f7ff ff6e 	bl	8001b90 <x_mt_stop>
		x_motor.current_dir = htim2.Instance->CNT =0;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <x_step_motor_home_position+0x58>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <x_step_motor_home_position+0x54>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	741a      	strb	r2, [r3, #16]
	}
	if(htim2.Instance->CNT)
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <x_step_motor_home_position+0x58>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <x_step_motor_home_position+0x4a>
	{
		x_motor.is_home = 0;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <x_step_motor_home_position+0x54>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	74da      	strb	r2, [r3, #19]
	}
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	20002abc 	.word	0x20002abc
 8001ce0:	20001478 	.word	0x20001478

08001ce4 <home_process>:

void home_process(_motor_typedef *motor)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	switch (motor->command) {
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7d1b      	ldrb	r3, [r3, #20]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d029      	beq.n	8001d48 <home_process+0x64>
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	dc2b      	bgt.n	8001d50 <home_process+0x6c>
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d002      	beq.n	8001d02 <home_process+0x1e>
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d01b      	beq.n	8001d38 <home_process+0x54>
			break;
		case CMD_HOME_FINSH:
			motor->command = CMD_IDLE;
			break;
		default:
			break;
 8001d00:	e026      	b.n	8001d50 <home_process+0x6c>
			if(motor->home_achieve && (motor->current_pos == 0))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7c9b      	ldrb	r3, [r3, #18]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <home_process+0x36>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d103      	bne.n	8001d1a <home_process+0x36>
				motor->command = CMD_HOME_FINSH;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2203      	movs	r2, #3
 8001d16:	751a      	strb	r2, [r3, #20]
				break;
 8001d18:	e01d      	b.n	8001d56 <home_process+0x72>
			if(!motor->home_achieve)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7c9b      	ldrb	r3, [r3, #18]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <home_process+0x46>
				motor->set_current_position(200000000);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	480e      	ldr	r0, [pc, #56]	; (8001d60 <home_process+0x7c>)
 8001d28:	4798      	blx	r3
			motor ->next_pos = 0;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
			motor->command = CMD_WAIT_HOME;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	751a      	strb	r2, [r3, #20]
			break;
 8001d36:	e00e      	b.n	8001d56 <home_process+0x72>
			if(motor->current_pos == 0)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <home_process+0x70>
				motor->command = CMD_HOME_FINSH;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2203      	movs	r2, #3
 8001d44:	751a      	strb	r2, [r3, #20]
			break;
 8001d46:	e005      	b.n	8001d54 <home_process+0x70>
			motor->command = CMD_IDLE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	751a      	strb	r2, [r3, #20]
			break;
 8001d4e:	e002      	b.n	8001d56 <home_process+0x72>
			break;
 8001d50:	bf00      	nop
 8001d52:	e000      	b.n	8001d56 <home_process+0x72>
			break;
 8001d54:	bf00      	nop
	}
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	0bebc200 	.word	0x0bebc200

08001d64 <x_step_motor_process>:
void x_step_motor_process(void){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	x_motor.current_pos = htim2.Instance->CNT;
 8001d68:	4b2a      	ldr	r3, [pc, #168]	; (8001e14 <x_step_motor_process+0xb0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	4a2a      	ldr	r2, [pc, #168]	; (8001e18 <x_step_motor_process+0xb4>)
 8001d70:	6093      	str	r3, [r2, #8]
	x_step_motor_home_position();
 8001d72:	f7ff ff89 	bl	8001c88 <x_step_motor_home_position>
	home_process(&x_motor);
 8001d76:	4828      	ldr	r0, [pc, #160]	; (8001e18 <x_step_motor_process+0xb4>)
 8001d78:	f7ff ffb4 	bl	8001ce4 <home_process>
	switch (x_motor.state) {
 8001d7c:	4b26      	ldr	r3, [pc, #152]	; (8001e18 <x_step_motor_process+0xb4>)
 8001d7e:	7c5b      	ldrb	r3, [r3, #17]
 8001d80:	2b03      	cmp	r3, #3
 8001d82:	d83f      	bhi.n	8001e04 <x_step_motor_process+0xa0>
 8001d84:	a201      	add	r2, pc, #4	; (adr r2, 8001d8c <x_step_motor_process+0x28>)
 8001d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8a:	bf00      	nop
 8001d8c:	08001d9d 	.word	0x08001d9d
 8001d90:	08001db9 	.word	0x08001db9
 8001d94:	08001dc9 	.word	0x08001dc9
 8001d98:	08001df9 	.word	0x08001df9
		case MT_STATE_IDLE:
			if(abs(x_motor.current_pos- x_motor.next_pos) > STEP_LOSS){
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <x_step_motor_process+0xb4>)
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <x_step_motor_process+0xb4>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bfb8      	it	lt
 8001daa:	425b      	neglt	r3, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	dd2b      	ble.n	8001e08 <x_step_motor_process+0xa4>
				x_motor.state = MT_STATE_START;
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <x_step_motor_process+0xb4>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	745a      	strb	r2, [r3, #17]
			}
			break;
 8001db6:	e027      	b.n	8001e08 <x_step_motor_process+0xa4>
		case MT_STATE_START:
			x_mt_set_dir();
 8001db8:	f7ff feac 	bl	8001b14 <x_mt_set_dir>
			x_mt_start();
 8001dbc:	f7ff fede 	bl	8001b7c <x_mt_start>
			x_motor.state = MT_STATE_RUNING;
 8001dc0:	4b15      	ldr	r3, [pc, #84]	; (8001e18 <x_step_motor_process+0xb4>)
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	745a      	strb	r2, [r3, #17]
			break;
 8001dc6:	e022      	b.n	8001e0e <x_step_motor_process+0xaa>
		case MT_STATE_RUNING:
			if(x_motor.current_dir == DIR_FORWARD){
 8001dc8:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <x_step_motor_process+0xb4>)
 8001dca:	7c1b      	ldrb	r3, [r3, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <x_step_motor_process+0x80>
				if(x_motor.current_pos >= x_motor.next_pos){
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <x_step_motor_process+0xb4>)
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <x_step_motor_process+0xb4>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d317      	bcc.n	8001e0c <x_step_motor_process+0xa8>
					x_motor.state = MT_STATE_STTOP;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <x_step_motor_process+0xb4>)
 8001dde:	2203      	movs	r2, #3
 8001de0:	745a      	strb	r2, [r3, #17]
				}
			}
//			if(abs(x_motor.current_pos- x_motor.next_pos) < STEP_LOSS){
//							x_motor.state = MT_STATE_STTOP;
//			}
			break;
 8001de2:	e013      	b.n	8001e0c <x_step_motor_process+0xa8>
				if(x_motor.current_pos <= x_motor.next_pos){
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <x_step_motor_process+0xb4>)
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <x_step_motor_process+0xb4>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d80d      	bhi.n	8001e0c <x_step_motor_process+0xa8>
					x_motor.state = MT_STATE_STTOP;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <x_step_motor_process+0xb4>)
 8001df2:	2203      	movs	r2, #3
 8001df4:	745a      	strb	r2, [r3, #17]
			break;
 8001df6:	e009      	b.n	8001e0c <x_step_motor_process+0xa8>
		case MT_STATE_STTOP:
			x_mt_stop();
 8001df8:	f7ff feca 	bl	8001b90 <x_mt_stop>
			x_motor.state = MT_STATE_IDLE;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <x_step_motor_process+0xb4>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	745a      	strb	r2, [r3, #17]
			break;
 8001e02:	e004      	b.n	8001e0e <x_step_motor_process+0xaa>
		default:
			break;
 8001e04:	bf00      	nop
 8001e06:	e002      	b.n	8001e0e <x_step_motor_process+0xaa>
			break;
 8001e08:	bf00      	nop
 8001e0a:	e000      	b.n	8001e0e <x_step_motor_process+0xaa>
			break;
 8001e0c:	bf00      	nop
	}
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20001478 	.word	0x20001478
 8001e18:	20002abc 	.word	0x20002abc

08001e1c <z_mt_set_dir>:

_motor_typedef z_motor;



void z_mt_set_dir(){
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	if(z_motor.current_pos < z_motor.next_pos){
 8001e20:	4b14      	ldr	r3, [pc, #80]	; (8001e74 <z_mt_set_dir+0x58>)
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	4b13      	ldr	r3, [pc, #76]	; (8001e74 <z_mt_set_dir+0x58>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d210      	bcs.n	8001e4e <z_mt_set_dir+0x32>
		z_motor.current_dir = DIR_FORWARD;
 8001e2c:	4b11      	ldr	r3, [pc, #68]	; (8001e74 <z_mt_set_dir+0x58>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_FORWARD);
 8001e32:	2200      	movs	r2, #0
 8001e34:	2180      	movs	r1, #128	; 0x80
 8001e36:	4810      	ldr	r0, [pc, #64]	; (8001e78 <z_mt_set_dir+0x5c>)
 8001e38:	f002 ffa8 	bl	8004d8c <HAL_GPIO_WritePin>
		htim5.Instance->CR1 &= ~(1<<4);
 8001e3c:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <z_mt_set_dir+0x60>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	4b0e      	ldr	r3, [pc, #56]	; (8001e7c <z_mt_set_dir+0x60>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0210 	bic.w	r2, r2, #16
 8001e4a:	601a      	str	r2, [r3, #0]
		z_motor.current_dir = DIR_BACKWARD;
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_BACKWARD);
		htim5.Instance->CR1 |= (1<<4);
	}

}
 8001e4c:	e00f      	b.n	8001e6e <z_mt_set_dir+0x52>
		z_motor.current_dir = DIR_BACKWARD;
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <z_mt_set_dir+0x58>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_BACKWARD);
 8001e54:	2201      	movs	r2, #1
 8001e56:	2180      	movs	r1, #128	; 0x80
 8001e58:	4807      	ldr	r0, [pc, #28]	; (8001e78 <z_mt_set_dir+0x5c>)
 8001e5a:	f002 ff97 	bl	8004d8c <HAL_GPIO_WritePin>
		htim5.Instance->CR1 |= (1<<4);
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <z_mt_set_dir+0x60>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <z_mt_set_dir+0x60>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0210 	orr.w	r2, r2, #16
 8001e6c:	601a      	str	r2, [r3, #0]
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20002aec 	.word	0x20002aec
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	20001508 	.word	0x20001508

08001e80 <z_mt_start>:

void z_mt_start(){
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001e84:	2100      	movs	r1, #0
 8001e86:	4802      	ldr	r0, [pc, #8]	; (8001e90 <z_mt_start+0x10>)
 8001e88:	f005 f98e 	bl	80071a8 <HAL_TIM_PWM_Start>
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	200014c0 	.word	0x200014c0

08001e94 <z_mt_stop>:

void z_mt_stop()
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <z_mt_stop+0x10>)
 8001e9c:	f005 fa4c 	bl	8007338 <HAL_TIM_PWM_Stop>
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200014c0 	.word	0x200014c0

08001ea8 <z_set_current_position>:
	z_motor.current_pos = htim5.Instance->CNT;
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
	z_mt_set_dir(z_motor.current_pos,z_motor.next_pos);
}

void z_set_current_position(uint32_t pos){
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	z_motor.current_pos = pos;
 8001eb0:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <z_set_current_position+0x24>)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6093      	str	r3, [r2, #8]
	htim5.Instance->CNT = pos;
 8001eb6:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <z_set_current_position+0x28>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20002aec 	.word	0x20002aec
 8001ed0:	20001508 	.word	0x20001508

08001ed4 <z_step_mt_int>:
void z_step_mt_int(void){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	z_motor.current_pos= z_motor.next_pos = htim5.Instance->CNT = 0;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <z_step_mt_int+0x38>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	2300      	movs	r3, #0
 8001ede:	6253      	str	r3, [r2, #36]	; 0x24
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <z_step_mt_int+0x3c>)
 8001ee2:	60d3      	str	r3, [r2, #12]
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <z_step_mt_int+0x3c>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4a09      	ldr	r2, [pc, #36]	; (8001f10 <z_step_mt_int+0x3c>)
 8001eea:	6093      	str	r3, [r2, #8]
	z_motor.old_pos = z_motor.ud_time =0;
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <z_step_mt_int+0x3c>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	601a      	str	r2, [r3, #0]
 8001ef2:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <z_step_mt_int+0x3c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <z_step_mt_int+0x3c>)
 8001ef8:	6053      	str	r3, [r2, #4]
	z_motor.set_current_position = z_set_current_position;
 8001efa:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <z_step_mt_int+0x3c>)
 8001efc:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <z_step_mt_int+0x40>)
 8001efe:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Start(&htim5);
 8001f00:	4802      	ldr	r0, [pc, #8]	; (8001f0c <z_step_mt_int+0x38>)
 8001f02:	f005 f88f 	bl	8007024 <HAL_TIM_Base_Start>
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20001508 	.word	0x20001508
 8001f10:	20002aec 	.word	0x20002aec
 8001f14:	08001ea9 	.word	0x08001ea9

08001f18 <z_step_motor_home_position>:


void z_step_motor_home_position()
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(Z_HOME_SWITCH_GPIO_Port, Z_HOME_SWITCH_Pin) && (!z_motor.is_home))
 8001f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f20:	4810      	ldr	r0, [pc, #64]	; (8001f64 <z_step_motor_home_position+0x4c>)
 8001f22:	f002 ff1b 	bl	8004d5c <HAL_GPIO_ReadPin>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d111      	bne.n	8001f50 <z_step_motor_home_position+0x38>
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <z_step_motor_home_position+0x50>)
 8001f2e:	7cdb      	ldrb	r3, [r3, #19]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d10d      	bne.n	8001f50 <z_step_motor_home_position+0x38>
	{
		z_motor.home_achieve = 1;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <z_step_motor_home_position+0x50>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	749a      	strb	r2, [r3, #18]
		z_motor.is_home = 1;
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	; (8001f68 <z_step_motor_home_position+0x50>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	74da      	strb	r2, [r3, #19]
		z_mt_stop();
 8001f40:	f7ff ffa8 	bl	8001e94 <z_mt_stop>
		z_motor.current_pos = htim5.Instance->CNT =0;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <z_step_motor_home_position+0x54>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	6253      	str	r3, [r2, #36]	; 0x24
 8001f4c:	4a06      	ldr	r2, [pc, #24]	; (8001f68 <z_step_motor_home_position+0x50>)
 8001f4e:	6093      	str	r3, [r2, #8]
	}
	if(htim5.Instance->CNT)
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <z_step_motor_home_position+0x54>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <z_step_motor_home_position+0x48>
	{
		z_motor.is_home = 0;
 8001f5a:	4b03      	ldr	r3, [pc, #12]	; (8001f68 <z_step_motor_home_position+0x50>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	74da      	strb	r2, [r3, #19]
	}
}
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40020800 	.word	0x40020800
 8001f68:	20002aec 	.word	0x20002aec
 8001f6c:	20001508 	.word	0x20001508

08001f70 <z_step_motor_process>:



void z_step_motor_process(void){
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	z_motor.current_pos = htim5.Instance->CNT;
 8001f74:	4b2a      	ldr	r3, [pc, #168]	; (8002020 <z_step_motor_process+0xb0>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	4a2a      	ldr	r2, [pc, #168]	; (8002024 <z_step_motor_process+0xb4>)
 8001f7c:	6093      	str	r3, [r2, #8]
	z_step_motor_home_position();
 8001f7e:	f7ff ffcb 	bl	8001f18 <z_step_motor_home_position>
	home_process(&z_motor);
 8001f82:	4828      	ldr	r0, [pc, #160]	; (8002024 <z_step_motor_process+0xb4>)
 8001f84:	f7ff feae 	bl	8001ce4 <home_process>
//	if(znext!= z_motor.next_pos)
//	{
//		znext= z_motor.next_pos;
//		printf("z next: %lu\n",z_motor.next_pos);
//	}
	switch (z_motor.state) {
 8001f88:	4b26      	ldr	r3, [pc, #152]	; (8002024 <z_step_motor_process+0xb4>)
 8001f8a:	7c5b      	ldrb	r3, [r3, #17]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d83f      	bhi.n	8002010 <z_step_motor_process+0xa0>
 8001f90:	a201      	add	r2, pc, #4	; (adr r2, 8001f98 <z_step_motor_process+0x28>)
 8001f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f96:	bf00      	nop
 8001f98:	08001fa9 	.word	0x08001fa9
 8001f9c:	08001fc5 	.word	0x08001fc5
 8001fa0:	08001fd5 	.word	0x08001fd5
 8001fa4:	08002005 	.word	0x08002005
		case MT_STATE_IDLE:
			if(abs(z_motor.current_pos- z_motor.next_pos) > STEP_LOSS){
 8001fa8:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <z_step_motor_process+0xb4>)
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <z_step_motor_process+0xb4>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	bfb8      	it	lt
 8001fb6:	425b      	neglt	r3, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	dd2b      	ble.n	8002014 <z_step_motor_process+0xa4>
				z_motor.state = MT_STATE_START;
 8001fbc:	4b19      	ldr	r3, [pc, #100]	; (8002024 <z_step_motor_process+0xb4>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	745a      	strb	r2, [r3, #17]
			}
			break;
 8001fc2:	e027      	b.n	8002014 <z_step_motor_process+0xa4>
		case MT_STATE_START:
			z_mt_set_dir();
 8001fc4:	f7ff ff2a 	bl	8001e1c <z_mt_set_dir>
			z_mt_start();
 8001fc8:	f7ff ff5a 	bl	8001e80 <z_mt_start>
			z_motor.state = MT_STATE_RUNING;
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <z_step_motor_process+0xb4>)
 8001fce:	2202      	movs	r2, #2
 8001fd0:	745a      	strb	r2, [r3, #17]
			break;
 8001fd2:	e022      	b.n	800201a <z_step_motor_process+0xaa>
		case MT_STATE_RUNING:
			if(z_motor.current_dir == DIR_FORWARD){
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <z_step_motor_process+0xb4>)
 8001fd6:	7c1b      	ldrb	r3, [r3, #16]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d109      	bne.n	8001ff0 <z_step_motor_process+0x80>
				if(z_motor.current_pos >= z_motor.next_pos){
 8001fdc:	4b11      	ldr	r3, [pc, #68]	; (8002024 <z_step_motor_process+0xb4>)
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <z_step_motor_process+0xb4>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d317      	bcc.n	8002018 <z_step_motor_process+0xa8>
					z_motor.state = MT_STATE_STTOP;
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <z_step_motor_process+0xb4>)
 8001fea:	2203      	movs	r2, #3
 8001fec:	745a      	strb	r2, [r3, #17]
			} else {
				if(z_motor.current_pos <= z_motor.next_pos){
					z_motor.state = MT_STATE_STTOP;
				}
			}
			break;
 8001fee:	e013      	b.n	8002018 <z_step_motor_process+0xa8>
				if(z_motor.current_pos <= z_motor.next_pos){
 8001ff0:	4b0c      	ldr	r3, [pc, #48]	; (8002024 <z_step_motor_process+0xb4>)
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <z_step_motor_process+0xb4>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d80d      	bhi.n	8002018 <z_step_motor_process+0xa8>
					z_motor.state = MT_STATE_STTOP;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <z_step_motor_process+0xb4>)
 8001ffe:	2203      	movs	r2, #3
 8002000:	745a      	strb	r2, [r3, #17]
			break;
 8002002:	e009      	b.n	8002018 <z_step_motor_process+0xa8>
		case MT_STATE_STTOP:
			z_mt_stop();
 8002004:	f7ff ff46 	bl	8001e94 <z_mt_stop>
			z_motor.state = MT_STATE_IDLE;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <z_step_motor_process+0xb4>)
 800200a:	2200      	movs	r2, #0
 800200c:	745a      	strb	r2, [r3, #17]
			break;
 800200e:	e004      	b.n	800201a <z_step_motor_process+0xaa>
		default:
			break;
 8002010:	bf00      	nop
 8002012:	e002      	b.n	800201a <z_step_motor_process+0xaa>
			break;
 8002014:	bf00      	nop
 8002016:	e000      	b.n	800201a <z_step_motor_process+0xaa>
			break;
 8002018:	bf00      	nop
	}
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20001508 	.word	0x20001508
 8002024:	20002aec 	.word	0x20002aec

08002028 <step_shake_start>:
static uint8_t running_step= 0;
//static _def_step step_para;
static uint32_t t_time = 0;
_step_shake_state shake_state = SHAKE_STATE_IDE;
int step_shake_start(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
	if(shake_state == SHAKE_STATE_IDE)
 800202c:	4b13      	ldr	r3, [pc, #76]	; (800207c <step_shake_start+0x54>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d120      	bne.n	8002076 <step_shake_start+0x4e>
	{
		LOGI("start step: %d of program : %d",running_step,running_pg);
 8002034:	4b12      	ldr	r3, [pc, #72]	; (8002080 <step_shake_start+0x58>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	461a      	mov	r2, r3
 800203a:	4b12      	ldr	r3, [pc, #72]	; (8002084 <step_shake_start+0x5c>)
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	4912      	ldr	r1, [pc, #72]	; (8002088 <step_shake_start+0x60>)
 8002040:	4812      	ldr	r0, [pc, #72]	; (800208c <step_shake_start+0x64>)
 8002042:	f00b fc67 	bl	800d914 <iprintf>
		shake_step = (_def_shake_step *)&system_data.flash_data.Program_para[running_pg][running_step];
 8002046:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <step_shake_start+0x5c>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <step_shake_start+0x58>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	009a      	lsls	r2, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	440b      	add	r3, r1
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	3328      	adds	r3, #40	; 0x28
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <step_shake_start+0x68>)
 8002064:	4413      	add	r3, r2
 8002066:	3304      	adds	r3, #4
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <step_shake_start+0x6c>)
 800206a:	6013      	str	r3, [r2, #0]
		shake_state = SHAKE_STATE_START;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <step_shake_start+0x54>)
 800206e:	2201      	movs	r2, #1
 8002070:	701a      	strb	r2, [r3, #0]
		return 1;
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <step_shake_start+0x50>
	}
	return 0;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20002b30 	.word	0x20002b30
 8002080:	20002b29 	.word	0x20002b29
 8002084:	20002b28 	.word	0x20002b28
 8002088:	0800ed28 	.word	0x0800ed28
 800208c:	0800ed2c 	.word	0x0800ed2c
 8002090:	2000017c 	.word	0x2000017c
 8002094:	20002b1c 	.word	0x20002b1c

08002098 <show_infor_shake_step>:
//return 1 mean step done
void show_infor_shake_step(_def_shake_step shake_step)
{
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	463c      	mov	r4, r7
 80020a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOGI("---------------INFOR_SHAKE_STEP------------");
 80020a4:	491b      	ldr	r1, [pc, #108]	; (8002114 <show_infor_shake_step+0x7c>)
 80020a6:	481c      	ldr	r0, [pc, #112]	; (8002118 <show_infor_shake_step+0x80>)
 80020a8:	f00b fc34 	bl	800d914 <iprintf>
	LOGI("1:Move to Wells: %d",shake_step.wells);
 80020ac:	787b      	ldrb	r3, [r7, #1]
 80020ae:	461a      	mov	r2, r3
 80020b0:	4918      	ldr	r1, [pc, #96]	; (8002114 <show_infor_shake_step+0x7c>)
 80020b2:	481a      	ldr	r0, [pc, #104]	; (800211c <show_infor_shake_step+0x84>)
 80020b4:	f00b fc2e 	bl	800d914 <iprintf>
	LOGI("2:wait1 : %ds",shake_step.wait1);
 80020b8:	887b      	ldrh	r3, [r7, #2]
 80020ba:	461a      	mov	r2, r3
 80020bc:	4915      	ldr	r1, [pc, #84]	; (8002114 <show_infor_shake_step+0x7c>)
 80020be:	4818      	ldr	r0, [pc, #96]	; (8002120 <show_infor_shake_step+0x88>)
 80020c0:	f00b fc28 	bl	800d914 <iprintf>
	LOGI("3:move z to bottom");
 80020c4:	4913      	ldr	r1, [pc, #76]	; (8002114 <show_infor_shake_step+0x7c>)
 80020c6:	4817      	ldr	r0, [pc, #92]	; (8002124 <show_infor_shake_step+0x8c>)
 80020c8:	f00b fc24 	bl	800d914 <iprintf>
	LOGI("4:wait2 : %ds",shake_step.wait2);
 80020cc:	88bb      	ldrh	r3, [r7, #4]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4910      	ldr	r1, [pc, #64]	; (8002114 <show_infor_shake_step+0x7c>)
 80020d2:	4815      	ldr	r0, [pc, #84]	; (8002128 <show_infor_shake_step+0x90>)
 80020d4:	f00b fc1e 	bl	800d914 <iprintf>
	LOGI("5:shake on : %ds",shake_step.shake);
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	461a      	mov	r2, r3
 80020dc:	490d      	ldr	r1, [pc, #52]	; (8002114 <show_infor_shake_step+0x7c>)
 80020de:	4813      	ldr	r0, [pc, #76]	; (800212c <show_infor_shake_step+0x94>)
 80020e0:	f00b fc18 	bl	800d914 <iprintf>
	LOGI("6:wait4 : %ds",shake_step.wait4);
 80020e4:	893b      	ldrh	r3, [r7, #8]
 80020e6:	461a      	mov	r2, r3
 80020e8:	490a      	ldr	r1, [pc, #40]	; (8002114 <show_infor_shake_step+0x7c>)
 80020ea:	4811      	ldr	r0, [pc, #68]	; (8002130 <show_infor_shake_step+0x98>)
 80020ec:	f00b fc12 	bl	800d914 <iprintf>
	LOGI("7:move z to top");
 80020f0:	4908      	ldr	r1, [pc, #32]	; (8002114 <show_infor_shake_step+0x7c>)
 80020f2:	4810      	ldr	r0, [pc, #64]	; (8002134 <show_infor_shake_step+0x9c>)
 80020f4:	f00b fc0e 	bl	800d914 <iprintf>
	LOGI("8:wait5 : %ds",shake_step.wait5);
 80020f8:	897b      	ldrh	r3, [r7, #10]
 80020fa:	461a      	mov	r2, r3
 80020fc:	4905      	ldr	r1, [pc, #20]	; (8002114 <show_infor_shake_step+0x7c>)
 80020fe:	480e      	ldr	r0, [pc, #56]	; (8002138 <show_infor_shake_step+0xa0>)
 8002100:	f00b fc08 	bl	800d914 <iprintf>
	LOGI("------------------------------------------");
 8002104:	4903      	ldr	r1, [pc, #12]	; (8002114 <show_infor_shake_step+0x7c>)
 8002106:	480d      	ldr	r0, [pc, #52]	; (800213c <show_infor_shake_step+0xa4>)
 8002108:	f00b fc04 	bl	800d914 <iprintf>
}
 800210c:	bf00      	nop
 800210e:	3714      	adds	r7, #20
 8002110:	46bd      	mov	sp, r7
 8002112:	bd90      	pop	{r4, r7, pc}
 8002114:	0800ed28 	.word	0x0800ed28
 8002118:	0800ed54 	.word	0x0800ed54
 800211c:	0800ed88 	.word	0x0800ed88
 8002120:	0800eda4 	.word	0x0800eda4
 8002124:	0800edbc 	.word	0x0800edbc
 8002128:	0800edd8 	.word	0x0800edd8
 800212c:	0800edf0 	.word	0x0800edf0
 8002130:	0800ee08 	.word	0x0800ee08
 8002134:	0800ee20 	.word	0x0800ee20
 8002138:	0800ee38 	.word	0x0800ee38
 800213c:	0800ee50 	.word	0x0800ee50

08002140 <step_shake_process>:
int step_shake_process(void){
 8002140:	b598      	push	{r3, r4, r7, lr}
 8002142:	af00      	add	r7, sp, #0
	static _step_shake_state old_state = SHAKE_STATE_IDE;

	switch (shake_state) {
 8002144:	4b9d      	ldr	r3, [pc, #628]	; (80023bc <step_shake_process+0x27c>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b07      	cmp	r3, #7
 800214a:	f200 8184 	bhi.w	8002456 <step_shake_process+0x316>
 800214e:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <step_shake_process+0x14>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002457 	.word	0x08002457
 8002158:	08002175 	.word	0x08002175
 800215c:	080021cf 	.word	0x080021cf
 8002160:	08002225 	.word	0x08002225
 8002164:	080022eb 	.word	0x080022eb
 8002168:	08002335 	.word	0x08002335
 800216c:	080023f9 	.word	0x080023f9
 8002170:	0800243d 	.word	0x0800243d
//	                old_state = shake_state;
//	                shake_state = SHAKE_STATE_START;
	                break;
	            case SHAKE_STATE_START:
	                // handle SHAKE_STATE_START -> move x to well
	            	show_infor_shake_step(*shake_step);
 8002174:	4b92      	ldr	r3, [pc, #584]	; (80023c0 <step_shake_process+0x280>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4610      	mov	r0, r2
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4611      	mov	r1, r2
 8002180:	689c      	ldr	r4, [r3, #8]
 8002182:	4622      	mov	r2, r4
 8002184:	68dc      	ldr	r4, [r3, #12]
 8002186:	4623      	mov	r3, r4
 8002188:	f7ff ff86 	bl	8002098 <show_infor_shake_step>

	            	LOGI("move x to %lu",system_data.flash_data.Well_position[shake_step->wells-1]);
 800218c:	4b8c      	ldr	r3, [pc, #560]	; (80023c0 <step_shake_process+0x280>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	785b      	ldrb	r3, [r3, #1]
 8002192:	3b01      	subs	r3, #1
 8002194:	4a8b      	ldr	r2, [pc, #556]	; (80023c4 <step_shake_process+0x284>)
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	461a      	mov	r2, r3
 800219e:	498a      	ldr	r1, [pc, #552]	; (80023c8 <step_shake_process+0x288>)
 80021a0:	488a      	ldr	r0, [pc, #552]	; (80023cc <step_shake_process+0x28c>)
 80021a2:	f00b fbb7 	bl	800d914 <iprintf>
	            	mt_set_target_position(&x_motor, system_data.flash_data.Well_position[shake_step->wells-1]);
 80021a6:	4b86      	ldr	r3, [pc, #536]	; (80023c0 <step_shake_process+0x280>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	785b      	ldrb	r3, [r3, #1]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	4a85      	ldr	r2, [pc, #532]	; (80023c4 <step_shake_process+0x284>)
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	4619      	mov	r1, r3
 80021b8:	4885      	ldr	r0, [pc, #532]	; (80023d0 <step_shake_process+0x290>)
 80021ba:	f7ff fc9d 	bl	8001af8 <mt_set_target_position>
	                old_state = shake_state;
 80021be:	4b7f      	ldr	r3, [pc, #508]	; (80023bc <step_shake_process+0x27c>)
 80021c0:	781a      	ldrb	r2, [r3, #0]
 80021c2:	4b84      	ldr	r3, [pc, #528]	; (80023d4 <step_shake_process+0x294>)
 80021c4:	701a      	strb	r2, [r3, #0]
	                shake_state = SHAKE_STATE_MOVE_WELLS;
 80021c6:	4b7d      	ldr	r3, [pc, #500]	; (80023bc <step_shake_process+0x27c>)
 80021c8:	2202      	movs	r2, #2
 80021ca:	701a      	strb	r2, [r3, #0]
	                break;
 80021cc:	e14c      	b.n	8002468 <step_shake_process+0x328>
	            case SHAKE_STATE_MOVE_WELLS:
	                // handle SHAKE_STATE_MOVE_WELLS
	            	if(Mt_get_current_prosition(x_motor) == system_data.flash_data.Well_position[shake_step->wells-1])
 80021ce:	4b80      	ldr	r3, [pc, #512]	; (80023d0 <step_shake_process+0x290>)
 80021d0:	689a      	ldr	r2, [r3, #8]
 80021d2:	4b7b      	ldr	r3, [pc, #492]	; (80023c0 <step_shake_process+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	785b      	ldrb	r3, [r3, #1]
 80021d8:	3b01      	subs	r3, #1
 80021da:	497a      	ldr	r1, [pc, #488]	; (80023c4 <step_shake_process+0x284>)
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	f040 8139 	bne.w	800245a <step_shake_process+0x31a>
	            	{
	            		LOGI("move x done, wait %ds",shake_step->wait1);
 80021e8:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <step_shake_process+0x280>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	885b      	ldrh	r3, [r3, #2]
 80021ee:	461a      	mov	r2, r3
 80021f0:	4975      	ldr	r1, [pc, #468]	; (80023c8 <step_shake_process+0x288>)
 80021f2:	4879      	ldr	r0, [pc, #484]	; (80023d8 <step_shake_process+0x298>)
 80021f4:	f00b fb8e 	bl	800d914 <iprintf>
						old_state = shake_state;
 80021f8:	4b70      	ldr	r3, [pc, #448]	; (80023bc <step_shake_process+0x27c>)
 80021fa:	781a      	ldrb	r2, [r3, #0]
 80021fc:	4b75      	ldr	r3, [pc, #468]	; (80023d4 <step_shake_process+0x294>)
 80021fe:	701a      	strb	r2, [r3, #0]
						shake_state = SHAKE_STATE_WAIT;
 8002200:	4b6e      	ldr	r3, [pc, #440]	; (80023bc <step_shake_process+0x27c>)
 8002202:	2203      	movs	r2, #3
 8002204:	701a      	strb	r2, [r3, #0]
						t_time = HAL_GetTick() +  (uint32_t)shake_step->wait1 * 1000;
 8002206:	f001 fccb 	bl	8003ba0 <HAL_GetTick>
 800220a:	4602      	mov	r2, r0
 800220c:	4b6c      	ldr	r3, [pc, #432]	; (80023c0 <step_shake_process+0x280>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	885b      	ldrh	r3, [r3, #2]
 8002212:	4619      	mov	r1, r3
 8002214:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002218:	fb01 f303 	mul.w	r3, r1, r3
 800221c:	4413      	add	r3, r2
 800221e:	4a6f      	ldr	r2, [pc, #444]	; (80023dc <step_shake_process+0x29c>)
 8002220:	6013      	str	r3, [r2, #0]
	            	}
	                break;
 8002222:	e11a      	b.n	800245a <step_shake_process+0x31a>
	            case SHAKE_STATE_WAIT:
	                // handle SHAKE_STATE_WAIT
	            	if(HAL_GetTick() > t_time)
 8002224:	f001 fcbc 	bl	8003ba0 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	4b6c      	ldr	r3, [pc, #432]	; (80023dc <step_shake_process+0x29c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d957      	bls.n	80022e2 <step_shake_process+0x1a2>
	            	{
	            		switch (old_state) {
 8002232:	4b68      	ldr	r3, [pc, #416]	; (80023d4 <step_shake_process+0x294>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	3b02      	subs	r3, #2
 8002238:	2b05      	cmp	r3, #5
 800223a:	d854      	bhi.n	80022e6 <step_shake_process+0x1a6>
 800223c:	a201      	add	r2, pc, #4	; (adr r2, 8002244 <step_shake_process+0x104>)
 800223e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002242:	bf00      	nop
 8002244:	0800225d 	.word	0x0800225d
 8002248:	080022e7 	.word	0x080022e7
 800224c:	0800227f 	.word	0x0800227f
 8002250:	080022c3 	.word	0x080022c3
 8002254:	080022db 	.word	0x080022db
 8002258:	080022e7 	.word	0x080022e7
	            		    case SHAKE_STATE_MOVE_WELLS:
	            		    	LOGI("move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
 800225c:	4b59      	ldr	r3, [pc, #356]	; (80023c4 <step_shake_process+0x284>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4959      	ldr	r1, [pc, #356]	; (80023c8 <step_shake_process+0x288>)
 8002264:	485e      	ldr	r0, [pc, #376]	; (80023e0 <step_shake_process+0x2a0>)
 8002266:	f00b fb55 	bl	800d914 <iprintf>
	            		    	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 800226a:	4b56      	ldr	r3, [pc, #344]	; (80023c4 <step_shake_process+0x284>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4619      	mov	r1, r3
 8002270:	485c      	ldr	r0, [pc, #368]	; (80023e4 <step_shake_process+0x2a4>)
 8002272:	f7ff fc41 	bl	8001af8 <mt_set_target_position>
	            		    	shake_state = SHAKE_STATE_Z_BOTTOM;
 8002276:	4b51      	ldr	r3, [pc, #324]	; (80023bc <step_shake_process+0x27c>)
 8002278:	2204      	movs	r2, #4
 800227a:	701a      	strb	r2, [r3, #0]
	            		        break;
 800227c:	e034      	b.n	80022e8 <step_shake_process+0x1a8>
	            		    case SHAKE_STATE_Z_BOTTOM:
	            		    	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 800227e:	4b51      	ldr	r3, [pc, #324]	; (80023c4 <step_shake_process+0x284>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002286:	4619      	mov	r1, r3
 8002288:	4856      	ldr	r0, [pc, #344]	; (80023e4 <step_shake_process+0x2a4>)
 800228a:	f7ff fc35 	bl	8001af8 <mt_set_target_position>
	            		    	t_time = HAL_GetTick() +  (uint32_t)shake_step->shake * 1000;
 800228e:	f001 fc87 	bl	8003ba0 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	4b4a      	ldr	r3, [pc, #296]	; (80023c0 <step_shake_process+0x280>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	88db      	ldrh	r3, [r3, #6]
 800229a:	4619      	mov	r1, r3
 800229c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a0:	fb01 f303 	mul.w	r3, r1, r3
 80022a4:	4413      	add	r3, r2
 80022a6:	4a4d      	ldr	r2, [pc, #308]	; (80023dc <step_shake_process+0x29c>)
 80022a8:	6013      	str	r3, [r2, #0]
	            		    	LOGI("start shake in %ds",shake_step->shake);
 80022aa:	4b45      	ldr	r3, [pc, #276]	; (80023c0 <step_shake_process+0x280>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	88db      	ldrh	r3, [r3, #6]
 80022b0:	461a      	mov	r2, r3
 80022b2:	4945      	ldr	r1, [pc, #276]	; (80023c8 <step_shake_process+0x288>)
 80022b4:	484c      	ldr	r0, [pc, #304]	; (80023e8 <step_shake_process+0x2a8>)
 80022b6:	f00b fb2d 	bl	800d914 <iprintf>
	            		    	shake_state = SHAKE_STATE_SHAKE;
 80022ba:	4b40      	ldr	r3, [pc, #256]	; (80023bc <step_shake_process+0x27c>)
 80022bc:	2205      	movs	r2, #5
 80022be:	701a      	strb	r2, [r3, #0]
	            		        break;
 80022c0:	e012      	b.n	80022e8 <step_shake_process+0x1a8>
	            		    case SHAKE_STATE_SHAKE:
	            		    	LOGI("move z to top");
 80022c2:	4941      	ldr	r1, [pc, #260]	; (80023c8 <step_shake_process+0x288>)
 80022c4:	4849      	ldr	r0, [pc, #292]	; (80023ec <step_shake_process+0x2ac>)
 80022c6:	f00b fb25 	bl	800d914 <iprintf>
	            		    	mt_set_target_position(&z_motor,0);
 80022ca:	2100      	movs	r1, #0
 80022cc:	4845      	ldr	r0, [pc, #276]	; (80023e4 <step_shake_process+0x2a4>)
 80022ce:	f7ff fc13 	bl	8001af8 <mt_set_target_position>
	            		    	shake_state = SHAKE_STATE_Z_TOP;
 80022d2:	4b3a      	ldr	r3, [pc, #232]	; (80023bc <step_shake_process+0x27c>)
 80022d4:	2206      	movs	r2, #6
 80022d6:	701a      	strb	r2, [r3, #0]
	            		        break;
 80022d8:	e006      	b.n	80022e8 <step_shake_process+0x1a8>
	            		    case SHAKE_STATE_Z_TOP:
	            		    	shake_state = SHAKE_STATE_Z_FINISH;
 80022da:	4b38      	ldr	r3, [pc, #224]	; (80023bc <step_shake_process+0x27c>)
 80022dc:	2207      	movs	r2, #7
 80022de:	701a      	strb	r2, [r3, #0]
	            		        break;
 80022e0:	e002      	b.n	80022e8 <step_shake_process+0x1a8>
	            		        break;
	            		    default:
	            		        // handle unknown state
	            		        break;
	            		}
	            	}
 80022e2:	bf00      	nop
 80022e4:	e0c0      	b.n	8002468 <step_shake_process+0x328>
	            		        break;
 80022e6:	bf00      	nop
	                break;
 80022e8:	e0be      	b.n	8002468 <step_shake_process+0x328>
	            case SHAKE_STATE_Z_BOTTOM:
	                // handle SHAKE_STATE_Z_BOTTOM
	            	if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 80022ea:	4b3e      	ldr	r3, [pc, #248]	; (80023e4 <step_shake_process+0x2a4>)
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <step_shake_process+0x284>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	f040 80b3 	bne.w	800245e <step_shake_process+0x31e>
					{
						old_state = shake_state;
 80022f8:	4b30      	ldr	r3, [pc, #192]	; (80023bc <step_shake_process+0x27c>)
 80022fa:	781a      	ldrb	r2, [r3, #0]
 80022fc:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <step_shake_process+0x294>)
 80022fe:	701a      	strb	r2, [r3, #0]
						shake_state = SHAKE_STATE_WAIT;
 8002300:	4b2e      	ldr	r3, [pc, #184]	; (80023bc <step_shake_process+0x27c>)
 8002302:	2203      	movs	r2, #3
 8002304:	701a      	strb	r2, [r3, #0]
						LOGI("wait2 %d",shake_step->wait2);
 8002306:	4b2e      	ldr	r3, [pc, #184]	; (80023c0 <step_shake_process+0x280>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	889b      	ldrh	r3, [r3, #4]
 800230c:	461a      	mov	r2, r3
 800230e:	492e      	ldr	r1, [pc, #184]	; (80023c8 <step_shake_process+0x288>)
 8002310:	4837      	ldr	r0, [pc, #220]	; (80023f0 <step_shake_process+0x2b0>)
 8002312:	f00b faff 	bl	800d914 <iprintf>
						t_time = HAL_GetTick() +  (uint32_t)shake_step->wait2 * 1000;
 8002316:	f001 fc43 	bl	8003ba0 <HAL_GetTick>
 800231a:	4602      	mov	r2, r0
 800231c:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <step_shake_process+0x280>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	889b      	ldrh	r3, [r3, #4]
 8002322:	4619      	mov	r1, r3
 8002324:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002328:	fb01 f303 	mul.w	r3, r1, r3
 800232c:	4413      	add	r3, r2
 800232e:	4a2b      	ldr	r2, [pc, #172]	; (80023dc <step_shake_process+0x29c>)
 8002330:	6013      	str	r3, [r2, #0]
					}
//					break;
//	                old_state = shake_state;
//	                shake_state = SHAKE_STATE_SHAKE;
	                break;
 8002332:	e094      	b.n	800245e <step_shake_process+0x31e>
	            case SHAKE_STATE_SHAKE:
	                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos - 1000)
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <step_shake_process+0x2a4>)
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <step_shake_process+0x284>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002340:	429a      	cmp	r2, r3
 8002342:	d105      	bne.n	8002350 <step_shake_process+0x210>
	            	{
	                	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos);
 8002344:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <step_shake_process+0x284>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4619      	mov	r1, r3
 800234a:	4826      	ldr	r0, [pc, #152]	; (80023e4 <step_shake_process+0x2a4>)
 800234c:	f7ff fbd4 	bl	8001af8 <mt_set_target_position>
	            	}
	                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8002350:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <step_shake_process+0x2a4>)
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <step_shake_process+0x284>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8082 	bne.w	8002462 <step_shake_process+0x322>
					{
	                	if(HAL_GetTick() > t_time)
 800235e:	f001 fc1f 	bl	8003ba0 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	4b1d      	ldr	r3, [pc, #116]	; (80023dc <step_shake_process+0x29c>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	429a      	cmp	r2, r3
 800236a:	d91d      	bls.n	80023a8 <step_shake_process+0x268>
	                	{
	                		LOGI("shake done, wait4 : %d",shake_step->wait4);
 800236c:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <step_shake_process+0x280>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	891b      	ldrh	r3, [r3, #8]
 8002372:	461a      	mov	r2, r3
 8002374:	4914      	ldr	r1, [pc, #80]	; (80023c8 <step_shake_process+0x288>)
 8002376:	481f      	ldr	r0, [pc, #124]	; (80023f4 <step_shake_process+0x2b4>)
 8002378:	f00b facc 	bl	800d914 <iprintf>
	    	                old_state = shake_state;
 800237c:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <step_shake_process+0x27c>)
 800237e:	781a      	ldrb	r2, [r3, #0]
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <step_shake_process+0x294>)
 8002382:	701a      	strb	r2, [r3, #0]
	    	                t_time = HAL_GetTick() +  (uint32_t)shake_step->wait4 * 1000;
 8002384:	f001 fc0c 	bl	8003ba0 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	4b0d      	ldr	r3, [pc, #52]	; (80023c0 <step_shake_process+0x280>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	891b      	ldrh	r3, [r3, #8]
 8002390:	4619      	mov	r1, r3
 8002392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002396:	fb01 f303 	mul.w	r3, r1, r3
 800239a:	4413      	add	r3, r2
 800239c:	4a0f      	ldr	r2, [pc, #60]	; (80023dc <step_shake_process+0x29c>)
 800239e:	6013      	str	r3, [r2, #0]
	    	                shake_state = SHAKE_STATE_WAIT;
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <step_shake_process+0x27c>)
 80023a2:	2203      	movs	r2, #3
 80023a4:	701a      	strb	r2, [r3, #0]
	                	else
	                	{
	                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
	                	}
					}
	                break;
 80023a6:	e05c      	b.n	8002462 <step_shake_process+0x322>
	                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 80023a8:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <step_shake_process+0x284>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80023b0:	4619      	mov	r1, r3
 80023b2:	480c      	ldr	r0, [pc, #48]	; (80023e4 <step_shake_process+0x2a4>)
 80023b4:	f7ff fba0 	bl	8001af8 <mt_set_target_position>
	                break;
 80023b8:	e053      	b.n	8002462 <step_shake_process+0x322>
 80023ba:	bf00      	nop
 80023bc:	20002b30 	.word	0x20002b30
 80023c0:	20002b1c 	.word	0x20002b1c
 80023c4:	2000017c 	.word	0x2000017c
 80023c8:	0800ed28 	.word	0x0800ed28
 80023cc:	0800ee84 	.word	0x0800ee84
 80023d0:	20002abc 	.word	0x20002abc
 80023d4:	20002b36 	.word	0x20002b36
 80023d8:	0800ee9c 	.word	0x0800ee9c
 80023dc:	20002b2c 	.word	0x20002b2c
 80023e0:	0800eebc 	.word	0x0800eebc
 80023e4:	20002aec 	.word	0x20002aec
 80023e8:	0800eed8 	.word	0x0800eed8
 80023ec:	0800eef4 	.word	0x0800eef4
 80023f0:	0800ef0c 	.word	0x0800ef0c
 80023f4:	0800ef1c 	.word	0x0800ef1c
	            case SHAKE_STATE_Z_TOP:
	            	if(Mt_get_current_prosition(z_motor) == 0)
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <step_shake_process+0x330>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d132      	bne.n	8002466 <step_shake_process+0x326>
					{
	            		LOGI("all done wait5: %d",shake_step->wait5);
 8002400:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <step_shake_process+0x334>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	895b      	ldrh	r3, [r3, #10]
 8002406:	461a      	mov	r2, r3
 8002408:	491b      	ldr	r1, [pc, #108]	; (8002478 <step_shake_process+0x338>)
 800240a:	481c      	ldr	r0, [pc, #112]	; (800247c <step_shake_process+0x33c>)
 800240c:	f00b fa82 	bl	800d914 <iprintf>
	            		old_state = shake_state;
 8002410:	4b1b      	ldr	r3, [pc, #108]	; (8002480 <step_shake_process+0x340>)
 8002412:	781a      	ldrb	r2, [r3, #0]
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <step_shake_process+0x344>)
 8002416:	701a      	strb	r2, [r3, #0]
						t_time = HAL_GetTick() +  (uint32_t)shake_step->wait5 * 1000;
 8002418:	f001 fbc2 	bl	8003ba0 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <step_shake_process+0x334>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	895b      	ldrh	r3, [r3, #10]
 8002424:	4619      	mov	r1, r3
 8002426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242a:	fb01 f303 	mul.w	r3, r1, r3
 800242e:	4413      	add	r3, r2
 8002430:	4a15      	ldr	r2, [pc, #84]	; (8002488 <step_shake_process+0x348>)
 8002432:	6013      	str	r3, [r2, #0]
						shake_state = SHAKE_STATE_WAIT;
 8002434:	4b12      	ldr	r3, [pc, #72]	; (8002480 <step_shake_process+0x340>)
 8002436:	2203      	movs	r2, #3
 8002438:	701a      	strb	r2, [r3, #0]
					}
	                break;
 800243a:	e014      	b.n	8002466 <step_shake_process+0x326>
	            case SHAKE_STATE_Z_FINISH:
	                // handle SHAKE_STATE_Z_FINISH
	            	LOGI("step finish");
 800243c:	490e      	ldr	r1, [pc, #56]	; (8002478 <step_shake_process+0x338>)
 800243e:	4813      	ldr	r0, [pc, #76]	; (800248c <step_shake_process+0x34c>)
 8002440:	f00b fa68 	bl	800d914 <iprintf>
	                old_state = shake_state;
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <step_shake_process+0x340>)
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <step_shake_process+0x344>)
 800244a:	701a      	strb	r2, [r3, #0]
	                shake_state = SHAKE_STATE_IDE;
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <step_shake_process+0x340>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
	                return 1;
 8002452:	2301      	movs	r3, #1
 8002454:	e009      	b.n	800246a <step_shake_process+0x32a>
	                break;
	            default:
	                // handle unknown state
//	                old_state = shake_state;
//	                shake_state = SHAKE_STATE_IDE;
	                break;
 8002456:	bf00      	nop
 8002458:	e006      	b.n	8002468 <step_shake_process+0x328>
	                break;
 800245a:	bf00      	nop
 800245c:	e004      	b.n	8002468 <step_shake_process+0x328>
	                break;
 800245e:	bf00      	nop
 8002460:	e002      	b.n	8002468 <step_shake_process+0x328>
	                break;
 8002462:	bf00      	nop
 8002464:	e000      	b.n	8002468 <step_shake_process+0x328>
	                break;
 8002466:	bf00      	nop
	        }
	return 0;
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	bd98      	pop	{r3, r4, r7, pc}
 800246e:	bf00      	nop
 8002470:	20002aec 	.word	0x20002aec
 8002474:	20002b1c 	.word	0x20002b1c
 8002478:	0800ed28 	.word	0x0800ed28
 800247c:	0800ef3c 	.word	0x0800ef3c
 8002480:	20002b30 	.word	0x20002b30
 8002484:	20002b36 	.word	0x20002b36
 8002488:	20002b2c 	.word	0x20002b2c
 800248c:	0800ef58 	.word	0x0800ef58

08002490 <start_fill_washing_solution>:

_step_ws_state ws_state = WS_STATE_IDE;
_step_ws_state old_ws_state = WS_STATE_IDE;
void start_fill_washing_solution(){
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	LOGI("start fill washing solution");
 8002494:	4905      	ldr	r1, [pc, #20]	; (80024ac <start_fill_washing_solution+0x1c>)
 8002496:	4806      	ldr	r0, [pc, #24]	; (80024b0 <start_fill_washing_solution+0x20>)
 8002498:	f00b fa3c 	bl	800d914 <iprintf>
	HAL_GPIO_WritePin(PUMP1_GPIO_Port, PUMP1_Pin, PUMP1_ON_LEVEL);
 800249c:	2201      	movs	r2, #1
 800249e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024a2:	4804      	ldr	r0, [pc, #16]	; (80024b4 <start_fill_washing_solution+0x24>)
 80024a4:	f002 fc72 	bl	8004d8c <HAL_GPIO_WritePin>
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	0800ed28 	.word	0x0800ed28
 80024b0:	0800ef6c 	.word	0x0800ef6c
 80024b4:	40020c00 	.word	0x40020c00

080024b8 <is_washing_solution_full>:
int is_washing_solution_full()
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(WS_SOLUTION_FULL_GPIO_Port, WS_SOLUTION_FULL_Pin) == WS_SOLUTION_FULL_LEVEL)
 80024bc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024c0:	4805      	ldr	r0, [pc, #20]	; (80024d8 <is_washing_solution_full+0x20>)
 80024c2:	f002 fc4b 	bl	8004d5c <HAL_GPIO_ReadPin>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d101      	bne.n	80024d0 <is_washing_solution_full+0x18>
		return 1;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <is_washing_solution_full+0x1a>
	return 0;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40020c00 	.word	0x40020c00

080024dc <stop_fill_washing_solution>:
void stop_fill_washing_solution(){
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
	LOGI("stop fill washing solution");
 80024e0:	4905      	ldr	r1, [pc, #20]	; (80024f8 <stop_fill_washing_solution+0x1c>)
 80024e2:	4806      	ldr	r0, [pc, #24]	; (80024fc <stop_fill_washing_solution+0x20>)
 80024e4:	f00b fa16 	bl	800d914 <iprintf>
	HAL_GPIO_WritePin(PUMP1_GPIO_Port, PUMP1_Pin, PUMP1_OFF_LEVEL);
 80024e8:	2200      	movs	r2, #0
 80024ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ee:	4804      	ldr	r0, [pc, #16]	; (8002500 <stop_fill_washing_solution+0x24>)
 80024f0:	f002 fc4c 	bl	8004d8c <HAL_GPIO_WritePin>
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	0800ed28 	.word	0x0800ed28
 80024fc:	0800ef90 	.word	0x0800ef90
 8002500:	40020c00 	.word	0x40020c00

08002504 <start_drain_washing_solution>:


void start_drain_washing_solution(){
 8002504:	b580      	push	{r7, lr}
 8002506:	af00      	add	r7, sp, #0
	LOGI("start drain fill solution ");
 8002508:	4902      	ldr	r1, [pc, #8]	; (8002514 <start_drain_washing_solution+0x10>)
 800250a:	4803      	ldr	r0, [pc, #12]	; (8002518 <start_drain_washing_solution+0x14>)
 800250c:	f00b fa02 	bl	800d914 <iprintf>
}
 8002510:	bf00      	nop
 8002512:	bd80      	pop	{r7, pc}
 8002514:	0800ed28 	.word	0x0800ed28
 8002518:	0800efb4 	.word	0x0800efb4

0800251c <is_washing_solution_empty>:
int is_washing_solution_empty()
{
 800251c:	b580      	push	{r7, lr}
 800251e:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(WS_SOLUTION_EMPTY_GPIO_Port, WS_SOLUTION_EMPTY_Pin) == WS_SOLUTION_EMPTY_LEVEL)
 8002520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002524:	4805      	ldr	r0, [pc, #20]	; (800253c <is_washing_solution_empty+0x20>)
 8002526:	f002 fc19 	bl	8004d5c <HAL_GPIO_ReadPin>
 800252a:	4603      	mov	r3, r0
 800252c:	2b01      	cmp	r3, #1
 800252e:	d101      	bne.n	8002534 <is_washing_solution_empty+0x18>
			return 1;
 8002530:	2301      	movs	r3, #1
 8002532:	e000      	b.n	8002536 <is_washing_solution_empty+0x1a>
	return 0;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40020c00 	.word	0x40020c00

08002540 <stop_drain_washing_solution>:
void stop_drain_washing_solution(){
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	LOGI("stop drain washing solution ");
 8002544:	4902      	ldr	r1, [pc, #8]	; (8002550 <stop_drain_washing_solution+0x10>)
 8002546:	4803      	ldr	r0, [pc, #12]	; (8002554 <stop_drain_washing_solution+0x14>)
 8002548:	f00b f9e4 	bl	800d914 <iprintf>
}
 800254c:	bf00      	nop
 800254e:	bd80      	pop	{r7, pc}
 8002550:	0800ed28 	.word	0x0800ed28
 8002554:	0800efd8 	.word	0x0800efd8

08002558 <step_washing_start>:
int step_washing_start()
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
	if(ws_state == WS_STATE_IDE)
 800255c:	4b13      	ldr	r3, [pc, #76]	; (80025ac <step_washing_start+0x54>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d120      	bne.n	80025a6 <step_washing_start+0x4e>
	{
		LOGI("--------------- washing step: %d of program : %d----------------",running_step,running_pg);
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <step_washing_start+0x58>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <step_washing_start+0x5c>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	4912      	ldr	r1, [pc, #72]	; (80025b8 <step_washing_start+0x60>)
 8002570:	4812      	ldr	r0, [pc, #72]	; (80025bc <step_washing_start+0x64>)
 8002572:	f00b f9cf 	bl	800d914 <iprintf>
		washing_step = (_def_washing_step *)&system_data.flash_data.Program_para[running_pg][running_step];
 8002576:	4b0f      	ldr	r3, [pc, #60]	; (80025b4 <step_washing_start+0x5c>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	4b0c      	ldr	r3, [pc, #48]	; (80025b0 <step_washing_start+0x58>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	4619      	mov	r1, r3
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	009a      	lsls	r2, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	440b      	add	r3, r1
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	3328      	adds	r3, #40	; 0x28
 8002592:	4a0b      	ldr	r2, [pc, #44]	; (80025c0 <step_washing_start+0x68>)
 8002594:	4413      	add	r3, r2
 8002596:	3304      	adds	r3, #4
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <step_washing_start+0x6c>)
 800259a:	6013      	str	r3, [r2, #0]
		shake_state = WS_STATE_START;
 800259c:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <step_washing_start+0x70>)
 800259e:	2201      	movs	r2, #1
 80025a0:	701a      	strb	r2, [r3, #0]
		return 1;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <step_washing_start+0x50>
	}
	return 0;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	20002b31 	.word	0x20002b31
 80025b0:	20002b29 	.word	0x20002b29
 80025b4:	20002b28 	.word	0x20002b28
 80025b8:	0800ed28 	.word	0x0800ed28
 80025bc:	0800effc 	.word	0x0800effc
 80025c0:	2000017c 	.word	0x2000017c
 80025c4:	20002b24 	.word	0x20002b24
 80025c8:	20002b30 	.word	0x20002b30

080025cc <show_infor_washing_step>:

void show_infor_washing_step(_def_washing_step ws_step)
{
 80025cc:	b590      	push	{r4, r7, lr}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	463c      	mov	r4, r7
 80025d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOGI("---------------INFOR_WASHING_STEP------------");
 80025d8:	491d      	ldr	r1, [pc, #116]	; (8002650 <show_infor_washing_step+0x84>)
 80025da:	481e      	ldr	r0, [pc, #120]	; (8002654 <show_infor_washing_step+0x88>)
 80025dc:	f00b f99a 	bl	800d914 <iprintf>
	LOGI("1:Move to Wells: %d",ws_step.wells);
 80025e0:	787b      	ldrb	r3, [r7, #1]
 80025e2:	461a      	mov	r2, r3
 80025e4:	491a      	ldr	r1, [pc, #104]	; (8002650 <show_infor_washing_step+0x84>)
 80025e6:	481c      	ldr	r0, [pc, #112]	; (8002658 <show_infor_washing_step+0x8c>)
 80025e8:	f00b f994 	bl	800d914 <iprintf>
	LOGI("2:wait1 : %ds",ws_step.wait1);
 80025ec:	887b      	ldrh	r3, [r7, #2]
 80025ee:	461a      	mov	r2, r3
 80025f0:	4917      	ldr	r1, [pc, #92]	; (8002650 <show_infor_washing_step+0x84>)
 80025f2:	481a      	ldr	r0, [pc, #104]	; (800265c <show_infor_washing_step+0x90>)
 80025f4:	f00b f98e 	bl	800d914 <iprintf>
	LOGI("3:fill washing solution: %d \n4:move z to bottom",ws_step.fill);
 80025f8:	88bb      	ldrh	r3, [r7, #4]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4914      	ldr	r1, [pc, #80]	; (8002650 <show_infor_washing_step+0x84>)
 80025fe:	4818      	ldr	r0, [pc, #96]	; (8002660 <show_infor_washing_step+0x94>)
 8002600:	f00b f988 	bl	800d914 <iprintf>
	LOGI("5:wait2 : %ds",ws_step.wait2);
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	461a      	mov	r2, r3
 8002608:	4911      	ldr	r1, [pc, #68]	; (8002650 <show_infor_washing_step+0x84>)
 800260a:	4816      	ldr	r0, [pc, #88]	; (8002664 <show_infor_washing_step+0x98>)
 800260c:	f00b f982 	bl	800d914 <iprintf>
	LOGI("6:shake on : %ds",ws_step.shake);
 8002610:	893b      	ldrh	r3, [r7, #8]
 8002612:	461a      	mov	r2, r3
 8002614:	490e      	ldr	r1, [pc, #56]	; (8002650 <show_infor_washing_step+0x84>)
 8002616:	4814      	ldr	r0, [pc, #80]	; (8002668 <show_infor_washing_step+0x9c>)
 8002618:	f00b f97c 	bl	800d914 <iprintf>
	LOGI("7:wait4 : %ds",ws_step.wait4);
 800261c:	897b      	ldrh	r3, [r7, #10]
 800261e:	461a      	mov	r2, r3
 8002620:	490b      	ldr	r1, [pc, #44]	; (8002650 <show_infor_washing_step+0x84>)
 8002622:	4812      	ldr	r0, [pc, #72]	; (800266c <show_infor_washing_step+0xa0>)
 8002624:	f00b f976 	bl	800d914 <iprintf>
	LOGI("8:move z to top %d\n9:Drain washing solution",ws_step.drain);
 8002628:	89bb      	ldrh	r3, [r7, #12]
 800262a:	461a      	mov	r2, r3
 800262c:	4908      	ldr	r1, [pc, #32]	; (8002650 <show_infor_washing_step+0x84>)
 800262e:	4810      	ldr	r0, [pc, #64]	; (8002670 <show_infor_washing_step+0xa4>)
 8002630:	f00b f970 	bl	800d914 <iprintf>
	LOGI("10:wait5 : %ds",ws_step.wait5);
 8002634:	89fb      	ldrh	r3, [r7, #14]
 8002636:	461a      	mov	r2, r3
 8002638:	4905      	ldr	r1, [pc, #20]	; (8002650 <show_infor_washing_step+0x84>)
 800263a:	480e      	ldr	r0, [pc, #56]	; (8002674 <show_infor_washing_step+0xa8>)
 800263c:	f00b f96a 	bl	800d914 <iprintf>
	LOGI("-------------------------------------------");
 8002640:	4903      	ldr	r1, [pc, #12]	; (8002650 <show_infor_washing_step+0x84>)
 8002642:	480d      	ldr	r0, [pc, #52]	; (8002678 <show_infor_washing_step+0xac>)
 8002644:	f00b f966 	bl	800d914 <iprintf>
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}
 8002650:	0800ed28 	.word	0x0800ed28
 8002654:	0800f044 	.word	0x0800f044
 8002658:	0800ed88 	.word	0x0800ed88
 800265c:	0800eda4 	.word	0x0800eda4
 8002660:	0800f07c 	.word	0x0800f07c
 8002664:	0800f0b4 	.word	0x0800f0b4
 8002668:	0800f0cc 	.word	0x0800f0cc
 800266c:	0800f0e4 	.word	0x0800f0e4
 8002670:	0800f0fc 	.word	0x0800f0fc
 8002674:	0800f130 	.word	0x0800f130
 8002678:	0800f148 	.word	0x0800f148

0800267c <step_washing_process>:

int step_washing_process(void)
{
 800267c:	b598      	push	{r3, r4, r7, lr}
 800267e:	af00      	add	r7, sp, #0
	    switch(ws_state) {
 8002680:	4ba6      	ldr	r3, [pc, #664]	; (800291c <step_washing_process+0x2a0>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b09      	cmp	r3, #9
 8002686:	f200 81f0 	bhi.w	8002a6a <step_washing_process+0x3ee>
 800268a:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <step_washing_process+0x14>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	080026b9 	.word	0x080026b9
 8002694:	080026c1 	.word	0x080026c1
 8002698:	08002713 	.word	0x08002713
 800269c:	0800279b 	.word	0x0800279b
 80026a0:	08002769 	.word	0x08002769
 80026a4:	080027e5 	.word	0x080027e5
 80026a8:	0800286b 	.word	0x0800286b
 80026ac:	080028cf 	.word	0x080028cf
 80026b0:	0800295d 	.word	0x0800295d
 80026b4:	08002a59 	.word	0x08002a59
	        case WS_STATE_IDE:
	            // Do something when in state WS_STATE_IDE
	            ws_state = WS_STATE_START; // Example transition to next state
 80026b8:	4b98      	ldr	r3, [pc, #608]	; (800291c <step_washing_process+0x2a0>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
	            break;
 80026be:	e1e1      	b.n	8002a84 <step_washing_process+0x408>
	        case WS_STATE_START:
	        	show_infor_washing_step(*washing_step);
 80026c0:	4b97      	ldr	r3, [pc, #604]	; (8002920 <step_washing_process+0x2a4>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	4610      	mov	r0, r2
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	4611      	mov	r1, r2
 80026cc:	689c      	ldr	r4, [r3, #8]
 80026ce:	4622      	mov	r2, r4
 80026d0:	68dc      	ldr	r4, [r3, #12]
 80026d2:	4623      	mov	r3, r4
 80026d4:	f7ff ff7a 	bl	80025cc <show_infor_washing_step>
	            LOGI("move x to %lu",system_data.flash_data.Well_position[washing_step->wells-1]);
 80026d8:	4b91      	ldr	r3, [pc, #580]	; (8002920 <step_washing_process+0x2a4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	785b      	ldrb	r3, [r3, #1]
 80026de:	3b01      	subs	r3, #1
 80026e0:	4a90      	ldr	r2, [pc, #576]	; (8002924 <step_washing_process+0x2a8>)
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	461a      	mov	r2, r3
 80026ea:	498f      	ldr	r1, [pc, #572]	; (8002928 <step_washing_process+0x2ac>)
 80026ec:	488f      	ldr	r0, [pc, #572]	; (800292c <step_washing_process+0x2b0>)
 80026ee:	f00b f911 	bl	800d914 <iprintf>
            	mt_set_target_position(&x_motor, system_data.flash_data.Well_position[washing_step->wells-1]); // m
 80026f2:	4b8b      	ldr	r3, [pc, #556]	; (8002920 <step_washing_process+0x2a4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	785b      	ldrb	r3, [r3, #1]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	4a8a      	ldr	r2, [pc, #552]	; (8002924 <step_washing_process+0x2a8>)
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	4413      	add	r3, r2
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	4619      	mov	r1, r3
 8002704:	488a      	ldr	r0, [pc, #552]	; (8002930 <step_washing_process+0x2b4>)
 8002706:	f7ff f9f7 	bl	8001af8 <mt_set_target_position>
	            ws_state = WS_STATE_MOVE_WELLS; // Example transition to next state
 800270a:	4b84      	ldr	r3, [pc, #528]	; (800291c <step_washing_process+0x2a0>)
 800270c:	2202      	movs	r2, #2
 800270e:	701a      	strb	r2, [r3, #0]
	            break;
 8002710:	e1b8      	b.n	8002a84 <step_washing_process+0x408>
	        case WS_STATE_MOVE_WELLS:
	        	if(Mt_get_current_prosition(x_motor) == system_data.flash_data.Well_position[washing_step->wells-1])
 8002712:	4b87      	ldr	r3, [pc, #540]	; (8002930 <step_washing_process+0x2b4>)
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	4b82      	ldr	r3, [pc, #520]	; (8002920 <step_washing_process+0x2a4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	785b      	ldrb	r3, [r3, #1]
 800271c:	3b01      	subs	r3, #1
 800271e:	4981      	ldr	r1, [pc, #516]	; (8002924 <step_washing_process+0x2a8>)
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	429a      	cmp	r2, r3
 8002728:	f040 81a1 	bne.w	8002a6e <step_washing_process+0x3f2>
				{
					LOGI("move x done, wait1 %ds",washing_step->wait1);
 800272c:	4b7c      	ldr	r3, [pc, #496]	; (8002920 <step_washing_process+0x2a4>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	885b      	ldrh	r3, [r3, #2]
 8002732:	461a      	mov	r2, r3
 8002734:	497c      	ldr	r1, [pc, #496]	; (8002928 <step_washing_process+0x2ac>)
 8002736:	487f      	ldr	r0, [pc, #508]	; (8002934 <step_washing_process+0x2b8>)
 8002738:	f00b f8ec 	bl	800d914 <iprintf>
					old_ws_state = ws_state;
 800273c:	4b77      	ldr	r3, [pc, #476]	; (800291c <step_washing_process+0x2a0>)
 800273e:	781a      	ldrb	r2, [r3, #0]
 8002740:	4b7d      	ldr	r3, [pc, #500]	; (8002938 <step_washing_process+0x2bc>)
 8002742:	701a      	strb	r2, [r3, #0]
					ws_state = WS_STATE_WAIT;
 8002744:	4b75      	ldr	r3, [pc, #468]	; (800291c <step_washing_process+0x2a0>)
 8002746:	2208      	movs	r2, #8
 8002748:	701a      	strb	r2, [r3, #0]
					t_time = HAL_GetTick() +  (uint32_t)washing_step->wait1 * 1000;
 800274a:	f001 fa29 	bl	8003ba0 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	4b73      	ldr	r3, [pc, #460]	; (8002920 <step_washing_process+0x2a4>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	885b      	ldrh	r3, [r3, #2]
 8002756:	4619      	mov	r1, r3
 8002758:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	4a76      	ldr	r2, [pc, #472]	; (800293c <step_washing_process+0x2c0>)
 8002764:	6013      	str	r3, [r2, #0]
				}
	            break;
 8002766:	e182      	b.n	8002a6e <step_washing_process+0x3f2>
	        case WS_STATE_FILL_WS_SOLUTION:
	            if(is_washing_solution_full())
 8002768:	f7ff fea6 	bl	80024b8 <is_washing_solution_full>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 817f 	beq.w	8002a72 <step_washing_process+0x3f6>
	            {
					LOGI("Fill done,move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
 8002774:	4b6b      	ldr	r3, [pc, #428]	; (8002924 <step_washing_process+0x2a8>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	461a      	mov	r2, r3
 800277a:	496b      	ldr	r1, [pc, #428]	; (8002928 <step_washing_process+0x2ac>)
 800277c:	4870      	ldr	r0, [pc, #448]	; (8002940 <step_washing_process+0x2c4>)
 800277e:	f00b f8c9 	bl	800d914 <iprintf>
					mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 8002782:	4b68      	ldr	r3, [pc, #416]	; (8002924 <step_washing_process+0x2a8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4619      	mov	r1, r3
 8002788:	486e      	ldr	r0, [pc, #440]	; (8002944 <step_washing_process+0x2c8>)
 800278a:	f7ff f9b5 	bl	8001af8 <mt_set_target_position>
					ws_state = WS_STATE_Z_BOTTOM;
 800278e:	4b63      	ldr	r3, [pc, #396]	; (800291c <step_washing_process+0x2a0>)
 8002790:	2203      	movs	r2, #3
 8002792:	701a      	strb	r2, [r3, #0]
	            	stop_fill_washing_solution();
 8002794:	f7ff fea2 	bl	80024dc <stop_fill_washing_solution>
	            }
	            break;
 8002798:	e16b      	b.n	8002a72 <step_washing_process+0x3f6>
	        case WS_STATE_Z_BOTTOM:
            	if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <step_washing_process+0x2c8>)
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	4b61      	ldr	r3, [pc, #388]	; (8002924 <step_washing_process+0x2a8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	f040 8167 	bne.w	8002a76 <step_washing_process+0x3fa>
				{
            		LOGI("move z done, wait2 %ds",washing_step->wait2);
 80027a8:	4b5d      	ldr	r3, [pc, #372]	; (8002920 <step_washing_process+0x2a4>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	88db      	ldrh	r3, [r3, #6]
 80027ae:	461a      	mov	r2, r3
 80027b0:	495d      	ldr	r1, [pc, #372]	; (8002928 <step_washing_process+0x2ac>)
 80027b2:	4865      	ldr	r0, [pc, #404]	; (8002948 <step_washing_process+0x2cc>)
 80027b4:	f00b f8ae 	bl	800d914 <iprintf>
					old_ws_state = ws_state;
 80027b8:	4b58      	ldr	r3, [pc, #352]	; (800291c <step_washing_process+0x2a0>)
 80027ba:	781a      	ldrb	r2, [r3, #0]
 80027bc:	4b5e      	ldr	r3, [pc, #376]	; (8002938 <step_washing_process+0x2bc>)
 80027be:	701a      	strb	r2, [r3, #0]
	            	t_time = HAL_GetTick() +  (uint32_t)washing_step->wait2 * 1000;
 80027c0:	f001 f9ee 	bl	8003ba0 <HAL_GetTick>
 80027c4:	4602      	mov	r2, r0
 80027c6:	4b56      	ldr	r3, [pc, #344]	; (8002920 <step_washing_process+0x2a4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	88db      	ldrh	r3, [r3, #6]
 80027cc:	4619      	mov	r1, r3
 80027ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d2:	fb01 f303 	mul.w	r3, r1, r3
 80027d6:	4413      	add	r3, r2
 80027d8:	4a58      	ldr	r2, [pc, #352]	; (800293c <step_washing_process+0x2c0>)
 80027da:	6013      	str	r3, [r2, #0]
		            ws_state = WS_STATE_WAIT; // Example transition to next state
 80027dc:	4b4f      	ldr	r3, [pc, #316]	; (800291c <step_washing_process+0x2a0>)
 80027de:	2208      	movs	r2, #8
 80027e0:	701a      	strb	r2, [r3, #0]

				}
	            break;
 80027e2:	e148      	b.n	8002a76 <step_washing_process+0x3fa>
	        case WS_STATE_SHAKE:
                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos - 1000)
 80027e4:	4b57      	ldr	r3, [pc, #348]	; (8002944 <step_washing_process+0x2c8>)
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <step_washing_process+0x2a8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d105      	bne.n	8002800 <step_washing_process+0x184>
            	{
                	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos);
 80027f4:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <step_washing_process+0x2a8>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4619      	mov	r1, r3
 80027fa:	4852      	ldr	r0, [pc, #328]	; (8002944 <step_washing_process+0x2c8>)
 80027fc:	f7ff f97c 	bl	8001af8 <mt_set_target_position>
            	}
                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8002800:	4b50      	ldr	r3, [pc, #320]	; (8002944 <step_washing_process+0x2c8>)
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	4b47      	ldr	r3, [pc, #284]	; (8002924 <step_washing_process+0x2a8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	f040 8136 	bne.w	8002a7a <step_washing_process+0x3fe>
				{
                	if(HAL_GetTick() > t_time)
 800280e:	f001 f9c7 	bl	8003ba0 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	4b49      	ldr	r3, [pc, #292]	; (800293c <step_washing_process+0x2c0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d91d      	bls.n	8002858 <step_washing_process+0x1dc>
                	{
                		LOGI("shake done, wait4 : %d",washing_step->wait4);
 800281c:	4b40      	ldr	r3, [pc, #256]	; (8002920 <step_washing_process+0x2a4>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	895b      	ldrh	r3, [r3, #10]
 8002822:	461a      	mov	r2, r3
 8002824:	4940      	ldr	r1, [pc, #256]	; (8002928 <step_washing_process+0x2ac>)
 8002826:	4849      	ldr	r0, [pc, #292]	; (800294c <step_washing_process+0x2d0>)
 8002828:	f00b f874 	bl	800d914 <iprintf>
                		old_ws_state = ws_state;
 800282c:	4b3b      	ldr	r3, [pc, #236]	; (800291c <step_washing_process+0x2a0>)
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	4b41      	ldr	r3, [pc, #260]	; (8002938 <step_washing_process+0x2bc>)
 8002832:	701a      	strb	r2, [r3, #0]
    	                t_time = HAL_GetTick() +  (uint32_t)washing_step->wait4 * 1000;
 8002834:	f001 f9b4 	bl	8003ba0 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	4b39      	ldr	r3, [pc, #228]	; (8002920 <step_washing_process+0x2a4>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	895b      	ldrh	r3, [r3, #10]
 8002840:	4619      	mov	r1, r3
 8002842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002846:	fb01 f303 	mul.w	r3, r1, r3
 800284a:	4413      	add	r3, r2
 800284c:	4a3b      	ldr	r2, [pc, #236]	; (800293c <step_washing_process+0x2c0>)
 800284e:	6013      	str	r3, [r2, #0]
    	                ws_state = WS_STATE_WAIT;
 8002850:	4b32      	ldr	r3, [pc, #200]	; (800291c <step_washing_process+0x2a0>)
 8002852:	2208      	movs	r2, #8
 8002854:	701a      	strb	r2, [r3, #0]
                	else
                	{
                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
                	}
				}
	            break;
 8002856:	e110      	b.n	8002a7a <step_washing_process+0x3fe>
                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 8002858:	4b32      	ldr	r3, [pc, #200]	; (8002924 <step_washing_process+0x2a8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002860:	4619      	mov	r1, r3
 8002862:	4838      	ldr	r0, [pc, #224]	; (8002944 <step_washing_process+0x2c8>)
 8002864:	f7ff f948 	bl	8001af8 <mt_set_target_position>
	            break;
 8002868:	e107      	b.n	8002a7a <step_washing_process+0x3fe>
	        case WS_STATE_Z_TOP:
            	if(Mt_get_current_prosition(z_motor) == 0){
 800286a:	4b36      	ldr	r3, [pc, #216]	; (8002944 <step_washing_process+0x2c8>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	f040 8105 	bne.w	8002a7e <step_washing_process+0x402>
            		LOGI("ztop done, start drain ws solution");
 8002874:	492c      	ldr	r1, [pc, #176]	; (8002928 <step_washing_process+0x2ac>)
 8002876:	4836      	ldr	r0, [pc, #216]	; (8002950 <step_washing_process+0x2d4>)
 8002878:	f00b f84c 	bl	800d914 <iprintf>
            		old_ws_state = ws_state;
 800287c:	4b27      	ldr	r3, [pc, #156]	; (800291c <step_washing_process+0x2a0>)
 800287e:	781a      	ldrb	r2, [r3, #0]
 8002880:	4b2d      	ldr	r3, [pc, #180]	; (8002938 <step_washing_process+0x2bc>)
 8002882:	701a      	strb	r2, [r3, #0]

//					t_time = HAL_GetTick() +  (uint32_t)step_para.timing[4] * 1000;
            		if(washing_step->drain)
 8002884:	4b26      	ldr	r3, [pc, #152]	; (8002920 <step_washing_process+0x2a4>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	899b      	ldrh	r3, [r3, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <step_washing_process+0x21e>
            		{
						start_drain_washing_solution();
 800288e:	f7ff fe39 	bl	8002504 <start_drain_washing_solution>
						ws_state = WS_STATE_DRAIN_WS_SOLUTION;
 8002892:	4b22      	ldr	r3, [pc, #136]	; (800291c <step_washing_process+0x2a0>)
 8002894:	2207      	movs	r2, #7
 8002896:	701a      	strb	r2, [r3, #0]
            			old_ws_state = ws_state;
						t_time = HAL_GetTick() +  (uint32_t)washing_step->wait5 * 1000;
						ws_state = WS_STATE_WAIT; // Example transition to next state
            		}
				}
	            break;
 8002898:	e0f1      	b.n	8002a7e <step_washing_process+0x402>
            			LOGI("skip drain fill solution ");
 800289a:	4923      	ldr	r1, [pc, #140]	; (8002928 <step_washing_process+0x2ac>)
 800289c:	482d      	ldr	r0, [pc, #180]	; (8002954 <step_washing_process+0x2d8>)
 800289e:	f00b f839 	bl	800d914 <iprintf>
            			old_ws_state = ws_state;
 80028a2:	4b1e      	ldr	r3, [pc, #120]	; (800291c <step_washing_process+0x2a0>)
 80028a4:	781a      	ldrb	r2, [r3, #0]
 80028a6:	4b24      	ldr	r3, [pc, #144]	; (8002938 <step_washing_process+0x2bc>)
 80028a8:	701a      	strb	r2, [r3, #0]
						t_time = HAL_GetTick() +  (uint32_t)washing_step->wait5 * 1000;
 80028aa:	f001 f979 	bl	8003ba0 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <step_washing_process+0x2a4>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	89db      	ldrh	r3, [r3, #14]
 80028b6:	4619      	mov	r1, r3
 80028b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028bc:	fb01 f303 	mul.w	r3, r1, r3
 80028c0:	4413      	add	r3, r2
 80028c2:	4a1e      	ldr	r2, [pc, #120]	; (800293c <step_washing_process+0x2c0>)
 80028c4:	6013      	str	r3, [r2, #0]
						ws_state = WS_STATE_WAIT; // Example transition to next state
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <step_washing_process+0x2a0>)
 80028c8:	2208      	movs	r2, #8
 80028ca:	701a      	strb	r2, [r3, #0]
	            break;
 80028cc:	e0d7      	b.n	8002a7e <step_washing_process+0x402>
	        case WS_STATE_DRAIN_WS_SOLUTION:
	            if(is_washing_solution_empty())
 80028ce:	f7ff fe25 	bl	800251c <is_washing_solution_empty>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80d4 	beq.w	8002a82 <step_washing_process+0x406>
	            {
	            	LOGI("solution empty,wait5 :%ds",washing_step->wait5);
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <step_washing_process+0x2a4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	89db      	ldrh	r3, [r3, #14]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4911      	ldr	r1, [pc, #68]	; (8002928 <step_washing_process+0x2ac>)
 80028e4:	481c      	ldr	r0, [pc, #112]	; (8002958 <step_washing_process+0x2dc>)
 80028e6:	f00b f815 	bl	800d914 <iprintf>
	            	stop_drain_washing_solution();
 80028ea:	f7ff fe29 	bl	8002540 <stop_drain_washing_solution>
	            	old_ws_state = ws_state;
 80028ee:	4b0b      	ldr	r3, [pc, #44]	; (800291c <step_washing_process+0x2a0>)
 80028f0:	781a      	ldrb	r2, [r3, #0]
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <step_washing_process+0x2bc>)
 80028f4:	701a      	strb	r2, [r3, #0]
	            	t_time = HAL_GetTick() +  (uint32_t)washing_step->wait5 * 1000;
 80028f6:	f001 f953 	bl	8003ba0 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <step_washing_process+0x2a4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	89db      	ldrh	r3, [r3, #14]
 8002902:	4619      	mov	r1, r3
 8002904:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	4413      	add	r3, r2
 800290e:	4a0b      	ldr	r2, [pc, #44]	; (800293c <step_washing_process+0x2c0>)
 8002910:	6013      	str	r3, [r2, #0]
	            	ws_state = WS_STATE_WAIT; // Example transition to next state
 8002912:	4b02      	ldr	r3, [pc, #8]	; (800291c <step_washing_process+0x2a0>)
 8002914:	2208      	movs	r2, #8
 8002916:	701a      	strb	r2, [r3, #0]
	            }
	            break;
 8002918:	e0b3      	b.n	8002a82 <step_washing_process+0x406>
 800291a:	bf00      	nop
 800291c:	20002b31 	.word	0x20002b31
 8002920:	20002b24 	.word	0x20002b24
 8002924:	2000017c 	.word	0x2000017c
 8002928:	0800ed28 	.word	0x0800ed28
 800292c:	0800ee84 	.word	0x0800ee84
 8002930:	20002abc 	.word	0x20002abc
 8002934:	0800f17c 	.word	0x0800f17c
 8002938:	20002b32 	.word	0x20002b32
 800293c:	20002b2c 	.word	0x20002b2c
 8002940:	0800f19c 	.word	0x0800f19c
 8002944:	20002aec 	.word	0x20002aec
 8002948:	0800f1c4 	.word	0x0800f1c4
 800294c:	0800ef1c 	.word	0x0800ef1c
 8002950:	0800f1e4 	.word	0x0800f1e4
 8002954:	0800f210 	.word	0x0800f210
 8002958:	0800f234 	.word	0x0800f234
	        case WS_STATE_WAIT:
	            if(HAL_GetTick() > t_time)
 800295c:	f001 f920 	bl	8003ba0 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <step_washing_process+0x410>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	429a      	cmp	r2, r3
 8002968:	d972      	bls.n	8002a50 <step_washing_process+0x3d4>
	            {
	            	switch (old_ws_state) {
 800296a:	4b49      	ldr	r3, [pc, #292]	; (8002a90 <step_washing_process+0x414>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	3b02      	subs	r3, #2
 8002970:	2b05      	cmp	r3, #5
 8002972:	d86f      	bhi.n	8002a54 <step_washing_process+0x3d8>
 8002974:	a201      	add	r2, pc, #4	; (adr r2, 800297c <step_washing_process+0x300>)
 8002976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297a:	bf00      	nop
 800297c:	08002995 	.word	0x08002995
 8002980:	080029dd 	.word	0x080029dd
 8002984:	08002a55 	.word	0x08002a55
 8002988:	08002a29 	.word	0x08002a29
 800298c:	08002a41 	.word	0x08002a41
 8002990:	08002a41 	.word	0x08002a41
						case WS_STATE_MOVE_WELLS:
							LOGI("wait1 done");
 8002994:	493f      	ldr	r1, [pc, #252]	; (8002a94 <step_washing_process+0x418>)
 8002996:	4840      	ldr	r0, [pc, #256]	; (8002a98 <step_washing_process+0x41c>)
 8002998:	f00a ffbc 	bl	800d914 <iprintf>
							if(washing_step->fill)
 800299c:	4b3f      	ldr	r3, [pc, #252]	; (8002a9c <step_washing_process+0x420>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	889b      	ldrh	r3, [r3, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <step_washing_process+0x336>
							{
								ws_state = WS_STATE_FILL_WS_SOLUTION;
 80029a6:	4b3e      	ldr	r3, [pc, #248]	; (8002aa0 <step_washing_process+0x424>)
 80029a8:	2204      	movs	r2, #4
 80029aa:	701a      	strb	r2, [r3, #0]
								start_fill_washing_solution();
 80029ac:	f7ff fd70 	bl	8002490 <start_fill_washing_solution>
								LOGI("skip fill washing solution");
								LOGI("move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
								mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
								ws_state= WS_STATE_Z_BOTTOM;
							}
							break;
 80029b0:	e051      	b.n	8002a56 <step_washing_process+0x3da>
								LOGI("skip fill washing solution");
 80029b2:	4938      	ldr	r1, [pc, #224]	; (8002a94 <step_washing_process+0x418>)
 80029b4:	483b      	ldr	r0, [pc, #236]	; (8002aa4 <step_washing_process+0x428>)
 80029b6:	f00a ffad 	bl	800d914 <iprintf>
								LOGI("move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
 80029ba:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <step_washing_process+0x42c>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	4934      	ldr	r1, [pc, #208]	; (8002a94 <step_washing_process+0x418>)
 80029c2:	483a      	ldr	r0, [pc, #232]	; (8002aac <step_washing_process+0x430>)
 80029c4:	f00a ffa6 	bl	800d914 <iprintf>
								mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 80029c8:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <step_washing_process+0x42c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4619      	mov	r1, r3
 80029ce:	4838      	ldr	r0, [pc, #224]	; (8002ab0 <step_washing_process+0x434>)
 80029d0:	f7ff f892 	bl	8001af8 <mt_set_target_position>
								ws_state= WS_STATE_Z_BOTTOM;
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <step_washing_process+0x424>)
 80029d6:	2203      	movs	r2, #3
 80029d8:	701a      	strb	r2, [r3, #0]
							break;
 80029da:	e03c      	b.n	8002a56 <step_washing_process+0x3da>
						case WS_STATE_Z_BOTTOM:
							LOGI("wait2 done");
 80029dc:	492d      	ldr	r1, [pc, #180]	; (8002a94 <step_washing_process+0x418>)
 80029de:	4835      	ldr	r0, [pc, #212]	; (8002ab4 <step_washing_process+0x438>)
 80029e0:	f00a ff98 	bl	800d914 <iprintf>
							mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 80029e4:	4b30      	ldr	r3, [pc, #192]	; (8002aa8 <step_washing_process+0x42c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80029ec:	4619      	mov	r1, r3
 80029ee:	4830      	ldr	r0, [pc, #192]	; (8002ab0 <step_washing_process+0x434>)
 80029f0:	f7ff f882 	bl	8001af8 <mt_set_target_position>
							LOGI("start shake in %ds",washing_step->shake);
 80029f4:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <step_washing_process+0x420>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	891b      	ldrh	r3, [r3, #8]
 80029fa:	461a      	mov	r2, r3
 80029fc:	4925      	ldr	r1, [pc, #148]	; (8002a94 <step_washing_process+0x418>)
 80029fe:	482e      	ldr	r0, [pc, #184]	; (8002ab8 <step_washing_process+0x43c>)
 8002a00:	f00a ff88 	bl	800d914 <iprintf>
							t_time = HAL_GetTick() +  (uint32_t)washing_step->shake * 1000;
 8002a04:	f001 f8cc 	bl	8003ba0 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <step_washing_process+0x420>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	891b      	ldrh	r3, [r3, #8]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	4a1b      	ldr	r2, [pc, #108]	; (8002a8c <step_washing_process+0x410>)
 8002a1e:	6013      	str	r3, [r2, #0]

							ws_state = WS_STATE_SHAKE;
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <step_washing_process+0x424>)
 8002a22:	2205      	movs	r2, #5
 8002a24:	701a      	strb	r2, [r3, #0]
							break;
 8002a26:	e016      	b.n	8002a56 <step_washing_process+0x3da>
						case WS_STATE_SHAKE:
							LOGI("wait4 done, move z to top");
 8002a28:	491a      	ldr	r1, [pc, #104]	; (8002a94 <step_washing_process+0x418>)
 8002a2a:	4824      	ldr	r0, [pc, #144]	; (8002abc <step_washing_process+0x440>)
 8002a2c:	f00a ff72 	bl	800d914 <iprintf>
							mt_set_target_position(&z_motor,0);
 8002a30:	2100      	movs	r1, #0
 8002a32:	481f      	ldr	r0, [pc, #124]	; (8002ab0 <step_washing_process+0x434>)
 8002a34:	f7ff f860 	bl	8001af8 <mt_set_target_position>
							ws_state = WS_STATE_Z_TOP;
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <step_washing_process+0x424>)
 8002a3a:	2206      	movs	r2, #6
 8002a3c:	701a      	strb	r2, [r3, #0]
							break;
 8002a3e:	e00a      	b.n	8002a56 <step_washing_process+0x3da>
						case WS_STATE_Z_TOP:
						case WS_STATE_DRAIN_WS_SOLUTION:
							LOGI("wait5 done");
 8002a40:	4914      	ldr	r1, [pc, #80]	; (8002a94 <step_washing_process+0x418>)
 8002a42:	481f      	ldr	r0, [pc, #124]	; (8002ac0 <step_washing_process+0x444>)
 8002a44:	f00a ff66 	bl	800d914 <iprintf>
							ws_state = WS_STATE_Z_FINISH;
 8002a48:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <step_washing_process+0x424>)
 8002a4a:	2209      	movs	r2, #9
 8002a4c:	701a      	strb	r2, [r3, #0]
							break;
 8002a4e:	e002      	b.n	8002a56 <step_washing_process+0x3da>
						default:
							break;
					}
	            }
 8002a50:	bf00      	nop
 8002a52:	e017      	b.n	8002a84 <step_washing_process+0x408>
							break;
 8002a54:	bf00      	nop
	            break;
 8002a56:	e015      	b.n	8002a84 <step_washing_process+0x408>
	        case WS_STATE_Z_FINISH:
	        	LOGI("-------------------------------washing step done----------------------");
 8002a58:	490e      	ldr	r1, [pc, #56]	; (8002a94 <step_washing_process+0x418>)
 8002a5a:	481a      	ldr	r0, [pc, #104]	; (8002ac4 <step_washing_process+0x448>)
 8002a5c:	f00a ff5a 	bl	800d914 <iprintf>
	            ws_state = WS_STATE_IDE;
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <step_washing_process+0x424>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
	        	return 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00d      	b.n	8002a86 <step_washing_process+0x40a>
	            break;
	        default:
	            // Handle an invalid state
	            break;
 8002a6a:	bf00      	nop
 8002a6c:	e00a      	b.n	8002a84 <step_washing_process+0x408>
	            break;
 8002a6e:	bf00      	nop
 8002a70:	e008      	b.n	8002a84 <step_washing_process+0x408>
	            break;
 8002a72:	bf00      	nop
 8002a74:	e006      	b.n	8002a84 <step_washing_process+0x408>
	            break;
 8002a76:	bf00      	nop
 8002a78:	e004      	b.n	8002a84 <step_washing_process+0x408>
	            break;
 8002a7a:	bf00      	nop
 8002a7c:	e002      	b.n	8002a84 <step_washing_process+0x408>
	            break;
 8002a7e:	bf00      	nop
 8002a80:	e000      	b.n	8002a84 <step_washing_process+0x408>
	            break;
 8002a82:	bf00      	nop
	    }
	    return 0;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	bd98      	pop	{r3, r4, r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20002b2c 	.word	0x20002b2c
 8002a90:	20002b32 	.word	0x20002b32
 8002a94:	0800ed28 	.word	0x0800ed28
 8002a98:	0800f258 	.word	0x0800f258
 8002a9c:	20002b24 	.word	0x20002b24
 8002aa0:	20002b31 	.word	0x20002b31
 8002aa4:	0800f26c 	.word	0x0800f26c
 8002aa8:	2000017c 	.word	0x2000017c
 8002aac:	0800eebc 	.word	0x0800eebc
 8002ab0:	20002aec 	.word	0x20002aec
 8002ab4:	0800f290 	.word	0x0800f290
 8002ab8:	0800eed8 	.word	0x0800eed8
 8002abc:	0800f2a4 	.word	0x0800f2a4
 8002ac0:	0800f2c8 	.word	0x0800f2c8
 8002ac4:	0800f2dc 	.word	0x0800f2dc

08002ac8 <step_drying_start>:

_step_dy_state dy_state = DY_STATE_IDE;
_step_dy_state old_dy_state = DY_STATE_IDE;

int step_drying_start()
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
	if(ws_state == WS_STATE_IDE)
 8002acc:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <step_drying_start+0x54>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d120      	bne.n	8002b16 <step_drying_start+0x4e>
	{
		LOGI("--------------- drying step: %d of program : %d----------------",running_step,running_pg);
 8002ad4:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <step_drying_start+0x58>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	4b12      	ldr	r3, [pc, #72]	; (8002b24 <step_drying_start+0x5c>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	4912      	ldr	r1, [pc, #72]	; (8002b28 <step_drying_start+0x60>)
 8002ae0:	4812      	ldr	r0, [pc, #72]	; (8002b2c <step_drying_start+0x64>)
 8002ae2:	f00a ff17 	bl	800d914 <iprintf>
		drying_step = (_def_drying_step *)&system_data.flash_data.Program_para[running_pg][running_step];
 8002ae6:	4b0f      	ldr	r3, [pc, #60]	; (8002b24 <step_drying_start+0x5c>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <step_drying_start+0x58>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	4619      	mov	r1, r3
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	009a      	lsls	r2, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	440b      	add	r3, r1
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	3328      	adds	r3, #40	; 0x28
 8002b02:	4a0b      	ldr	r2, [pc, #44]	; (8002b30 <step_drying_start+0x68>)
 8002b04:	4413      	add	r3, r2
 8002b06:	3304      	adds	r3, #4
 8002b08:	4a0a      	ldr	r2, [pc, #40]	; (8002b34 <step_drying_start+0x6c>)
 8002b0a:	6013      	str	r3, [r2, #0]
		dy_state = DY_STATE_START;
 8002b0c:	4b0a      	ldr	r3, [pc, #40]	; (8002b38 <step_drying_start+0x70>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	701a      	strb	r2, [r3, #0]
		return 1;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <step_drying_start+0x50>
	}
	return 0;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20002b31 	.word	0x20002b31
 8002b20:	20002b29 	.word	0x20002b29
 8002b24:	20002b28 	.word	0x20002b28
 8002b28:	0800ed28 	.word	0x0800ed28
 8002b2c:	0800f32c 	.word	0x0800f32c
 8002b30:	2000017c 	.word	0x2000017c
 8002b34:	20002b20 	.word	0x20002b20
 8002b38:	20002b33 	.word	0x20002b33

08002b3c <heater_on>:
void heater_on()
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	LOG3("%u heater_on",HAL_GetTick());
 8002b40:	bf00      	nop
	HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, HEATER_ON_LEVEL);
 8002b42:	2201      	movs	r2, #1
 8002b44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b48:	4802      	ldr	r0, [pc, #8]	; (8002b54 <heater_on+0x18>)
 8002b4a:	f002 f91f 	bl	8004d8c <HAL_GPIO_WritePin>
}
 8002b4e:	bf00      	nop
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40020c00 	.word	0x40020c00

08002b58 <heater_off>:
void heater_off()
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
	LOG3("%u heater_off",HAL_GetTick());
 8002b5c:	bf00      	nop
	HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, HEATER_OFF_LEVEL);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b64:	4802      	ldr	r0, [pc, #8]	; (8002b70 <heater_off+0x18>)
 8002b66:	f002 f911 	bl	8004d8c <HAL_GPIO_WritePin>
}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40020c00 	.word	0x40020c00

08002b74 <show_infor_drying_step>:
void show_infor_drying_step(_def_drying_step dr_step)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b085      	sub	sp, #20
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	463c      	mov	r4, r7
 8002b7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOGI("---------------INFOR_DRYING_STEP------------");
 8002b80:	4913      	ldr	r1, [pc, #76]	; (8002bd0 <show_infor_drying_step+0x5c>)
 8002b82:	4814      	ldr	r0, [pc, #80]	; (8002bd4 <show_infor_drying_step+0x60>)
 8002b84:	f00a fec6 	bl	800d914 <iprintf>
	LOGI("1:Move to Wells: %d",dr_step.wells);
 8002b88:	787b      	ldrb	r3, [r7, #1]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4910      	ldr	r1, [pc, #64]	; (8002bd0 <show_infor_drying_step+0x5c>)
 8002b8e:	4812      	ldr	r0, [pc, #72]	; (8002bd8 <show_infor_drying_step+0x64>)
 8002b90:	f00a fec0 	bl	800d914 <iprintf>
	LOGI("2:hearter on : %d",dr_step.heater_on);
 8002b94:	887b      	ldrh	r3, [r7, #2]
 8002b96:	461a      	mov	r2, r3
 8002b98:	490d      	ldr	r1, [pc, #52]	; (8002bd0 <show_infor_drying_step+0x5c>)
 8002b9a:	4810      	ldr	r0, [pc, #64]	; (8002bdc <show_infor_drying_step+0x68>)
 8002b9c:	f00a feba 	bl	800d914 <iprintf>
	LOGI("3:move z to bottom");
 8002ba0:	490b      	ldr	r1, [pc, #44]	; (8002bd0 <show_infor_drying_step+0x5c>)
 8002ba2:	480f      	ldr	r0, [pc, #60]	; (8002be0 <show_infor_drying_step+0x6c>)
 8002ba4:	f00a feb6 	bl	800d914 <iprintf>
	LOGI("4:wait1 : %ds",dr_step.wait1);
 8002ba8:	88bb      	ldrh	r3, [r7, #4]
 8002baa:	461a      	mov	r2, r3
 8002bac:	4908      	ldr	r1, [pc, #32]	; (8002bd0 <show_infor_drying_step+0x5c>)
 8002bae:	480d      	ldr	r0, [pc, #52]	; (8002be4 <show_infor_drying_step+0x70>)
 8002bb0:	f00a feb0 	bl	800d914 <iprintf>
	LOGI("5:hearter off : %d",dr_step.heater_off);
 8002bb4:	88fb      	ldrh	r3, [r7, #6]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	4905      	ldr	r1, [pc, #20]	; (8002bd0 <show_infor_drying_step+0x5c>)
 8002bba:	480b      	ldr	r0, [pc, #44]	; (8002be8 <show_infor_drying_step+0x74>)
 8002bbc:	f00a feaa 	bl	800d914 <iprintf>
	LOGI("------------------------------------------");
 8002bc0:	4903      	ldr	r1, [pc, #12]	; (8002bd0 <show_infor_drying_step+0x5c>)
 8002bc2:	480a      	ldr	r0, [pc, #40]	; (8002bec <show_infor_drying_step+0x78>)
 8002bc4:	f00a fea6 	bl	800d914 <iprintf>
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd90      	pop	{r4, r7, pc}
 8002bd0:	0800ed28 	.word	0x0800ed28
 8002bd4:	0800f374 	.word	0x0800f374
 8002bd8:	0800ed88 	.word	0x0800ed88
 8002bdc:	0800f3a8 	.word	0x0800f3a8
 8002be0:	0800edbc 	.word	0x0800edbc
 8002be4:	0800f3c4 	.word	0x0800f3c4
 8002be8:	0800f3dc 	.word	0x0800f3dc
 8002bec:	0800ee50 	.word	0x0800ee50

08002bf0 <step_drying_process>:
int step_drying_process(void)
{
 8002bf0:	b598      	push	{r3, r4, r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	switch (dy_state) {
 8002bf4:	4b80      	ldr	r3, [pc, #512]	; (8002df8 <step_drying_process+0x208>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b08      	cmp	r3, #8
 8002bfa:	f200 80f3 	bhi.w	8002de4 <step_drying_process+0x1f4>
 8002bfe:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <step_drying_process+0x14>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002de5 	.word	0x08002de5
 8002c08:	08002c29 	.word	0x08002c29
 8002c0c:	08002c83 	.word	0x08002c83
 8002c10:	08002cc1 	.word	0x08002cc1
 8002c14:	08002d25 	.word	0x08002d25
 8002c18:	08002d65 	.word	0x08002d65
 8002c1c:	08002d99 	.word	0x08002d99
 8002c20:	08002d81 	.word	0x08002d81
 8002c24:	08002de1 	.word	0x08002de1
	    case DY_STATE_IDE:
	        break;
	    case DY_STATE_START:
        	show_infor_drying_step(*drying_step);
 8002c28:	4b74      	ldr	r3, [pc, #464]	; (8002dfc <step_drying_process+0x20c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4610      	mov	r0, r2
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4611      	mov	r1, r2
 8002c34:	689c      	ldr	r4, [r3, #8]
 8002c36:	4622      	mov	r2, r4
 8002c38:	68dc      	ldr	r4, [r3, #12]
 8002c3a:	4623      	mov	r3, r4
 8002c3c:	f7ff ff9a 	bl	8002b74 <show_infor_drying_step>
            LOGI("move x to %lu",system_data.flash_data.Well_position[drying_step->wells-1]);
 8002c40:	4b6e      	ldr	r3, [pc, #440]	; (8002dfc <step_drying_process+0x20c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	785b      	ldrb	r3, [r3, #1]
 8002c46:	3b01      	subs	r3, #1
 8002c48:	4a6d      	ldr	r2, [pc, #436]	; (8002e00 <step_drying_process+0x210>)
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	4413      	add	r3, r2
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	461a      	mov	r2, r3
 8002c52:	496c      	ldr	r1, [pc, #432]	; (8002e04 <step_drying_process+0x214>)
 8002c54:	486c      	ldr	r0, [pc, #432]	; (8002e08 <step_drying_process+0x218>)
 8002c56:	f00a fe5d 	bl	800d914 <iprintf>
        	mt_set_target_position(&x_motor, system_data.flash_data.Well_position[drying_step->wells-1]); // m
 8002c5a:	4b68      	ldr	r3, [pc, #416]	; (8002dfc <step_drying_process+0x20c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	785b      	ldrb	r3, [r3, #1]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	4a67      	ldr	r2, [pc, #412]	; (8002e00 <step_drying_process+0x210>)
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4867      	ldr	r0, [pc, #412]	; (8002e0c <step_drying_process+0x21c>)
 8002c6e:	f7fe ff43 	bl	8001af8 <mt_set_target_position>
        	old_dy_state = dy_state;
 8002c72:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <step_drying_process+0x208>)
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <step_drying_process+0x220>)
 8002c78:	701a      	strb	r2, [r3, #0]
        	dy_state = DY_STATE_MOVE_WELLS; // Example transition to next state
 8002c7a:	4b5f      	ldr	r3, [pc, #380]	; (8002df8 <step_drying_process+0x208>)
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	701a      	strb	r2, [r3, #0]
            break;
 8002c80:	e0b7      	b.n	8002df2 <step_drying_process+0x202>
	    case DY_STATE_MOVE_WELLS:
        	if(Mt_get_current_prosition(x_motor) == system_data.flash_data.Well_position[drying_step->wells-1])
 8002c82:	4b62      	ldr	r3, [pc, #392]	; (8002e0c <step_drying_process+0x21c>)
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	4b5d      	ldr	r3, [pc, #372]	; (8002dfc <step_drying_process+0x20c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	785b      	ldrb	r3, [r3, #1]
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	495c      	ldr	r1, [pc, #368]	; (8002e00 <step_drying_process+0x210>)
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	f040 80a6 	bne.w	8002de8 <step_drying_process+0x1f8>
			{
				LOGI("move x done, move z to bottom");
 8002c9c:	4959      	ldr	r1, [pc, #356]	; (8002e04 <step_drying_process+0x214>)
 8002c9e:	485d      	ldr	r0, [pc, #372]	; (8002e14 <step_drying_process+0x224>)
 8002ca0:	f00a fe38 	bl	800d914 <iprintf>
				old_dy_state = dy_state;
 8002ca4:	4b54      	ldr	r3, [pc, #336]	; (8002df8 <step_drying_process+0x208>)
 8002ca6:	781a      	ldrb	r2, [r3, #0]
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <step_drying_process+0x220>)
 8002caa:	701a      	strb	r2, [r3, #0]
				mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 8002cac:	4b54      	ldr	r3, [pc, #336]	; (8002e00 <step_drying_process+0x210>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4859      	ldr	r0, [pc, #356]	; (8002e18 <step_drying_process+0x228>)
 8002cb4:	f7fe ff20 	bl	8001af8 <mt_set_target_position>
				dy_state = DY_STATE_Z_BOTTOM;
 8002cb8:	4b4f      	ldr	r3, [pc, #316]	; (8002df8 <step_drying_process+0x208>)
 8002cba:	2203      	movs	r2, #3
 8002cbc:	701a      	strb	r2, [r3, #0]
			}
	        break;
 8002cbe:	e093      	b.n	8002de8 <step_drying_process+0x1f8>
	    case DY_STATE_Z_BOTTOM:
	    	if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8002cc0:	4b55      	ldr	r3, [pc, #340]	; (8002e18 <step_drying_process+0x228>)
 8002cc2:	689a      	ldr	r2, [r3, #8]
 8002cc4:	4b4e      	ldr	r3, [pc, #312]	; (8002e00 <step_drying_process+0x210>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	f040 808f 	bne.w	8002dec <step_drying_process+0x1fc>
			{
				LOGI("move z done");
 8002cce:	494d      	ldr	r1, [pc, #308]	; (8002e04 <step_drying_process+0x214>)
 8002cd0:	4852      	ldr	r0, [pc, #328]	; (8002e1c <step_drying_process+0x22c>)
 8002cd2:	f00a fe1f 	bl	800d914 <iprintf>
				old_dy_state = dy_state;
 8002cd6:	4b48      	ldr	r3, [pc, #288]	; (8002df8 <step_drying_process+0x208>)
 8002cd8:	781a      	ldrb	r2, [r3, #0]
 8002cda:	4b4d      	ldr	r3, [pc, #308]	; (8002e10 <step_drying_process+0x220>)
 8002cdc:	701a      	strb	r2, [r3, #0]

				if(drying_step->heater_on)
 8002cde:	4b47      	ldr	r3, [pc, #284]	; (8002dfc <step_drying_process+0x20c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	885b      	ldrh	r3, [r3, #2]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <step_drying_process+0x100>
				{
					dy_state = DY_HEATER_ON; // Example transition to next state
 8002ce8:	4b43      	ldr	r3, [pc, #268]	; (8002df8 <step_drying_process+0x208>)
 8002cea:	2204      	movs	r2, #4
 8002cec:	701a      	strb	r2, [r3, #0]
					LOGI("skip heater on, wait : %ds",drying_step->wait1);
			    	t_time = HAL_GetTick() +  (uint32_t)drying_step->wait1 * 1000;
			    	dy_state = DY_STATE_WAIT; // Example transition to next state
				}
			}
			break;
 8002cee:	e07d      	b.n	8002dec <step_drying_process+0x1fc>
					LOGI("skip heater on, wait : %ds",drying_step->wait1);
 8002cf0:	4b42      	ldr	r3, [pc, #264]	; (8002dfc <step_drying_process+0x20c>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	889b      	ldrh	r3, [r3, #4]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	4942      	ldr	r1, [pc, #264]	; (8002e04 <step_drying_process+0x214>)
 8002cfa:	4849      	ldr	r0, [pc, #292]	; (8002e20 <step_drying_process+0x230>)
 8002cfc:	f00a fe0a 	bl	800d914 <iprintf>
			    	t_time = HAL_GetTick() +  (uint32_t)drying_step->wait1 * 1000;
 8002d00:	f000 ff4e 	bl	8003ba0 <HAL_GetTick>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <step_drying_process+0x20c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	889b      	ldrh	r3, [r3, #4]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d12:	fb01 f303 	mul.w	r3, r1, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	4a42      	ldr	r2, [pc, #264]	; (8002e24 <step_drying_process+0x234>)
 8002d1a:	6013      	str	r3, [r2, #0]
			    	dy_state = DY_STATE_WAIT; // Example transition to next state
 8002d1c:	4b36      	ldr	r3, [pc, #216]	; (8002df8 <step_drying_process+0x208>)
 8002d1e:	2206      	movs	r2, #6
 8002d20:	701a      	strb	r2, [r3, #0]
			break;
 8002d22:	e063      	b.n	8002dec <step_drying_process+0x1fc>
	    case DY_HEATER_ON:
	    	heater_on();
 8002d24:	f7ff ff0a 	bl	8002b3c <heater_on>
	    	LOGI("heater on, wait : %ds",drying_step->wait1);
 8002d28:	4b34      	ldr	r3, [pc, #208]	; (8002dfc <step_drying_process+0x20c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	889b      	ldrh	r3, [r3, #4]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4934      	ldr	r1, [pc, #208]	; (8002e04 <step_drying_process+0x214>)
 8002d32:	483d      	ldr	r0, [pc, #244]	; (8002e28 <step_drying_process+0x238>)
 8002d34:	f00a fdee 	bl	800d914 <iprintf>
	    	old_dy_state = dy_state;
 8002d38:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <step_drying_process+0x208>)
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	4b34      	ldr	r3, [pc, #208]	; (8002e10 <step_drying_process+0x220>)
 8002d3e:	701a      	strb	r2, [r3, #0]
	    	t_time = HAL_GetTick() +  (uint32_t)drying_step->wait1 * 1000;
 8002d40:	f000 ff2e 	bl	8003ba0 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	4b2d      	ldr	r3, [pc, #180]	; (8002dfc <step_drying_process+0x20c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	889b      	ldrh	r3, [r3, #4]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d52:	fb01 f303 	mul.w	r3, r1, r3
 8002d56:	4413      	add	r3, r2
 8002d58:	4a32      	ldr	r2, [pc, #200]	; (8002e24 <step_drying_process+0x234>)
 8002d5a:	6013      	str	r3, [r2, #0]
	    	dy_state = DY_STATE_WAIT; // Example transition to next state
 8002d5c:	4b26      	ldr	r3, [pc, #152]	; (8002df8 <step_drying_process+0x208>)
 8002d5e:	2206      	movs	r2, #6
 8002d60:	701a      	strb	r2, [r3, #0]
	        break;
 8002d62:	e046      	b.n	8002df2 <step_drying_process+0x202>
	    case DY_HEATER_OFF:

	    	LOGI("heater off");
 8002d64:	4927      	ldr	r1, [pc, #156]	; (8002e04 <step_drying_process+0x214>)
 8002d66:	4831      	ldr	r0, [pc, #196]	; (8002e2c <step_drying_process+0x23c>)
 8002d68:	f00a fdd4 	bl	800d914 <iprintf>
	    	heater_off();
 8002d6c:	f7ff fef4 	bl	8002b58 <heater_off>
	    	mt_set_target_position(&z_motor,0);
 8002d70:	2100      	movs	r1, #0
 8002d72:	4829      	ldr	r0, [pc, #164]	; (8002e18 <step_drying_process+0x228>)
 8002d74:	f7fe fec0 	bl	8001af8 <mt_set_target_position>
	    	dy_state = DY_STATE_Z_TOP;
 8002d78:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <step_drying_process+0x208>)
 8002d7a:	2207      	movs	r2, #7
 8002d7c:	701a      	strb	r2, [r3, #0]
	        break;
 8002d7e:	e038      	b.n	8002df2 <step_drying_process+0x202>
	    case DY_STATE_Z_TOP:
        	if(Mt_get_current_prosition(z_motor) == 0){
 8002d80:	4b25      	ldr	r3, [pc, #148]	; (8002e18 <step_drying_process+0x228>)
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d133      	bne.n	8002df0 <step_drying_process+0x200>
        		LOGI("ztop done");
 8002d88:	491e      	ldr	r1, [pc, #120]	; (8002e04 <step_drying_process+0x214>)
 8002d8a:	4829      	ldr	r0, [pc, #164]	; (8002e30 <step_drying_process+0x240>)
 8002d8c:	f00a fdc2 	bl	800d914 <iprintf>
        		dy_state = DY_STATE_Z_FINISH;
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <step_drying_process+0x208>)
 8002d92:	2208      	movs	r2, #8
 8002d94:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d96:	e02b      	b.n	8002df0 <step_drying_process+0x200>
	    case DY_STATE_WAIT:
	        // code to execute when the state is DY_STATE_WAIT
	    	if(HAL_GetTick() > t_time)
 8002d98:	f000 ff02 	bl	8003ba0 <HAL_GetTick>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b21      	ldr	r3, [pc, #132]	; (8002e24 <step_drying_process+0x234>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d918      	bls.n	8002dd8 <step_drying_process+0x1e8>
			{
				switch (old_dy_state) {
 8002da6:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <step_drying_process+0x220>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d116      	bne.n	8002ddc <step_drying_process+0x1ec>
					case DY_HEATER_ON:
						if(drying_step->heater_off) {
 8002dae:	4b13      	ldr	r3, [pc, #76]	; (8002dfc <step_drying_process+0x20c>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	88db      	ldrh	r3, [r3, #6]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <step_drying_process+0x1d0>
							dy_state = DY_HEATER_OFF; // Example transition to next state
 8002db8:	4b0f      	ldr	r3, [pc, #60]	; (8002df8 <step_drying_process+0x208>)
 8002dba:	2205      	movs	r2, #5
 8002dbc:	701a      	strb	r2, [r3, #0]
							LOGI("skip heater off");
							mt_set_target_position(&z_motor,0);
							dy_state = DY_STATE_Z_TOP;
							break;
						}
						break;
 8002dbe:	e00e      	b.n	8002dde <step_drying_process+0x1ee>
							LOGI("skip heater off");
 8002dc0:	4910      	ldr	r1, [pc, #64]	; (8002e04 <step_drying_process+0x214>)
 8002dc2:	481c      	ldr	r0, [pc, #112]	; (8002e34 <step_drying_process+0x244>)
 8002dc4:	f00a fda6 	bl	800d914 <iprintf>
							mt_set_target_position(&z_motor,0);
 8002dc8:	2100      	movs	r1, #0
 8002dca:	4813      	ldr	r0, [pc, #76]	; (8002e18 <step_drying_process+0x228>)
 8002dcc:	f7fe fe94 	bl	8001af8 <mt_set_target_position>
							dy_state = DY_STATE_Z_TOP;
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <step_drying_process+0x208>)
 8002dd2:	2207      	movs	r2, #7
 8002dd4:	701a      	strb	r2, [r3, #0]
							break;
 8002dd6:	e002      	b.n	8002dde <step_drying_process+0x1ee>
				    default:
				        break;
				}
			}
 8002dd8:	bf00      	nop
 8002dda:	e00a      	b.n	8002df2 <step_drying_process+0x202>
				        break;
 8002ddc:	bf00      	nop
	        break;
 8002dde:	e008      	b.n	8002df2 <step_drying_process+0x202>
	    case DY_STATE_Z_FINISH:
	    	return 1;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e007      	b.n	8002df4 <step_drying_process+0x204>
	        old_dy_state = DY_STATE_Z_FINISH;
	        break;
	    default:
	        break;
 8002de4:	bf00      	nop
 8002de6:	e004      	b.n	8002df2 <step_drying_process+0x202>
	        break;
 8002de8:	bf00      	nop
 8002dea:	e002      	b.n	8002df2 <step_drying_process+0x202>
			break;
 8002dec:	bf00      	nop
 8002dee:	e000      	b.n	8002df2 <step_drying_process+0x202>
			break;
 8002df0:	bf00      	nop
	}
	return 0;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	bd98      	pop	{r3, r4, r7, pc}
 8002df8:	20002b33 	.word	0x20002b33
 8002dfc:	20002b20 	.word	0x20002b20
 8002e00:	2000017c 	.word	0x2000017c
 8002e04:	0800ed28 	.word	0x0800ed28
 8002e08:	0800ee84 	.word	0x0800ee84
 8002e0c:	20002abc 	.word	0x20002abc
 8002e10:	20002b34 	.word	0x20002b34
 8002e14:	0800f3f8 	.word	0x0800f3f8
 8002e18:	20002aec 	.word	0x20002aec
 8002e1c:	0800f420 	.word	0x0800f420
 8002e20:	0800f434 	.word	0x0800f434
 8002e24:	20002b2c 	.word	0x20002b2c
 8002e28:	0800f458 	.word	0x0800f458
 8002e2c:	0800f478 	.word	0x0800f478
 8002e30:	0800f48c 	.word	0x0800f48c
 8002e34:	0800f4a0 	.word	0x0800f4a0

08002e38 <pg_start>:

_program_state pgstate = PG_STATE_IDLE;


int pg_start(uint8_t pg,uint8_t stepindex)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	460a      	mov	r2, r1
 8002e42:	71fb      	strb	r3, [r7, #7]
 8002e44:	4613      	mov	r3, r2
 8002e46:	71bb      	strb	r3, [r7, #6]
	if(pgstate == PG_STATE_IDLE)
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <pg_start+0x44>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d110      	bne.n	8002e72 <pg_start+0x3a>
	{
		LOGI("start step: %d of program : %d",stepindex,pg);
 8002e50:	79ba      	ldrb	r2, [r7, #6]
 8002e52:	79fb      	ldrb	r3, [r7, #7]
 8002e54:	490a      	ldr	r1, [pc, #40]	; (8002e80 <pg_start+0x48>)
 8002e56:	480b      	ldr	r0, [pc, #44]	; (8002e84 <pg_start+0x4c>)
 8002e58:	f00a fd5c 	bl	800d914 <iprintf>
		running_pg = pg;
 8002e5c:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <pg_start+0x50>)
 8002e5e:	79fb      	ldrb	r3, [r7, #7]
 8002e60:	7013      	strb	r3, [r2, #0]
		running_step = stepindex;
 8002e62:	4a0a      	ldr	r2, [pc, #40]	; (8002e8c <pg_start+0x54>)
 8002e64:	79bb      	ldrb	r3, [r7, #6]
 8002e66:	7013      	strb	r3, [r2, #0]
		pgstate = PG_STATE_START;
 8002e68:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <pg_start+0x44>)
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
		return 1;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e000      	b.n	8002e74 <pg_start+0x3c>
	}
	return 0;
 8002e72:	2300      	movs	r3, #0
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3708      	adds	r7, #8
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	20002b35 	.word	0x20002b35
 8002e80:	0800ed28 	.word	0x0800ed28
 8002e84:	0800ed2c 	.word	0x0800ed2c
 8002e88:	20002b28 	.word	0x20002b28
 8002e8c:	20002b29 	.word	0x20002b29

08002e90 <pg_stop>:
int pg_stop(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
	pgstate = PG_STATE_STOP;
 8002e94:	4b04      	ldr	r3, [pc, #16]	; (8002ea8 <pg_stop+0x18>)
 8002e96:	2203      	movs	r2, #3
 8002e98:	701a      	strb	r2, [r3, #0]
	return 1;
 8002e9a:	2301      	movs	r3, #1
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20002b35 	.word	0x20002b35

08002eac <start_step>:
_step_type start_step(){
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
	Dwin_switch_running_page(running_pg,running_step);
 8002eb0:	4b31      	ldr	r3, [pc, #196]	; (8002f78 <start_step+0xcc>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	4a31      	ldr	r2, [pc, #196]	; (8002f7c <start_step+0xd0>)
 8002eb6:	7812      	ldrb	r2, [r2, #0]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7fd fce0 	bl	8000880 <Dwin_switch_running_page>
	switch (system_data.flash_data.Program_para[running_pg][running_step].type) {
 8002ec0:	4b2d      	ldr	r3, [pc, #180]	; (8002f78 <start_step+0xcc>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	4b2d      	ldr	r3, [pc, #180]	; (8002f7c <start_step+0xd0>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	492c      	ldr	r1, [pc, #176]	; (8002f80 <start_step+0xd4>)
 8002ece:	4613      	mov	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	009a      	lsls	r2, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	4403      	add	r3, r0
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	440b      	add	r3, r1
 8002ede:	332c      	adds	r3, #44	; 0x2c
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d830      	bhi.n	8002f48 <start_step+0x9c>
 8002ee6:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <start_step+0x40>)
 8002ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eec:	08002efd 	.word	0x08002efd
 8002ef0:	08002f0d 	.word	0x08002f0d
 8002ef4:	08002f21 	.word	0x08002f21
 8002ef8:	08002f35 	.word	0x08002f35
		case STEP_TYPE_NONE:
			LOGI("step :%d  isn't active",running_step);
 8002efc:	4b1f      	ldr	r3, [pc, #124]	; (8002f7c <start_step+0xd0>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4920      	ldr	r1, [pc, #128]	; (8002f84 <start_step+0xd8>)
 8002f04:	4820      	ldr	r0, [pc, #128]	; (8002f88 <start_step+0xdc>)
 8002f06:	f00a fd05 	bl	800d914 <iprintf>
			break;
 8002f0a:	e022      	b.n	8002f52 <start_step+0xa6>
		case STEP_TYPE_SHAKE:
			LOGI("Shaking step (%d)  is currently active",running_step);
 8002f0c:	4b1b      	ldr	r3, [pc, #108]	; (8002f7c <start_step+0xd0>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	491c      	ldr	r1, [pc, #112]	; (8002f84 <start_step+0xd8>)
 8002f14:	481d      	ldr	r0, [pc, #116]	; (8002f8c <start_step+0xe0>)
 8002f16:	f00a fcfd 	bl	800d914 <iprintf>
			step_shake_start();
 8002f1a:	f7ff f885 	bl	8002028 <step_shake_start>
			break;
 8002f1e:	e018      	b.n	8002f52 <start_step+0xa6>
		case STEP_TYPE_WASHING:
			LOGI("Washing step (%d)  is currently active",running_step);
 8002f20:	4b16      	ldr	r3, [pc, #88]	; (8002f7c <start_step+0xd0>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4917      	ldr	r1, [pc, #92]	; (8002f84 <start_step+0xd8>)
 8002f28:	4819      	ldr	r0, [pc, #100]	; (8002f90 <start_step+0xe4>)
 8002f2a:	f00a fcf3 	bl	800d914 <iprintf>
			step_washing_start();
 8002f2e:	f7ff fb13 	bl	8002558 <step_washing_start>
			break;
 8002f32:	e00e      	b.n	8002f52 <start_step+0xa6>
		case STEP_TYPE_DRYING:
			LOGI("Drying step (%d) is currently active",running_step);
 8002f34:	4b11      	ldr	r3, [pc, #68]	; (8002f7c <start_step+0xd0>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4912      	ldr	r1, [pc, #72]	; (8002f84 <start_step+0xd8>)
 8002f3c:	4815      	ldr	r0, [pc, #84]	; (8002f94 <start_step+0xe8>)
 8002f3e:	f00a fce9 	bl	800d914 <iprintf>
			step_drying_start();
 8002f42:	f7ff fdc1 	bl	8002ac8 <step_drying_start>
			break;
 8002f46:	e004      	b.n	8002f52 <start_step+0xa6>
		default:
			LOGI("Unknown step type");
 8002f48:	490e      	ldr	r1, [pc, #56]	; (8002f84 <start_step+0xd8>)
 8002f4a:	4813      	ldr	r0, [pc, #76]	; (8002f98 <start_step+0xec>)
 8002f4c:	f00a fce2 	bl	800d914 <iprintf>
			// Code to handle unknown step type
			break;
 8002f50:	bf00      	nop
	}
	return system_data.flash_data.Program_para[running_pg][running_step].type;
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <start_step+0xcc>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <start_step+0xd0>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	4908      	ldr	r1, [pc, #32]	; (8002f80 <start_step+0xd4>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	009a      	lsls	r2, r3, #2
 8002f68:	4413      	add	r3, r2
 8002f6a:	4403      	add	r3, r0
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	440b      	add	r3, r1
 8002f70:	332c      	adds	r3, #44	; 0x2c
 8002f72:	781b      	ldrb	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20002b28 	.word	0x20002b28
 8002f7c:	20002b29 	.word	0x20002b29
 8002f80:	2000017c 	.word	0x2000017c
 8002f84:	0800ed28 	.word	0x0800ed28
 8002f88:	0800f4b8 	.word	0x0800f4b8
 8002f8c:	0800f4d8 	.word	0x0800f4d8
 8002f90:	0800f508 	.word	0x0800f508
 8002f94:	0800f538 	.word	0x0800f538
 8002f98:	0800f564 	.word	0x0800f564

08002f9c <pg_process_loop>:

void pg_process_loop(void) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
	switch (pgstate) {
 8002fa0:	4b53      	ldr	r3, [pc, #332]	; (80030f0 <pg_process_loop+0x154>)
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	f200 80a0 	bhi.w	80030ea <pg_process_loop+0x14e>
 8002faa:	a201      	add	r2, pc, #4	; (adr r2, 8002fb0 <pg_process_loop+0x14>)
 8002fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fb0:	080030eb 	.word	0x080030eb
 8002fb4:	08002fc5 	.word	0x08002fc5
 8002fb8:	08002ff5 	.word	0x08002ff5
 8002fbc:	080030b7 	.word	0x080030b7
 8002fc0:	080030cf 	.word	0x080030cf
		case PG_STATE_IDLE:
//			printf("Program is idle\n");
			// Code to handle the idle state
			break;
		case PG_STATE_START:
			if(running_step == MAX_STEP_NUM){
 8002fc4:	4b4b      	ldr	r3, [pc, #300]	; (80030f4 <pg_process_loop+0x158>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b19      	cmp	r3, #25
 8002fca:	d103      	bne.n	8002fd4 <pg_process_loop+0x38>
				pgstate= PG_STATE_END;
 8002fcc:	4b48      	ldr	r3, [pc, #288]	; (80030f0 <pg_process_loop+0x154>)
 8002fce:	2204      	movs	r2, #4
 8002fd0:	701a      	strb	r2, [r3, #0]
				break;
 8002fd2:	e08b      	b.n	80030ec <pg_process_loop+0x150>
			}
			if(start_step()!= STEP_TYPE_NONE) {
 8002fd4:	f7ff ff6a 	bl	8002eac <start_step>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <pg_process_loop+0x4a>
				pgstate= PG_STATE_RUNNING;
 8002fde:	4b44      	ldr	r3, [pc, #272]	; (80030f0 <pg_process_loop+0x154>)
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	701a      	strb	r2, [r3, #0]
			}
			else {
				running_step++;
			}
			// Code to handle the start state
			break;
 8002fe4:	e082      	b.n	80030ec <pg_process_loop+0x150>
				running_step++;
 8002fe6:	4b43      	ldr	r3, [pc, #268]	; (80030f4 <pg_process_loop+0x158>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	3301      	adds	r3, #1
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	4b41      	ldr	r3, [pc, #260]	; (80030f4 <pg_process_loop+0x158>)
 8002ff0:	701a      	strb	r2, [r3, #0]
			break;
 8002ff2:	e07b      	b.n	80030ec <pg_process_loop+0x150>
		case PG_STATE_RUNNING:
			switch (system_data.flash_data.Program_para[running_pg][running_step].type) {
 8002ff4:	4b40      	ldr	r3, [pc, #256]	; (80030f8 <pg_process_loop+0x15c>)
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4b3e      	ldr	r3, [pc, #248]	; (80030f4 <pg_process_loop+0x158>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	493e      	ldr	r1, [pc, #248]	; (80030fc <pg_process_loop+0x160>)
 8003002:	4613      	mov	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	4413      	add	r3, r2
 8003008:	009a      	lsls	r2, r3, #2
 800300a:	4413      	add	r3, r2
 800300c:	4403      	add	r3, r0
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	440b      	add	r3, r1
 8003012:	332c      	adds	r3, #44	; 0x2c
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b03      	cmp	r3, #3
 8003018:	d032      	beq.n	8003080 <pg_process_loop+0xe4>
 800301a:	2b03      	cmp	r3, #3
 800301c:	dc40      	bgt.n	80030a0 <pg_process_loop+0x104>
 800301e:	2b01      	cmp	r3, #1
 8003020:	d002      	beq.n	8003028 <pg_process_loop+0x8c>
 8003022:	2b02      	cmp	r3, #2
 8003024:	d016      	beq.n	8003054 <pg_process_loop+0xb8>
 8003026:	e03b      	b.n	80030a0 <pg_process_loop+0x104>
				case STEP_TYPE_SHAKE:
					if(step_shake_process())
 8003028:	f7ff f88a 	bl	8002140 <step_shake_process>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d03b      	beq.n	80030aa <pg_process_loop+0x10e>
					{
						LOGI("Shaking step (%d) finish",running_step);
 8003032:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <pg_process_loop+0x158>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	4931      	ldr	r1, [pc, #196]	; (8003100 <pg_process_loop+0x164>)
 800303a:	4832      	ldr	r0, [pc, #200]	; (8003104 <pg_process_loop+0x168>)
 800303c:	f00a fc6a 	bl	800d914 <iprintf>
						running_step++;
 8003040:	4b2c      	ldr	r3, [pc, #176]	; (80030f4 <pg_process_loop+0x158>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	3301      	adds	r3, #1
 8003046:	b2da      	uxtb	r2, r3
 8003048:	4b2a      	ldr	r3, [pc, #168]	; (80030f4 <pg_process_loop+0x158>)
 800304a:	701a      	strb	r2, [r3, #0]
						pgstate = PG_STATE_START;
 800304c:	4b28      	ldr	r3, [pc, #160]	; (80030f0 <pg_process_loop+0x154>)
 800304e:	2201      	movs	r2, #1
 8003050:	701a      	strb	r2, [r3, #0]
					}
					break;
 8003052:	e02a      	b.n	80030aa <pg_process_loop+0x10e>
				case STEP_TYPE_WASHING:
					if(step_washing_process())
 8003054:	f7ff fb12 	bl	800267c <step_washing_process>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d027      	beq.n	80030ae <pg_process_loop+0x112>
					{
						LOGI("washing step (%d) finish",running_step);
 800305e:	4b25      	ldr	r3, [pc, #148]	; (80030f4 <pg_process_loop+0x158>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	461a      	mov	r2, r3
 8003064:	4926      	ldr	r1, [pc, #152]	; (8003100 <pg_process_loop+0x164>)
 8003066:	4828      	ldr	r0, [pc, #160]	; (8003108 <pg_process_loop+0x16c>)
 8003068:	f00a fc54 	bl	800d914 <iprintf>
						running_step++;
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <pg_process_loop+0x158>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4b1f      	ldr	r3, [pc, #124]	; (80030f4 <pg_process_loop+0x158>)
 8003076:	701a      	strb	r2, [r3, #0]
						pgstate = PG_STATE_START;
 8003078:	4b1d      	ldr	r3, [pc, #116]	; (80030f0 <pg_process_loop+0x154>)
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800307e:	e016      	b.n	80030ae <pg_process_loop+0x112>
				case STEP_TYPE_DRYING:
					if(step_drying_process())
 8003080:	f7ff fdb6 	bl	8002bf0 <step_drying_process>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d013      	beq.n	80030b2 <pg_process_loop+0x116>
					{
						LOGI("drying step (%d) finish",running_step);
 800308a:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <pg_process_loop+0x158>)
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	491b      	ldr	r1, [pc, #108]	; (8003100 <pg_process_loop+0x164>)
 8003092:	481e      	ldr	r0, [pc, #120]	; (800310c <pg_process_loop+0x170>)
 8003094:	f00a fc3e 	bl	800d914 <iprintf>
//						running_step++;
						pgstate = PG_STATE_END;
 8003098:	4b15      	ldr	r3, [pc, #84]	; (80030f0 <pg_process_loop+0x154>)
 800309a:	2204      	movs	r2, #4
 800309c:	701a      	strb	r2, [r3, #0]
					}
					break;
 800309e:	e008      	b.n	80030b2 <pg_process_loop+0x116>
				default:
					LOGI("Unknown step type");
 80030a0:	4917      	ldr	r1, [pc, #92]	; (8003100 <pg_process_loop+0x164>)
 80030a2:	481b      	ldr	r0, [pc, #108]	; (8003110 <pg_process_loop+0x174>)
 80030a4:	f00a fc36 	bl	800d914 <iprintf>
					break;
 80030a8:	e004      	b.n	80030b4 <pg_process_loop+0x118>
					break;
 80030aa:	bf00      	nop
 80030ac:	e01e      	b.n	80030ec <pg_process_loop+0x150>
					break;
 80030ae:	bf00      	nop
 80030b0:	e01c      	b.n	80030ec <pg_process_loop+0x150>
					break;
 80030b2:	bf00      	nop
			}
			break;
 80030b4:	e01a      	b.n	80030ec <pg_process_loop+0x150>
		case PG_STATE_STOP:
			x_mt_stop();
 80030b6:	f7fe fd6b 	bl	8001b90 <x_mt_stop>
			z_mt_stop();
 80030ba:	f7fe feeb 	bl	8001e94 <z_mt_stop>
			LOGI("Program is stopping\n");
 80030be:	4910      	ldr	r1, [pc, #64]	; (8003100 <pg_process_loop+0x164>)
 80030c0:	4814      	ldr	r0, [pc, #80]	; (8003114 <pg_process_loop+0x178>)
 80030c2:	f00a fc27 	bl	800d914 <iprintf>
			pgstate = PG_STATE_END;
 80030c6:	4b0a      	ldr	r3, [pc, #40]	; (80030f0 <pg_process_loop+0x154>)
 80030c8:	2204      	movs	r2, #4
 80030ca:	701a      	strb	r2, [r3, #0]
			break;
 80030cc:	e00e      	b.n	80030ec <pg_process_loop+0x150>
		case PG_STATE_END:
//			printf("Program has ended\n");
			Dwin_switch_page(PAGE_RUNNING_END_PG);
 80030ce:	200d      	movs	r0, #13
 80030d0:	f7fd fbbf 	bl	8000852 <Dwin_switch_page>
			LOGI("Program %d has ended",running_pg);
 80030d4:	4b08      	ldr	r3, [pc, #32]	; (80030f8 <pg_process_loop+0x15c>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	4909      	ldr	r1, [pc, #36]	; (8003100 <pg_process_loop+0x164>)
 80030dc:	480e      	ldr	r0, [pc, #56]	; (8003118 <pg_process_loop+0x17c>)
 80030de:	f00a fc19 	bl	800d914 <iprintf>
			pgstate = PG_STATE_IDLE;
 80030e2:	4b03      	ldr	r3, [pc, #12]	; (80030f0 <pg_process_loop+0x154>)
 80030e4:	2200      	movs	r2, #0
 80030e6:	701a      	strb	r2, [r3, #0]
			// Code to handle the end state
			break;
 80030e8:	e000      	b.n	80030ec <pg_process_loop+0x150>
		default:
//			printf("Unknown program state\n");
			// Code to handle unknown state
			break;
 80030ea:	bf00      	nop
	}
}
 80030ec:	bf00      	nop
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	20002b35 	.word	0x20002b35
 80030f4:	20002b29 	.word	0x20002b29
 80030f8:	20002b28 	.word	0x20002b28
 80030fc:	2000017c 	.word	0x2000017c
 8003100:	0800ed28 	.word	0x0800ed28
 8003104:	0800f580 	.word	0x0800f580
 8003108:	0800f5a0 	.word	0x0800f5a0
 800310c:	0800f5c0 	.word	0x0800f5c0
 8003110:	0800f564 	.word	0x0800f564
 8003114:	0800f5e0 	.word	0x0800f5e0
 8003118:	0800f5fc 	.word	0x0800f5fc

0800311c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_MspInit+0x4c>)
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	4a0f      	ldr	r2, [pc, #60]	; (8003168 <HAL_MspInit+0x4c>)
 800312c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003130:	6453      	str	r3, [r2, #68]	; 0x44
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_MspInit+0x4c>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800313a:	607b      	str	r3, [r7, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	603b      	str	r3, [r7, #0]
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_MspInit+0x4c>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	4a08      	ldr	r2, [pc, #32]	; (8003168 <HAL_MspInit+0x4c>)
 8003148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800314c:	6413      	str	r3, [r2, #64]	; 0x40
 800314e:	4b06      	ldr	r3, [pc, #24]	; (8003168 <HAL_MspInit+0x4c>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800315a:	2007      	movs	r0, #7
 800315c:	f000 fe20 	bl	8003da0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40023800 	.word	0x40023800

0800316c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b08a      	sub	sp, #40	; 0x28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	2200      	movs	r2, #0
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	605a      	str	r2, [r3, #4]
 800317e:	609a      	str	r2, [r3, #8]
 8003180:	60da      	str	r2, [r3, #12]
 8003182:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a19      	ldr	r2, [pc, #100]	; (80031f0 <HAL_I2C_MspInit+0x84>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d12c      	bne.n	80031e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	4b18      	ldr	r3, [pc, #96]	; (80031f4 <HAL_I2C_MspInit+0x88>)
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <HAL_I2C_MspInit+0x88>)
 8003198:	f043 0302 	orr.w	r3, r3, #2
 800319c:	6313      	str	r3, [r2, #48]	; 0x30
 800319e:	4b15      	ldr	r3, [pc, #84]	; (80031f4 <HAL_I2C_MspInit+0x88>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80031aa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80031ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031b0:	2312      	movs	r3, #18
 80031b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031b4:	2301      	movs	r3, #1
 80031b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b8:	2300      	movs	r3, #0
 80031ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031bc:	2304      	movs	r3, #4
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c0:	f107 0314 	add.w	r3, r7, #20
 80031c4:	4619      	mov	r1, r3
 80031c6:	480c      	ldr	r0, [pc, #48]	; (80031f8 <HAL_I2C_MspInit+0x8c>)
 80031c8:	f001 fc2c 	bl	8004a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_I2C_MspInit+0x88>)
 80031d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d4:	4a07      	ldr	r2, [pc, #28]	; (80031f4 <HAL_I2C_MspInit+0x88>)
 80031d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80031da:	6413      	str	r3, [r2, #64]	; 0x40
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_I2C_MspInit+0x88>)
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031e4:	60fb      	str	r3, [r7, #12]
 80031e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80031e8:	bf00      	nop
 80031ea:	3728      	adds	r7, #40	; 0x28
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40005400 	.word	0x40005400
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40020400 	.word	0x40020400

080031fc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08a      	sub	sp, #40	; 0x28
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003204:	f107 0314 	add.w	r3, r7, #20
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	605a      	str	r2, [r3, #4]
 800320e:	609a      	str	r2, [r3, #8]
 8003210:	60da      	str	r2, [r3, #12]
 8003212:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a19      	ldr	r2, [pc, #100]	; (8003280 <HAL_SPI_MspInit+0x84>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d12b      	bne.n	8003276 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800321e:	2300      	movs	r3, #0
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	4b18      	ldr	r3, [pc, #96]	; (8003284 <HAL_SPI_MspInit+0x88>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	4a17      	ldr	r2, [pc, #92]	; (8003284 <HAL_SPI_MspInit+0x88>)
 8003228:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800322c:	6453      	str	r3, [r2, #68]	; 0x44
 800322e:	4b15      	ldr	r3, [pc, #84]	; (8003284 <HAL_SPI_MspInit+0x88>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	4b11      	ldr	r3, [pc, #68]	; (8003284 <HAL_SPI_MspInit+0x88>)
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	4a10      	ldr	r2, [pc, #64]	; (8003284 <HAL_SPI_MspInit+0x88>)
 8003244:	f043 0301 	orr.w	r3, r3, #1
 8003248:	6313      	str	r3, [r2, #48]	; 0x30
 800324a:	4b0e      	ldr	r3, [pc, #56]	; (8003284 <HAL_SPI_MspInit+0x88>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003256:	23e0      	movs	r3, #224	; 0xe0
 8003258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325a:	2302      	movs	r3, #2
 800325c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800325e:	2300      	movs	r3, #0
 8003260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003262:	2300      	movs	r3, #0
 8003264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003266:	2305      	movs	r3, #5
 8003268:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800326a:	f107 0314 	add.w	r3, r7, #20
 800326e:	4619      	mov	r1, r3
 8003270:	4805      	ldr	r0, [pc, #20]	; (8003288 <HAL_SPI_MspInit+0x8c>)
 8003272:	f001 fbd7 	bl	8004a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003276:	bf00      	nop
 8003278:	3728      	adds	r7, #40	; 0x28
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	40013000 	.word	0x40013000
 8003284:	40023800 	.word	0x40023800
 8003288:	40020000 	.word	0x40020000

0800328c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a40      	ldr	r2, [pc, #256]	; (800339c <HAL_TIM_Base_MspInit+0x110>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d13e      	bne.n	800331c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <HAL_TIM_Base_MspInit+0x114>)
 80032a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a6:	4a3e      	ldr	r2, [pc, #248]	; (80033a0 <HAL_TIM_Base_MspInit+0x114>)
 80032a8:	f043 0301 	orr.w	r3, r3, #1
 80032ac:	6453      	str	r3, [r2, #68]	; 0x44
 80032ae:	4b3c      	ldr	r3, [pc, #240]	; (80033a0 <HAL_TIM_Base_MspInit+0x114>)
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80032ba:	4b3a      	ldr	r3, [pc, #232]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 80032bc:	4a3a      	ldr	r2, [pc, #232]	; (80033a8 <HAL_TIM_Base_MspInit+0x11c>)
 80032be:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 80032c0:	4b38      	ldr	r3, [pc, #224]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 80032c2:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 80032c6:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032c8:	4b36      	ldr	r3, [pc, #216]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032ce:	4b35      	ldr	r3, [pc, #212]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80032d4:	4b33      	ldr	r3, [pc, #204]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 80032d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032da:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 80032de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80032e2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032e4:	4b2f      	ldr	r3, [pc, #188]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 80032e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80032ea:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80032ec:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80032f2:	4b2c      	ldr	r3, [pc, #176]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 80032f4:	2200      	movs	r2, #0
 80032f6:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032f8:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80032fe:	4829      	ldr	r0, [pc, #164]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 8003300:	f000 fd90 	bl	8003e24 <HAL_DMA_Init>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800330a:	f7fe fbdf 	bl	8001acc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a24      	ldr	r2, [pc, #144]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 8003312:	625a      	str	r2, [r3, #36]	; 0x24
 8003314:	4a23      	ldr	r2, [pc, #140]	; (80033a4 <HAL_TIM_Base_MspInit+0x118>)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800331a:	e03a      	b.n	8003392 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003324:	d10e      	bne.n	8003344 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	4b1d      	ldr	r3, [pc, #116]	; (80033a0 <HAL_TIM_Base_MspInit+0x114>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a1c      	ldr	r2, [pc, #112]	; (80033a0 <HAL_TIM_Base_MspInit+0x114>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
 8003336:	4b1a      	ldr	r3, [pc, #104]	; (80033a0 <HAL_TIM_Base_MspInit+0x114>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	613b      	str	r3, [r7, #16]
 8003340:	693b      	ldr	r3, [r7, #16]
}
 8003342:	e026      	b.n	8003392 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a18      	ldr	r2, [pc, #96]	; (80033ac <HAL_TIM_Base_MspInit+0x120>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d10e      	bne.n	800336c <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	4b13      	ldr	r3, [pc, #76]	; (80033a0 <HAL_TIM_Base_MspInit+0x114>)
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	4a12      	ldr	r2, [pc, #72]	; (80033a0 <HAL_TIM_Base_MspInit+0x114>)
 8003358:	f043 0302 	orr.w	r3, r3, #2
 800335c:	6413      	str	r3, [r2, #64]	; 0x40
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_TIM_Base_MspInit+0x114>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
}
 800336a:	e012      	b.n	8003392 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a0f      	ldr	r2, [pc, #60]	; (80033b0 <HAL_TIM_Base_MspInit+0x124>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d10d      	bne.n	8003392 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
 800337a:	4b09      	ldr	r3, [pc, #36]	; (80033a0 <HAL_TIM_Base_MspInit+0x114>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	4a08      	ldr	r2, [pc, #32]	; (80033a0 <HAL_TIM_Base_MspInit+0x114>)
 8003380:	f043 0308 	orr.w	r3, r3, #8
 8003384:	6413      	str	r3, [r2, #64]	; 0x40
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_TIM_Base_MspInit+0x114>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	f003 0308 	and.w	r3, r3, #8
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	40023800 	.word	0x40023800
 80033a4:	20001598 	.word	0x20001598
 80033a8:	40026428 	.word	0x40026428
 80033ac:	40000400 	.word	0x40000400
 80033b0:	40000c00 	.word	0x40000c00

080033b4 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <HAL_TIM_OnePulse_MspInit+0x3c>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10d      	bne.n	80033e2 <HAL_TIM_OnePulse_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	60fb      	str	r3, [r7, #12]
 80033ca:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <HAL_TIM_OnePulse_MspInit+0x40>)
 80033cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ce:	4a09      	ldr	r2, [pc, #36]	; (80033f4 <HAL_TIM_OnePulse_MspInit+0x40>)
 80033d0:	f043 0302 	orr.w	r3, r3, #2
 80033d4:	6453      	str	r3, [r2, #68]	; 0x44
 80033d6:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <HAL_TIM_OnePulse_MspInit+0x40>)
 80033d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80033e2:	bf00      	nop
 80033e4:	3714      	adds	r7, #20
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr
 80033ee:	bf00      	nop
 80033f0:	40010400 	.word	0x40010400
 80033f4:	40023800 	.word	0x40023800

080033f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	; 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 0314 	add.w	r3, r7, #20
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a24      	ldr	r2, [pc, #144]	; (80034a8 <HAL_TIM_MspPostInit+0xb0>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d11f      	bne.n	800345a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	613b      	str	r3, [r7, #16]
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <HAL_TIM_MspPostInit+0xb4>)
 8003420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003422:	4a22      	ldr	r2, [pc, #136]	; (80034ac <HAL_TIM_MspPostInit+0xb4>)
 8003424:	f043 0310 	orr.w	r3, r3, #16
 8003428:	6313      	str	r3, [r2, #48]	; 0x30
 800342a:	4b20      	ldr	r3, [pc, #128]	; (80034ac <HAL_TIM_MspPostInit+0xb4>)
 800342c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342e:	f003 0310 	and.w	r3, r3, #16
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003436:	f44f 7300 	mov.w	r3, #512	; 0x200
 800343a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343c:	2302      	movs	r3, #2
 800343e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003440:	2301      	movs	r3, #1
 8003442:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003444:	2303      	movs	r3, #3
 8003446:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003448:	2301      	movs	r3, #1
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	4619      	mov	r1, r3
 8003452:	4817      	ldr	r0, [pc, #92]	; (80034b0 <HAL_TIM_MspPostInit+0xb8>)
 8003454:	f001 fae6 	bl	8004a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003458:	e022      	b.n	80034a0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <HAL_TIM_MspPostInit+0xbc>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d11d      	bne.n	80034a0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003464:	2300      	movs	r3, #0
 8003466:	60fb      	str	r3, [r7, #12]
 8003468:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_TIM_MspPostInit+0xb4>)
 800346a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346c:	4a0f      	ldr	r2, [pc, #60]	; (80034ac <HAL_TIM_MspPostInit+0xb4>)
 800346e:	f043 0304 	orr.w	r3, r3, #4
 8003472:	6313      	str	r3, [r2, #48]	; 0x30
 8003474:	4b0d      	ldr	r3, [pc, #52]	; (80034ac <HAL_TIM_MspPostInit+0xb4>)
 8003476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003480:	2340      	movs	r3, #64	; 0x40
 8003482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003488:	2301      	movs	r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800348c:	2300      	movs	r3, #0
 800348e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003490:	2302      	movs	r3, #2
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	4619      	mov	r1, r3
 800349a:	4807      	ldr	r0, [pc, #28]	; (80034b8 <HAL_TIM_MspPostInit+0xc0>)
 800349c:	f001 fac2 	bl	8004a24 <HAL_GPIO_Init>
}
 80034a0:	bf00      	nop
 80034a2:	3728      	adds	r7, #40	; 0x28
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40021000 	.word	0x40021000
 80034b4:	40000400 	.word	0x40000400
 80034b8:	40020800 	.word	0x40020800

080034bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	; 0x28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	f107 0314 	add.w	r3, r7, #20
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
 80034d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a4b      	ldr	r2, [pc, #300]	; (8003608 <HAL_UART_MspInit+0x14c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	f040 8090 	bne.w	8003600 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034e0:	2300      	movs	r3, #0
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	4b49      	ldr	r3, [pc, #292]	; (800360c <HAL_UART_MspInit+0x150>)
 80034e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e8:	4a48      	ldr	r2, [pc, #288]	; (800360c <HAL_UART_MspInit+0x150>)
 80034ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ee:	6413      	str	r3, [r2, #64]	; 0x40
 80034f0:	4b46      	ldr	r3, [pc, #280]	; (800360c <HAL_UART_MspInit+0x150>)
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f8:	613b      	str	r3, [r7, #16]
 80034fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	4b42      	ldr	r3, [pc, #264]	; (800360c <HAL_UART_MspInit+0x150>)
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	4a41      	ldr	r2, [pc, #260]	; (800360c <HAL_UART_MspInit+0x150>)
 8003506:	f043 0301 	orr.w	r3, r3, #1
 800350a:	6313      	str	r3, [r2, #48]	; 0x30
 800350c:	4b3f      	ldr	r3, [pc, #252]	; (800360c <HAL_UART_MspInit+0x150>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	60fb      	str	r3, [r7, #12]
 8003516:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003518:	230c      	movs	r3, #12
 800351a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800351c:	2302      	movs	r3, #2
 800351e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003520:	2301      	movs	r3, #1
 8003522:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003524:	2303      	movs	r3, #3
 8003526:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003528:	2307      	movs	r3, #7
 800352a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800352c:	f107 0314 	add.w	r3, r7, #20
 8003530:	4619      	mov	r1, r3
 8003532:	4837      	ldr	r0, [pc, #220]	; (8003610 <HAL_UART_MspInit+0x154>)
 8003534:	f001 fa76 	bl	8004a24 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003538:	4b36      	ldr	r3, [pc, #216]	; (8003614 <HAL_UART_MspInit+0x158>)
 800353a:	4a37      	ldr	r2, [pc, #220]	; (8003618 <HAL_UART_MspInit+0x15c>)
 800353c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800353e:	4b35      	ldr	r3, [pc, #212]	; (8003614 <HAL_UART_MspInit+0x158>)
 8003540:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003544:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003546:	4b33      	ldr	r3, [pc, #204]	; (8003614 <HAL_UART_MspInit+0x158>)
 8003548:	2240      	movs	r2, #64	; 0x40
 800354a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800354c:	4b31      	ldr	r3, [pc, #196]	; (8003614 <HAL_UART_MspInit+0x158>)
 800354e:	2200      	movs	r2, #0
 8003550:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003552:	4b30      	ldr	r3, [pc, #192]	; (8003614 <HAL_UART_MspInit+0x158>)
 8003554:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003558:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800355a:	4b2e      	ldr	r3, [pc, #184]	; (8003614 <HAL_UART_MspInit+0x158>)
 800355c:	2200      	movs	r2, #0
 800355e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003560:	4b2c      	ldr	r3, [pc, #176]	; (8003614 <HAL_UART_MspInit+0x158>)
 8003562:	2200      	movs	r2, #0
 8003564:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003566:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_UART_MspInit+0x158>)
 8003568:	2200      	movs	r2, #0
 800356a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800356c:	4b29      	ldr	r3, [pc, #164]	; (8003614 <HAL_UART_MspInit+0x158>)
 800356e:	2200      	movs	r2, #0
 8003570:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003572:	4b28      	ldr	r3, [pc, #160]	; (8003614 <HAL_UART_MspInit+0x158>)
 8003574:	2200      	movs	r2, #0
 8003576:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003578:	4826      	ldr	r0, [pc, #152]	; (8003614 <HAL_UART_MspInit+0x158>)
 800357a:	f000 fc53 	bl	8003e24 <HAL_DMA_Init>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003584:	f7fe faa2 	bl	8001acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_UART_MspInit+0x158>)
 800358c:	635a      	str	r2, [r3, #52]	; 0x34
 800358e:	4a21      	ldr	r2, [pc, #132]	; (8003614 <HAL_UART_MspInit+0x158>)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003594:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_UART_MspInit+0x160>)
 8003596:	4a22      	ldr	r2, [pc, #136]	; (8003620 <HAL_UART_MspInit+0x164>)
 8003598:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800359a:	4b20      	ldr	r3, [pc, #128]	; (800361c <HAL_UART_MspInit+0x160>)
 800359c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035a0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035a2:	4b1e      	ldr	r3, [pc, #120]	; (800361c <HAL_UART_MspInit+0x160>)
 80035a4:	2200      	movs	r2, #0
 80035a6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035a8:	4b1c      	ldr	r3, [pc, #112]	; (800361c <HAL_UART_MspInit+0x160>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ae:	4b1b      	ldr	r3, [pc, #108]	; (800361c <HAL_UART_MspInit+0x160>)
 80035b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035b4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035b6:	4b19      	ldr	r3, [pc, #100]	; (800361c <HAL_UART_MspInit+0x160>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035bc:	4b17      	ldr	r3, [pc, #92]	; (800361c <HAL_UART_MspInit+0x160>)
 80035be:	2200      	movs	r2, #0
 80035c0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80035c2:	4b16      	ldr	r3, [pc, #88]	; (800361c <HAL_UART_MspInit+0x160>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <HAL_UART_MspInit+0x160>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035ce:	4b13      	ldr	r3, [pc, #76]	; (800361c <HAL_UART_MspInit+0x160>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80035d4:	4811      	ldr	r0, [pc, #68]	; (800361c <HAL_UART_MspInit+0x160>)
 80035d6:	f000 fc25 	bl	8003e24 <HAL_DMA_Init>
 80035da:	4603      	mov	r3, r0
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 80035e0:	f7fe fa74 	bl	8001acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a0d      	ldr	r2, [pc, #52]	; (800361c <HAL_UART_MspInit+0x160>)
 80035e8:	639a      	str	r2, [r3, #56]	; 0x38
 80035ea:	4a0c      	ldr	r2, [pc, #48]	; (800361c <HAL_UART_MspInit+0x160>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80035f0:	2200      	movs	r2, #0
 80035f2:	2100      	movs	r1, #0
 80035f4:	2026      	movs	r0, #38	; 0x26
 80035f6:	f000 fbde 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80035fa:	2026      	movs	r0, #38	; 0x26
 80035fc:	f000 fbf7 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003600:	bf00      	nop
 8003602:	3728      	adds	r7, #40	; 0x28
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40004400 	.word	0x40004400
 800360c:	40023800 	.word	0x40023800
 8003610:	40020000 	.word	0x40020000
 8003614:	2000163c 	.word	0x2000163c
 8003618:	400260a0 	.word	0x400260a0
 800361c:	2000169c 	.word	0x2000169c
 8003620:	40026088 	.word	0x40026088

08003624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003628:	e7fe      	b.n	8003628 <NMI_Handler+0x4>

0800362a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800362a:	b480      	push	{r7}
 800362c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800362e:	e7fe      	b.n	800362e <HardFault_Handler+0x4>

08003630 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003630:	b480      	push	{r7}
 8003632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003634:	e7fe      	b.n	8003634 <MemManage_Handler+0x4>

08003636 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003636:	b480      	push	{r7}
 8003638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800363a:	e7fe      	b.n	800363a <BusFault_Handler+0x4>

0800363c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003640:	e7fe      	b.n	8003640 <UsageFault_Handler+0x4>

08003642 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003642:	b480      	push	{r7}
 8003644:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003646:	bf00      	nop
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800365e:	b480      	push	{r7}
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003662:	bf00      	nop
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003670:	f000 fa82 	bl	8003b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}

08003678 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800367c:	4802      	ldr	r0, [pc, #8]	; (8003688 <DMA1_Stream5_IRQHandler+0x10>)
 800367e:	f000 fd69 	bl	8004154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	2000169c 	.word	0x2000169c

0800368c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003690:	4802      	ldr	r0, [pc, #8]	; (800369c <DMA1_Stream6_IRQHandler+0x10>)
 8003692:	f000 fd5f 	bl	8004154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	2000163c 	.word	0x2000163c

080036a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036a4:	4802      	ldr	r0, [pc, #8]	; (80036b0 <USART2_IRQHandler+0x10>)
 80036a6:	f004 febd 	bl	8008424 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200015f8 	.word	0x200015f8

080036b4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80036b8:	4802      	ldr	r0, [pc, #8]	; (80036c4 <DMA2_Stream1_IRQHandler+0x10>)
 80036ba:	f000 fd4b 	bl	8004154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80036be:	bf00      	nop
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	20001598 	.word	0x20001598

080036c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80036cc:	4802      	ldr	r0, [pc, #8]	; (80036d8 <OTG_FS_IRQHandler+0x10>)
 80036ce:	f001 fe0b 	bl	80052e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	200059dc 	.word	0x200059dc

080036dc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
 80036ec:	e00a      	b.n	8003704 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80036ee:	f3af 8000 	nop.w
 80036f2:	4601      	mov	r1, r0
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	1c5a      	adds	r2, r3, #1
 80036f8:	60ba      	str	r2, [r7, #8]
 80036fa:	b2ca      	uxtb	r2, r1
 80036fc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	3301      	adds	r3, #1
 8003702:	617b      	str	r3, [r7, #20]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	429a      	cmp	r2, r3
 800370a:	dbf0      	blt.n	80036ee <_read+0x12>
  }

  return len;
 800370c:	687b      	ldr	r3, [r7, #4]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003716:	b480      	push	{r7}
 8003718:	b083      	sub	sp, #12
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003722:	4618      	mov	r0, r3
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800373e:	605a      	str	r2, [r3, #4]
  return 0;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <_isatty>:

int _isatty(int file)
{
 800374e:	b480      	push	{r7}
 8003750:	b083      	sub	sp, #12
 8003752:	af00      	add	r7, sp, #0
 8003754:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003756:	2301      	movs	r3, #1
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
	...

08003780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b086      	sub	sp, #24
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003788:	4a14      	ldr	r2, [pc, #80]	; (80037dc <_sbrk+0x5c>)
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <_sbrk+0x60>)
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003794:	4b13      	ldr	r3, [pc, #76]	; (80037e4 <_sbrk+0x64>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <_sbrk+0x64>)
 800379e:	4a12      	ldr	r2, [pc, #72]	; (80037e8 <_sbrk+0x68>)
 80037a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037a2:	4b10      	ldr	r3, [pc, #64]	; (80037e4 <_sbrk+0x64>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d207      	bcs.n	80037c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037b0:	f00a f860 	bl	800d874 <__errno>
 80037b4:	4603      	mov	r3, r0
 80037b6:	220c      	movs	r2, #12
 80037b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037ba:	f04f 33ff 	mov.w	r3, #4294967295
 80037be:	e009      	b.n	80037d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80037c0:	4b08      	ldr	r3, [pc, #32]	; (80037e4 <_sbrk+0x64>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037c6:	4b07      	ldr	r3, [pc, #28]	; (80037e4 <_sbrk+0x64>)
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	4a05      	ldr	r2, [pc, #20]	; (80037e4 <_sbrk+0x64>)
 80037d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037d2:	68fb      	ldr	r3, [r7, #12]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20020000 	.word	0x20020000
 80037e0:	00008000 	.word	0x00008000
 80037e4:	20002b38 	.word	0x20002b38
 80037e8:	20006118 	.word	0x20006118

080037ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <SystemInit+0x20>)
 80037f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037f6:	4a05      	ldr	r2, [pc, #20]	; (800380c <SystemInit+0x20>)
 80037f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003800:	bf00      	nop
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	e000ed00 	.word	0xe000ed00

08003810 <HAL_UART_TxCpltCallback>:
void uart_dma_stop(void);

_uart_frame tx[10];
static uint8_t tc=0,ti=0,to=0;
uint32_t uart_tc =0,uart_itc =0;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
	uart_itc++;
 8003818:	4b1d      	ldr	r3, [pc, #116]	; (8003890 <HAL_UART_TxCpltCallback+0x80>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	4a1c      	ldr	r2, [pc, #112]	; (8003890 <HAL_UART_TxCpltCallback+0x80>)
 8003820:	6013      	str	r3, [r2, #0]
	if(tc)
 8003822:	4b1c      	ldr	r3, [pc, #112]	; (8003894 <HAL_UART_TxCpltCallback+0x84>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d02d      	beq.n	8003886 <HAL_UART_TxCpltCallback+0x76>
	{
		if(HAL_UART_Transmit_DMA(&huart2, tx[to].data, tx[to].size) == HAL_OK){
 800382a:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <HAL_UART_TxCpltCallback+0x88>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	f240 235a 	movw	r3, #602	; 0x25a
 8003834:	fb02 f303 	mul.w	r3, r2, r3
 8003838:	4a18      	ldr	r2, [pc, #96]	; (800389c <HAL_UART_TxCpltCallback+0x8c>)
 800383a:	4413      	add	r3, r2
 800383c:	1c99      	adds	r1, r3, #2
 800383e:	4b16      	ldr	r3, [pc, #88]	; (8003898 <HAL_UART_TxCpltCallback+0x88>)
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	4618      	mov	r0, r3
 8003844:	4a15      	ldr	r2, [pc, #84]	; (800389c <HAL_UART_TxCpltCallback+0x8c>)
 8003846:	f240 235a 	movw	r3, #602	; 0x25a
 800384a:	fb00 f303 	mul.w	r3, r0, r3
 800384e:	4413      	add	r3, r2
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	4812      	ldr	r0, [pc, #72]	; (80038a0 <HAL_UART_TxCpltCallback+0x90>)
 8003856:	f004 fcb7 	bl	80081c8 <HAL_UART_Transmit_DMA>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d112      	bne.n	8003886 <HAL_UART_TxCpltCallback+0x76>
				to++;
 8003860:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <HAL_UART_TxCpltCallback+0x88>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	b2da      	uxtb	r2, r3
 8003868:	4b0b      	ldr	r3, [pc, #44]	; (8003898 <HAL_UART_TxCpltCallback+0x88>)
 800386a:	701a      	strb	r2, [r3, #0]
				tc--;
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_UART_TxCpltCallback+0x84>)
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	b2da      	uxtb	r2, r3
 8003874:	4b07      	ldr	r3, [pc, #28]	; (8003894 <HAL_UART_TxCpltCallback+0x84>)
 8003876:	701a      	strb	r2, [r3, #0]
				if(to ==TX_SIZE)
 8003878:	4b07      	ldr	r3, [pc, #28]	; (8003898 <HAL_UART_TxCpltCallback+0x88>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b0a      	cmp	r3, #10
 800387e:	d102      	bne.n	8003886 <HAL_UART_TxCpltCallback+0x76>
					to = 0;
 8003880:	4b05      	ldr	r3, [pc, #20]	; (8003898 <HAL_UART_TxCpltCallback+0x88>)
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
		}
	}

}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	200044d4 	.word	0x200044d4
 8003894:	200044cc 	.word	0x200044cc
 8003898:	200044ce 	.word	0x200044ce
 800389c:	20002d48 	.word	0x20002d48
 80038a0:	200015f8 	.word	0x200015f8

080038a4 <uart_transmit>:
void uart_transmit(uint8_t *data,uint8_t size)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	70fb      	strb	r3, [r7, #3]
	uart_tc++;
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <uart_transmit+0xd8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3301      	adds	r3, #1
 80038b6:	4a31      	ldr	r2, [pc, #196]	; (800397c <uart_transmit+0xd8>)
 80038b8:	6013      	str	r3, [r2, #0]
	tx[ti].size = size;
 80038ba:	4b31      	ldr	r3, [pc, #196]	; (8003980 <uart_transmit+0xdc>)
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	b299      	uxth	r1, r3
 80038c4:	4a2f      	ldr	r2, [pc, #188]	; (8003984 <uart_transmit+0xe0>)
 80038c6:	f240 235a 	movw	r3, #602	; 0x25a
 80038ca:	fb00 f303 	mul.w	r3, r0, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	460a      	mov	r2, r1
 80038d2:	801a      	strh	r2, [r3, #0]
	memcpy(tx[ti].data,data,size);
 80038d4:	4b2a      	ldr	r3, [pc, #168]	; (8003980 <uart_transmit+0xdc>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	f240 235a 	movw	r3, #602	; 0x25a
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	4a28      	ldr	r2, [pc, #160]	; (8003984 <uart_transmit+0xe0>)
 80038e4:	4413      	add	r3, r2
 80038e6:	3302      	adds	r3, #2
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f009 fffb 	bl	800d8e8 <memcpy>
	ti++;
 80038f2:	4b23      	ldr	r3, [pc, #140]	; (8003980 <uart_transmit+0xdc>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	3301      	adds	r3, #1
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	4b21      	ldr	r3, [pc, #132]	; (8003980 <uart_transmit+0xdc>)
 80038fc:	701a      	strb	r2, [r3, #0]
	if(ti ==TX_SIZE)
 80038fe:	4b20      	ldr	r3, [pc, #128]	; (8003980 <uart_transmit+0xdc>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b0a      	cmp	r3, #10
 8003904:	d102      	bne.n	800390c <uart_transmit+0x68>
		ti = 0;
 8003906:	4b1e      	ldr	r3, [pc, #120]	; (8003980 <uart_transmit+0xdc>)
 8003908:	2200      	movs	r2, #0
 800390a:	701a      	strb	r2, [r3, #0]
	tc++;
 800390c:	4b1e      	ldr	r3, [pc, #120]	; (8003988 <uart_transmit+0xe4>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	3301      	adds	r3, #1
 8003912:	b2da      	uxtb	r2, r3
 8003914:	4b1c      	ldr	r3, [pc, #112]	; (8003988 <uart_transmit+0xe4>)
 8003916:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(&huart2, tx[to].data, tx[to].size) == HAL_OK){
 8003918:	4b1c      	ldr	r3, [pc, #112]	; (800398c <uart_transmit+0xe8>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	f240 235a 	movw	r3, #602	; 0x25a
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	4a17      	ldr	r2, [pc, #92]	; (8003984 <uart_transmit+0xe0>)
 8003928:	4413      	add	r3, r2
 800392a:	1c99      	adds	r1, r3, #2
 800392c:	4b17      	ldr	r3, [pc, #92]	; (800398c <uart_transmit+0xe8>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	4a14      	ldr	r2, [pc, #80]	; (8003984 <uart_transmit+0xe0>)
 8003934:	f240 235a 	movw	r3, #602	; 0x25a
 8003938:	fb00 f303 	mul.w	r3, r0, r3
 800393c:	4413      	add	r3, r2
 800393e:	881b      	ldrh	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	4813      	ldr	r0, [pc, #76]	; (8003990 <uart_transmit+0xec>)
 8003944:	f004 fc40 	bl	80081c8 <HAL_UART_Transmit_DMA>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d112      	bne.n	8003974 <uart_transmit+0xd0>
		to++;
 800394e:	4b0f      	ldr	r3, [pc, #60]	; (800398c <uart_transmit+0xe8>)
 8003950:	781b      	ldrb	r3, [r3, #0]
 8003952:	3301      	adds	r3, #1
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4b0d      	ldr	r3, [pc, #52]	; (800398c <uart_transmit+0xe8>)
 8003958:	701a      	strb	r2, [r3, #0]
		tc--;
 800395a:	4b0b      	ldr	r3, [pc, #44]	; (8003988 <uart_transmit+0xe4>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	3b01      	subs	r3, #1
 8003960:	b2da      	uxtb	r2, r3
 8003962:	4b09      	ldr	r3, [pc, #36]	; (8003988 <uart_transmit+0xe4>)
 8003964:	701a      	strb	r2, [r3, #0]
		if(to ==TX_SIZE)
 8003966:	4b09      	ldr	r3, [pc, #36]	; (800398c <uart_transmit+0xe8>)
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b0a      	cmp	r3, #10
 800396c:	d102      	bne.n	8003974 <uart_transmit+0xd0>
			to = 0;
 800396e:	4b07      	ldr	r3, [pc, #28]	; (800398c <uart_transmit+0xe8>)
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]

	}
}
 8003974:	bf00      	nop
 8003976:	3708      	adds	r7, #8
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200044d0 	.word	0x200044d0
 8003980:	200044cd 	.word	0x200044cd
 8003984:	20002d48 	.word	0x20002d48
 8003988:	200044cc 	.word	0x200044cc
 800398c:	200044ce 	.word	0x200044ce
 8003990:	200015f8 	.word	0x200015f8

08003994 <uart_dma_start>:


void uart_dma_start(void){
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, uart_rxbuf, UART_BUF_SIZE);
 8003998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800399c:	4902      	ldr	r1, [pc, #8]	; (80039a8 <uart_dma_start+0x14>)
 800399e:	4803      	ldr	r0, [pc, #12]	; (80039ac <uart_dma_start+0x18>)
 80039a0:	f004 fc90 	bl	80082c4 <HAL_UART_Receive_DMA>
}
 80039a4:	bf00      	nop
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	20002b3c 	.word	0x20002b3c
 80039ac:	200015f8 	.word	0x200015f8

080039b0 <uart_dma_stop>:

void uart_dma_stop(void){
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart2);			//stop DMA
 80039b4:	4802      	ldr	r0, [pc, #8]	; (80039c0 <uart_dma_stop+0x10>)
 80039b6:	f004 fcb5 	bl	8008324 <HAL_UART_DMAStop>
}
 80039ba:	bf00      	nop
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200015f8 	.word	0x200015f8

080039c4 <uart_process>:

__weak int dw_process_rx_buffer(uint8_t *data,uint16_t size){
	return 0;
}

void uart_process(void){
 80039c4:	b580      	push	{r7, lr}
 80039c6:	af00      	add	r7, sp, #0
	if(huart2.hdmarx->Instance->NDTR != UART_BUF_SIZE) {
 80039c8:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <uart_process+0x80>)
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039d4:	d034      	beq.n	8003a40 <uart_process+0x7c>
	  if(huart2.hdmarx->Instance->NDTR != UART_Rx_recved) {
 80039d6:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <uart_process+0x80>)
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	4a1a      	ldr	r2, [pc, #104]	; (8003a48 <uart_process+0x84>)
 80039e0:	8812      	ldrh	r2, [r2, #0]
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00d      	beq.n	8003a02 <uart_process+0x3e>
		  UART_Rx_recved = huart2.hdmarx->Instance->NDTR;
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <uart_process+0x80>)
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <uart_process+0x84>)
 80039f2:	801a      	strh	r2, [r3, #0]
		  UART_Rx_Time = HAL_GetTick() + 2;
 80039f4:	f000 f8d4 	bl	8003ba0 <HAL_GetTick>
 80039f8:	4603      	mov	r3, r0
 80039fa:	3302      	adds	r3, #2
 80039fc:	4a13      	ldr	r2, [pc, #76]	; (8003a4c <uart_process+0x88>)
 80039fe:	6013      	str	r3, [r2, #0]
			  uart_dma_start();
//			  process_data_rx_uart();
		  }
	  }
	}
}
 8003a00:	e01e      	b.n	8003a40 <uart_process+0x7c>
		  if(HAL_GetTick()> UART_Rx_Time)  // timeoutframe
 8003a02:	f000 f8cd 	bl	8003ba0 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	4b10      	ldr	r3, [pc, #64]	; (8003a4c <uart_process+0x88>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d917      	bls.n	8003a40 <uart_process+0x7c>
			  uart_dma_stop();
 8003a10:	f7ff ffce 	bl	80039b0 <uart_dma_stop>
			  uart_rx_cnt++;
 8003a14:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <uart_process+0x8c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <uart_process+0x8c>)
 8003a1c:	6013      	str	r3, [r2, #0]
			  UART_Rx_recved =0;
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <uart_process+0x84>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	801a      	strh	r2, [r3, #0]
			  dw_process_rx_buffer(uart_rxbuf, UART_BUF_SIZE - huart2.hdmarx->Instance->NDTR);
 8003a24:	4b07      	ldr	r3, [pc, #28]	; (8003a44 <uart_process+0x80>)
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	4619      	mov	r1, r3
 8003a36:	4807      	ldr	r0, [pc, #28]	; (8003a54 <uart_process+0x90>)
 8003a38:	f7fd f8c8 	bl	8000bcc <dw_process_rx_buffer>
			  uart_dma_start();
 8003a3c:	f7ff ffaa 	bl	8003994 <uart_dma_start>
}
 8003a40:	bf00      	nop
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	200015f8 	.word	0x200015f8
 8003a48:	20002d3c 	.word	0x20002d3c
 8003a4c:	20002d40 	.word	0x20002d40
 8003a50:	20002d44 	.word	0x20002d44
 8003a54:	20002b3c 	.word	0x20002b3c

08003a58 <uart_transmit_block>:

HAL_StatusTypeDef uart_transmit_block(uint8_t *data,uint16_t size,uint16_t timeout){
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
 8003a64:	4613      	mov	r3, r2
 8003a66:	803b      	strh	r3, [r7, #0]
	//return HAL_UART_Transmit(&huart2, data, size, timeout);
	uart_transmit(data,size);
 8003a68:	887b      	ldrh	r3, [r7, #2]
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7ff ff18 	bl	80038a4 <uart_transmit>
	return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ab8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a84:	480d      	ldr	r0, [pc, #52]	; (8003abc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a86:	490e      	ldr	r1, [pc, #56]	; (8003ac0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a88:	4a0e      	ldr	r2, [pc, #56]	; (8003ac4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a8c:	e002      	b.n	8003a94 <LoopCopyDataInit>

08003a8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a92:	3304      	adds	r3, #4

08003a94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a98:	d3f9      	bcc.n	8003a8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a9a:	4a0b      	ldr	r2, [pc, #44]	; (8003ac8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a9c:	4c0b      	ldr	r4, [pc, #44]	; (8003acc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003aa0:	e001      	b.n	8003aa6 <LoopFillZerobss>

08003aa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003aa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003aa4:	3204      	adds	r2, #4

08003aa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003aa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003aa8:	d3fb      	bcc.n	8003aa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003aaa:	f7ff fe9f 	bl	80037ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aae:	f009 fee7 	bl	800d880 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ab2:	f7fd fb3d 	bl	8001130 <main>
  bx  lr    
 8003ab6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ab8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ac0:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8003ac4:	080106f8 	.word	0x080106f8
  ldr r2, =_sbss
 8003ac8:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8003acc:	20006118 	.word	0x20006118

08003ad0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ad0:	e7fe      	b.n	8003ad0 <ADC_IRQHandler>
	...

08003ad4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ad8:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <HAL_Init+0x40>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a0d      	ldr	r2, [pc, #52]	; (8003b14 <HAL_Init+0x40>)
 8003ade:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ae2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_Init+0x40>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <HAL_Init+0x40>)
 8003aea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <HAL_Init+0x40>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a07      	ldr	r2, [pc, #28]	; (8003b14 <HAL_Init+0x40>)
 8003af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003afa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003afc:	2003      	movs	r0, #3
 8003afe:	f000 f94f 	bl	8003da0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b02:	2000      	movs	r0, #0
 8003b04:	f000 f808 	bl	8003b18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b08:	f7ff fb08 	bl	800311c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023c00 	.word	0x40023c00

08003b18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b20:	4b12      	ldr	r3, [pc, #72]	; (8003b6c <HAL_InitTick+0x54>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <HAL_InitTick+0x58>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	4619      	mov	r1, r3
 8003b2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 f967 	bl	8003e0a <HAL_SYSTICK_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e00e      	b.n	8003b64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b0f      	cmp	r3, #15
 8003b4a:	d80a      	bhi.n	8003b62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295
 8003b54:	f000 f92f 	bl	8003db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b58:	4a06      	ldr	r2, [pc, #24]	; (8003b74 <HAL_InitTick+0x5c>)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	e000      	b.n	8003b64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	3708      	adds	r7, #8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	20000000 	.word	0x20000000
 8003b70:	20000008 	.word	0x20000008
 8003b74:	20000004 	.word	0x20000004

08003b78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_IncTick+0x20>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	4b06      	ldr	r3, [pc, #24]	; (8003b9c <HAL_IncTick+0x24>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4413      	add	r3, r2
 8003b88:	4a04      	ldr	r2, [pc, #16]	; (8003b9c <HAL_IncTick+0x24>)
 8003b8a:	6013      	str	r3, [r2, #0]
}
 8003b8c:	bf00      	nop
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000008 	.word	0x20000008
 8003b9c:	200044d8 	.word	0x200044d8

08003ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ba4:	4b03      	ldr	r3, [pc, #12]	; (8003bb4 <HAL_GetTick+0x14>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	200044d8 	.word	0x200044d8

08003bb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bc0:	f7ff ffee 	bl	8003ba0 <HAL_GetTick>
 8003bc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd0:	d005      	beq.n	8003bde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bd2:	4b0a      	ldr	r3, [pc, #40]	; (8003bfc <HAL_Delay+0x44>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4413      	add	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bde:	bf00      	nop
 8003be0:	f7ff ffde 	bl	8003ba0 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d8f7      	bhi.n	8003be0 <HAL_Delay+0x28>
  {
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000008 	.word	0x20000008

08003c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b085      	sub	sp, #20
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c10:	4b0c      	ldr	r3, [pc, #48]	; (8003c44 <__NVIC_SetPriorityGrouping+0x44>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c32:	4a04      	ldr	r2, [pc, #16]	; (8003c44 <__NVIC_SetPriorityGrouping+0x44>)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	60d3      	str	r3, [r2, #12]
}
 8003c38:	bf00      	nop
 8003c3a:	3714      	adds	r7, #20
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c42:	4770      	bx	lr
 8003c44:	e000ed00 	.word	0xe000ed00

08003c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c4c:	4b04      	ldr	r3, [pc, #16]	; (8003c60 <__NVIC_GetPriorityGrouping+0x18>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	0a1b      	lsrs	r3, r3, #8
 8003c52:	f003 0307 	and.w	r3, r3, #7
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	e000ed00 	.word	0xe000ed00

08003c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	db0b      	blt.n	8003c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	f003 021f 	and.w	r2, r3, #31
 8003c7c:	4907      	ldr	r1, [pc, #28]	; (8003c9c <__NVIC_EnableIRQ+0x38>)
 8003c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c82:	095b      	lsrs	r3, r3, #5
 8003c84:	2001      	movs	r0, #1
 8003c86:	fa00 f202 	lsl.w	r2, r0, r2
 8003c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	e000e100 	.word	0xe000e100

08003ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	6039      	str	r1, [r7, #0]
 8003caa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	db0a      	blt.n	8003cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	490c      	ldr	r1, [pc, #48]	; (8003cec <__NVIC_SetPriority+0x4c>)
 8003cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cbe:	0112      	lsls	r2, r2, #4
 8003cc0:	b2d2      	uxtb	r2, r2
 8003cc2:	440b      	add	r3, r1
 8003cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003cc8:	e00a      	b.n	8003ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	b2da      	uxtb	r2, r3
 8003cce:	4908      	ldr	r1, [pc, #32]	; (8003cf0 <__NVIC_SetPriority+0x50>)
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	3b04      	subs	r3, #4
 8003cd8:	0112      	lsls	r2, r2, #4
 8003cda:	b2d2      	uxtb	r2, r2
 8003cdc:	440b      	add	r3, r1
 8003cde:	761a      	strb	r2, [r3, #24]
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000e100 	.word	0xe000e100
 8003cf0:	e000ed00 	.word	0xe000ed00

08003cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b089      	sub	sp, #36	; 0x24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0307 	and.w	r3, r3, #7
 8003d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f1c3 0307 	rsb	r3, r3, #7
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	bf28      	it	cs
 8003d12:	2304      	movcs	r3, #4
 8003d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	3304      	adds	r3, #4
 8003d1a:	2b06      	cmp	r3, #6
 8003d1c:	d902      	bls.n	8003d24 <NVIC_EncodePriority+0x30>
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	3b03      	subs	r3, #3
 8003d22:	e000      	b.n	8003d26 <NVIC_EncodePriority+0x32>
 8003d24:	2300      	movs	r3, #0
 8003d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43da      	mvns	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	401a      	ands	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	fa01 f303 	lsl.w	r3, r1, r3
 8003d46:	43d9      	mvns	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d4c:	4313      	orrs	r3, r2
         );
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3724      	adds	r7, #36	; 0x24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
	...

08003d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d6c:	d301      	bcc.n	8003d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e00f      	b.n	8003d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d72:	4a0a      	ldr	r2, [pc, #40]	; (8003d9c <SysTick_Config+0x40>)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	3b01      	subs	r3, #1
 8003d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d7a:	210f      	movs	r1, #15
 8003d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d80:	f7ff ff8e 	bl	8003ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d84:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <SysTick_Config+0x40>)
 8003d86:	2200      	movs	r2, #0
 8003d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d8a:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <SysTick_Config+0x40>)
 8003d8c:	2207      	movs	r2, #7
 8003d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3708      	adds	r7, #8
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	e000e010 	.word	0xe000e010

08003da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff29 	bl	8003c00 <__NVIC_SetPriorityGrouping>
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b086      	sub	sp, #24
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003dc8:	f7ff ff3e 	bl	8003c48 <__NVIC_GetPriorityGrouping>
 8003dcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	68b9      	ldr	r1, [r7, #8]
 8003dd2:	6978      	ldr	r0, [r7, #20]
 8003dd4:	f7ff ff8e 	bl	8003cf4 <NVIC_EncodePriority>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff5d 	bl	8003ca0 <__NVIC_SetPriority>
}
 8003de6:	bf00      	nop
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	4603      	mov	r3, r0
 8003df6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7ff ff31 	bl	8003c64 <__NVIC_EnableIRQ>
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b082      	sub	sp, #8
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f7ff ffa2 	bl	8003d5c <SysTick_Config>
 8003e18:	4603      	mov	r3, r0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e30:	f7ff feb6 	bl	8003ba0 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e099      	b.n	8003f74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2202      	movs	r2, #2
 8003e44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e60:	e00f      	b.n	8003e82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e62:	f7ff fe9d 	bl	8003ba0 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	2b05      	cmp	r3, #5
 8003e6e:	d908      	bls.n	8003e82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2203      	movs	r2, #3
 8003e7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e078      	b.n	8003f74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e8      	bne.n	8003e62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4b38      	ldr	r3, [pc, #224]	; (8003f7c <HAL_DMA_Init+0x158>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685a      	ldr	r2, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ec6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6a1b      	ldr	r3, [r3, #32]
 8003ecc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d107      	bne.n	8003eec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	695b      	ldr	r3, [r3, #20]
 8003efa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 0307 	bic.w	r3, r3, #7
 8003f02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d117      	bne.n	8003f46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00e      	beq.n	8003f46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fb01 	bl	8004530 <DMA_CheckFifoParam>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2240      	movs	r2, #64	; 0x40
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f42:	2301      	movs	r3, #1
 8003f44:	e016      	b.n	8003f74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fab8 	bl	80044c4 <DMA_CalcBaseAndBitshift>
 8003f54:	4603      	mov	r3, r0
 8003f56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	223f      	movs	r2, #63	; 0x3f
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3718      	adds	r7, #24
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	f010803f 	.word	0xf010803f

08003f80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	60f8      	str	r0, [r7, #12]
 8003f88:	60b9      	str	r1, [r7, #8]
 8003f8a:	607a      	str	r2, [r7, #4]
 8003f8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_DMA_Start_IT+0x26>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e040      	b.n	8004028 <HAL_DMA_Start_IT+0xa8>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d12f      	bne.n	800401a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68b9      	ldr	r1, [r7, #8]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fa4a 	bl	8004468 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	223f      	movs	r2, #63	; 0x3f
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f042 0216 	orr.w	r2, r2, #22
 8003fee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d007      	beq.n	8004008 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f042 0208 	orr.w	r2, r2, #8
 8004006:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e005      	b.n	8004026 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004022:	2302      	movs	r3, #2
 8004024:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004026:	7dfb      	ldrb	r3, [r7, #23]
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800403e:	f7ff fdaf 	bl	8003ba0 <HAL_GetTick>
 8004042:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b02      	cmp	r3, #2
 800404e:	d008      	beq.n	8004062 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2280      	movs	r2, #128	; 0x80
 8004054:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e052      	b.n	8004108 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0216 	bic.w	r2, r2, #22
 8004070:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695a      	ldr	r2, [r3, #20]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004080:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d103      	bne.n	8004092 <HAL_DMA_Abort+0x62>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408e:	2b00      	cmp	r3, #0
 8004090:	d007      	beq.n	80040a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f022 0208 	bic.w	r2, r2, #8
 80040a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0201 	bic.w	r2, r2, #1
 80040b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040b2:	e013      	b.n	80040dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040b4:	f7ff fd74 	bl	8003ba0 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d90c      	bls.n	80040dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2203      	movs	r2, #3
 80040cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e015      	b.n	8004108 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e4      	bne.n	80040b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ee:	223f      	movs	r2, #63	; 0x3f
 80040f0:	409a      	lsls	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d004      	beq.n	800412e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2280      	movs	r2, #128	; 0x80
 8004128:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e00c      	b.n	8004148 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2205      	movs	r2, #5
 8004132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0201 	bic.w	r2, r2, #1
 8004144:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004160:	4b8e      	ldr	r3, [pc, #568]	; (800439c <HAL_DMA_IRQHandler+0x248>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a8e      	ldr	r2, [pc, #568]	; (80043a0 <HAL_DMA_IRQHandler+0x24c>)
 8004166:	fba2 2303 	umull	r2, r3, r2, r3
 800416a:	0a9b      	lsrs	r3, r3, #10
 800416c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417e:	2208      	movs	r2, #8
 8004180:	409a      	lsls	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	4013      	ands	r3, r2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01a      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	d013      	beq.n	80041c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f022 0204 	bic.w	r2, r2, #4
 80041a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	2208      	movs	r2, #8
 80041ae:	409a      	lsls	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b8:	f043 0201 	orr.w	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c4:	2201      	movs	r2, #1
 80041c6:	409a      	lsls	r2, r3
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	4013      	ands	r3, r2
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d012      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00b      	beq.n	80041f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e2:	2201      	movs	r2, #1
 80041e4:	409a      	lsls	r2, r3
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ee:	f043 0202 	orr.w	r2, r3, #2
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fa:	2204      	movs	r2, #4
 80041fc:	409a      	lsls	r2, r3
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	4013      	ands	r3, r2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d012      	beq.n	800422c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00b      	beq.n	800422c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	2204      	movs	r2, #4
 800421a:	409a      	lsls	r2, r3
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	f043 0204 	orr.w	r2, r3, #4
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004230:	2210      	movs	r2, #16
 8004232:	409a      	lsls	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4013      	ands	r3, r2
 8004238:	2b00      	cmp	r3, #0
 800423a:	d043      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d03c      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424e:	2210      	movs	r2, #16
 8004250:	409a      	lsls	r2, r3
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d018      	beq.n	8004296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d108      	bne.n	8004284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d024      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	4798      	blx	r3
 8004282:	e01f      	b.n	80042c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01b      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	4798      	blx	r3
 8004294:	e016      	b.n	80042c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d107      	bne.n	80042b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 0208 	bic.w	r2, r2, #8
 80042b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c8:	2220      	movs	r2, #32
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	f000 808f 	beq.w	80043f4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0310 	and.w	r3, r3, #16
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8087 	beq.w	80043f4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ea:	2220      	movs	r2, #32
 80042ec:	409a      	lsls	r2, r3
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b05      	cmp	r3, #5
 80042fc:	d136      	bne.n	800436c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0216 	bic.w	r2, r2, #22
 800430c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800431c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	2b00      	cmp	r3, #0
 8004324:	d103      	bne.n	800432e <HAL_DMA_IRQHandler+0x1da>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800432a:	2b00      	cmp	r3, #0
 800432c:	d007      	beq.n	800433e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f022 0208 	bic.w	r2, r2, #8
 800433c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004342:	223f      	movs	r2, #63	; 0x3f
 8004344:	409a      	lsls	r2, r3
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435e:	2b00      	cmp	r3, #0
 8004360:	d07e      	beq.n	8004460 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
        }
        return;
 800436a:	e079      	b.n	8004460 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01d      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10d      	bne.n	80043a4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	2b00      	cmp	r3, #0
 800438e:	d031      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	4798      	blx	r3
 8004398:	e02c      	b.n	80043f4 <HAL_DMA_IRQHandler+0x2a0>
 800439a:	bf00      	nop
 800439c:	20000000 	.word	0x20000000
 80043a0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d023      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
 80043b4:	e01e      	b.n	80043f4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10f      	bne.n	80043e4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0210 	bic.w	r2, r2, #16
 80043d2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d032      	beq.n	8004462 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004400:	f003 0301 	and.w	r3, r3, #1
 8004404:	2b00      	cmp	r3, #0
 8004406:	d022      	beq.n	800444e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2205      	movs	r2, #5
 800440c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 0201 	bic.w	r2, r2, #1
 800441e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	3301      	adds	r3, #1
 8004424:	60bb      	str	r3, [r7, #8]
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	429a      	cmp	r2, r3
 800442a:	d307      	bcc.n	800443c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f2      	bne.n	8004420 <HAL_DMA_IRQHandler+0x2cc>
 800443a:	e000      	b.n	800443e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800443c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004452:	2b00      	cmp	r3, #0
 8004454:	d005      	beq.n	8004462 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	4798      	blx	r3
 800445e:	e000      	b.n	8004462 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004460:	bf00      	nop
    }
  }
}
 8004462:	3718      	adds	r7, #24
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004484:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2b40      	cmp	r3, #64	; 0x40
 8004494:	d108      	bne.n	80044a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044a6:	e007      	b.n	80044b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	60da      	str	r2, [r3, #12]
}
 80044b8:	bf00      	nop
 80044ba:	3714      	adds	r7, #20
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	3b10      	subs	r3, #16
 80044d4:	4a14      	ldr	r2, [pc, #80]	; (8004528 <DMA_CalcBaseAndBitshift+0x64>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	091b      	lsrs	r3, r3, #4
 80044dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80044de:	4a13      	ldr	r2, [pc, #76]	; (800452c <DMA_CalcBaseAndBitshift+0x68>)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	4413      	add	r3, r2
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	461a      	mov	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b03      	cmp	r3, #3
 80044f0:	d909      	bls.n	8004506 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	1d1a      	adds	r2, r3, #4
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	659a      	str	r2, [r3, #88]	; 0x58
 8004504:	e007      	b.n	8004516 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800450e:	f023 0303 	bic.w	r3, r3, #3
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800451a:	4618      	mov	r0, r3
 800451c:	3714      	adds	r7, #20
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	aaaaaaab 	.word	0xaaaaaaab
 800452c:	08010648 	.word	0x08010648

08004530 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004540:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d11f      	bne.n	800458a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d856      	bhi.n	80045fe <DMA_CheckFifoParam+0xce>
 8004550:	a201      	add	r2, pc, #4	; (adr r2, 8004558 <DMA_CheckFifoParam+0x28>)
 8004552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004556:	bf00      	nop
 8004558:	08004569 	.word	0x08004569
 800455c:	0800457b 	.word	0x0800457b
 8004560:	08004569 	.word	0x08004569
 8004564:	080045ff 	.word	0x080045ff
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800456c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d046      	beq.n	8004602 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004578:	e043      	b.n	8004602 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004582:	d140      	bne.n	8004606 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004588:	e03d      	b.n	8004606 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004592:	d121      	bne.n	80045d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b03      	cmp	r3, #3
 8004598:	d837      	bhi.n	800460a <DMA_CheckFifoParam+0xda>
 800459a:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <DMA_CheckFifoParam+0x70>)
 800459c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a0:	080045b1 	.word	0x080045b1
 80045a4:	080045b7 	.word	0x080045b7
 80045a8:	080045b1 	.word	0x080045b1
 80045ac:	080045c9 	.word	0x080045c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	73fb      	strb	r3, [r7, #15]
      break;
 80045b4:	e030      	b.n	8004618 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d025      	beq.n	800460e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c6:	e022      	b.n	800460e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045d0:	d11f      	bne.n	8004612 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80045d6:	e01c      	b.n	8004612 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d903      	bls.n	80045e6 <DMA_CheckFifoParam+0xb6>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b03      	cmp	r3, #3
 80045e2:	d003      	beq.n	80045ec <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80045e4:	e018      	b.n	8004618 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	73fb      	strb	r3, [r7, #15]
      break;
 80045ea:	e015      	b.n	8004618 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00e      	beq.n	8004616 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	73fb      	strb	r3, [r7, #15]
      break;
 80045fc:	e00b      	b.n	8004616 <DMA_CheckFifoParam+0xe6>
      break;
 80045fe:	bf00      	nop
 8004600:	e00a      	b.n	8004618 <DMA_CheckFifoParam+0xe8>
      break;
 8004602:	bf00      	nop
 8004604:	e008      	b.n	8004618 <DMA_CheckFifoParam+0xe8>
      break;
 8004606:	bf00      	nop
 8004608:	e006      	b.n	8004618 <DMA_CheckFifoParam+0xe8>
      break;
 800460a:	bf00      	nop
 800460c:	e004      	b.n	8004618 <DMA_CheckFifoParam+0xe8>
      break;
 800460e:	bf00      	nop
 8004610:	e002      	b.n	8004618 <DMA_CheckFifoParam+0xe8>
      break;   
 8004612:	bf00      	nop
 8004614:	e000      	b.n	8004618 <DMA_CheckFifoParam+0xe8>
      break;
 8004616:	bf00      	nop
    }
  } 
  
  return status; 
 8004618:	7bfb      	ldrb	r3, [r7, #15]
}
 800461a:	4618      	mov	r0, r3
 800461c:	3714      	adds	r7, #20
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop

08004628 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800463a:	4b23      	ldr	r3, [pc, #140]	; (80046c8 <HAL_FLASH_Program+0xa0>)
 800463c:	7e1b      	ldrb	r3, [r3, #24]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_FLASH_Program+0x1e>
 8004642:	2302      	movs	r3, #2
 8004644:	e03b      	b.n	80046be <HAL_FLASH_Program+0x96>
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <HAL_FLASH_Program+0xa0>)
 8004648:	2201      	movs	r2, #1
 800464a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800464c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004650:	f000 f870 	bl	8004734 <FLASH_WaitForLastOperation>
 8004654:	4603      	mov	r3, r0
 8004656:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004658:	7dfb      	ldrb	r3, [r7, #23]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d12b      	bne.n	80046b6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d105      	bne.n	8004670 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8004664:	783b      	ldrb	r3, [r7, #0]
 8004666:	4619      	mov	r1, r3
 8004668:	68b8      	ldr	r0, [r7, #8]
 800466a:	f000 f91b 	bl	80048a4 <FLASH_Program_Byte>
 800466e:	e016      	b.n	800469e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d105      	bne.n	8004682 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8004676:	883b      	ldrh	r3, [r7, #0]
 8004678:	4619      	mov	r1, r3
 800467a:	68b8      	ldr	r0, [r7, #8]
 800467c:	f000 f8ee 	bl	800485c <FLASH_Program_HalfWord>
 8004680:	e00d      	b.n	800469e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b02      	cmp	r3, #2
 8004686:	d105      	bne.n	8004694 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4619      	mov	r1, r3
 800468c:	68b8      	ldr	r0, [r7, #8]
 800468e:	f000 f8c3 	bl	8004818 <FLASH_Program_Word>
 8004692:	e004      	b.n	800469e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8004694:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004698:	68b8      	ldr	r0, [r7, #8]
 800469a:	f000 f88b 	bl	80047b4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800469e:	f24c 3050 	movw	r0, #50000	; 0xc350
 80046a2:	f000 f847 	bl	8004734 <FLASH_WaitForLastOperation>
 80046a6:	4603      	mov	r3, r0
 80046a8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80046aa:	4b08      	ldr	r3, [pc, #32]	; (80046cc <HAL_FLASH_Program+0xa4>)
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	4a07      	ldr	r2, [pc, #28]	; (80046cc <HAL_FLASH_Program+0xa4>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80046b6:	4b04      	ldr	r3, [pc, #16]	; (80046c8 <HAL_FLASH_Program+0xa0>)
 80046b8:	2200      	movs	r2, #0
 80046ba:	761a      	strb	r2, [r3, #24]
  
  return status;
 80046bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	200044dc 	.word	0x200044dc
 80046cc:	40023c00 	.word	0x40023c00

080046d0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80046da:	4b0b      	ldr	r3, [pc, #44]	; (8004708 <HAL_FLASH_Unlock+0x38>)
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	da0b      	bge.n	80046fa <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80046e2:	4b09      	ldr	r3, [pc, #36]	; (8004708 <HAL_FLASH_Unlock+0x38>)
 80046e4:	4a09      	ldr	r2, [pc, #36]	; (800470c <HAL_FLASH_Unlock+0x3c>)
 80046e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80046e8:	4b07      	ldr	r3, [pc, #28]	; (8004708 <HAL_FLASH_Unlock+0x38>)
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <HAL_FLASH_Unlock+0x40>)
 80046ec:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <HAL_FLASH_Unlock+0x38>)
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	da01      	bge.n	80046fa <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80046fa:	79fb      	ldrb	r3, [r7, #7]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40023c00 	.word	0x40023c00
 800470c:	45670123 	.word	0x45670123
 8004710:	cdef89ab 	.word	0xcdef89ab

08004714 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_FLASH_Lock+0x1c>)
 800471a:	691b      	ldr	r3, [r3, #16]
 800471c:	4a04      	ldr	r2, [pc, #16]	; (8004730 <HAL_FLASH_Lock+0x1c>)
 800471e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004722:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40023c00 	.word	0x40023c00

08004734 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004740:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <FLASH_WaitForLastOperation+0x78>)
 8004742:	2200      	movs	r2, #0
 8004744:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004746:	f7ff fa2b 	bl	8003ba0 <HAL_GetTick>
 800474a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800474c:	e010      	b.n	8004770 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004754:	d00c      	beq.n	8004770 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <FLASH_WaitForLastOperation+0x38>
 800475c:	f7ff fa20 	bl	8003ba0 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	429a      	cmp	r2, r3
 800476a:	d201      	bcs.n	8004770 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e019      	b.n	80047a4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004770:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <FLASH_WaitForLastOperation+0x7c>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e8      	bne.n	800474e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <FLASH_WaitForLastOperation+0x7c>)
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	f003 0301 	and.w	r3, r3, #1
 8004784:	2b00      	cmp	r3, #0
 8004786:	d002      	beq.n	800478e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <FLASH_WaitForLastOperation+0x7c>)
 800478a:	2201      	movs	r2, #1
 800478c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800478e:	4b08      	ldr	r3, [pc, #32]	; (80047b0 <FLASH_WaitForLastOperation+0x7c>)
 8004790:	68db      	ldr	r3, [r3, #12]
 8004792:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d003      	beq.n	80047a2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800479a:	f000 f8a5 	bl	80048e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
  
}  
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	200044dc 	.word	0x200044dc
 80047b0:	40023c00 	.word	0x40023c00

080047b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80047c0:	4b14      	ldr	r3, [pc, #80]	; (8004814 <FLASH_Program_DoubleWord+0x60>)
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	4a13      	ldr	r2, [pc, #76]	; (8004814 <FLASH_Program_DoubleWord+0x60>)
 80047c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80047cc:	4b11      	ldr	r3, [pc, #68]	; (8004814 <FLASH_Program_DoubleWord+0x60>)
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	4a10      	ldr	r2, [pc, #64]	; (8004814 <FLASH_Program_DoubleWord+0x60>)
 80047d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80047d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <FLASH_Program_DoubleWord+0x60>)
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	4a0d      	ldr	r2, [pc, #52]	; (8004814 <FLASH_Program_DoubleWord+0x60>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80047ea:	f3bf 8f6f 	isb	sy
}
 80047ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80047f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80047f4:	f04f 0200 	mov.w	r2, #0
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	000a      	movs	r2, r1
 80047fe:	2300      	movs	r3, #0
 8004800:	68f9      	ldr	r1, [r7, #12]
 8004802:	3104      	adds	r1, #4
 8004804:	4613      	mov	r3, r2
 8004806:	600b      	str	r3, [r1, #0]
}
 8004808:	bf00      	nop
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr
 8004814:	40023c00 	.word	0x40023c00

08004818 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004822:	4b0d      	ldr	r3, [pc, #52]	; (8004858 <FLASH_Program_Word+0x40>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	4a0c      	ldr	r2, [pc, #48]	; (8004858 <FLASH_Program_Word+0x40>)
 8004828:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800482c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800482e:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <FLASH_Program_Word+0x40>)
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	4a09      	ldr	r2, [pc, #36]	; (8004858 <FLASH_Program_Word+0x40>)
 8004834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004838:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800483a:	4b07      	ldr	r3, [pc, #28]	; (8004858 <FLASH_Program_Word+0x40>)
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	4a06      	ldr	r2, [pc, #24]	; (8004858 <FLASH_Program_Word+0x40>)
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	601a      	str	r2, [r3, #0]
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	40023c00 	.word	0x40023c00

0800485c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004868:	4b0d      	ldr	r3, [pc, #52]	; (80048a0 <FLASH_Program_HalfWord+0x44>)
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	4a0c      	ldr	r2, [pc, #48]	; (80048a0 <FLASH_Program_HalfWord+0x44>)
 800486e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004872:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004874:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <FLASH_Program_HalfWord+0x44>)
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <FLASH_Program_HalfWord+0x44>)
 800487a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800487e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004880:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <FLASH_Program_HalfWord+0x44>)
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	4a06      	ldr	r2, [pc, #24]	; (80048a0 <FLASH_Program_HalfWord+0x44>)
 8004886:	f043 0301 	orr.w	r3, r3, #1
 800488a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	801a      	strh	r2, [r3, #0]
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40023c00 	.word	0x40023c00

080048a4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	460b      	mov	r3, r1
 80048ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048b0:	4b0c      	ldr	r3, [pc, #48]	; (80048e4 <FLASH_Program_Byte+0x40>)
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	4a0b      	ldr	r2, [pc, #44]	; (80048e4 <FLASH_Program_Byte+0x40>)
 80048b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80048bc:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <FLASH_Program_Byte+0x40>)
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <FLASH_Program_Byte+0x40>)
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80048c4:	4b07      	ldr	r3, [pc, #28]	; (80048e4 <FLASH_Program_Byte+0x40>)
 80048c6:	691b      	ldr	r3, [r3, #16]
 80048c8:	4a06      	ldr	r2, [pc, #24]	; (80048e4 <FLASH_Program_Byte+0x40>)
 80048ca:	f043 0301 	orr.w	r3, r3, #1
 80048ce:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	701a      	strb	r2, [r3, #0]
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40023c00 	.word	0x40023c00

080048e8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80048e8:	b480      	push	{r7}
 80048ea:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80048ec:	4b27      	ldr	r3, [pc, #156]	; (800498c <FLASH_SetErrorCode+0xa4>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	f003 0310 	and.w	r3, r3, #16
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d008      	beq.n	800490a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80048f8:	4b25      	ldr	r3, [pc, #148]	; (8004990 <FLASH_SetErrorCode+0xa8>)
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	f043 0310 	orr.w	r3, r3, #16
 8004900:	4a23      	ldr	r2, [pc, #140]	; (8004990 <FLASH_SetErrorCode+0xa8>)
 8004902:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004904:	4b21      	ldr	r3, [pc, #132]	; (800498c <FLASH_SetErrorCode+0xa4>)
 8004906:	2210      	movs	r2, #16
 8004908:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800490a:	4b20      	ldr	r3, [pc, #128]	; (800498c <FLASH_SetErrorCode+0xa4>)
 800490c:	68db      	ldr	r3, [r3, #12]
 800490e:	f003 0320 	and.w	r3, r3, #32
 8004912:	2b00      	cmp	r3, #0
 8004914:	d008      	beq.n	8004928 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004916:	4b1e      	ldr	r3, [pc, #120]	; (8004990 <FLASH_SetErrorCode+0xa8>)
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f043 0308 	orr.w	r3, r3, #8
 800491e:	4a1c      	ldr	r2, [pc, #112]	; (8004990 <FLASH_SetErrorCode+0xa8>)
 8004920:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004922:	4b1a      	ldr	r3, [pc, #104]	; (800498c <FLASH_SetErrorCode+0xa4>)
 8004924:	2220      	movs	r2, #32
 8004926:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004928:	4b18      	ldr	r3, [pc, #96]	; (800498c <FLASH_SetErrorCode+0xa4>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d008      	beq.n	8004946 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004934:	4b16      	ldr	r3, [pc, #88]	; (8004990 <FLASH_SetErrorCode+0xa8>)
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	f043 0304 	orr.w	r3, r3, #4
 800493c:	4a14      	ldr	r2, [pc, #80]	; (8004990 <FLASH_SetErrorCode+0xa8>)
 800493e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004940:	4b12      	ldr	r3, [pc, #72]	; (800498c <FLASH_SetErrorCode+0xa4>)
 8004942:	2240      	movs	r2, #64	; 0x40
 8004944:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <FLASH_SetErrorCode+0xa4>)
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004952:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <FLASH_SetErrorCode+0xa8>)
 8004954:	69db      	ldr	r3, [r3, #28]
 8004956:	f043 0302 	orr.w	r3, r3, #2
 800495a:	4a0d      	ldr	r2, [pc, #52]	; (8004990 <FLASH_SetErrorCode+0xa8>)
 800495c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800495e:	4b0b      	ldr	r3, [pc, #44]	; (800498c <FLASH_SetErrorCode+0xa4>)
 8004960:	2280      	movs	r2, #128	; 0x80
 8004962:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004964:	4b09      	ldr	r3, [pc, #36]	; (800498c <FLASH_SetErrorCode+0xa4>)
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b00      	cmp	r3, #0
 800496e:	d008      	beq.n	8004982 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004970:	4b07      	ldr	r3, [pc, #28]	; (8004990 <FLASH_SetErrorCode+0xa8>)
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	f043 0320 	orr.w	r3, r3, #32
 8004978:	4a05      	ldr	r2, [pc, #20]	; (8004990 <FLASH_SetErrorCode+0xa8>)
 800497a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800497c:	4b03      	ldr	r3, [pc, #12]	; (800498c <FLASH_SetErrorCode+0xa4>)
 800497e:	2202      	movs	r2, #2
 8004980:	60da      	str	r2, [r3, #12]
  }
}
 8004982:	bf00      	nop
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr
 800498c:	40023c00 	.word	0x40023c00
 8004990:	200044dc 	.word	0x200044dc

08004994 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	460b      	mov	r3, r1
 800499e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80049a4:	78fb      	ldrb	r3, [r7, #3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d102      	bne.n	80049b0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80049aa:	2300      	movs	r3, #0
 80049ac:	60fb      	str	r3, [r7, #12]
 80049ae:	e010      	b.n	80049d2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d103      	bne.n	80049be <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80049b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e009      	b.n	80049d2 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d103      	bne.n	80049cc <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80049c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049c8:	60fb      	str	r3, [r7, #12]
 80049ca:	e002      	b.n	80049d2 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80049cc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049d0:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <FLASH_Erase_Sector+0x8c>)
 80049d4:	691b      	ldr	r3, [r3, #16]
 80049d6:	4a12      	ldr	r2, [pc, #72]	; (8004a20 <FLASH_Erase_Sector+0x8c>)
 80049d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80049de:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <FLASH_Erase_Sector+0x8c>)
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	490f      	ldr	r1, [pc, #60]	; (8004a20 <FLASH_Erase_Sector+0x8c>)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80049ea:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <FLASH_Erase_Sector+0x8c>)
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	4a0c      	ldr	r2, [pc, #48]	; (8004a20 <FLASH_Erase_Sector+0x8c>)
 80049f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80049f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80049f6:	4b0a      	ldr	r3, [pc, #40]	; (8004a20 <FLASH_Erase_Sector+0x8c>)
 80049f8:	691a      	ldr	r2, [r3, #16]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4313      	orrs	r3, r2
 8004a00:	4a07      	ldr	r2, [pc, #28]	; (8004a20 <FLASH_Erase_Sector+0x8c>)
 8004a02:	f043 0302 	orr.w	r3, r3, #2
 8004a06:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004a08:	4b05      	ldr	r3, [pc, #20]	; (8004a20 <FLASH_Erase_Sector+0x8c>)
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	4a04      	ldr	r2, [pc, #16]	; (8004a20 <FLASH_Erase_Sector+0x8c>)
 8004a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a12:	6113      	str	r3, [r2, #16]
}
 8004a14:	bf00      	nop
 8004a16:	3714      	adds	r7, #20
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr
 8004a20:	40023c00 	.word	0x40023c00

08004a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b089      	sub	sp, #36	; 0x24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61fb      	str	r3, [r7, #28]
 8004a3e:	e16b      	b.n	8004d18 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a40:	2201      	movs	r2, #1
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	fa02 f303 	lsl.w	r3, r2, r3
 8004a48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4013      	ands	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	f040 815a 	bne.w	8004d12 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	2b01      	cmp	r3, #1
 8004a68:	d005      	beq.n	8004a76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	d130      	bne.n	8004ad8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2203      	movs	r2, #3
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	43db      	mvns	r3, r3
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9a:	69ba      	ldr	r2, [r7, #24]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69ba      	ldr	r2, [r7, #24]
 8004aa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aac:	2201      	movs	r2, #1
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ab4:	43db      	mvns	r3, r3
 8004ab6:	69ba      	ldr	r2, [r7, #24]
 8004ab8:	4013      	ands	r3, r2
 8004aba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 0201 	and.w	r2, r3, #1
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 0303 	and.w	r3, r3, #3
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d017      	beq.n	8004b14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	005b      	lsls	r3, r3, #1
 8004aee:	2203      	movs	r2, #3
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4013      	ands	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	69fb      	ldr	r3, [r7, #28]
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	fa02 f303 	lsl.w	r3, r2, r3
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 0303 	and.w	r3, r3, #3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d123      	bne.n	8004b68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	08da      	lsrs	r2, r3, #3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	3208      	adds	r2, #8
 8004b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	220f      	movs	r2, #15
 8004b38:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3c:	43db      	mvns	r3, r3
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	4013      	ands	r3, r2
 8004b42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	fa02 f303 	lsl.w	r3, r2, r3
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	08da      	lsrs	r2, r3, #3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	3208      	adds	r2, #8
 8004b62:	69b9      	ldr	r1, [r7, #24]
 8004b64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	2203      	movs	r2, #3
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	69ba      	ldr	r2, [r7, #24]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 0203 	and.w	r2, r3, #3
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	69ba      	ldr	r2, [r7, #24]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	69ba      	ldr	r2, [r7, #24]
 8004b9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80b4 	beq.w	8004d12 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004baa:	2300      	movs	r3, #0
 8004bac:	60fb      	str	r3, [r7, #12]
 8004bae:	4b60      	ldr	r3, [pc, #384]	; (8004d30 <HAL_GPIO_Init+0x30c>)
 8004bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bb2:	4a5f      	ldr	r2, [pc, #380]	; (8004d30 <HAL_GPIO_Init+0x30c>)
 8004bb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bb8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bba:	4b5d      	ldr	r3, [pc, #372]	; (8004d30 <HAL_GPIO_Init+0x30c>)
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004bc6:	4a5b      	ldr	r2, [pc, #364]	; (8004d34 <HAL_GPIO_Init+0x310>)
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	089b      	lsrs	r3, r3, #2
 8004bcc:	3302      	adds	r3, #2
 8004bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	220f      	movs	r2, #15
 8004bde:	fa02 f303 	lsl.w	r3, r2, r3
 8004be2:	43db      	mvns	r3, r3
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	4013      	ands	r3, r2
 8004be8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	4a52      	ldr	r2, [pc, #328]	; (8004d38 <HAL_GPIO_Init+0x314>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d02b      	beq.n	8004c4a <HAL_GPIO_Init+0x226>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a51      	ldr	r2, [pc, #324]	; (8004d3c <HAL_GPIO_Init+0x318>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d025      	beq.n	8004c46 <HAL_GPIO_Init+0x222>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a50      	ldr	r2, [pc, #320]	; (8004d40 <HAL_GPIO_Init+0x31c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d01f      	beq.n	8004c42 <HAL_GPIO_Init+0x21e>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a4f      	ldr	r2, [pc, #316]	; (8004d44 <HAL_GPIO_Init+0x320>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d019      	beq.n	8004c3e <HAL_GPIO_Init+0x21a>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a4e      	ldr	r2, [pc, #312]	; (8004d48 <HAL_GPIO_Init+0x324>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d013      	beq.n	8004c3a <HAL_GPIO_Init+0x216>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a4d      	ldr	r2, [pc, #308]	; (8004d4c <HAL_GPIO_Init+0x328>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00d      	beq.n	8004c36 <HAL_GPIO_Init+0x212>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a4c      	ldr	r2, [pc, #304]	; (8004d50 <HAL_GPIO_Init+0x32c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d007      	beq.n	8004c32 <HAL_GPIO_Init+0x20e>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a4b      	ldr	r2, [pc, #300]	; (8004d54 <HAL_GPIO_Init+0x330>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d101      	bne.n	8004c2e <HAL_GPIO_Init+0x20a>
 8004c2a:	2307      	movs	r3, #7
 8004c2c:	e00e      	b.n	8004c4c <HAL_GPIO_Init+0x228>
 8004c2e:	2308      	movs	r3, #8
 8004c30:	e00c      	b.n	8004c4c <HAL_GPIO_Init+0x228>
 8004c32:	2306      	movs	r3, #6
 8004c34:	e00a      	b.n	8004c4c <HAL_GPIO_Init+0x228>
 8004c36:	2305      	movs	r3, #5
 8004c38:	e008      	b.n	8004c4c <HAL_GPIO_Init+0x228>
 8004c3a:	2304      	movs	r3, #4
 8004c3c:	e006      	b.n	8004c4c <HAL_GPIO_Init+0x228>
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e004      	b.n	8004c4c <HAL_GPIO_Init+0x228>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e002      	b.n	8004c4c <HAL_GPIO_Init+0x228>
 8004c46:	2301      	movs	r3, #1
 8004c48:	e000      	b.n	8004c4c <HAL_GPIO_Init+0x228>
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	f002 0203 	and.w	r2, r2, #3
 8004c52:	0092      	lsls	r2, r2, #2
 8004c54:	4093      	lsls	r3, r2
 8004c56:	69ba      	ldr	r2, [r7, #24]
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c5c:	4935      	ldr	r1, [pc, #212]	; (8004d34 <HAL_GPIO_Init+0x310>)
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	089b      	lsrs	r3, r3, #2
 8004c62:	3302      	adds	r3, #2
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c6a:	4b3b      	ldr	r3, [pc, #236]	; (8004d58 <HAL_GPIO_Init+0x334>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	43db      	mvns	r3, r3
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	4013      	ands	r3, r2
 8004c78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d003      	beq.n	8004c8e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004c86:	69ba      	ldr	r2, [r7, #24]
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004c8e:	4a32      	ldr	r2, [pc, #200]	; (8004d58 <HAL_GPIO_Init+0x334>)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004c94:	4b30      	ldr	r3, [pc, #192]	; (8004d58 <HAL_GPIO_Init+0x334>)
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	43db      	mvns	r3, r3
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cb8:	4a27      	ldr	r2, [pc, #156]	; (8004d58 <HAL_GPIO_Init+0x334>)
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cbe:	4b26      	ldr	r3, [pc, #152]	; (8004d58 <HAL_GPIO_Init+0x334>)
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ce2:	4a1d      	ldr	r2, [pc, #116]	; (8004d58 <HAL_GPIO_Init+0x334>)
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ce8:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <HAL_GPIO_Init+0x334>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d0c:	4a12      	ldr	r2, [pc, #72]	; (8004d58 <HAL_GPIO_Init+0x334>)
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	3301      	adds	r3, #1
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	2b0f      	cmp	r3, #15
 8004d1c:	f67f ae90 	bls.w	8004a40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d20:	bf00      	nop
 8004d22:	bf00      	nop
 8004d24:	3724      	adds	r7, #36	; 0x24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800
 8004d34:	40013800 	.word	0x40013800
 8004d38:	40020000 	.word	0x40020000
 8004d3c:	40020400 	.word	0x40020400
 8004d40:	40020800 	.word	0x40020800
 8004d44:	40020c00 	.word	0x40020c00
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	40021400 	.word	0x40021400
 8004d50:	40021800 	.word	0x40021800
 8004d54:	40021c00 	.word	0x40021c00
 8004d58:	40013c00 	.word	0x40013c00

08004d5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	460b      	mov	r3, r1
 8004d66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	887b      	ldrh	r3, [r7, #2]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d002      	beq.n	8004d7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
 8004d78:	e001      	b.n	8004d7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	460b      	mov	r3, r1
 8004d96:	807b      	strh	r3, [r7, #2]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004d9c:	787b      	ldrb	r3, [r7, #1]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004da2:	887a      	ldrh	r2, [r7, #2]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004da8:	e003      	b.n	8004db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004daa:	887b      	ldrh	r3, [r7, #2]
 8004dac:	041a      	lsls	r2, r3, #16
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	619a      	str	r2, [r3, #24]
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
	...

08004dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e12b      	b.n	800502a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fe f9c0 	bl	800316c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2224      	movs	r2, #36	; 0x24
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f022 0201 	bic.w	r2, r2, #1
 8004e02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681a      	ldr	r2, [r3, #0]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e24:	f001 fffe 	bl	8006e24 <HAL_RCC_GetPCLK1Freq>
 8004e28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	4a81      	ldr	r2, [pc, #516]	; (8005034 <HAL_I2C_Init+0x274>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d807      	bhi.n	8004e44 <HAL_I2C_Init+0x84>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	4a80      	ldr	r2, [pc, #512]	; (8005038 <HAL_I2C_Init+0x278>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	bf94      	ite	ls
 8004e3c:	2301      	movls	r3, #1
 8004e3e:	2300      	movhi	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	e006      	b.n	8004e52 <HAL_I2C_Init+0x92>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4a7d      	ldr	r2, [pc, #500]	; (800503c <HAL_I2C_Init+0x27c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	bf94      	ite	ls
 8004e4c:	2301      	movls	r3, #1
 8004e4e:	2300      	movhi	r3, #0
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e0e7      	b.n	800502a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4a78      	ldr	r2, [pc, #480]	; (8005040 <HAL_I2C_Init+0x280>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	0c9b      	lsrs	r3, r3, #18
 8004e64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6a1b      	ldr	r3, [r3, #32]
 8004e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a6a      	ldr	r2, [pc, #424]	; (8005034 <HAL_I2C_Init+0x274>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d802      	bhi.n	8004e94 <HAL_I2C_Init+0xd4>
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	3301      	adds	r3, #1
 8004e92:	e009      	b.n	8004ea8 <HAL_I2C_Init+0xe8>
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e9a:	fb02 f303 	mul.w	r3, r2, r3
 8004e9e:	4a69      	ldr	r2, [pc, #420]	; (8005044 <HAL_I2C_Init+0x284>)
 8004ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea4:	099b      	lsrs	r3, r3, #6
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	6812      	ldr	r2, [r2, #0]
 8004eac:	430b      	orrs	r3, r1
 8004eae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	69db      	ldr	r3, [r3, #28]
 8004eb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004eba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	495c      	ldr	r1, [pc, #368]	; (8005034 <HAL_I2C_Init+0x274>)
 8004ec4:	428b      	cmp	r3, r1
 8004ec6:	d819      	bhi.n	8004efc <HAL_I2C_Init+0x13c>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	1e59      	subs	r1, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ed6:	1c59      	adds	r1, r3, #1
 8004ed8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004edc:	400b      	ands	r3, r1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d00a      	beq.n	8004ef8 <HAL_I2C_Init+0x138>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	1e59      	subs	r1, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ef6:	e051      	b.n	8004f9c <HAL_I2C_Init+0x1dc>
 8004ef8:	2304      	movs	r3, #4
 8004efa:	e04f      	b.n	8004f9c <HAL_I2C_Init+0x1dc>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d111      	bne.n	8004f28 <HAL_I2C_Init+0x168>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	1e58      	subs	r0, r3, #1
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6859      	ldr	r1, [r3, #4]
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	440b      	add	r3, r1
 8004f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f16:	3301      	adds	r3, #1
 8004f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	e012      	b.n	8004f4e <HAL_I2C_Init+0x18e>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	1e58      	subs	r0, r3, #1
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6859      	ldr	r1, [r3, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	0099      	lsls	r1, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f3e:	3301      	adds	r3, #1
 8004f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	bf0c      	ite	eq
 8004f48:	2301      	moveq	r3, #1
 8004f4a:	2300      	movne	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <HAL_I2C_Init+0x196>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e022      	b.n	8004f9c <HAL_I2C_Init+0x1dc>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10e      	bne.n	8004f7c <HAL_I2C_Init+0x1bc>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1e58      	subs	r0, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6859      	ldr	r1, [r3, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	440b      	add	r3, r1
 8004f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f70:	3301      	adds	r3, #1
 8004f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f7a:	e00f      	b.n	8004f9c <HAL_I2C_Init+0x1dc>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1e58      	subs	r0, r3, #1
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6859      	ldr	r1, [r3, #4]
 8004f84:	460b      	mov	r3, r1
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	440b      	add	r3, r1
 8004f8a:	0099      	lsls	r1, r3, #2
 8004f8c:	440b      	add	r3, r1
 8004f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f92:	3301      	adds	r3, #1
 8004f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	6809      	ldr	r1, [r1, #0]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69da      	ldr	r2, [r3, #28]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004fca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6911      	ldr	r1, [r2, #16]
 8004fd2:	687a      	ldr	r2, [r7, #4]
 8004fd4:	68d2      	ldr	r2, [r2, #12]
 8004fd6:	4311      	orrs	r1, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6812      	ldr	r2, [r2, #0]
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695a      	ldr	r2, [r3, #20]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	431a      	orrs	r2, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f042 0201 	orr.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005028:	2300      	movs	r3, #0
}
 800502a:	4618      	mov	r0, r3
 800502c:	3710      	adds	r7, #16
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	000186a0 	.word	0x000186a0
 8005038:	001e847f 	.word	0x001e847f
 800503c:	003d08ff 	.word	0x003d08ff
 8005040:	431bde83 	.word	0x431bde83
 8005044:	10624dd3 	.word	0x10624dd3

08005048 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800504a:	b08f      	sub	sp, #60	; 0x3c
 800504c:	af0a      	add	r7, sp, #40	; 0x28
 800504e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d101      	bne.n	800505a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e10f      	b.n	800527a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	d106      	bne.n	800507a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f008 f8db 	bl	800d230 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2203      	movs	r2, #3
 800507e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d102      	bne.n	8005094 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4618      	mov	r0, r3
 800509a:	f004 fbc2 	bl	8009822 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	603b      	str	r3, [r7, #0]
 80050a4:	687e      	ldr	r6, [r7, #4]
 80050a6:	466d      	mov	r5, sp
 80050a8:	f106 0410 	add.w	r4, r6, #16
 80050ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80050bc:	1d33      	adds	r3, r6, #4
 80050be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050c0:	6838      	ldr	r0, [r7, #0]
 80050c2:	f004 fa99 	bl	80095f8 <USB_CoreInit>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e0d0      	b.n	800527a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2100      	movs	r1, #0
 80050de:	4618      	mov	r0, r3
 80050e0:	f004 fbb0 	bl	8009844 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050e4:	2300      	movs	r3, #0
 80050e6:	73fb      	strb	r3, [r7, #15]
 80050e8:	e04a      	b.n	8005180 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050ea:	7bfa      	ldrb	r2, [r7, #15]
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	4613      	mov	r3, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	333d      	adds	r3, #61	; 0x3d
 80050fa:	2201      	movs	r2, #1
 80050fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050fe:	7bfa      	ldrb	r2, [r7, #15]
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	00db      	lsls	r3, r3, #3
 8005106:	4413      	add	r3, r2
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	440b      	add	r3, r1
 800510c:	333c      	adds	r3, #60	; 0x3c
 800510e:	7bfa      	ldrb	r2, [r7, #15]
 8005110:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005112:	7bfa      	ldrb	r2, [r7, #15]
 8005114:	7bfb      	ldrb	r3, [r7, #15]
 8005116:	b298      	uxth	r0, r3
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	4613      	mov	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	4413      	add	r3, r2
 8005120:	009b      	lsls	r3, r3, #2
 8005122:	440b      	add	r3, r1
 8005124:	3344      	adds	r3, #68	; 0x44
 8005126:	4602      	mov	r2, r0
 8005128:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800512a:	7bfa      	ldrb	r2, [r7, #15]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	3340      	adds	r3, #64	; 0x40
 800513a:	2200      	movs	r2, #0
 800513c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800513e:	7bfa      	ldrb	r2, [r7, #15]
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	3348      	adds	r3, #72	; 0x48
 800514e:	2200      	movs	r2, #0
 8005150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005152:	7bfa      	ldrb	r2, [r7, #15]
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	00db      	lsls	r3, r3, #3
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	334c      	adds	r3, #76	; 0x4c
 8005162:	2200      	movs	r2, #0
 8005164:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005166:	7bfa      	ldrb	r2, [r7, #15]
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	00db      	lsls	r3, r3, #3
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	3354      	adds	r3, #84	; 0x54
 8005176:	2200      	movs	r2, #0
 8005178:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	3301      	adds	r3, #1
 800517e:	73fb      	strb	r3, [r7, #15]
 8005180:	7bfa      	ldrb	r2, [r7, #15]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	429a      	cmp	r2, r3
 8005188:	d3af      	bcc.n	80050ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800518a:	2300      	movs	r3, #0
 800518c:	73fb      	strb	r3, [r7, #15]
 800518e:	e044      	b.n	800521a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005190:	7bfa      	ldrb	r2, [r7, #15]
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	4613      	mov	r3, r2
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4413      	add	r3, r2
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	440b      	add	r3, r1
 800519e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80051a2:	2200      	movs	r2, #0
 80051a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051a6:	7bfa      	ldrb	r2, [r7, #15]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80051b8:	7bfa      	ldrb	r2, [r7, #15]
 80051ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051bc:	7bfa      	ldrb	r2, [r7, #15]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80051ce:	2200      	movs	r2, #0
 80051d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051d2:	7bfa      	ldrb	r2, [r7, #15]
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	4613      	mov	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	4413      	add	r3, r2
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	440b      	add	r3, r1
 80051e0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051e8:	7bfa      	ldrb	r2, [r7, #15]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80051fa:	2200      	movs	r2, #0
 80051fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051fe:	7bfa      	ldrb	r2, [r7, #15]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	00db      	lsls	r3, r3, #3
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005210:	2200      	movs	r2, #0
 8005212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	3301      	adds	r3, #1
 8005218:	73fb      	strb	r3, [r7, #15]
 800521a:	7bfa      	ldrb	r2, [r7, #15]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	429a      	cmp	r2, r3
 8005222:	d3b5      	bcc.n	8005190 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	687e      	ldr	r6, [r7, #4]
 800522c:	466d      	mov	r5, sp
 800522e:	f106 0410 	add.w	r4, r6, #16
 8005232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800523a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800523e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005242:	1d33      	adds	r3, r6, #4
 8005244:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005246:	6838      	ldr	r0, [r7, #0]
 8005248:	f004 fb48 	bl	80098dc <USB_DevInit>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e00d      	b.n	800527a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f005 fc97 	bl	800aba6 <USB_DevDisconnect>

  return HAL_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3714      	adds	r7, #20
 800527e:	46bd      	mov	sp, r7
 8005280:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005282 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b084      	sub	sp, #16
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <HAL_PCD_Start+0x1c>
 800529a:	2302      	movs	r3, #2
 800529c:	e020      	b.n	80052e0 <HAL_PCD_Start+0x5e>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2201      	movs	r2, #1
 80052a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d109      	bne.n	80052c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d005      	beq.n	80052c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4618      	mov	r0, r3
 80052c8:	f004 fa9a 	bl	8009800 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f005 fc47 	bl	800ab64 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80052de:	2300      	movs	r3, #0
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b08d      	sub	sp, #52	; 0x34
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4618      	mov	r0, r3
 8005300:	f005 fd05 	bl	800ad0e <USB_GetMode>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	f040 848a 	bne.w	8005c20 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f005 fc69 	bl	800abe8 <USB_ReadInterrupts>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 8480 	beq.w	8005c1e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	0a1b      	lsrs	r3, r3, #8
 8005328:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f005 fc56 	bl	800abe8 <USB_ReadInterrupts>
 800533c:	4603      	mov	r3, r0
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b02      	cmp	r3, #2
 8005344:	d107      	bne.n	8005356 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	695a      	ldr	r2, [r3, #20]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f002 0202 	and.w	r2, r2, #2
 8005354:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f005 fc44 	bl	800abe8 <USB_ReadInterrupts>
 8005360:	4603      	mov	r3, r0
 8005362:	f003 0310 	and.w	r3, r3, #16
 8005366:	2b10      	cmp	r3, #16
 8005368:	d161      	bne.n	800542e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699a      	ldr	r2, [r3, #24]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0210 	bic.w	r2, r2, #16
 8005378:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800537a:	6a3b      	ldr	r3, [r7, #32]
 800537c:	6a1b      	ldr	r3, [r3, #32]
 800537e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f003 020f 	and.w	r2, r3, #15
 8005386:	4613      	mov	r3, r2
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	4413      	add	r3, r2
 8005396:	3304      	adds	r3, #4
 8005398:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	0c5b      	lsrs	r3, r3, #17
 800539e:	f003 030f 	and.w	r3, r3, #15
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d124      	bne.n	80053f0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80053ac:	4013      	ands	r3, r2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d035      	beq.n	800541e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	091b      	lsrs	r3, r3, #4
 80053ba:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	461a      	mov	r2, r3
 80053c4:	6a38      	ldr	r0, [r7, #32]
 80053c6:	f005 fa7b 	bl	800a8c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	691a      	ldr	r2, [r3, #16]
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	091b      	lsrs	r3, r3, #4
 80053d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053d6:	441a      	add	r2, r3
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	6a1a      	ldr	r2, [r3, #32]
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	091b      	lsrs	r3, r3, #4
 80053e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053e8:	441a      	add	r2, r3
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
 80053ee:	e016      	b.n	800541e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	0c5b      	lsrs	r3, r3, #17
 80053f4:	f003 030f 	and.w	r3, r3, #15
 80053f8:	2b06      	cmp	r3, #6
 80053fa:	d110      	bne.n	800541e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005402:	2208      	movs	r2, #8
 8005404:	4619      	mov	r1, r3
 8005406:	6a38      	ldr	r0, [r7, #32]
 8005408:	f005 fa5a 	bl	800a8c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	6a1a      	ldr	r2, [r3, #32]
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	091b      	lsrs	r3, r3, #4
 8005414:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005418:	441a      	add	r2, r3
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	699a      	ldr	r2, [r3, #24]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0210 	orr.w	r2, r2, #16
 800542c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4618      	mov	r0, r3
 8005434:	f005 fbd8 	bl	800abe8 <USB_ReadInterrupts>
 8005438:	4603      	mov	r3, r0
 800543a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800543e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005442:	f040 80a7 	bne.w	8005594 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f005 fbdd 	bl	800ac0e <USB_ReadDevAllOutEpInterrupt>
 8005454:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005456:	e099      	b.n	800558c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b00      	cmp	r3, #0
 8005460:	f000 808e 	beq.w	8005580 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f005 fc01 	bl	800ac76 <USB_ReadDevOutEPInterrupt>
 8005474:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00c      	beq.n	800549a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	461a      	mov	r2, r3
 800548e:	2301      	movs	r3, #1
 8005490:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 fec3 	bl	8006220 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00c      	beq.n	80054be <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b0:	461a      	mov	r2, r3
 80054b2:	2308      	movs	r3, #8
 80054b4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80054b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 ff99 	bl	80063f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	f003 0310 	and.w	r3, r3, #16
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	015a      	lsls	r2, r3, #5
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	4413      	add	r3, r2
 80054d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054d4:	461a      	mov	r2, r3
 80054d6:	2310      	movs	r3, #16
 80054d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d030      	beq.n	8005546 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80054e4:	6a3b      	ldr	r3, [r7, #32]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ec:	2b80      	cmp	r3, #128	; 0x80
 80054ee:	d109      	bne.n	8005504 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80054f0:	69fb      	ldr	r3, [r7, #28]
 80054f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	69fa      	ldr	r2, [r7, #28]
 80054fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005502:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005506:	4613      	mov	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	4413      	add	r3, r2
 8005516:	3304      	adds	r3, #4
 8005518:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	78db      	ldrb	r3, [r3, #3]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d108      	bne.n	8005534 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2200      	movs	r2, #0
 8005526:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	b2db      	uxtb	r3, r3
 800552c:	4619      	mov	r1, r3
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f007 ff92 	bl	800d458 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	015a      	lsls	r2, r3, #5
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	4413      	add	r3, r2
 800553c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005540:	461a      	mov	r2, r3
 8005542:	2302      	movs	r3, #2
 8005544:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f003 0320 	and.w	r3, r3, #32
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800555c:	461a      	mov	r2, r3
 800555e:	2320      	movs	r3, #32
 8005560:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d009      	beq.n	8005580 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800556c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	4413      	add	r3, r2
 8005574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005578:	461a      	mov	r2, r3
 800557a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800557e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005582:	3301      	adds	r3, #1
 8005584:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005588:	085b      	lsrs	r3, r3, #1
 800558a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	2b00      	cmp	r3, #0
 8005590:	f47f af62 	bne.w	8005458 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f005 fb25 	bl	800abe8 <USB_ReadInterrupts>
 800559e:	4603      	mov	r3, r0
 80055a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055a8:	f040 80db 	bne.w	8005762 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f005 fb46 	bl	800ac42 <USB_ReadDevAllInEpInterrupt>
 80055b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80055b8:	2300      	movs	r3, #0
 80055ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80055bc:	e0cd      	b.n	800575a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80055be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 80c2 	beq.w	800574e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d0:	b2d2      	uxtb	r2, r2
 80055d2:	4611      	mov	r1, r2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f005 fb6c 	bl	800acb2 <USB_ReadDevInEPInterrupt>
 80055da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d057      	beq.n	8005696 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	f003 030f 	and.w	r3, r3, #15
 80055ec:	2201      	movs	r2, #1
 80055ee:	fa02 f303 	lsl.w	r3, r2, r3
 80055f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	43db      	mvns	r3, r3
 8005600:	69f9      	ldr	r1, [r7, #28]
 8005602:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005606:	4013      	ands	r3, r2
 8005608:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005616:	461a      	mov	r2, r3
 8005618:	2301      	movs	r3, #1
 800561a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2b01      	cmp	r3, #1
 8005622:	d132      	bne.n	800568a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005624:	6879      	ldr	r1, [r7, #4]
 8005626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005628:	4613      	mov	r3, r2
 800562a:	00db      	lsls	r3, r3, #3
 800562c:	4413      	add	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	440b      	add	r3, r1
 8005632:	334c      	adds	r3, #76	; 0x4c
 8005634:	6819      	ldr	r1, [r3, #0]
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800563a:	4613      	mov	r3, r2
 800563c:	00db      	lsls	r3, r3, #3
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4403      	add	r3, r0
 8005644:	3348      	adds	r3, #72	; 0x48
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4419      	add	r1, r3
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800564e:	4613      	mov	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4403      	add	r3, r0
 8005658:	334c      	adds	r3, #76	; 0x4c
 800565a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	2b00      	cmp	r3, #0
 8005660:	d113      	bne.n	800568a <HAL_PCD_IRQHandler+0x3a2>
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005666:	4613      	mov	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	440b      	add	r3, r1
 8005670:	3354      	adds	r3, #84	; 0x54
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d108      	bne.n	800568a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6818      	ldr	r0, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005682:	461a      	mov	r2, r3
 8005684:	2101      	movs	r1, #1
 8005686:	f005 fb73 	bl	800ad70 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800568a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800568c:	b2db      	uxtb	r3, r3
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f007 fe5c 	bl	800d34e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b00      	cmp	r3, #0
 800569e:	d008      	beq.n	80056b2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ac:	461a      	mov	r2, r3
 80056ae:	2308      	movs	r3, #8
 80056b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f003 0310 	and.w	r3, r3, #16
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	015a      	lsls	r2, r3, #5
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	4413      	add	r3, r2
 80056c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c8:	461a      	mov	r2, r3
 80056ca:	2310      	movs	r3, #16
 80056cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d008      	beq.n	80056ea <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	015a      	lsls	r2, r3, #5
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	4413      	add	r3, r2
 80056e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e4:	461a      	mov	r2, r3
 80056e6:	2340      	movs	r3, #64	; 0x40
 80056e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d023      	beq.n	800573c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80056f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056f6:	6a38      	ldr	r0, [r7, #32]
 80056f8:	f004 fa54 	bl	8009ba4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80056fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fe:	4613      	mov	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	3338      	adds	r3, #56	; 0x38
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4413      	add	r3, r2
 800570c:	3304      	adds	r3, #4
 800570e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	78db      	ldrb	r3, [r3, #3]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d108      	bne.n	800572a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2200      	movs	r2, #0
 800571c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	b2db      	uxtb	r3, r3
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f007 fea9 	bl	800d47c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005736:	461a      	mov	r2, r3
 8005738:	2302      	movs	r3, #2
 800573a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005746:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fcdb 	bl	8006104 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	3301      	adds	r3, #1
 8005752:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	085b      	lsrs	r3, r3, #1
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800575a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575c:	2b00      	cmp	r3, #0
 800575e:	f47f af2e 	bne.w	80055be <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f005 fa3e 	bl	800abe8 <USB_ReadInterrupts>
 800576c:	4603      	mov	r3, r0
 800576e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005772:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005776:	d122      	bne.n	80057be <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005786:	f023 0301 	bic.w	r3, r3, #1
 800578a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005792:	2b01      	cmp	r3, #1
 8005794:	d108      	bne.n	80057a8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800579e:	2100      	movs	r1, #0
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fec3 	bl	800652c <HAL_PCDEx_LPM_Callback>
 80057a6:	e002      	b.n	80057ae <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f007 fe47 	bl	800d43c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	695a      	ldr	r2, [r3, #20]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80057bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4618      	mov	r0, r3
 80057c4:	f005 fa10 	bl	800abe8 <USB_ReadInterrupts>
 80057c8:	4603      	mov	r3, r0
 80057ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057d2:	d112      	bne.n	80057fa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d102      	bne.n	80057ea <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f007 fe03 	bl	800d3f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80057f8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4618      	mov	r0, r3
 8005800:	f005 f9f2 	bl	800abe8 <USB_ReadInterrupts>
 8005804:	4603      	mov	r3, r0
 8005806:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800580a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580e:	f040 80b7 	bne.w	8005980 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005820:	f023 0301 	bic.w	r3, r3, #1
 8005824:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2110      	movs	r1, #16
 800582c:	4618      	mov	r0, r3
 800582e:	f004 f9b9 	bl	8009ba4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005832:	2300      	movs	r3, #0
 8005834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005836:	e046      	b.n	80058c6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	461a      	mov	r2, r3
 8005846:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800584a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584e:	015a      	lsls	r2, r3, #5
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	4413      	add	r3, r2
 8005854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800585c:	0151      	lsls	r1, r2, #5
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	440a      	add	r2, r1
 8005862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005866:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800586a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	015a      	lsls	r2, r3, #5
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4413      	add	r3, r2
 8005874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005878:	461a      	mov	r2, r3
 800587a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800587e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005890:	0151      	lsls	r1, r2, #5
 8005892:	69fa      	ldr	r2, [r7, #28]
 8005894:	440a      	add	r2, r1
 8005896:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800589a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800589e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	69fb      	ldr	r3, [r7, #28]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058b0:	0151      	lsls	r1, r2, #5
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	440a      	add	r2, r1
 80058b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058be:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c2:	3301      	adds	r3, #1
 80058c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d3b3      	bcc.n	8005838 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80058d0:	69fb      	ldr	r3, [r7, #28]
 80058d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d6:	69db      	ldr	r3, [r3, #28]
 80058d8:	69fa      	ldr	r2, [r7, #28]
 80058da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058de:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80058e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d016      	beq.n	800591a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058f6:	69fa      	ldr	r2, [r7, #28]
 80058f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058fc:	f043 030b 	orr.w	r3, r3, #11
 8005900:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005912:	f043 030b 	orr.w	r3, r3, #11
 8005916:	6453      	str	r3, [r2, #68]	; 0x44
 8005918:	e015      	b.n	8005946 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	69fa      	ldr	r2, [r7, #28]
 8005924:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800592c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005930:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005940:	f043 030b 	orr.w	r3, r3, #11
 8005944:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	69fa      	ldr	r2, [r7, #28]
 8005950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005954:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005958:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6818      	ldr	r0, [r3, #0]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800596a:	461a      	mov	r2, r3
 800596c:	f005 fa00 	bl	800ad70 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695a      	ldr	r2, [r3, #20]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800597e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4618      	mov	r0, r3
 8005986:	f005 f92f 	bl	800abe8 <USB_ReadInterrupts>
 800598a:	4603      	mov	r3, r0
 800598c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005990:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005994:	d124      	bne.n	80059e0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f005 f9c5 	bl	800ad2a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f004 f97a 	bl	8009c9e <USB_GetDevSpeed>
 80059aa:	4603      	mov	r3, r0
 80059ac:	461a      	mov	r2, r3
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681c      	ldr	r4, [r3, #0]
 80059b6:	f001 fa29 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 80059ba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	4620      	mov	r0, r4
 80059c6:	f003 fe79 	bl	80096bc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f007 fce7 	bl	800d39e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695a      	ldr	r2, [r3, #20]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80059de:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f005 f8ff 	bl	800abe8 <USB_ReadInterrupts>
 80059ea:	4603      	mov	r3, r0
 80059ec:	f003 0308 	and.w	r3, r3, #8
 80059f0:	2b08      	cmp	r3, #8
 80059f2:	d10a      	bne.n	8005a0a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f007 fcc4 	bl	800d382 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695a      	ldr	r2, [r3, #20]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f002 0208 	and.w	r2, r2, #8
 8005a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f005 f8ea 	bl	800abe8 <USB_ReadInterrupts>
 8005a14:	4603      	mov	r3, r0
 8005a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d122      	bne.n	8005a64 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a2e:	e014      	b.n	8005a5a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a34:	4613      	mov	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	440b      	add	r3, r1
 8005a3e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d105      	bne.n	8005a54 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fb27 	bl	80060a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a56:	3301      	adds	r3, #1
 8005a58:	627b      	str	r3, [r7, #36]	; 0x24
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d3e5      	bcc.n	8005a30 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f005 f8bd 	bl	800abe8 <USB_ReadInterrupts>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a78:	d13b      	bne.n	8005af2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7e:	e02b      	b.n	8005ad8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a82:	015a      	lsls	r2, r3, #5
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	4413      	add	r3, r2
 8005a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005a90:	6879      	ldr	r1, [r7, #4]
 8005a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a94:	4613      	mov	r3, r2
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	4413      	add	r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	440b      	add	r3, r1
 8005a9e:	3340      	adds	r3, #64	; 0x40
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d115      	bne.n	8005ad2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005aa6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	da12      	bge.n	8005ad2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	440b      	add	r3, r1
 8005aba:	333f      	adds	r3, #63	; 0x3f
 8005abc:	2201      	movs	r2, #1
 8005abe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fae8 	bl	80060a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	685b      	ldr	r3, [r3, #4]
 8005adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ade:	429a      	cmp	r2, r3
 8005ae0:	d3ce      	bcc.n	8005a80 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f005 f876 	bl	800abe8 <USB_ReadInterrupts>
 8005afc:	4603      	mov	r3, r0
 8005afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b02:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b06:	d155      	bne.n	8005bb4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b08:	2301      	movs	r3, #1
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0c:	e045      	b.n	8005b9a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b22:	4613      	mov	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	440b      	add	r3, r1
 8005b2c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005b30:	781b      	ldrb	r3, [r3, #0]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d12e      	bne.n	8005b94 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	da2b      	bge.n	8005b94 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005b3c:	69bb      	ldr	r3, [r7, #24]
 8005b3e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005b48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b4c:	429a      	cmp	r2, r3
 8005b4e:	d121      	bne.n	8005b94 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b54:	4613      	mov	r3, r2
 8005b56:	00db      	lsls	r3, r3, #3
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	440b      	add	r3, r1
 8005b5e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b62:	2201      	movs	r2, #1
 8005b64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005b66:	6a3b      	ldr	r3, [r7, #32]
 8005b68:	699b      	ldr	r3, [r3, #24]
 8005b6a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005b6e:	6a3b      	ldr	r3, [r7, #32]
 8005b70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005b72:	6a3b      	ldr	r3, [r7, #32]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d10a      	bne.n	8005b94 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b90:	6053      	str	r3, [r2, #4]
            break;
 8005b92:	e007      	b.n	8005ba4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b96:	3301      	adds	r3, #1
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ba0:	429a      	cmp	r2, r3
 8005ba2:	d3b4      	bcc.n	8005b0e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005bb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f005 f815 	bl	800abe8 <USB_ReadInterrupts>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc8:	d10a      	bne.n	8005be0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f007 fc68 	bl	800d4a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	695a      	ldr	r2, [r3, #20]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005bde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f004 ffff 	bl	800abe8 <USB_ReadInterrupts>
 8005bea:	4603      	mov	r3, r0
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d115      	bne.n	8005c20 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d002      	beq.n	8005c0c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f007 fc58 	bl	800d4bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	6859      	ldr	r1, [r3, #4]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	605a      	str	r2, [r3, #4]
 8005c1c:	e000      	b.n	8005c20 <HAL_PCD_IRQHandler+0x938>
      return;
 8005c1e:	bf00      	nop
    }
  }
}
 8005c20:	3734      	adds	r7, #52	; 0x34
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd90      	pop	{r4, r7, pc}

08005c26 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b082      	sub	sp, #8
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	460b      	mov	r3, r1
 8005c30:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_PCD_SetAddress+0x1a>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e013      	b.n	8005c68 <HAL_PCD_SetAddress+0x42>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	78fa      	ldrb	r2, [r7, #3]
 8005c4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	78fa      	ldrb	r2, [r7, #3]
 8005c56:	4611      	mov	r1, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f004 ff5d 	bl	800ab18 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c66:	2300      	movs	r3, #0
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3708      	adds	r7, #8
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	4608      	mov	r0, r1
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	4603      	mov	r3, r0
 8005c80:	70fb      	strb	r3, [r7, #3]
 8005c82:	460b      	mov	r3, r1
 8005c84:	803b      	strh	r3, [r7, #0]
 8005c86:	4613      	mov	r3, r2
 8005c88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	da0f      	bge.n	8005cb6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	f003 020f 	and.w	r2, r3, #15
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	00db      	lsls	r3, r3, #3
 8005ca0:	4413      	add	r3, r2
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	3338      	adds	r3, #56	; 0x38
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	4413      	add	r3, r2
 8005caa:	3304      	adds	r3, #4
 8005cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	705a      	strb	r2, [r3, #1]
 8005cb4:	e00f      	b.n	8005cd6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cb6:	78fb      	ldrb	r3, [r7, #3]
 8005cb8:	f003 020f 	and.w	r2, r3, #15
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	4413      	add	r3, r2
 8005ccc:	3304      	adds	r3, #4
 8005cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	f003 030f 	and.w	r3, r3, #15
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005ce2:	883a      	ldrh	r2, [r7, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	78ba      	ldrb	r2, [r7, #2]
 8005cec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	785b      	ldrb	r3, [r3, #1]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d004      	beq.n	8005d00 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d00:	78bb      	ldrb	r3, [r7, #2]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d102      	bne.n	8005d0c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_PCD_EP_Open+0xaa>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e00e      	b.n	8005d38 <HAL_PCD_EP_Open+0xc8>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68f9      	ldr	r1, [r7, #12]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f003 ffdd 	bl	8009ce8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005d36:	7afb      	ldrb	r3, [r7, #11]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	da0f      	bge.n	8005d74 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	f003 020f 	and.w	r2, r3, #15
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	3338      	adds	r3, #56	; 0x38
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4413      	add	r3, r2
 8005d68:	3304      	adds	r3, #4
 8005d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2201      	movs	r2, #1
 8005d70:	705a      	strb	r2, [r3, #1]
 8005d72:	e00f      	b.n	8005d94 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d74:	78fb      	ldrb	r3, [r7, #3]
 8005d76:	f003 020f 	and.w	r2, r3, #15
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	00db      	lsls	r3, r3, #3
 8005d7e:	4413      	add	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	4413      	add	r3, r2
 8005d8a:	3304      	adds	r3, #4
 8005d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	f003 030f 	and.w	r3, r3, #15
 8005d9a:	b2da      	uxtb	r2, r3
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d101      	bne.n	8005dae <HAL_PCD_EP_Close+0x6e>
 8005daa:	2302      	movs	r3, #2
 8005dac:	e00e      	b.n	8005dcc <HAL_PCD_EP_Close+0x8c>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68f9      	ldr	r1, [r7, #12]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f004 f81b 	bl	8009df8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b086      	sub	sp, #24
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	603b      	str	r3, [r7, #0]
 8005de0:	460b      	mov	r3, r1
 8005de2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005de4:	7afb      	ldrb	r3, [r7, #11]
 8005de6:	f003 020f 	and.w	r2, r3, #15
 8005dea:	4613      	mov	r3, r2
 8005dec:	00db      	lsls	r3, r3, #3
 8005dee:	4413      	add	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	4413      	add	r3, r2
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2200      	movs	r2, #0
 8005e14:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e16:	7afb      	ldrb	r3, [r7, #11]
 8005e18:	f003 030f 	and.w	r3, r3, #15
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d102      	bne.n	8005e30 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e30:	7afb      	ldrb	r3, [r7, #11]
 8005e32:	f003 030f 	and.w	r3, r3, #15
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d109      	bne.n	8005e4e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6818      	ldr	r0, [r3, #0]
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	691b      	ldr	r3, [r3, #16]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	461a      	mov	r2, r3
 8005e46:	6979      	ldr	r1, [r7, #20]
 8005e48:	f004 fafa 	bl	800a440 <USB_EP0StartXfer>
 8005e4c:	e008      	b.n	8005e60 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	461a      	mov	r2, r3
 8005e5a:	6979      	ldr	r1, [r7, #20]
 8005e5c:	f004 f8a8 	bl	8009fb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3718      	adds	r7, #24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	460b      	mov	r3, r1
 8005e74:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	f003 020f 	and.w	r2, r3, #15
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	00db      	lsls	r3, r3, #3
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005e8c:	681b      	ldr	r3, [r3, #0]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	370c      	adds	r7, #12
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b086      	sub	sp, #24
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eaa:	7afb      	ldrb	r3, [r7, #11]
 8005eac:	f003 020f 	and.w	r2, r3, #15
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	00db      	lsls	r3, r3, #3
 8005eb4:	4413      	add	r3, r2
 8005eb6:	009b      	lsls	r3, r3, #2
 8005eb8:	3338      	adds	r3, #56	; 0x38
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	3304      	adds	r3, #4
 8005ec0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eda:	7afb      	ldrb	r3, [r7, #11]
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	691b      	ldr	r3, [r3, #16]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d102      	bne.n	8005ef4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ef4:	7afb      	ldrb	r3, [r7, #11]
 8005ef6:	f003 030f 	and.w	r3, r3, #15
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d109      	bne.n	8005f12 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6818      	ldr	r0, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6979      	ldr	r1, [r7, #20]
 8005f0c:	f004 fa98 	bl	800a440 <USB_EP0StartXfer>
 8005f10:	e008      	b.n	8005f24 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	6979      	ldr	r1, [r7, #20]
 8005f20:	f004 f846 	bl	8009fb0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	460b      	mov	r3, r1
 8005f38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f3a:	78fb      	ldrb	r3, [r7, #3]
 8005f3c:	f003 020f 	and.w	r2, r3, #15
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d901      	bls.n	8005f4c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e050      	b.n	8005fee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	da0f      	bge.n	8005f74 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f54:	78fb      	ldrb	r3, [r7, #3]
 8005f56:	f003 020f 	and.w	r2, r3, #15
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	00db      	lsls	r3, r3, #3
 8005f5e:	4413      	add	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	3338      	adds	r3, #56	; 0x38
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	4413      	add	r3, r2
 8005f68:	3304      	adds	r3, #4
 8005f6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	705a      	strb	r2, [r3, #1]
 8005f72:	e00d      	b.n	8005f90 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005f74:	78fa      	ldrb	r2, [r7, #3]
 8005f76:	4613      	mov	r3, r2
 8005f78:	00db      	lsls	r3, r3, #3
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	4413      	add	r3, r2
 8005f86:	3304      	adds	r3, #4
 8005f88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	2201      	movs	r2, #1
 8005f94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f96:	78fb      	ldrb	r3, [r7, #3]
 8005f98:	f003 030f 	and.w	r3, r3, #15
 8005f9c:	b2da      	uxtb	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d101      	bne.n	8005fb0 <HAL_PCD_EP_SetStall+0x82>
 8005fac:	2302      	movs	r3, #2
 8005fae:	e01e      	b.n	8005fee <HAL_PCD_EP_SetStall+0xc0>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68f9      	ldr	r1, [r7, #12]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f004 fcd6 	bl	800a970 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10a      	bne.n	8005fe4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6818      	ldr	r0, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	b2d9      	uxtb	r1, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fde:	461a      	mov	r2, r3
 8005fe0:	f004 fec6 	bl	800ad70 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3710      	adds	r7, #16
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}

08005ff6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	460b      	mov	r3, r1
 8006000:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006002:	78fb      	ldrb	r3, [r7, #3]
 8006004:	f003 020f 	and.w	r2, r3, #15
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	429a      	cmp	r2, r3
 800600e:	d901      	bls.n	8006014 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e042      	b.n	800609a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006014:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006018:	2b00      	cmp	r3, #0
 800601a:	da0f      	bge.n	800603c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800601c:	78fb      	ldrb	r3, [r7, #3]
 800601e:	f003 020f 	and.w	r2, r3, #15
 8006022:	4613      	mov	r3, r2
 8006024:	00db      	lsls	r3, r3, #3
 8006026:	4413      	add	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	3338      	adds	r3, #56	; 0x38
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	4413      	add	r3, r2
 8006030:	3304      	adds	r3, #4
 8006032:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	705a      	strb	r2, [r3, #1]
 800603a:	e00f      	b.n	800605c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800603c:	78fb      	ldrb	r3, [r7, #3]
 800603e:	f003 020f 	and.w	r2, r3, #15
 8006042:	4613      	mov	r3, r2
 8006044:	00db      	lsls	r3, r3, #3
 8006046:	4413      	add	r3, r2
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	4413      	add	r3, r2
 8006052:	3304      	adds	r3, #4
 8006054:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006062:	78fb      	ldrb	r3, [r7, #3]
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	b2da      	uxtb	r2, r3
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_PCD_EP_ClrStall+0x86>
 8006078:	2302      	movs	r3, #2
 800607a:	e00e      	b.n	800609a <HAL_PCD_EP_ClrStall+0xa4>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68f9      	ldr	r1, [r7, #12]
 800608a:	4618      	mov	r0, r3
 800608c:	f004 fcde 	bl	800aa4c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}

080060a2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b084      	sub	sp, #16
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
 80060aa:	460b      	mov	r3, r1
 80060ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80060ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	da0c      	bge.n	80060d0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060b6:	78fb      	ldrb	r3, [r7, #3]
 80060b8:	f003 020f 	and.w	r2, r3, #15
 80060bc:	4613      	mov	r3, r2
 80060be:	00db      	lsls	r3, r3, #3
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	3338      	adds	r3, #56	; 0x38
 80060c6:	687a      	ldr	r2, [r7, #4]
 80060c8:	4413      	add	r3, r2
 80060ca:	3304      	adds	r3, #4
 80060cc:	60fb      	str	r3, [r7, #12]
 80060ce:	e00c      	b.n	80060ea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	f003 020f 	and.w	r2, r3, #15
 80060d6:	4613      	mov	r3, r2
 80060d8:	00db      	lsls	r3, r3, #3
 80060da:	4413      	add	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	4413      	add	r3, r2
 80060e6:	3304      	adds	r3, #4
 80060e8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f004 fafd 	bl	800a6f0 <USB_EPStopXfer>
 80060f6:	4603      	mov	r3, r0
 80060f8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80060fa:	7afb      	ldrb	r3, [r7, #11]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08a      	sub	sp, #40	; 0x28
 8006108:	af02      	add	r7, sp, #8
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	4613      	mov	r3, r2
 800611c:	00db      	lsls	r3, r3, #3
 800611e:	4413      	add	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	3338      	adds	r3, #56	; 0x38
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	4413      	add	r3, r2
 8006128:	3304      	adds	r3, #4
 800612a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1a      	ldr	r2, [r3, #32]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	699b      	ldr	r3, [r3, #24]
 8006134:	429a      	cmp	r2, r3
 8006136:	d901      	bls.n	800613c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e06c      	b.n	8006216 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	699a      	ldr	r2, [r3, #24]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6a1b      	ldr	r3, [r3, #32]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	68db      	ldr	r3, [r3, #12]
 800614c:	69fa      	ldr	r2, [r7, #28]
 800614e:	429a      	cmp	r2, r3
 8006150:	d902      	bls.n	8006158 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	3303      	adds	r3, #3
 800615c:	089b      	lsrs	r3, r3, #2
 800615e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006160:	e02b      	b.n	80061ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	429a      	cmp	r2, r3
 8006176:	d902      	bls.n	800617e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	3303      	adds	r3, #3
 8006182:	089b      	lsrs	r3, r3, #2
 8006184:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6919      	ldr	r1, [r3, #16]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	b2da      	uxtb	r2, r3
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006196:	b2db      	uxtb	r3, r3
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	4603      	mov	r3, r0
 800619c:	6978      	ldr	r0, [r7, #20]
 800619e:	f004 fb51 	bl	800a844 <USB_WritePacket>

    ep->xfer_buff  += len;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	691a      	ldr	r2, [r3, #16]
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	441a      	add	r2, r3
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6a1a      	ldr	r2, [r3, #32]
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	441a      	add	r2, r3
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	015a      	lsls	r2, r3, #5
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	4413      	add	r3, r2
 80061c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	b29b      	uxth	r3, r3
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d809      	bhi.n	80061e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a1a      	ldr	r2, [r3, #32]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061d8:	429a      	cmp	r2, r3
 80061da:	d203      	bcs.n	80061e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1be      	bne.n	8006162 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	699a      	ldr	r2, [r3, #24]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d811      	bhi.n	8006214 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	2201      	movs	r2, #1
 80061f8:	fa02 f303 	lsl.w	r3, r2, r3
 80061fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	43db      	mvns	r3, r3
 800620a:	6939      	ldr	r1, [r7, #16]
 800620c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006210:	4013      	ands	r3, r2
 8006212:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006214:	2300      	movs	r3, #0
}
 8006216:	4618      	mov	r0, r3
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
	...

08006220 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006234:	69fb      	ldr	r3, [r7, #28]
 8006236:	333c      	adds	r3, #60	; 0x3c
 8006238:	3304      	adds	r3, #4
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	69bb      	ldr	r3, [r7, #24]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d17b      	bne.n	800634e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	f003 0308 	and.w	r3, r3, #8
 800625c:	2b00      	cmp	r3, #0
 800625e:	d015      	beq.n	800628c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	4a61      	ldr	r2, [pc, #388]	; (80063e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	f240 80b9 	bls.w	80063dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 80b3 	beq.w	80063dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	015a      	lsls	r2, r3, #5
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	4413      	add	r3, r2
 800627e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006282:	461a      	mov	r2, r3
 8006284:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006288:	6093      	str	r3, [r2, #8]
 800628a:	e0a7      	b.n	80063dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d009      	beq.n	80062aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062a2:	461a      	mov	r2, r3
 80062a4:	2320      	movs	r3, #32
 80062a6:	6093      	str	r3, [r2, #8]
 80062a8:	e098      	b.n	80063dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f040 8093 	bne.w	80063dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	4a4b      	ldr	r2, [pc, #300]	; (80063e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d90f      	bls.n	80062de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d4:	461a      	mov	r2, r3
 80062d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062da:	6093      	str	r3, [r2, #8]
 80062dc:	e07e      	b.n	80063dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	4613      	mov	r3, r2
 80062e2:	00db      	lsls	r3, r3, #3
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	4413      	add	r3, r2
 80062f0:	3304      	adds	r3, #4
 80062f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	69da      	ldr	r2, [r3, #28]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	0159      	lsls	r1, r3, #5
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	440b      	add	r3, r1
 8006300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800630a:	1ad2      	subs	r2, r2, r3
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d114      	bne.n	8006340 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d109      	bne.n	8006332 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006328:	461a      	mov	r2, r3
 800632a:	2101      	movs	r1, #1
 800632c:	f004 fd20 	bl	800ad70 <USB_EP0_OutStart>
 8006330:	e006      	b.n	8006340 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	691a      	ldr	r2, [r3, #16]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6a1b      	ldr	r3, [r3, #32]
 800633a:	441a      	add	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	b2db      	uxtb	r3, r3
 8006344:	4619      	mov	r1, r3
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f006 ffe6 	bl	800d318 <HAL_PCD_DataOutStageCallback>
 800634c:	e046      	b.n	80063dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	4a26      	ldr	r2, [pc, #152]	; (80063ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d124      	bne.n	80063a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00a      	beq.n	8006376 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636c:	461a      	mov	r2, r3
 800636e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006372:	6093      	str	r3, [r2, #8]
 8006374:	e032      	b.n	80063dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f003 0320 	and.w	r3, r3, #32
 800637c:	2b00      	cmp	r3, #0
 800637e:	d008      	beq.n	8006392 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	69bb      	ldr	r3, [r7, #24]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800638c:	461a      	mov	r2, r3
 800638e:	2320      	movs	r3, #32
 8006390:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	b2db      	uxtb	r3, r3
 8006396:	4619      	mov	r1, r3
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f006 ffbd 	bl	800d318 <HAL_PCD_DataOutStageCallback>
 800639e:	e01d      	b.n	80063dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d114      	bne.n	80063d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80063a6:	6879      	ldr	r1, [r7, #4]
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	4613      	mov	r3, r2
 80063ac:	00db      	lsls	r3, r3, #3
 80063ae:	4413      	add	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	440b      	add	r3, r1
 80063b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d108      	bne.n	80063d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6818      	ldr	r0, [r3, #0]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063c8:	461a      	mov	r2, r3
 80063ca:	2100      	movs	r1, #0
 80063cc:	f004 fcd0 	bl	800ad70 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	4619      	mov	r1, r3
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f006 ff9e 	bl	800d318 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3720      	adds	r7, #32
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	4f54300a 	.word	0x4f54300a
 80063ec:	4f54310a 	.word	0x4f54310a

080063f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	333c      	adds	r3, #60	; 0x3c
 8006408:	3304      	adds	r3, #4
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	015a      	lsls	r2, r3, #5
 8006412:	693b      	ldr	r3, [r7, #16]
 8006414:	4413      	add	r3, r2
 8006416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4a15      	ldr	r2, [pc, #84]	; (8006478 <PCD_EP_OutSetupPacket_int+0x88>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d90e      	bls.n	8006444 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800642c:	2b00      	cmp	r3, #0
 800642e:	d009      	beq.n	8006444 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	015a      	lsls	r2, r3, #5
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	4413      	add	r3, r2
 8006438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643c:	461a      	mov	r2, r3
 800643e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006442:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f006 ff55 	bl	800d2f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4a0a      	ldr	r2, [pc, #40]	; (8006478 <PCD_EP_OutSetupPacket_int+0x88>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d90c      	bls.n	800646c <PCD_EP_OutSetupPacket_int+0x7c>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d108      	bne.n	800646c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6818      	ldr	r0, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006464:	461a      	mov	r2, r3
 8006466:	2101      	movs	r1, #1
 8006468:	f004 fc82 	bl	800ad70 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3718      	adds	r7, #24
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}
 8006476:	bf00      	nop
 8006478:	4f54300a 	.word	0x4f54300a

0800647c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
 8006488:	4613      	mov	r3, r2
 800648a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006494:	78fb      	ldrb	r3, [r7, #3]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d107      	bne.n	80064aa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800649a:	883b      	ldrh	r3, [r7, #0]
 800649c:	0419      	lsls	r1, r3, #16
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	430a      	orrs	r2, r1
 80064a6:	629a      	str	r2, [r3, #40]	; 0x28
 80064a8:	e028      	b.n	80064fc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	0c1b      	lsrs	r3, r3, #16
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	4413      	add	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80064b8:	2300      	movs	r3, #0
 80064ba:	73fb      	strb	r3, [r7, #15]
 80064bc:	e00d      	b.n	80064da <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	3340      	adds	r3, #64	; 0x40
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	4413      	add	r3, r2
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	0c1b      	lsrs	r3, r3, #16
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	4413      	add	r3, r2
 80064d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	3301      	adds	r3, #1
 80064d8:	73fb      	strb	r3, [r7, #15]
 80064da:	7bfa      	ldrb	r2, [r7, #15]
 80064dc:	78fb      	ldrb	r3, [r7, #3]
 80064de:	3b01      	subs	r3, #1
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d3ec      	bcc.n	80064be <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80064e4:	883b      	ldrh	r3, [r7, #0]
 80064e6:	0418      	lsls	r0, r3, #16
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6819      	ldr	r1, [r3, #0]
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	4302      	orrs	r2, r0
 80064f4:	3340      	adds	r3, #64	; 0x40
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800650a:	b480      	push	{r7}
 800650c:	b083      	sub	sp, #12
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	887a      	ldrh	r2, [r7, #2]
 800651c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	460b      	mov	r3, r1
 8006536:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e267      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 0301 	and.w	r3, r3, #1
 800655e:	2b00      	cmp	r3, #0
 8006560:	d075      	beq.n	800664e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006562:	4b88      	ldr	r3, [pc, #544]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f003 030c 	and.w	r3, r3, #12
 800656a:	2b04      	cmp	r3, #4
 800656c:	d00c      	beq.n	8006588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800656e:	4b85      	ldr	r3, [pc, #532]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006576:	2b08      	cmp	r3, #8
 8006578:	d112      	bne.n	80065a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800657a:	4b82      	ldr	r3, [pc, #520]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006586:	d10b      	bne.n	80065a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006588:	4b7e      	ldr	r3, [pc, #504]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006590:	2b00      	cmp	r3, #0
 8006592:	d05b      	beq.n	800664c <HAL_RCC_OscConfig+0x108>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d157      	bne.n	800664c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e242      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065a8:	d106      	bne.n	80065b8 <HAL_RCC_OscConfig+0x74>
 80065aa:	4b76      	ldr	r3, [pc, #472]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a75      	ldr	r2, [pc, #468]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b4:	6013      	str	r3, [r2, #0]
 80065b6:	e01d      	b.n	80065f4 <HAL_RCC_OscConfig+0xb0>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065c0:	d10c      	bne.n	80065dc <HAL_RCC_OscConfig+0x98>
 80065c2:	4b70      	ldr	r3, [pc, #448]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a6f      	ldr	r2, [pc, #444]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065cc:	6013      	str	r3, [r2, #0]
 80065ce:	4b6d      	ldr	r3, [pc, #436]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a6c      	ldr	r2, [pc, #432]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065d8:	6013      	str	r3, [r2, #0]
 80065da:	e00b      	b.n	80065f4 <HAL_RCC_OscConfig+0xb0>
 80065dc:	4b69      	ldr	r3, [pc, #420]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a68      	ldr	r2, [pc, #416]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065e6:	6013      	str	r3, [r2, #0]
 80065e8:	4b66      	ldr	r3, [pc, #408]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a65      	ldr	r2, [pc, #404]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80065ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d013      	beq.n	8006624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065fc:	f7fd fad0 	bl	8003ba0 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006602:	e008      	b.n	8006616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006604:	f7fd facc 	bl	8003ba0 <HAL_GetTick>
 8006608:	4602      	mov	r2, r0
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	2b64      	cmp	r3, #100	; 0x64
 8006610:	d901      	bls.n	8006616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006612:	2303      	movs	r3, #3
 8006614:	e207      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006616:	4b5b      	ldr	r3, [pc, #364]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d0f0      	beq.n	8006604 <HAL_RCC_OscConfig+0xc0>
 8006622:	e014      	b.n	800664e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006624:	f7fd fabc 	bl	8003ba0 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800662c:	f7fd fab8 	bl	8003ba0 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b64      	cmp	r3, #100	; 0x64
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e1f3      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800663e:	4b51      	ldr	r3, [pc, #324]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d1f0      	bne.n	800662c <HAL_RCC_OscConfig+0xe8>
 800664a:	e000      	b.n	800664e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800664c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f003 0302 	and.w	r3, r3, #2
 8006656:	2b00      	cmp	r3, #0
 8006658:	d063      	beq.n	8006722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800665a:	4b4a      	ldr	r3, [pc, #296]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f003 030c 	and.w	r3, r3, #12
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00b      	beq.n	800667e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006666:	4b47      	ldr	r3, [pc, #284]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800666e:	2b08      	cmp	r3, #8
 8006670:	d11c      	bne.n	80066ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006672:	4b44      	ldr	r3, [pc, #272]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d116      	bne.n	80066ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800667e:	4b41      	ldr	r3, [pc, #260]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d005      	beq.n	8006696 <HAL_RCC_OscConfig+0x152>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	2b01      	cmp	r3, #1
 8006690:	d001      	beq.n	8006696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	e1c7      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006696:	4b3b      	ldr	r3, [pc, #236]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	00db      	lsls	r3, r3, #3
 80066a4:	4937      	ldr	r1, [pc, #220]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066aa:	e03a      	b.n	8006722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d020      	beq.n	80066f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066b4:	4b34      	ldr	r3, [pc, #208]	; (8006788 <HAL_RCC_OscConfig+0x244>)
 80066b6:	2201      	movs	r2, #1
 80066b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066ba:	f7fd fa71 	bl	8003ba0 <HAL_GetTick>
 80066be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c0:	e008      	b.n	80066d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066c2:	f7fd fa6d 	bl	8003ba0 <HAL_GetTick>
 80066c6:	4602      	mov	r2, r0
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	2b02      	cmp	r3, #2
 80066ce:	d901      	bls.n	80066d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e1a8      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066d4:	4b2b      	ldr	r3, [pc, #172]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d0f0      	beq.n	80066c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e0:	4b28      	ldr	r3, [pc, #160]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	4925      	ldr	r1, [pc, #148]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	600b      	str	r3, [r1, #0]
 80066f4:	e015      	b.n	8006722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066f6:	4b24      	ldr	r3, [pc, #144]	; (8006788 <HAL_RCC_OscConfig+0x244>)
 80066f8:	2200      	movs	r2, #0
 80066fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fc:	f7fd fa50 	bl	8003ba0 <HAL_GetTick>
 8006700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006702:	e008      	b.n	8006716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006704:	f7fd fa4c 	bl	8003ba0 <HAL_GetTick>
 8006708:	4602      	mov	r2, r0
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	2b02      	cmp	r3, #2
 8006710:	d901      	bls.n	8006716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006712:	2303      	movs	r3, #3
 8006714:	e187      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006716:	4b1b      	ldr	r3, [pc, #108]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0302 	and.w	r3, r3, #2
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1f0      	bne.n	8006704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0308 	and.w	r3, r3, #8
 800672a:	2b00      	cmp	r3, #0
 800672c:	d036      	beq.n	800679c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d016      	beq.n	8006764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006736:	4b15      	ldr	r3, [pc, #84]	; (800678c <HAL_RCC_OscConfig+0x248>)
 8006738:	2201      	movs	r2, #1
 800673a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673c:	f7fd fa30 	bl	8003ba0 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006744:	f7fd fa2c 	bl	8003ba0 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e167      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006756:	4b0b      	ldr	r3, [pc, #44]	; (8006784 <HAL_RCC_OscConfig+0x240>)
 8006758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d0f0      	beq.n	8006744 <HAL_RCC_OscConfig+0x200>
 8006762:	e01b      	b.n	800679c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006764:	4b09      	ldr	r3, [pc, #36]	; (800678c <HAL_RCC_OscConfig+0x248>)
 8006766:	2200      	movs	r2, #0
 8006768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800676a:	f7fd fa19 	bl	8003ba0 <HAL_GetTick>
 800676e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006770:	e00e      	b.n	8006790 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006772:	f7fd fa15 	bl	8003ba0 <HAL_GetTick>
 8006776:	4602      	mov	r2, r0
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	1ad3      	subs	r3, r2, r3
 800677c:	2b02      	cmp	r3, #2
 800677e:	d907      	bls.n	8006790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006780:	2303      	movs	r3, #3
 8006782:	e150      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
 8006784:	40023800 	.word	0x40023800
 8006788:	42470000 	.word	0x42470000
 800678c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006790:	4b88      	ldr	r3, [pc, #544]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1ea      	bne.n	8006772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 8097 	beq.w	80068d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067aa:	2300      	movs	r3, #0
 80067ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ae:	4b81      	ldr	r3, [pc, #516]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10f      	bne.n	80067da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067ba:	2300      	movs	r3, #0
 80067bc:	60bb      	str	r3, [r7, #8]
 80067be:	4b7d      	ldr	r3, [pc, #500]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80067c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c2:	4a7c      	ldr	r2, [pc, #496]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80067c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c8:	6413      	str	r3, [r2, #64]	; 0x40
 80067ca:	4b7a      	ldr	r3, [pc, #488]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067d2:	60bb      	str	r3, [r7, #8]
 80067d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067d6:	2301      	movs	r3, #1
 80067d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067da:	4b77      	ldr	r3, [pc, #476]	; (80069b8 <HAL_RCC_OscConfig+0x474>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d118      	bne.n	8006818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067e6:	4b74      	ldr	r3, [pc, #464]	; (80069b8 <HAL_RCC_OscConfig+0x474>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a73      	ldr	r2, [pc, #460]	; (80069b8 <HAL_RCC_OscConfig+0x474>)
 80067ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067f2:	f7fd f9d5 	bl	8003ba0 <HAL_GetTick>
 80067f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067f8:	e008      	b.n	800680c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067fa:	f7fd f9d1 	bl	8003ba0 <HAL_GetTick>
 80067fe:	4602      	mov	r2, r0
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	1ad3      	subs	r3, r2, r3
 8006804:	2b02      	cmp	r3, #2
 8006806:	d901      	bls.n	800680c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006808:	2303      	movs	r3, #3
 800680a:	e10c      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800680c:	4b6a      	ldr	r3, [pc, #424]	; (80069b8 <HAL_RCC_OscConfig+0x474>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006814:	2b00      	cmp	r3, #0
 8006816:	d0f0      	beq.n	80067fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	2b01      	cmp	r3, #1
 800681e:	d106      	bne.n	800682e <HAL_RCC_OscConfig+0x2ea>
 8006820:	4b64      	ldr	r3, [pc, #400]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006824:	4a63      	ldr	r2, [pc, #396]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006826:	f043 0301 	orr.w	r3, r3, #1
 800682a:	6713      	str	r3, [r2, #112]	; 0x70
 800682c:	e01c      	b.n	8006868 <HAL_RCC_OscConfig+0x324>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2b05      	cmp	r3, #5
 8006834:	d10c      	bne.n	8006850 <HAL_RCC_OscConfig+0x30c>
 8006836:	4b5f      	ldr	r3, [pc, #380]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683a:	4a5e      	ldr	r2, [pc, #376]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 800683c:	f043 0304 	orr.w	r3, r3, #4
 8006840:	6713      	str	r3, [r2, #112]	; 0x70
 8006842:	4b5c      	ldr	r3, [pc, #368]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006846:	4a5b      	ldr	r2, [pc, #364]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	6713      	str	r3, [r2, #112]	; 0x70
 800684e:	e00b      	b.n	8006868 <HAL_RCC_OscConfig+0x324>
 8006850:	4b58      	ldr	r3, [pc, #352]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	4a57      	ldr	r2, [pc, #348]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006856:	f023 0301 	bic.w	r3, r3, #1
 800685a:	6713      	str	r3, [r2, #112]	; 0x70
 800685c:	4b55      	ldr	r3, [pc, #340]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 800685e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006860:	4a54      	ldr	r2, [pc, #336]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006862:	f023 0304 	bic.w	r3, r3, #4
 8006866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d015      	beq.n	800689c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006870:	f7fd f996 	bl	8003ba0 <HAL_GetTick>
 8006874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006876:	e00a      	b.n	800688e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006878:	f7fd f992 	bl	8003ba0 <HAL_GetTick>
 800687c:	4602      	mov	r2, r0
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	f241 3288 	movw	r2, #5000	; 0x1388
 8006886:	4293      	cmp	r3, r2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e0cb      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800688e:	4b49      	ldr	r3, [pc, #292]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d0ee      	beq.n	8006878 <HAL_RCC_OscConfig+0x334>
 800689a:	e014      	b.n	80068c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800689c:	f7fd f980 	bl	8003ba0 <HAL_GetTick>
 80068a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068a2:	e00a      	b.n	80068ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068a4:	f7fd f97c 	bl	8003ba0 <HAL_GetTick>
 80068a8:	4602      	mov	r2, r0
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e0b5      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068ba:	4b3e      	ldr	r3, [pc, #248]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80068bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068be:	f003 0302 	and.w	r3, r3, #2
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1ee      	bne.n	80068a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80068c6:	7dfb      	ldrb	r3, [r7, #23]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d105      	bne.n	80068d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068cc:	4b39      	ldr	r3, [pc, #228]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80068ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d0:	4a38      	ldr	r2, [pc, #224]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80068d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 80a1 	beq.w	8006a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068e2:	4b34      	ldr	r3, [pc, #208]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f003 030c 	and.w	r3, r3, #12
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d05c      	beq.n	80069a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d141      	bne.n	800697a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068f6:	4b31      	ldr	r3, [pc, #196]	; (80069bc <HAL_RCC_OscConfig+0x478>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068fc:	f7fd f950 	bl	8003ba0 <HAL_GetTick>
 8006900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006902:	e008      	b.n	8006916 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006904:	f7fd f94c 	bl	8003ba0 <HAL_GetTick>
 8006908:	4602      	mov	r2, r0
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	2b02      	cmp	r3, #2
 8006910:	d901      	bls.n	8006916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e087      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006916:	4b27      	ldr	r3, [pc, #156]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1f0      	bne.n	8006904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	69da      	ldr	r2, [r3, #28]
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a1b      	ldr	r3, [r3, #32]
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006930:	019b      	lsls	r3, r3, #6
 8006932:	431a      	orrs	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006938:	085b      	lsrs	r3, r3, #1
 800693a:	3b01      	subs	r3, #1
 800693c:	041b      	lsls	r3, r3, #16
 800693e:	431a      	orrs	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006944:	061b      	lsls	r3, r3, #24
 8006946:	491b      	ldr	r1, [pc, #108]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 8006948:	4313      	orrs	r3, r2
 800694a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800694c:	4b1b      	ldr	r3, [pc, #108]	; (80069bc <HAL_RCC_OscConfig+0x478>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006952:	f7fd f925 	bl	8003ba0 <HAL_GetTick>
 8006956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800695a:	f7fd f921 	bl	8003ba0 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e05c      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800696c:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0f0      	beq.n	800695a <HAL_RCC_OscConfig+0x416>
 8006978:	e054      	b.n	8006a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800697a:	4b10      	ldr	r3, [pc, #64]	; (80069bc <HAL_RCC_OscConfig+0x478>)
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006980:	f7fd f90e 	bl	8003ba0 <HAL_GetTick>
 8006984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006986:	e008      	b.n	800699a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006988:	f7fd f90a 	bl	8003ba0 <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	2b02      	cmp	r3, #2
 8006994:	d901      	bls.n	800699a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e045      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800699a:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <HAL_RCC_OscConfig+0x470>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1f0      	bne.n	8006988 <HAL_RCC_OscConfig+0x444>
 80069a6:	e03d      	b.n	8006a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	699b      	ldr	r3, [r3, #24]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d107      	bne.n	80069c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e038      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
 80069b4:	40023800 	.word	0x40023800
 80069b8:	40007000 	.word	0x40007000
 80069bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069c0:	4b1b      	ldr	r3, [pc, #108]	; (8006a30 <HAL_RCC_OscConfig+0x4ec>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	699b      	ldr	r3, [r3, #24]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d028      	beq.n	8006a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069d8:	429a      	cmp	r2, r3
 80069da:	d121      	bne.n	8006a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d11a      	bne.n	8006a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80069f0:	4013      	ands	r3, r2
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d111      	bne.n	8006a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a06:	085b      	lsrs	r3, r3, #1
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d107      	bne.n	8006a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d001      	beq.n	8006a24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	40023800 	.word	0x40023800

08006a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e0cc      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a48:	4b68      	ldr	r3, [pc, #416]	; (8006bec <HAL_RCC_ClockConfig+0x1b8>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d90c      	bls.n	8006a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a56:	4b65      	ldr	r3, [pc, #404]	; (8006bec <HAL_RCC_ClockConfig+0x1b8>)
 8006a58:	683a      	ldr	r2, [r7, #0]
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a5e:	4b63      	ldr	r3, [pc, #396]	; (8006bec <HAL_RCC_ClockConfig+0x1b8>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 0307 	and.w	r3, r3, #7
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d001      	beq.n	8006a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e0b8      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d020      	beq.n	8006abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d005      	beq.n	8006a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a88:	4b59      	ldr	r3, [pc, #356]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	4a58      	ldr	r2, [pc, #352]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0308 	and.w	r3, r3, #8
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d005      	beq.n	8006aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006aa0:	4b53      	ldr	r3, [pc, #332]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	4a52      	ldr	r2, [pc, #328]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aac:	4b50      	ldr	r3, [pc, #320]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	494d      	ldr	r1, [pc, #308]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0301 	and.w	r3, r3, #1
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d044      	beq.n	8006b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	685b      	ldr	r3, [r3, #4]
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d107      	bne.n	8006ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ad2:	4b47      	ldr	r3, [pc, #284]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d119      	bne.n	8006b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e07f      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d003      	beq.n	8006af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006aee:	2b03      	cmp	r3, #3
 8006af0:	d107      	bne.n	8006b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af2:	4b3f      	ldr	r3, [pc, #252]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d109      	bne.n	8006b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e06f      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b02:	4b3b      	ldr	r3, [pc, #236]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0302 	and.w	r3, r3, #2
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e067      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b12:	4b37      	ldr	r3, [pc, #220]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f023 0203 	bic.w	r2, r3, #3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	4934      	ldr	r1, [pc, #208]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b24:	f7fd f83c 	bl	8003ba0 <HAL_GetTick>
 8006b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b2a:	e00a      	b.n	8006b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b2c:	f7fd f838 	bl	8003ba0 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d901      	bls.n	8006b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b3e:	2303      	movs	r3, #3
 8006b40:	e04f      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b42:	4b2b      	ldr	r3, [pc, #172]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f003 020c 	and.w	r2, r3, #12
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d1eb      	bne.n	8006b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b54:	4b25      	ldr	r3, [pc, #148]	; (8006bec <HAL_RCC_ClockConfig+0x1b8>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d20c      	bcs.n	8006b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b62:	4b22      	ldr	r3, [pc, #136]	; (8006bec <HAL_RCC_ClockConfig+0x1b8>)
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6a:	4b20      	ldr	r3, [pc, #128]	; (8006bec <HAL_RCC_ClockConfig+0x1b8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d001      	beq.n	8006b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e032      	b.n	8006be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0304 	and.w	r3, r3, #4
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d008      	beq.n	8006b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b88:	4b19      	ldr	r3, [pc, #100]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	4916      	ldr	r1, [pc, #88]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0308 	and.w	r3, r3, #8
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d009      	beq.n	8006bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ba6:	4b12      	ldr	r3, [pc, #72]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	00db      	lsls	r3, r3, #3
 8006bb4:	490e      	ldr	r1, [pc, #56]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006bba:	f000 f821 	bl	8006c00 <HAL_RCC_GetSysClockFreq>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	091b      	lsrs	r3, r3, #4
 8006bc6:	f003 030f 	and.w	r3, r3, #15
 8006bca:	490a      	ldr	r1, [pc, #40]	; (8006bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8006bcc:	5ccb      	ldrb	r3, [r1, r3]
 8006bce:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd2:	4a09      	ldr	r2, [pc, #36]	; (8006bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006bd6:	4b09      	ldr	r3, [pc, #36]	; (8006bfc <HAL_RCC_ClockConfig+0x1c8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fc ff9c 	bl	8003b18 <HAL_InitTick>

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	40023c00 	.word	0x40023c00
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	08010630 	.word	0x08010630
 8006bf8:	20000000 	.word	0x20000000
 8006bfc:	20000004 	.word	0x20000004

08006c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c04:	b094      	sub	sp, #80	; 0x50
 8006c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c10:	2300      	movs	r3, #0
 8006c12:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c18:	4b79      	ldr	r3, [pc, #484]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f003 030c 	and.w	r3, r3, #12
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d00d      	beq.n	8006c40 <HAL_RCC_GetSysClockFreq+0x40>
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	f200 80e1 	bhi.w	8006dec <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <HAL_RCC_GetSysClockFreq+0x34>
 8006c2e:	2b04      	cmp	r3, #4
 8006c30:	d003      	beq.n	8006c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c32:	e0db      	b.n	8006dec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c34:	4b73      	ldr	r3, [pc, #460]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c36:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c38:	e0db      	b.n	8006df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c3a:	4b73      	ldr	r3, [pc, #460]	; (8006e08 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c3e:	e0d8      	b.n	8006df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c40:	4b6f      	ldr	r3, [pc, #444]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c48:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c4a:	4b6d      	ldr	r3, [pc, #436]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d063      	beq.n	8006d1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c56:	4b6a      	ldr	r3, [pc, #424]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	099b      	lsrs	r3, r3, #6
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c60:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c68:	633b      	str	r3, [r7, #48]	; 0x30
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8006c6e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c72:	4622      	mov	r2, r4
 8006c74:	462b      	mov	r3, r5
 8006c76:	f04f 0000 	mov.w	r0, #0
 8006c7a:	f04f 0100 	mov.w	r1, #0
 8006c7e:	0159      	lsls	r1, r3, #5
 8006c80:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c84:	0150      	lsls	r0, r2, #5
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	1a51      	subs	r1, r2, r1
 8006c8e:	6139      	str	r1, [r7, #16]
 8006c90:	4629      	mov	r1, r5
 8006c92:	eb63 0301 	sbc.w	r3, r3, r1
 8006c96:	617b      	str	r3, [r7, #20]
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ca4:	4659      	mov	r1, fp
 8006ca6:	018b      	lsls	r3, r1, #6
 8006ca8:	4651      	mov	r1, sl
 8006caa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cae:	4651      	mov	r1, sl
 8006cb0:	018a      	lsls	r2, r1, #6
 8006cb2:	4651      	mov	r1, sl
 8006cb4:	ebb2 0801 	subs.w	r8, r2, r1
 8006cb8:	4659      	mov	r1, fp
 8006cba:	eb63 0901 	sbc.w	r9, r3, r1
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cd2:	4690      	mov	r8, r2
 8006cd4:	4699      	mov	r9, r3
 8006cd6:	4623      	mov	r3, r4
 8006cd8:	eb18 0303 	adds.w	r3, r8, r3
 8006cdc:	60bb      	str	r3, [r7, #8]
 8006cde:	462b      	mov	r3, r5
 8006ce0:	eb49 0303 	adc.w	r3, r9, r3
 8006ce4:	60fb      	str	r3, [r7, #12]
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	024b      	lsls	r3, r1, #9
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006cfc:	4621      	mov	r1, r4
 8006cfe:	024a      	lsls	r2, r1, #9
 8006d00:	4610      	mov	r0, r2
 8006d02:	4619      	mov	r1, r3
 8006d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d06:	2200      	movs	r2, #0
 8006d08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d10:	f7f9 faae 	bl	8000270 <__aeabi_uldivmod>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4613      	mov	r3, r2
 8006d1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d1c:	e058      	b.n	8006dd0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d1e:	4b38      	ldr	r3, [pc, #224]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	099b      	lsrs	r3, r3, #6
 8006d24:	2200      	movs	r2, #0
 8006d26:	4618      	mov	r0, r3
 8006d28:	4611      	mov	r1, r2
 8006d2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d2e:	623b      	str	r3, [r7, #32]
 8006d30:	2300      	movs	r3, #0
 8006d32:	627b      	str	r3, [r7, #36]	; 0x24
 8006d34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d38:	4642      	mov	r2, r8
 8006d3a:	464b      	mov	r3, r9
 8006d3c:	f04f 0000 	mov.w	r0, #0
 8006d40:	f04f 0100 	mov.w	r1, #0
 8006d44:	0159      	lsls	r1, r3, #5
 8006d46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d4a:	0150      	lsls	r0, r2, #5
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	460b      	mov	r3, r1
 8006d50:	4641      	mov	r1, r8
 8006d52:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d56:	4649      	mov	r1, r9
 8006d58:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d5c:	f04f 0200 	mov.w	r2, #0
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d70:	ebb2 040a 	subs.w	r4, r2, sl
 8006d74:	eb63 050b 	sbc.w	r5, r3, fp
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	00eb      	lsls	r3, r5, #3
 8006d82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d86:	00e2      	lsls	r2, r4, #3
 8006d88:	4614      	mov	r4, r2
 8006d8a:	461d      	mov	r5, r3
 8006d8c:	4643      	mov	r3, r8
 8006d8e:	18e3      	adds	r3, r4, r3
 8006d90:	603b      	str	r3, [r7, #0]
 8006d92:	464b      	mov	r3, r9
 8006d94:	eb45 0303 	adc.w	r3, r5, r3
 8006d98:	607b      	str	r3, [r7, #4]
 8006d9a:	f04f 0200 	mov.w	r2, #0
 8006d9e:	f04f 0300 	mov.w	r3, #0
 8006da2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006da6:	4629      	mov	r1, r5
 8006da8:	028b      	lsls	r3, r1, #10
 8006daa:	4621      	mov	r1, r4
 8006dac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006db0:	4621      	mov	r1, r4
 8006db2:	028a      	lsls	r2, r1, #10
 8006db4:	4610      	mov	r0, r2
 8006db6:	4619      	mov	r1, r3
 8006db8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dba:	2200      	movs	r2, #0
 8006dbc:	61bb      	str	r3, [r7, #24]
 8006dbe:	61fa      	str	r2, [r7, #28]
 8006dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dc4:	f7f9 fa54 	bl	8000270 <__aeabi_uldivmod>
 8006dc8:	4602      	mov	r2, r0
 8006dca:	460b      	mov	r3, r1
 8006dcc:	4613      	mov	r3, r2
 8006dce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	0c1b      	lsrs	r3, r3, #16
 8006dd6:	f003 0303 	and.w	r3, r3, #3
 8006dda:	3301      	adds	r3, #1
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006de0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006de2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dea:	e002      	b.n	8006df2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dec:	4b05      	ldr	r3, [pc, #20]	; (8006e04 <HAL_RCC_GetSysClockFreq+0x204>)
 8006dee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3750      	adds	r7, #80	; 0x50
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dfe:	bf00      	nop
 8006e00:	40023800 	.word	0x40023800
 8006e04:	00f42400 	.word	0x00f42400
 8006e08:	007a1200 	.word	0x007a1200

08006e0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e10:	4b03      	ldr	r3, [pc, #12]	; (8006e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e12:	681b      	ldr	r3, [r3, #0]
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	20000000 	.word	0x20000000

08006e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e28:	f7ff fff0 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	0a9b      	lsrs	r3, r3, #10
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	4903      	ldr	r1, [pc, #12]	; (8006e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e3a:	5ccb      	ldrb	r3, [r1, r3]
 8006e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	bd80      	pop	{r7, pc}
 8006e44:	40023800 	.word	0x40023800
 8006e48:	08010640 	.word	0x08010640

08006e4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e50:	f7ff ffdc 	bl	8006e0c <HAL_RCC_GetHCLKFreq>
 8006e54:	4602      	mov	r2, r0
 8006e56:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	0b5b      	lsrs	r3, r3, #13
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	4903      	ldr	r1, [pc, #12]	; (8006e70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e62:	5ccb      	ldrb	r3, [r1, r3]
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	08010640 	.word	0x08010640

08006e74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	e07b      	b.n	8006f7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d108      	bne.n	8006ea0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e96:	d009      	beq.n	8006eac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	61da      	str	r2, [r3, #28]
 8006e9e:	e005      	b.n	8006eac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d106      	bne.n	8006ecc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f7fc f998 	bl	80031fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ee2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006ef4:	431a      	orrs	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006efe:	431a      	orrs	r2, r3
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	f003 0301 	and.w	r3, r3, #1
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	699b      	ldr	r3, [r3, #24]
 8006f18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f1c:	431a      	orrs	r2, r3
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69db      	ldr	r3, [r3, #28]
 8006f22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a1b      	ldr	r3, [r3, #32]
 8006f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f30:	ea42 0103 	orr.w	r1, r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	430a      	orrs	r2, r1
 8006f42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	0c1b      	lsrs	r3, r3, #16
 8006f4a:	f003 0104 	and.w	r1, r3, #4
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f52:	f003 0210 	and.w	r2, r3, #16
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	430a      	orrs	r2, r1
 8006f5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3708      	adds	r7, #8
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e041      	b.n	800701c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d106      	bne.n	8006fb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fc f96d 	bl	800328c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4610      	mov	r0, r2
 8006fc6:	f000 fc43 	bl	8007850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2201      	movs	r2, #1
 8006fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b01      	cmp	r3, #1
 8007036:	d001      	beq.n	800703c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e046      	b.n	80070ca <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2202      	movs	r2, #2
 8007040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a23      	ldr	r2, [pc, #140]	; (80070d8 <HAL_TIM_Base_Start+0xb4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d022      	beq.n	8007094 <HAL_TIM_Base_Start+0x70>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007056:	d01d      	beq.n	8007094 <HAL_TIM_Base_Start+0x70>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a1f      	ldr	r2, [pc, #124]	; (80070dc <HAL_TIM_Base_Start+0xb8>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d018      	beq.n	8007094 <HAL_TIM_Base_Start+0x70>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	4a1e      	ldr	r2, [pc, #120]	; (80070e0 <HAL_TIM_Base_Start+0xbc>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <HAL_TIM_Base_Start+0x70>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1c      	ldr	r2, [pc, #112]	; (80070e4 <HAL_TIM_Base_Start+0xc0>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d00e      	beq.n	8007094 <HAL_TIM_Base_Start+0x70>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1b      	ldr	r2, [pc, #108]	; (80070e8 <HAL_TIM_Base_Start+0xc4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d009      	beq.n	8007094 <HAL_TIM_Base_Start+0x70>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a19      	ldr	r2, [pc, #100]	; (80070ec <HAL_TIM_Base_Start+0xc8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d004      	beq.n	8007094 <HAL_TIM_Base_Start+0x70>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a18      	ldr	r2, [pc, #96]	; (80070f0 <HAL_TIM_Base_Start+0xcc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d111      	bne.n	80070b8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0307 	and.w	r3, r3, #7
 800709e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b06      	cmp	r3, #6
 80070a4:	d010      	beq.n	80070c8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0201 	orr.w	r2, r2, #1
 80070b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070b6:	e007      	b.n	80070c8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681a      	ldr	r2, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0201 	orr.w	r2, r2, #1
 80070c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070c8:	2300      	movs	r3, #0
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop
 80070d8:	40010000 	.word	0x40010000
 80070dc:	40000400 	.word	0x40000400
 80070e0:	40000800 	.word	0x40000800
 80070e4:	40000c00 	.word	0x40000c00
 80070e8:	40010400 	.word	0x40010400
 80070ec:	40014000 	.word	0x40014000
 80070f0:	40001800 	.word	0x40001800

080070f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e041      	b.n	800718a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f839 	bl	8007192 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2202      	movs	r2, #2
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	3304      	adds	r3, #4
 8007130:	4619      	mov	r1, r3
 8007132:	4610      	mov	r0, r2
 8007134:	f000 fb8c 	bl	8007850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007188:	2300      	movs	r3, #0
}
 800718a:	4618      	mov	r0, r3
 800718c:	3708      	adds	r7, #8
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
	...

080071a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d109      	bne.n	80071cc <HAL_TIM_PWM_Start+0x24>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	bf14      	ite	ne
 80071c4:	2301      	movne	r3, #1
 80071c6:	2300      	moveq	r3, #0
 80071c8:	b2db      	uxtb	r3, r3
 80071ca:	e022      	b.n	8007212 <HAL_TIM_PWM_Start+0x6a>
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d109      	bne.n	80071e6 <HAL_TIM_PWM_Start+0x3e>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b01      	cmp	r3, #1
 80071dc:	bf14      	ite	ne
 80071de:	2301      	movne	r3, #1
 80071e0:	2300      	moveq	r3, #0
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	e015      	b.n	8007212 <HAL_TIM_PWM_Start+0x6a>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b08      	cmp	r3, #8
 80071ea:	d109      	bne.n	8007200 <HAL_TIM_PWM_Start+0x58>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	bf14      	ite	ne
 80071f8:	2301      	movne	r3, #1
 80071fa:	2300      	moveq	r3, #0
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	e008      	b.n	8007212 <HAL_TIM_PWM_Start+0x6a>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007206:	b2db      	uxtb	r3, r3
 8007208:	2b01      	cmp	r3, #1
 800720a:	bf14      	ite	ne
 800720c:	2301      	movne	r3, #1
 800720e:	2300      	moveq	r3, #0
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d001      	beq.n	800721a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007216:	2301      	movs	r3, #1
 8007218:	e07c      	b.n	8007314 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d104      	bne.n	800722a <HAL_TIM_PWM_Start+0x82>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2202      	movs	r2, #2
 8007224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007228:	e013      	b.n	8007252 <HAL_TIM_PWM_Start+0xaa>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b04      	cmp	r3, #4
 800722e:	d104      	bne.n	800723a <HAL_TIM_PWM_Start+0x92>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2202      	movs	r2, #2
 8007234:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007238:	e00b      	b.n	8007252 <HAL_TIM_PWM_Start+0xaa>
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	2b08      	cmp	r3, #8
 800723e:	d104      	bne.n	800724a <HAL_TIM_PWM_Start+0xa2>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2202      	movs	r2, #2
 8007244:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007248:	e003      	b.n	8007252 <HAL_TIM_PWM_Start+0xaa>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2202      	movs	r2, #2
 800724e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	2201      	movs	r2, #1
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	4618      	mov	r0, r3
 800725c:	f000 fe73 	bl	8007f46 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a2d      	ldr	r2, [pc, #180]	; (800731c <HAL_TIM_PWM_Start+0x174>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d004      	beq.n	8007274 <HAL_TIM_PWM_Start+0xcc>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a2c      	ldr	r2, [pc, #176]	; (8007320 <HAL_TIM_PWM_Start+0x178>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d101      	bne.n	8007278 <HAL_TIM_PWM_Start+0xd0>
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <HAL_TIM_PWM_Start+0xd2>
 8007278:	2300      	movs	r3, #0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d007      	beq.n	800728e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800728c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	4a22      	ldr	r2, [pc, #136]	; (800731c <HAL_TIM_PWM_Start+0x174>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d022      	beq.n	80072de <HAL_TIM_PWM_Start+0x136>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a0:	d01d      	beq.n	80072de <HAL_TIM_PWM_Start+0x136>
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4a1f      	ldr	r2, [pc, #124]	; (8007324 <HAL_TIM_PWM_Start+0x17c>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d018      	beq.n	80072de <HAL_TIM_PWM_Start+0x136>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	4a1d      	ldr	r2, [pc, #116]	; (8007328 <HAL_TIM_PWM_Start+0x180>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d013      	beq.n	80072de <HAL_TIM_PWM_Start+0x136>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	4a1c      	ldr	r2, [pc, #112]	; (800732c <HAL_TIM_PWM_Start+0x184>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00e      	beq.n	80072de <HAL_TIM_PWM_Start+0x136>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a16      	ldr	r2, [pc, #88]	; (8007320 <HAL_TIM_PWM_Start+0x178>)
 80072c6:	4293      	cmp	r3, r2
 80072c8:	d009      	beq.n	80072de <HAL_TIM_PWM_Start+0x136>
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a18      	ldr	r2, [pc, #96]	; (8007330 <HAL_TIM_PWM_Start+0x188>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d004      	beq.n	80072de <HAL_TIM_PWM_Start+0x136>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	4a16      	ldr	r2, [pc, #88]	; (8007334 <HAL_TIM_PWM_Start+0x18c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d111      	bne.n	8007302 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	f003 0307 	and.w	r3, r3, #7
 80072e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2b06      	cmp	r3, #6
 80072ee:	d010      	beq.n	8007312 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f042 0201 	orr.w	r2, r2, #1
 80072fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007300:	e007      	b.n	8007312 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f042 0201 	orr.w	r2, r2, #1
 8007310:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	40010000 	.word	0x40010000
 8007320:	40010400 	.word	0x40010400
 8007324:	40000400 	.word	0x40000400
 8007328:	40000800 	.word	0x40000800
 800732c:	40000c00 	.word	0x40000c00
 8007330:	40014000 	.word	0x40014000
 8007334:	40001800 	.word	0x40001800

08007338 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2200      	movs	r2, #0
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f000 fdfb 	bl	8007f46 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a2e      	ldr	r2, [pc, #184]	; (8007410 <HAL_TIM_PWM_Stop+0xd8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d004      	beq.n	8007364 <HAL_TIM_PWM_Stop+0x2c>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a2d      	ldr	r2, [pc, #180]	; (8007414 <HAL_TIM_PWM_Stop+0xdc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d101      	bne.n	8007368 <HAL_TIM_PWM_Stop+0x30>
 8007364:	2301      	movs	r3, #1
 8007366:	e000      	b.n	800736a <HAL_TIM_PWM_Stop+0x32>
 8007368:	2300      	movs	r3, #0
 800736a:	2b00      	cmp	r3, #0
 800736c:	d017      	beq.n	800739e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	6a1a      	ldr	r2, [r3, #32]
 8007374:	f241 1311 	movw	r3, #4369	; 0x1111
 8007378:	4013      	ands	r3, r2
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10f      	bne.n	800739e <HAL_TIM_PWM_Stop+0x66>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6a1a      	ldr	r2, [r3, #32]
 8007384:	f240 4344 	movw	r3, #1092	; 0x444
 8007388:	4013      	ands	r3, r2
 800738a:	2b00      	cmp	r3, #0
 800738c:	d107      	bne.n	800739e <HAL_TIM_PWM_Stop+0x66>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800739c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	6a1a      	ldr	r2, [r3, #32]
 80073a4:	f241 1311 	movw	r3, #4369	; 0x1111
 80073a8:	4013      	ands	r3, r2
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10f      	bne.n	80073ce <HAL_TIM_PWM_Stop+0x96>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6a1a      	ldr	r2, [r3, #32]
 80073b4:	f240 4344 	movw	r3, #1092	; 0x444
 80073b8:	4013      	ands	r3, r2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d107      	bne.n	80073ce <HAL_TIM_PWM_Stop+0x96>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f022 0201 	bic.w	r2, r2, #1
 80073cc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d104      	bne.n	80073de <HAL_TIM_PWM_Stop+0xa6>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073dc:	e013      	b.n	8007406 <HAL_TIM_PWM_Stop+0xce>
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	d104      	bne.n	80073ee <HAL_TIM_PWM_Stop+0xb6>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2201      	movs	r2, #1
 80073e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073ec:	e00b      	b.n	8007406 <HAL_TIM_PWM_Stop+0xce>
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	2b08      	cmp	r3, #8
 80073f2:	d104      	bne.n	80073fe <HAL_TIM_PWM_Stop+0xc6>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073fc:	e003      	b.n	8007406 <HAL_TIM_PWM_Stop+0xce>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	40010000 	.word	0x40010000
 8007414:	40010400 	.word	0x40010400

08007418 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e041      	b.n	80074b0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007432:	b2db      	uxtb	r3, r3
 8007434:	2b00      	cmp	r3, #0
 8007436:	d106      	bne.n	8007446 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7fb ffb7 	bl	80033b4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2202      	movs	r2, #2
 800744a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	3304      	adds	r3, #4
 8007456:	4619      	mov	r1, r3
 8007458:	4610      	mov	r0, r2
 800745a:	f000 f9f9 	bl	8007850 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f022 0208 	bic.w	r2, r2, #8
 800746c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	6819      	ldr	r1, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	430a      	orrs	r2, r1
 800747c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2201      	movs	r2, #1
 8007482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2201      	movs	r2, #1
 80074a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074ae:	2300      	movs	r3, #0
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}

080074b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b086      	sub	sp, #24
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074c4:	2300      	movs	r3, #0
 80074c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d101      	bne.n	80074d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80074d2:	2302      	movs	r3, #2
 80074d4:	e0ae      	b.n	8007634 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b0c      	cmp	r3, #12
 80074e2:	f200 809f 	bhi.w	8007624 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80074e6:	a201      	add	r2, pc, #4	; (adr r2, 80074ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ec:	08007521 	.word	0x08007521
 80074f0:	08007625 	.word	0x08007625
 80074f4:	08007625 	.word	0x08007625
 80074f8:	08007625 	.word	0x08007625
 80074fc:	08007561 	.word	0x08007561
 8007500:	08007625 	.word	0x08007625
 8007504:	08007625 	.word	0x08007625
 8007508:	08007625 	.word	0x08007625
 800750c:	080075a3 	.word	0x080075a3
 8007510:	08007625 	.word	0x08007625
 8007514:	08007625 	.word	0x08007625
 8007518:	08007625 	.word	0x08007625
 800751c:	080075e3 	.word	0x080075e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68b9      	ldr	r1, [r7, #8]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fa32 	bl	8007990 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	699a      	ldr	r2, [r3, #24]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0208 	orr.w	r2, r2, #8
 800753a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699a      	ldr	r2, [r3, #24]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0204 	bic.w	r2, r2, #4
 800754a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	6999      	ldr	r1, [r3, #24]
 8007552:	68bb      	ldr	r3, [r7, #8]
 8007554:	691a      	ldr	r2, [r3, #16]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	430a      	orrs	r2, r1
 800755c:	619a      	str	r2, [r3, #24]
      break;
 800755e:	e064      	b.n	800762a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fa82 	bl	8007a70 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800757a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800758a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6999      	ldr	r1, [r3, #24]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	021a      	lsls	r2, r3, #8
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	430a      	orrs	r2, r1
 800759e:	619a      	str	r2, [r3, #24]
      break;
 80075a0:	e043      	b.n	800762a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68b9      	ldr	r1, [r7, #8]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f000 fad7 	bl	8007b5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69da      	ldr	r2, [r3, #28]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 0208 	orr.w	r2, r2, #8
 80075bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	69da      	ldr	r2, [r3, #28]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f022 0204 	bic.w	r2, r2, #4
 80075cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69d9      	ldr	r1, [r3, #28]
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	691a      	ldr	r2, [r3, #16]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	61da      	str	r2, [r3, #28]
      break;
 80075e0:	e023      	b.n	800762a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fb2b 	bl	8007c44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800760c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69d9      	ldr	r1, [r3, #28]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	021a      	lsls	r2, r3, #8
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	430a      	orrs	r2, r1
 8007620:	61da      	str	r2, [r3, #28]
      break;
 8007622:	e002      	b.n	800762a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	75fb      	strb	r3, [r7, #23]
      break;
 8007628:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007632:	7dfb      	ldrb	r3, [r7, #23]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007646:	2300      	movs	r3, #0
 8007648:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <HAL_TIM_ConfigClockSource+0x1c>
 8007654:	2302      	movs	r3, #2
 8007656:	e0b4      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x186>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007676:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800767e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007690:	d03e      	beq.n	8007710 <HAL_TIM_ConfigClockSource+0xd4>
 8007692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007696:	f200 8087 	bhi.w	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 800769a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800769e:	f000 8086 	beq.w	80077ae <HAL_TIM_ConfigClockSource+0x172>
 80076a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a6:	d87f      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076a8:	2b70      	cmp	r3, #112	; 0x70
 80076aa:	d01a      	beq.n	80076e2 <HAL_TIM_ConfigClockSource+0xa6>
 80076ac:	2b70      	cmp	r3, #112	; 0x70
 80076ae:	d87b      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076b0:	2b60      	cmp	r3, #96	; 0x60
 80076b2:	d050      	beq.n	8007756 <HAL_TIM_ConfigClockSource+0x11a>
 80076b4:	2b60      	cmp	r3, #96	; 0x60
 80076b6:	d877      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076b8:	2b50      	cmp	r3, #80	; 0x50
 80076ba:	d03c      	beq.n	8007736 <HAL_TIM_ConfigClockSource+0xfa>
 80076bc:	2b50      	cmp	r3, #80	; 0x50
 80076be:	d873      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076c0:	2b40      	cmp	r3, #64	; 0x40
 80076c2:	d058      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0x13a>
 80076c4:	2b40      	cmp	r3, #64	; 0x40
 80076c6:	d86f      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076c8:	2b30      	cmp	r3, #48	; 0x30
 80076ca:	d064      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x15a>
 80076cc:	2b30      	cmp	r3, #48	; 0x30
 80076ce:	d86b      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076d0:	2b20      	cmp	r3, #32
 80076d2:	d060      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x15a>
 80076d4:	2b20      	cmp	r3, #32
 80076d6:	d867      	bhi.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d05c      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x15a>
 80076dc:	2b10      	cmp	r3, #16
 80076de:	d05a      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x15a>
 80076e0:	e062      	b.n	80077a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	6899      	ldr	r1, [r3, #8]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685a      	ldr	r2, [r3, #4]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	f000 fc08 	bl	8007f06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	689b      	ldr	r3, [r3, #8]
 80076fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007704:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	609a      	str	r2, [r3, #8]
      break;
 800770e:	e04f      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6818      	ldr	r0, [r3, #0]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	6899      	ldr	r1, [r3, #8]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	f000 fbf1 	bl	8007f06 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	689a      	ldr	r2, [r3, #8]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007732:	609a      	str	r2, [r3, #8]
      break;
 8007734:	e03c      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	6818      	ldr	r0, [r3, #0]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	6859      	ldr	r1, [r3, #4]
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	461a      	mov	r2, r3
 8007744:	f000 fb65 	bl	8007e12 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2150      	movs	r1, #80	; 0x50
 800774e:	4618      	mov	r0, r3
 8007750:	f000 fbbe 	bl	8007ed0 <TIM_ITRx_SetConfig>
      break;
 8007754:	e02c      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6818      	ldr	r0, [r3, #0]
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	6859      	ldr	r1, [r3, #4]
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	461a      	mov	r2, r3
 8007764:	f000 fb84 	bl	8007e70 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2160      	movs	r1, #96	; 0x60
 800776e:	4618      	mov	r0, r3
 8007770:	f000 fbae 	bl	8007ed0 <TIM_ITRx_SetConfig>
      break;
 8007774:	e01c      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	6859      	ldr	r1, [r3, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	461a      	mov	r2, r3
 8007784:	f000 fb45 	bl	8007e12 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2140      	movs	r1, #64	; 0x40
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fb9e 	bl	8007ed0 <TIM_ITRx_SetConfig>
      break;
 8007794:	e00c      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4619      	mov	r1, r3
 80077a0:	4610      	mov	r0, r2
 80077a2:	f000 fb95 	bl	8007ed0 <TIM_ITRx_SetConfig>
      break;
 80077a6:	e003      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	73fb      	strb	r3, [r7, #15]
      break;
 80077ac:	e000      	b.n	80077b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3710      	adds	r7, #16
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80077ca:	b580      	push	{r7, lr}
 80077cc:	b082      	sub	sp, #8
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
 80077d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d101      	bne.n	80077e2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80077de:	2302      	movs	r3, #2
 80077e0:	e031      	b.n	8007846 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2201      	movs	r2, #1
 80077e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2202      	movs	r2, #2
 80077ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fa7b 	bl	8007cf0 <TIM_SlaveTimer_SetConfig>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d009      	beq.n	8007814 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e018      	b.n	8007846 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	68da      	ldr	r2, [r3, #12]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007822:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007832:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3708      	adds	r7, #8
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
	...

08007850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
 8007858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4a40      	ldr	r2, [pc, #256]	; (8007964 <TIM_Base_SetConfig+0x114>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d013      	beq.n	8007890 <TIM_Base_SetConfig+0x40>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800786e:	d00f      	beq.n	8007890 <TIM_Base_SetConfig+0x40>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4a3d      	ldr	r2, [pc, #244]	; (8007968 <TIM_Base_SetConfig+0x118>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d00b      	beq.n	8007890 <TIM_Base_SetConfig+0x40>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a3c      	ldr	r2, [pc, #240]	; (800796c <TIM_Base_SetConfig+0x11c>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d007      	beq.n	8007890 <TIM_Base_SetConfig+0x40>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	4a3b      	ldr	r2, [pc, #236]	; (8007970 <TIM_Base_SetConfig+0x120>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d003      	beq.n	8007890 <TIM_Base_SetConfig+0x40>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a3a      	ldr	r2, [pc, #232]	; (8007974 <TIM_Base_SetConfig+0x124>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d108      	bne.n	80078a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	68fa      	ldr	r2, [r7, #12]
 800789e:	4313      	orrs	r3, r2
 80078a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	4a2f      	ldr	r2, [pc, #188]	; (8007964 <TIM_Base_SetConfig+0x114>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d02b      	beq.n	8007902 <TIM_Base_SetConfig+0xb2>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078b0:	d027      	beq.n	8007902 <TIM_Base_SetConfig+0xb2>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	4a2c      	ldr	r2, [pc, #176]	; (8007968 <TIM_Base_SetConfig+0x118>)
 80078b6:	4293      	cmp	r3, r2
 80078b8:	d023      	beq.n	8007902 <TIM_Base_SetConfig+0xb2>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a2b      	ldr	r2, [pc, #172]	; (800796c <TIM_Base_SetConfig+0x11c>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d01f      	beq.n	8007902 <TIM_Base_SetConfig+0xb2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	4a2a      	ldr	r2, [pc, #168]	; (8007970 <TIM_Base_SetConfig+0x120>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d01b      	beq.n	8007902 <TIM_Base_SetConfig+0xb2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a29      	ldr	r2, [pc, #164]	; (8007974 <TIM_Base_SetConfig+0x124>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d017      	beq.n	8007902 <TIM_Base_SetConfig+0xb2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a28      	ldr	r2, [pc, #160]	; (8007978 <TIM_Base_SetConfig+0x128>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d013      	beq.n	8007902 <TIM_Base_SetConfig+0xb2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a27      	ldr	r2, [pc, #156]	; (800797c <TIM_Base_SetConfig+0x12c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d00f      	beq.n	8007902 <TIM_Base_SetConfig+0xb2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a26      	ldr	r2, [pc, #152]	; (8007980 <TIM_Base_SetConfig+0x130>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d00b      	beq.n	8007902 <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a25      	ldr	r2, [pc, #148]	; (8007984 <TIM_Base_SetConfig+0x134>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d007      	beq.n	8007902 <TIM_Base_SetConfig+0xb2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a24      	ldr	r2, [pc, #144]	; (8007988 <TIM_Base_SetConfig+0x138>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d003      	beq.n	8007902 <TIM_Base_SetConfig+0xb2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a23      	ldr	r2, [pc, #140]	; (800798c <TIM_Base_SetConfig+0x13c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d108      	bne.n	8007914 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	4313      	orrs	r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	4313      	orrs	r3, r2
 8007920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	689a      	ldr	r2, [r3, #8]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	681a      	ldr	r2, [r3, #0]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a0a      	ldr	r2, [pc, #40]	; (8007964 <TIM_Base_SetConfig+0x114>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d003      	beq.n	8007948 <TIM_Base_SetConfig+0xf8>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a0c      	ldr	r2, [pc, #48]	; (8007974 <TIM_Base_SetConfig+0x124>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d103      	bne.n	8007950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	691a      	ldr	r2, [r3, #16]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	615a      	str	r2, [r3, #20]
}
 8007956:	bf00      	nop
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	40010000 	.word	0x40010000
 8007968:	40000400 	.word	0x40000400
 800796c:	40000800 	.word	0x40000800
 8007970:	40000c00 	.word	0x40000c00
 8007974:	40010400 	.word	0x40010400
 8007978:	40014000 	.word	0x40014000
 800797c:	40014400 	.word	0x40014400
 8007980:	40014800 	.word	0x40014800
 8007984:	40001800 	.word	0x40001800
 8007988:	40001c00 	.word	0x40001c00
 800798c:	40002000 	.word	0x40002000

08007990 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007990:	b480      	push	{r7}
 8007992:	b087      	sub	sp, #28
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	f023 0201 	bic.w	r2, r3, #1
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	f023 0303 	bic.w	r3, r3, #3
 80079c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	f023 0302 	bic.w	r3, r3, #2
 80079d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	697a      	ldr	r2, [r7, #20]
 80079e0:	4313      	orrs	r3, r2
 80079e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	4a20      	ldr	r2, [pc, #128]	; (8007a68 <TIM_OC1_SetConfig+0xd8>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d003      	beq.n	80079f4 <TIM_OC1_SetConfig+0x64>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	4a1f      	ldr	r2, [pc, #124]	; (8007a6c <TIM_OC1_SetConfig+0xdc>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d10c      	bne.n	8007a0e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	f023 0308 	bic.w	r3, r3, #8
 80079fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	f023 0304 	bic.w	r3, r3, #4
 8007a0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	4a15      	ldr	r2, [pc, #84]	; (8007a68 <TIM_OC1_SetConfig+0xd8>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d003      	beq.n	8007a1e <TIM_OC1_SetConfig+0x8e>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a14      	ldr	r2, [pc, #80]	; (8007a6c <TIM_OC1_SetConfig+0xdc>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d111      	bne.n	8007a42 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	695b      	ldr	r3, [r3, #20]
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	699b      	ldr	r3, [r3, #24]
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68fa      	ldr	r2, [r7, #12]
 8007a4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	697a      	ldr	r2, [r7, #20]
 8007a5a:	621a      	str	r2, [r3, #32]
}
 8007a5c:	bf00      	nop
 8007a5e:	371c      	adds	r7, #28
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	40010000 	.word	0x40010000
 8007a6c:	40010400 	.word	0x40010400

08007a70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b087      	sub	sp, #28
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a1b      	ldr	r3, [r3, #32]
 8007a7e:	f023 0210 	bic.w	r2, r3, #16
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	699b      	ldr	r3, [r3, #24]
 8007a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	021b      	lsls	r3, r3, #8
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	f023 0320 	bic.w	r3, r3, #32
 8007aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	011b      	lsls	r3, r3, #4
 8007ac2:	697a      	ldr	r2, [r7, #20]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a22      	ldr	r2, [pc, #136]	; (8007b54 <TIM_OC2_SetConfig+0xe4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <TIM_OC2_SetConfig+0x68>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a21      	ldr	r2, [pc, #132]	; (8007b58 <TIM_OC2_SetConfig+0xe8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d10d      	bne.n	8007af4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ade:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a17      	ldr	r2, [pc, #92]	; (8007b54 <TIM_OC2_SetConfig+0xe4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d003      	beq.n	8007b04 <TIM_OC2_SetConfig+0x94>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4a16      	ldr	r2, [pc, #88]	; (8007b58 <TIM_OC2_SetConfig+0xe8>)
 8007b00:	4293      	cmp	r3, r2
 8007b02:	d113      	bne.n	8007b2c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	695b      	ldr	r3, [r3, #20]
 8007b18:	009b      	lsls	r3, r3, #2
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	699b      	ldr	r3, [r3, #24]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	693a      	ldr	r2, [r7, #16]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	68fa      	ldr	r2, [r7, #12]
 8007b36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	621a      	str	r2, [r3, #32]
}
 8007b46:	bf00      	nop
 8007b48:	371c      	adds	r7, #28
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
 8007b52:	bf00      	nop
 8007b54:	40010000 	.word	0x40010000
 8007b58:	40010400 	.word	0x40010400

08007b5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	69db      	ldr	r3, [r3, #28]
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	4313      	orrs	r3, r2
 8007b9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007ba4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	021b      	lsls	r3, r3, #8
 8007bac:	697a      	ldr	r2, [r7, #20]
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a21      	ldr	r2, [pc, #132]	; (8007c3c <TIM_OC3_SetConfig+0xe0>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d003      	beq.n	8007bc2 <TIM_OC3_SetConfig+0x66>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a20      	ldr	r2, [pc, #128]	; (8007c40 <TIM_OC3_SetConfig+0xe4>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d10d      	bne.n	8007bde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	68db      	ldr	r3, [r3, #12]
 8007bce:	021b      	lsls	r3, r3, #8
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a16      	ldr	r2, [pc, #88]	; (8007c3c <TIM_OC3_SetConfig+0xe0>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d003      	beq.n	8007bee <TIM_OC3_SetConfig+0x92>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a15      	ldr	r2, [pc, #84]	; (8007c40 <TIM_OC3_SetConfig+0xe4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d113      	bne.n	8007c16 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bf4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	4313      	orrs	r3, r2
 8007c08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	011b      	lsls	r3, r3, #4
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	693a      	ldr	r2, [r7, #16]
 8007c1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68fa      	ldr	r2, [r7, #12]
 8007c20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	621a      	str	r2, [r3, #32]
}
 8007c30:	bf00      	nop
 8007c32:	371c      	adds	r7, #28
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	40010000 	.word	0x40010000
 8007c40:	40010400 	.word	0x40010400

08007c44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b087      	sub	sp, #28
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a1b      	ldr	r3, [r3, #32]
 8007c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	685b      	ldr	r3, [r3, #4]
 8007c64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	021b      	lsls	r3, r3, #8
 8007c82:	68fa      	ldr	r2, [r7, #12]
 8007c84:	4313      	orrs	r3, r2
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	031b      	lsls	r3, r3, #12
 8007c96:	693a      	ldr	r2, [r7, #16]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a12      	ldr	r2, [pc, #72]	; (8007ce8 <TIM_OC4_SetConfig+0xa4>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d003      	beq.n	8007cac <TIM_OC4_SetConfig+0x68>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	4a11      	ldr	r2, [pc, #68]	; (8007cec <TIM_OC4_SetConfig+0xa8>)
 8007ca8:	4293      	cmp	r3, r2
 8007caa:	d109      	bne.n	8007cc0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	695b      	ldr	r3, [r3, #20]
 8007cb8:	019b      	lsls	r3, r3, #6
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	697a      	ldr	r2, [r7, #20]
 8007cc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68fa      	ldr	r2, [r7, #12]
 8007cca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	621a      	str	r2, [r3, #32]
}
 8007cda:	bf00      	nop
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr
 8007ce6:	bf00      	nop
 8007ce8:	40010000 	.word	0x40010000
 8007cec:	40010400 	.word	0x40010400

08007cf0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b086      	sub	sp, #24
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d0c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	693a      	ldr	r2, [r7, #16]
 8007d14:	4313      	orrs	r3, r2
 8007d16:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	f023 0307 	bic.w	r3, r3, #7
 8007d1e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	4313      	orrs	r3, r2
 8007d28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	2b70      	cmp	r3, #112	; 0x70
 8007d38:	d01a      	beq.n	8007d70 <TIM_SlaveTimer_SetConfig+0x80>
 8007d3a:	2b70      	cmp	r3, #112	; 0x70
 8007d3c:	d860      	bhi.n	8007e00 <TIM_SlaveTimer_SetConfig+0x110>
 8007d3e:	2b60      	cmp	r3, #96	; 0x60
 8007d40:	d054      	beq.n	8007dec <TIM_SlaveTimer_SetConfig+0xfc>
 8007d42:	2b60      	cmp	r3, #96	; 0x60
 8007d44:	d85c      	bhi.n	8007e00 <TIM_SlaveTimer_SetConfig+0x110>
 8007d46:	2b50      	cmp	r3, #80	; 0x50
 8007d48:	d046      	beq.n	8007dd8 <TIM_SlaveTimer_SetConfig+0xe8>
 8007d4a:	2b50      	cmp	r3, #80	; 0x50
 8007d4c:	d858      	bhi.n	8007e00 <TIM_SlaveTimer_SetConfig+0x110>
 8007d4e:	2b40      	cmp	r3, #64	; 0x40
 8007d50:	d019      	beq.n	8007d86 <TIM_SlaveTimer_SetConfig+0x96>
 8007d52:	2b40      	cmp	r3, #64	; 0x40
 8007d54:	d854      	bhi.n	8007e00 <TIM_SlaveTimer_SetConfig+0x110>
 8007d56:	2b30      	cmp	r3, #48	; 0x30
 8007d58:	d055      	beq.n	8007e06 <TIM_SlaveTimer_SetConfig+0x116>
 8007d5a:	2b30      	cmp	r3, #48	; 0x30
 8007d5c:	d850      	bhi.n	8007e00 <TIM_SlaveTimer_SetConfig+0x110>
 8007d5e:	2b20      	cmp	r3, #32
 8007d60:	d051      	beq.n	8007e06 <TIM_SlaveTimer_SetConfig+0x116>
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d84c      	bhi.n	8007e00 <TIM_SlaveTimer_SetConfig+0x110>
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d04d      	beq.n	8007e06 <TIM_SlaveTimer_SetConfig+0x116>
 8007d6a:	2b10      	cmp	r3, #16
 8007d6c:	d04b      	beq.n	8007e06 <TIM_SlaveTimer_SetConfig+0x116>
 8007d6e:	e047      	b.n	8007e00 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	68d9      	ldr	r1, [r3, #12]
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	691b      	ldr	r3, [r3, #16]
 8007d80:	f000 f8c1 	bl	8007f06 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007d84:	e040      	b.n	8007e08 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b05      	cmp	r3, #5
 8007d8c:	d101      	bne.n	8007d92 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e03b      	b.n	8007e0a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	6a1a      	ldr	r2, [r3, #32]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f022 0201 	bic.w	r2, r2, #1
 8007da8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007db8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	011b      	lsls	r3, r3, #4
 8007dc0:	68ba      	ldr	r2, [r7, #8]
 8007dc2:	4313      	orrs	r3, r2
 8007dc4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	621a      	str	r2, [r3, #32]
      break;
 8007dd6:	e017      	b.n	8007e08 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	6899      	ldr	r1, [r3, #8]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	461a      	mov	r2, r3
 8007de6:	f000 f814 	bl	8007e12 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007dea:	e00d      	b.n	8007e08 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6818      	ldr	r0, [r3, #0]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	6899      	ldr	r1, [r3, #8]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	461a      	mov	r2, r3
 8007dfa:	f000 f839 	bl	8007e70 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007dfe:	e003      	b.n	8007e08 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	75fb      	strb	r3, [r7, #23]
      break;
 8007e04:	e000      	b.n	8007e08 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007e06:	bf00      	nop
  }

  return status;
 8007e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}

08007e12 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b087      	sub	sp, #28
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	f023 0201 	bic.w	r2, r3, #1
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	011b      	lsls	r3, r3, #4
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f023 030a 	bic.w	r3, r3, #10
 8007e4e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e50:	697a      	ldr	r2, [r7, #20]
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	4313      	orrs	r3, r2
 8007e56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	697a      	ldr	r2, [r7, #20]
 8007e62:	621a      	str	r2, [r3, #32]
}
 8007e64:	bf00      	nop
 8007e66:	371c      	adds	r7, #28
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	6a1b      	ldr	r3, [r3, #32]
 8007e80:	f023 0210 	bic.w	r2, r3, #16
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	6a1b      	ldr	r3, [r3, #32]
 8007e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e9a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	031b      	lsls	r3, r3, #12
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	011b      	lsls	r3, r3, #4
 8007eb2:	693a      	ldr	r2, [r7, #16]
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	621a      	str	r2, [r3, #32]
}
 8007ec4:	bf00      	nop
 8007ec6:	371c      	adds	r7, #28
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
 8007ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	f043 0307 	orr.w	r3, r3, #7
 8007ef2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	609a      	str	r2, [r3, #8]
}
 8007efa:	bf00      	nop
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr

08007f06 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b087      	sub	sp, #28
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	60f8      	str	r0, [r7, #12]
 8007f0e:	60b9      	str	r1, [r7, #8]
 8007f10:	607a      	str	r2, [r7, #4]
 8007f12:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f20:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	021a      	lsls	r2, r3, #8
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	609a      	str	r2, [r3, #8]
}
 8007f3a:	bf00      	nop
 8007f3c:	371c      	adds	r7, #28
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b087      	sub	sp, #28
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f003 031f 	and.w	r3, r3, #31
 8007f58:	2201      	movs	r2, #1
 8007f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f5e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a1a      	ldr	r2, [r3, #32]
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	43db      	mvns	r3, r3
 8007f68:	401a      	ands	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	6a1a      	ldr	r2, [r3, #32]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f003 031f 	and.w	r3, r3, #31
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	621a      	str	r2, [r3, #32]
}
 8007f84:	bf00      	nop
 8007f86:	371c      	adds	r7, #28
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b085      	sub	sp, #20
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d101      	bne.n	8007fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	e05a      	b.n	800805e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2201      	movs	r2, #1
 8007fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2202      	movs	r2, #2
 8007fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4a21      	ldr	r2, [pc, #132]	; (800806c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d022      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ff4:	d01d      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4a1d      	ldr	r2, [pc, #116]	; (8008070 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d018      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a1b      	ldr	r2, [pc, #108]	; (8008074 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d013      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a1a      	ldr	r2, [pc, #104]	; (8008078 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d00e      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a18      	ldr	r2, [pc, #96]	; (800807c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d009      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a17      	ldr	r2, [pc, #92]	; (8008080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d004      	beq.n	8008032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a15      	ldr	r2, [pc, #84]	; (8008084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d10c      	bne.n	800804c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	68ba      	ldr	r2, [r7, #8]
 8008040:	4313      	orrs	r3, r2
 8008042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800805c:	2300      	movs	r3, #0
}
 800805e:	4618      	mov	r0, r3
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40010000 	.word	0x40010000
 8008070:	40000400 	.word	0x40000400
 8008074:	40000800 	.word	0x40000800
 8008078:	40000c00 	.word	0x40000c00
 800807c:	40010400 	.word	0x40010400
 8008080:	40014000 	.word	0x40014000
 8008084:	40001800 	.word	0x40001800

08008088 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
 8008090:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800809c:	2b01      	cmp	r3, #1
 800809e:	d101      	bne.n	80080a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80080a0:	2302      	movs	r3, #2
 80080a2:	e03d      	b.n	8008120 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	68db      	ldr	r3, [r3, #12]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	689b      	ldr	r3, [r3, #8]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	4313      	orrs	r3, r2
 80080f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	4313      	orrs	r3, r2
 800810c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68fa      	ldr	r2, [r7, #12]
 8008114:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3714      	adds	r7, #20
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d101      	bne.n	800813e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800813a:	2301      	movs	r3, #1
 800813c:	e03f      	b.n	80081be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d106      	bne.n	8008158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f7fb f9b2 	bl	80034bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2224      	movs	r2, #36	; 0x24
 800815c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800816e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 ffcd 	bl	8009110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	691a      	ldr	r2, [r3, #16]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	695a      	ldr	r2, [r3, #20]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	68da      	ldr	r2, [r3, #12]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2200      	movs	r2, #0
 80081aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2220      	movs	r2, #32
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2220      	movs	r2, #32
 80081b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b08c      	sub	sp, #48	; 0x30
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b20      	cmp	r3, #32
 80081e0:	d165      	bne.n	80082ae <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <HAL_UART_Transmit_DMA+0x26>
 80081e8:	88fb      	ldrh	r3, [r7, #6]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e05e      	b.n	80082b0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d101      	bne.n	8008200 <HAL_UART_Transmit_DMA+0x38>
 80081fc:	2302      	movs	r3, #2
 80081fe:	e057      	b.n	80082b0 <HAL_UART_Transmit_DMA+0xe8>
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2201      	movs	r2, #1
 8008204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008208:	68ba      	ldr	r2, [r7, #8]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	88fa      	ldrh	r2, [r7, #6]
 8008212:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	88fa      	ldrh	r2, [r7, #6]
 8008218:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2200      	movs	r2, #0
 800821e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2221      	movs	r2, #33	; 0x21
 8008224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800822c:	4a22      	ldr	r2, [pc, #136]	; (80082b8 <HAL_UART_Transmit_DMA+0xf0>)
 800822e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008234:	4a21      	ldr	r2, [pc, #132]	; (80082bc <HAL_UART_Transmit_DMA+0xf4>)
 8008236:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800823c:	4a20      	ldr	r2, [pc, #128]	; (80082c0 <HAL_UART_Transmit_DMA+0xf8>)
 800823e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008244:	2200      	movs	r2, #0
 8008246:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008248:	f107 0308 	add.w	r3, r7, #8
 800824c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008254:	6819      	ldr	r1, [r3, #0]
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	3304      	adds	r3, #4
 800825c:	461a      	mov	r2, r3
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	f7fb fe8e 	bl	8003f80 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800826c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	2200      	movs	r2, #0
 8008272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	3314      	adds	r3, #20
 800827c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	e853 3f00 	ldrex	r3, [r3]
 8008284:	617b      	str	r3, [r7, #20]
   return(result);
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828c:	62bb      	str	r3, [r7, #40]	; 0x28
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3314      	adds	r3, #20
 8008294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008296:	627a      	str	r2, [r7, #36]	; 0x24
 8008298:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829a:	6a39      	ldr	r1, [r7, #32]
 800829c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800829e:	e841 2300 	strex	r3, r2, [r1]
 80082a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80082a4:	69fb      	ldr	r3, [r7, #28]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e5      	bne.n	8008276 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80082aa:	2300      	movs	r3, #0
 80082ac:	e000      	b.n	80082b0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80082ae:	2302      	movs	r3, #2
  }
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3730      	adds	r7, #48	; 0x30
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	080089a9 	.word	0x080089a9
 80082bc:	08008a43 	.word	0x08008a43
 80082c0:	08008bbb 	.word	0x08008bbb

080082c4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	4613      	mov	r3, r2
 80082d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	2b20      	cmp	r3, #32
 80082dc:	d11d      	bne.n	800831a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <HAL_UART_Receive_DMA+0x26>
 80082e4:	88fb      	ldrh	r3, [r7, #6]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e016      	b.n	800831c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d101      	bne.n	80082fc <HAL_UART_Receive_DMA+0x38>
 80082f8:	2302      	movs	r3, #2
 80082fa:	e00f      	b.n	800831c <HAL_UART_Receive_DMA+0x58>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2201      	movs	r2, #1
 8008300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	2200      	movs	r2, #0
 8008308:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800830a:	88fb      	ldrh	r3, [r7, #6]
 800830c:	461a      	mov	r2, r3
 800830e:	68b9      	ldr	r1, [r7, #8]
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 fc9d 	bl	8008c50 <UART_Start_Receive_DMA>
 8008316:	4603      	mov	r3, r0
 8008318:	e000      	b.n	800831c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800831a:	2302      	movs	r3, #2
  }
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b090      	sub	sp, #64	; 0x40
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800832c:	2300      	movs	r3, #0
 800832e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800833a:	2b80      	cmp	r3, #128	; 0x80
 800833c:	bf0c      	ite	eq
 800833e:	2301      	moveq	r3, #1
 8008340:	2300      	movne	r3, #0
 8008342:	b2db      	uxtb	r3, r3
 8008344:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800834c:	b2db      	uxtb	r3, r3
 800834e:	2b21      	cmp	r3, #33	; 0x21
 8008350:	d128      	bne.n	80083a4 <HAL_UART_DMAStop+0x80>
 8008352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d025      	beq.n	80083a4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	3314      	adds	r3, #20
 800835e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008362:	e853 3f00 	ldrex	r3, [r3]
 8008366:	623b      	str	r3, [r7, #32]
   return(result);
 8008368:	6a3b      	ldr	r3, [r7, #32]
 800836a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800836e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3314      	adds	r3, #20
 8008376:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008378:	633a      	str	r2, [r7, #48]	; 0x30
 800837a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800837c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800837e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008380:	e841 2300 	strex	r3, r2, [r1]
 8008384:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1e5      	bne.n	8008358 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008390:	2b00      	cmp	r3, #0
 8008392:	d004      	beq.n	800839e <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008398:	4618      	mov	r0, r3
 800839a:	f7fb fe49 	bl	8004030 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fcf4 	bl	8008d8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	695b      	ldr	r3, [r3, #20]
 80083aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ae:	2b40      	cmp	r3, #64	; 0x40
 80083b0:	bf0c      	ite	eq
 80083b2:	2301      	moveq	r3, #1
 80083b4:	2300      	movne	r3, #0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b22      	cmp	r3, #34	; 0x22
 80083c4:	d128      	bne.n	8008418 <HAL_UART_DMAStop+0xf4>
 80083c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d025      	beq.n	8008418 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3314      	adds	r3, #20
 80083d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	e853 3f00 	ldrex	r3, [r3]
 80083da:	60fb      	str	r3, [r7, #12]
   return(result);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083e2:	637b      	str	r3, [r7, #52]	; 0x34
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	3314      	adds	r3, #20
 80083ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083ec:	61fa      	str	r2, [r7, #28]
 80083ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f0:	69b9      	ldr	r1, [r7, #24]
 80083f2:	69fa      	ldr	r2, [r7, #28]
 80083f4:	e841 2300 	strex	r3, r2, [r1]
 80083f8:	617b      	str	r3, [r7, #20]
   return(result);
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1e5      	bne.n	80083cc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	2b00      	cmp	r3, #0
 8008406:	d004      	beq.n	8008412 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	4618      	mov	r0, r3
 800840e:	f7fb fe0f 	bl	8004030 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fce2 	bl	8008ddc <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008418:	2300      	movs	r3, #0
}
 800841a:	4618      	mov	r0, r3
 800841c:	3740      	adds	r7, #64	; 0x40
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}
	...

08008424 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b0ba      	sub	sp, #232	; 0xe8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	695b      	ldr	r3, [r3, #20]
 8008446:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800844a:	2300      	movs	r3, #0
 800844c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008450:	2300      	movs	r3, #0
 8008452:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800845a:	f003 030f 	and.w	r3, r3, #15
 800845e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008462:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008466:	2b00      	cmp	r3, #0
 8008468:	d10f      	bne.n	800848a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800846a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800846e:	f003 0320 	and.w	r3, r3, #32
 8008472:	2b00      	cmp	r3, #0
 8008474:	d009      	beq.n	800848a <HAL_UART_IRQHandler+0x66>
 8008476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800847a:	f003 0320 	and.w	r3, r3, #32
 800847e:	2b00      	cmp	r3, #0
 8008480:	d003      	beq.n	800848a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 fd89 	bl	8008f9a <UART_Receive_IT>
      return;
 8008488:	e256      	b.n	8008938 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800848a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 80de 	beq.w	8008650 <HAL_UART_IRQHandler+0x22c>
 8008494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008498:	f003 0301 	and.w	r3, r3, #1
 800849c:	2b00      	cmp	r3, #0
 800849e:	d106      	bne.n	80084ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 80d1 	beq.w	8008650 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084b2:	f003 0301 	and.w	r3, r3, #1
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00b      	beq.n	80084d2 <HAL_UART_IRQHandler+0xae>
 80084ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ca:	f043 0201 	orr.w	r2, r3, #1
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084d6:	f003 0304 	and.w	r3, r3, #4
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d00b      	beq.n	80084f6 <HAL_UART_IRQHandler+0xd2>
 80084de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d005      	beq.n	80084f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ee:	f043 0202 	orr.w	r2, r3, #2
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084fa:	f003 0302 	and.w	r3, r3, #2
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d00b      	beq.n	800851a <HAL_UART_IRQHandler+0xf6>
 8008502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008506:	f003 0301 	and.w	r3, r3, #1
 800850a:	2b00      	cmp	r3, #0
 800850c:	d005      	beq.n	800851a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	f043 0204 	orr.w	r2, r3, #4
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800851a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800851e:	f003 0308 	and.w	r3, r3, #8
 8008522:	2b00      	cmp	r3, #0
 8008524:	d011      	beq.n	800854a <HAL_UART_IRQHandler+0x126>
 8008526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d105      	bne.n	800853e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008532:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	2b00      	cmp	r3, #0
 800853c:	d005      	beq.n	800854a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	f043 0208 	orr.w	r2, r3, #8
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	f000 81ed 	beq.w	800892e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008558:	f003 0320 	and.w	r3, r3, #32
 800855c:	2b00      	cmp	r3, #0
 800855e:	d008      	beq.n	8008572 <HAL_UART_IRQHandler+0x14e>
 8008560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d002      	beq.n	8008572 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 fd14 	bl	8008f9a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	695b      	ldr	r3, [r3, #20]
 8008578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800857c:	2b40      	cmp	r3, #64	; 0x40
 800857e:	bf0c      	ite	eq
 8008580:	2301      	moveq	r3, #1
 8008582:	2300      	movne	r3, #0
 8008584:	b2db      	uxtb	r3, r3
 8008586:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	f003 0308 	and.w	r3, r3, #8
 8008592:	2b00      	cmp	r3, #0
 8008594:	d103      	bne.n	800859e <HAL_UART_IRQHandler+0x17a>
 8008596:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800859a:	2b00      	cmp	r3, #0
 800859c:	d04f      	beq.n	800863e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 fc1c 	bl	8008ddc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ae:	2b40      	cmp	r3, #64	; 0x40
 80085b0:	d141      	bne.n	8008636 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	3314      	adds	r3, #20
 80085b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085c0:	e853 3f00 	ldrex	r3, [r3]
 80085c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80085c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3314      	adds	r3, #20
 80085da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80085de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80085e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80085ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80085ee:	e841 2300 	strex	r3, r2, [r1]
 80085f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80085f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d1d9      	bne.n	80085b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008602:	2b00      	cmp	r3, #0
 8008604:	d013      	beq.n	800862e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800860a:	4a7d      	ldr	r2, [pc, #500]	; (8008800 <HAL_UART_IRQHandler+0x3dc>)
 800860c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	4618      	mov	r0, r3
 8008614:	f7fb fd7c 	bl	8004110 <HAL_DMA_Abort_IT>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d016      	beq.n	800864c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008628:	4610      	mov	r0, r2
 800862a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862c:	e00e      	b.n	800864c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f9a4 	bl	800897c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008634:	e00a      	b.n	800864c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f9a0 	bl	800897c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800863c:	e006      	b.n	800864c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f99c 	bl	800897c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2200      	movs	r2, #0
 8008648:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800864a:	e170      	b.n	800892e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800864c:	bf00      	nop
    return;
 800864e:	e16e      	b.n	800892e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008654:	2b01      	cmp	r3, #1
 8008656:	f040 814a 	bne.w	80088ee <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800865a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800865e:	f003 0310 	and.w	r3, r3, #16
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 8143 	beq.w	80088ee <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800866c:	f003 0310 	and.w	r3, r3, #16
 8008670:	2b00      	cmp	r3, #0
 8008672:	f000 813c 	beq.w	80088ee <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008676:	2300      	movs	r3, #0
 8008678:	60bb      	str	r3, [r7, #8]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	60bb      	str	r3, [r7, #8]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	60bb      	str	r3, [r7, #8]
 800868a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	695b      	ldr	r3, [r3, #20]
 8008692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008696:	2b40      	cmp	r3, #64	; 0x40
 8008698:	f040 80b4 	bne.w	8008804 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f000 8140 	beq.w	8008932 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086ba:	429a      	cmp	r2, r3
 80086bc:	f080 8139 	bcs.w	8008932 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086c6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086cc:	69db      	ldr	r3, [r3, #28]
 80086ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086d2:	f000 8088 	beq.w	80087e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	330c      	adds	r3, #12
 80086dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80086ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	330c      	adds	r3, #12
 80086fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008702:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008706:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800870e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800871a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1d9      	bne.n	80086d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3314      	adds	r3, #20
 8008728:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008734:	f023 0301 	bic.w	r3, r3, #1
 8008738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3314      	adds	r3, #20
 8008742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008746:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800874a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800874e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1e1      	bne.n	8008722 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3314      	adds	r3, #20
 8008764:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800876e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3314      	adds	r3, #20
 800877e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008782:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008784:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008788:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e3      	bne.n	800875e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2220      	movs	r2, #32
 800879a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	330c      	adds	r3, #12
 80087aa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ae:	e853 3f00 	ldrex	r3, [r3]
 80087b2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087b6:	f023 0310 	bic.w	r3, r3, #16
 80087ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	330c      	adds	r3, #12
 80087c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80087c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80087ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087d0:	e841 2300 	strex	r3, r2, [r1]
 80087d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d1e3      	bne.n	80087a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fb fc25 	bl	8004030 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	4619      	mov	r1, r3
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f000 f8ca 	bl	8008990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80087fc:	e099      	b.n	8008932 <HAL_UART_IRQHandler+0x50e>
 80087fe:	bf00      	nop
 8008800:	08008ea3 	.word	0x08008ea3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800880c:	b29b      	uxth	r3, r3
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008818:	b29b      	uxth	r3, r3
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 808b 	beq.w	8008936 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008820:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8086 	beq.w	8008936 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	330c      	adds	r3, #12
 8008830:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008834:	e853 3f00 	ldrex	r3, [r3]
 8008838:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800883a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800883c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008840:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	330c      	adds	r3, #12
 800884a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800884e:	647a      	str	r2, [r7, #68]	; 0x44
 8008850:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008854:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800885c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e3      	bne.n	800882a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3314      	adds	r3, #20
 8008868:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886c:	e853 3f00 	ldrex	r3, [r3]
 8008870:	623b      	str	r3, [r7, #32]
   return(result);
 8008872:	6a3b      	ldr	r3, [r7, #32]
 8008874:	f023 0301 	bic.w	r3, r3, #1
 8008878:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3314      	adds	r3, #20
 8008882:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008886:	633a      	str	r2, [r7, #48]	; 0x30
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800888c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e3      	bne.n	8008862 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2220      	movs	r2, #32
 800889e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	330c      	adds	r3, #12
 80088ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	e853 3f00 	ldrex	r3, [r3]
 80088b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0310 	bic.w	r3, r3, #16
 80088be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	330c      	adds	r3, #12
 80088c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80088cc:	61fa      	str	r2, [r7, #28]
 80088ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d0:	69b9      	ldr	r1, [r7, #24]
 80088d2:	69fa      	ldr	r2, [r7, #28]
 80088d4:	e841 2300 	strex	r3, r2, [r1]
 80088d8:	617b      	str	r3, [r7, #20]
   return(result);
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1e3      	bne.n	80088a8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f852 	bl	8008990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80088ec:	e023      	b.n	8008936 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80088ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d009      	beq.n	800890e <HAL_UART_IRQHandler+0x4ea>
 80088fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008902:	2b00      	cmp	r3, #0
 8008904:	d003      	beq.n	800890e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fadf 	bl	8008eca <UART_Transmit_IT>
    return;
 800890c:	e014      	b.n	8008938 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800890e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008916:	2b00      	cmp	r3, #0
 8008918:	d00e      	beq.n	8008938 <HAL_UART_IRQHandler+0x514>
 800891a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800891e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008922:	2b00      	cmp	r3, #0
 8008924:	d008      	beq.n	8008938 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fb1f 	bl	8008f6a <UART_EndTransmit_IT>
    return;
 800892c:	e004      	b.n	8008938 <HAL_UART_IRQHandler+0x514>
    return;
 800892e:	bf00      	nop
 8008930:	e002      	b.n	8008938 <HAL_UART_IRQHandler+0x514>
      return;
 8008932:	bf00      	nop
 8008934:	e000      	b.n	8008938 <HAL_UART_IRQHandler+0x514>
      return;
 8008936:	bf00      	nop
  }
}
 8008938:	37e8      	adds	r7, #232	; 0xe8
 800893a:	46bd      	mov	sp, r7
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop

08008940 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b090      	sub	sp, #64	; 0x40
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d137      	bne.n	8008a34 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80089c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089c6:	2200      	movs	r2, #0
 80089c8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80089ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	3314      	adds	r3, #20
 80089d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089d4:	e853 3f00 	ldrex	r3, [r3]
 80089d8:	623b      	str	r3, [r7, #32]
   return(result);
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80089e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80089e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3314      	adds	r3, #20
 80089e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80089ea:	633a      	str	r2, [r7, #48]	; 0x30
 80089ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089f2:	e841 2300 	strex	r3, r2, [r1]
 80089f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d1e5      	bne.n	80089ca <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	330c      	adds	r3, #12
 8008a04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	e853 3f00 	ldrex	r3, [r3]
 8008a0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a14:	637b      	str	r3, [r7, #52]	; 0x34
 8008a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	330c      	adds	r3, #12
 8008a1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a1e:	61fa      	str	r2, [r7, #28]
 8008a20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	69b9      	ldr	r1, [r7, #24]
 8008a24:	69fa      	ldr	r2, [r7, #28]
 8008a26:	e841 2300 	strex	r3, r2, [r1]
 8008a2a:	617b      	str	r3, [r7, #20]
   return(result);
 8008a2c:	697b      	ldr	r3, [r7, #20]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e5      	bne.n	80089fe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a32:	e002      	b.n	8008a3a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008a34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008a36:	f7fa feeb 	bl	8003810 <HAL_UART_TxCpltCallback>
}
 8008a3a:	bf00      	nop
 8008a3c:	3740      	adds	r7, #64	; 0x40
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008a50:	68f8      	ldr	r0, [r7, #12]
 8008a52:	f7ff ff75 	bl	8008940 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a56:	bf00      	nop
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}

08008a5e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b09c      	sub	sp, #112	; 0x70
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d172      	bne.n	8008b60 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	330c      	adds	r3, #12
 8008a86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	330c      	adds	r3, #12
 8008a9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008aa0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008aa2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008aa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e5      	bne.n	8008a80 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3314      	adds	r3, #20
 8008aba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	e853 3f00 	ldrex	r3, [r3]
 8008ac2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac6:	f023 0301 	bic.w	r3, r3, #1
 8008aca:	667b      	str	r3, [r7, #100]	; 0x64
 8008acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3314      	adds	r3, #20
 8008ad2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008ad4:	647a      	str	r2, [r7, #68]	; 0x44
 8008ad6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ada:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008adc:	e841 2300 	strex	r3, r2, [r1]
 8008ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e5      	bne.n	8008ab4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3314      	adds	r3, #20
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	623b      	str	r3, [r7, #32]
   return(result);
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008afe:	663b      	str	r3, [r7, #96]	; 0x60
 8008b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3314      	adds	r3, #20
 8008b06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b08:	633a      	str	r2, [r7, #48]	; 0x30
 8008b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e5      	bne.n	8008ae8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d119      	bne.n	8008b60 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	330c      	adds	r3, #12
 8008b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	e853 3f00 	ldrex	r3, [r3]
 8008b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f023 0310 	bic.w	r3, r3, #16
 8008b42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	330c      	adds	r3, #12
 8008b4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b4c:	61fa      	str	r2, [r7, #28]
 8008b4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b50:	69b9      	ldr	r1, [r7, #24]
 8008b52:	69fa      	ldr	r2, [r7, #28]
 8008b54:	e841 2300 	strex	r3, r2, [r1]
 8008b58:	617b      	str	r3, [r7, #20]
   return(result);
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1e5      	bne.n	8008b2c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d106      	bne.n	8008b76 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b70:	f7ff ff0e 	bl	8008990 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b74:	e002      	b.n	8008b7c <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008b76:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008b78:	f7ff feec 	bl	8008954 <HAL_UART_RxCpltCallback>
}
 8008b7c:	bf00      	nop
 8008b7e:	3770      	adds	r7, #112	; 0x70
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b90:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b96:	2b01      	cmp	r3, #1
 8008b98:	d108      	bne.n	8008bac <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b9e:	085b      	lsrs	r3, r3, #1
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	68f8      	ldr	r0, [r7, #12]
 8008ba6:	f7ff fef3 	bl	8008990 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008baa:	e002      	b.n	8008bb2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008bac:	68f8      	ldr	r0, [r7, #12]
 8008bae:	f7ff fedb 	bl	8008968 <HAL_UART_RxHalfCpltCallback>
}
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b084      	sub	sp, #16
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bca:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bd6:	2b80      	cmp	r3, #128	; 0x80
 8008bd8:	bf0c      	ite	eq
 8008bda:	2301      	moveq	r3, #1
 8008bdc:	2300      	movne	r3, #0
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	2b21      	cmp	r3, #33	; 0x21
 8008bec:	d108      	bne.n	8008c00 <UART_DMAError+0x46>
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d005      	beq.n	8008c00 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008bfa:	68b8      	ldr	r0, [r7, #8]
 8008bfc:	f000 f8c6 	bl	8008d8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0a:	2b40      	cmp	r3, #64	; 0x40
 8008c0c:	bf0c      	ite	eq
 8008c0e:	2301      	moveq	r3, #1
 8008c10:	2300      	movne	r3, #0
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b22      	cmp	r3, #34	; 0x22
 8008c20:	d108      	bne.n	8008c34 <UART_DMAError+0x7a>
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d005      	beq.n	8008c34 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008c2e:	68b8      	ldr	r0, [r7, #8]
 8008c30:	f000 f8d4 	bl	8008ddc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c38:	f043 0210 	orr.w	r2, r3, #16
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c40:	68b8      	ldr	r0, [r7, #8]
 8008c42:	f7ff fe9b 	bl	800897c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c46:	bf00      	nop
 8008c48:	3710      	adds	r7, #16
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
	...

08008c50 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b098      	sub	sp, #96	; 0x60
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	60f8      	str	r0, [r7, #12]
 8008c58:	60b9      	str	r1, [r7, #8]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008c5e:	68ba      	ldr	r2, [r7, #8]
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	88fa      	ldrh	r2, [r7, #6]
 8008c68:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2222      	movs	r2, #34	; 0x22
 8008c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c7c:	4a40      	ldr	r2, [pc, #256]	; (8008d80 <UART_Start_Receive_DMA+0x130>)
 8008c7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c84:	4a3f      	ldr	r2, [pc, #252]	; (8008d84 <UART_Start_Receive_DMA+0x134>)
 8008c86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8c:	4a3e      	ldr	r2, [pc, #248]	; (8008d88 <UART_Start_Receive_DMA+0x138>)
 8008c8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c94:	2200      	movs	r2, #0
 8008c96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008c98:	f107 0308 	add.w	r3, r7, #8
 8008c9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	4619      	mov	r1, r3
 8008caa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	88fb      	ldrh	r3, [r7, #6]
 8008cb0:	f7fb f966 	bl	8003f80 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	613b      	str	r3, [r7, #16]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	613b      	str	r3, [r7, #16]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	613b      	str	r3, [r7, #16]
 8008cc8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	691b      	ldr	r3, [r3, #16]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d019      	beq.n	8008d0e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	330c      	adds	r3, #12
 8008ce0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cf0:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	330c      	adds	r3, #12
 8008cf8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cfa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008cfc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d00:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e5      	bne.n	8008cda <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3314      	adds	r3, #20
 8008d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	f043 0301 	orr.w	r3, r3, #1
 8008d24:	657b      	str	r3, [r7, #84]	; 0x54
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3314      	adds	r3, #20
 8008d2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008d30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e5      	bne.n	8008d0e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	3314      	adds	r3, #20
 8008d48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	69bb      	ldr	r3, [r7, #24]
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	617b      	str	r3, [r7, #20]
   return(result);
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d58:	653b      	str	r3, [r7, #80]	; 0x50
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3314      	adds	r3, #20
 8008d60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008d62:	627a      	str	r2, [r7, #36]	; 0x24
 8008d64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	6a39      	ldr	r1, [r7, #32]
 8008d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d6a:	e841 2300 	strex	r3, r2, [r1]
 8008d6e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1e5      	bne.n	8008d42 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008d76:	2300      	movs	r3, #0
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3760      	adds	r7, #96	; 0x60
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	08008a5f 	.word	0x08008a5f
 8008d84:	08008b85 	.word	0x08008b85
 8008d88:	08008bbb 	.word	0x08008bbb

08008d8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b089      	sub	sp, #36	; 0x24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	330c      	adds	r3, #12
 8008d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	e853 3f00 	ldrex	r3, [r3]
 8008da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008daa:	61fb      	str	r3, [r7, #28]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	330c      	adds	r3, #12
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	61ba      	str	r2, [r7, #24]
 8008db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db8:	6979      	ldr	r1, [r7, #20]
 8008dba:	69ba      	ldr	r2, [r7, #24]
 8008dbc:	e841 2300 	strex	r3, r2, [r1]
 8008dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d1e5      	bne.n	8008d94 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2220      	movs	r2, #32
 8008dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008dd0:	bf00      	nop
 8008dd2:	3724      	adds	r7, #36	; 0x24
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b095      	sub	sp, #84	; 0x54
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	330c      	adds	r3, #12
 8008dea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	330c      	adds	r3, #12
 8008e02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e04:	643a      	str	r2, [r7, #64]	; 0x40
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e5      	bne.n	8008de4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3314      	adds	r3, #20
 8008e1e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	6a3b      	ldr	r3, [r7, #32]
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	f023 0301 	bic.w	r3, r3, #1
 8008e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3314      	adds	r3, #20
 8008e36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e38:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e5      	bne.n	8008e18 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e50:	2b01      	cmp	r3, #1
 8008e52:	d119      	bne.n	8008e88 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	330c      	adds	r3, #12
 8008e5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	f023 0310 	bic.w	r3, r3, #16
 8008e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	330c      	adds	r3, #12
 8008e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e74:	61ba      	str	r2, [r7, #24]
 8008e76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6979      	ldr	r1, [r7, #20]
 8008e7a:	69ba      	ldr	r2, [r7, #24]
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	613b      	str	r3, [r7, #16]
   return(result);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e5      	bne.n	8008e54 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	2220      	movs	r2, #32
 8008e8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2200      	movs	r2, #0
 8008e94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008e96:	bf00      	nop
 8008e98:	3754      	adds	r7, #84	; 0x54
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f7ff fd5d 	bl	800897c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ec2:	bf00      	nop
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b085      	sub	sp, #20
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	2b21      	cmp	r3, #33	; 0x21
 8008edc:	d13e      	bne.n	8008f5c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	689b      	ldr	r3, [r3, #8]
 8008ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee6:	d114      	bne.n	8008f12 <UART_Transmit_IT+0x48>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	691b      	ldr	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d110      	bne.n	8008f12 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	461a      	mov	r2, r3
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f04:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	1c9a      	adds	r2, r3, #2
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	621a      	str	r2, [r3, #32]
 8008f10:	e008      	b.n	8008f24 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	1c59      	adds	r1, r3, #1
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	6211      	str	r1, [r2, #32]
 8008f1c:	781a      	ldrb	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	4619      	mov	r1, r3
 8008f32:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d10f      	bne.n	8008f58 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f46:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68da      	ldr	r2, [r3, #12]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f56:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	e000      	b.n	8008f5e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f5c:	2302      	movs	r3, #2
  }
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr

08008f6a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f6a:	b580      	push	{r7, lr}
 8008f6c:	b082      	sub	sp, #8
 8008f6e:	af00      	add	r7, sp, #0
 8008f70:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	68da      	ldr	r2, [r3, #12]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f80:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	2220      	movs	r2, #32
 8008f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7fa fc40 	bl	8003810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008f90:	2300      	movs	r3, #0
}
 8008f92:	4618      	mov	r0, r3
 8008f94:	3708      	adds	r7, #8
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}

08008f9a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b08c      	sub	sp, #48	; 0x30
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	2b22      	cmp	r3, #34	; 0x22
 8008fac:	f040 80ab 	bne.w	8009106 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fb8:	d117      	bne.n	8008fea <UART_Receive_IT+0x50>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	691b      	ldr	r3, [r3, #16]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d113      	bne.n	8008fea <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fca:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fdc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fe2:	1c9a      	adds	r2, r3, #2
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	629a      	str	r2, [r3, #40]	; 0x28
 8008fe8:	e026      	b.n	8009038 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fee:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	689b      	ldr	r3, [r3, #8]
 8008ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ffc:	d007      	beq.n	800900e <UART_Receive_IT+0x74>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <UART_Receive_IT+0x82>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	691b      	ldr	r3, [r3, #16]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d106      	bne.n	800901c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	b2da      	uxtb	r2, r3
 8009016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009018:	701a      	strb	r2, [r3, #0]
 800901a:	e008      	b.n	800902e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	685b      	ldr	r3, [r3, #4]
 8009022:	b2db      	uxtb	r3, r3
 8009024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009028:	b2da      	uxtb	r2, r3
 800902a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800902c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009032:	1c5a      	adds	r2, r3, #1
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800903c:	b29b      	uxth	r3, r3
 800903e:	3b01      	subs	r3, #1
 8009040:	b29b      	uxth	r3, r3
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	4619      	mov	r1, r3
 8009046:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009048:	2b00      	cmp	r3, #0
 800904a:	d15a      	bne.n	8009102 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68da      	ldr	r2, [r3, #12]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f022 0220 	bic.w	r2, r2, #32
 800905a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	68da      	ldr	r2, [r3, #12]
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800906a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	695a      	ldr	r2, [r3, #20]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 0201 	bic.w	r2, r2, #1
 800907a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2220      	movs	r2, #32
 8009080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009088:	2b01      	cmp	r3, #1
 800908a:	d135      	bne.n	80090f8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	330c      	adds	r3, #12
 8009098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800909a:	697b      	ldr	r3, [r7, #20]
 800909c:	e853 3f00 	ldrex	r3, [r3]
 80090a0:	613b      	str	r3, [r7, #16]
   return(result);
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	f023 0310 	bic.w	r3, r3, #16
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	330c      	adds	r3, #12
 80090b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090b2:	623a      	str	r2, [r7, #32]
 80090b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b6:	69f9      	ldr	r1, [r7, #28]
 80090b8:	6a3a      	ldr	r2, [r7, #32]
 80090ba:	e841 2300 	strex	r3, r2, [r1]
 80090be:	61bb      	str	r3, [r7, #24]
   return(result);
 80090c0:	69bb      	ldr	r3, [r7, #24]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d1e5      	bne.n	8009092 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 0310 	and.w	r3, r3, #16
 80090d0:	2b10      	cmp	r3, #16
 80090d2:	d10a      	bne.n	80090ea <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80090d4:	2300      	movs	r3, #0
 80090d6:	60fb      	str	r3, [r7, #12]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff fc4d 	bl	8008990 <HAL_UARTEx_RxEventCallback>
 80090f6:	e002      	b.n	80090fe <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f7ff fc2b 	bl	8008954 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80090fe:	2300      	movs	r3, #0
 8009100:	e002      	b.n	8009108 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	e000      	b.n	8009108 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009106:	2302      	movs	r3, #2
  }
}
 8009108:	4618      	mov	r0, r3
 800910a:	3730      	adds	r7, #48	; 0x30
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009114:	b0c0      	sub	sp, #256	; 0x100
 8009116:	af00      	add	r7, sp, #0
 8009118:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800911c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	691b      	ldr	r3, [r3, #16]
 8009124:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800912c:	68d9      	ldr	r1, [r3, #12]
 800912e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009132:	681a      	ldr	r2, [r3, #0]
 8009134:	ea40 0301 	orr.w	r3, r0, r1
 8009138:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800913a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800913e:	689a      	ldr	r2, [r3, #8]
 8009140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009144:	691b      	ldr	r3, [r3, #16]
 8009146:	431a      	orrs	r2, r3
 8009148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	431a      	orrs	r2, r3
 8009150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009154:	69db      	ldr	r3, [r3, #28]
 8009156:	4313      	orrs	r3, r2
 8009158:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800915c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009168:	f021 010c 	bic.w	r1, r1, #12
 800916c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009170:	681a      	ldr	r2, [r3, #0]
 8009172:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009176:	430b      	orrs	r3, r1
 8009178:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800917a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	695b      	ldr	r3, [r3, #20]
 8009182:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800918a:	6999      	ldr	r1, [r3, #24]
 800918c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	ea40 0301 	orr.w	r3, r0, r1
 8009196:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	4b8f      	ldr	r3, [pc, #572]	; (80093dc <UART_SetConfig+0x2cc>)
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d005      	beq.n	80091b0 <UART_SetConfig+0xa0>
 80091a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	4b8d      	ldr	r3, [pc, #564]	; (80093e0 <UART_SetConfig+0x2d0>)
 80091ac:	429a      	cmp	r2, r3
 80091ae:	d104      	bne.n	80091ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091b0:	f7fd fe4c 	bl	8006e4c <HAL_RCC_GetPCLK2Freq>
 80091b4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80091b8:	e003      	b.n	80091c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091ba:	f7fd fe33 	bl	8006e24 <HAL_RCC_GetPCLK1Freq>
 80091be:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c6:	69db      	ldr	r3, [r3, #28]
 80091c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091cc:	f040 810c 	bne.w	80093e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80091d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80091d4:	2200      	movs	r2, #0
 80091d6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091da:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80091de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80091e2:	4622      	mov	r2, r4
 80091e4:	462b      	mov	r3, r5
 80091e6:	1891      	adds	r1, r2, r2
 80091e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80091ea:	415b      	adcs	r3, r3
 80091ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80091f2:	4621      	mov	r1, r4
 80091f4:	eb12 0801 	adds.w	r8, r2, r1
 80091f8:	4629      	mov	r1, r5
 80091fa:	eb43 0901 	adc.w	r9, r3, r1
 80091fe:	f04f 0200 	mov.w	r2, #0
 8009202:	f04f 0300 	mov.w	r3, #0
 8009206:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800920a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800920e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009212:	4690      	mov	r8, r2
 8009214:	4699      	mov	r9, r3
 8009216:	4623      	mov	r3, r4
 8009218:	eb18 0303 	adds.w	r3, r8, r3
 800921c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009220:	462b      	mov	r3, r5
 8009222:	eb49 0303 	adc.w	r3, r9, r3
 8009226:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800922a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009236:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800923a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800923e:	460b      	mov	r3, r1
 8009240:	18db      	adds	r3, r3, r3
 8009242:	653b      	str	r3, [r7, #80]	; 0x50
 8009244:	4613      	mov	r3, r2
 8009246:	eb42 0303 	adc.w	r3, r2, r3
 800924a:	657b      	str	r3, [r7, #84]	; 0x54
 800924c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009250:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009254:	f7f7 f80c 	bl	8000270 <__aeabi_uldivmod>
 8009258:	4602      	mov	r2, r0
 800925a:	460b      	mov	r3, r1
 800925c:	4b61      	ldr	r3, [pc, #388]	; (80093e4 <UART_SetConfig+0x2d4>)
 800925e:	fba3 2302 	umull	r2, r3, r3, r2
 8009262:	095b      	lsrs	r3, r3, #5
 8009264:	011c      	lsls	r4, r3, #4
 8009266:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800926a:	2200      	movs	r2, #0
 800926c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009270:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009274:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009278:	4642      	mov	r2, r8
 800927a:	464b      	mov	r3, r9
 800927c:	1891      	adds	r1, r2, r2
 800927e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009280:	415b      	adcs	r3, r3
 8009282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009284:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009288:	4641      	mov	r1, r8
 800928a:	eb12 0a01 	adds.w	sl, r2, r1
 800928e:	4649      	mov	r1, r9
 8009290:	eb43 0b01 	adc.w	fp, r3, r1
 8009294:	f04f 0200 	mov.w	r2, #0
 8009298:	f04f 0300 	mov.w	r3, #0
 800929c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092a8:	4692      	mov	sl, r2
 80092aa:	469b      	mov	fp, r3
 80092ac:	4643      	mov	r3, r8
 80092ae:	eb1a 0303 	adds.w	r3, sl, r3
 80092b2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092b6:	464b      	mov	r3, r9
 80092b8:	eb4b 0303 	adc.w	r3, fp, r3
 80092bc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80092c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092cc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80092d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80092d4:	460b      	mov	r3, r1
 80092d6:	18db      	adds	r3, r3, r3
 80092d8:	643b      	str	r3, [r7, #64]	; 0x40
 80092da:	4613      	mov	r3, r2
 80092dc:	eb42 0303 	adc.w	r3, r2, r3
 80092e0:	647b      	str	r3, [r7, #68]	; 0x44
 80092e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80092ea:	f7f6 ffc1 	bl	8000270 <__aeabi_uldivmod>
 80092ee:	4602      	mov	r2, r0
 80092f0:	460b      	mov	r3, r1
 80092f2:	4611      	mov	r1, r2
 80092f4:	4b3b      	ldr	r3, [pc, #236]	; (80093e4 <UART_SetConfig+0x2d4>)
 80092f6:	fba3 2301 	umull	r2, r3, r3, r1
 80092fa:	095b      	lsrs	r3, r3, #5
 80092fc:	2264      	movs	r2, #100	; 0x64
 80092fe:	fb02 f303 	mul.w	r3, r2, r3
 8009302:	1acb      	subs	r3, r1, r3
 8009304:	00db      	lsls	r3, r3, #3
 8009306:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800930a:	4b36      	ldr	r3, [pc, #216]	; (80093e4 <UART_SetConfig+0x2d4>)
 800930c:	fba3 2302 	umull	r2, r3, r3, r2
 8009310:	095b      	lsrs	r3, r3, #5
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009318:	441c      	add	r4, r3
 800931a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800931e:	2200      	movs	r2, #0
 8009320:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009324:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009328:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800932c:	4642      	mov	r2, r8
 800932e:	464b      	mov	r3, r9
 8009330:	1891      	adds	r1, r2, r2
 8009332:	63b9      	str	r1, [r7, #56]	; 0x38
 8009334:	415b      	adcs	r3, r3
 8009336:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009338:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800933c:	4641      	mov	r1, r8
 800933e:	1851      	adds	r1, r2, r1
 8009340:	6339      	str	r1, [r7, #48]	; 0x30
 8009342:	4649      	mov	r1, r9
 8009344:	414b      	adcs	r3, r1
 8009346:	637b      	str	r3, [r7, #52]	; 0x34
 8009348:	f04f 0200 	mov.w	r2, #0
 800934c:	f04f 0300 	mov.w	r3, #0
 8009350:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009354:	4659      	mov	r1, fp
 8009356:	00cb      	lsls	r3, r1, #3
 8009358:	4651      	mov	r1, sl
 800935a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800935e:	4651      	mov	r1, sl
 8009360:	00ca      	lsls	r2, r1, #3
 8009362:	4610      	mov	r0, r2
 8009364:	4619      	mov	r1, r3
 8009366:	4603      	mov	r3, r0
 8009368:	4642      	mov	r2, r8
 800936a:	189b      	adds	r3, r3, r2
 800936c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009370:	464b      	mov	r3, r9
 8009372:	460a      	mov	r2, r1
 8009374:	eb42 0303 	adc.w	r3, r2, r3
 8009378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800937c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	2200      	movs	r2, #0
 8009384:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009388:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800938c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009390:	460b      	mov	r3, r1
 8009392:	18db      	adds	r3, r3, r3
 8009394:	62bb      	str	r3, [r7, #40]	; 0x28
 8009396:	4613      	mov	r3, r2
 8009398:	eb42 0303 	adc.w	r3, r2, r3
 800939c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800939e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80093a6:	f7f6 ff63 	bl	8000270 <__aeabi_uldivmod>
 80093aa:	4602      	mov	r2, r0
 80093ac:	460b      	mov	r3, r1
 80093ae:	4b0d      	ldr	r3, [pc, #52]	; (80093e4 <UART_SetConfig+0x2d4>)
 80093b0:	fba3 1302 	umull	r1, r3, r3, r2
 80093b4:	095b      	lsrs	r3, r3, #5
 80093b6:	2164      	movs	r1, #100	; 0x64
 80093b8:	fb01 f303 	mul.w	r3, r1, r3
 80093bc:	1ad3      	subs	r3, r2, r3
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	3332      	adds	r3, #50	; 0x32
 80093c2:	4a08      	ldr	r2, [pc, #32]	; (80093e4 <UART_SetConfig+0x2d4>)
 80093c4:	fba2 2303 	umull	r2, r3, r2, r3
 80093c8:	095b      	lsrs	r3, r3, #5
 80093ca:	f003 0207 	and.w	r2, r3, #7
 80093ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4422      	add	r2, r4
 80093d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80093d8:	e105      	b.n	80095e6 <UART_SetConfig+0x4d6>
 80093da:	bf00      	nop
 80093dc:	40011000 	.word	0x40011000
 80093e0:	40011400 	.word	0x40011400
 80093e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80093e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ec:	2200      	movs	r2, #0
 80093ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80093f2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80093f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80093fa:	4642      	mov	r2, r8
 80093fc:	464b      	mov	r3, r9
 80093fe:	1891      	adds	r1, r2, r2
 8009400:	6239      	str	r1, [r7, #32]
 8009402:	415b      	adcs	r3, r3
 8009404:	627b      	str	r3, [r7, #36]	; 0x24
 8009406:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800940a:	4641      	mov	r1, r8
 800940c:	1854      	adds	r4, r2, r1
 800940e:	4649      	mov	r1, r9
 8009410:	eb43 0501 	adc.w	r5, r3, r1
 8009414:	f04f 0200 	mov.w	r2, #0
 8009418:	f04f 0300 	mov.w	r3, #0
 800941c:	00eb      	lsls	r3, r5, #3
 800941e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009422:	00e2      	lsls	r2, r4, #3
 8009424:	4614      	mov	r4, r2
 8009426:	461d      	mov	r5, r3
 8009428:	4643      	mov	r3, r8
 800942a:	18e3      	adds	r3, r4, r3
 800942c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009430:	464b      	mov	r3, r9
 8009432:	eb45 0303 	adc.w	r3, r5, r3
 8009436:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800943a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009446:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800944a:	f04f 0200 	mov.w	r2, #0
 800944e:	f04f 0300 	mov.w	r3, #0
 8009452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009456:	4629      	mov	r1, r5
 8009458:	008b      	lsls	r3, r1, #2
 800945a:	4621      	mov	r1, r4
 800945c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009460:	4621      	mov	r1, r4
 8009462:	008a      	lsls	r2, r1, #2
 8009464:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009468:	f7f6 ff02 	bl	8000270 <__aeabi_uldivmod>
 800946c:	4602      	mov	r2, r0
 800946e:	460b      	mov	r3, r1
 8009470:	4b60      	ldr	r3, [pc, #384]	; (80095f4 <UART_SetConfig+0x4e4>)
 8009472:	fba3 2302 	umull	r2, r3, r3, r2
 8009476:	095b      	lsrs	r3, r3, #5
 8009478:	011c      	lsls	r4, r3, #4
 800947a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800947e:	2200      	movs	r2, #0
 8009480:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009484:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009488:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800948c:	4642      	mov	r2, r8
 800948e:	464b      	mov	r3, r9
 8009490:	1891      	adds	r1, r2, r2
 8009492:	61b9      	str	r1, [r7, #24]
 8009494:	415b      	adcs	r3, r3
 8009496:	61fb      	str	r3, [r7, #28]
 8009498:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800949c:	4641      	mov	r1, r8
 800949e:	1851      	adds	r1, r2, r1
 80094a0:	6139      	str	r1, [r7, #16]
 80094a2:	4649      	mov	r1, r9
 80094a4:	414b      	adcs	r3, r1
 80094a6:	617b      	str	r3, [r7, #20]
 80094a8:	f04f 0200 	mov.w	r2, #0
 80094ac:	f04f 0300 	mov.w	r3, #0
 80094b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094b4:	4659      	mov	r1, fp
 80094b6:	00cb      	lsls	r3, r1, #3
 80094b8:	4651      	mov	r1, sl
 80094ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094be:	4651      	mov	r1, sl
 80094c0:	00ca      	lsls	r2, r1, #3
 80094c2:	4610      	mov	r0, r2
 80094c4:	4619      	mov	r1, r3
 80094c6:	4603      	mov	r3, r0
 80094c8:	4642      	mov	r2, r8
 80094ca:	189b      	adds	r3, r3, r2
 80094cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80094d0:	464b      	mov	r3, r9
 80094d2:	460a      	mov	r2, r1
 80094d4:	eb42 0303 	adc.w	r3, r2, r3
 80094d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	2200      	movs	r2, #0
 80094e4:	67bb      	str	r3, [r7, #120]	; 0x78
 80094e6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80094e8:	f04f 0200 	mov.w	r2, #0
 80094ec:	f04f 0300 	mov.w	r3, #0
 80094f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80094f4:	4649      	mov	r1, r9
 80094f6:	008b      	lsls	r3, r1, #2
 80094f8:	4641      	mov	r1, r8
 80094fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094fe:	4641      	mov	r1, r8
 8009500:	008a      	lsls	r2, r1, #2
 8009502:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009506:	f7f6 feb3 	bl	8000270 <__aeabi_uldivmod>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4b39      	ldr	r3, [pc, #228]	; (80095f4 <UART_SetConfig+0x4e4>)
 8009510:	fba3 1302 	umull	r1, r3, r3, r2
 8009514:	095b      	lsrs	r3, r3, #5
 8009516:	2164      	movs	r1, #100	; 0x64
 8009518:	fb01 f303 	mul.w	r3, r1, r3
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	011b      	lsls	r3, r3, #4
 8009520:	3332      	adds	r3, #50	; 0x32
 8009522:	4a34      	ldr	r2, [pc, #208]	; (80095f4 <UART_SetConfig+0x4e4>)
 8009524:	fba2 2303 	umull	r2, r3, r2, r3
 8009528:	095b      	lsrs	r3, r3, #5
 800952a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800952e:	441c      	add	r4, r3
 8009530:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009534:	2200      	movs	r2, #0
 8009536:	673b      	str	r3, [r7, #112]	; 0x70
 8009538:	677a      	str	r2, [r7, #116]	; 0x74
 800953a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800953e:	4642      	mov	r2, r8
 8009540:	464b      	mov	r3, r9
 8009542:	1891      	adds	r1, r2, r2
 8009544:	60b9      	str	r1, [r7, #8]
 8009546:	415b      	adcs	r3, r3
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800954e:	4641      	mov	r1, r8
 8009550:	1851      	adds	r1, r2, r1
 8009552:	6039      	str	r1, [r7, #0]
 8009554:	4649      	mov	r1, r9
 8009556:	414b      	adcs	r3, r1
 8009558:	607b      	str	r3, [r7, #4]
 800955a:	f04f 0200 	mov.w	r2, #0
 800955e:	f04f 0300 	mov.w	r3, #0
 8009562:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009566:	4659      	mov	r1, fp
 8009568:	00cb      	lsls	r3, r1, #3
 800956a:	4651      	mov	r1, sl
 800956c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009570:	4651      	mov	r1, sl
 8009572:	00ca      	lsls	r2, r1, #3
 8009574:	4610      	mov	r0, r2
 8009576:	4619      	mov	r1, r3
 8009578:	4603      	mov	r3, r0
 800957a:	4642      	mov	r2, r8
 800957c:	189b      	adds	r3, r3, r2
 800957e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009580:	464b      	mov	r3, r9
 8009582:	460a      	mov	r2, r1
 8009584:	eb42 0303 	adc.w	r3, r2, r3
 8009588:	66fb      	str	r3, [r7, #108]	; 0x6c
 800958a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	663b      	str	r3, [r7, #96]	; 0x60
 8009594:	667a      	str	r2, [r7, #100]	; 0x64
 8009596:	f04f 0200 	mov.w	r2, #0
 800959a:	f04f 0300 	mov.w	r3, #0
 800959e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80095a2:	4649      	mov	r1, r9
 80095a4:	008b      	lsls	r3, r1, #2
 80095a6:	4641      	mov	r1, r8
 80095a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095ac:	4641      	mov	r1, r8
 80095ae:	008a      	lsls	r2, r1, #2
 80095b0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80095b4:	f7f6 fe5c 	bl	8000270 <__aeabi_uldivmod>
 80095b8:	4602      	mov	r2, r0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4b0d      	ldr	r3, [pc, #52]	; (80095f4 <UART_SetConfig+0x4e4>)
 80095be:	fba3 1302 	umull	r1, r3, r3, r2
 80095c2:	095b      	lsrs	r3, r3, #5
 80095c4:	2164      	movs	r1, #100	; 0x64
 80095c6:	fb01 f303 	mul.w	r3, r1, r3
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	011b      	lsls	r3, r3, #4
 80095ce:	3332      	adds	r3, #50	; 0x32
 80095d0:	4a08      	ldr	r2, [pc, #32]	; (80095f4 <UART_SetConfig+0x4e4>)
 80095d2:	fba2 2303 	umull	r2, r3, r2, r3
 80095d6:	095b      	lsrs	r3, r3, #5
 80095d8:	f003 020f 	and.w	r2, r3, #15
 80095dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4422      	add	r2, r4
 80095e4:	609a      	str	r2, [r3, #8]
}
 80095e6:	bf00      	nop
 80095e8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80095ec:	46bd      	mov	sp, r7
 80095ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80095f2:	bf00      	nop
 80095f4:	51eb851f 	.word	0x51eb851f

080095f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095f8:	b084      	sub	sp, #16
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b084      	sub	sp, #16
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
 8009602:	f107 001c 	add.w	r0, r7, #28
 8009606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800960a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800960c:	2b01      	cmp	r3, #1
 800960e:	d122      	bne.n	8009656 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009614:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009628:	687a      	ldr	r2, [r7, #4]
 800962a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	68db      	ldr	r3, [r3, #12]
 8009630:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800963a:	2b01      	cmp	r3, #1
 800963c:	d105      	bne.n	800964a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68db      	ldr	r3, [r3, #12]
 8009642:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f001 fbee 	bl	800ae2c <USB_CoreReset>
 8009650:	4603      	mov	r3, r0
 8009652:	73fb      	strb	r3, [r7, #15]
 8009654:	e01a      	b.n	800968c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	68db      	ldr	r3, [r3, #12]
 800965a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f001 fbe2 	bl	800ae2c <USB_CoreReset>
 8009668:	4603      	mov	r3, r0
 800966a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800966c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800966e:	2b00      	cmp	r3, #0
 8009670:	d106      	bne.n	8009680 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009676:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	639a      	str	r2, [r3, #56]	; 0x38
 800967e:	e005      	b.n	800968c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009684:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800968c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800968e:	2b01      	cmp	r3, #1
 8009690:	d10b      	bne.n	80096aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f043 0206 	orr.w	r2, r3, #6
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	f043 0220 	orr.w	r2, r3, #32
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80096aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3710      	adds	r7, #16
 80096b0:	46bd      	mov	sp, r7
 80096b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096b6:	b004      	add	sp, #16
 80096b8:	4770      	bx	lr
	...

080096bc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80096bc:	b480      	push	{r7}
 80096be:	b087      	sub	sp, #28
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	60f8      	str	r0, [r7, #12]
 80096c4:	60b9      	str	r1, [r7, #8]
 80096c6:	4613      	mov	r3, r2
 80096c8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80096ca:	79fb      	ldrb	r3, [r7, #7]
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d165      	bne.n	800979c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	4a41      	ldr	r2, [pc, #260]	; (80097d8 <USB_SetTurnaroundTime+0x11c>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d906      	bls.n	80096e6 <USB_SetTurnaroundTime+0x2a>
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	4a40      	ldr	r2, [pc, #256]	; (80097dc <USB_SetTurnaroundTime+0x120>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d202      	bcs.n	80096e6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80096e0:	230f      	movs	r3, #15
 80096e2:	617b      	str	r3, [r7, #20]
 80096e4:	e062      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	4a3c      	ldr	r2, [pc, #240]	; (80097dc <USB_SetTurnaroundTime+0x120>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d306      	bcc.n	80096fc <USB_SetTurnaroundTime+0x40>
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	4a3b      	ldr	r2, [pc, #236]	; (80097e0 <USB_SetTurnaroundTime+0x124>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d202      	bcs.n	80096fc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80096f6:	230e      	movs	r3, #14
 80096f8:	617b      	str	r3, [r7, #20]
 80096fa:	e057      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	4a38      	ldr	r2, [pc, #224]	; (80097e0 <USB_SetTurnaroundTime+0x124>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d306      	bcc.n	8009712 <USB_SetTurnaroundTime+0x56>
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	4a37      	ldr	r2, [pc, #220]	; (80097e4 <USB_SetTurnaroundTime+0x128>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d202      	bcs.n	8009712 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800970c:	230d      	movs	r3, #13
 800970e:	617b      	str	r3, [r7, #20]
 8009710:	e04c      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	4a33      	ldr	r2, [pc, #204]	; (80097e4 <USB_SetTurnaroundTime+0x128>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d306      	bcc.n	8009728 <USB_SetTurnaroundTime+0x6c>
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	4a32      	ldr	r2, [pc, #200]	; (80097e8 <USB_SetTurnaroundTime+0x12c>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d802      	bhi.n	8009728 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009722:	230c      	movs	r3, #12
 8009724:	617b      	str	r3, [r7, #20]
 8009726:	e041      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009728:	68bb      	ldr	r3, [r7, #8]
 800972a:	4a2f      	ldr	r2, [pc, #188]	; (80097e8 <USB_SetTurnaroundTime+0x12c>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d906      	bls.n	800973e <USB_SetTurnaroundTime+0x82>
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	4a2e      	ldr	r2, [pc, #184]	; (80097ec <USB_SetTurnaroundTime+0x130>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d802      	bhi.n	800973e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009738:	230b      	movs	r3, #11
 800973a:	617b      	str	r3, [r7, #20]
 800973c:	e036      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	4a2a      	ldr	r2, [pc, #168]	; (80097ec <USB_SetTurnaroundTime+0x130>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d906      	bls.n	8009754 <USB_SetTurnaroundTime+0x98>
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	4a29      	ldr	r2, [pc, #164]	; (80097f0 <USB_SetTurnaroundTime+0x134>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d802      	bhi.n	8009754 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800974e:	230a      	movs	r3, #10
 8009750:	617b      	str	r3, [r7, #20]
 8009752:	e02b      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	4a26      	ldr	r2, [pc, #152]	; (80097f0 <USB_SetTurnaroundTime+0x134>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d906      	bls.n	800976a <USB_SetTurnaroundTime+0xae>
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	4a25      	ldr	r2, [pc, #148]	; (80097f4 <USB_SetTurnaroundTime+0x138>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d202      	bcs.n	800976a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009764:	2309      	movs	r3, #9
 8009766:	617b      	str	r3, [r7, #20]
 8009768:	e020      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	4a21      	ldr	r2, [pc, #132]	; (80097f4 <USB_SetTurnaroundTime+0x138>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d306      	bcc.n	8009780 <USB_SetTurnaroundTime+0xc4>
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	4a20      	ldr	r2, [pc, #128]	; (80097f8 <USB_SetTurnaroundTime+0x13c>)
 8009776:	4293      	cmp	r3, r2
 8009778:	d802      	bhi.n	8009780 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800977a:	2308      	movs	r3, #8
 800977c:	617b      	str	r3, [r7, #20]
 800977e:	e015      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	4a1d      	ldr	r2, [pc, #116]	; (80097f8 <USB_SetTurnaroundTime+0x13c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d906      	bls.n	8009796 <USB_SetTurnaroundTime+0xda>
 8009788:	68bb      	ldr	r3, [r7, #8]
 800978a:	4a1c      	ldr	r2, [pc, #112]	; (80097fc <USB_SetTurnaroundTime+0x140>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d202      	bcs.n	8009796 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009790:	2307      	movs	r3, #7
 8009792:	617b      	str	r3, [r7, #20]
 8009794:	e00a      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009796:	2306      	movs	r3, #6
 8009798:	617b      	str	r3, [r7, #20]
 800979a:	e007      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d102      	bne.n	80097a8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80097a2:	2309      	movs	r3, #9
 80097a4:	617b      	str	r3, [r7, #20]
 80097a6:	e001      	b.n	80097ac <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80097a8:	2309      	movs	r3, #9
 80097aa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	68da      	ldr	r2, [r3, #12]
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	029b      	lsls	r3, r3, #10
 80097c0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80097c4:	431a      	orrs	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80097ca:	2300      	movs	r3, #0
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	371c      	adds	r7, #28
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr
 80097d8:	00d8acbf 	.word	0x00d8acbf
 80097dc:	00e4e1c0 	.word	0x00e4e1c0
 80097e0:	00f42400 	.word	0x00f42400
 80097e4:	01067380 	.word	0x01067380
 80097e8:	011a499f 	.word	0x011a499f
 80097ec:	01312cff 	.word	0x01312cff
 80097f0:	014ca43f 	.word	0x014ca43f
 80097f4:	016e3600 	.word	0x016e3600
 80097f8:	01a6ab1f 	.word	0x01a6ab1f
 80097fc:	01e84800 	.word	0x01e84800

08009800 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	689b      	ldr	r3, [r3, #8]
 800980c:	f043 0201 	orr.w	r2, r3, #1
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009814:	2300      	movs	r3, #0
}
 8009816:	4618      	mov	r0, r3
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009822:	b480      	push	{r7}
 8009824:	b083      	sub	sp, #12
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	689b      	ldr	r3, [r3, #8]
 800982e:	f023 0201 	bic.w	r2, r3, #1
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009836:	2300      	movs	r3, #0
}
 8009838:	4618      	mov	r0, r3
 800983a:	370c      	adds	r7, #12
 800983c:	46bd      	mov	sp, r7
 800983e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009842:	4770      	bx	lr

08009844 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009860:	78fb      	ldrb	r3, [r7, #3]
 8009862:	2b01      	cmp	r3, #1
 8009864:	d115      	bne.n	8009892 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68db      	ldr	r3, [r3, #12]
 800986a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009872:	2001      	movs	r0, #1
 8009874:	f7fa f9a0 	bl	8003bb8 <HAL_Delay>
      ms++;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3301      	adds	r3, #1
 800987c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f001 fa45 	bl	800ad0e <USB_GetMode>
 8009884:	4603      	mov	r3, r0
 8009886:	2b01      	cmp	r3, #1
 8009888:	d01e      	beq.n	80098c8 <USB_SetCurrentMode+0x84>
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2b31      	cmp	r3, #49	; 0x31
 800988e:	d9f0      	bls.n	8009872 <USB_SetCurrentMode+0x2e>
 8009890:	e01a      	b.n	80098c8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009892:	78fb      	ldrb	r3, [r7, #3]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d115      	bne.n	80098c4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098a4:	2001      	movs	r0, #1
 80098a6:	f7fa f987 	bl	8003bb8 <HAL_Delay>
      ms++;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3301      	adds	r3, #1
 80098ae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f001 fa2c 	bl	800ad0e <USB_GetMode>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d005      	beq.n	80098c8 <USB_SetCurrentMode+0x84>
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2b31      	cmp	r3, #49	; 0x31
 80098c0:	d9f0      	bls.n	80098a4 <USB_SetCurrentMode+0x60>
 80098c2:	e001      	b.n	80098c8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	e005      	b.n	80098d4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b32      	cmp	r3, #50	; 0x32
 80098cc:	d101      	bne.n	80098d2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e000      	b.n	80098d4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80098d2:	2300      	movs	r3, #0
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3710      	adds	r7, #16
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}

080098dc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80098dc:	b084      	sub	sp, #16
 80098de:	b580      	push	{r7, lr}
 80098e0:	b086      	sub	sp, #24
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80098ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80098f6:	2300      	movs	r3, #0
 80098f8:	613b      	str	r3, [r7, #16]
 80098fa:	e009      	b.n	8009910 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80098fc:	687a      	ldr	r2, [r7, #4]
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	3340      	adds	r3, #64	; 0x40
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	2200      	movs	r2, #0
 8009908:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	3301      	adds	r3, #1
 800990e:	613b      	str	r3, [r7, #16]
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	2b0e      	cmp	r3, #14
 8009914:	d9f2      	bls.n	80098fc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009918:	2b00      	cmp	r3, #0
 800991a:	d11c      	bne.n	8009956 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800992a:	f043 0302 	orr.w	r3, r3, #2
 800992e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009934:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009940:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800994c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	639a      	str	r2, [r3, #56]	; 0x38
 8009954:	e00b      	b.n	800996e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009966:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009974:	461a      	mov	r2, r3
 8009976:	2300      	movs	r3, #0
 8009978:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009980:	4619      	mov	r1, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009988:	461a      	mov	r2, r3
 800998a:	680b      	ldr	r3, [r1, #0]
 800998c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800998e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009990:	2b01      	cmp	r3, #1
 8009992:	d10c      	bne.n	80099ae <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009996:	2b00      	cmp	r3, #0
 8009998:	d104      	bne.n	80099a4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800999a:	2100      	movs	r1, #0
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f965 	bl	8009c6c <USB_SetDevSpeed>
 80099a2:	e008      	b.n	80099b6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80099a4:	2101      	movs	r1, #1
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	f000 f960 	bl	8009c6c <USB_SetDevSpeed>
 80099ac:	e003      	b.n	80099b6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80099ae:	2103      	movs	r1, #3
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 f95b 	bl	8009c6c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099b6:	2110      	movs	r1, #16
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f8f3 	bl	8009ba4 <USB_FlushTxFifo>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d001      	beq.n	80099c8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 f91f 	bl	8009c0c <USB_FlushRxFifo>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099de:	461a      	mov	r2, r3
 80099e0:	2300      	movs	r3, #0
 80099e2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ea:	461a      	mov	r2, r3
 80099ec:	2300      	movs	r3, #0
 80099ee:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099f6:	461a      	mov	r2, r3
 80099f8:	2300      	movs	r3, #0
 80099fa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099fc:	2300      	movs	r3, #0
 80099fe:	613b      	str	r3, [r7, #16]
 8009a00:	e043      	b.n	8009a8a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	015a      	lsls	r2, r3, #5
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	4413      	add	r3, r2
 8009a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a18:	d118      	bne.n	8009a4c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009a1a:	693b      	ldr	r3, [r7, #16]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d10a      	bne.n	8009a36 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	015a      	lsls	r2, r3, #5
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	4413      	add	r3, r2
 8009a28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a2c:	461a      	mov	r2, r3
 8009a2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	e013      	b.n	8009a5e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	015a      	lsls	r2, r3, #5
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a42:	461a      	mov	r2, r3
 8009a44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a48:	6013      	str	r3, [r2, #0]
 8009a4a:	e008      	b.n	8009a5e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	015a      	lsls	r2, r3, #5
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	4413      	add	r3, r2
 8009a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a58:	461a      	mov	r2, r3
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	015a      	lsls	r2, r3, #5
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	4413      	add	r3, r2
 8009a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a82:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	3301      	adds	r3, #1
 8009a88:	613b      	str	r3, [r7, #16]
 8009a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a8c:	693a      	ldr	r2, [r7, #16]
 8009a8e:	429a      	cmp	r2, r3
 8009a90:	d3b7      	bcc.n	8009a02 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a92:	2300      	movs	r3, #0
 8009a94:	613b      	str	r3, [r7, #16]
 8009a96:	e043      	b.n	8009b20 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009a98:	693b      	ldr	r3, [r7, #16]
 8009a9a:	015a      	lsls	r2, r3, #5
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	4413      	add	r3, r2
 8009aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009aaa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aae:	d118      	bne.n	8009ae2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d10a      	bne.n	8009acc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009ab6:	693b      	ldr	r3, [r7, #16]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009ac8:	6013      	str	r3, [r2, #0]
 8009aca:	e013      	b.n	8009af4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	015a      	lsls	r2, r3, #5
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	4413      	add	r3, r2
 8009ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad8:	461a      	mov	r2, r3
 8009ada:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009ade:	6013      	str	r3, [r2, #0]
 8009ae0:	e008      	b.n	8009af4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	015a      	lsls	r2, r3, #5
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	4413      	add	r3, r2
 8009aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aee:	461a      	mov	r2, r3
 8009af0:	2300      	movs	r3, #0
 8009af2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009af4:	693b      	ldr	r3, [r7, #16]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b00:	461a      	mov	r2, r3
 8009b02:	2300      	movs	r3, #0
 8009b04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b12:	461a      	mov	r2, r3
 8009b14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b18:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	613b      	str	r3, [r7, #16]
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	693a      	ldr	r2, [r7, #16]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d3b7      	bcc.n	8009a98 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	68fa      	ldr	r2, [r7, #12]
 8009b32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b36:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b3a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009b48:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d105      	bne.n	8009b5c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	f043 0210 	orr.w	r2, r3, #16
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	699a      	ldr	r2, [r3, #24]
 8009b60:	4b0f      	ldr	r3, [pc, #60]	; (8009ba0 <USB_DevInit+0x2c4>)
 8009b62:	4313      	orrs	r3, r2
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d005      	beq.n	8009b7a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	699b      	ldr	r3, [r3, #24]
 8009b72:	f043 0208 	orr.w	r2, r3, #8
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d107      	bne.n	8009b90 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	699b      	ldr	r3, [r3, #24]
 8009b84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b88:	f043 0304 	orr.w	r3, r3, #4
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b92:	4618      	mov	r0, r3
 8009b94:	3718      	adds	r7, #24
 8009b96:	46bd      	mov	sp, r7
 8009b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009b9c:	b004      	add	sp, #16
 8009b9e:	4770      	bx	lr
 8009ba0:	803c3800 	.word	0x803c3800

08009ba4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b085      	sub	sp, #20
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
 8009bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009bae:	2300      	movs	r3, #0
 8009bb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4a13      	ldr	r2, [pc, #76]	; (8009c08 <USB_FlushTxFifo+0x64>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d901      	bls.n	8009bc4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009bc0:	2303      	movs	r3, #3
 8009bc2:	e01b      	b.n	8009bfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	daf2      	bge.n	8009bb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	019b      	lsls	r3, r3, #6
 8009bd4:	f043 0220 	orr.w	r2, r3, #32
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	3301      	adds	r3, #1
 8009be0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	4a08      	ldr	r2, [pc, #32]	; (8009c08 <USB_FlushTxFifo+0x64>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d901      	bls.n	8009bee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009bea:	2303      	movs	r3, #3
 8009bec:	e006      	b.n	8009bfc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	f003 0320 	and.w	r3, r3, #32
 8009bf6:	2b20      	cmp	r3, #32
 8009bf8:	d0f0      	beq.n	8009bdc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr
 8009c08:	00030d40 	.word	0x00030d40

08009c0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3301      	adds	r3, #1
 8009c1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	4a11      	ldr	r2, [pc, #68]	; (8009c68 <USB_FlushRxFifo+0x5c>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d901      	bls.n	8009c2a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c26:	2303      	movs	r3, #3
 8009c28:	e018      	b.n	8009c5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	691b      	ldr	r3, [r3, #16]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	daf2      	bge.n	8009c18 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c32:	2300      	movs	r3, #0
 8009c34:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2210      	movs	r2, #16
 8009c3a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4a08      	ldr	r2, [pc, #32]	; (8009c68 <USB_FlushRxFifo+0x5c>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d901      	bls.n	8009c4e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e006      	b.n	8009c5c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	f003 0310 	and.w	r3, r3, #16
 8009c56:	2b10      	cmp	r3, #16
 8009c58:	d0f0      	beq.n	8009c3c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3714      	adds	r7, #20
 8009c60:	46bd      	mov	sp, r7
 8009c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c66:	4770      	bx	lr
 8009c68:	00030d40 	.word	0x00030d40

08009c6c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	460b      	mov	r3, r1
 8009c76:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	78fb      	ldrb	r3, [r7, #3]
 8009c86:	68f9      	ldr	r1, [r7, #12]
 8009c88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr

08009c9e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009c9e:	b480      	push	{r7}
 8009ca0:	b087      	sub	sp, #28
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009caa:	693b      	ldr	r3, [r7, #16]
 8009cac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	f003 0306 	and.w	r3, r3, #6
 8009cb6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d102      	bne.n	8009cc4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	75fb      	strb	r3, [r7, #23]
 8009cc2:	e00a      	b.n	8009cda <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b02      	cmp	r3, #2
 8009cc8:	d002      	beq.n	8009cd0 <USB_GetDevSpeed+0x32>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	2b06      	cmp	r3, #6
 8009cce:	d102      	bne.n	8009cd6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009cd0:	2302      	movs	r3, #2
 8009cd2:	75fb      	strb	r3, [r7, #23]
 8009cd4:	e001      	b.n	8009cda <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009cd6:	230f      	movs	r3, #15
 8009cd8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	371c      	adds	r7, #28
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr

08009ce8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	785b      	ldrb	r3, [r3, #1]
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	d13a      	bne.n	8009d7a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d0a:	69da      	ldr	r2, [r3, #28]
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	f003 030f 	and.w	r3, r3, #15
 8009d14:	2101      	movs	r1, #1
 8009d16:	fa01 f303 	lsl.w	r3, r1, r3
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	68f9      	ldr	r1, [r7, #12]
 8009d1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d22:	4313      	orrs	r3, r2
 8009d24:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	015a      	lsls	r2, r3, #5
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4413      	add	r3, r2
 8009d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d155      	bne.n	8009de8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	015a      	lsls	r2, r3, #5
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	4413      	add	r3, r2
 8009d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	791b      	ldrb	r3, [r3, #4]
 8009d56:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d58:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	059b      	lsls	r3, r3, #22
 8009d5e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d60:	4313      	orrs	r3, r2
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	0151      	lsls	r1, r2, #5
 8009d66:	68fa      	ldr	r2, [r7, #12]
 8009d68:	440a      	add	r2, r1
 8009d6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009d6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009d72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d76:	6013      	str	r3, [r2, #0]
 8009d78:	e036      	b.n	8009de8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d80:	69da      	ldr	r2, [r3, #28]
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	f003 030f 	and.w	r3, r3, #15
 8009d8a:	2101      	movs	r1, #1
 8009d8c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d90:	041b      	lsls	r3, r3, #16
 8009d92:	68f9      	ldr	r1, [r7, #12]
 8009d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	015a      	lsls	r2, r3, #5
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d11a      	bne.n	8009de8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	015a      	lsls	r2, r3, #5
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	4413      	add	r3, r2
 8009dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dbe:	681a      	ldr	r2, [r3, #0]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	791b      	ldrb	r3, [r3, #4]
 8009dcc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009dce:	430b      	orrs	r3, r1
 8009dd0:	4313      	orrs	r3, r2
 8009dd2:	68ba      	ldr	r2, [r7, #8]
 8009dd4:	0151      	lsls	r1, r2, #5
 8009dd6:	68fa      	ldr	r2, [r7, #12]
 8009dd8:	440a      	add	r2, r1
 8009dda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009de6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
	...

08009df8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
 8009e00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	785b      	ldrb	r3, [r3, #1]
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d161      	bne.n	8009ed8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	015a      	lsls	r2, r3, #5
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e2a:	d11f      	bne.n	8009e6c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	015a      	lsls	r2, r3, #5
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	4413      	add	r3, r2
 8009e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68ba      	ldr	r2, [r7, #8]
 8009e3c:	0151      	lsls	r1, r2, #5
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	440a      	add	r2, r1
 8009e42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e4a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	015a      	lsls	r2, r3, #5
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	4413      	add	r3, r2
 8009e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	0151      	lsls	r1, r2, #5
 8009e5e:	68fa      	ldr	r2, [r7, #12]
 8009e60:	440a      	add	r2, r1
 8009e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	f003 030f 	and.w	r3, r3, #15
 8009e7c:	2101      	movs	r1, #1
 8009e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009e82:	b29b      	uxth	r3, r3
 8009e84:	43db      	mvns	r3, r3
 8009e86:	68f9      	ldr	r1, [r7, #12]
 8009e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e8c:	4013      	ands	r3, r2
 8009e8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e96:	69da      	ldr	r2, [r3, #28]
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	f003 030f 	and.w	r3, r3, #15
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	43db      	mvns	r3, r3
 8009eaa:	68f9      	ldr	r1, [r7, #12]
 8009eac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec0:	681a      	ldr	r2, [r3, #0]
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	0159      	lsls	r1, r3, #5
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	440b      	add	r3, r1
 8009eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ece:	4619      	mov	r1, r3
 8009ed0:	4b35      	ldr	r3, [pc, #212]	; (8009fa8 <USB_DeactivateEndpoint+0x1b0>)
 8009ed2:	4013      	ands	r3, r2
 8009ed4:	600b      	str	r3, [r1, #0]
 8009ed6:	e060      	b.n	8009f9a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	015a      	lsls	r2, r3, #5
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	4413      	add	r3, r2
 8009ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009eea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009eee:	d11f      	bne.n	8009f30 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	015a      	lsls	r2, r3, #5
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	0151      	lsls	r1, r2, #5
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	440a      	add	r2, r1
 8009f06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f0e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	015a      	lsls	r2, r3, #5
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	4413      	add	r3, r2
 8009f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	0151      	lsls	r1, r2, #5
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	440a      	add	r2, r1
 8009f26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f2a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f2e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	781b      	ldrb	r3, [r3, #0]
 8009f3c:	f003 030f 	and.w	r3, r3, #15
 8009f40:	2101      	movs	r1, #1
 8009f42:	fa01 f303 	lsl.w	r3, r1, r3
 8009f46:	041b      	lsls	r3, r3, #16
 8009f48:	43db      	mvns	r3, r3
 8009f4a:	68f9      	ldr	r1, [r7, #12]
 8009f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f50:	4013      	ands	r3, r2
 8009f52:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f5a:	69da      	ldr	r2, [r3, #28]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	f003 030f 	and.w	r3, r3, #15
 8009f64:	2101      	movs	r1, #1
 8009f66:	fa01 f303 	lsl.w	r3, r1, r3
 8009f6a:	041b      	lsls	r3, r3, #16
 8009f6c:	43db      	mvns	r3, r3
 8009f6e:	68f9      	ldr	r1, [r7, #12]
 8009f70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f74:	4013      	ands	r3, r2
 8009f76:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	015a      	lsls	r2, r3, #5
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	4413      	add	r3, r2
 8009f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f84:	681a      	ldr	r2, [r3, #0]
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	0159      	lsls	r1, r3, #5
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	440b      	add	r3, r1
 8009f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f92:	4619      	mov	r1, r3
 8009f94:	4b05      	ldr	r3, [pc, #20]	; (8009fac <USB_DeactivateEndpoint+0x1b4>)
 8009f96:	4013      	ands	r3, r2
 8009f98:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	ec337800 	.word	0xec337800
 8009fac:	eff37800 	.word	0xeff37800

08009fb0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b08a      	sub	sp, #40	; 0x28
 8009fb4:	af02      	add	r7, sp, #8
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	60b9      	str	r1, [r7, #8]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	781b      	ldrb	r3, [r3, #0]
 8009fc6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	785b      	ldrb	r3, [r3, #1]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	f040 815c 	bne.w	800a28a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009fd2:	68bb      	ldr	r3, [r7, #8]
 8009fd4:	699b      	ldr	r3, [r3, #24]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d132      	bne.n	800a040 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009fda:	69bb      	ldr	r3, [r7, #24]
 8009fdc:	015a      	lsls	r2, r3, #5
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	4413      	add	r3, r2
 8009fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fe6:	691b      	ldr	r3, [r3, #16]
 8009fe8:	69ba      	ldr	r2, [r7, #24]
 8009fea:	0151      	lsls	r1, r2, #5
 8009fec:	69fa      	ldr	r2, [r7, #28]
 8009fee:	440a      	add	r2, r1
 8009ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ff4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009ff8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009ffc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	015a      	lsls	r2, r3, #5
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	4413      	add	r3, r2
 800a006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a00a:	691b      	ldr	r3, [r3, #16]
 800a00c:	69ba      	ldr	r2, [r7, #24]
 800a00e:	0151      	lsls	r1, r2, #5
 800a010:	69fa      	ldr	r2, [r7, #28]
 800a012:	440a      	add	r2, r1
 800a014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a018:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a01c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a01e:	69bb      	ldr	r3, [r7, #24]
 800a020:	015a      	lsls	r2, r3, #5
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	4413      	add	r3, r2
 800a026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a02a:	691b      	ldr	r3, [r3, #16]
 800a02c:	69ba      	ldr	r2, [r7, #24]
 800a02e:	0151      	lsls	r1, r2, #5
 800a030:	69fa      	ldr	r2, [r7, #28]
 800a032:	440a      	add	r2, r1
 800a034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a038:	0cdb      	lsrs	r3, r3, #19
 800a03a:	04db      	lsls	r3, r3, #19
 800a03c:	6113      	str	r3, [r2, #16]
 800a03e:	e074      	b.n	800a12a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	015a      	lsls	r2, r3, #5
 800a044:	69fb      	ldr	r3, [r7, #28]
 800a046:	4413      	add	r3, r2
 800a048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	0151      	lsls	r1, r2, #5
 800a052:	69fa      	ldr	r2, [r7, #28]
 800a054:	440a      	add	r2, r1
 800a056:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a05a:	0cdb      	lsrs	r3, r3, #19
 800a05c:	04db      	lsls	r3, r3, #19
 800a05e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a060:	69bb      	ldr	r3, [r7, #24]
 800a062:	015a      	lsls	r2, r3, #5
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	4413      	add	r3, r2
 800a068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06c:	691b      	ldr	r3, [r3, #16]
 800a06e:	69ba      	ldr	r2, [r7, #24]
 800a070:	0151      	lsls	r1, r2, #5
 800a072:	69fa      	ldr	r2, [r7, #28]
 800a074:	440a      	add	r2, r1
 800a076:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a07a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a07e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a082:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a090:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	6999      	ldr	r1, [r3, #24]
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	440b      	add	r3, r1
 800a09c:	1e59      	subs	r1, r3, #1
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0a6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0a8:	4b9d      	ldr	r3, [pc, #628]	; (800a320 <USB_EPStartXfer+0x370>)
 800a0aa:	400b      	ands	r3, r1
 800a0ac:	69b9      	ldr	r1, [r7, #24]
 800a0ae:	0148      	lsls	r0, r1, #5
 800a0b0:	69f9      	ldr	r1, [r7, #28]
 800a0b2:	4401      	add	r1, r0
 800a0b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	015a      	lsls	r2, r3, #5
 800a0c0:	69fb      	ldr	r3, [r7, #28]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c8:	691a      	ldr	r2, [r3, #16]
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0d2:	69b9      	ldr	r1, [r7, #24]
 800a0d4:	0148      	lsls	r0, r1, #5
 800a0d6:	69f9      	ldr	r1, [r7, #28]
 800a0d8:	4401      	add	r1, r0
 800a0da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	791b      	ldrb	r3, [r3, #4]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d11f      	bne.n	800a12a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	015a      	lsls	r2, r3, #5
 800a0ee:	69fb      	ldr	r3, [r7, #28]
 800a0f0:	4413      	add	r3, r2
 800a0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	69ba      	ldr	r2, [r7, #24]
 800a0fa:	0151      	lsls	r1, r2, #5
 800a0fc:	69fa      	ldr	r2, [r7, #28]
 800a0fe:	440a      	add	r2, r1
 800a100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a104:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a108:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a10a:	69bb      	ldr	r3, [r7, #24]
 800a10c:	015a      	lsls	r2, r3, #5
 800a10e:	69fb      	ldr	r3, [r7, #28]
 800a110:	4413      	add	r3, r2
 800a112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a116:	691b      	ldr	r3, [r3, #16]
 800a118:	69ba      	ldr	r2, [r7, #24]
 800a11a:	0151      	lsls	r1, r2, #5
 800a11c:	69fa      	ldr	r2, [r7, #28]
 800a11e:	440a      	add	r2, r1
 800a120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a124:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a128:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a12a:	79fb      	ldrb	r3, [r7, #7]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d14b      	bne.n	800a1c8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	695b      	ldr	r3, [r3, #20]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d009      	beq.n	800a14c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a138:	69bb      	ldr	r3, [r7, #24]
 800a13a:	015a      	lsls	r2, r3, #5
 800a13c:	69fb      	ldr	r3, [r7, #28]
 800a13e:	4413      	add	r3, r2
 800a140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a144:	461a      	mov	r2, r3
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	695b      	ldr	r3, [r3, #20]
 800a14a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	791b      	ldrb	r3, [r3, #4]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d128      	bne.n	800a1a6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a160:	2b00      	cmp	r3, #0
 800a162:	d110      	bne.n	800a186 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	015a      	lsls	r2, r3, #5
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	4413      	add	r3, r2
 800a16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	69ba      	ldr	r2, [r7, #24]
 800a174:	0151      	lsls	r1, r2, #5
 800a176:	69fa      	ldr	r2, [r7, #28]
 800a178:	440a      	add	r2, r1
 800a17a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a17e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a182:	6013      	str	r3, [r2, #0]
 800a184:	e00f      	b.n	800a1a6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	015a      	lsls	r2, r3, #5
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	4413      	add	r3, r2
 800a18e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	69ba      	ldr	r2, [r7, #24]
 800a196:	0151      	lsls	r1, r2, #5
 800a198:	69fa      	ldr	r2, [r7, #28]
 800a19a:	440a      	add	r2, r1
 800a19c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	015a      	lsls	r2, r3, #5
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	69ba      	ldr	r2, [r7, #24]
 800a1b6:	0151      	lsls	r1, r2, #5
 800a1b8:	69fa      	ldr	r2, [r7, #28]
 800a1ba:	440a      	add	r2, r1
 800a1bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1c4:	6013      	str	r3, [r2, #0]
 800a1c6:	e133      	b.n	800a430 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1c8:	69bb      	ldr	r3, [r7, #24]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	69ba      	ldr	r2, [r7, #24]
 800a1d8:	0151      	lsls	r1, r2, #5
 800a1da:	69fa      	ldr	r2, [r7, #28]
 800a1dc:	440a      	add	r2, r1
 800a1de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a1e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	791b      	ldrb	r3, [r3, #4]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d015      	beq.n	800a21c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a1f0:	68bb      	ldr	r3, [r7, #8]
 800a1f2:	699b      	ldr	r3, [r3, #24]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 811b 	beq.w	800a430 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a200:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	781b      	ldrb	r3, [r3, #0]
 800a206:	f003 030f 	and.w	r3, r3, #15
 800a20a:	2101      	movs	r1, #1
 800a20c:	fa01 f303 	lsl.w	r3, r1, r3
 800a210:	69f9      	ldr	r1, [r7, #28]
 800a212:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a216:	4313      	orrs	r3, r2
 800a218:	634b      	str	r3, [r1, #52]	; 0x34
 800a21a:	e109      	b.n	800a430 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d110      	bne.n	800a24e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a22c:	69bb      	ldr	r3, [r7, #24]
 800a22e:	015a      	lsls	r2, r3, #5
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	69ba      	ldr	r2, [r7, #24]
 800a23c:	0151      	lsls	r1, r2, #5
 800a23e:	69fa      	ldr	r2, [r7, #28]
 800a240:	440a      	add	r2, r1
 800a242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a246:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a24a:	6013      	str	r3, [r2, #0]
 800a24c:	e00f      	b.n	800a26e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	015a      	lsls	r2, r3, #5
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	4413      	add	r3, r2
 800a256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	69ba      	ldr	r2, [r7, #24]
 800a25e:	0151      	lsls	r1, r2, #5
 800a260:	69fa      	ldr	r2, [r7, #28]
 800a262:	440a      	add	r2, r1
 800a264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a26c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	6919      	ldr	r1, [r3, #16]
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	781a      	ldrb	r2, [r3, #0]
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	699b      	ldr	r3, [r3, #24]
 800a27a:	b298      	uxth	r0, r3
 800a27c:	79fb      	ldrb	r3, [r7, #7]
 800a27e:	9300      	str	r3, [sp, #0]
 800a280:	4603      	mov	r3, r0
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f000 fade 	bl	800a844 <USB_WritePacket>
 800a288:	e0d2      	b.n	800a430 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a28a:	69bb      	ldr	r3, [r7, #24]
 800a28c:	015a      	lsls	r2, r3, #5
 800a28e:	69fb      	ldr	r3, [r7, #28]
 800a290:	4413      	add	r3, r2
 800a292:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a296:	691b      	ldr	r3, [r3, #16]
 800a298:	69ba      	ldr	r2, [r7, #24]
 800a29a:	0151      	lsls	r1, r2, #5
 800a29c:	69fa      	ldr	r2, [r7, #28]
 800a29e:	440a      	add	r2, r1
 800a2a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2a4:	0cdb      	lsrs	r3, r3, #19
 800a2a6:	04db      	lsls	r3, r3, #19
 800a2a8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	015a      	lsls	r2, r3, #5
 800a2ae:	69fb      	ldr	r3, [r7, #28]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2b6:	691b      	ldr	r3, [r3, #16]
 800a2b8:	69ba      	ldr	r2, [r7, #24]
 800a2ba:	0151      	lsls	r1, r2, #5
 800a2bc:	69fa      	ldr	r2, [r7, #28]
 800a2be:	440a      	add	r2, r1
 800a2c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2cc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d126      	bne.n	800a324 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a2d6:	69bb      	ldr	r3, [r7, #24]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e2:	691a      	ldr	r2, [r3, #16]
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a2ec:	69b9      	ldr	r1, [r7, #24]
 800a2ee:	0148      	lsls	r0, r1, #5
 800a2f0:	69f9      	ldr	r1, [r7, #28]
 800a2f2:	4401      	add	r1, r0
 800a2f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2fc:	69bb      	ldr	r3, [r7, #24]
 800a2fe:	015a      	lsls	r2, r3, #5
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	4413      	add	r3, r2
 800a304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	69ba      	ldr	r2, [r7, #24]
 800a30c:	0151      	lsls	r1, r2, #5
 800a30e:	69fa      	ldr	r2, [r7, #28]
 800a310:	440a      	add	r2, r1
 800a312:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a316:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a31a:	6113      	str	r3, [r2, #16]
 800a31c:	e03a      	b.n	800a394 <USB_EPStartXfer+0x3e4>
 800a31e:	bf00      	nop
 800a320:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	699a      	ldr	r2, [r3, #24]
 800a328:	68bb      	ldr	r3, [r7, #8]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	4413      	add	r3, r2
 800a32e:	1e5a      	subs	r2, r3, #1
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	68db      	ldr	r3, [r3, #12]
 800a334:	fbb2 f3f3 	udiv	r3, r2, r3
 800a338:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	8afa      	ldrh	r2, [r7, #22]
 800a340:	fb03 f202 	mul.w	r2, r3, r2
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	015a      	lsls	r2, r3, #5
 800a34c:	69fb      	ldr	r3, [r7, #28]
 800a34e:	4413      	add	r3, r2
 800a350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a354:	691a      	ldr	r2, [r3, #16]
 800a356:	8afb      	ldrh	r3, [r7, #22]
 800a358:	04d9      	lsls	r1, r3, #19
 800a35a:	4b38      	ldr	r3, [pc, #224]	; (800a43c <USB_EPStartXfer+0x48c>)
 800a35c:	400b      	ands	r3, r1
 800a35e:	69b9      	ldr	r1, [r7, #24]
 800a360:	0148      	lsls	r0, r1, #5
 800a362:	69f9      	ldr	r1, [r7, #28]
 800a364:	4401      	add	r1, r0
 800a366:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a36a:	4313      	orrs	r3, r2
 800a36c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a36e:	69bb      	ldr	r3, [r7, #24]
 800a370:	015a      	lsls	r2, r3, #5
 800a372:	69fb      	ldr	r3, [r7, #28]
 800a374:	4413      	add	r3, r2
 800a376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a37a:	691a      	ldr	r2, [r3, #16]
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	69db      	ldr	r3, [r3, #28]
 800a380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a384:	69b9      	ldr	r1, [r7, #24]
 800a386:	0148      	lsls	r0, r1, #5
 800a388:	69f9      	ldr	r1, [r7, #28]
 800a38a:	4401      	add	r1, r0
 800a38c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a390:	4313      	orrs	r3, r2
 800a392:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a394:	79fb      	ldrb	r3, [r7, #7]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d10d      	bne.n	800a3b6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d009      	beq.n	800a3b6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	6919      	ldr	r1, [r3, #16]
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	015a      	lsls	r2, r3, #5
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	4413      	add	r3, r2
 800a3ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3b2:	460a      	mov	r2, r1
 800a3b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	791b      	ldrb	r3, [r3, #4]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d128      	bne.n	800a410 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3be:	69fb      	ldr	r3, [r7, #28]
 800a3c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3c4:	689b      	ldr	r3, [r3, #8]
 800a3c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d110      	bne.n	800a3f0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a3ce:	69bb      	ldr	r3, [r7, #24]
 800a3d0:	015a      	lsls	r2, r3, #5
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	69ba      	ldr	r2, [r7, #24]
 800a3de:	0151      	lsls	r1, r2, #5
 800a3e0:	69fa      	ldr	r2, [r7, #28]
 800a3e2:	440a      	add	r2, r1
 800a3e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a3e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3ec:	6013      	str	r3, [r2, #0]
 800a3ee:	e00f      	b.n	800a410 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a3f0:	69bb      	ldr	r3, [r7, #24]
 800a3f2:	015a      	lsls	r2, r3, #5
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	4413      	add	r3, r2
 800a3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	69ba      	ldr	r2, [r7, #24]
 800a400:	0151      	lsls	r1, r2, #5
 800a402:	69fa      	ldr	r2, [r7, #28]
 800a404:	440a      	add	r2, r1
 800a406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a40a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a40e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a410:	69bb      	ldr	r3, [r7, #24]
 800a412:	015a      	lsls	r2, r3, #5
 800a414:	69fb      	ldr	r3, [r7, #28]
 800a416:	4413      	add	r3, r2
 800a418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	69ba      	ldr	r2, [r7, #24]
 800a420:	0151      	lsls	r1, r2, #5
 800a422:	69fa      	ldr	r2, [r7, #28]
 800a424:	440a      	add	r2, r1
 800a426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a42a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a42e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a430:	2300      	movs	r3, #0
}
 800a432:	4618      	mov	r0, r3
 800a434:	3720      	adds	r7, #32
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
 800a43a:	bf00      	nop
 800a43c:	1ff80000 	.word	0x1ff80000

0800a440 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a440:	b480      	push	{r7}
 800a442:	b087      	sub	sp, #28
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	4613      	mov	r3, r2
 800a44c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	785b      	ldrb	r3, [r3, #1]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	f040 80ce 	bne.w	800a5fe <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d132      	bne.n	800a4d0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	015a      	lsls	r2, r3, #5
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	4413      	add	r3, r2
 800a472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	693a      	ldr	r2, [r7, #16]
 800a47a:	0151      	lsls	r1, r2, #5
 800a47c:	697a      	ldr	r2, [r7, #20]
 800a47e:	440a      	add	r2, r1
 800a480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a484:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a488:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a48c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	015a      	lsls	r2, r3, #5
 800a492:	697b      	ldr	r3, [r7, #20]
 800a494:	4413      	add	r3, r2
 800a496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	0151      	lsls	r1, r2, #5
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	440a      	add	r2, r1
 800a4a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	015a      	lsls	r2, r3, #5
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4ba:	691b      	ldr	r3, [r3, #16]
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	0151      	lsls	r1, r2, #5
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	440a      	add	r2, r1
 800a4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c8:	0cdb      	lsrs	r3, r3, #19
 800a4ca:	04db      	lsls	r3, r3, #19
 800a4cc:	6113      	str	r3, [r2, #16]
 800a4ce:	e04e      	b.n	800a56e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4d0:	693b      	ldr	r3, [r7, #16]
 800a4d2:	015a      	lsls	r2, r3, #5
 800a4d4:	697b      	ldr	r3, [r7, #20]
 800a4d6:	4413      	add	r3, r2
 800a4d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	693a      	ldr	r2, [r7, #16]
 800a4e0:	0151      	lsls	r1, r2, #5
 800a4e2:	697a      	ldr	r2, [r7, #20]
 800a4e4:	440a      	add	r2, r1
 800a4e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4ea:	0cdb      	lsrs	r3, r3, #19
 800a4ec:	04db      	lsls	r3, r3, #19
 800a4ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	015a      	lsls	r2, r3, #5
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	693a      	ldr	r2, [r7, #16]
 800a500:	0151      	lsls	r1, r2, #5
 800a502:	697a      	ldr	r2, [r7, #20]
 800a504:	440a      	add	r2, r1
 800a506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a50a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a50e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a512:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	699a      	ldr	r2, [r3, #24]
 800a518:	68bb      	ldr	r3, [r7, #8]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	429a      	cmp	r2, r3
 800a51e:	d903      	bls.n	800a528 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	68da      	ldr	r2, [r3, #12]
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	015a      	lsls	r2, r3, #5
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a534:	691b      	ldr	r3, [r3, #16]
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	0151      	lsls	r1, r2, #5
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	440a      	add	r2, r1
 800a53e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a546:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a554:	691a      	ldr	r2, [r3, #16]
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	699b      	ldr	r3, [r3, #24]
 800a55a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a55e:	6939      	ldr	r1, [r7, #16]
 800a560:	0148      	lsls	r0, r1, #5
 800a562:	6979      	ldr	r1, [r7, #20]
 800a564:	4401      	add	r1, r0
 800a566:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a56a:	4313      	orrs	r3, r2
 800a56c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a56e:	79fb      	ldrb	r3, [r7, #7]
 800a570:	2b01      	cmp	r3, #1
 800a572:	d11e      	bne.n	800a5b2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	695b      	ldr	r3, [r3, #20]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d009      	beq.n	800a590 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a588:	461a      	mov	r2, r3
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	695b      	ldr	r3, [r3, #20]
 800a58e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a590:	693b      	ldr	r3, [r7, #16]
 800a592:	015a      	lsls	r2, r3, #5
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	4413      	add	r3, r2
 800a598:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	0151      	lsls	r1, r2, #5
 800a5a2:	697a      	ldr	r2, [r7, #20]
 800a5a4:	440a      	add	r2, r1
 800a5a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5ae:	6013      	str	r3, [r2, #0]
 800a5b0:	e097      	b.n	800a6e2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	015a      	lsls	r2, r3, #5
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	4413      	add	r3, r2
 800a5ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	0151      	lsls	r1, r2, #5
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	440a      	add	r2, r1
 800a5c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5d0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	699b      	ldr	r3, [r3, #24]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 8083 	beq.w	800a6e2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	781b      	ldrb	r3, [r3, #0]
 800a5e8:	f003 030f 	and.w	r3, r3, #15
 800a5ec:	2101      	movs	r1, #1
 800a5ee:	fa01 f303 	lsl.w	r3, r1, r3
 800a5f2:	6979      	ldr	r1, [r7, #20]
 800a5f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	634b      	str	r3, [r1, #52]	; 0x34
 800a5fc:	e071      	b.n	800a6e2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	015a      	lsls	r2, r3, #5
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	4413      	add	r3, r2
 800a606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a60a:	691b      	ldr	r3, [r3, #16]
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	0151      	lsls	r1, r2, #5
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	440a      	add	r2, r1
 800a614:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a618:	0cdb      	lsrs	r3, r3, #19
 800a61a:	04db      	lsls	r3, r3, #19
 800a61c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	015a      	lsls	r2, r3, #5
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	4413      	add	r3, r2
 800a626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a62a:	691b      	ldr	r3, [r3, #16]
 800a62c:	693a      	ldr	r2, [r7, #16]
 800a62e:	0151      	lsls	r1, r2, #5
 800a630:	697a      	ldr	r2, [r7, #20]
 800a632:	440a      	add	r2, r1
 800a634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a638:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a63c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a640:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d003      	beq.n	800a652 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	68da      	ldr	r2, [r3, #12]
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	68da      	ldr	r2, [r3, #12]
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	015a      	lsls	r2, r3, #5
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	4413      	add	r3, r2
 800a662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	693a      	ldr	r2, [r7, #16]
 800a66a:	0151      	lsls	r1, r2, #5
 800a66c:	697a      	ldr	r2, [r7, #20]
 800a66e:	440a      	add	r2, r1
 800a670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a674:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a678:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	015a      	lsls	r2, r3, #5
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	4413      	add	r3, r2
 800a682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a686:	691a      	ldr	r2, [r3, #16]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a690:	6939      	ldr	r1, [r7, #16]
 800a692:	0148      	lsls	r0, r1, #5
 800a694:	6979      	ldr	r1, [r7, #20]
 800a696:	4401      	add	r1, r0
 800a698:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a69c:	4313      	orrs	r3, r2
 800a69e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a6a0:	79fb      	ldrb	r3, [r7, #7]
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d10d      	bne.n	800a6c2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d009      	beq.n	800a6c2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	6919      	ldr	r1, [r3, #16]
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	015a      	lsls	r2, r3, #5
 800a6b6:	697b      	ldr	r3, [r7, #20]
 800a6b8:	4413      	add	r3, r2
 800a6ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6be:	460a      	mov	r2, r1
 800a6c0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	015a      	lsls	r2, r3, #5
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	693a      	ldr	r2, [r7, #16]
 800a6d2:	0151      	lsls	r1, r2, #5
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	440a      	add	r2, r1
 800a6d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a6e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	371c      	adds	r7, #28
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b087      	sub	sp, #28
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a6fe:	2300      	movs	r3, #0
 800a700:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	785b      	ldrb	r3, [r3, #1]
 800a70a:	2b01      	cmp	r3, #1
 800a70c:	d14a      	bne.n	800a7a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	781b      	ldrb	r3, [r3, #0]
 800a712:	015a      	lsls	r2, r3, #5
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	4413      	add	r3, r2
 800a718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a726:	f040 8086 	bne.w	800a836 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	781b      	ldrb	r3, [r3, #0]
 800a72e:	015a      	lsls	r2, r3, #5
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	4413      	add	r3, r2
 800a734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	683a      	ldr	r2, [r7, #0]
 800a73c:	7812      	ldrb	r2, [r2, #0]
 800a73e:	0151      	lsls	r1, r2, #5
 800a740:	693a      	ldr	r2, [r7, #16]
 800a742:	440a      	add	r2, r1
 800a744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a748:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a74c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	4413      	add	r3, r2
 800a758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	7812      	ldrb	r2, [r2, #0]
 800a762:	0151      	lsls	r1, r2, #5
 800a764:	693a      	ldr	r2, [r7, #16]
 800a766:	440a      	add	r2, r1
 800a768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a76c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a770:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	3301      	adds	r3, #1
 800a776:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a77e:	4293      	cmp	r3, r2
 800a780:	d902      	bls.n	800a788 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	75fb      	strb	r3, [r7, #23]
          break;
 800a786:	e056      	b.n	800a836 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	4413      	add	r3, r2
 800a792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a79c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7a0:	d0e7      	beq.n	800a772 <USB_EPStopXfer+0x82>
 800a7a2:	e048      	b.n	800a836 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7a4:	683b      	ldr	r3, [r7, #0]
 800a7a6:	781b      	ldrb	r3, [r3, #0]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7bc:	d13b      	bne.n	800a836 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	015a      	lsls	r2, r3, #5
 800a7c4:	693b      	ldr	r3, [r7, #16]
 800a7c6:	4413      	add	r3, r2
 800a7c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	7812      	ldrb	r2, [r2, #0]
 800a7d2:	0151      	lsls	r1, r2, #5
 800a7d4:	693a      	ldr	r2, [r7, #16]
 800a7d6:	440a      	add	r2, r1
 800a7d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a7e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	015a      	lsls	r2, r3, #5
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	7812      	ldrb	r2, [r2, #0]
 800a7f6:	0151      	lsls	r1, r2, #5
 800a7f8:	693a      	ldr	r2, [r7, #16]
 800a7fa:	440a      	add	r2, r1
 800a7fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a800:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a804:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	3301      	adds	r3, #1
 800a80a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a812:	4293      	cmp	r3, r2
 800a814:	d902      	bls.n	800a81c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a816:	2301      	movs	r3, #1
 800a818:	75fb      	strb	r3, [r7, #23]
          break;
 800a81a:	e00c      	b.n	800a836 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	015a      	lsls	r2, r3, #5
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	4413      	add	r3, r2
 800a826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a834:	d0e7      	beq.n	800a806 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a836:	7dfb      	ldrb	r3, [r7, #23]
}
 800a838:	4618      	mov	r0, r3
 800a83a:	371c      	adds	r7, #28
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a844:	b480      	push	{r7}
 800a846:	b089      	sub	sp, #36	; 0x24
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	4611      	mov	r1, r2
 800a850:	461a      	mov	r2, r3
 800a852:	460b      	mov	r3, r1
 800a854:	71fb      	strb	r3, [r7, #7]
 800a856:	4613      	mov	r3, r2
 800a858:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a862:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a866:	2b00      	cmp	r3, #0
 800a868:	d123      	bne.n	800a8b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a86a:	88bb      	ldrh	r3, [r7, #4]
 800a86c:	3303      	adds	r3, #3
 800a86e:	089b      	lsrs	r3, r3, #2
 800a870:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a872:	2300      	movs	r3, #0
 800a874:	61bb      	str	r3, [r7, #24]
 800a876:	e018      	b.n	800a8aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a878:	79fb      	ldrb	r3, [r7, #7]
 800a87a:	031a      	lsls	r2, r3, #12
 800a87c:	697b      	ldr	r3, [r7, #20]
 800a87e:	4413      	add	r3, r2
 800a880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a884:	461a      	mov	r2, r3
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a88c:	69fb      	ldr	r3, [r7, #28]
 800a88e:	3301      	adds	r3, #1
 800a890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a892:	69fb      	ldr	r3, [r7, #28]
 800a894:	3301      	adds	r3, #1
 800a896:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a898:	69fb      	ldr	r3, [r7, #28]
 800a89a:	3301      	adds	r3, #1
 800a89c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a8a4:	69bb      	ldr	r3, [r7, #24]
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	61bb      	str	r3, [r7, #24]
 800a8aa:	69ba      	ldr	r2, [r7, #24]
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d3e2      	bcc.n	800a878 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a8b2:	2300      	movs	r3, #0
}
 800a8b4:	4618      	mov	r0, r3
 800a8b6:	3724      	adds	r7, #36	; 0x24
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b08b      	sub	sp, #44	; 0x2c
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	60f8      	str	r0, [r7, #12]
 800a8c8:	60b9      	str	r1, [r7, #8]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a8d6:	88fb      	ldrh	r3, [r7, #6]
 800a8d8:	089b      	lsrs	r3, r3, #2
 800a8da:	b29b      	uxth	r3, r3
 800a8dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a8de:	88fb      	ldrh	r3, [r7, #6]
 800a8e0:	f003 0303 	and.w	r3, r3, #3
 800a8e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	623b      	str	r3, [r7, #32]
 800a8ea:	e014      	b.n	800a916 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a8ec:	69bb      	ldr	r3, [r7, #24]
 800a8ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f6:	601a      	str	r2, [r3, #0]
    pDest++;
 800a8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8fa:	3301      	adds	r3, #1
 800a8fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a900:	3301      	adds	r3, #1
 800a902:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a906:	3301      	adds	r3, #1
 800a908:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	3301      	adds	r3, #1
 800a90e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a910:	6a3b      	ldr	r3, [r7, #32]
 800a912:	3301      	adds	r3, #1
 800a914:	623b      	str	r3, [r7, #32]
 800a916:	6a3a      	ldr	r2, [r7, #32]
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	429a      	cmp	r2, r3
 800a91c:	d3e6      	bcc.n	800a8ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a91e:	8bfb      	ldrh	r3, [r7, #30]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d01e      	beq.n	800a962 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a928:	69bb      	ldr	r3, [r7, #24]
 800a92a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a92e:	461a      	mov	r2, r3
 800a930:	f107 0310 	add.w	r3, r7, #16
 800a934:	6812      	ldr	r2, [r2, #0]
 800a936:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a938:	693a      	ldr	r2, [r7, #16]
 800a93a:	6a3b      	ldr	r3, [r7, #32]
 800a93c:	b2db      	uxtb	r3, r3
 800a93e:	00db      	lsls	r3, r3, #3
 800a940:	fa22 f303 	lsr.w	r3, r2, r3
 800a944:	b2da      	uxtb	r2, r3
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	701a      	strb	r2, [r3, #0]
      i++;
 800a94a:	6a3b      	ldr	r3, [r7, #32]
 800a94c:	3301      	adds	r3, #1
 800a94e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	3301      	adds	r3, #1
 800a954:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a956:	8bfb      	ldrh	r3, [r7, #30]
 800a958:	3b01      	subs	r3, #1
 800a95a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a95c:	8bfb      	ldrh	r3, [r7, #30]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1ea      	bne.n	800a938 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a964:	4618      	mov	r0, r3
 800a966:	372c      	adds	r7, #44	; 0x2c
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	781b      	ldrb	r3, [r3, #0]
 800a982:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	785b      	ldrb	r3, [r3, #1]
 800a988:	2b01      	cmp	r3, #1
 800a98a:	d12c      	bne.n	800a9e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a98c:	68bb      	ldr	r3, [r7, #8]
 800a98e:	015a      	lsls	r2, r3, #5
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	4413      	add	r3, r2
 800a994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	db12      	blt.n	800a9c4 <USB_EPSetStall+0x54>
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00f      	beq.n	800a9c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	015a      	lsls	r2, r3, #5
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68ba      	ldr	r2, [r7, #8]
 800a9b4:	0151      	lsls	r1, r2, #5
 800a9b6:	68fa      	ldr	r2, [r7, #12]
 800a9b8:	440a      	add	r2, r1
 800a9ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a9c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	015a      	lsls	r2, r3, #5
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	0151      	lsls	r1, r2, #5
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	440a      	add	r2, r1
 800a9da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	e02b      	b.n	800aa3e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	015a      	lsls	r2, r3, #5
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	4413      	add	r3, r2
 800a9ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	db12      	blt.n	800aa1e <USB_EPSetStall+0xae>
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d00f      	beq.n	800aa1e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	015a      	lsls	r2, r3, #5
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	4413      	add	r3, r2
 800aa06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	68ba      	ldr	r2, [r7, #8]
 800aa0e:	0151      	lsls	r1, r2, #5
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	440a      	add	r2, r1
 800aa14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa1c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	015a      	lsls	r2, r3, #5
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	4413      	add	r3, r2
 800aa26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	0151      	lsls	r1, r2, #5
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	440a      	add	r2, r1
 800aa34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3714      	adds	r7, #20
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	785b      	ldrb	r3, [r3, #1]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d128      	bne.n	800aaba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	015a      	lsls	r2, r3, #5
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4413      	add	r3, r2
 800aa70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	68ba      	ldr	r2, [r7, #8]
 800aa78:	0151      	lsls	r1, r2, #5
 800aa7a:	68fa      	ldr	r2, [r7, #12]
 800aa7c:	440a      	add	r2, r1
 800aa7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aa86:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	791b      	ldrb	r3, [r3, #4]
 800aa8c:	2b03      	cmp	r3, #3
 800aa8e:	d003      	beq.n	800aa98 <USB_EPClearStall+0x4c>
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	791b      	ldrb	r3, [r3, #4]
 800aa94:	2b02      	cmp	r3, #2
 800aa96:	d138      	bne.n	800ab0a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	015a      	lsls	r2, r3, #5
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	0151      	lsls	r1, r2, #5
 800aaaa:	68fa      	ldr	r2, [r7, #12]
 800aaac:	440a      	add	r2, r1
 800aaae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aab6:	6013      	str	r3, [r2, #0]
 800aab8:	e027      	b.n	800ab0a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	015a      	lsls	r2, r3, #5
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	4413      	add	r3, r2
 800aac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68ba      	ldr	r2, [r7, #8]
 800aaca:	0151      	lsls	r1, r2, #5
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	440a      	add	r2, r1
 800aad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aad4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aad8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	791b      	ldrb	r3, [r3, #4]
 800aade:	2b03      	cmp	r3, #3
 800aae0:	d003      	beq.n	800aaea <USB_EPClearStall+0x9e>
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	791b      	ldrb	r3, [r3, #4]
 800aae6:	2b02      	cmp	r3, #2
 800aae8:	d10f      	bne.n	800ab0a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	015a      	lsls	r2, r3, #5
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	0151      	lsls	r1, r2, #5
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	440a      	add	r2, r1
 800ab00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab08:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3714      	adds	r7, #20
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b085      	sub	sp, #20
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
 800ab20:	460b      	mov	r3, r1
 800ab22:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	68fa      	ldr	r2, [r7, #12]
 800ab32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab36:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ab3a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab42:	681a      	ldr	r2, [r3, #0]
 800ab44:	78fb      	ldrb	r3, [r7, #3]
 800ab46:	011b      	lsls	r3, r3, #4
 800ab48:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ab4c:	68f9      	ldr	r1, [r7, #12]
 800ab4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab52:	4313      	orrs	r3, r2
 800ab54:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3714      	adds	r7, #20
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab62:	4770      	bx	lr

0800ab64 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b085      	sub	sp, #20
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ab7e:	f023 0303 	bic.w	r3, r3, #3
 800ab82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab92:	f023 0302 	bic.w	r3, r3, #2
 800ab96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr

0800aba6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aba6:	b480      	push	{r7}
 800aba8:	b085      	sub	sp, #20
 800abaa:	af00      	add	r7, sp, #0
 800abac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800abc0:	f023 0303 	bic.w	r3, r3, #3
 800abc4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	68fa      	ldr	r2, [r7, #12]
 800abd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abd4:	f043 0302 	orr.w	r3, r3, #2
 800abd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3714      	adds	r7, #20
 800abe0:	46bd      	mov	sp, r7
 800abe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe6:	4770      	bx	lr

0800abe8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	695b      	ldr	r3, [r3, #20]
 800abf4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	699b      	ldr	r3, [r3, #24]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	4013      	ands	r3, r2
 800abfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac00:	68fb      	ldr	r3, [r7, #12]
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr

0800ac0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac0e:	b480      	push	{r7}
 800ac10:	b085      	sub	sp, #20
 800ac12:	af00      	add	r7, sp, #0
 800ac14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac2a:	69db      	ldr	r3, [r3, #28]
 800ac2c:	68ba      	ldr	r2, [r7, #8]
 800ac2e:	4013      	ands	r3, r2
 800ac30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	0c1b      	lsrs	r3, r3, #16
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3714      	adds	r7, #20
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac40:	4770      	bx	lr

0800ac42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac42:	b480      	push	{r7}
 800ac44:	b085      	sub	sp, #20
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac54:	699b      	ldr	r3, [r3, #24]
 800ac56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac5e:	69db      	ldr	r3, [r3, #28]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	4013      	ands	r3, r2
 800ac64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	b29b      	uxth	r3, r3
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3714      	adds	r7, #20
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac74:	4770      	bx	lr

0800ac76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ac76:	b480      	push	{r7}
 800ac78:	b085      	sub	sp, #20
 800ac7a:	af00      	add	r7, sp, #0
 800ac7c:	6078      	str	r0, [r7, #4]
 800ac7e:	460b      	mov	r3, r1
 800ac80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ac86:	78fb      	ldrb	r3, [r7, #3]
 800ac88:	015a      	lsls	r2, r3, #5
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9c:	695b      	ldr	r3, [r3, #20]
 800ac9e:	68ba      	ldr	r2, [r7, #8]
 800aca0:	4013      	ands	r3, r2
 800aca2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aca4:	68bb      	ldr	r3, [r7, #8]
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3714      	adds	r7, #20
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr

0800acb2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800acb2:	b480      	push	{r7}
 800acb4:	b087      	sub	sp, #28
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	460b      	mov	r3, r1
 800acbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800acd6:	78fb      	ldrb	r3, [r7, #3]
 800acd8:	f003 030f 	and.w	r3, r3, #15
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	fa22 f303 	lsr.w	r3, r2, r3
 800ace2:	01db      	lsls	r3, r3, #7
 800ace4:	b2db      	uxtb	r3, r3
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	4313      	orrs	r3, r2
 800acea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800acec:	78fb      	ldrb	r3, [r7, #3]
 800acee:	015a      	lsls	r2, r3, #5
 800acf0:	697b      	ldr	r3, [r7, #20]
 800acf2:	4413      	add	r3, r2
 800acf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf8:	689b      	ldr	r3, [r3, #8]
 800acfa:	693a      	ldr	r2, [r7, #16]
 800acfc:	4013      	ands	r3, r2
 800acfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad00:	68bb      	ldr	r3, [r7, #8]
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	371c      	adds	r7, #28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ad0e:	b480      	push	{r7}
 800ad10:	b083      	sub	sp, #12
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	695b      	ldr	r3, [r3, #20]
 800ad1a:	f003 0301 	and.w	r3, r3, #1
}
 800ad1e:	4618      	mov	r0, r3
 800ad20:	370c      	adds	r7, #12
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr

0800ad2a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ad2a:	b480      	push	{r7}
 800ad2c:	b085      	sub	sp, #20
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	68fa      	ldr	r2, [r7, #12]
 800ad40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad44:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ad48:	f023 0307 	bic.w	r3, r3, #7
 800ad4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad54:	685b      	ldr	r3, [r3, #4]
 800ad56:	68fa      	ldr	r2, [r7, #12]
 800ad58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad62:	2300      	movs	r3, #0
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b087      	sub	sp, #28
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	460b      	mov	r3, r1
 800ad7a:	607a      	str	r2, [r7, #4]
 800ad7c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	333c      	adds	r3, #60	; 0x3c
 800ad86:	3304      	adds	r3, #4
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	4a26      	ldr	r2, [pc, #152]	; (800ae28 <USB_EP0_OutStart+0xb8>)
 800ad90:	4293      	cmp	r3, r2
 800ad92:	d90a      	bls.n	800adaa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ada0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ada4:	d101      	bne.n	800adaa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ada6:	2300      	movs	r3, #0
 800ada8:	e037      	b.n	800ae1a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb0:	461a      	mov	r2, r3
 800adb2:	2300      	movs	r3, #0
 800adb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	697a      	ldr	r2, [r7, #20]
 800adc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adc4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800adc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	697a      	ldr	r2, [r7, #20]
 800add4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800add8:	f043 0318 	orr.w	r3, r3, #24
 800addc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800adde:	697b      	ldr	r3, [r7, #20]
 800ade0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	697a      	ldr	r2, [r7, #20]
 800ade8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800adf0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800adf2:	7afb      	ldrb	r3, [r7, #11]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d10f      	bne.n	800ae18 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adfe:	461a      	mov	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae12:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ae16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae18:	2300      	movs	r3, #0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	371c      	adds	r7, #28
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop
 800ae28:	4f54300a 	.word	0x4f54300a

0800ae2c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae34:	2300      	movs	r3, #0
 800ae36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	3301      	adds	r3, #1
 800ae3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	4a13      	ldr	r2, [pc, #76]	; (800ae90 <USB_CoreReset+0x64>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d901      	bls.n	800ae4a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae46:	2303      	movs	r3, #3
 800ae48:	e01b      	b.n	800ae82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	daf2      	bge.n	800ae38 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae52:	2300      	movs	r3, #0
 800ae54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	f043 0201 	orr.w	r2, r3, #1
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	3301      	adds	r3, #1
 800ae66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	4a09      	ldr	r2, [pc, #36]	; (800ae90 <USB_CoreReset+0x64>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d901      	bls.n	800ae74 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800ae70:	2303      	movs	r3, #3
 800ae72:	e006      	b.n	800ae82 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	f003 0301 	and.w	r3, r3, #1
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d0f0      	beq.n	800ae62 <USB_CoreReset+0x36>

  return HAL_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	00030d40 	.word	0x00030d40

0800ae94 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aea0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800aea4:	f002 fca2 	bl	800d7ec <USBD_static_malloc>
 800aea8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d109      	bne.n	800aec4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	32b0      	adds	r2, #176	; 0xb0
 800aeba:	2100      	movs	r1, #0
 800aebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aec0:	2302      	movs	r3, #2
 800aec2:	e0d4      	b.n	800b06e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aec4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800aec8:	2100      	movs	r1, #0
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f002 fd1a 	bl	800d904 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	32b0      	adds	r2, #176	; 0xb0
 800aeda:	68f9      	ldr	r1, [r7, #12]
 800aedc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	32b0      	adds	r2, #176	; 0xb0
 800aeea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	7c1b      	ldrb	r3, [r3, #16]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d138      	bne.n	800af6e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aefc:	4b5e      	ldr	r3, [pc, #376]	; (800b078 <USBD_CDC_Init+0x1e4>)
 800aefe:	7819      	ldrb	r1, [r3, #0]
 800af00:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af04:	2202      	movs	r2, #2
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f002 fb4d 	bl	800d5a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af0c:	4b5a      	ldr	r3, [pc, #360]	; (800b078 <USBD_CDC_Init+0x1e4>)
 800af0e:	781b      	ldrb	r3, [r3, #0]
 800af10:	f003 020f 	and.w	r2, r3, #15
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	4613      	mov	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4413      	add	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	440b      	add	r3, r1
 800af20:	3324      	adds	r3, #36	; 0x24
 800af22:	2201      	movs	r2, #1
 800af24:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af26:	4b55      	ldr	r3, [pc, #340]	; (800b07c <USBD_CDC_Init+0x1e8>)
 800af28:	7819      	ldrb	r1, [r3, #0]
 800af2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af2e:	2202      	movs	r2, #2
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f002 fb38 	bl	800d5a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af36:	4b51      	ldr	r3, [pc, #324]	; (800b07c <USBD_CDC_Init+0x1e8>)
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	f003 020f 	and.w	r2, r3, #15
 800af3e:	6879      	ldr	r1, [r7, #4]
 800af40:	4613      	mov	r3, r2
 800af42:	009b      	lsls	r3, r3, #2
 800af44:	4413      	add	r3, r2
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	440b      	add	r3, r1
 800af4a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af4e:	2201      	movs	r2, #1
 800af50:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800af52:	4b4b      	ldr	r3, [pc, #300]	; (800b080 <USBD_CDC_Init+0x1ec>)
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	f003 020f 	and.w	r2, r3, #15
 800af5a:	6879      	ldr	r1, [r7, #4]
 800af5c:	4613      	mov	r3, r2
 800af5e:	009b      	lsls	r3, r3, #2
 800af60:	4413      	add	r3, r2
 800af62:	009b      	lsls	r3, r3, #2
 800af64:	440b      	add	r3, r1
 800af66:	3326      	adds	r3, #38	; 0x26
 800af68:	2210      	movs	r2, #16
 800af6a:	801a      	strh	r2, [r3, #0]
 800af6c:	e035      	b.n	800afda <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800af6e:	4b42      	ldr	r3, [pc, #264]	; (800b078 <USBD_CDC_Init+0x1e4>)
 800af70:	7819      	ldrb	r1, [r3, #0]
 800af72:	2340      	movs	r3, #64	; 0x40
 800af74:	2202      	movs	r2, #2
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f002 fb15 	bl	800d5a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af7c:	4b3e      	ldr	r3, [pc, #248]	; (800b078 <USBD_CDC_Init+0x1e4>)
 800af7e:	781b      	ldrb	r3, [r3, #0]
 800af80:	f003 020f 	and.w	r2, r3, #15
 800af84:	6879      	ldr	r1, [r7, #4]
 800af86:	4613      	mov	r3, r2
 800af88:	009b      	lsls	r3, r3, #2
 800af8a:	4413      	add	r3, r2
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	440b      	add	r3, r1
 800af90:	3324      	adds	r3, #36	; 0x24
 800af92:	2201      	movs	r2, #1
 800af94:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af96:	4b39      	ldr	r3, [pc, #228]	; (800b07c <USBD_CDC_Init+0x1e8>)
 800af98:	7819      	ldrb	r1, [r3, #0]
 800af9a:	2340      	movs	r3, #64	; 0x40
 800af9c:	2202      	movs	r2, #2
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f002 fb01 	bl	800d5a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800afa4:	4b35      	ldr	r3, [pc, #212]	; (800b07c <USBD_CDC_Init+0x1e8>)
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	f003 020f 	and.w	r2, r3, #15
 800afac:	6879      	ldr	r1, [r7, #4]
 800afae:	4613      	mov	r3, r2
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	009b      	lsls	r3, r3, #2
 800afb6:	440b      	add	r3, r1
 800afb8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800afbc:	2201      	movs	r2, #1
 800afbe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800afc0:	4b2f      	ldr	r3, [pc, #188]	; (800b080 <USBD_CDC_Init+0x1ec>)
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	f003 020f 	and.w	r2, r3, #15
 800afc8:	6879      	ldr	r1, [r7, #4]
 800afca:	4613      	mov	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	4413      	add	r3, r2
 800afd0:	009b      	lsls	r3, r3, #2
 800afd2:	440b      	add	r3, r1
 800afd4:	3326      	adds	r3, #38	; 0x26
 800afd6:	2210      	movs	r2, #16
 800afd8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800afda:	4b29      	ldr	r3, [pc, #164]	; (800b080 <USBD_CDC_Init+0x1ec>)
 800afdc:	7819      	ldrb	r1, [r3, #0]
 800afde:	2308      	movs	r3, #8
 800afe0:	2203      	movs	r2, #3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f002 fadf 	bl	800d5a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800afe8:	4b25      	ldr	r3, [pc, #148]	; (800b080 <USBD_CDC_Init+0x1ec>)
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	f003 020f 	and.w	r2, r3, #15
 800aff0:	6879      	ldr	r1, [r7, #4]
 800aff2:	4613      	mov	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	4413      	add	r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	440b      	add	r3, r1
 800affc:	3324      	adds	r3, #36	; 0x24
 800affe:	2201      	movs	r2, #1
 800b000:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b010:	687a      	ldr	r2, [r7, #4]
 800b012:	33b0      	adds	r3, #176	; 0xb0
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	4413      	add	r3, r2
 800b018:	685b      	ldr	r3, [r3, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	2200      	movs	r2, #0
 800b022:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b034:	2b00      	cmp	r3, #0
 800b036:	d101      	bne.n	800b03c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b038:	2302      	movs	r3, #2
 800b03a:	e018      	b.n	800b06e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	7c1b      	ldrb	r3, [r3, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d10a      	bne.n	800b05a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b044:	4b0d      	ldr	r3, [pc, #52]	; (800b07c <USBD_CDC_Init+0x1e8>)
 800b046:	7819      	ldrb	r1, [r3, #0]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b04e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f002 fb96 	bl	800d784 <USBD_LL_PrepareReceive>
 800b058:	e008      	b.n	800b06c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b05a:	4b08      	ldr	r3, [pc, #32]	; (800b07c <USBD_CDC_Init+0x1e8>)
 800b05c:	7819      	ldrb	r1, [r3, #0]
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b064:	2340      	movs	r3, #64	; 0x40
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f002 fb8c 	bl	800d784 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b06c:	2300      	movs	r3, #0
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3710      	adds	r7, #16
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	20000093 	.word	0x20000093
 800b07c:	20000094 	.word	0x20000094
 800b080:	20000095 	.word	0x20000095

0800b084 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b082      	sub	sp, #8
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
 800b08c:	460b      	mov	r3, r1
 800b08e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b090:	4b3a      	ldr	r3, [pc, #232]	; (800b17c <USBD_CDC_DeInit+0xf8>)
 800b092:	781b      	ldrb	r3, [r3, #0]
 800b094:	4619      	mov	r1, r3
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f002 faab 	bl	800d5f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b09c:	4b37      	ldr	r3, [pc, #220]	; (800b17c <USBD_CDC_DeInit+0xf8>)
 800b09e:	781b      	ldrb	r3, [r3, #0]
 800b0a0:	f003 020f 	and.w	r2, r3, #15
 800b0a4:	6879      	ldr	r1, [r7, #4]
 800b0a6:	4613      	mov	r3, r2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	009b      	lsls	r3, r3, #2
 800b0ae:	440b      	add	r3, r1
 800b0b0:	3324      	adds	r3, #36	; 0x24
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b0b6:	4b32      	ldr	r3, [pc, #200]	; (800b180 <USBD_CDC_DeInit+0xfc>)
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f002 fa98 	bl	800d5f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b0c2:	4b2f      	ldr	r3, [pc, #188]	; (800b180 <USBD_CDC_DeInit+0xfc>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	f003 020f 	and.w	r2, r3, #15
 800b0ca:	6879      	ldr	r1, [r7, #4]
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4413      	add	r3, r2
 800b0d2:	009b      	lsls	r3, r3, #2
 800b0d4:	440b      	add	r3, r1
 800b0d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b0da:	2200      	movs	r2, #0
 800b0dc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b0de:	4b29      	ldr	r3, [pc, #164]	; (800b184 <USBD_CDC_DeInit+0x100>)
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	4619      	mov	r1, r3
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f002 fa84 	bl	800d5f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b0ea:	4b26      	ldr	r3, [pc, #152]	; (800b184 <USBD_CDC_DeInit+0x100>)
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	f003 020f 	and.w	r2, r3, #15
 800b0f2:	6879      	ldr	r1, [r7, #4]
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4413      	add	r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	440b      	add	r3, r1
 800b0fe:	3324      	adds	r3, #36	; 0x24
 800b100:	2200      	movs	r2, #0
 800b102:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b104:	4b1f      	ldr	r3, [pc, #124]	; (800b184 <USBD_CDC_DeInit+0x100>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	f003 020f 	and.w	r2, r3, #15
 800b10c:	6879      	ldr	r1, [r7, #4]
 800b10e:	4613      	mov	r3, r2
 800b110:	009b      	lsls	r3, r3, #2
 800b112:	4413      	add	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	440b      	add	r3, r1
 800b118:	3326      	adds	r3, #38	; 0x26
 800b11a:	2200      	movs	r2, #0
 800b11c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	32b0      	adds	r2, #176	; 0xb0
 800b128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d01f      	beq.n	800b170 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	33b0      	adds	r3, #176	; 0xb0
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	4413      	add	r3, r2
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	32b0      	adds	r2, #176	; 0xb0
 800b14e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b152:	4618      	mov	r0, r3
 800b154:	f002 fb58 	bl	800d808 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	32b0      	adds	r2, #176	; 0xb0
 800b162:	2100      	movs	r1, #0
 800b164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b170:	2300      	movs	r3, #0
}
 800b172:	4618      	mov	r0, r3
 800b174:	3708      	adds	r7, #8
 800b176:	46bd      	mov	sp, r7
 800b178:	bd80      	pop	{r7, pc}
 800b17a:	bf00      	nop
 800b17c:	20000093 	.word	0x20000093
 800b180:	20000094 	.word	0x20000094
 800b184:	20000095 	.word	0x20000095

0800b188 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b086      	sub	sp, #24
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
 800b190:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	32b0      	adds	r2, #176	; 0xb0
 800b19c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1a0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d101      	bne.n	800b1b8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	e0bf      	b.n	800b338 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d050      	beq.n	800b266 <USBD_CDC_Setup+0xde>
 800b1c4:	2b20      	cmp	r3, #32
 800b1c6:	f040 80af 	bne.w	800b328 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	88db      	ldrh	r3, [r3, #6]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d03a      	beq.n	800b248 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	b25b      	sxtb	r3, r3
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	da1b      	bge.n	800b214 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	33b0      	adds	r3, #176	; 0xb0
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	689b      	ldr	r3, [r3, #8]
 800b1ee:	683a      	ldr	r2, [r7, #0]
 800b1f0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b1f2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b1f4:	683a      	ldr	r2, [r7, #0]
 800b1f6:	88d2      	ldrh	r2, [r2, #6]
 800b1f8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	88db      	ldrh	r3, [r3, #6]
 800b1fe:	2b07      	cmp	r3, #7
 800b200:	bf28      	it	cs
 800b202:	2307      	movcs	r3, #7
 800b204:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	89fa      	ldrh	r2, [r7, #14]
 800b20a:	4619      	mov	r1, r3
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f001 fd89 	bl	800cd24 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b212:	e090      	b.n	800b336 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	785a      	ldrb	r2, [r3, #1]
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b21e:	683b      	ldr	r3, [r7, #0]
 800b220:	88db      	ldrh	r3, [r3, #6]
 800b222:	2b3f      	cmp	r3, #63	; 0x3f
 800b224:	d803      	bhi.n	800b22e <USBD_CDC_Setup+0xa6>
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	88db      	ldrh	r3, [r3, #6]
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	e000      	b.n	800b230 <USBD_CDC_Setup+0xa8>
 800b22e:	2240      	movs	r2, #64	; 0x40
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b236:	6939      	ldr	r1, [r7, #16]
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b23e:	461a      	mov	r2, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f001 fd9b 	bl	800cd7c <USBD_CtlPrepareRx>
      break;
 800b246:	e076      	b.n	800b336 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	33b0      	adds	r3, #176	; 0xb0
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	4413      	add	r3, r2
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	689b      	ldr	r3, [r3, #8]
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	7850      	ldrb	r0, [r2, #1]
 800b25e:	2200      	movs	r2, #0
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	4798      	blx	r3
      break;
 800b264:	e067      	b.n	800b336 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	785b      	ldrb	r3, [r3, #1]
 800b26a:	2b0b      	cmp	r3, #11
 800b26c:	d851      	bhi.n	800b312 <USBD_CDC_Setup+0x18a>
 800b26e:	a201      	add	r2, pc, #4	; (adr r2, 800b274 <USBD_CDC_Setup+0xec>)
 800b270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b274:	0800b2a5 	.word	0x0800b2a5
 800b278:	0800b321 	.word	0x0800b321
 800b27c:	0800b313 	.word	0x0800b313
 800b280:	0800b313 	.word	0x0800b313
 800b284:	0800b313 	.word	0x0800b313
 800b288:	0800b313 	.word	0x0800b313
 800b28c:	0800b313 	.word	0x0800b313
 800b290:	0800b313 	.word	0x0800b313
 800b294:	0800b313 	.word	0x0800b313
 800b298:	0800b313 	.word	0x0800b313
 800b29c:	0800b2cf 	.word	0x0800b2cf
 800b2a0:	0800b2f9 	.word	0x0800b2f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	d107      	bne.n	800b2c0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b2b0:	f107 030a 	add.w	r3, r7, #10
 800b2b4:	2202      	movs	r2, #2
 800b2b6:	4619      	mov	r1, r3
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f001 fd33 	bl	800cd24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2be:	e032      	b.n	800b326 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f001 fcbd 	bl	800cc42 <USBD_CtlError>
            ret = USBD_FAIL;
 800b2c8:	2303      	movs	r3, #3
 800b2ca:	75fb      	strb	r3, [r7, #23]
          break;
 800b2cc:	e02b      	b.n	800b326 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	2b03      	cmp	r3, #3
 800b2d8:	d107      	bne.n	800b2ea <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b2da:	f107 030d 	add.w	r3, r7, #13
 800b2de:	2201      	movs	r2, #1
 800b2e0:	4619      	mov	r1, r3
 800b2e2:	6878      	ldr	r0, [r7, #4]
 800b2e4:	f001 fd1e 	bl	800cd24 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2e8:	e01d      	b.n	800b326 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f001 fca8 	bl	800cc42 <USBD_CtlError>
            ret = USBD_FAIL;
 800b2f2:	2303      	movs	r3, #3
 800b2f4:	75fb      	strb	r3, [r7, #23]
          break;
 800b2f6:	e016      	b.n	800b326 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	2b03      	cmp	r3, #3
 800b302:	d00f      	beq.n	800b324 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f001 fc9b 	bl	800cc42 <USBD_CtlError>
            ret = USBD_FAIL;
 800b30c:	2303      	movs	r3, #3
 800b30e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b310:	e008      	b.n	800b324 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f001 fc94 	bl	800cc42 <USBD_CtlError>
          ret = USBD_FAIL;
 800b31a:	2303      	movs	r3, #3
 800b31c:	75fb      	strb	r3, [r7, #23]
          break;
 800b31e:	e002      	b.n	800b326 <USBD_CDC_Setup+0x19e>
          break;
 800b320:	bf00      	nop
 800b322:	e008      	b.n	800b336 <USBD_CDC_Setup+0x1ae>
          break;
 800b324:	bf00      	nop
      }
      break;
 800b326:	e006      	b.n	800b336 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b328:	6839      	ldr	r1, [r7, #0]
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f001 fc89 	bl	800cc42 <USBD_CtlError>
      ret = USBD_FAIL;
 800b330:	2303      	movs	r3, #3
 800b332:	75fb      	strb	r3, [r7, #23]
      break;
 800b334:	bf00      	nop
  }

  return (uint8_t)ret;
 800b336:	7dfb      	ldrb	r3, [r7, #23]
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3718      	adds	r7, #24
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b084      	sub	sp, #16
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	460b      	mov	r3, r1
 800b34a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b352:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	32b0      	adds	r2, #176	; 0xb0
 800b35e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d101      	bne.n	800b36a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b366:	2303      	movs	r3, #3
 800b368:	e065      	b.n	800b436 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	32b0      	adds	r2, #176	; 0xb0
 800b374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b378:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b37a:	78fb      	ldrb	r3, [r7, #3]
 800b37c:	f003 020f 	and.w	r2, r3, #15
 800b380:	6879      	ldr	r1, [r7, #4]
 800b382:	4613      	mov	r3, r2
 800b384:	009b      	lsls	r3, r3, #2
 800b386:	4413      	add	r3, r2
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	440b      	add	r3, r1
 800b38c:	3318      	adds	r3, #24
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d02f      	beq.n	800b3f4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b394:	78fb      	ldrb	r3, [r7, #3]
 800b396:	f003 020f 	and.w	r2, r3, #15
 800b39a:	6879      	ldr	r1, [r7, #4]
 800b39c:	4613      	mov	r3, r2
 800b39e:	009b      	lsls	r3, r3, #2
 800b3a0:	4413      	add	r3, r2
 800b3a2:	009b      	lsls	r3, r3, #2
 800b3a4:	440b      	add	r3, r1
 800b3a6:	3318      	adds	r3, #24
 800b3a8:	681a      	ldr	r2, [r3, #0]
 800b3aa:	78fb      	ldrb	r3, [r7, #3]
 800b3ac:	f003 010f 	and.w	r1, r3, #15
 800b3b0:	68f8      	ldr	r0, [r7, #12]
 800b3b2:	460b      	mov	r3, r1
 800b3b4:	00db      	lsls	r3, r3, #3
 800b3b6:	440b      	add	r3, r1
 800b3b8:	009b      	lsls	r3, r3, #2
 800b3ba:	4403      	add	r3, r0
 800b3bc:	3348      	adds	r3, #72	; 0x48
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	fbb2 f1f3 	udiv	r1, r2, r3
 800b3c4:	fb01 f303 	mul.w	r3, r1, r3
 800b3c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d112      	bne.n	800b3f4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b3ce:	78fb      	ldrb	r3, [r7, #3]
 800b3d0:	f003 020f 	and.w	r2, r3, #15
 800b3d4:	6879      	ldr	r1, [r7, #4]
 800b3d6:	4613      	mov	r3, r2
 800b3d8:	009b      	lsls	r3, r3, #2
 800b3da:	4413      	add	r3, r2
 800b3dc:	009b      	lsls	r3, r3, #2
 800b3de:	440b      	add	r3, r1
 800b3e0:	3318      	adds	r3, #24
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b3e6:	78f9      	ldrb	r1, [r7, #3]
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	6878      	ldr	r0, [r7, #4]
 800b3ee:	f002 f9a8 	bl	800d742 <USBD_LL_Transmit>
 800b3f2:	e01f      	b.n	800b434 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b402:	687a      	ldr	r2, [r7, #4]
 800b404:	33b0      	adds	r3, #176	; 0xb0
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	4413      	add	r3, r2
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	691b      	ldr	r3, [r3, #16]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d010      	beq.n	800b434 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	33b0      	adds	r3, #176	; 0xb0
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	4413      	add	r3, r2
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b42a:	68ba      	ldr	r2, [r7, #8]
 800b42c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b430:	78fa      	ldrb	r2, [r7, #3]
 800b432:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b434:	2300      	movs	r3, #0
}
 800b436:	4618      	mov	r0, r3
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}

0800b43e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b43e:	b580      	push	{r7, lr}
 800b440:	b084      	sub	sp, #16
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
 800b446:	460b      	mov	r3, r1
 800b448:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	32b0      	adds	r2, #176	; 0xb0
 800b454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b458:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	32b0      	adds	r2, #176	; 0xb0
 800b464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d101      	bne.n	800b470 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b46c:	2303      	movs	r3, #3
 800b46e:	e01a      	b.n	800b4a6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b470:	78fb      	ldrb	r3, [r7, #3]
 800b472:	4619      	mov	r1, r3
 800b474:	6878      	ldr	r0, [r7, #4]
 800b476:	f002 f9a6 	bl	800d7c6 <USBD_LL_GetRxDataSize>
 800b47a:	4602      	mov	r2, r0
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b488:	687a      	ldr	r2, [r7, #4]
 800b48a:	33b0      	adds	r3, #176	; 0xb0
 800b48c:	009b      	lsls	r3, r3, #2
 800b48e:	4413      	add	r3, r2
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	68db      	ldr	r3, [r3, #12]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b49a:	68fa      	ldr	r2, [r7, #12]
 800b49c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b4a0:	4611      	mov	r1, r2
 800b4a2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b4a4:	2300      	movs	r3, #0
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3710      	adds	r7, #16
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b084      	sub	sp, #16
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	32b0      	adds	r2, #176	; 0xb0
 800b4c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	e025      	b.n	800b51c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	33b0      	adds	r3, #176	; 0xb0
 800b4da:	009b      	lsls	r3, r3, #2
 800b4dc:	4413      	add	r3, r2
 800b4de:	685b      	ldr	r3, [r3, #4]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d01a      	beq.n	800b51a <USBD_CDC_EP0_RxReady+0x6c>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b4ea:	2bff      	cmp	r3, #255	; 0xff
 800b4ec:	d015      	beq.n	800b51a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	33b0      	adds	r3, #176	; 0xb0
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b506:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b508:	68fa      	ldr	r2, [r7, #12]
 800b50a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b50e:	b292      	uxth	r2, r2
 800b510:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	22ff      	movs	r2, #255	; 0xff
 800b516:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b524:	b580      	push	{r7, lr}
 800b526:	b086      	sub	sp, #24
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b52c:	2182      	movs	r1, #130	; 0x82
 800b52e:	4818      	ldr	r0, [pc, #96]	; (800b590 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b530:	f000 fd4f 	bl	800bfd2 <USBD_GetEpDesc>
 800b534:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b536:	2101      	movs	r1, #1
 800b538:	4815      	ldr	r0, [pc, #84]	; (800b590 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b53a:	f000 fd4a 	bl	800bfd2 <USBD_GetEpDesc>
 800b53e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b540:	2181      	movs	r1, #129	; 0x81
 800b542:	4813      	ldr	r0, [pc, #76]	; (800b590 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b544:	f000 fd45 	bl	800bfd2 <USBD_GetEpDesc>
 800b548:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	2210      	movs	r2, #16
 800b554:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d006      	beq.n	800b56a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	2200      	movs	r2, #0
 800b560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b564:	711a      	strb	r2, [r3, #4]
 800b566:	2200      	movs	r2, #0
 800b568:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d006      	beq.n	800b57e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	2200      	movs	r2, #0
 800b574:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b578:	711a      	strb	r2, [r3, #4]
 800b57a:	2200      	movs	r2, #0
 800b57c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	2243      	movs	r2, #67	; 0x43
 800b582:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b584:	4b02      	ldr	r3, [pc, #8]	; (800b590 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b586:	4618      	mov	r0, r3
 800b588:	3718      	adds	r7, #24
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}
 800b58e:	bf00      	nop
 800b590:	20000050 	.word	0x20000050

0800b594 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b59c:	2182      	movs	r1, #130	; 0x82
 800b59e:	4818      	ldr	r0, [pc, #96]	; (800b600 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b5a0:	f000 fd17 	bl	800bfd2 <USBD_GetEpDesc>
 800b5a4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5a6:	2101      	movs	r1, #1
 800b5a8:	4815      	ldr	r0, [pc, #84]	; (800b600 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b5aa:	f000 fd12 	bl	800bfd2 <USBD_GetEpDesc>
 800b5ae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5b0:	2181      	movs	r1, #129	; 0x81
 800b5b2:	4813      	ldr	r0, [pc, #76]	; (800b600 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b5b4:	f000 fd0d 	bl	800bfd2 <USBD_GetEpDesc>
 800b5b8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d002      	beq.n	800b5c6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b5c0:	697b      	ldr	r3, [r7, #20]
 800b5c2:	2210      	movs	r2, #16
 800b5c4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b5c6:	693b      	ldr	r3, [r7, #16]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d006      	beq.n	800b5da <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	711a      	strb	r2, [r3, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f042 0202 	orr.w	r2, r2, #2
 800b5d8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d006      	beq.n	800b5ee <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	711a      	strb	r2, [r3, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	f042 0202 	orr.w	r2, r2, #2
 800b5ec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2243      	movs	r2, #67	; 0x43
 800b5f2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5f4:	4b02      	ldr	r3, [pc, #8]	; (800b600 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3718      	adds	r7, #24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	20000050 	.word	0x20000050

0800b604 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b086      	sub	sp, #24
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b60c:	2182      	movs	r1, #130	; 0x82
 800b60e:	4818      	ldr	r0, [pc, #96]	; (800b670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b610:	f000 fcdf 	bl	800bfd2 <USBD_GetEpDesc>
 800b614:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b616:	2101      	movs	r1, #1
 800b618:	4815      	ldr	r0, [pc, #84]	; (800b670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b61a:	f000 fcda 	bl	800bfd2 <USBD_GetEpDesc>
 800b61e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b620:	2181      	movs	r1, #129	; 0x81
 800b622:	4813      	ldr	r0, [pc, #76]	; (800b670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b624:	f000 fcd5 	bl	800bfd2 <USBD_GetEpDesc>
 800b628:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	2210      	movs	r2, #16
 800b634:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d006      	beq.n	800b64a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	2200      	movs	r2, #0
 800b640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b644:	711a      	strb	r2, [r3, #4]
 800b646:	2200      	movs	r2, #0
 800b648:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d006      	beq.n	800b65e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2200      	movs	r2, #0
 800b654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b658:	711a      	strb	r2, [r3, #4]
 800b65a:	2200      	movs	r2, #0
 800b65c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2243      	movs	r2, #67	; 0x43
 800b662:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b664:	4b02      	ldr	r3, [pc, #8]	; (800b670 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b666:	4618      	mov	r0, r3
 800b668:	3718      	adds	r7, #24
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
 800b66e:	bf00      	nop
 800b670:	20000050 	.word	0x20000050

0800b674 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	220a      	movs	r2, #10
 800b680:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b682:	4b03      	ldr	r3, [pc, #12]	; (800b690 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b684:	4618      	mov	r0, r3
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr
 800b690:	2000000c 	.word	0x2000000c

0800b694 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
 800b69c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b69e:	683b      	ldr	r3, [r7, #0]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d101      	bne.n	800b6a8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	e009      	b.n	800b6bc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6ae:	687a      	ldr	r2, [r7, #4]
 800b6b0:	33b0      	adds	r3, #176	; 0xb0
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	4413      	add	r3, r2
 800b6b6:	683a      	ldr	r2, [r7, #0]
 800b6b8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b6ba:	2300      	movs	r3, #0
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr

0800b6c8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b6c8:	b480      	push	{r7}
 800b6ca:	b087      	sub	sp, #28
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	32b0      	adds	r2, #176	; 0xb0
 800b6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6e2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b6ea:	2303      	movs	r3, #3
 800b6ec:	e008      	b.n	800b700 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	68ba      	ldr	r2, [r7, #8]
 800b6f2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b6fe:	2300      	movs	r3, #0
}
 800b700:	4618      	mov	r0, r3
 800b702:	371c      	adds	r7, #28
 800b704:	46bd      	mov	sp, r7
 800b706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70a:	4770      	bx	lr

0800b70c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	32b0      	adds	r2, #176	; 0xb0
 800b720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b724:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d101      	bne.n	800b730 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b72c:	2303      	movs	r3, #3
 800b72e:	e004      	b.n	800b73a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	683a      	ldr	r2, [r7, #0]
 800b734:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
	...

0800b748 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	32b0      	adds	r2, #176	; 0xb0
 800b75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b75e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b760:	2301      	movs	r3, #1
 800b762:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	32b0      	adds	r2, #176	; 0xb0
 800b76e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d101      	bne.n	800b77a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b776:	2303      	movs	r3, #3
 800b778:	e025      	b.n	800b7c6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b780:	2b00      	cmp	r3, #0
 800b782:	d11f      	bne.n	800b7c4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b784:	68bb      	ldr	r3, [r7, #8]
 800b786:	2201      	movs	r2, #1
 800b788:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b78c:	4b10      	ldr	r3, [pc, #64]	; (800b7d0 <USBD_CDC_TransmitPacket+0x88>)
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	f003 020f 	and.w	r2, r3, #15
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	4613      	mov	r3, r2
 800b79e:	009b      	lsls	r3, r3, #2
 800b7a0:	4413      	add	r3, r2
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	4403      	add	r3, r0
 800b7a6:	3318      	adds	r3, #24
 800b7a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b7aa:	4b09      	ldr	r3, [pc, #36]	; (800b7d0 <USBD_CDC_TransmitPacket+0x88>)
 800b7ac:	7819      	ldrb	r1, [r3, #0]
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f001 ffc1 	bl	800d742 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b7c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3710      	adds	r7, #16
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
 800b7ce:	bf00      	nop
 800b7d0:	20000093 	.word	0x20000093

0800b7d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	32b0      	adds	r2, #176	; 0xb0
 800b7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	32b0      	adds	r2, #176	; 0xb0
 800b7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d101      	bne.n	800b802 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b7fe:	2303      	movs	r3, #3
 800b800:	e018      	b.n	800b834 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	7c1b      	ldrb	r3, [r3, #16]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10a      	bne.n	800b820 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b80a:	4b0c      	ldr	r3, [pc, #48]	; (800b83c <USBD_CDC_ReceivePacket+0x68>)
 800b80c:	7819      	ldrb	r1, [r3, #0]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b814:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f001 ffb3 	bl	800d784 <USBD_LL_PrepareReceive>
 800b81e:	e008      	b.n	800b832 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b820:	4b06      	ldr	r3, [pc, #24]	; (800b83c <USBD_CDC_ReceivePacket+0x68>)
 800b822:	7819      	ldrb	r1, [r3, #0]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b82a:	2340      	movs	r3, #64	; 0x40
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f001 ffa9 	bl	800d784 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b832:	2300      	movs	r3, #0
}
 800b834:	4618      	mov	r0, r3
 800b836:	3710      	adds	r7, #16
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	20000094 	.word	0x20000094

0800b840 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b086      	sub	sp, #24
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	4613      	mov	r3, r2
 800b84c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d101      	bne.n	800b858 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b854:	2303      	movs	r3, #3
 800b856:	e01f      	b.n	800b898 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	2200      	movs	r2, #0
 800b85c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d003      	beq.n	800b87e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2201      	movs	r2, #1
 800b882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	79fa      	ldrb	r2, [r7, #7]
 800b88a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b88c:	68f8      	ldr	r0, [r7, #12]
 800b88e:	f001 fe23 	bl	800d4d8 <USBD_LL_Init>
 800b892:	4603      	mov	r3, r0
 800b894:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b896:	7dfb      	ldrb	r3, [r7, #23]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3718      	adds	r7, #24
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b084      	sub	sp, #16
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d101      	bne.n	800b8b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e025      	b.n	800b904 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	32ae      	adds	r2, #174	; 0xae
 800b8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d00f      	beq.n	800b8f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	32ae      	adds	r2, #174	; 0xae
 800b8de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e4:	f107 020e 	add.w	r2, r7, #14
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	4798      	blx	r3
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b8fa:	1c5a      	adds	r2, r3, #1
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f001 fe2b 	bl	800d570 <USBD_LL_Start>
 800b91a:	4603      	mov	r3, r0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b924:	b480      	push	{r7}
 800b926:	b083      	sub	sp, #12
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b92c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b92e:	4618      	mov	r0, r3
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b93a:	b580      	push	{r7, lr}
 800b93c:	b084      	sub	sp, #16
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
 800b942:	460b      	mov	r3, r1
 800b944:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b946:	2300      	movs	r3, #0
 800b948:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b950:	2b00      	cmp	r3, #0
 800b952:	d009      	beq.n	800b968 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	78fa      	ldrb	r2, [r7, #3]
 800b95e:	4611      	mov	r1, r2
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	4798      	blx	r3
 800b964:	4603      	mov	r3, r0
 800b966:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b968:	7bfb      	ldrb	r3, [r7, #15]
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3710      	adds	r7, #16
 800b96e:	46bd      	mov	sp, r7
 800b970:	bd80      	pop	{r7, pc}

0800b972 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b972:	b580      	push	{r7, lr}
 800b974:	b084      	sub	sp, #16
 800b976:	af00      	add	r7, sp, #0
 800b978:	6078      	str	r0, [r7, #4]
 800b97a:	460b      	mov	r3, r1
 800b97c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b97e:	2300      	movs	r3, #0
 800b980:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b988:	685b      	ldr	r3, [r3, #4]
 800b98a:	78fa      	ldrb	r2, [r7, #3]
 800b98c:	4611      	mov	r1, r2
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	4798      	blx	r3
 800b992:	4603      	mov	r3, r0
 800b994:	2b00      	cmp	r3, #0
 800b996:	d001      	beq.n	800b99c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b998:	2303      	movs	r3, #3
 800b99a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b084      	sub	sp, #16
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b9b6:	6839      	ldr	r1, [r7, #0]
 800b9b8:	4618      	mov	r0, r3
 800b9ba:	f001 f908 	bl	800cbce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2201      	movs	r2, #1
 800b9c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b9cc:	461a      	mov	r2, r3
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b9da:	f003 031f 	and.w	r3, r3, #31
 800b9de:	2b02      	cmp	r3, #2
 800b9e0:	d01a      	beq.n	800ba18 <USBD_LL_SetupStage+0x72>
 800b9e2:	2b02      	cmp	r3, #2
 800b9e4:	d822      	bhi.n	800ba2c <USBD_LL_SetupStage+0x86>
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d002      	beq.n	800b9f0 <USBD_LL_SetupStage+0x4a>
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d00a      	beq.n	800ba04 <USBD_LL_SetupStage+0x5e>
 800b9ee:	e01d      	b.n	800ba2c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b9f6:	4619      	mov	r1, r3
 800b9f8:	6878      	ldr	r0, [r7, #4]
 800b9fa:	f000 fb5f 	bl	800c0bc <USBD_StdDevReq>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	73fb      	strb	r3, [r7, #15]
      break;
 800ba02:	e020      	b.n	800ba46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba0a:	4619      	mov	r1, r3
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fbc7 	bl	800c1a0 <USBD_StdItfReq>
 800ba12:	4603      	mov	r3, r0
 800ba14:	73fb      	strb	r3, [r7, #15]
      break;
 800ba16:	e016      	b.n	800ba46 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba1e:	4619      	mov	r1, r3
 800ba20:	6878      	ldr	r0, [r7, #4]
 800ba22:	f000 fc29 	bl	800c278 <USBD_StdEPReq>
 800ba26:	4603      	mov	r3, r0
 800ba28:	73fb      	strb	r3, [r7, #15]
      break;
 800ba2a:	e00c      	b.n	800ba46 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba32:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	4619      	mov	r1, r3
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f001 fdf8 	bl	800d630 <USBD_LL_StallEP>
 800ba40:	4603      	mov	r3, r0
 800ba42:	73fb      	strb	r3, [r7, #15]
      break;
 800ba44:	bf00      	nop
  }

  return ret;
 800ba46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3710      	adds	r7, #16
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	460b      	mov	r3, r1
 800ba5a:	607a      	str	r2, [r7, #4]
 800ba5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ba62:	7afb      	ldrb	r3, [r7, #11]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d16e      	bne.n	800bb46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ba6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba76:	2b03      	cmp	r3, #3
 800ba78:	f040 8098 	bne.w	800bbac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	689a      	ldr	r2, [r3, #8]
 800ba80:	693b      	ldr	r3, [r7, #16]
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d913      	bls.n	800bab0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	689a      	ldr	r2, [r3, #8]
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	68db      	ldr	r3, [r3, #12]
 800ba90:	1ad2      	subs	r2, r2, r3
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ba96:	693b      	ldr	r3, [r7, #16]
 800ba98:	68da      	ldr	r2, [r3, #12]
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	689b      	ldr	r3, [r3, #8]
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	bf28      	it	cs
 800baa2:	4613      	movcs	r3, r2
 800baa4:	461a      	mov	r2, r3
 800baa6:	6879      	ldr	r1, [r7, #4]
 800baa8:	68f8      	ldr	r0, [r7, #12]
 800baaa:	f001 f984 	bl	800cdb6 <USBD_CtlContinueRx>
 800baae:	e07d      	b.n	800bbac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800bab6:	f003 031f 	and.w	r3, r3, #31
 800baba:	2b02      	cmp	r3, #2
 800babc:	d014      	beq.n	800bae8 <USBD_LL_DataOutStage+0x98>
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d81d      	bhi.n	800bafe <USBD_LL_DataOutStage+0xae>
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d002      	beq.n	800bacc <USBD_LL_DataOutStage+0x7c>
 800bac6:	2b01      	cmp	r3, #1
 800bac8:	d003      	beq.n	800bad2 <USBD_LL_DataOutStage+0x82>
 800baca:	e018      	b.n	800bafe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bacc:	2300      	movs	r3, #0
 800bace:	75bb      	strb	r3, [r7, #22]
            break;
 800bad0:	e018      	b.n	800bb04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	4619      	mov	r1, r3
 800badc:	68f8      	ldr	r0, [r7, #12]
 800bade:	f000 fa5e 	bl	800bf9e <USBD_CoreFindIF>
 800bae2:	4603      	mov	r3, r0
 800bae4:	75bb      	strb	r3, [r7, #22]
            break;
 800bae6:	e00d      	b.n	800bb04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	4619      	mov	r1, r3
 800baf2:	68f8      	ldr	r0, [r7, #12]
 800baf4:	f000 fa60 	bl	800bfb8 <USBD_CoreFindEP>
 800baf8:	4603      	mov	r3, r0
 800bafa:	75bb      	strb	r3, [r7, #22]
            break;
 800bafc:	e002      	b.n	800bb04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bafe:	2300      	movs	r3, #0
 800bb00:	75bb      	strb	r3, [r7, #22]
            break;
 800bb02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bb04:	7dbb      	ldrb	r3, [r7, #22]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d119      	bne.n	800bb3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	d113      	bne.n	800bb3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bb16:	7dba      	ldrb	r2, [r7, #22]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	32ae      	adds	r2, #174	; 0xae
 800bb1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb20:	691b      	ldr	r3, [r3, #16]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d00b      	beq.n	800bb3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bb26:	7dba      	ldrb	r2, [r7, #22]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bb2e:	7dba      	ldrb	r2, [r7, #22]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	32ae      	adds	r2, #174	; 0xae
 800bb34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb38:	691b      	ldr	r3, [r3, #16]
 800bb3a:	68f8      	ldr	r0, [r7, #12]
 800bb3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb3e:	68f8      	ldr	r0, [r7, #12]
 800bb40:	f001 f94a 	bl	800cdd8 <USBD_CtlSendStatus>
 800bb44:	e032      	b.n	800bbac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bb46:	7afb      	ldrb	r3, [r7, #11]
 800bb48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb4c:	b2db      	uxtb	r3, r3
 800bb4e:	4619      	mov	r1, r3
 800bb50:	68f8      	ldr	r0, [r7, #12]
 800bb52:	f000 fa31 	bl	800bfb8 <USBD_CoreFindEP>
 800bb56:	4603      	mov	r3, r0
 800bb58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb5a:	7dbb      	ldrb	r3, [r7, #22]
 800bb5c:	2bff      	cmp	r3, #255	; 0xff
 800bb5e:	d025      	beq.n	800bbac <USBD_LL_DataOutStage+0x15c>
 800bb60:	7dbb      	ldrb	r3, [r7, #22]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d122      	bne.n	800bbac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b03      	cmp	r3, #3
 800bb70:	d117      	bne.n	800bba2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bb72:	7dba      	ldrb	r2, [r7, #22]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	32ae      	adds	r2, #174	; 0xae
 800bb78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb7c:	699b      	ldr	r3, [r3, #24]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d00f      	beq.n	800bba2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bb82:	7dba      	ldrb	r2, [r7, #22]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bb8a:	7dba      	ldrb	r2, [r7, #22]
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	32ae      	adds	r2, #174	; 0xae
 800bb90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb94:	699b      	ldr	r3, [r3, #24]
 800bb96:	7afa      	ldrb	r2, [r7, #11]
 800bb98:	4611      	mov	r1, r2
 800bb9a:	68f8      	ldr	r0, [r7, #12]
 800bb9c:	4798      	blx	r3
 800bb9e:	4603      	mov	r3, r0
 800bba0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bba2:	7dfb      	ldrb	r3, [r7, #23]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d001      	beq.n	800bbac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bba8:	7dfb      	ldrb	r3, [r7, #23]
 800bbaa:	e000      	b.n	800bbae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3718      	adds	r7, #24
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}

0800bbb6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bbb6:	b580      	push	{r7, lr}
 800bbb8:	b086      	sub	sp, #24
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	60f8      	str	r0, [r7, #12]
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	607a      	str	r2, [r7, #4]
 800bbc2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bbc4:	7afb      	ldrb	r3, [r7, #11]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d16f      	bne.n	800bcaa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3314      	adds	r3, #20
 800bbce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bbd6:	2b02      	cmp	r3, #2
 800bbd8:	d15a      	bne.n	800bc90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	689a      	ldr	r2, [r3, #8]
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	68db      	ldr	r3, [r3, #12]
 800bbe2:	429a      	cmp	r2, r3
 800bbe4:	d914      	bls.n	800bc10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	689a      	ldr	r2, [r3, #8]
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	68db      	ldr	r3, [r3, #12]
 800bbee:	1ad2      	subs	r2, r2, r3
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	6879      	ldr	r1, [r7, #4]
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f001 f8ac 	bl	800cd5a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc02:	2300      	movs	r3, #0
 800bc04:	2200      	movs	r2, #0
 800bc06:	2100      	movs	r1, #0
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f001 fdbb 	bl	800d784 <USBD_LL_PrepareReceive>
 800bc0e:	e03f      	b.n	800bc90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	68da      	ldr	r2, [r3, #12]
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	689b      	ldr	r3, [r3, #8]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d11c      	bne.n	800bc56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bc1c:	693b      	ldr	r3, [r7, #16]
 800bc1e:	685a      	ldr	r2, [r3, #4]
 800bc20:	693b      	ldr	r3, [r7, #16]
 800bc22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bc24:	429a      	cmp	r2, r3
 800bc26:	d316      	bcc.n	800bc56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	685a      	ldr	r2, [r3, #4]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d20f      	bcs.n	800bc56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc36:	2200      	movs	r2, #0
 800bc38:	2100      	movs	r1, #0
 800bc3a:	68f8      	ldr	r0, [r7, #12]
 800bc3c:	f001 f88d 	bl	800cd5a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc48:	2300      	movs	r3, #0
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	2100      	movs	r1, #0
 800bc4e:	68f8      	ldr	r0, [r7, #12]
 800bc50:	f001 fd98 	bl	800d784 <USBD_LL_PrepareReceive>
 800bc54:	e01c      	b.n	800bc90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc5c:	b2db      	uxtb	r3, r3
 800bc5e:	2b03      	cmp	r3, #3
 800bc60:	d10f      	bne.n	800bc82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc68:	68db      	ldr	r3, [r3, #12]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d009      	beq.n	800bc82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc7c:	68db      	ldr	r3, [r3, #12]
 800bc7e:	68f8      	ldr	r0, [r7, #12]
 800bc80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bc82:	2180      	movs	r1, #128	; 0x80
 800bc84:	68f8      	ldr	r0, [r7, #12]
 800bc86:	f001 fcd3 	bl	800d630 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bc8a:	68f8      	ldr	r0, [r7, #12]
 800bc8c:	f001 f8b7 	bl	800cdfe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d03a      	beq.n	800bd10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	f7ff fe42 	bl	800b924 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2200      	movs	r2, #0
 800bca4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bca8:	e032      	b.n	800bd10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bcaa:	7afb      	ldrb	r3, [r7, #11]
 800bcac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bcb0:	b2db      	uxtb	r3, r3
 800bcb2:	4619      	mov	r1, r3
 800bcb4:	68f8      	ldr	r0, [r7, #12]
 800bcb6:	f000 f97f 	bl	800bfb8 <USBD_CoreFindEP>
 800bcba:	4603      	mov	r3, r0
 800bcbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcbe:	7dfb      	ldrb	r3, [r7, #23]
 800bcc0:	2bff      	cmp	r3, #255	; 0xff
 800bcc2:	d025      	beq.n	800bd10 <USBD_LL_DataInStage+0x15a>
 800bcc4:	7dfb      	ldrb	r3, [r7, #23]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d122      	bne.n	800bd10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	2b03      	cmp	r3, #3
 800bcd4:	d11c      	bne.n	800bd10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bcd6:	7dfa      	ldrb	r2, [r7, #23]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	32ae      	adds	r2, #174	; 0xae
 800bcdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bce0:	695b      	ldr	r3, [r3, #20]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d014      	beq.n	800bd10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bce6:	7dfa      	ldrb	r2, [r7, #23]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bcee:	7dfa      	ldrb	r2, [r7, #23]
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	32ae      	adds	r2, #174	; 0xae
 800bcf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcf8:	695b      	ldr	r3, [r3, #20]
 800bcfa:	7afa      	ldrb	r2, [r7, #11]
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	4798      	blx	r3
 800bd02:	4603      	mov	r3, r0
 800bd04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bd06:	7dbb      	ldrb	r3, [r7, #22]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bd0c:	7dbb      	ldrb	r3, [r7, #22]
 800bd0e:	e000      	b.n	800bd12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bd10:	2300      	movs	r3, #0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}

0800bd1a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd1a:	b580      	push	{r7, lr}
 800bd1c:	b084      	sub	sp, #16
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd22:	2300      	movs	r3, #0
 800bd24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2201      	movs	r2, #1
 800bd2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2200      	movs	r2, #0
 800bd32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d014      	beq.n	800bd80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd5c:	685b      	ldr	r3, [r3, #4]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d00e      	beq.n	800bd80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	687a      	ldr	r2, [r7, #4]
 800bd6c:	6852      	ldr	r2, [r2, #4]
 800bd6e:	b2d2      	uxtb	r2, r2
 800bd70:	4611      	mov	r1, r2
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	4798      	blx	r3
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d001      	beq.n	800bd80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bd7c:	2303      	movs	r3, #3
 800bd7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd80:	2340      	movs	r3, #64	; 0x40
 800bd82:	2200      	movs	r2, #0
 800bd84:	2100      	movs	r1, #0
 800bd86:	6878      	ldr	r0, [r7, #4]
 800bd88:	f001 fc0d 	bl	800d5a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	2240      	movs	r2, #64	; 0x40
 800bd98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bd9c:	2340      	movs	r3, #64	; 0x40
 800bd9e:	2200      	movs	r2, #0
 800bda0:	2180      	movs	r1, #128	; 0x80
 800bda2:	6878      	ldr	r0, [r7, #4]
 800bda4:	f001 fbff 	bl	800d5a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2201      	movs	r2, #1
 800bdac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2240      	movs	r2, #64	; 0x40
 800bdb2:	621a      	str	r2, [r3, #32]

  return ret;
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	3710      	adds	r7, #16
 800bdba:	46bd      	mov	sp, r7
 800bdbc:	bd80      	pop	{r7, pc}

0800bdbe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b083      	sub	sp, #12
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	78fa      	ldrb	r2, [r7, #3]
 800bdce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	370c      	adds	r7, #12
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr

0800bdde <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bdde:	b480      	push	{r7}
 800bde0:	b083      	sub	sp, #12
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdec:	b2da      	uxtb	r2, r3
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2204      	movs	r2, #4
 800bdf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bdfc:	2300      	movs	r3, #0
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	370c      	adds	r7, #12
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be0a:	b480      	push	{r7}
 800be0c:	b083      	sub	sp, #12
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be18:	b2db      	uxtb	r3, r3
 800be1a:	2b04      	cmp	r3, #4
 800be1c:	d106      	bne.n	800be2c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800be24:	b2da      	uxtb	r2, r3
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	370c      	adds	r7, #12
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b082      	sub	sp, #8
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	2b03      	cmp	r3, #3
 800be4c:	d110      	bne.n	800be70 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be5e:	69db      	ldr	r3, [r3, #28]
 800be60:	2b00      	cmp	r3, #0
 800be62:	d005      	beq.n	800be70 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be6a:	69db      	ldr	r3, [r3, #28]
 800be6c:	6878      	ldr	r0, [r7, #4]
 800be6e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800be70:	2300      	movs	r3, #0
}
 800be72:	4618      	mov	r0, r3
 800be74:	3708      	adds	r7, #8
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b082      	sub	sp, #8
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
 800be82:	460b      	mov	r3, r1
 800be84:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	32ae      	adds	r2, #174	; 0xae
 800be90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be94:	2b00      	cmp	r3, #0
 800be96:	d101      	bne.n	800be9c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800be98:	2303      	movs	r3, #3
 800be9a:	e01c      	b.n	800bed6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bea2:	b2db      	uxtb	r3, r3
 800bea4:	2b03      	cmp	r3, #3
 800bea6:	d115      	bne.n	800bed4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	32ae      	adds	r2, #174	; 0xae
 800beb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb6:	6a1b      	ldr	r3, [r3, #32]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00b      	beq.n	800bed4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	32ae      	adds	r2, #174	; 0xae
 800bec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beca:	6a1b      	ldr	r3, [r3, #32]
 800becc:	78fa      	ldrb	r2, [r7, #3]
 800bece:	4611      	mov	r1, r2
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bed4:	2300      	movs	r3, #0
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3708      	adds	r7, #8
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}

0800bede <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b082      	sub	sp, #8
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
 800bee6:	460b      	mov	r3, r1
 800bee8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	32ae      	adds	r2, #174	; 0xae
 800bef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d101      	bne.n	800bf00 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800befc:	2303      	movs	r3, #3
 800befe:	e01c      	b.n	800bf3a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf06:	b2db      	uxtb	r3, r3
 800bf08:	2b03      	cmp	r3, #3
 800bf0a:	d115      	bne.n	800bf38 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	32ae      	adds	r2, #174	; 0xae
 800bf16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d00b      	beq.n	800bf38 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	32ae      	adds	r2, #174	; 0xae
 800bf2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf30:	78fa      	ldrb	r2, [r7, #3]
 800bf32:	4611      	mov	r1, r2
 800bf34:	6878      	ldr	r0, [r7, #4]
 800bf36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf38:	2300      	movs	r3, #0
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3708      	adds	r7, #8
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b083      	sub	sp, #12
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf4a:	2300      	movs	r3, #0
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bf60:	2300      	movs	r3, #0
 800bf62:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00e      	beq.n	800bf94 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	6852      	ldr	r2, [r2, #4]
 800bf82:	b2d2      	uxtb	r2, r2
 800bf84:	4611      	mov	r1, r2
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	4798      	blx	r3
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bf90:	2303      	movs	r3, #3
 800bf92:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	b083      	sub	sp, #12
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bfaa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	370c      	adds	r7, #12
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bfb8:	b480      	push	{r7}
 800bfba:	b083      	sub	sp, #12
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
 800bfc0:	460b      	mov	r3, r1
 800bfc2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bfc4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	370c      	adds	r7, #12
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b086      	sub	sp, #24
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
 800bfda:	460b      	mov	r3, r1
 800bfdc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	885b      	ldrh	r3, [r3, #2]
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	b29b      	uxth	r3, r3
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d920      	bls.n	800c03c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	b29b      	uxth	r3, r3
 800c000:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c002:	e013      	b.n	800c02c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c004:	f107 030a 	add.w	r3, r7, #10
 800c008:	4619      	mov	r1, r3
 800c00a:	6978      	ldr	r0, [r7, #20]
 800c00c:	f000 f81b 	bl	800c046 <USBD_GetNextDesc>
 800c010:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	785b      	ldrb	r3, [r3, #1]
 800c016:	2b05      	cmp	r3, #5
 800c018:	d108      	bne.n	800c02c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	789b      	ldrb	r3, [r3, #2]
 800c022:	78fa      	ldrb	r2, [r7, #3]
 800c024:	429a      	cmp	r2, r3
 800c026:	d008      	beq.n	800c03a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c028:	2300      	movs	r3, #0
 800c02a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	885b      	ldrh	r3, [r3, #2]
 800c030:	b29a      	uxth	r2, r3
 800c032:	897b      	ldrh	r3, [r7, #10]
 800c034:	429a      	cmp	r2, r3
 800c036:	d8e5      	bhi.n	800c004 <USBD_GetEpDesc+0x32>
 800c038:	e000      	b.n	800c03c <USBD_GetEpDesc+0x6a>
          break;
 800c03a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c03c:	693b      	ldr	r3, [r7, #16]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3718      	adds	r7, #24
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c046:	b480      	push	{r7}
 800c048:	b085      	sub	sp, #20
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	881a      	ldrh	r2, [r3, #0]
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	b29b      	uxth	r3, r3
 800c05e:	4413      	add	r3, r2
 800c060:	b29a      	uxth	r2, r3
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	461a      	mov	r2, r3
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4413      	add	r3, r2
 800c070:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c072:	68fb      	ldr	r3, [r7, #12]
}
 800c074:	4618      	mov	r0, r3
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c080:	b480      	push	{r7}
 800c082:	b087      	sub	sp, #28
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	781b      	ldrb	r3, [r3, #0]
 800c090:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	3301      	adds	r3, #1
 800c096:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c09e:	8a3b      	ldrh	r3, [r7, #16]
 800c0a0:	021b      	lsls	r3, r3, #8
 800c0a2:	b21a      	sxth	r2, r3
 800c0a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	b21b      	sxth	r3, r3
 800c0ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c0ae:	89fb      	ldrh	r3, [r7, #14]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	371c      	adds	r7, #28
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0d2:	2b40      	cmp	r3, #64	; 0x40
 800c0d4:	d005      	beq.n	800c0e2 <USBD_StdDevReq+0x26>
 800c0d6:	2b40      	cmp	r3, #64	; 0x40
 800c0d8:	d857      	bhi.n	800c18a <USBD_StdDevReq+0xce>
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d00f      	beq.n	800c0fe <USBD_StdDevReq+0x42>
 800c0de:	2b20      	cmp	r3, #32
 800c0e0:	d153      	bne.n	800c18a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	32ae      	adds	r2, #174	; 0xae
 800c0ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	6839      	ldr	r1, [r7, #0]
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	4798      	blx	r3
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	73fb      	strb	r3, [r7, #15]
      break;
 800c0fc:	e04a      	b.n	800c194 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	785b      	ldrb	r3, [r3, #1]
 800c102:	2b09      	cmp	r3, #9
 800c104:	d83b      	bhi.n	800c17e <USBD_StdDevReq+0xc2>
 800c106:	a201      	add	r2, pc, #4	; (adr r2, 800c10c <USBD_StdDevReq+0x50>)
 800c108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10c:	0800c161 	.word	0x0800c161
 800c110:	0800c175 	.word	0x0800c175
 800c114:	0800c17f 	.word	0x0800c17f
 800c118:	0800c16b 	.word	0x0800c16b
 800c11c:	0800c17f 	.word	0x0800c17f
 800c120:	0800c13f 	.word	0x0800c13f
 800c124:	0800c135 	.word	0x0800c135
 800c128:	0800c17f 	.word	0x0800c17f
 800c12c:	0800c157 	.word	0x0800c157
 800c130:	0800c149 	.word	0x0800c149
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f000 fa3c 	bl	800c5b4 <USBD_GetDescriptor>
          break;
 800c13c:	e024      	b.n	800c188 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	6878      	ldr	r0, [r7, #4]
 800c142:	f000 fba1 	bl	800c888 <USBD_SetAddress>
          break;
 800c146:	e01f      	b.n	800c188 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fbe0 	bl	800c910 <USBD_SetConfig>
 800c150:	4603      	mov	r3, r0
 800c152:	73fb      	strb	r3, [r7, #15]
          break;
 800c154:	e018      	b.n	800c188 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 fc83 	bl	800ca64 <USBD_GetConfig>
          break;
 800c15e:	e013      	b.n	800c188 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c160:	6839      	ldr	r1, [r7, #0]
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 fcb4 	bl	800cad0 <USBD_GetStatus>
          break;
 800c168:	e00e      	b.n	800c188 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c16a:	6839      	ldr	r1, [r7, #0]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f000 fce3 	bl	800cb38 <USBD_SetFeature>
          break;
 800c172:	e009      	b.n	800c188 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fd07 	bl	800cb8a <USBD_ClrFeature>
          break;
 800c17c:	e004      	b.n	800c188 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fd5e 	bl	800cc42 <USBD_CtlError>
          break;
 800c186:	bf00      	nop
      }
      break;
 800c188:	e004      	b.n	800c194 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 fd58 	bl	800cc42 <USBD_CtlError>
      break;
 800c192:	bf00      	nop
  }

  return ret;
 800c194:	7bfb      	ldrb	r3, [r7, #15]
}
 800c196:	4618      	mov	r0, r3
 800c198:	3710      	adds	r7, #16
 800c19a:	46bd      	mov	sp, r7
 800c19c:	bd80      	pop	{r7, pc}
 800c19e:	bf00      	nop

0800c1a0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1a0:	b580      	push	{r7, lr}
 800c1a2:	b084      	sub	sp, #16
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	6078      	str	r0, [r7, #4]
 800c1a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1b6:	2b40      	cmp	r3, #64	; 0x40
 800c1b8:	d005      	beq.n	800c1c6 <USBD_StdItfReq+0x26>
 800c1ba:	2b40      	cmp	r3, #64	; 0x40
 800c1bc:	d852      	bhi.n	800c264 <USBD_StdItfReq+0xc4>
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d001      	beq.n	800c1c6 <USBD_StdItfReq+0x26>
 800c1c2:	2b20      	cmp	r3, #32
 800c1c4:	d14e      	bne.n	800c264 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1cc:	b2db      	uxtb	r3, r3
 800c1ce:	3b01      	subs	r3, #1
 800c1d0:	2b02      	cmp	r3, #2
 800c1d2:	d840      	bhi.n	800c256 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	889b      	ldrh	r3, [r3, #4]
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	2b01      	cmp	r3, #1
 800c1dc:	d836      	bhi.n	800c24c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c1de:	683b      	ldr	r3, [r7, #0]
 800c1e0:	889b      	ldrh	r3, [r3, #4]
 800c1e2:	b2db      	uxtb	r3, r3
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7ff fed9 	bl	800bf9e <USBD_CoreFindIF>
 800c1ec:	4603      	mov	r3, r0
 800c1ee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c1f0:	7bbb      	ldrb	r3, [r7, #14]
 800c1f2:	2bff      	cmp	r3, #255	; 0xff
 800c1f4:	d01d      	beq.n	800c232 <USBD_StdItfReq+0x92>
 800c1f6:	7bbb      	ldrb	r3, [r7, #14]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d11a      	bne.n	800c232 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c1fc:	7bba      	ldrb	r2, [r7, #14]
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	32ae      	adds	r2, #174	; 0xae
 800c202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00f      	beq.n	800c22c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c20c:	7bba      	ldrb	r2, [r7, #14]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c214:	7bba      	ldrb	r2, [r7, #14]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	32ae      	adds	r2, #174	; 0xae
 800c21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	6839      	ldr	r1, [r7, #0]
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	4798      	blx	r3
 800c226:	4603      	mov	r3, r0
 800c228:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c22a:	e004      	b.n	800c236 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c22c:	2303      	movs	r3, #3
 800c22e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c230:	e001      	b.n	800c236 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c232:	2303      	movs	r3, #3
 800c234:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	88db      	ldrh	r3, [r3, #6]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d110      	bne.n	800c260 <USBD_StdItfReq+0xc0>
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
 800c240:	2b00      	cmp	r3, #0
 800c242:	d10d      	bne.n	800c260 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c244:	6878      	ldr	r0, [r7, #4]
 800c246:	f000 fdc7 	bl	800cdd8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c24a:	e009      	b.n	800c260 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fcf7 	bl	800cc42 <USBD_CtlError>
          break;
 800c254:	e004      	b.n	800c260 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 fcf2 	bl	800cc42 <USBD_CtlError>
          break;
 800c25e:	e000      	b.n	800c262 <USBD_StdItfReq+0xc2>
          break;
 800c260:	bf00      	nop
      }
      break;
 800c262:	e004      	b.n	800c26e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c264:	6839      	ldr	r1, [r7, #0]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 fceb 	bl	800cc42 <USBD_CtlError>
      break;
 800c26c:	bf00      	nop
  }

  return ret;
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c270:	4618      	mov	r0, r3
 800c272:	3710      	adds	r7, #16
 800c274:	46bd      	mov	sp, r7
 800c276:	bd80      	pop	{r7, pc}

0800c278 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b084      	sub	sp, #16
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c282:	2300      	movs	r3, #0
 800c284:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	889b      	ldrh	r3, [r3, #4]
 800c28a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c28c:	683b      	ldr	r3, [r7, #0]
 800c28e:	781b      	ldrb	r3, [r3, #0]
 800c290:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c294:	2b40      	cmp	r3, #64	; 0x40
 800c296:	d007      	beq.n	800c2a8 <USBD_StdEPReq+0x30>
 800c298:	2b40      	cmp	r3, #64	; 0x40
 800c29a:	f200 817f 	bhi.w	800c59c <USBD_StdEPReq+0x324>
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d02a      	beq.n	800c2f8 <USBD_StdEPReq+0x80>
 800c2a2:	2b20      	cmp	r3, #32
 800c2a4:	f040 817a 	bne.w	800c59c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c2a8:	7bbb      	ldrb	r3, [r7, #14]
 800c2aa:	4619      	mov	r1, r3
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f7ff fe83 	bl	800bfb8 <USBD_CoreFindEP>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2b6:	7b7b      	ldrb	r3, [r7, #13]
 800c2b8:	2bff      	cmp	r3, #255	; 0xff
 800c2ba:	f000 8174 	beq.w	800c5a6 <USBD_StdEPReq+0x32e>
 800c2be:	7b7b      	ldrb	r3, [r7, #13]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	f040 8170 	bne.w	800c5a6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c2c6:	7b7a      	ldrb	r2, [r7, #13]
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c2ce:	7b7a      	ldrb	r2, [r7, #13]
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	32ae      	adds	r2, #174	; 0xae
 800c2d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2d8:	689b      	ldr	r3, [r3, #8]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	f000 8163 	beq.w	800c5a6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c2e0:	7b7a      	ldrb	r2, [r7, #13]
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	32ae      	adds	r2, #174	; 0xae
 800c2e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	6839      	ldr	r1, [r7, #0]
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	4798      	blx	r3
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c2f6:	e156      	b.n	800c5a6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	785b      	ldrb	r3, [r3, #1]
 800c2fc:	2b03      	cmp	r3, #3
 800c2fe:	d008      	beq.n	800c312 <USBD_StdEPReq+0x9a>
 800c300:	2b03      	cmp	r3, #3
 800c302:	f300 8145 	bgt.w	800c590 <USBD_StdEPReq+0x318>
 800c306:	2b00      	cmp	r3, #0
 800c308:	f000 809b 	beq.w	800c442 <USBD_StdEPReq+0x1ca>
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	d03c      	beq.n	800c38a <USBD_StdEPReq+0x112>
 800c310:	e13e      	b.n	800c590 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c318:	b2db      	uxtb	r3, r3
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d002      	beq.n	800c324 <USBD_StdEPReq+0xac>
 800c31e:	2b03      	cmp	r3, #3
 800c320:	d016      	beq.n	800c350 <USBD_StdEPReq+0xd8>
 800c322:	e02c      	b.n	800c37e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c324:	7bbb      	ldrb	r3, [r7, #14]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d00d      	beq.n	800c346 <USBD_StdEPReq+0xce>
 800c32a:	7bbb      	ldrb	r3, [r7, #14]
 800c32c:	2b80      	cmp	r3, #128	; 0x80
 800c32e:	d00a      	beq.n	800c346 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c330:	7bbb      	ldrb	r3, [r7, #14]
 800c332:	4619      	mov	r1, r3
 800c334:	6878      	ldr	r0, [r7, #4]
 800c336:	f001 f97b 	bl	800d630 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c33a:	2180      	movs	r1, #128	; 0x80
 800c33c:	6878      	ldr	r0, [r7, #4]
 800c33e:	f001 f977 	bl	800d630 <USBD_LL_StallEP>
 800c342:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c344:	e020      	b.n	800c388 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c346:	6839      	ldr	r1, [r7, #0]
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f000 fc7a 	bl	800cc42 <USBD_CtlError>
              break;
 800c34e:	e01b      	b.n	800c388 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	885b      	ldrh	r3, [r3, #2]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d10e      	bne.n	800c376 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c358:	7bbb      	ldrb	r3, [r7, #14]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00b      	beq.n	800c376 <USBD_StdEPReq+0xfe>
 800c35e:	7bbb      	ldrb	r3, [r7, #14]
 800c360:	2b80      	cmp	r3, #128	; 0x80
 800c362:	d008      	beq.n	800c376 <USBD_StdEPReq+0xfe>
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	88db      	ldrh	r3, [r3, #6]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d104      	bne.n	800c376 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c36c:	7bbb      	ldrb	r3, [r7, #14]
 800c36e:	4619      	mov	r1, r3
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f001 f95d 	bl	800d630 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f000 fd2e 	bl	800cdd8 <USBD_CtlSendStatus>

              break;
 800c37c:	e004      	b.n	800c388 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c37e:	6839      	ldr	r1, [r7, #0]
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f000 fc5e 	bl	800cc42 <USBD_CtlError>
              break;
 800c386:	bf00      	nop
          }
          break;
 800c388:	e107      	b.n	800c59a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c390:	b2db      	uxtb	r3, r3
 800c392:	2b02      	cmp	r3, #2
 800c394:	d002      	beq.n	800c39c <USBD_StdEPReq+0x124>
 800c396:	2b03      	cmp	r3, #3
 800c398:	d016      	beq.n	800c3c8 <USBD_StdEPReq+0x150>
 800c39a:	e04b      	b.n	800c434 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c39c:	7bbb      	ldrb	r3, [r7, #14]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d00d      	beq.n	800c3be <USBD_StdEPReq+0x146>
 800c3a2:	7bbb      	ldrb	r3, [r7, #14]
 800c3a4:	2b80      	cmp	r3, #128	; 0x80
 800c3a6:	d00a      	beq.n	800c3be <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3a8:	7bbb      	ldrb	r3, [r7, #14]
 800c3aa:	4619      	mov	r1, r3
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f001 f93f 	bl	800d630 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3b2:	2180      	movs	r1, #128	; 0x80
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f001 f93b 	bl	800d630 <USBD_LL_StallEP>
 800c3ba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c3bc:	e040      	b.n	800c440 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 fc3e 	bl	800cc42 <USBD_CtlError>
              break;
 800c3c6:	e03b      	b.n	800c440 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	885b      	ldrh	r3, [r3, #2]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d136      	bne.n	800c43e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c3d0:	7bbb      	ldrb	r3, [r7, #14]
 800c3d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d004      	beq.n	800c3e4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c3da:	7bbb      	ldrb	r3, [r7, #14]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f001 f945 	bl	800d66e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 fcf7 	bl	800cdd8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c3ea:	7bbb      	ldrb	r3, [r7, #14]
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f7ff fde2 	bl	800bfb8 <USBD_CoreFindEP>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3f8:	7b7b      	ldrb	r3, [r7, #13]
 800c3fa:	2bff      	cmp	r3, #255	; 0xff
 800c3fc:	d01f      	beq.n	800c43e <USBD_StdEPReq+0x1c6>
 800c3fe:	7b7b      	ldrb	r3, [r7, #13]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d11c      	bne.n	800c43e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c404:	7b7a      	ldrb	r2, [r7, #13]
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c40c:	7b7a      	ldrb	r2, [r7, #13]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	32ae      	adds	r2, #174	; 0xae
 800c412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d010      	beq.n	800c43e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c41c:	7b7a      	ldrb	r2, [r7, #13]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	32ae      	adds	r2, #174	; 0xae
 800c422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	6839      	ldr	r1, [r7, #0]
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	4798      	blx	r3
 800c42e:	4603      	mov	r3, r0
 800c430:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c432:	e004      	b.n	800c43e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c434:	6839      	ldr	r1, [r7, #0]
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fc03 	bl	800cc42 <USBD_CtlError>
              break;
 800c43c:	e000      	b.n	800c440 <USBD_StdEPReq+0x1c8>
              break;
 800c43e:	bf00      	nop
          }
          break;
 800c440:	e0ab      	b.n	800c59a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c448:	b2db      	uxtb	r3, r3
 800c44a:	2b02      	cmp	r3, #2
 800c44c:	d002      	beq.n	800c454 <USBD_StdEPReq+0x1dc>
 800c44e:	2b03      	cmp	r3, #3
 800c450:	d032      	beq.n	800c4b8 <USBD_StdEPReq+0x240>
 800c452:	e097      	b.n	800c584 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c454:	7bbb      	ldrb	r3, [r7, #14]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d007      	beq.n	800c46a <USBD_StdEPReq+0x1f2>
 800c45a:	7bbb      	ldrb	r3, [r7, #14]
 800c45c:	2b80      	cmp	r3, #128	; 0x80
 800c45e:	d004      	beq.n	800c46a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c460:	6839      	ldr	r1, [r7, #0]
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f000 fbed 	bl	800cc42 <USBD_CtlError>
                break;
 800c468:	e091      	b.n	800c58e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c46a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	da0b      	bge.n	800c48a <USBD_StdEPReq+0x212>
 800c472:	7bbb      	ldrb	r3, [r7, #14]
 800c474:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c478:	4613      	mov	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	4413      	add	r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	3310      	adds	r3, #16
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	4413      	add	r3, r2
 800c486:	3304      	adds	r3, #4
 800c488:	e00b      	b.n	800c4a2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c48a:	7bbb      	ldrb	r3, [r7, #14]
 800c48c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c490:	4613      	mov	r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	4413      	add	r3, r2
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	4413      	add	r3, r2
 800c4a0:	3304      	adds	r3, #4
 800c4a2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	2202      	movs	r2, #2
 800c4ae:	4619      	mov	r1, r3
 800c4b0:	6878      	ldr	r0, [r7, #4]
 800c4b2:	f000 fc37 	bl	800cd24 <USBD_CtlSendData>
              break;
 800c4b6:	e06a      	b.n	800c58e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c4b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	da11      	bge.n	800c4e4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c4c0:	7bbb      	ldrb	r3, [r7, #14]
 800c4c2:	f003 020f 	and.w	r2, r3, #15
 800c4c6:	6879      	ldr	r1, [r7, #4]
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	009b      	lsls	r3, r3, #2
 800c4cc:	4413      	add	r3, r2
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	440b      	add	r3, r1
 800c4d2:	3324      	adds	r3, #36	; 0x24
 800c4d4:	881b      	ldrh	r3, [r3, #0]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d117      	bne.n	800c50a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c4da:	6839      	ldr	r1, [r7, #0]
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fbb0 	bl	800cc42 <USBD_CtlError>
                  break;
 800c4e2:	e054      	b.n	800c58e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	f003 020f 	and.w	r2, r3, #15
 800c4ea:	6879      	ldr	r1, [r7, #4]
 800c4ec:	4613      	mov	r3, r2
 800c4ee:	009b      	lsls	r3, r3, #2
 800c4f0:	4413      	add	r3, r2
 800c4f2:	009b      	lsls	r3, r3, #2
 800c4f4:	440b      	add	r3, r1
 800c4f6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c4fa:	881b      	ldrh	r3, [r3, #0]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d104      	bne.n	800c50a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c500:	6839      	ldr	r1, [r7, #0]
 800c502:	6878      	ldr	r0, [r7, #4]
 800c504:	f000 fb9d 	bl	800cc42 <USBD_CtlError>
                  break;
 800c508:	e041      	b.n	800c58e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c50a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	da0b      	bge.n	800c52a <USBD_StdEPReq+0x2b2>
 800c512:	7bbb      	ldrb	r3, [r7, #14]
 800c514:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c518:	4613      	mov	r3, r2
 800c51a:	009b      	lsls	r3, r3, #2
 800c51c:	4413      	add	r3, r2
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	3310      	adds	r3, #16
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	4413      	add	r3, r2
 800c526:	3304      	adds	r3, #4
 800c528:	e00b      	b.n	800c542 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c52a:	7bbb      	ldrb	r3, [r7, #14]
 800c52c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c530:	4613      	mov	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	4413      	add	r3, r2
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	4413      	add	r3, r2
 800c540:	3304      	adds	r3, #4
 800c542:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c544:	7bbb      	ldrb	r3, [r7, #14]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d002      	beq.n	800c550 <USBD_StdEPReq+0x2d8>
 800c54a:	7bbb      	ldrb	r3, [r7, #14]
 800c54c:	2b80      	cmp	r3, #128	; 0x80
 800c54e:	d103      	bne.n	800c558 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2200      	movs	r2, #0
 800c554:	601a      	str	r2, [r3, #0]
 800c556:	e00e      	b.n	800c576 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c558:	7bbb      	ldrb	r3, [r7, #14]
 800c55a:	4619      	mov	r1, r3
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f001 f8a5 	bl	800d6ac <USBD_LL_IsStallEP>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d003      	beq.n	800c570 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	2201      	movs	r2, #1
 800c56c:	601a      	str	r2, [r3, #0]
 800c56e:	e002      	b.n	800c576 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2200      	movs	r2, #0
 800c574:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	2202      	movs	r2, #2
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f000 fbd1 	bl	800cd24 <USBD_CtlSendData>
              break;
 800c582:	e004      	b.n	800c58e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c584:	6839      	ldr	r1, [r7, #0]
 800c586:	6878      	ldr	r0, [r7, #4]
 800c588:	f000 fb5b 	bl	800cc42 <USBD_CtlError>
              break;
 800c58c:	bf00      	nop
          }
          break;
 800c58e:	e004      	b.n	800c59a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c590:	6839      	ldr	r1, [r7, #0]
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f000 fb55 	bl	800cc42 <USBD_CtlError>
          break;
 800c598:	bf00      	nop
      }
      break;
 800c59a:	e005      	b.n	800c5a8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c59c:	6839      	ldr	r1, [r7, #0]
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 fb4f 	bl	800cc42 <USBD_CtlError>
      break;
 800c5a4:	e000      	b.n	800c5a8 <USBD_StdEPReq+0x330>
      break;
 800c5a6:	bf00      	nop
  }

  return ret;
 800c5a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	3710      	adds	r7, #16
 800c5ae:	46bd      	mov	sp, r7
 800c5b0:	bd80      	pop	{r7, pc}
	...

0800c5b4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	885b      	ldrh	r3, [r3, #2]
 800c5ce:	0a1b      	lsrs	r3, r3, #8
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	3b01      	subs	r3, #1
 800c5d4:	2b06      	cmp	r3, #6
 800c5d6:	f200 8128 	bhi.w	800c82a <USBD_GetDescriptor+0x276>
 800c5da:	a201      	add	r2, pc, #4	; (adr r2, 800c5e0 <USBD_GetDescriptor+0x2c>)
 800c5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5e0:	0800c5fd 	.word	0x0800c5fd
 800c5e4:	0800c615 	.word	0x0800c615
 800c5e8:	0800c655 	.word	0x0800c655
 800c5ec:	0800c82b 	.word	0x0800c82b
 800c5f0:	0800c82b 	.word	0x0800c82b
 800c5f4:	0800c7cb 	.word	0x0800c7cb
 800c5f8:	0800c7f7 	.word	0x0800c7f7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	7c12      	ldrb	r2, [r2, #16]
 800c608:	f107 0108 	add.w	r1, r7, #8
 800c60c:	4610      	mov	r0, r2
 800c60e:	4798      	blx	r3
 800c610:	60f8      	str	r0, [r7, #12]
      break;
 800c612:	e112      	b.n	800c83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	7c1b      	ldrb	r3, [r3, #16]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d10d      	bne.n	800c638 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c624:	f107 0208 	add.w	r2, r7, #8
 800c628:	4610      	mov	r0, r2
 800c62a:	4798      	blx	r3
 800c62c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	3301      	adds	r3, #1
 800c632:	2202      	movs	r2, #2
 800c634:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c636:	e100      	b.n	800c83a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c63e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c640:	f107 0208 	add.w	r2, r7, #8
 800c644:	4610      	mov	r0, r2
 800c646:	4798      	blx	r3
 800c648:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	3301      	adds	r3, #1
 800c64e:	2202      	movs	r2, #2
 800c650:	701a      	strb	r2, [r3, #0]
      break;
 800c652:	e0f2      	b.n	800c83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	885b      	ldrh	r3, [r3, #2]
 800c658:	b2db      	uxtb	r3, r3
 800c65a:	2b05      	cmp	r3, #5
 800c65c:	f200 80ac 	bhi.w	800c7b8 <USBD_GetDescriptor+0x204>
 800c660:	a201      	add	r2, pc, #4	; (adr r2, 800c668 <USBD_GetDescriptor+0xb4>)
 800c662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c666:	bf00      	nop
 800c668:	0800c681 	.word	0x0800c681
 800c66c:	0800c6b5 	.word	0x0800c6b5
 800c670:	0800c6e9 	.word	0x0800c6e9
 800c674:	0800c71d 	.word	0x0800c71d
 800c678:	0800c751 	.word	0x0800c751
 800c67c:	0800c785 	.word	0x0800c785
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00b      	beq.n	800c6a4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	687a      	ldr	r2, [r7, #4]
 800c696:	7c12      	ldrb	r2, [r2, #16]
 800c698:	f107 0108 	add.w	r1, r7, #8
 800c69c:	4610      	mov	r0, r2
 800c69e:	4798      	blx	r3
 800c6a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6a2:	e091      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 facb 	bl	800cc42 <USBD_CtlError>
            err++;
 800c6ac:	7afb      	ldrb	r3, [r7, #11]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	72fb      	strb	r3, [r7, #11]
          break;
 800c6b2:	e089      	b.n	800c7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00b      	beq.n	800c6d8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	7c12      	ldrb	r2, [r2, #16]
 800c6cc:	f107 0108 	add.w	r1, r7, #8
 800c6d0:	4610      	mov	r0, r2
 800c6d2:	4798      	blx	r3
 800c6d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6d6:	e077      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6d8:	6839      	ldr	r1, [r7, #0]
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 fab1 	bl	800cc42 <USBD_CtlError>
            err++;
 800c6e0:	7afb      	ldrb	r3, [r7, #11]
 800c6e2:	3301      	adds	r3, #1
 800c6e4:	72fb      	strb	r3, [r7, #11]
          break;
 800c6e6:	e06f      	b.n	800c7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6ee:	68db      	ldr	r3, [r3, #12]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d00b      	beq.n	800c70c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6fa:	68db      	ldr	r3, [r3, #12]
 800c6fc:	687a      	ldr	r2, [r7, #4]
 800c6fe:	7c12      	ldrb	r2, [r2, #16]
 800c700:	f107 0108 	add.w	r1, r7, #8
 800c704:	4610      	mov	r0, r2
 800c706:	4798      	blx	r3
 800c708:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c70a:	e05d      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c70c:	6839      	ldr	r1, [r7, #0]
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f000 fa97 	bl	800cc42 <USBD_CtlError>
            err++;
 800c714:	7afb      	ldrb	r3, [r7, #11]
 800c716:	3301      	adds	r3, #1
 800c718:	72fb      	strb	r3, [r7, #11]
          break;
 800c71a:	e055      	b.n	800c7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c722:	691b      	ldr	r3, [r3, #16]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00b      	beq.n	800c740 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	687a      	ldr	r2, [r7, #4]
 800c732:	7c12      	ldrb	r2, [r2, #16]
 800c734:	f107 0108 	add.w	r1, r7, #8
 800c738:	4610      	mov	r0, r2
 800c73a:	4798      	blx	r3
 800c73c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c73e:	e043      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c740:	6839      	ldr	r1, [r7, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 fa7d 	bl	800cc42 <USBD_CtlError>
            err++;
 800c748:	7afb      	ldrb	r3, [r7, #11]
 800c74a:	3301      	adds	r3, #1
 800c74c:	72fb      	strb	r3, [r7, #11]
          break;
 800c74e:	e03b      	b.n	800c7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c756:	695b      	ldr	r3, [r3, #20]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00b      	beq.n	800c774 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c762:	695b      	ldr	r3, [r3, #20]
 800c764:	687a      	ldr	r2, [r7, #4]
 800c766:	7c12      	ldrb	r2, [r2, #16]
 800c768:	f107 0108 	add.w	r1, r7, #8
 800c76c:	4610      	mov	r0, r2
 800c76e:	4798      	blx	r3
 800c770:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c772:	e029      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c774:	6839      	ldr	r1, [r7, #0]
 800c776:	6878      	ldr	r0, [r7, #4]
 800c778:	f000 fa63 	bl	800cc42 <USBD_CtlError>
            err++;
 800c77c:	7afb      	ldrb	r3, [r7, #11]
 800c77e:	3301      	adds	r3, #1
 800c780:	72fb      	strb	r3, [r7, #11]
          break;
 800c782:	e021      	b.n	800c7c8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c78a:	699b      	ldr	r3, [r3, #24]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d00b      	beq.n	800c7a8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c796:	699b      	ldr	r3, [r3, #24]
 800c798:	687a      	ldr	r2, [r7, #4]
 800c79a:	7c12      	ldrb	r2, [r2, #16]
 800c79c:	f107 0108 	add.w	r1, r7, #8
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	4798      	blx	r3
 800c7a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7a6:	e00f      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7a8:	6839      	ldr	r1, [r7, #0]
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fa49 	bl	800cc42 <USBD_CtlError>
            err++;
 800c7b0:	7afb      	ldrb	r3, [r7, #11]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7b6:	e007      	b.n	800c7c8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c7b8:	6839      	ldr	r1, [r7, #0]
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 fa41 	bl	800cc42 <USBD_CtlError>
          err++;
 800c7c0:	7afb      	ldrb	r3, [r7, #11]
 800c7c2:	3301      	adds	r3, #1
 800c7c4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c7c6:	bf00      	nop
      }
      break;
 800c7c8:	e037      	b.n	800c83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	7c1b      	ldrb	r3, [r3, #16]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d109      	bne.n	800c7e6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7da:	f107 0208 	add.w	r2, r7, #8
 800c7de:	4610      	mov	r0, r2
 800c7e0:	4798      	blx	r3
 800c7e2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c7e4:	e029      	b.n	800c83a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c7e6:	6839      	ldr	r1, [r7, #0]
 800c7e8:	6878      	ldr	r0, [r7, #4]
 800c7ea:	f000 fa2a 	bl	800cc42 <USBD_CtlError>
        err++;
 800c7ee:	7afb      	ldrb	r3, [r7, #11]
 800c7f0:	3301      	adds	r3, #1
 800c7f2:	72fb      	strb	r3, [r7, #11]
      break;
 800c7f4:	e021      	b.n	800c83a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	7c1b      	ldrb	r3, [r3, #16]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d10d      	bne.n	800c81a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c806:	f107 0208 	add.w	r2, r7, #8
 800c80a:	4610      	mov	r0, r2
 800c80c:	4798      	blx	r3
 800c80e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3301      	adds	r3, #1
 800c814:	2207      	movs	r2, #7
 800c816:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c818:	e00f      	b.n	800c83a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c81a:	6839      	ldr	r1, [r7, #0]
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f000 fa10 	bl	800cc42 <USBD_CtlError>
        err++;
 800c822:	7afb      	ldrb	r3, [r7, #11]
 800c824:	3301      	adds	r3, #1
 800c826:	72fb      	strb	r3, [r7, #11]
      break;
 800c828:	e007      	b.n	800c83a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 fa08 	bl	800cc42 <USBD_CtlError>
      err++;
 800c832:	7afb      	ldrb	r3, [r7, #11]
 800c834:	3301      	adds	r3, #1
 800c836:	72fb      	strb	r3, [r7, #11]
      break;
 800c838:	bf00      	nop
  }

  if (err != 0U)
 800c83a:	7afb      	ldrb	r3, [r7, #11]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d11e      	bne.n	800c87e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	88db      	ldrh	r3, [r3, #6]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d016      	beq.n	800c876 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c848:	893b      	ldrh	r3, [r7, #8]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00e      	beq.n	800c86c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c84e:	683b      	ldr	r3, [r7, #0]
 800c850:	88da      	ldrh	r2, [r3, #6]
 800c852:	893b      	ldrh	r3, [r7, #8]
 800c854:	4293      	cmp	r3, r2
 800c856:	bf28      	it	cs
 800c858:	4613      	movcs	r3, r2
 800c85a:	b29b      	uxth	r3, r3
 800c85c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c85e:	893b      	ldrh	r3, [r7, #8]
 800c860:	461a      	mov	r2, r3
 800c862:	68f9      	ldr	r1, [r7, #12]
 800c864:	6878      	ldr	r0, [r7, #4]
 800c866:	f000 fa5d 	bl	800cd24 <USBD_CtlSendData>
 800c86a:	e009      	b.n	800c880 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c86c:	6839      	ldr	r1, [r7, #0]
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f000 f9e7 	bl	800cc42 <USBD_CtlError>
 800c874:	e004      	b.n	800c880 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c876:	6878      	ldr	r0, [r7, #4]
 800c878:	f000 faae 	bl	800cdd8 <USBD_CtlSendStatus>
 800c87c:	e000      	b.n	800c880 <USBD_GetDescriptor+0x2cc>
    return;
 800c87e:	bf00      	nop
  }
}
 800c880:	3710      	adds	r7, #16
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop

0800c888 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b084      	sub	sp, #16
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	889b      	ldrh	r3, [r3, #4]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d131      	bne.n	800c8fe <USBD_SetAddress+0x76>
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	88db      	ldrh	r3, [r3, #6]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d12d      	bne.n	800c8fe <USBD_SetAddress+0x76>
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	885b      	ldrh	r3, [r3, #2]
 800c8a6:	2b7f      	cmp	r3, #127	; 0x7f
 800c8a8:	d829      	bhi.n	800c8fe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	885b      	ldrh	r3, [r3, #2]
 800c8ae:	b2db      	uxtb	r3, r3
 800c8b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8b4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8bc:	b2db      	uxtb	r3, r3
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	d104      	bne.n	800c8cc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c8c2:	6839      	ldr	r1, [r7, #0]
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f000 f9bc 	bl	800cc42 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8ca:	e01d      	b.n	800c908 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	7bfa      	ldrb	r2, [r7, #15]
 800c8d0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c8d4:	7bfb      	ldrb	r3, [r7, #15]
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	6878      	ldr	r0, [r7, #4]
 800c8da:	f000 ff13 	bl	800d704 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 fa7a 	bl	800cdd8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d004      	beq.n	800c8f4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2202      	movs	r2, #2
 800c8ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8f2:	e009      	b.n	800c908 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8fc:	e004      	b.n	800c908 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c8fe:	6839      	ldr	r1, [r7, #0]
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f000 f99e 	bl	800cc42 <USBD_CtlError>
  }
}
 800c906:	bf00      	nop
 800c908:	bf00      	nop
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}

0800c910 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b084      	sub	sp, #16
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
 800c918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c91a:	2300      	movs	r3, #0
 800c91c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c91e:	683b      	ldr	r3, [r7, #0]
 800c920:	885b      	ldrh	r3, [r3, #2]
 800c922:	b2da      	uxtb	r2, r3
 800c924:	4b4e      	ldr	r3, [pc, #312]	; (800ca60 <USBD_SetConfig+0x150>)
 800c926:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c928:	4b4d      	ldr	r3, [pc, #308]	; (800ca60 <USBD_SetConfig+0x150>)
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d905      	bls.n	800c93c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c930:	6839      	ldr	r1, [r7, #0]
 800c932:	6878      	ldr	r0, [r7, #4]
 800c934:	f000 f985 	bl	800cc42 <USBD_CtlError>
    return USBD_FAIL;
 800c938:	2303      	movs	r3, #3
 800c93a:	e08c      	b.n	800ca56 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c942:	b2db      	uxtb	r3, r3
 800c944:	2b02      	cmp	r3, #2
 800c946:	d002      	beq.n	800c94e <USBD_SetConfig+0x3e>
 800c948:	2b03      	cmp	r3, #3
 800c94a:	d029      	beq.n	800c9a0 <USBD_SetConfig+0x90>
 800c94c:	e075      	b.n	800ca3a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c94e:	4b44      	ldr	r3, [pc, #272]	; (800ca60 <USBD_SetConfig+0x150>)
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d020      	beq.n	800c998 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c956:	4b42      	ldr	r3, [pc, #264]	; (800ca60 <USBD_SetConfig+0x150>)
 800c958:	781b      	ldrb	r3, [r3, #0]
 800c95a:	461a      	mov	r2, r3
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c960:	4b3f      	ldr	r3, [pc, #252]	; (800ca60 <USBD_SetConfig+0x150>)
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	4619      	mov	r1, r3
 800c966:	6878      	ldr	r0, [r7, #4]
 800c968:	f7fe ffe7 	bl	800b93a <USBD_SetClassConfig>
 800c96c:	4603      	mov	r3, r0
 800c96e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c970:	7bfb      	ldrb	r3, [r7, #15]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d008      	beq.n	800c988 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 f962 	bl	800cc42 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2202      	movs	r2, #2
 800c982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c986:	e065      	b.n	800ca54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fa25 	bl	800cdd8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2203      	movs	r2, #3
 800c992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c996:	e05d      	b.n	800ca54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fa1d 	bl	800cdd8 <USBD_CtlSendStatus>
      break;
 800c99e:	e059      	b.n	800ca54 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c9a0:	4b2f      	ldr	r3, [pc, #188]	; (800ca60 <USBD_SetConfig+0x150>)
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d112      	bne.n	800c9ce <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	2202      	movs	r2, #2
 800c9ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c9b0:	4b2b      	ldr	r3, [pc, #172]	; (800ca60 <USBD_SetConfig+0x150>)
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9ba:	4b29      	ldr	r3, [pc, #164]	; (800ca60 <USBD_SetConfig+0x150>)
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f7fe ffd6 	bl	800b972 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 fa06 	bl	800cdd8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c9cc:	e042      	b.n	800ca54 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c9ce:	4b24      	ldr	r3, [pc, #144]	; (800ca60 <USBD_SetConfig+0x150>)
 800c9d0:	781b      	ldrb	r3, [r3, #0]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d02a      	beq.n	800ca32 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	b2db      	uxtb	r3, r3
 800c9e2:	4619      	mov	r1, r3
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f7fe ffc4 	bl	800b972 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c9ea:	4b1d      	ldr	r3, [pc, #116]	; (800ca60 <USBD_SetConfig+0x150>)
 800c9ec:	781b      	ldrb	r3, [r3, #0]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9f4:	4b1a      	ldr	r3, [pc, #104]	; (800ca60 <USBD_SetConfig+0x150>)
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	4619      	mov	r1, r3
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f7fe ff9d 	bl	800b93a <USBD_SetClassConfig>
 800ca00:	4603      	mov	r3, r0
 800ca02:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00f      	beq.n	800ca2a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ca0a:	6839      	ldr	r1, [r7, #0]
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f000 f918 	bl	800cc42 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	4619      	mov	r1, r3
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f7fe ffa9 	bl	800b972 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2202      	movs	r2, #2
 800ca24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ca28:	e014      	b.n	800ca54 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f000 f9d4 	bl	800cdd8 <USBD_CtlSendStatus>
      break;
 800ca30:	e010      	b.n	800ca54 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 f9d0 	bl	800cdd8 <USBD_CtlSendStatus>
      break;
 800ca38:	e00c      	b.n	800ca54 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ca3a:	6839      	ldr	r1, [r7, #0]
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f900 	bl	800cc42 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca42:	4b07      	ldr	r3, [pc, #28]	; (800ca60 <USBD_SetConfig+0x150>)
 800ca44:	781b      	ldrb	r3, [r3, #0]
 800ca46:	4619      	mov	r1, r3
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f7fe ff92 	bl	800b972 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca4e:	2303      	movs	r3, #3
 800ca50:	73fb      	strb	r3, [r7, #15]
      break;
 800ca52:	bf00      	nop
  }

  return ret;
 800ca54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3710      	adds	r7, #16
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}
 800ca5e:	bf00      	nop
 800ca60:	200044fc 	.word	0x200044fc

0800ca64 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b082      	sub	sp, #8
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ca6e:	683b      	ldr	r3, [r7, #0]
 800ca70:	88db      	ldrh	r3, [r3, #6]
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d004      	beq.n	800ca80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f000 f8e2 	bl	800cc42 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ca7e:	e023      	b.n	800cac8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca86:	b2db      	uxtb	r3, r3
 800ca88:	2b02      	cmp	r3, #2
 800ca8a:	dc02      	bgt.n	800ca92 <USBD_GetConfig+0x2e>
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	dc03      	bgt.n	800ca98 <USBD_GetConfig+0x34>
 800ca90:	e015      	b.n	800cabe <USBD_GetConfig+0x5a>
 800ca92:	2b03      	cmp	r3, #3
 800ca94:	d00b      	beq.n	800caae <USBD_GetConfig+0x4a>
 800ca96:	e012      	b.n	800cabe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	3308      	adds	r3, #8
 800caa2:	2201      	movs	r2, #1
 800caa4:	4619      	mov	r1, r3
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 f93c 	bl	800cd24 <USBD_CtlSendData>
        break;
 800caac:	e00c      	b.n	800cac8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	3304      	adds	r3, #4
 800cab2:	2201      	movs	r2, #1
 800cab4:	4619      	mov	r1, r3
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f000 f934 	bl	800cd24 <USBD_CtlSendData>
        break;
 800cabc:	e004      	b.n	800cac8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cabe:	6839      	ldr	r1, [r7, #0]
 800cac0:	6878      	ldr	r0, [r7, #4]
 800cac2:	f000 f8be 	bl	800cc42 <USBD_CtlError>
        break;
 800cac6:	bf00      	nop
}
 800cac8:	bf00      	nop
 800caca:	3708      	adds	r7, #8
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}

0800cad0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b082      	sub	sp, #8
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cae0:	b2db      	uxtb	r3, r3
 800cae2:	3b01      	subs	r3, #1
 800cae4:	2b02      	cmp	r3, #2
 800cae6:	d81e      	bhi.n	800cb26 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	88db      	ldrh	r3, [r3, #6]
 800caec:	2b02      	cmp	r3, #2
 800caee:	d004      	beq.n	800cafa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800caf0:	6839      	ldr	r1, [r7, #0]
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 f8a5 	bl	800cc42 <USBD_CtlError>
        break;
 800caf8:	e01a      	b.n	800cb30 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	2201      	movs	r2, #1
 800cafe:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d005      	beq.n	800cb16 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	f043 0202 	orr.w	r2, r3, #2
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	330c      	adds	r3, #12
 800cb1a:	2202      	movs	r2, #2
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f000 f900 	bl	800cd24 <USBD_CtlSendData>
      break;
 800cb24:	e004      	b.n	800cb30 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cb26:	6839      	ldr	r1, [r7, #0]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	f000 f88a 	bl	800cc42 <USBD_CtlError>
      break;
 800cb2e:	bf00      	nop
  }
}
 800cb30:	bf00      	nop
 800cb32:	3708      	adds	r7, #8
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}

0800cb38 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
 800cb40:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	885b      	ldrh	r3, [r3, #2]
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d107      	bne.n	800cb5a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2201      	movs	r2, #1
 800cb4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 f940 	bl	800cdd8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cb58:	e013      	b.n	800cb82 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	885b      	ldrh	r3, [r3, #2]
 800cb5e:	2b02      	cmp	r3, #2
 800cb60:	d10b      	bne.n	800cb7a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800cb62:	683b      	ldr	r3, [r7, #0]
 800cb64:	889b      	ldrh	r3, [r3, #4]
 800cb66:	0a1b      	lsrs	r3, r3, #8
 800cb68:	b29b      	uxth	r3, r3
 800cb6a:	b2da      	uxtb	r2, r3
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 f930 	bl	800cdd8 <USBD_CtlSendStatus>
}
 800cb78:	e003      	b.n	800cb82 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 f860 	bl	800cc42 <USBD_CtlError>
}
 800cb82:	bf00      	nop
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b082      	sub	sp, #8
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
 800cb92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	3b01      	subs	r3, #1
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d80b      	bhi.n	800cbba <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	885b      	ldrh	r3, [r3, #2]
 800cba6:	2b01      	cmp	r3, #1
 800cba8:	d10c      	bne.n	800cbc4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2200      	movs	r2, #0
 800cbae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f910 	bl	800cdd8 <USBD_CtlSendStatus>
      }
      break;
 800cbb8:	e004      	b.n	800cbc4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f840 	bl	800cc42 <USBD_CtlError>
      break;
 800cbc2:	e000      	b.n	800cbc6 <USBD_ClrFeature+0x3c>
      break;
 800cbc4:	bf00      	nop
  }
}
 800cbc6:	bf00      	nop
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}

0800cbce <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cbce:	b580      	push	{r7, lr}
 800cbd0:	b084      	sub	sp, #16
 800cbd2:	af00      	add	r7, sp, #0
 800cbd4:	6078      	str	r0, [r7, #4]
 800cbd6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	781a      	ldrb	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	3301      	adds	r3, #1
 800cbe8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	781a      	ldrb	r2, [r3, #0]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cbf8:	68f8      	ldr	r0, [r7, #12]
 800cbfa:	f7ff fa41 	bl	800c080 <SWAPBYTE>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	461a      	mov	r2, r3
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f7ff fa34 	bl	800c080 <SWAPBYTE>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	3301      	adds	r3, #1
 800cc24:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cc2c:	68f8      	ldr	r0, [r7, #12]
 800cc2e:	f7ff fa27 	bl	800c080 <SWAPBYTE>
 800cc32:	4603      	mov	r3, r0
 800cc34:	461a      	mov	r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	80da      	strh	r2, [r3, #6]
}
 800cc3a:	bf00      	nop
 800cc3c:	3710      	adds	r7, #16
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}

0800cc42 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b082      	sub	sp, #8
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	6078      	str	r0, [r7, #4]
 800cc4a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc4c:	2180      	movs	r1, #128	; 0x80
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fcee 	bl	800d630 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc54:	2100      	movs	r1, #0
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	f000 fcea 	bl	800d630 <USBD_LL_StallEP>
}
 800cc5c:	bf00      	nop
 800cc5e:	3708      	adds	r7, #8
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}

0800cc64 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cc64:	b580      	push	{r7, lr}
 800cc66:	b086      	sub	sp, #24
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	60f8      	str	r0, [r7, #12]
 800cc6c:	60b9      	str	r1, [r7, #8]
 800cc6e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cc70:	2300      	movs	r3, #0
 800cc72:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d036      	beq.n	800cce8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cc7e:	6938      	ldr	r0, [r7, #16]
 800cc80:	f000 f836 	bl	800ccf0 <USBD_GetLen>
 800cc84:	4603      	mov	r3, r0
 800cc86:	3301      	adds	r3, #1
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	005b      	lsls	r3, r3, #1
 800cc8c:	b29a      	uxth	r2, r3
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800cc92:	7dfb      	ldrb	r3, [r7, #23]
 800cc94:	68ba      	ldr	r2, [r7, #8]
 800cc96:	4413      	add	r3, r2
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	7812      	ldrb	r2, [r2, #0]
 800cc9c:	701a      	strb	r2, [r3, #0]
  idx++;
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
 800cca0:	3301      	adds	r3, #1
 800cca2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cca4:	7dfb      	ldrb	r3, [r7, #23]
 800cca6:	68ba      	ldr	r2, [r7, #8]
 800cca8:	4413      	add	r3, r2
 800ccaa:	2203      	movs	r2, #3
 800ccac:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccae:	7dfb      	ldrb	r3, [r7, #23]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ccb4:	e013      	b.n	800ccde <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ccb6:	7dfb      	ldrb	r3, [r7, #23]
 800ccb8:	68ba      	ldr	r2, [r7, #8]
 800ccba:	4413      	add	r3, r2
 800ccbc:	693a      	ldr	r2, [r7, #16]
 800ccbe:	7812      	ldrb	r2, [r2, #0]
 800ccc0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	3301      	adds	r3, #1
 800ccc6:	613b      	str	r3, [r7, #16]
    idx++;
 800ccc8:	7dfb      	ldrb	r3, [r7, #23]
 800ccca:	3301      	adds	r3, #1
 800cccc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ccce:	7dfb      	ldrb	r3, [r7, #23]
 800ccd0:	68ba      	ldr	r2, [r7, #8]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	701a      	strb	r2, [r3, #0]
    idx++;
 800ccd8:	7dfb      	ldrb	r3, [r7, #23]
 800ccda:	3301      	adds	r3, #1
 800ccdc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d1e7      	bne.n	800ccb6 <USBD_GetString+0x52>
 800cce6:	e000      	b.n	800ccea <USBD_GetString+0x86>
    return;
 800cce8:	bf00      	nop
  }
}
 800ccea:	3718      	adds	r7, #24
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b085      	sub	sp, #20
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cd00:	e005      	b.n	800cd0e <USBD_GetLen+0x1e>
  {
    len++;
 800cd02:	7bfb      	ldrb	r3, [r7, #15]
 800cd04:	3301      	adds	r3, #1
 800cd06:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	781b      	ldrb	r3, [r3, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1f5      	bne.n	800cd02 <USBD_GetLen+0x12>
  }

  return len;
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3714      	adds	r7, #20
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd22:	4770      	bx	lr

0800cd24 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2202      	movs	r2, #2
 800cd34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	687a      	ldr	r2, [r7, #4]
 800cd3c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	687a      	ldr	r2, [r7, #4]
 800cd42:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	68ba      	ldr	r2, [r7, #8]
 800cd48:	2100      	movs	r1, #0
 800cd4a:	68f8      	ldr	r0, [r7, #12]
 800cd4c:	f000 fcf9 	bl	800d742 <USBD_LL_Transmit>

  return USBD_OK;
 800cd50:	2300      	movs	r3, #0
}
 800cd52:	4618      	mov	r0, r3
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}

0800cd5a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cd5a:	b580      	push	{r7, lr}
 800cd5c:	b084      	sub	sp, #16
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	60f8      	str	r0, [r7, #12]
 800cd62:	60b9      	str	r1, [r7, #8]
 800cd64:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	2100      	movs	r1, #0
 800cd6c:	68f8      	ldr	r0, [r7, #12]
 800cd6e:	f000 fce8 	bl	800d742 <USBD_LL_Transmit>

  return USBD_OK;
 800cd72:	2300      	movs	r3, #0
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}

0800cd7c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	60f8      	str	r0, [r7, #12]
 800cd84:	60b9      	str	r1, [r7, #8]
 800cd86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	2203      	movs	r2, #3
 800cd8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	687a      	ldr	r2, [r7, #4]
 800cd94:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	687a      	ldr	r2, [r7, #4]
 800cd9c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	68ba      	ldr	r2, [r7, #8]
 800cda4:	2100      	movs	r1, #0
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	f000 fcec 	bl	800d784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdac:	2300      	movs	r3, #0
}
 800cdae:	4618      	mov	r0, r3
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b084      	sub	sp, #16
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	60f8      	str	r0, [r7, #12]
 800cdbe:	60b9      	str	r1, [r7, #8]
 800cdc0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	68ba      	ldr	r2, [r7, #8]
 800cdc6:	2100      	movs	r1, #0
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f000 fcdb 	bl	800d784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdce:	2300      	movs	r3, #0
}
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b082      	sub	sp, #8
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	2204      	movs	r2, #4
 800cde4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cde8:	2300      	movs	r3, #0
 800cdea:	2200      	movs	r2, #0
 800cdec:	2100      	movs	r1, #0
 800cdee:	6878      	ldr	r0, [r7, #4]
 800cdf0:	f000 fca7 	bl	800d742 <USBD_LL_Transmit>

  return USBD_OK;
 800cdf4:	2300      	movs	r3, #0
}
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	3708      	adds	r7, #8
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd80      	pop	{r7, pc}

0800cdfe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cdfe:	b580      	push	{r7, lr}
 800ce00:	b082      	sub	sp, #8
 800ce02:	af00      	add	r7, sp, #0
 800ce04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2205      	movs	r2, #5
 800ce0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce0e:	2300      	movs	r3, #0
 800ce10:	2200      	movs	r2, #0
 800ce12:	2100      	movs	r1, #0
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 fcb5 	bl	800d784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce1a:	2300      	movs	r3, #0
}
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3708      	adds	r7, #8
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bd80      	pop	{r7, pc}

0800ce24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce24:	b580      	push	{r7, lr}
 800ce26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce28:	2200      	movs	r2, #0
 800ce2a:	4912      	ldr	r1, [pc, #72]	; (800ce74 <MX_USB_DEVICE_Init+0x50>)
 800ce2c:	4812      	ldr	r0, [pc, #72]	; (800ce78 <MX_USB_DEVICE_Init+0x54>)
 800ce2e:	f7fe fd07 	bl	800b840 <USBD_Init>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d001      	beq.n	800ce3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ce38:	f7f4 fe48 	bl	8001acc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce3c:	490f      	ldr	r1, [pc, #60]	; (800ce7c <MX_USB_DEVICE_Init+0x58>)
 800ce3e:	480e      	ldr	r0, [pc, #56]	; (800ce78 <MX_USB_DEVICE_Init+0x54>)
 800ce40:	f7fe fd2e 	bl	800b8a0 <USBD_RegisterClass>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d001      	beq.n	800ce4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ce4a:	f7f4 fe3f 	bl	8001acc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce4e:	490c      	ldr	r1, [pc, #48]	; (800ce80 <MX_USB_DEVICE_Init+0x5c>)
 800ce50:	4809      	ldr	r0, [pc, #36]	; (800ce78 <MX_USB_DEVICE_Init+0x54>)
 800ce52:	f7fe fc1f 	bl	800b694 <USBD_CDC_RegisterInterface>
 800ce56:	4603      	mov	r3, r0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d001      	beq.n	800ce60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ce5c:	f7f4 fe36 	bl	8001acc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ce60:	4805      	ldr	r0, [pc, #20]	; (800ce78 <MX_USB_DEVICE_Init+0x54>)
 800ce62:	f7fe fd53 	bl	800b90c <USBD_Start>
 800ce66:	4603      	mov	r3, r0
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d001      	beq.n	800ce70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ce6c:	f7f4 fe2e 	bl	8001acc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ce70:	bf00      	nop
 800ce72:	bd80      	pop	{r7, pc}
 800ce74:	200000ac 	.word	0x200000ac
 800ce78:	20004500 	.word	0x20004500
 800ce7c:	20000018 	.word	0x20000018
 800ce80:	20000098 	.word	0x20000098

0800ce84 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ce88:	2200      	movs	r2, #0
 800ce8a:	4905      	ldr	r1, [pc, #20]	; (800cea0 <CDC_Init_FS+0x1c>)
 800ce8c:	4805      	ldr	r0, [pc, #20]	; (800cea4 <CDC_Init_FS+0x20>)
 800ce8e:	f7fe fc1b 	bl	800b6c8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ce92:	4905      	ldr	r1, [pc, #20]	; (800cea8 <CDC_Init_FS+0x24>)
 800ce94:	4803      	ldr	r0, [pc, #12]	; (800cea4 <CDC_Init_FS+0x20>)
 800ce96:	f7fe fc39 	bl	800b70c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ce9a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	20004fdc 	.word	0x20004fdc
 800cea4:	20004500 	.word	0x20004500
 800cea8:	200047dc 	.word	0x200047dc

0800ceac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ceb0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr

0800cebc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cebc:	b480      	push	{r7}
 800cebe:	b083      	sub	sp, #12
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	4603      	mov	r3, r0
 800cec4:	6039      	str	r1, [r7, #0]
 800cec6:	71fb      	strb	r3, [r7, #7]
 800cec8:	4613      	mov	r3, r2
 800ceca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cecc:	79fb      	ldrb	r3, [r7, #7]
 800cece:	2b23      	cmp	r3, #35	; 0x23
 800ced0:	d84a      	bhi.n	800cf68 <CDC_Control_FS+0xac>
 800ced2:	a201      	add	r2, pc, #4	; (adr r2, 800ced8 <CDC_Control_FS+0x1c>)
 800ced4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ced8:	0800cf69 	.word	0x0800cf69
 800cedc:	0800cf69 	.word	0x0800cf69
 800cee0:	0800cf69 	.word	0x0800cf69
 800cee4:	0800cf69 	.word	0x0800cf69
 800cee8:	0800cf69 	.word	0x0800cf69
 800ceec:	0800cf69 	.word	0x0800cf69
 800cef0:	0800cf69 	.word	0x0800cf69
 800cef4:	0800cf69 	.word	0x0800cf69
 800cef8:	0800cf69 	.word	0x0800cf69
 800cefc:	0800cf69 	.word	0x0800cf69
 800cf00:	0800cf69 	.word	0x0800cf69
 800cf04:	0800cf69 	.word	0x0800cf69
 800cf08:	0800cf69 	.word	0x0800cf69
 800cf0c:	0800cf69 	.word	0x0800cf69
 800cf10:	0800cf69 	.word	0x0800cf69
 800cf14:	0800cf69 	.word	0x0800cf69
 800cf18:	0800cf69 	.word	0x0800cf69
 800cf1c:	0800cf69 	.word	0x0800cf69
 800cf20:	0800cf69 	.word	0x0800cf69
 800cf24:	0800cf69 	.word	0x0800cf69
 800cf28:	0800cf69 	.word	0x0800cf69
 800cf2c:	0800cf69 	.word	0x0800cf69
 800cf30:	0800cf69 	.word	0x0800cf69
 800cf34:	0800cf69 	.word	0x0800cf69
 800cf38:	0800cf69 	.word	0x0800cf69
 800cf3c:	0800cf69 	.word	0x0800cf69
 800cf40:	0800cf69 	.word	0x0800cf69
 800cf44:	0800cf69 	.word	0x0800cf69
 800cf48:	0800cf69 	.word	0x0800cf69
 800cf4c:	0800cf69 	.word	0x0800cf69
 800cf50:	0800cf69 	.word	0x0800cf69
 800cf54:	0800cf69 	.word	0x0800cf69
 800cf58:	0800cf69 	.word	0x0800cf69
 800cf5c:	0800cf69 	.word	0x0800cf69
 800cf60:	0800cf69 	.word	0x0800cf69
 800cf64:	0800cf69 	.word	0x0800cf69
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cf68:	bf00      	nop
  }

  return (USBD_OK);
 800cf6a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b082      	sub	sp, #8
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
 800cf80:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cf82:	6879      	ldr	r1, [r7, #4]
 800cf84:	4805      	ldr	r0, [pc, #20]	; (800cf9c <CDC_Receive_FS+0x24>)
 800cf86:	f7fe fbc1 	bl	800b70c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cf8a:	4804      	ldr	r0, [pc, #16]	; (800cf9c <CDC_Receive_FS+0x24>)
 800cf8c:	f7fe fc22 	bl	800b7d4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cf90:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3708      	adds	r7, #8
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}
 800cf9a:	bf00      	nop
 800cf9c:	20004500 	.word	0x20004500

0800cfa0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cfa0:	b580      	push	{r7, lr}
 800cfa2:	b084      	sub	sp, #16
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cfac:	2300      	movs	r3, #0
 800cfae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cfb0:	4b0d      	ldr	r3, [pc, #52]	; (800cfe8 <CDC_Transmit_FS+0x48>)
 800cfb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cfb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	e00b      	b.n	800cfde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cfc6:	887b      	ldrh	r3, [r7, #2]
 800cfc8:	461a      	mov	r2, r3
 800cfca:	6879      	ldr	r1, [r7, #4]
 800cfcc:	4806      	ldr	r0, [pc, #24]	; (800cfe8 <CDC_Transmit_FS+0x48>)
 800cfce:	f7fe fb7b 	bl	800b6c8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cfd2:	4805      	ldr	r0, [pc, #20]	; (800cfe8 <CDC_Transmit_FS+0x48>)
 800cfd4:	f7fe fbb8 	bl	800b748 <USBD_CDC_TransmitPacket>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cfdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3710      	adds	r7, #16
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	20004500 	.word	0x20004500

0800cfec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cfec:	b480      	push	{r7}
 800cfee:	b087      	sub	sp, #28
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	4613      	mov	r3, r2
 800cff8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cffa:	2300      	movs	r3, #0
 800cffc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cffe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d002:	4618      	mov	r0, r3
 800d004:	371c      	adds	r7, #28
 800d006:	46bd      	mov	sp, r7
 800d008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00c:	4770      	bx	lr
	...

0800d010 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d010:	b480      	push	{r7}
 800d012:	b083      	sub	sp, #12
 800d014:	af00      	add	r7, sp, #0
 800d016:	4603      	mov	r3, r0
 800d018:	6039      	str	r1, [r7, #0]
 800d01a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	2212      	movs	r2, #18
 800d020:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d022:	4b03      	ldr	r3, [pc, #12]	; (800d030 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d024:	4618      	mov	r0, r3
 800d026:	370c      	adds	r7, #12
 800d028:	46bd      	mov	sp, r7
 800d02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d02e:	4770      	bx	lr
 800d030:	200000c8 	.word	0x200000c8

0800d034 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	4603      	mov	r3, r0
 800d03c:	6039      	str	r1, [r7, #0]
 800d03e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	2204      	movs	r2, #4
 800d044:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d046:	4b03      	ldr	r3, [pc, #12]	; (800d054 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d048:	4618      	mov	r0, r3
 800d04a:	370c      	adds	r7, #12
 800d04c:	46bd      	mov	sp, r7
 800d04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d052:	4770      	bx	lr
 800d054:	200000dc 	.word	0x200000dc

0800d058 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	b082      	sub	sp, #8
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	4603      	mov	r3, r0
 800d060:	6039      	str	r1, [r7, #0]
 800d062:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d064:	79fb      	ldrb	r3, [r7, #7]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d105      	bne.n	800d076 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d06a:	683a      	ldr	r2, [r7, #0]
 800d06c:	4907      	ldr	r1, [pc, #28]	; (800d08c <USBD_FS_ProductStrDescriptor+0x34>)
 800d06e:	4808      	ldr	r0, [pc, #32]	; (800d090 <USBD_FS_ProductStrDescriptor+0x38>)
 800d070:	f7ff fdf8 	bl	800cc64 <USBD_GetString>
 800d074:	e004      	b.n	800d080 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d076:	683a      	ldr	r2, [r7, #0]
 800d078:	4904      	ldr	r1, [pc, #16]	; (800d08c <USBD_FS_ProductStrDescriptor+0x34>)
 800d07a:	4805      	ldr	r0, [pc, #20]	; (800d090 <USBD_FS_ProductStrDescriptor+0x38>)
 800d07c:	f7ff fdf2 	bl	800cc64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d080:	4b02      	ldr	r3, [pc, #8]	; (800d08c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d082:	4618      	mov	r0, r3
 800d084:	3708      	adds	r7, #8
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	200057dc 	.word	0x200057dc
 800d090:	0800f618 	.word	0x0800f618

0800d094 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b082      	sub	sp, #8
 800d098:	af00      	add	r7, sp, #0
 800d09a:	4603      	mov	r3, r0
 800d09c:	6039      	str	r1, [r7, #0]
 800d09e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d0a0:	683a      	ldr	r2, [r7, #0]
 800d0a2:	4904      	ldr	r1, [pc, #16]	; (800d0b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d0a4:	4804      	ldr	r0, [pc, #16]	; (800d0b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d0a6:	f7ff fddd 	bl	800cc64 <USBD_GetString>
  return USBD_StrDesc;
 800d0aa:	4b02      	ldr	r3, [pc, #8]	; (800d0b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3708      	adds	r7, #8
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	200057dc 	.word	0x200057dc
 800d0b8:	0800f630 	.word	0x0800f630

0800d0bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b082      	sub	sp, #8
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	6039      	str	r1, [r7, #0]
 800d0c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	221a      	movs	r2, #26
 800d0cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d0ce:	f000 f843 	bl	800d158 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d0d2:	4b02      	ldr	r3, [pc, #8]	; (800d0dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3708      	adds	r7, #8
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	200000e0 	.word	0x200000e0

0800d0e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b082      	sub	sp, #8
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	6039      	str	r1, [r7, #0]
 800d0ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d0ec:	79fb      	ldrb	r3, [r7, #7]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d105      	bne.n	800d0fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	4907      	ldr	r1, [pc, #28]	; (800d114 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d0f6:	4808      	ldr	r0, [pc, #32]	; (800d118 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d0f8:	f7ff fdb4 	bl	800cc64 <USBD_GetString>
 800d0fc:	e004      	b.n	800d108 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d0fe:	683a      	ldr	r2, [r7, #0]
 800d100:	4904      	ldr	r1, [pc, #16]	; (800d114 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d102:	4805      	ldr	r0, [pc, #20]	; (800d118 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d104:	f7ff fdae 	bl	800cc64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d108:	4b02      	ldr	r3, [pc, #8]	; (800d114 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3708      	adds	r7, #8
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	200057dc 	.word	0x200057dc
 800d118:	0800f644 	.word	0x0800f644

0800d11c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	4603      	mov	r3, r0
 800d124:	6039      	str	r1, [r7, #0]
 800d126:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d128:	79fb      	ldrb	r3, [r7, #7]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d105      	bne.n	800d13a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d12e:	683a      	ldr	r2, [r7, #0]
 800d130:	4907      	ldr	r1, [pc, #28]	; (800d150 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d132:	4808      	ldr	r0, [pc, #32]	; (800d154 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d134:	f7ff fd96 	bl	800cc64 <USBD_GetString>
 800d138:	e004      	b.n	800d144 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d13a:	683a      	ldr	r2, [r7, #0]
 800d13c:	4904      	ldr	r1, [pc, #16]	; (800d150 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d13e:	4805      	ldr	r0, [pc, #20]	; (800d154 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d140:	f7ff fd90 	bl	800cc64 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d144:	4b02      	ldr	r3, [pc, #8]	; (800d150 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d146:	4618      	mov	r0, r3
 800d148:	3708      	adds	r7, #8
 800d14a:	46bd      	mov	sp, r7
 800d14c:	bd80      	pop	{r7, pc}
 800d14e:	bf00      	nop
 800d150:	200057dc 	.word	0x200057dc
 800d154:	0800f650 	.word	0x0800f650

0800d158 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b084      	sub	sp, #16
 800d15c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d15e:	4b0f      	ldr	r3, [pc, #60]	; (800d19c <Get_SerialNum+0x44>)
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d164:	4b0e      	ldr	r3, [pc, #56]	; (800d1a0 <Get_SerialNum+0x48>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d16a:	4b0e      	ldr	r3, [pc, #56]	; (800d1a4 <Get_SerialNum+0x4c>)
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d170:	68fa      	ldr	r2, [r7, #12]
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	4413      	add	r3, r2
 800d176:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d009      	beq.n	800d192 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d17e:	2208      	movs	r2, #8
 800d180:	4909      	ldr	r1, [pc, #36]	; (800d1a8 <Get_SerialNum+0x50>)
 800d182:	68f8      	ldr	r0, [r7, #12]
 800d184:	f000 f814 	bl	800d1b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d188:	2204      	movs	r2, #4
 800d18a:	4908      	ldr	r1, [pc, #32]	; (800d1ac <Get_SerialNum+0x54>)
 800d18c:	68b8      	ldr	r0, [r7, #8]
 800d18e:	f000 f80f 	bl	800d1b0 <IntToUnicode>
  }
}
 800d192:	bf00      	nop
 800d194:	3710      	adds	r7, #16
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	1fff7a10 	.word	0x1fff7a10
 800d1a0:	1fff7a14 	.word	0x1fff7a14
 800d1a4:	1fff7a18 	.word	0x1fff7a18
 800d1a8:	200000e2 	.word	0x200000e2
 800d1ac:	200000f2 	.word	0x200000f2

0800d1b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d1b0:	b480      	push	{r7}
 800d1b2:	b087      	sub	sp, #28
 800d1b4:	af00      	add	r7, sp, #0
 800d1b6:	60f8      	str	r0, [r7, #12]
 800d1b8:	60b9      	str	r1, [r7, #8]
 800d1ba:	4613      	mov	r3, r2
 800d1bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d1c2:	2300      	movs	r3, #0
 800d1c4:	75fb      	strb	r3, [r7, #23]
 800d1c6:	e027      	b.n	800d218 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	0f1b      	lsrs	r3, r3, #28
 800d1cc:	2b09      	cmp	r3, #9
 800d1ce:	d80b      	bhi.n	800d1e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	0f1b      	lsrs	r3, r3, #28
 800d1d4:	b2da      	uxtb	r2, r3
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
 800d1d8:	005b      	lsls	r3, r3, #1
 800d1da:	4619      	mov	r1, r3
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	440b      	add	r3, r1
 800d1e0:	3230      	adds	r2, #48	; 0x30
 800d1e2:	b2d2      	uxtb	r2, r2
 800d1e4:	701a      	strb	r2, [r3, #0]
 800d1e6:	e00a      	b.n	800d1fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	0f1b      	lsrs	r3, r3, #28
 800d1ec:	b2da      	uxtb	r2, r3
 800d1ee:	7dfb      	ldrb	r3, [r7, #23]
 800d1f0:	005b      	lsls	r3, r3, #1
 800d1f2:	4619      	mov	r1, r3
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	440b      	add	r3, r1
 800d1f8:	3237      	adds	r2, #55	; 0x37
 800d1fa:	b2d2      	uxtb	r2, r2
 800d1fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	011b      	lsls	r3, r3, #4
 800d202:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d204:	7dfb      	ldrb	r3, [r7, #23]
 800d206:	005b      	lsls	r3, r3, #1
 800d208:	3301      	adds	r3, #1
 800d20a:	68ba      	ldr	r2, [r7, #8]
 800d20c:	4413      	add	r3, r2
 800d20e:	2200      	movs	r2, #0
 800d210:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d212:	7dfb      	ldrb	r3, [r7, #23]
 800d214:	3301      	adds	r3, #1
 800d216:	75fb      	strb	r3, [r7, #23]
 800d218:	7dfa      	ldrb	r2, [r7, #23]
 800d21a:	79fb      	ldrb	r3, [r7, #7]
 800d21c:	429a      	cmp	r2, r3
 800d21e:	d3d3      	bcc.n	800d1c8 <IntToUnicode+0x18>
  }
}
 800d220:	bf00      	nop
 800d222:	bf00      	nop
 800d224:	371c      	adds	r7, #28
 800d226:	46bd      	mov	sp, r7
 800d228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22c:	4770      	bx	lr
	...

0800d230 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b08a      	sub	sp, #40	; 0x28
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d238:	f107 0314 	add.w	r3, r7, #20
 800d23c:	2200      	movs	r2, #0
 800d23e:	601a      	str	r2, [r3, #0]
 800d240:	605a      	str	r2, [r3, #4]
 800d242:	609a      	str	r2, [r3, #8]
 800d244:	60da      	str	r2, [r3, #12]
 800d246:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d250:	d147      	bne.n	800d2e2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d252:	2300      	movs	r3, #0
 800d254:	613b      	str	r3, [r7, #16]
 800d256:	4b25      	ldr	r3, [pc, #148]	; (800d2ec <HAL_PCD_MspInit+0xbc>)
 800d258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d25a:	4a24      	ldr	r2, [pc, #144]	; (800d2ec <HAL_PCD_MspInit+0xbc>)
 800d25c:	f043 0301 	orr.w	r3, r3, #1
 800d260:	6313      	str	r3, [r2, #48]	; 0x30
 800d262:	4b22      	ldr	r3, [pc, #136]	; (800d2ec <HAL_PCD_MspInit+0xbc>)
 800d264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d266:	f003 0301 	and.w	r3, r3, #1
 800d26a:	613b      	str	r3, [r7, #16]
 800d26c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d26e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d274:	2300      	movs	r3, #0
 800d276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d278:	2300      	movs	r3, #0
 800d27a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d27c:	f107 0314 	add.w	r3, r7, #20
 800d280:	4619      	mov	r1, r3
 800d282:	481b      	ldr	r0, [pc, #108]	; (800d2f0 <HAL_PCD_MspInit+0xc0>)
 800d284:	f7f7 fbce 	bl	8004a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d288:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d28c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d28e:	2302      	movs	r3, #2
 800d290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d292:	2300      	movs	r3, #0
 800d294:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d296:	2300      	movs	r3, #0
 800d298:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d29a:	230a      	movs	r3, #10
 800d29c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d29e:	f107 0314 	add.w	r3, r7, #20
 800d2a2:	4619      	mov	r1, r3
 800d2a4:	4812      	ldr	r0, [pc, #72]	; (800d2f0 <HAL_PCD_MspInit+0xc0>)
 800d2a6:	f7f7 fbbd 	bl	8004a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d2aa:	4b10      	ldr	r3, [pc, #64]	; (800d2ec <HAL_PCD_MspInit+0xbc>)
 800d2ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ae:	4a0f      	ldr	r2, [pc, #60]	; (800d2ec <HAL_PCD_MspInit+0xbc>)
 800d2b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2b4:	6353      	str	r3, [r2, #52]	; 0x34
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	60fb      	str	r3, [r7, #12]
 800d2ba:	4b0c      	ldr	r3, [pc, #48]	; (800d2ec <HAL_PCD_MspInit+0xbc>)
 800d2bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2be:	4a0b      	ldr	r2, [pc, #44]	; (800d2ec <HAL_PCD_MspInit+0xbc>)
 800d2c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d2c4:	6453      	str	r3, [r2, #68]	; 0x44
 800d2c6:	4b09      	ldr	r3, [pc, #36]	; (800d2ec <HAL_PCD_MspInit+0xbc>)
 800d2c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d2ce:	60fb      	str	r3, [r7, #12]
 800d2d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	2043      	movs	r0, #67	; 0x43
 800d2d8:	f7f6 fd6d 	bl	8003db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d2dc:	2043      	movs	r0, #67	; 0x43
 800d2de:	f7f6 fd86 	bl	8003dee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d2e2:	bf00      	nop
 800d2e4:	3728      	adds	r7, #40	; 0x28
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	40023800 	.word	0x40023800
 800d2f0:	40020000 	.word	0x40020000

0800d2f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d308:	4619      	mov	r1, r3
 800d30a:	4610      	mov	r0, r2
 800d30c:	f7fe fb4b 	bl	800b9a6 <USBD_LL_SetupStage>
}
 800d310:	bf00      	nop
 800d312:	3708      	adds	r7, #8
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}

0800d318 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d318:	b580      	push	{r7, lr}
 800d31a:	b082      	sub	sp, #8
 800d31c:	af00      	add	r7, sp, #0
 800d31e:	6078      	str	r0, [r7, #4]
 800d320:	460b      	mov	r3, r1
 800d322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d32a:	78fa      	ldrb	r2, [r7, #3]
 800d32c:	6879      	ldr	r1, [r7, #4]
 800d32e:	4613      	mov	r3, r2
 800d330:	00db      	lsls	r3, r3, #3
 800d332:	4413      	add	r3, r2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	440b      	add	r3, r1
 800d338:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	78fb      	ldrb	r3, [r7, #3]
 800d340:	4619      	mov	r1, r3
 800d342:	f7fe fb85 	bl	800ba50 <USBD_LL_DataOutStage>
}
 800d346:	bf00      	nop
 800d348:	3708      	adds	r7, #8
 800d34a:	46bd      	mov	sp, r7
 800d34c:	bd80      	pop	{r7, pc}

0800d34e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d34e:	b580      	push	{r7, lr}
 800d350:	b082      	sub	sp, #8
 800d352:	af00      	add	r7, sp, #0
 800d354:	6078      	str	r0, [r7, #4]
 800d356:	460b      	mov	r3, r1
 800d358:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d360:	78fa      	ldrb	r2, [r7, #3]
 800d362:	6879      	ldr	r1, [r7, #4]
 800d364:	4613      	mov	r3, r2
 800d366:	00db      	lsls	r3, r3, #3
 800d368:	4413      	add	r3, r2
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	440b      	add	r3, r1
 800d36e:	334c      	adds	r3, #76	; 0x4c
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	78fb      	ldrb	r3, [r7, #3]
 800d374:	4619      	mov	r1, r3
 800d376:	f7fe fc1e 	bl	800bbb6 <USBD_LL_DataInStage>
}
 800d37a:	bf00      	nop
 800d37c:	3708      	adds	r7, #8
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b082      	sub	sp, #8
 800d386:	af00      	add	r7, sp, #0
 800d388:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d390:	4618      	mov	r0, r3
 800d392:	f7fe fd52 	bl	800be3a <USBD_LL_SOF>
}
 800d396:	bf00      	nop
 800d398:	3708      	adds	r7, #8
 800d39a:	46bd      	mov	sp, r7
 800d39c:	bd80      	pop	{r7, pc}

0800d39e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d39e:	b580      	push	{r7, lr}
 800d3a0:	b084      	sub	sp, #16
 800d3a2:	af00      	add	r7, sp, #0
 800d3a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d102      	bne.n	800d3b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	73fb      	strb	r3, [r7, #15]
 800d3b6:	e008      	b.n	800d3ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	68db      	ldr	r3, [r3, #12]
 800d3bc:	2b02      	cmp	r3, #2
 800d3be:	d102      	bne.n	800d3c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d3c0:	2301      	movs	r3, #1
 800d3c2:	73fb      	strb	r3, [r7, #15]
 800d3c4:	e001      	b.n	800d3ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d3c6:	f7f4 fb81 	bl	8001acc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d3d0:	7bfa      	ldrb	r2, [r7, #15]
 800d3d2:	4611      	mov	r1, r2
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	f7fe fcf2 	bl	800bdbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d3e0:	4618      	mov	r0, r3
 800d3e2:	f7fe fc9a 	bl	800bd1a <USBD_LL_Reset>
}
 800d3e6:	bf00      	nop
 800d3e8:	3710      	adds	r7, #16
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
	...

0800d3f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d3fe:	4618      	mov	r0, r3
 800d400:	f7fe fced 	bl	800bdde <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	687a      	ldr	r2, [r7, #4]
 800d410:	6812      	ldr	r2, [r2, #0]
 800d412:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d416:	f043 0301 	orr.w	r3, r3, #1
 800d41a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6a1b      	ldr	r3, [r3, #32]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d005      	beq.n	800d430 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d424:	4b04      	ldr	r3, [pc, #16]	; (800d438 <HAL_PCD_SuspendCallback+0x48>)
 800d426:	691b      	ldr	r3, [r3, #16]
 800d428:	4a03      	ldr	r2, [pc, #12]	; (800d438 <HAL_PCD_SuspendCallback+0x48>)
 800d42a:	f043 0306 	orr.w	r3, r3, #6
 800d42e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d430:	bf00      	nop
 800d432:	3708      	adds	r7, #8
 800d434:	46bd      	mov	sp, r7
 800d436:	bd80      	pop	{r7, pc}
 800d438:	e000ed00 	.word	0xe000ed00

0800d43c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d44a:	4618      	mov	r0, r3
 800d44c:	f7fe fcdd 	bl	800be0a <USBD_LL_Resume>
}
 800d450:	bf00      	nop
 800d452:	3708      	adds	r7, #8
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}

0800d458 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b082      	sub	sp, #8
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
 800d460:	460b      	mov	r3, r1
 800d462:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d46a:	78fa      	ldrb	r2, [r7, #3]
 800d46c:	4611      	mov	r1, r2
 800d46e:	4618      	mov	r0, r3
 800d470:	f7fe fd35 	bl	800bede <USBD_LL_IsoOUTIncomplete>
}
 800d474:	bf00      	nop
 800d476:	3708      	adds	r7, #8
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d48e:	78fa      	ldrb	r2, [r7, #3]
 800d490:	4611      	mov	r1, r2
 800d492:	4618      	mov	r0, r3
 800d494:	f7fe fcf1 	bl	800be7a <USBD_LL_IsoINIncomplete>
}
 800d498:	bf00      	nop
 800d49a:	3708      	adds	r7, #8
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}

0800d4a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b082      	sub	sp, #8
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7fe fd47 	bl	800bf42 <USBD_LL_DevConnected>
}
 800d4b4:	bf00      	nop
 800d4b6:	3708      	adds	r7, #8
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	f7fe fd44 	bl	800bf58 <USBD_LL_DevDisconnected>
}
 800d4d0:	bf00      	nop
 800d4d2:	3708      	adds	r7, #8
 800d4d4:	46bd      	mov	sp, r7
 800d4d6:	bd80      	pop	{r7, pc}

0800d4d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	b082      	sub	sp, #8
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	781b      	ldrb	r3, [r3, #0]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d13c      	bne.n	800d562 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d4e8:	4a20      	ldr	r2, [pc, #128]	; (800d56c <USBD_LL_Init+0x94>)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	4a1e      	ldr	r2, [pc, #120]	; (800d56c <USBD_LL_Init+0x94>)
 800d4f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d4f8:	4b1c      	ldr	r3, [pc, #112]	; (800d56c <USBD_LL_Init+0x94>)
 800d4fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d4fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d500:	4b1a      	ldr	r3, [pc, #104]	; (800d56c <USBD_LL_Init+0x94>)
 800d502:	2204      	movs	r2, #4
 800d504:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d506:	4b19      	ldr	r3, [pc, #100]	; (800d56c <USBD_LL_Init+0x94>)
 800d508:	2202      	movs	r2, #2
 800d50a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d50c:	4b17      	ldr	r3, [pc, #92]	; (800d56c <USBD_LL_Init+0x94>)
 800d50e:	2200      	movs	r2, #0
 800d510:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d512:	4b16      	ldr	r3, [pc, #88]	; (800d56c <USBD_LL_Init+0x94>)
 800d514:	2202      	movs	r2, #2
 800d516:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d518:	4b14      	ldr	r3, [pc, #80]	; (800d56c <USBD_LL_Init+0x94>)
 800d51a:	2200      	movs	r2, #0
 800d51c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d51e:	4b13      	ldr	r3, [pc, #76]	; (800d56c <USBD_LL_Init+0x94>)
 800d520:	2200      	movs	r2, #0
 800d522:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d524:	4b11      	ldr	r3, [pc, #68]	; (800d56c <USBD_LL_Init+0x94>)
 800d526:	2200      	movs	r2, #0
 800d528:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d52a:	4b10      	ldr	r3, [pc, #64]	; (800d56c <USBD_LL_Init+0x94>)
 800d52c:	2201      	movs	r2, #1
 800d52e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d530:	4b0e      	ldr	r3, [pc, #56]	; (800d56c <USBD_LL_Init+0x94>)
 800d532:	2200      	movs	r2, #0
 800d534:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d536:	480d      	ldr	r0, [pc, #52]	; (800d56c <USBD_LL_Init+0x94>)
 800d538:	f7f7 fd86 	bl	8005048 <HAL_PCD_Init>
 800d53c:	4603      	mov	r3, r0
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d001      	beq.n	800d546 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d542:	f7f4 fac3 	bl	8001acc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d546:	2180      	movs	r1, #128	; 0x80
 800d548:	4808      	ldr	r0, [pc, #32]	; (800d56c <USBD_LL_Init+0x94>)
 800d54a:	f7f8 ffde 	bl	800650a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d54e:	2240      	movs	r2, #64	; 0x40
 800d550:	2100      	movs	r1, #0
 800d552:	4806      	ldr	r0, [pc, #24]	; (800d56c <USBD_LL_Init+0x94>)
 800d554:	f7f8 ff92 	bl	800647c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d558:	2280      	movs	r2, #128	; 0x80
 800d55a:	2101      	movs	r1, #1
 800d55c:	4803      	ldr	r0, [pc, #12]	; (800d56c <USBD_LL_Init+0x94>)
 800d55e:	f7f8 ff8d 	bl	800647c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d562:	2300      	movs	r3, #0
}
 800d564:	4618      	mov	r0, r3
 800d566:	3708      	adds	r7, #8
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	200059dc 	.word	0x200059dc

0800d570 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d578:	2300      	movs	r3, #0
 800d57a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d57c:	2300      	movs	r3, #0
 800d57e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d586:	4618      	mov	r0, r3
 800d588:	f7f7 fe7b 	bl	8005282 <HAL_PCD_Start>
 800d58c:	4603      	mov	r3, r0
 800d58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d590:	7bfb      	ldrb	r3, [r7, #15]
 800d592:	4618      	mov	r0, r3
 800d594:	f000 f942 	bl	800d81c <USBD_Get_USB_Status>
 800d598:	4603      	mov	r3, r0
 800d59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d59c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d59e:	4618      	mov	r0, r3
 800d5a0:	3710      	adds	r7, #16
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d5a6:	b580      	push	{r7, lr}
 800d5a8:	b084      	sub	sp, #16
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
 800d5ae:	4608      	mov	r0, r1
 800d5b0:	4611      	mov	r1, r2
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	4603      	mov	r3, r0
 800d5b6:	70fb      	strb	r3, [r7, #3]
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	70bb      	strb	r3, [r7, #2]
 800d5bc:	4613      	mov	r3, r2
 800d5be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d5ce:	78bb      	ldrb	r3, [r7, #2]
 800d5d0:	883a      	ldrh	r2, [r7, #0]
 800d5d2:	78f9      	ldrb	r1, [r7, #3]
 800d5d4:	f7f8 fb4c 	bl	8005c70 <HAL_PCD_EP_Open>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5dc:	7bfb      	ldrb	r3, [r7, #15]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f000 f91c 	bl	800d81c <USBD_Get_USB_Status>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b084      	sub	sp, #16
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	460b      	mov	r3, r1
 800d5fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5fe:	2300      	movs	r3, #0
 800d600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d602:	2300      	movs	r3, #0
 800d604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d60c:	78fa      	ldrb	r2, [r7, #3]
 800d60e:	4611      	mov	r1, r2
 800d610:	4618      	mov	r0, r3
 800d612:	f7f8 fb95 	bl	8005d40 <HAL_PCD_EP_Close>
 800d616:	4603      	mov	r3, r0
 800d618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d61a:	7bfb      	ldrb	r3, [r7, #15]
 800d61c:	4618      	mov	r0, r3
 800d61e:	f000 f8fd 	bl	800d81c <USBD_Get_USB_Status>
 800d622:	4603      	mov	r3, r0
 800d624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d626:	7bbb      	ldrb	r3, [r7, #14]
}
 800d628:	4618      	mov	r0, r3
 800d62a:	3710      	adds	r7, #16
 800d62c:	46bd      	mov	sp, r7
 800d62e:	bd80      	pop	{r7, pc}

0800d630 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d630:	b580      	push	{r7, lr}
 800d632:	b084      	sub	sp, #16
 800d634:	af00      	add	r7, sp, #0
 800d636:	6078      	str	r0, [r7, #4]
 800d638:	460b      	mov	r3, r1
 800d63a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d63c:	2300      	movs	r3, #0
 800d63e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d640:	2300      	movs	r3, #0
 800d642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d64a:	78fa      	ldrb	r2, [r7, #3]
 800d64c:	4611      	mov	r1, r2
 800d64e:	4618      	mov	r0, r3
 800d650:	f7f8 fc6d 	bl	8005f2e <HAL_PCD_EP_SetStall>
 800d654:	4603      	mov	r3, r0
 800d656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d658:	7bfb      	ldrb	r3, [r7, #15]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f000 f8de 	bl	800d81c <USBD_Get_USB_Status>
 800d660:	4603      	mov	r3, r0
 800d662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d664:	7bbb      	ldrb	r3, [r7, #14]
}
 800d666:	4618      	mov	r0, r3
 800d668:	3710      	adds	r7, #16
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b084      	sub	sp, #16
 800d672:	af00      	add	r7, sp, #0
 800d674:	6078      	str	r0, [r7, #4]
 800d676:	460b      	mov	r3, r1
 800d678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d67a:	2300      	movs	r3, #0
 800d67c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d67e:	2300      	movs	r3, #0
 800d680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d688:	78fa      	ldrb	r2, [r7, #3]
 800d68a:	4611      	mov	r1, r2
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7f8 fcb2 	bl	8005ff6 <HAL_PCD_EP_ClrStall>
 800d692:	4603      	mov	r3, r0
 800d694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d696:	7bfb      	ldrb	r3, [r7, #15]
 800d698:	4618      	mov	r0, r3
 800d69a:	f000 f8bf 	bl	800d81c <USBD_Get_USB_Status>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3710      	adds	r7, #16
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	bd80      	pop	{r7, pc}

0800d6ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b085      	sub	sp, #20
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
 800d6b4:	460b      	mov	r3, r1
 800d6b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d6be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d6c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	da0b      	bge.n	800d6e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d6c8:	78fb      	ldrb	r3, [r7, #3]
 800d6ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6ce:	68f9      	ldr	r1, [r7, #12]
 800d6d0:	4613      	mov	r3, r2
 800d6d2:	00db      	lsls	r3, r3, #3
 800d6d4:	4413      	add	r3, r2
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	440b      	add	r3, r1
 800d6da:	333e      	adds	r3, #62	; 0x3e
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	e00b      	b.n	800d6f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d6e0:	78fb      	ldrb	r3, [r7, #3]
 800d6e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6e6:	68f9      	ldr	r1, [r7, #12]
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	00db      	lsls	r3, r3, #3
 800d6ec:	4413      	add	r3, r2
 800d6ee:	009b      	lsls	r3, r3, #2
 800d6f0:	440b      	add	r3, r1
 800d6f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d6f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d6f8:	4618      	mov	r0, r3
 800d6fa:	3714      	adds	r7, #20
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr

0800d704 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	460b      	mov	r3, r1
 800d70e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d710:	2300      	movs	r3, #0
 800d712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d714:	2300      	movs	r3, #0
 800d716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d71e:	78fa      	ldrb	r2, [r7, #3]
 800d720:	4611      	mov	r1, r2
 800d722:	4618      	mov	r0, r3
 800d724:	f7f8 fa7f 	bl	8005c26 <HAL_PCD_SetAddress>
 800d728:	4603      	mov	r3, r0
 800d72a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d72c:	7bfb      	ldrb	r3, [r7, #15]
 800d72e:	4618      	mov	r0, r3
 800d730:	f000 f874 	bl	800d81c <USBD_Get_USB_Status>
 800d734:	4603      	mov	r3, r0
 800d736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d738:	7bbb      	ldrb	r3, [r7, #14]
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	3710      	adds	r7, #16
 800d73e:	46bd      	mov	sp, r7
 800d740:	bd80      	pop	{r7, pc}

0800d742 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d742:	b580      	push	{r7, lr}
 800d744:	b086      	sub	sp, #24
 800d746:	af00      	add	r7, sp, #0
 800d748:	60f8      	str	r0, [r7, #12]
 800d74a:	607a      	str	r2, [r7, #4]
 800d74c:	603b      	str	r3, [r7, #0]
 800d74e:	460b      	mov	r3, r1
 800d750:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d752:	2300      	movs	r3, #0
 800d754:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d756:	2300      	movs	r3, #0
 800d758:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d760:	7af9      	ldrb	r1, [r7, #11]
 800d762:	683b      	ldr	r3, [r7, #0]
 800d764:	687a      	ldr	r2, [r7, #4]
 800d766:	f7f8 fb98 	bl	8005e9a <HAL_PCD_EP_Transmit>
 800d76a:	4603      	mov	r3, r0
 800d76c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d76e:	7dfb      	ldrb	r3, [r7, #23]
 800d770:	4618      	mov	r0, r3
 800d772:	f000 f853 	bl	800d81c <USBD_Get_USB_Status>
 800d776:	4603      	mov	r3, r0
 800d778:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d77a:	7dbb      	ldrb	r3, [r7, #22]
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3718      	adds	r7, #24
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b086      	sub	sp, #24
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	607a      	str	r2, [r7, #4]
 800d78e:	603b      	str	r3, [r7, #0]
 800d790:	460b      	mov	r3, r1
 800d792:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d794:	2300      	movs	r3, #0
 800d796:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d798:	2300      	movs	r3, #0
 800d79a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d7a2:	7af9      	ldrb	r1, [r7, #11]
 800d7a4:	683b      	ldr	r3, [r7, #0]
 800d7a6:	687a      	ldr	r2, [r7, #4]
 800d7a8:	f7f8 fb14 	bl	8005dd4 <HAL_PCD_EP_Receive>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7b0:	7dfb      	ldrb	r3, [r7, #23]
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	f000 f832 	bl	800d81c <USBD_Get_USB_Status>
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3718      	adds	r7, #24
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}

0800d7c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d7c6:	b580      	push	{r7, lr}
 800d7c8:	b082      	sub	sp, #8
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	6078      	str	r0, [r7, #4]
 800d7ce:	460b      	mov	r3, r1
 800d7d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d7d8:	78fa      	ldrb	r2, [r7, #3]
 800d7da:	4611      	mov	r1, r2
 800d7dc:	4618      	mov	r0, r3
 800d7de:	f7f8 fb44 	bl	8005e6a <HAL_PCD_EP_GetRxCount>
 800d7e2:	4603      	mov	r3, r0
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3708      	adds	r7, #8
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d7f4:	4b03      	ldr	r3, [pc, #12]	; (800d804 <USBD_static_malloc+0x18>)
}
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	370c      	adds	r7, #12
 800d7fa:	46bd      	mov	sp, r7
 800d7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d800:	4770      	bx	lr
 800d802:	bf00      	nop
 800d804:	20005ee8 	.word	0x20005ee8

0800d808 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d808:	b480      	push	{r7}
 800d80a:	b083      	sub	sp, #12
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]

}
 800d810:	bf00      	nop
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81a:	4770      	bx	lr

0800d81c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b085      	sub	sp, #20
 800d820:	af00      	add	r7, sp, #0
 800d822:	4603      	mov	r3, r0
 800d824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d82a:	79fb      	ldrb	r3, [r7, #7]
 800d82c:	2b03      	cmp	r3, #3
 800d82e:	d817      	bhi.n	800d860 <USBD_Get_USB_Status+0x44>
 800d830:	a201      	add	r2, pc, #4	; (adr r2, 800d838 <USBD_Get_USB_Status+0x1c>)
 800d832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d836:	bf00      	nop
 800d838:	0800d849 	.word	0x0800d849
 800d83c:	0800d84f 	.word	0x0800d84f
 800d840:	0800d855 	.word	0x0800d855
 800d844:	0800d85b 	.word	0x0800d85b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d848:	2300      	movs	r3, #0
 800d84a:	73fb      	strb	r3, [r7, #15]
    break;
 800d84c:	e00b      	b.n	800d866 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d84e:	2303      	movs	r3, #3
 800d850:	73fb      	strb	r3, [r7, #15]
    break;
 800d852:	e008      	b.n	800d866 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d854:	2301      	movs	r3, #1
 800d856:	73fb      	strb	r3, [r7, #15]
    break;
 800d858:	e005      	b.n	800d866 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d85a:	2303      	movs	r3, #3
 800d85c:	73fb      	strb	r3, [r7, #15]
    break;
 800d85e:	e002      	b.n	800d866 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d860:	2303      	movs	r3, #3
 800d862:	73fb      	strb	r3, [r7, #15]
    break;
 800d864:	bf00      	nop
  }
  return usb_status;
 800d866:	7bfb      	ldrb	r3, [r7, #15]
}
 800d868:	4618      	mov	r0, r3
 800d86a:	3714      	adds	r7, #20
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <__errno>:
 800d874:	4b01      	ldr	r3, [pc, #4]	; (800d87c <__errno+0x8>)
 800d876:	6818      	ldr	r0, [r3, #0]
 800d878:	4770      	bx	lr
 800d87a:	bf00      	nop
 800d87c:	200000fc 	.word	0x200000fc

0800d880 <__libc_init_array>:
 800d880:	b570      	push	{r4, r5, r6, lr}
 800d882:	4d0d      	ldr	r5, [pc, #52]	; (800d8b8 <__libc_init_array+0x38>)
 800d884:	4c0d      	ldr	r4, [pc, #52]	; (800d8bc <__libc_init_array+0x3c>)
 800d886:	1b64      	subs	r4, r4, r5
 800d888:	10a4      	asrs	r4, r4, #2
 800d88a:	2600      	movs	r6, #0
 800d88c:	42a6      	cmp	r6, r4
 800d88e:	d109      	bne.n	800d8a4 <__libc_init_array+0x24>
 800d890:	4d0b      	ldr	r5, [pc, #44]	; (800d8c0 <__libc_init_array+0x40>)
 800d892:	4c0c      	ldr	r4, [pc, #48]	; (800d8c4 <__libc_init_array+0x44>)
 800d894:	f001 fa10 	bl	800ecb8 <_init>
 800d898:	1b64      	subs	r4, r4, r5
 800d89a:	10a4      	asrs	r4, r4, #2
 800d89c:	2600      	movs	r6, #0
 800d89e:	42a6      	cmp	r6, r4
 800d8a0:	d105      	bne.n	800d8ae <__libc_init_array+0x2e>
 800d8a2:	bd70      	pop	{r4, r5, r6, pc}
 800d8a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8a8:	4798      	blx	r3
 800d8aa:	3601      	adds	r6, #1
 800d8ac:	e7ee      	b.n	800d88c <__libc_init_array+0xc>
 800d8ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8b2:	4798      	blx	r3
 800d8b4:	3601      	adds	r6, #1
 800d8b6:	e7f2      	b.n	800d89e <__libc_init_array+0x1e>
 800d8b8:	080106f0 	.word	0x080106f0
 800d8bc:	080106f0 	.word	0x080106f0
 800d8c0:	080106f0 	.word	0x080106f0
 800d8c4:	080106f4 	.word	0x080106f4

0800d8c8 <memcmp>:
 800d8c8:	b510      	push	{r4, lr}
 800d8ca:	3901      	subs	r1, #1
 800d8cc:	4402      	add	r2, r0
 800d8ce:	4290      	cmp	r0, r2
 800d8d0:	d101      	bne.n	800d8d6 <memcmp+0xe>
 800d8d2:	2000      	movs	r0, #0
 800d8d4:	e005      	b.n	800d8e2 <memcmp+0x1a>
 800d8d6:	7803      	ldrb	r3, [r0, #0]
 800d8d8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d8dc:	42a3      	cmp	r3, r4
 800d8de:	d001      	beq.n	800d8e4 <memcmp+0x1c>
 800d8e0:	1b18      	subs	r0, r3, r4
 800d8e2:	bd10      	pop	{r4, pc}
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	e7f2      	b.n	800d8ce <memcmp+0x6>

0800d8e8 <memcpy>:
 800d8e8:	440a      	add	r2, r1
 800d8ea:	4291      	cmp	r1, r2
 800d8ec:	f100 33ff 	add.w	r3, r0, #4294967295
 800d8f0:	d100      	bne.n	800d8f4 <memcpy+0xc>
 800d8f2:	4770      	bx	lr
 800d8f4:	b510      	push	{r4, lr}
 800d8f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8fe:	4291      	cmp	r1, r2
 800d900:	d1f9      	bne.n	800d8f6 <memcpy+0xe>
 800d902:	bd10      	pop	{r4, pc}

0800d904 <memset>:
 800d904:	4402      	add	r2, r0
 800d906:	4603      	mov	r3, r0
 800d908:	4293      	cmp	r3, r2
 800d90a:	d100      	bne.n	800d90e <memset+0xa>
 800d90c:	4770      	bx	lr
 800d90e:	f803 1b01 	strb.w	r1, [r3], #1
 800d912:	e7f9      	b.n	800d908 <memset+0x4>

0800d914 <iprintf>:
 800d914:	b40f      	push	{r0, r1, r2, r3}
 800d916:	4b0a      	ldr	r3, [pc, #40]	; (800d940 <iprintf+0x2c>)
 800d918:	b513      	push	{r0, r1, r4, lr}
 800d91a:	681c      	ldr	r4, [r3, #0]
 800d91c:	b124      	cbz	r4, 800d928 <iprintf+0x14>
 800d91e:	69a3      	ldr	r3, [r4, #24]
 800d920:	b913      	cbnz	r3, 800d928 <iprintf+0x14>
 800d922:	4620      	mov	r0, r4
 800d924:	f000 fa7e 	bl	800de24 <__sinit>
 800d928:	ab05      	add	r3, sp, #20
 800d92a:	9a04      	ldr	r2, [sp, #16]
 800d92c:	68a1      	ldr	r1, [r4, #8]
 800d92e:	9301      	str	r3, [sp, #4]
 800d930:	4620      	mov	r0, r4
 800d932:	f000 fde3 	bl	800e4fc <_vfiprintf_r>
 800d936:	b002      	add	sp, #8
 800d938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d93c:	b004      	add	sp, #16
 800d93e:	4770      	bx	lr
 800d940:	200000fc 	.word	0x200000fc

0800d944 <_puts_r>:
 800d944:	b570      	push	{r4, r5, r6, lr}
 800d946:	460e      	mov	r6, r1
 800d948:	4605      	mov	r5, r0
 800d94a:	b118      	cbz	r0, 800d954 <_puts_r+0x10>
 800d94c:	6983      	ldr	r3, [r0, #24]
 800d94e:	b90b      	cbnz	r3, 800d954 <_puts_r+0x10>
 800d950:	f000 fa68 	bl	800de24 <__sinit>
 800d954:	69ab      	ldr	r3, [r5, #24]
 800d956:	68ac      	ldr	r4, [r5, #8]
 800d958:	b913      	cbnz	r3, 800d960 <_puts_r+0x1c>
 800d95a:	4628      	mov	r0, r5
 800d95c:	f000 fa62 	bl	800de24 <__sinit>
 800d960:	4b2c      	ldr	r3, [pc, #176]	; (800da14 <_puts_r+0xd0>)
 800d962:	429c      	cmp	r4, r3
 800d964:	d120      	bne.n	800d9a8 <_puts_r+0x64>
 800d966:	686c      	ldr	r4, [r5, #4]
 800d968:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d96a:	07db      	lsls	r3, r3, #31
 800d96c:	d405      	bmi.n	800d97a <_puts_r+0x36>
 800d96e:	89a3      	ldrh	r3, [r4, #12]
 800d970:	0598      	lsls	r0, r3, #22
 800d972:	d402      	bmi.n	800d97a <_puts_r+0x36>
 800d974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d976:	f000 faf3 	bl	800df60 <__retarget_lock_acquire_recursive>
 800d97a:	89a3      	ldrh	r3, [r4, #12]
 800d97c:	0719      	lsls	r1, r3, #28
 800d97e:	d51d      	bpl.n	800d9bc <_puts_r+0x78>
 800d980:	6923      	ldr	r3, [r4, #16]
 800d982:	b1db      	cbz	r3, 800d9bc <_puts_r+0x78>
 800d984:	3e01      	subs	r6, #1
 800d986:	68a3      	ldr	r3, [r4, #8]
 800d988:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d98c:	3b01      	subs	r3, #1
 800d98e:	60a3      	str	r3, [r4, #8]
 800d990:	bb39      	cbnz	r1, 800d9e2 <_puts_r+0x9e>
 800d992:	2b00      	cmp	r3, #0
 800d994:	da38      	bge.n	800da08 <_puts_r+0xc4>
 800d996:	4622      	mov	r2, r4
 800d998:	210a      	movs	r1, #10
 800d99a:	4628      	mov	r0, r5
 800d99c:	f000 f868 	bl	800da70 <__swbuf_r>
 800d9a0:	3001      	adds	r0, #1
 800d9a2:	d011      	beq.n	800d9c8 <_puts_r+0x84>
 800d9a4:	250a      	movs	r5, #10
 800d9a6:	e011      	b.n	800d9cc <_puts_r+0x88>
 800d9a8:	4b1b      	ldr	r3, [pc, #108]	; (800da18 <_puts_r+0xd4>)
 800d9aa:	429c      	cmp	r4, r3
 800d9ac:	d101      	bne.n	800d9b2 <_puts_r+0x6e>
 800d9ae:	68ac      	ldr	r4, [r5, #8]
 800d9b0:	e7da      	b.n	800d968 <_puts_r+0x24>
 800d9b2:	4b1a      	ldr	r3, [pc, #104]	; (800da1c <_puts_r+0xd8>)
 800d9b4:	429c      	cmp	r4, r3
 800d9b6:	bf08      	it	eq
 800d9b8:	68ec      	ldreq	r4, [r5, #12]
 800d9ba:	e7d5      	b.n	800d968 <_puts_r+0x24>
 800d9bc:	4621      	mov	r1, r4
 800d9be:	4628      	mov	r0, r5
 800d9c0:	f000 f8a8 	bl	800db14 <__swsetup_r>
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	d0dd      	beq.n	800d984 <_puts_r+0x40>
 800d9c8:	f04f 35ff 	mov.w	r5, #4294967295
 800d9cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9ce:	07da      	lsls	r2, r3, #31
 800d9d0:	d405      	bmi.n	800d9de <_puts_r+0x9a>
 800d9d2:	89a3      	ldrh	r3, [r4, #12]
 800d9d4:	059b      	lsls	r3, r3, #22
 800d9d6:	d402      	bmi.n	800d9de <_puts_r+0x9a>
 800d9d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9da:	f000 fac2 	bl	800df62 <__retarget_lock_release_recursive>
 800d9de:	4628      	mov	r0, r5
 800d9e0:	bd70      	pop	{r4, r5, r6, pc}
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	da04      	bge.n	800d9f0 <_puts_r+0xac>
 800d9e6:	69a2      	ldr	r2, [r4, #24]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	dc06      	bgt.n	800d9fa <_puts_r+0xb6>
 800d9ec:	290a      	cmp	r1, #10
 800d9ee:	d004      	beq.n	800d9fa <_puts_r+0xb6>
 800d9f0:	6823      	ldr	r3, [r4, #0]
 800d9f2:	1c5a      	adds	r2, r3, #1
 800d9f4:	6022      	str	r2, [r4, #0]
 800d9f6:	7019      	strb	r1, [r3, #0]
 800d9f8:	e7c5      	b.n	800d986 <_puts_r+0x42>
 800d9fa:	4622      	mov	r2, r4
 800d9fc:	4628      	mov	r0, r5
 800d9fe:	f000 f837 	bl	800da70 <__swbuf_r>
 800da02:	3001      	adds	r0, #1
 800da04:	d1bf      	bne.n	800d986 <_puts_r+0x42>
 800da06:	e7df      	b.n	800d9c8 <_puts_r+0x84>
 800da08:	6823      	ldr	r3, [r4, #0]
 800da0a:	250a      	movs	r5, #10
 800da0c:	1c5a      	adds	r2, r3, #1
 800da0e:	6022      	str	r2, [r4, #0]
 800da10:	701d      	strb	r5, [r3, #0]
 800da12:	e7db      	b.n	800d9cc <_puts_r+0x88>
 800da14:	08010674 	.word	0x08010674
 800da18:	08010694 	.word	0x08010694
 800da1c:	08010654 	.word	0x08010654

0800da20 <puts>:
 800da20:	4b02      	ldr	r3, [pc, #8]	; (800da2c <puts+0xc>)
 800da22:	4601      	mov	r1, r0
 800da24:	6818      	ldr	r0, [r3, #0]
 800da26:	f7ff bf8d 	b.w	800d944 <_puts_r>
 800da2a:	bf00      	nop
 800da2c:	200000fc 	.word	0x200000fc

0800da30 <siprintf>:
 800da30:	b40e      	push	{r1, r2, r3}
 800da32:	b500      	push	{lr}
 800da34:	b09c      	sub	sp, #112	; 0x70
 800da36:	ab1d      	add	r3, sp, #116	; 0x74
 800da38:	9002      	str	r0, [sp, #8]
 800da3a:	9006      	str	r0, [sp, #24]
 800da3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da40:	4809      	ldr	r0, [pc, #36]	; (800da68 <siprintf+0x38>)
 800da42:	9107      	str	r1, [sp, #28]
 800da44:	9104      	str	r1, [sp, #16]
 800da46:	4909      	ldr	r1, [pc, #36]	; (800da6c <siprintf+0x3c>)
 800da48:	f853 2b04 	ldr.w	r2, [r3], #4
 800da4c:	9105      	str	r1, [sp, #20]
 800da4e:	6800      	ldr	r0, [r0, #0]
 800da50:	9301      	str	r3, [sp, #4]
 800da52:	a902      	add	r1, sp, #8
 800da54:	f000 fc28 	bl	800e2a8 <_svfiprintf_r>
 800da58:	9b02      	ldr	r3, [sp, #8]
 800da5a:	2200      	movs	r2, #0
 800da5c:	701a      	strb	r2, [r3, #0]
 800da5e:	b01c      	add	sp, #112	; 0x70
 800da60:	f85d eb04 	ldr.w	lr, [sp], #4
 800da64:	b003      	add	sp, #12
 800da66:	4770      	bx	lr
 800da68:	200000fc 	.word	0x200000fc
 800da6c:	ffff0208 	.word	0xffff0208

0800da70 <__swbuf_r>:
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	460e      	mov	r6, r1
 800da74:	4614      	mov	r4, r2
 800da76:	4605      	mov	r5, r0
 800da78:	b118      	cbz	r0, 800da82 <__swbuf_r+0x12>
 800da7a:	6983      	ldr	r3, [r0, #24]
 800da7c:	b90b      	cbnz	r3, 800da82 <__swbuf_r+0x12>
 800da7e:	f000 f9d1 	bl	800de24 <__sinit>
 800da82:	4b21      	ldr	r3, [pc, #132]	; (800db08 <__swbuf_r+0x98>)
 800da84:	429c      	cmp	r4, r3
 800da86:	d12b      	bne.n	800dae0 <__swbuf_r+0x70>
 800da88:	686c      	ldr	r4, [r5, #4]
 800da8a:	69a3      	ldr	r3, [r4, #24]
 800da8c:	60a3      	str	r3, [r4, #8]
 800da8e:	89a3      	ldrh	r3, [r4, #12]
 800da90:	071a      	lsls	r2, r3, #28
 800da92:	d52f      	bpl.n	800daf4 <__swbuf_r+0x84>
 800da94:	6923      	ldr	r3, [r4, #16]
 800da96:	b36b      	cbz	r3, 800daf4 <__swbuf_r+0x84>
 800da98:	6923      	ldr	r3, [r4, #16]
 800da9a:	6820      	ldr	r0, [r4, #0]
 800da9c:	1ac0      	subs	r0, r0, r3
 800da9e:	6963      	ldr	r3, [r4, #20]
 800daa0:	b2f6      	uxtb	r6, r6
 800daa2:	4283      	cmp	r3, r0
 800daa4:	4637      	mov	r7, r6
 800daa6:	dc04      	bgt.n	800dab2 <__swbuf_r+0x42>
 800daa8:	4621      	mov	r1, r4
 800daaa:	4628      	mov	r0, r5
 800daac:	f000 f926 	bl	800dcfc <_fflush_r>
 800dab0:	bb30      	cbnz	r0, 800db00 <__swbuf_r+0x90>
 800dab2:	68a3      	ldr	r3, [r4, #8]
 800dab4:	3b01      	subs	r3, #1
 800dab6:	60a3      	str	r3, [r4, #8]
 800dab8:	6823      	ldr	r3, [r4, #0]
 800daba:	1c5a      	adds	r2, r3, #1
 800dabc:	6022      	str	r2, [r4, #0]
 800dabe:	701e      	strb	r6, [r3, #0]
 800dac0:	6963      	ldr	r3, [r4, #20]
 800dac2:	3001      	adds	r0, #1
 800dac4:	4283      	cmp	r3, r0
 800dac6:	d004      	beq.n	800dad2 <__swbuf_r+0x62>
 800dac8:	89a3      	ldrh	r3, [r4, #12]
 800daca:	07db      	lsls	r3, r3, #31
 800dacc:	d506      	bpl.n	800dadc <__swbuf_r+0x6c>
 800dace:	2e0a      	cmp	r6, #10
 800dad0:	d104      	bne.n	800dadc <__swbuf_r+0x6c>
 800dad2:	4621      	mov	r1, r4
 800dad4:	4628      	mov	r0, r5
 800dad6:	f000 f911 	bl	800dcfc <_fflush_r>
 800dada:	b988      	cbnz	r0, 800db00 <__swbuf_r+0x90>
 800dadc:	4638      	mov	r0, r7
 800dade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dae0:	4b0a      	ldr	r3, [pc, #40]	; (800db0c <__swbuf_r+0x9c>)
 800dae2:	429c      	cmp	r4, r3
 800dae4:	d101      	bne.n	800daea <__swbuf_r+0x7a>
 800dae6:	68ac      	ldr	r4, [r5, #8]
 800dae8:	e7cf      	b.n	800da8a <__swbuf_r+0x1a>
 800daea:	4b09      	ldr	r3, [pc, #36]	; (800db10 <__swbuf_r+0xa0>)
 800daec:	429c      	cmp	r4, r3
 800daee:	bf08      	it	eq
 800daf0:	68ec      	ldreq	r4, [r5, #12]
 800daf2:	e7ca      	b.n	800da8a <__swbuf_r+0x1a>
 800daf4:	4621      	mov	r1, r4
 800daf6:	4628      	mov	r0, r5
 800daf8:	f000 f80c 	bl	800db14 <__swsetup_r>
 800dafc:	2800      	cmp	r0, #0
 800dafe:	d0cb      	beq.n	800da98 <__swbuf_r+0x28>
 800db00:	f04f 37ff 	mov.w	r7, #4294967295
 800db04:	e7ea      	b.n	800dadc <__swbuf_r+0x6c>
 800db06:	bf00      	nop
 800db08:	08010674 	.word	0x08010674
 800db0c:	08010694 	.word	0x08010694
 800db10:	08010654 	.word	0x08010654

0800db14 <__swsetup_r>:
 800db14:	4b32      	ldr	r3, [pc, #200]	; (800dbe0 <__swsetup_r+0xcc>)
 800db16:	b570      	push	{r4, r5, r6, lr}
 800db18:	681d      	ldr	r5, [r3, #0]
 800db1a:	4606      	mov	r6, r0
 800db1c:	460c      	mov	r4, r1
 800db1e:	b125      	cbz	r5, 800db2a <__swsetup_r+0x16>
 800db20:	69ab      	ldr	r3, [r5, #24]
 800db22:	b913      	cbnz	r3, 800db2a <__swsetup_r+0x16>
 800db24:	4628      	mov	r0, r5
 800db26:	f000 f97d 	bl	800de24 <__sinit>
 800db2a:	4b2e      	ldr	r3, [pc, #184]	; (800dbe4 <__swsetup_r+0xd0>)
 800db2c:	429c      	cmp	r4, r3
 800db2e:	d10f      	bne.n	800db50 <__swsetup_r+0x3c>
 800db30:	686c      	ldr	r4, [r5, #4]
 800db32:	89a3      	ldrh	r3, [r4, #12]
 800db34:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db38:	0719      	lsls	r1, r3, #28
 800db3a:	d42c      	bmi.n	800db96 <__swsetup_r+0x82>
 800db3c:	06dd      	lsls	r5, r3, #27
 800db3e:	d411      	bmi.n	800db64 <__swsetup_r+0x50>
 800db40:	2309      	movs	r3, #9
 800db42:	6033      	str	r3, [r6, #0]
 800db44:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db48:	81a3      	strh	r3, [r4, #12]
 800db4a:	f04f 30ff 	mov.w	r0, #4294967295
 800db4e:	e03e      	b.n	800dbce <__swsetup_r+0xba>
 800db50:	4b25      	ldr	r3, [pc, #148]	; (800dbe8 <__swsetup_r+0xd4>)
 800db52:	429c      	cmp	r4, r3
 800db54:	d101      	bne.n	800db5a <__swsetup_r+0x46>
 800db56:	68ac      	ldr	r4, [r5, #8]
 800db58:	e7eb      	b.n	800db32 <__swsetup_r+0x1e>
 800db5a:	4b24      	ldr	r3, [pc, #144]	; (800dbec <__swsetup_r+0xd8>)
 800db5c:	429c      	cmp	r4, r3
 800db5e:	bf08      	it	eq
 800db60:	68ec      	ldreq	r4, [r5, #12]
 800db62:	e7e6      	b.n	800db32 <__swsetup_r+0x1e>
 800db64:	0758      	lsls	r0, r3, #29
 800db66:	d512      	bpl.n	800db8e <__swsetup_r+0x7a>
 800db68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db6a:	b141      	cbz	r1, 800db7e <__swsetup_r+0x6a>
 800db6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db70:	4299      	cmp	r1, r3
 800db72:	d002      	beq.n	800db7a <__swsetup_r+0x66>
 800db74:	4630      	mov	r0, r6
 800db76:	f000 fa5b 	bl	800e030 <_free_r>
 800db7a:	2300      	movs	r3, #0
 800db7c:	6363      	str	r3, [r4, #52]	; 0x34
 800db7e:	89a3      	ldrh	r3, [r4, #12]
 800db80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800db84:	81a3      	strh	r3, [r4, #12]
 800db86:	2300      	movs	r3, #0
 800db88:	6063      	str	r3, [r4, #4]
 800db8a:	6923      	ldr	r3, [r4, #16]
 800db8c:	6023      	str	r3, [r4, #0]
 800db8e:	89a3      	ldrh	r3, [r4, #12]
 800db90:	f043 0308 	orr.w	r3, r3, #8
 800db94:	81a3      	strh	r3, [r4, #12]
 800db96:	6923      	ldr	r3, [r4, #16]
 800db98:	b94b      	cbnz	r3, 800dbae <__swsetup_r+0x9a>
 800db9a:	89a3      	ldrh	r3, [r4, #12]
 800db9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dba4:	d003      	beq.n	800dbae <__swsetup_r+0x9a>
 800dba6:	4621      	mov	r1, r4
 800dba8:	4630      	mov	r0, r6
 800dbaa:	f000 fa01 	bl	800dfb0 <__smakebuf_r>
 800dbae:	89a0      	ldrh	r0, [r4, #12]
 800dbb0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbb4:	f010 0301 	ands.w	r3, r0, #1
 800dbb8:	d00a      	beq.n	800dbd0 <__swsetup_r+0xbc>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	60a3      	str	r3, [r4, #8]
 800dbbe:	6963      	ldr	r3, [r4, #20]
 800dbc0:	425b      	negs	r3, r3
 800dbc2:	61a3      	str	r3, [r4, #24]
 800dbc4:	6923      	ldr	r3, [r4, #16]
 800dbc6:	b943      	cbnz	r3, 800dbda <__swsetup_r+0xc6>
 800dbc8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dbcc:	d1ba      	bne.n	800db44 <__swsetup_r+0x30>
 800dbce:	bd70      	pop	{r4, r5, r6, pc}
 800dbd0:	0781      	lsls	r1, r0, #30
 800dbd2:	bf58      	it	pl
 800dbd4:	6963      	ldrpl	r3, [r4, #20]
 800dbd6:	60a3      	str	r3, [r4, #8]
 800dbd8:	e7f4      	b.n	800dbc4 <__swsetup_r+0xb0>
 800dbda:	2000      	movs	r0, #0
 800dbdc:	e7f7      	b.n	800dbce <__swsetup_r+0xba>
 800dbde:	bf00      	nop
 800dbe0:	200000fc 	.word	0x200000fc
 800dbe4:	08010674 	.word	0x08010674
 800dbe8:	08010694 	.word	0x08010694
 800dbec:	08010654 	.word	0x08010654

0800dbf0 <__sflush_r>:
 800dbf0:	898a      	ldrh	r2, [r1, #12]
 800dbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf6:	4605      	mov	r5, r0
 800dbf8:	0710      	lsls	r0, r2, #28
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	d458      	bmi.n	800dcb0 <__sflush_r+0xc0>
 800dbfe:	684b      	ldr	r3, [r1, #4]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	dc05      	bgt.n	800dc10 <__sflush_r+0x20>
 800dc04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	dc02      	bgt.n	800dc10 <__sflush_r+0x20>
 800dc0a:	2000      	movs	r0, #0
 800dc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc12:	2e00      	cmp	r6, #0
 800dc14:	d0f9      	beq.n	800dc0a <__sflush_r+0x1a>
 800dc16:	2300      	movs	r3, #0
 800dc18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc1c:	682f      	ldr	r7, [r5, #0]
 800dc1e:	602b      	str	r3, [r5, #0]
 800dc20:	d032      	beq.n	800dc88 <__sflush_r+0x98>
 800dc22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc24:	89a3      	ldrh	r3, [r4, #12]
 800dc26:	075a      	lsls	r2, r3, #29
 800dc28:	d505      	bpl.n	800dc36 <__sflush_r+0x46>
 800dc2a:	6863      	ldr	r3, [r4, #4]
 800dc2c:	1ac0      	subs	r0, r0, r3
 800dc2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc30:	b10b      	cbz	r3, 800dc36 <__sflush_r+0x46>
 800dc32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc34:	1ac0      	subs	r0, r0, r3
 800dc36:	2300      	movs	r3, #0
 800dc38:	4602      	mov	r2, r0
 800dc3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc3c:	6a21      	ldr	r1, [r4, #32]
 800dc3e:	4628      	mov	r0, r5
 800dc40:	47b0      	blx	r6
 800dc42:	1c43      	adds	r3, r0, #1
 800dc44:	89a3      	ldrh	r3, [r4, #12]
 800dc46:	d106      	bne.n	800dc56 <__sflush_r+0x66>
 800dc48:	6829      	ldr	r1, [r5, #0]
 800dc4a:	291d      	cmp	r1, #29
 800dc4c:	d82c      	bhi.n	800dca8 <__sflush_r+0xb8>
 800dc4e:	4a2a      	ldr	r2, [pc, #168]	; (800dcf8 <__sflush_r+0x108>)
 800dc50:	40ca      	lsrs	r2, r1
 800dc52:	07d6      	lsls	r6, r2, #31
 800dc54:	d528      	bpl.n	800dca8 <__sflush_r+0xb8>
 800dc56:	2200      	movs	r2, #0
 800dc58:	6062      	str	r2, [r4, #4]
 800dc5a:	04d9      	lsls	r1, r3, #19
 800dc5c:	6922      	ldr	r2, [r4, #16]
 800dc5e:	6022      	str	r2, [r4, #0]
 800dc60:	d504      	bpl.n	800dc6c <__sflush_r+0x7c>
 800dc62:	1c42      	adds	r2, r0, #1
 800dc64:	d101      	bne.n	800dc6a <__sflush_r+0x7a>
 800dc66:	682b      	ldr	r3, [r5, #0]
 800dc68:	b903      	cbnz	r3, 800dc6c <__sflush_r+0x7c>
 800dc6a:	6560      	str	r0, [r4, #84]	; 0x54
 800dc6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc6e:	602f      	str	r7, [r5, #0]
 800dc70:	2900      	cmp	r1, #0
 800dc72:	d0ca      	beq.n	800dc0a <__sflush_r+0x1a>
 800dc74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc78:	4299      	cmp	r1, r3
 800dc7a:	d002      	beq.n	800dc82 <__sflush_r+0x92>
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f000 f9d7 	bl	800e030 <_free_r>
 800dc82:	2000      	movs	r0, #0
 800dc84:	6360      	str	r0, [r4, #52]	; 0x34
 800dc86:	e7c1      	b.n	800dc0c <__sflush_r+0x1c>
 800dc88:	6a21      	ldr	r1, [r4, #32]
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	4628      	mov	r0, r5
 800dc8e:	47b0      	blx	r6
 800dc90:	1c41      	adds	r1, r0, #1
 800dc92:	d1c7      	bne.n	800dc24 <__sflush_r+0x34>
 800dc94:	682b      	ldr	r3, [r5, #0]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d0c4      	beq.n	800dc24 <__sflush_r+0x34>
 800dc9a:	2b1d      	cmp	r3, #29
 800dc9c:	d001      	beq.n	800dca2 <__sflush_r+0xb2>
 800dc9e:	2b16      	cmp	r3, #22
 800dca0:	d101      	bne.n	800dca6 <__sflush_r+0xb6>
 800dca2:	602f      	str	r7, [r5, #0]
 800dca4:	e7b1      	b.n	800dc0a <__sflush_r+0x1a>
 800dca6:	89a3      	ldrh	r3, [r4, #12]
 800dca8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcac:	81a3      	strh	r3, [r4, #12]
 800dcae:	e7ad      	b.n	800dc0c <__sflush_r+0x1c>
 800dcb0:	690f      	ldr	r7, [r1, #16]
 800dcb2:	2f00      	cmp	r7, #0
 800dcb4:	d0a9      	beq.n	800dc0a <__sflush_r+0x1a>
 800dcb6:	0793      	lsls	r3, r2, #30
 800dcb8:	680e      	ldr	r6, [r1, #0]
 800dcba:	bf08      	it	eq
 800dcbc:	694b      	ldreq	r3, [r1, #20]
 800dcbe:	600f      	str	r7, [r1, #0]
 800dcc0:	bf18      	it	ne
 800dcc2:	2300      	movne	r3, #0
 800dcc4:	eba6 0807 	sub.w	r8, r6, r7
 800dcc8:	608b      	str	r3, [r1, #8]
 800dcca:	f1b8 0f00 	cmp.w	r8, #0
 800dcce:	dd9c      	ble.n	800dc0a <__sflush_r+0x1a>
 800dcd0:	6a21      	ldr	r1, [r4, #32]
 800dcd2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dcd4:	4643      	mov	r3, r8
 800dcd6:	463a      	mov	r2, r7
 800dcd8:	4628      	mov	r0, r5
 800dcda:	47b0      	blx	r6
 800dcdc:	2800      	cmp	r0, #0
 800dcde:	dc06      	bgt.n	800dcee <__sflush_r+0xfe>
 800dce0:	89a3      	ldrh	r3, [r4, #12]
 800dce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dce6:	81a3      	strh	r3, [r4, #12]
 800dce8:	f04f 30ff 	mov.w	r0, #4294967295
 800dcec:	e78e      	b.n	800dc0c <__sflush_r+0x1c>
 800dcee:	4407      	add	r7, r0
 800dcf0:	eba8 0800 	sub.w	r8, r8, r0
 800dcf4:	e7e9      	b.n	800dcca <__sflush_r+0xda>
 800dcf6:	bf00      	nop
 800dcf8:	20400001 	.word	0x20400001

0800dcfc <_fflush_r>:
 800dcfc:	b538      	push	{r3, r4, r5, lr}
 800dcfe:	690b      	ldr	r3, [r1, #16]
 800dd00:	4605      	mov	r5, r0
 800dd02:	460c      	mov	r4, r1
 800dd04:	b913      	cbnz	r3, 800dd0c <_fflush_r+0x10>
 800dd06:	2500      	movs	r5, #0
 800dd08:	4628      	mov	r0, r5
 800dd0a:	bd38      	pop	{r3, r4, r5, pc}
 800dd0c:	b118      	cbz	r0, 800dd16 <_fflush_r+0x1a>
 800dd0e:	6983      	ldr	r3, [r0, #24]
 800dd10:	b90b      	cbnz	r3, 800dd16 <_fflush_r+0x1a>
 800dd12:	f000 f887 	bl	800de24 <__sinit>
 800dd16:	4b14      	ldr	r3, [pc, #80]	; (800dd68 <_fflush_r+0x6c>)
 800dd18:	429c      	cmp	r4, r3
 800dd1a:	d11b      	bne.n	800dd54 <_fflush_r+0x58>
 800dd1c:	686c      	ldr	r4, [r5, #4]
 800dd1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d0ef      	beq.n	800dd06 <_fflush_r+0xa>
 800dd26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd28:	07d0      	lsls	r0, r2, #31
 800dd2a:	d404      	bmi.n	800dd36 <_fflush_r+0x3a>
 800dd2c:	0599      	lsls	r1, r3, #22
 800dd2e:	d402      	bmi.n	800dd36 <_fflush_r+0x3a>
 800dd30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd32:	f000 f915 	bl	800df60 <__retarget_lock_acquire_recursive>
 800dd36:	4628      	mov	r0, r5
 800dd38:	4621      	mov	r1, r4
 800dd3a:	f7ff ff59 	bl	800dbf0 <__sflush_r>
 800dd3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd40:	07da      	lsls	r2, r3, #31
 800dd42:	4605      	mov	r5, r0
 800dd44:	d4e0      	bmi.n	800dd08 <_fflush_r+0xc>
 800dd46:	89a3      	ldrh	r3, [r4, #12]
 800dd48:	059b      	lsls	r3, r3, #22
 800dd4a:	d4dd      	bmi.n	800dd08 <_fflush_r+0xc>
 800dd4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd4e:	f000 f908 	bl	800df62 <__retarget_lock_release_recursive>
 800dd52:	e7d9      	b.n	800dd08 <_fflush_r+0xc>
 800dd54:	4b05      	ldr	r3, [pc, #20]	; (800dd6c <_fflush_r+0x70>)
 800dd56:	429c      	cmp	r4, r3
 800dd58:	d101      	bne.n	800dd5e <_fflush_r+0x62>
 800dd5a:	68ac      	ldr	r4, [r5, #8]
 800dd5c:	e7df      	b.n	800dd1e <_fflush_r+0x22>
 800dd5e:	4b04      	ldr	r3, [pc, #16]	; (800dd70 <_fflush_r+0x74>)
 800dd60:	429c      	cmp	r4, r3
 800dd62:	bf08      	it	eq
 800dd64:	68ec      	ldreq	r4, [r5, #12]
 800dd66:	e7da      	b.n	800dd1e <_fflush_r+0x22>
 800dd68:	08010674 	.word	0x08010674
 800dd6c:	08010694 	.word	0x08010694
 800dd70:	08010654 	.word	0x08010654

0800dd74 <std>:
 800dd74:	2300      	movs	r3, #0
 800dd76:	b510      	push	{r4, lr}
 800dd78:	4604      	mov	r4, r0
 800dd7a:	e9c0 3300 	strd	r3, r3, [r0]
 800dd7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dd82:	6083      	str	r3, [r0, #8]
 800dd84:	8181      	strh	r1, [r0, #12]
 800dd86:	6643      	str	r3, [r0, #100]	; 0x64
 800dd88:	81c2      	strh	r2, [r0, #14]
 800dd8a:	6183      	str	r3, [r0, #24]
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	2208      	movs	r2, #8
 800dd90:	305c      	adds	r0, #92	; 0x5c
 800dd92:	f7ff fdb7 	bl	800d904 <memset>
 800dd96:	4b05      	ldr	r3, [pc, #20]	; (800ddac <std+0x38>)
 800dd98:	6263      	str	r3, [r4, #36]	; 0x24
 800dd9a:	4b05      	ldr	r3, [pc, #20]	; (800ddb0 <std+0x3c>)
 800dd9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800dd9e:	4b05      	ldr	r3, [pc, #20]	; (800ddb4 <std+0x40>)
 800dda0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dda2:	4b05      	ldr	r3, [pc, #20]	; (800ddb8 <std+0x44>)
 800dda4:	6224      	str	r4, [r4, #32]
 800dda6:	6323      	str	r3, [r4, #48]	; 0x30
 800dda8:	bd10      	pop	{r4, pc}
 800ddaa:	bf00      	nop
 800ddac:	0800eaa5 	.word	0x0800eaa5
 800ddb0:	0800eac7 	.word	0x0800eac7
 800ddb4:	0800eaff 	.word	0x0800eaff
 800ddb8:	0800eb23 	.word	0x0800eb23

0800ddbc <_cleanup_r>:
 800ddbc:	4901      	ldr	r1, [pc, #4]	; (800ddc4 <_cleanup_r+0x8>)
 800ddbe:	f000 b8af 	b.w	800df20 <_fwalk_reent>
 800ddc2:	bf00      	nop
 800ddc4:	0800dcfd 	.word	0x0800dcfd

0800ddc8 <__sfmoreglue>:
 800ddc8:	b570      	push	{r4, r5, r6, lr}
 800ddca:	2268      	movs	r2, #104	; 0x68
 800ddcc:	1e4d      	subs	r5, r1, #1
 800ddce:	4355      	muls	r5, r2
 800ddd0:	460e      	mov	r6, r1
 800ddd2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ddd6:	f000 f997 	bl	800e108 <_malloc_r>
 800ddda:	4604      	mov	r4, r0
 800dddc:	b140      	cbz	r0, 800ddf0 <__sfmoreglue+0x28>
 800ddde:	2100      	movs	r1, #0
 800dde0:	e9c0 1600 	strd	r1, r6, [r0]
 800dde4:	300c      	adds	r0, #12
 800dde6:	60a0      	str	r0, [r4, #8]
 800dde8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ddec:	f7ff fd8a 	bl	800d904 <memset>
 800ddf0:	4620      	mov	r0, r4
 800ddf2:	bd70      	pop	{r4, r5, r6, pc}

0800ddf4 <__sfp_lock_acquire>:
 800ddf4:	4801      	ldr	r0, [pc, #4]	; (800ddfc <__sfp_lock_acquire+0x8>)
 800ddf6:	f000 b8b3 	b.w	800df60 <__retarget_lock_acquire_recursive>
 800ddfa:	bf00      	nop
 800ddfc:	20006109 	.word	0x20006109

0800de00 <__sfp_lock_release>:
 800de00:	4801      	ldr	r0, [pc, #4]	; (800de08 <__sfp_lock_release+0x8>)
 800de02:	f000 b8ae 	b.w	800df62 <__retarget_lock_release_recursive>
 800de06:	bf00      	nop
 800de08:	20006109 	.word	0x20006109

0800de0c <__sinit_lock_acquire>:
 800de0c:	4801      	ldr	r0, [pc, #4]	; (800de14 <__sinit_lock_acquire+0x8>)
 800de0e:	f000 b8a7 	b.w	800df60 <__retarget_lock_acquire_recursive>
 800de12:	bf00      	nop
 800de14:	2000610a 	.word	0x2000610a

0800de18 <__sinit_lock_release>:
 800de18:	4801      	ldr	r0, [pc, #4]	; (800de20 <__sinit_lock_release+0x8>)
 800de1a:	f000 b8a2 	b.w	800df62 <__retarget_lock_release_recursive>
 800de1e:	bf00      	nop
 800de20:	2000610a 	.word	0x2000610a

0800de24 <__sinit>:
 800de24:	b510      	push	{r4, lr}
 800de26:	4604      	mov	r4, r0
 800de28:	f7ff fff0 	bl	800de0c <__sinit_lock_acquire>
 800de2c:	69a3      	ldr	r3, [r4, #24]
 800de2e:	b11b      	cbz	r3, 800de38 <__sinit+0x14>
 800de30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de34:	f7ff bff0 	b.w	800de18 <__sinit_lock_release>
 800de38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de3c:	6523      	str	r3, [r4, #80]	; 0x50
 800de3e:	4b13      	ldr	r3, [pc, #76]	; (800de8c <__sinit+0x68>)
 800de40:	4a13      	ldr	r2, [pc, #76]	; (800de90 <__sinit+0x6c>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	62a2      	str	r2, [r4, #40]	; 0x28
 800de46:	42a3      	cmp	r3, r4
 800de48:	bf04      	itt	eq
 800de4a:	2301      	moveq	r3, #1
 800de4c:	61a3      	streq	r3, [r4, #24]
 800de4e:	4620      	mov	r0, r4
 800de50:	f000 f820 	bl	800de94 <__sfp>
 800de54:	6060      	str	r0, [r4, #4]
 800de56:	4620      	mov	r0, r4
 800de58:	f000 f81c 	bl	800de94 <__sfp>
 800de5c:	60a0      	str	r0, [r4, #8]
 800de5e:	4620      	mov	r0, r4
 800de60:	f000 f818 	bl	800de94 <__sfp>
 800de64:	2200      	movs	r2, #0
 800de66:	60e0      	str	r0, [r4, #12]
 800de68:	2104      	movs	r1, #4
 800de6a:	6860      	ldr	r0, [r4, #4]
 800de6c:	f7ff ff82 	bl	800dd74 <std>
 800de70:	68a0      	ldr	r0, [r4, #8]
 800de72:	2201      	movs	r2, #1
 800de74:	2109      	movs	r1, #9
 800de76:	f7ff ff7d 	bl	800dd74 <std>
 800de7a:	68e0      	ldr	r0, [r4, #12]
 800de7c:	2202      	movs	r2, #2
 800de7e:	2112      	movs	r1, #18
 800de80:	f7ff ff78 	bl	800dd74 <std>
 800de84:	2301      	movs	r3, #1
 800de86:	61a3      	str	r3, [r4, #24]
 800de88:	e7d2      	b.n	800de30 <__sinit+0xc>
 800de8a:	bf00      	nop
 800de8c:	08010650 	.word	0x08010650
 800de90:	0800ddbd 	.word	0x0800ddbd

0800de94 <__sfp>:
 800de94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de96:	4607      	mov	r7, r0
 800de98:	f7ff ffac 	bl	800ddf4 <__sfp_lock_acquire>
 800de9c:	4b1e      	ldr	r3, [pc, #120]	; (800df18 <__sfp+0x84>)
 800de9e:	681e      	ldr	r6, [r3, #0]
 800dea0:	69b3      	ldr	r3, [r6, #24]
 800dea2:	b913      	cbnz	r3, 800deaa <__sfp+0x16>
 800dea4:	4630      	mov	r0, r6
 800dea6:	f7ff ffbd 	bl	800de24 <__sinit>
 800deaa:	3648      	adds	r6, #72	; 0x48
 800deac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800deb0:	3b01      	subs	r3, #1
 800deb2:	d503      	bpl.n	800debc <__sfp+0x28>
 800deb4:	6833      	ldr	r3, [r6, #0]
 800deb6:	b30b      	cbz	r3, 800defc <__sfp+0x68>
 800deb8:	6836      	ldr	r6, [r6, #0]
 800deba:	e7f7      	b.n	800deac <__sfp+0x18>
 800debc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dec0:	b9d5      	cbnz	r5, 800def8 <__sfp+0x64>
 800dec2:	4b16      	ldr	r3, [pc, #88]	; (800df1c <__sfp+0x88>)
 800dec4:	60e3      	str	r3, [r4, #12]
 800dec6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800deca:	6665      	str	r5, [r4, #100]	; 0x64
 800decc:	f000 f847 	bl	800df5e <__retarget_lock_init_recursive>
 800ded0:	f7ff ff96 	bl	800de00 <__sfp_lock_release>
 800ded4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ded8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dedc:	6025      	str	r5, [r4, #0]
 800dede:	61a5      	str	r5, [r4, #24]
 800dee0:	2208      	movs	r2, #8
 800dee2:	4629      	mov	r1, r5
 800dee4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dee8:	f7ff fd0c 	bl	800d904 <memset>
 800deec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800def0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800def4:	4620      	mov	r0, r4
 800def6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800def8:	3468      	adds	r4, #104	; 0x68
 800defa:	e7d9      	b.n	800deb0 <__sfp+0x1c>
 800defc:	2104      	movs	r1, #4
 800defe:	4638      	mov	r0, r7
 800df00:	f7ff ff62 	bl	800ddc8 <__sfmoreglue>
 800df04:	4604      	mov	r4, r0
 800df06:	6030      	str	r0, [r6, #0]
 800df08:	2800      	cmp	r0, #0
 800df0a:	d1d5      	bne.n	800deb8 <__sfp+0x24>
 800df0c:	f7ff ff78 	bl	800de00 <__sfp_lock_release>
 800df10:	230c      	movs	r3, #12
 800df12:	603b      	str	r3, [r7, #0]
 800df14:	e7ee      	b.n	800def4 <__sfp+0x60>
 800df16:	bf00      	nop
 800df18:	08010650 	.word	0x08010650
 800df1c:	ffff0001 	.word	0xffff0001

0800df20 <_fwalk_reent>:
 800df20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df24:	4606      	mov	r6, r0
 800df26:	4688      	mov	r8, r1
 800df28:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df2c:	2700      	movs	r7, #0
 800df2e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df32:	f1b9 0901 	subs.w	r9, r9, #1
 800df36:	d505      	bpl.n	800df44 <_fwalk_reent+0x24>
 800df38:	6824      	ldr	r4, [r4, #0]
 800df3a:	2c00      	cmp	r4, #0
 800df3c:	d1f7      	bne.n	800df2e <_fwalk_reent+0xe>
 800df3e:	4638      	mov	r0, r7
 800df40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df44:	89ab      	ldrh	r3, [r5, #12]
 800df46:	2b01      	cmp	r3, #1
 800df48:	d907      	bls.n	800df5a <_fwalk_reent+0x3a>
 800df4a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df4e:	3301      	adds	r3, #1
 800df50:	d003      	beq.n	800df5a <_fwalk_reent+0x3a>
 800df52:	4629      	mov	r1, r5
 800df54:	4630      	mov	r0, r6
 800df56:	47c0      	blx	r8
 800df58:	4307      	orrs	r7, r0
 800df5a:	3568      	adds	r5, #104	; 0x68
 800df5c:	e7e9      	b.n	800df32 <_fwalk_reent+0x12>

0800df5e <__retarget_lock_init_recursive>:
 800df5e:	4770      	bx	lr

0800df60 <__retarget_lock_acquire_recursive>:
 800df60:	4770      	bx	lr

0800df62 <__retarget_lock_release_recursive>:
 800df62:	4770      	bx	lr

0800df64 <__swhatbuf_r>:
 800df64:	b570      	push	{r4, r5, r6, lr}
 800df66:	460e      	mov	r6, r1
 800df68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df6c:	2900      	cmp	r1, #0
 800df6e:	b096      	sub	sp, #88	; 0x58
 800df70:	4614      	mov	r4, r2
 800df72:	461d      	mov	r5, r3
 800df74:	da08      	bge.n	800df88 <__swhatbuf_r+0x24>
 800df76:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800df7a:	2200      	movs	r2, #0
 800df7c:	602a      	str	r2, [r5, #0]
 800df7e:	061a      	lsls	r2, r3, #24
 800df80:	d410      	bmi.n	800dfa4 <__swhatbuf_r+0x40>
 800df82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df86:	e00e      	b.n	800dfa6 <__swhatbuf_r+0x42>
 800df88:	466a      	mov	r2, sp
 800df8a:	f000 fdf1 	bl	800eb70 <_fstat_r>
 800df8e:	2800      	cmp	r0, #0
 800df90:	dbf1      	blt.n	800df76 <__swhatbuf_r+0x12>
 800df92:	9a01      	ldr	r2, [sp, #4]
 800df94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800df98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800df9c:	425a      	negs	r2, r3
 800df9e:	415a      	adcs	r2, r3
 800dfa0:	602a      	str	r2, [r5, #0]
 800dfa2:	e7ee      	b.n	800df82 <__swhatbuf_r+0x1e>
 800dfa4:	2340      	movs	r3, #64	; 0x40
 800dfa6:	2000      	movs	r0, #0
 800dfa8:	6023      	str	r3, [r4, #0]
 800dfaa:	b016      	add	sp, #88	; 0x58
 800dfac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dfb0 <__smakebuf_r>:
 800dfb0:	898b      	ldrh	r3, [r1, #12]
 800dfb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dfb4:	079d      	lsls	r5, r3, #30
 800dfb6:	4606      	mov	r6, r0
 800dfb8:	460c      	mov	r4, r1
 800dfba:	d507      	bpl.n	800dfcc <__smakebuf_r+0x1c>
 800dfbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dfc0:	6023      	str	r3, [r4, #0]
 800dfc2:	6123      	str	r3, [r4, #16]
 800dfc4:	2301      	movs	r3, #1
 800dfc6:	6163      	str	r3, [r4, #20]
 800dfc8:	b002      	add	sp, #8
 800dfca:	bd70      	pop	{r4, r5, r6, pc}
 800dfcc:	ab01      	add	r3, sp, #4
 800dfce:	466a      	mov	r2, sp
 800dfd0:	f7ff ffc8 	bl	800df64 <__swhatbuf_r>
 800dfd4:	9900      	ldr	r1, [sp, #0]
 800dfd6:	4605      	mov	r5, r0
 800dfd8:	4630      	mov	r0, r6
 800dfda:	f000 f895 	bl	800e108 <_malloc_r>
 800dfde:	b948      	cbnz	r0, 800dff4 <__smakebuf_r+0x44>
 800dfe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfe4:	059a      	lsls	r2, r3, #22
 800dfe6:	d4ef      	bmi.n	800dfc8 <__smakebuf_r+0x18>
 800dfe8:	f023 0303 	bic.w	r3, r3, #3
 800dfec:	f043 0302 	orr.w	r3, r3, #2
 800dff0:	81a3      	strh	r3, [r4, #12]
 800dff2:	e7e3      	b.n	800dfbc <__smakebuf_r+0xc>
 800dff4:	4b0d      	ldr	r3, [pc, #52]	; (800e02c <__smakebuf_r+0x7c>)
 800dff6:	62b3      	str	r3, [r6, #40]	; 0x28
 800dff8:	89a3      	ldrh	r3, [r4, #12]
 800dffa:	6020      	str	r0, [r4, #0]
 800dffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e000:	81a3      	strh	r3, [r4, #12]
 800e002:	9b00      	ldr	r3, [sp, #0]
 800e004:	6163      	str	r3, [r4, #20]
 800e006:	9b01      	ldr	r3, [sp, #4]
 800e008:	6120      	str	r0, [r4, #16]
 800e00a:	b15b      	cbz	r3, 800e024 <__smakebuf_r+0x74>
 800e00c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e010:	4630      	mov	r0, r6
 800e012:	f000 fdbf 	bl	800eb94 <_isatty_r>
 800e016:	b128      	cbz	r0, 800e024 <__smakebuf_r+0x74>
 800e018:	89a3      	ldrh	r3, [r4, #12]
 800e01a:	f023 0303 	bic.w	r3, r3, #3
 800e01e:	f043 0301 	orr.w	r3, r3, #1
 800e022:	81a3      	strh	r3, [r4, #12]
 800e024:	89a0      	ldrh	r0, [r4, #12]
 800e026:	4305      	orrs	r5, r0
 800e028:	81a5      	strh	r5, [r4, #12]
 800e02a:	e7cd      	b.n	800dfc8 <__smakebuf_r+0x18>
 800e02c:	0800ddbd 	.word	0x0800ddbd

0800e030 <_free_r>:
 800e030:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e032:	2900      	cmp	r1, #0
 800e034:	d044      	beq.n	800e0c0 <_free_r+0x90>
 800e036:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e03a:	9001      	str	r0, [sp, #4]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f1a1 0404 	sub.w	r4, r1, #4
 800e042:	bfb8      	it	lt
 800e044:	18e4      	addlt	r4, r4, r3
 800e046:	f000 fde1 	bl	800ec0c <__malloc_lock>
 800e04a:	4a1e      	ldr	r2, [pc, #120]	; (800e0c4 <_free_r+0x94>)
 800e04c:	9801      	ldr	r0, [sp, #4]
 800e04e:	6813      	ldr	r3, [r2, #0]
 800e050:	b933      	cbnz	r3, 800e060 <_free_r+0x30>
 800e052:	6063      	str	r3, [r4, #4]
 800e054:	6014      	str	r4, [r2, #0]
 800e056:	b003      	add	sp, #12
 800e058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e05c:	f000 bddc 	b.w	800ec18 <__malloc_unlock>
 800e060:	42a3      	cmp	r3, r4
 800e062:	d908      	bls.n	800e076 <_free_r+0x46>
 800e064:	6825      	ldr	r5, [r4, #0]
 800e066:	1961      	adds	r1, r4, r5
 800e068:	428b      	cmp	r3, r1
 800e06a:	bf01      	itttt	eq
 800e06c:	6819      	ldreq	r1, [r3, #0]
 800e06e:	685b      	ldreq	r3, [r3, #4]
 800e070:	1949      	addeq	r1, r1, r5
 800e072:	6021      	streq	r1, [r4, #0]
 800e074:	e7ed      	b.n	800e052 <_free_r+0x22>
 800e076:	461a      	mov	r2, r3
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	b10b      	cbz	r3, 800e080 <_free_r+0x50>
 800e07c:	42a3      	cmp	r3, r4
 800e07e:	d9fa      	bls.n	800e076 <_free_r+0x46>
 800e080:	6811      	ldr	r1, [r2, #0]
 800e082:	1855      	adds	r5, r2, r1
 800e084:	42a5      	cmp	r5, r4
 800e086:	d10b      	bne.n	800e0a0 <_free_r+0x70>
 800e088:	6824      	ldr	r4, [r4, #0]
 800e08a:	4421      	add	r1, r4
 800e08c:	1854      	adds	r4, r2, r1
 800e08e:	42a3      	cmp	r3, r4
 800e090:	6011      	str	r1, [r2, #0]
 800e092:	d1e0      	bne.n	800e056 <_free_r+0x26>
 800e094:	681c      	ldr	r4, [r3, #0]
 800e096:	685b      	ldr	r3, [r3, #4]
 800e098:	6053      	str	r3, [r2, #4]
 800e09a:	4421      	add	r1, r4
 800e09c:	6011      	str	r1, [r2, #0]
 800e09e:	e7da      	b.n	800e056 <_free_r+0x26>
 800e0a0:	d902      	bls.n	800e0a8 <_free_r+0x78>
 800e0a2:	230c      	movs	r3, #12
 800e0a4:	6003      	str	r3, [r0, #0]
 800e0a6:	e7d6      	b.n	800e056 <_free_r+0x26>
 800e0a8:	6825      	ldr	r5, [r4, #0]
 800e0aa:	1961      	adds	r1, r4, r5
 800e0ac:	428b      	cmp	r3, r1
 800e0ae:	bf04      	itt	eq
 800e0b0:	6819      	ldreq	r1, [r3, #0]
 800e0b2:	685b      	ldreq	r3, [r3, #4]
 800e0b4:	6063      	str	r3, [r4, #4]
 800e0b6:	bf04      	itt	eq
 800e0b8:	1949      	addeq	r1, r1, r5
 800e0ba:	6021      	streq	r1, [r4, #0]
 800e0bc:	6054      	str	r4, [r2, #4]
 800e0be:	e7ca      	b.n	800e056 <_free_r+0x26>
 800e0c0:	b003      	add	sp, #12
 800e0c2:	bd30      	pop	{r4, r5, pc}
 800e0c4:	2000610c 	.word	0x2000610c

0800e0c8 <sbrk_aligned>:
 800e0c8:	b570      	push	{r4, r5, r6, lr}
 800e0ca:	4e0e      	ldr	r6, [pc, #56]	; (800e104 <sbrk_aligned+0x3c>)
 800e0cc:	460c      	mov	r4, r1
 800e0ce:	6831      	ldr	r1, [r6, #0]
 800e0d0:	4605      	mov	r5, r0
 800e0d2:	b911      	cbnz	r1, 800e0da <sbrk_aligned+0x12>
 800e0d4:	f000 fcd6 	bl	800ea84 <_sbrk_r>
 800e0d8:	6030      	str	r0, [r6, #0]
 800e0da:	4621      	mov	r1, r4
 800e0dc:	4628      	mov	r0, r5
 800e0de:	f000 fcd1 	bl	800ea84 <_sbrk_r>
 800e0e2:	1c43      	adds	r3, r0, #1
 800e0e4:	d00a      	beq.n	800e0fc <sbrk_aligned+0x34>
 800e0e6:	1cc4      	adds	r4, r0, #3
 800e0e8:	f024 0403 	bic.w	r4, r4, #3
 800e0ec:	42a0      	cmp	r0, r4
 800e0ee:	d007      	beq.n	800e100 <sbrk_aligned+0x38>
 800e0f0:	1a21      	subs	r1, r4, r0
 800e0f2:	4628      	mov	r0, r5
 800e0f4:	f000 fcc6 	bl	800ea84 <_sbrk_r>
 800e0f8:	3001      	adds	r0, #1
 800e0fa:	d101      	bne.n	800e100 <sbrk_aligned+0x38>
 800e0fc:	f04f 34ff 	mov.w	r4, #4294967295
 800e100:	4620      	mov	r0, r4
 800e102:	bd70      	pop	{r4, r5, r6, pc}
 800e104:	20006110 	.word	0x20006110

0800e108 <_malloc_r>:
 800e108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e10c:	1ccd      	adds	r5, r1, #3
 800e10e:	f025 0503 	bic.w	r5, r5, #3
 800e112:	3508      	adds	r5, #8
 800e114:	2d0c      	cmp	r5, #12
 800e116:	bf38      	it	cc
 800e118:	250c      	movcc	r5, #12
 800e11a:	2d00      	cmp	r5, #0
 800e11c:	4607      	mov	r7, r0
 800e11e:	db01      	blt.n	800e124 <_malloc_r+0x1c>
 800e120:	42a9      	cmp	r1, r5
 800e122:	d905      	bls.n	800e130 <_malloc_r+0x28>
 800e124:	230c      	movs	r3, #12
 800e126:	603b      	str	r3, [r7, #0]
 800e128:	2600      	movs	r6, #0
 800e12a:	4630      	mov	r0, r6
 800e12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e130:	4e2e      	ldr	r6, [pc, #184]	; (800e1ec <_malloc_r+0xe4>)
 800e132:	f000 fd6b 	bl	800ec0c <__malloc_lock>
 800e136:	6833      	ldr	r3, [r6, #0]
 800e138:	461c      	mov	r4, r3
 800e13a:	bb34      	cbnz	r4, 800e18a <_malloc_r+0x82>
 800e13c:	4629      	mov	r1, r5
 800e13e:	4638      	mov	r0, r7
 800e140:	f7ff ffc2 	bl	800e0c8 <sbrk_aligned>
 800e144:	1c43      	adds	r3, r0, #1
 800e146:	4604      	mov	r4, r0
 800e148:	d14d      	bne.n	800e1e6 <_malloc_r+0xde>
 800e14a:	6834      	ldr	r4, [r6, #0]
 800e14c:	4626      	mov	r6, r4
 800e14e:	2e00      	cmp	r6, #0
 800e150:	d140      	bne.n	800e1d4 <_malloc_r+0xcc>
 800e152:	6823      	ldr	r3, [r4, #0]
 800e154:	4631      	mov	r1, r6
 800e156:	4638      	mov	r0, r7
 800e158:	eb04 0803 	add.w	r8, r4, r3
 800e15c:	f000 fc92 	bl	800ea84 <_sbrk_r>
 800e160:	4580      	cmp	r8, r0
 800e162:	d13a      	bne.n	800e1da <_malloc_r+0xd2>
 800e164:	6821      	ldr	r1, [r4, #0]
 800e166:	3503      	adds	r5, #3
 800e168:	1a6d      	subs	r5, r5, r1
 800e16a:	f025 0503 	bic.w	r5, r5, #3
 800e16e:	3508      	adds	r5, #8
 800e170:	2d0c      	cmp	r5, #12
 800e172:	bf38      	it	cc
 800e174:	250c      	movcc	r5, #12
 800e176:	4629      	mov	r1, r5
 800e178:	4638      	mov	r0, r7
 800e17a:	f7ff ffa5 	bl	800e0c8 <sbrk_aligned>
 800e17e:	3001      	adds	r0, #1
 800e180:	d02b      	beq.n	800e1da <_malloc_r+0xd2>
 800e182:	6823      	ldr	r3, [r4, #0]
 800e184:	442b      	add	r3, r5
 800e186:	6023      	str	r3, [r4, #0]
 800e188:	e00e      	b.n	800e1a8 <_malloc_r+0xa0>
 800e18a:	6822      	ldr	r2, [r4, #0]
 800e18c:	1b52      	subs	r2, r2, r5
 800e18e:	d41e      	bmi.n	800e1ce <_malloc_r+0xc6>
 800e190:	2a0b      	cmp	r2, #11
 800e192:	d916      	bls.n	800e1c2 <_malloc_r+0xba>
 800e194:	1961      	adds	r1, r4, r5
 800e196:	42a3      	cmp	r3, r4
 800e198:	6025      	str	r5, [r4, #0]
 800e19a:	bf18      	it	ne
 800e19c:	6059      	strne	r1, [r3, #4]
 800e19e:	6863      	ldr	r3, [r4, #4]
 800e1a0:	bf08      	it	eq
 800e1a2:	6031      	streq	r1, [r6, #0]
 800e1a4:	5162      	str	r2, [r4, r5]
 800e1a6:	604b      	str	r3, [r1, #4]
 800e1a8:	4638      	mov	r0, r7
 800e1aa:	f104 060b 	add.w	r6, r4, #11
 800e1ae:	f000 fd33 	bl	800ec18 <__malloc_unlock>
 800e1b2:	f026 0607 	bic.w	r6, r6, #7
 800e1b6:	1d23      	adds	r3, r4, #4
 800e1b8:	1af2      	subs	r2, r6, r3
 800e1ba:	d0b6      	beq.n	800e12a <_malloc_r+0x22>
 800e1bc:	1b9b      	subs	r3, r3, r6
 800e1be:	50a3      	str	r3, [r4, r2]
 800e1c0:	e7b3      	b.n	800e12a <_malloc_r+0x22>
 800e1c2:	6862      	ldr	r2, [r4, #4]
 800e1c4:	42a3      	cmp	r3, r4
 800e1c6:	bf0c      	ite	eq
 800e1c8:	6032      	streq	r2, [r6, #0]
 800e1ca:	605a      	strne	r2, [r3, #4]
 800e1cc:	e7ec      	b.n	800e1a8 <_malloc_r+0xa0>
 800e1ce:	4623      	mov	r3, r4
 800e1d0:	6864      	ldr	r4, [r4, #4]
 800e1d2:	e7b2      	b.n	800e13a <_malloc_r+0x32>
 800e1d4:	4634      	mov	r4, r6
 800e1d6:	6876      	ldr	r6, [r6, #4]
 800e1d8:	e7b9      	b.n	800e14e <_malloc_r+0x46>
 800e1da:	230c      	movs	r3, #12
 800e1dc:	603b      	str	r3, [r7, #0]
 800e1de:	4638      	mov	r0, r7
 800e1e0:	f000 fd1a 	bl	800ec18 <__malloc_unlock>
 800e1e4:	e7a1      	b.n	800e12a <_malloc_r+0x22>
 800e1e6:	6025      	str	r5, [r4, #0]
 800e1e8:	e7de      	b.n	800e1a8 <_malloc_r+0xa0>
 800e1ea:	bf00      	nop
 800e1ec:	2000610c 	.word	0x2000610c

0800e1f0 <__ssputs_r>:
 800e1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1f4:	688e      	ldr	r6, [r1, #8]
 800e1f6:	429e      	cmp	r6, r3
 800e1f8:	4682      	mov	sl, r0
 800e1fa:	460c      	mov	r4, r1
 800e1fc:	4690      	mov	r8, r2
 800e1fe:	461f      	mov	r7, r3
 800e200:	d838      	bhi.n	800e274 <__ssputs_r+0x84>
 800e202:	898a      	ldrh	r2, [r1, #12]
 800e204:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e208:	d032      	beq.n	800e270 <__ssputs_r+0x80>
 800e20a:	6825      	ldr	r5, [r4, #0]
 800e20c:	6909      	ldr	r1, [r1, #16]
 800e20e:	eba5 0901 	sub.w	r9, r5, r1
 800e212:	6965      	ldr	r5, [r4, #20]
 800e214:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e218:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e21c:	3301      	adds	r3, #1
 800e21e:	444b      	add	r3, r9
 800e220:	106d      	asrs	r5, r5, #1
 800e222:	429d      	cmp	r5, r3
 800e224:	bf38      	it	cc
 800e226:	461d      	movcc	r5, r3
 800e228:	0553      	lsls	r3, r2, #21
 800e22a:	d531      	bpl.n	800e290 <__ssputs_r+0xa0>
 800e22c:	4629      	mov	r1, r5
 800e22e:	f7ff ff6b 	bl	800e108 <_malloc_r>
 800e232:	4606      	mov	r6, r0
 800e234:	b950      	cbnz	r0, 800e24c <__ssputs_r+0x5c>
 800e236:	230c      	movs	r3, #12
 800e238:	f8ca 3000 	str.w	r3, [sl]
 800e23c:	89a3      	ldrh	r3, [r4, #12]
 800e23e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e242:	81a3      	strh	r3, [r4, #12]
 800e244:	f04f 30ff 	mov.w	r0, #4294967295
 800e248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e24c:	6921      	ldr	r1, [r4, #16]
 800e24e:	464a      	mov	r2, r9
 800e250:	f7ff fb4a 	bl	800d8e8 <memcpy>
 800e254:	89a3      	ldrh	r3, [r4, #12]
 800e256:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e25a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e25e:	81a3      	strh	r3, [r4, #12]
 800e260:	6126      	str	r6, [r4, #16]
 800e262:	6165      	str	r5, [r4, #20]
 800e264:	444e      	add	r6, r9
 800e266:	eba5 0509 	sub.w	r5, r5, r9
 800e26a:	6026      	str	r6, [r4, #0]
 800e26c:	60a5      	str	r5, [r4, #8]
 800e26e:	463e      	mov	r6, r7
 800e270:	42be      	cmp	r6, r7
 800e272:	d900      	bls.n	800e276 <__ssputs_r+0x86>
 800e274:	463e      	mov	r6, r7
 800e276:	6820      	ldr	r0, [r4, #0]
 800e278:	4632      	mov	r2, r6
 800e27a:	4641      	mov	r1, r8
 800e27c:	f000 fcac 	bl	800ebd8 <memmove>
 800e280:	68a3      	ldr	r3, [r4, #8]
 800e282:	1b9b      	subs	r3, r3, r6
 800e284:	60a3      	str	r3, [r4, #8]
 800e286:	6823      	ldr	r3, [r4, #0]
 800e288:	4433      	add	r3, r6
 800e28a:	6023      	str	r3, [r4, #0]
 800e28c:	2000      	movs	r0, #0
 800e28e:	e7db      	b.n	800e248 <__ssputs_r+0x58>
 800e290:	462a      	mov	r2, r5
 800e292:	f000 fcc7 	bl	800ec24 <_realloc_r>
 800e296:	4606      	mov	r6, r0
 800e298:	2800      	cmp	r0, #0
 800e29a:	d1e1      	bne.n	800e260 <__ssputs_r+0x70>
 800e29c:	6921      	ldr	r1, [r4, #16]
 800e29e:	4650      	mov	r0, sl
 800e2a0:	f7ff fec6 	bl	800e030 <_free_r>
 800e2a4:	e7c7      	b.n	800e236 <__ssputs_r+0x46>
	...

0800e2a8 <_svfiprintf_r>:
 800e2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ac:	4698      	mov	r8, r3
 800e2ae:	898b      	ldrh	r3, [r1, #12]
 800e2b0:	061b      	lsls	r3, r3, #24
 800e2b2:	b09d      	sub	sp, #116	; 0x74
 800e2b4:	4607      	mov	r7, r0
 800e2b6:	460d      	mov	r5, r1
 800e2b8:	4614      	mov	r4, r2
 800e2ba:	d50e      	bpl.n	800e2da <_svfiprintf_r+0x32>
 800e2bc:	690b      	ldr	r3, [r1, #16]
 800e2be:	b963      	cbnz	r3, 800e2da <_svfiprintf_r+0x32>
 800e2c0:	2140      	movs	r1, #64	; 0x40
 800e2c2:	f7ff ff21 	bl	800e108 <_malloc_r>
 800e2c6:	6028      	str	r0, [r5, #0]
 800e2c8:	6128      	str	r0, [r5, #16]
 800e2ca:	b920      	cbnz	r0, 800e2d6 <_svfiprintf_r+0x2e>
 800e2cc:	230c      	movs	r3, #12
 800e2ce:	603b      	str	r3, [r7, #0]
 800e2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2d4:	e0d1      	b.n	800e47a <_svfiprintf_r+0x1d2>
 800e2d6:	2340      	movs	r3, #64	; 0x40
 800e2d8:	616b      	str	r3, [r5, #20]
 800e2da:	2300      	movs	r3, #0
 800e2dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e2de:	2320      	movs	r3, #32
 800e2e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2e8:	2330      	movs	r3, #48	; 0x30
 800e2ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e494 <_svfiprintf_r+0x1ec>
 800e2ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2f2:	f04f 0901 	mov.w	r9, #1
 800e2f6:	4623      	mov	r3, r4
 800e2f8:	469a      	mov	sl, r3
 800e2fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2fe:	b10a      	cbz	r2, 800e304 <_svfiprintf_r+0x5c>
 800e300:	2a25      	cmp	r2, #37	; 0x25
 800e302:	d1f9      	bne.n	800e2f8 <_svfiprintf_r+0x50>
 800e304:	ebba 0b04 	subs.w	fp, sl, r4
 800e308:	d00b      	beq.n	800e322 <_svfiprintf_r+0x7a>
 800e30a:	465b      	mov	r3, fp
 800e30c:	4622      	mov	r2, r4
 800e30e:	4629      	mov	r1, r5
 800e310:	4638      	mov	r0, r7
 800e312:	f7ff ff6d 	bl	800e1f0 <__ssputs_r>
 800e316:	3001      	adds	r0, #1
 800e318:	f000 80aa 	beq.w	800e470 <_svfiprintf_r+0x1c8>
 800e31c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e31e:	445a      	add	r2, fp
 800e320:	9209      	str	r2, [sp, #36]	; 0x24
 800e322:	f89a 3000 	ldrb.w	r3, [sl]
 800e326:	2b00      	cmp	r3, #0
 800e328:	f000 80a2 	beq.w	800e470 <_svfiprintf_r+0x1c8>
 800e32c:	2300      	movs	r3, #0
 800e32e:	f04f 32ff 	mov.w	r2, #4294967295
 800e332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e336:	f10a 0a01 	add.w	sl, sl, #1
 800e33a:	9304      	str	r3, [sp, #16]
 800e33c:	9307      	str	r3, [sp, #28]
 800e33e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e342:	931a      	str	r3, [sp, #104]	; 0x68
 800e344:	4654      	mov	r4, sl
 800e346:	2205      	movs	r2, #5
 800e348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e34c:	4851      	ldr	r0, [pc, #324]	; (800e494 <_svfiprintf_r+0x1ec>)
 800e34e:	f7f1 ff3f 	bl	80001d0 <memchr>
 800e352:	9a04      	ldr	r2, [sp, #16]
 800e354:	b9d8      	cbnz	r0, 800e38e <_svfiprintf_r+0xe6>
 800e356:	06d0      	lsls	r0, r2, #27
 800e358:	bf44      	itt	mi
 800e35a:	2320      	movmi	r3, #32
 800e35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e360:	0711      	lsls	r1, r2, #28
 800e362:	bf44      	itt	mi
 800e364:	232b      	movmi	r3, #43	; 0x2b
 800e366:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e36a:	f89a 3000 	ldrb.w	r3, [sl]
 800e36e:	2b2a      	cmp	r3, #42	; 0x2a
 800e370:	d015      	beq.n	800e39e <_svfiprintf_r+0xf6>
 800e372:	9a07      	ldr	r2, [sp, #28]
 800e374:	4654      	mov	r4, sl
 800e376:	2000      	movs	r0, #0
 800e378:	f04f 0c0a 	mov.w	ip, #10
 800e37c:	4621      	mov	r1, r4
 800e37e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e382:	3b30      	subs	r3, #48	; 0x30
 800e384:	2b09      	cmp	r3, #9
 800e386:	d94e      	bls.n	800e426 <_svfiprintf_r+0x17e>
 800e388:	b1b0      	cbz	r0, 800e3b8 <_svfiprintf_r+0x110>
 800e38a:	9207      	str	r2, [sp, #28]
 800e38c:	e014      	b.n	800e3b8 <_svfiprintf_r+0x110>
 800e38e:	eba0 0308 	sub.w	r3, r0, r8
 800e392:	fa09 f303 	lsl.w	r3, r9, r3
 800e396:	4313      	orrs	r3, r2
 800e398:	9304      	str	r3, [sp, #16]
 800e39a:	46a2      	mov	sl, r4
 800e39c:	e7d2      	b.n	800e344 <_svfiprintf_r+0x9c>
 800e39e:	9b03      	ldr	r3, [sp, #12]
 800e3a0:	1d19      	adds	r1, r3, #4
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	9103      	str	r1, [sp, #12]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	bfbb      	ittet	lt
 800e3aa:	425b      	neglt	r3, r3
 800e3ac:	f042 0202 	orrlt.w	r2, r2, #2
 800e3b0:	9307      	strge	r3, [sp, #28]
 800e3b2:	9307      	strlt	r3, [sp, #28]
 800e3b4:	bfb8      	it	lt
 800e3b6:	9204      	strlt	r2, [sp, #16]
 800e3b8:	7823      	ldrb	r3, [r4, #0]
 800e3ba:	2b2e      	cmp	r3, #46	; 0x2e
 800e3bc:	d10c      	bne.n	800e3d8 <_svfiprintf_r+0x130>
 800e3be:	7863      	ldrb	r3, [r4, #1]
 800e3c0:	2b2a      	cmp	r3, #42	; 0x2a
 800e3c2:	d135      	bne.n	800e430 <_svfiprintf_r+0x188>
 800e3c4:	9b03      	ldr	r3, [sp, #12]
 800e3c6:	1d1a      	adds	r2, r3, #4
 800e3c8:	681b      	ldr	r3, [r3, #0]
 800e3ca:	9203      	str	r2, [sp, #12]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	bfb8      	it	lt
 800e3d0:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3d4:	3402      	adds	r4, #2
 800e3d6:	9305      	str	r3, [sp, #20]
 800e3d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e4a4 <_svfiprintf_r+0x1fc>
 800e3dc:	7821      	ldrb	r1, [r4, #0]
 800e3de:	2203      	movs	r2, #3
 800e3e0:	4650      	mov	r0, sl
 800e3e2:	f7f1 fef5 	bl	80001d0 <memchr>
 800e3e6:	b140      	cbz	r0, 800e3fa <_svfiprintf_r+0x152>
 800e3e8:	2340      	movs	r3, #64	; 0x40
 800e3ea:	eba0 000a 	sub.w	r0, r0, sl
 800e3ee:	fa03 f000 	lsl.w	r0, r3, r0
 800e3f2:	9b04      	ldr	r3, [sp, #16]
 800e3f4:	4303      	orrs	r3, r0
 800e3f6:	3401      	adds	r4, #1
 800e3f8:	9304      	str	r3, [sp, #16]
 800e3fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3fe:	4826      	ldr	r0, [pc, #152]	; (800e498 <_svfiprintf_r+0x1f0>)
 800e400:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e404:	2206      	movs	r2, #6
 800e406:	f7f1 fee3 	bl	80001d0 <memchr>
 800e40a:	2800      	cmp	r0, #0
 800e40c:	d038      	beq.n	800e480 <_svfiprintf_r+0x1d8>
 800e40e:	4b23      	ldr	r3, [pc, #140]	; (800e49c <_svfiprintf_r+0x1f4>)
 800e410:	bb1b      	cbnz	r3, 800e45a <_svfiprintf_r+0x1b2>
 800e412:	9b03      	ldr	r3, [sp, #12]
 800e414:	3307      	adds	r3, #7
 800e416:	f023 0307 	bic.w	r3, r3, #7
 800e41a:	3308      	adds	r3, #8
 800e41c:	9303      	str	r3, [sp, #12]
 800e41e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e420:	4433      	add	r3, r6
 800e422:	9309      	str	r3, [sp, #36]	; 0x24
 800e424:	e767      	b.n	800e2f6 <_svfiprintf_r+0x4e>
 800e426:	fb0c 3202 	mla	r2, ip, r2, r3
 800e42a:	460c      	mov	r4, r1
 800e42c:	2001      	movs	r0, #1
 800e42e:	e7a5      	b.n	800e37c <_svfiprintf_r+0xd4>
 800e430:	2300      	movs	r3, #0
 800e432:	3401      	adds	r4, #1
 800e434:	9305      	str	r3, [sp, #20]
 800e436:	4619      	mov	r1, r3
 800e438:	f04f 0c0a 	mov.w	ip, #10
 800e43c:	4620      	mov	r0, r4
 800e43e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e442:	3a30      	subs	r2, #48	; 0x30
 800e444:	2a09      	cmp	r2, #9
 800e446:	d903      	bls.n	800e450 <_svfiprintf_r+0x1a8>
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d0c5      	beq.n	800e3d8 <_svfiprintf_r+0x130>
 800e44c:	9105      	str	r1, [sp, #20]
 800e44e:	e7c3      	b.n	800e3d8 <_svfiprintf_r+0x130>
 800e450:	fb0c 2101 	mla	r1, ip, r1, r2
 800e454:	4604      	mov	r4, r0
 800e456:	2301      	movs	r3, #1
 800e458:	e7f0      	b.n	800e43c <_svfiprintf_r+0x194>
 800e45a:	ab03      	add	r3, sp, #12
 800e45c:	9300      	str	r3, [sp, #0]
 800e45e:	462a      	mov	r2, r5
 800e460:	4b0f      	ldr	r3, [pc, #60]	; (800e4a0 <_svfiprintf_r+0x1f8>)
 800e462:	a904      	add	r1, sp, #16
 800e464:	4638      	mov	r0, r7
 800e466:	f3af 8000 	nop.w
 800e46a:	1c42      	adds	r2, r0, #1
 800e46c:	4606      	mov	r6, r0
 800e46e:	d1d6      	bne.n	800e41e <_svfiprintf_r+0x176>
 800e470:	89ab      	ldrh	r3, [r5, #12]
 800e472:	065b      	lsls	r3, r3, #25
 800e474:	f53f af2c 	bmi.w	800e2d0 <_svfiprintf_r+0x28>
 800e478:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e47a:	b01d      	add	sp, #116	; 0x74
 800e47c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e480:	ab03      	add	r3, sp, #12
 800e482:	9300      	str	r3, [sp, #0]
 800e484:	462a      	mov	r2, r5
 800e486:	4b06      	ldr	r3, [pc, #24]	; (800e4a0 <_svfiprintf_r+0x1f8>)
 800e488:	a904      	add	r1, sp, #16
 800e48a:	4638      	mov	r0, r7
 800e48c:	f000 f9d4 	bl	800e838 <_printf_i>
 800e490:	e7eb      	b.n	800e46a <_svfiprintf_r+0x1c2>
 800e492:	bf00      	nop
 800e494:	080106b4 	.word	0x080106b4
 800e498:	080106be 	.word	0x080106be
 800e49c:	00000000 	.word	0x00000000
 800e4a0:	0800e1f1 	.word	0x0800e1f1
 800e4a4:	080106ba 	.word	0x080106ba

0800e4a8 <__sfputc_r>:
 800e4a8:	6893      	ldr	r3, [r2, #8]
 800e4aa:	3b01      	subs	r3, #1
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	b410      	push	{r4}
 800e4b0:	6093      	str	r3, [r2, #8]
 800e4b2:	da08      	bge.n	800e4c6 <__sfputc_r+0x1e>
 800e4b4:	6994      	ldr	r4, [r2, #24]
 800e4b6:	42a3      	cmp	r3, r4
 800e4b8:	db01      	blt.n	800e4be <__sfputc_r+0x16>
 800e4ba:	290a      	cmp	r1, #10
 800e4bc:	d103      	bne.n	800e4c6 <__sfputc_r+0x1e>
 800e4be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4c2:	f7ff bad5 	b.w	800da70 <__swbuf_r>
 800e4c6:	6813      	ldr	r3, [r2, #0]
 800e4c8:	1c58      	adds	r0, r3, #1
 800e4ca:	6010      	str	r0, [r2, #0]
 800e4cc:	7019      	strb	r1, [r3, #0]
 800e4ce:	4608      	mov	r0, r1
 800e4d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4d4:	4770      	bx	lr

0800e4d6 <__sfputs_r>:
 800e4d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4d8:	4606      	mov	r6, r0
 800e4da:	460f      	mov	r7, r1
 800e4dc:	4614      	mov	r4, r2
 800e4de:	18d5      	adds	r5, r2, r3
 800e4e0:	42ac      	cmp	r4, r5
 800e4e2:	d101      	bne.n	800e4e8 <__sfputs_r+0x12>
 800e4e4:	2000      	movs	r0, #0
 800e4e6:	e007      	b.n	800e4f8 <__sfputs_r+0x22>
 800e4e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4ec:	463a      	mov	r2, r7
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	f7ff ffda 	bl	800e4a8 <__sfputc_r>
 800e4f4:	1c43      	adds	r3, r0, #1
 800e4f6:	d1f3      	bne.n	800e4e0 <__sfputs_r+0xa>
 800e4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e4fc <_vfiprintf_r>:
 800e4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e500:	460d      	mov	r5, r1
 800e502:	b09d      	sub	sp, #116	; 0x74
 800e504:	4614      	mov	r4, r2
 800e506:	4698      	mov	r8, r3
 800e508:	4606      	mov	r6, r0
 800e50a:	b118      	cbz	r0, 800e514 <_vfiprintf_r+0x18>
 800e50c:	6983      	ldr	r3, [r0, #24]
 800e50e:	b90b      	cbnz	r3, 800e514 <_vfiprintf_r+0x18>
 800e510:	f7ff fc88 	bl	800de24 <__sinit>
 800e514:	4b89      	ldr	r3, [pc, #548]	; (800e73c <_vfiprintf_r+0x240>)
 800e516:	429d      	cmp	r5, r3
 800e518:	d11b      	bne.n	800e552 <_vfiprintf_r+0x56>
 800e51a:	6875      	ldr	r5, [r6, #4]
 800e51c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e51e:	07d9      	lsls	r1, r3, #31
 800e520:	d405      	bmi.n	800e52e <_vfiprintf_r+0x32>
 800e522:	89ab      	ldrh	r3, [r5, #12]
 800e524:	059a      	lsls	r2, r3, #22
 800e526:	d402      	bmi.n	800e52e <_vfiprintf_r+0x32>
 800e528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e52a:	f7ff fd19 	bl	800df60 <__retarget_lock_acquire_recursive>
 800e52e:	89ab      	ldrh	r3, [r5, #12]
 800e530:	071b      	lsls	r3, r3, #28
 800e532:	d501      	bpl.n	800e538 <_vfiprintf_r+0x3c>
 800e534:	692b      	ldr	r3, [r5, #16]
 800e536:	b9eb      	cbnz	r3, 800e574 <_vfiprintf_r+0x78>
 800e538:	4629      	mov	r1, r5
 800e53a:	4630      	mov	r0, r6
 800e53c:	f7ff faea 	bl	800db14 <__swsetup_r>
 800e540:	b1c0      	cbz	r0, 800e574 <_vfiprintf_r+0x78>
 800e542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e544:	07dc      	lsls	r4, r3, #31
 800e546:	d50e      	bpl.n	800e566 <_vfiprintf_r+0x6a>
 800e548:	f04f 30ff 	mov.w	r0, #4294967295
 800e54c:	b01d      	add	sp, #116	; 0x74
 800e54e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e552:	4b7b      	ldr	r3, [pc, #492]	; (800e740 <_vfiprintf_r+0x244>)
 800e554:	429d      	cmp	r5, r3
 800e556:	d101      	bne.n	800e55c <_vfiprintf_r+0x60>
 800e558:	68b5      	ldr	r5, [r6, #8]
 800e55a:	e7df      	b.n	800e51c <_vfiprintf_r+0x20>
 800e55c:	4b79      	ldr	r3, [pc, #484]	; (800e744 <_vfiprintf_r+0x248>)
 800e55e:	429d      	cmp	r5, r3
 800e560:	bf08      	it	eq
 800e562:	68f5      	ldreq	r5, [r6, #12]
 800e564:	e7da      	b.n	800e51c <_vfiprintf_r+0x20>
 800e566:	89ab      	ldrh	r3, [r5, #12]
 800e568:	0598      	lsls	r0, r3, #22
 800e56a:	d4ed      	bmi.n	800e548 <_vfiprintf_r+0x4c>
 800e56c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e56e:	f7ff fcf8 	bl	800df62 <__retarget_lock_release_recursive>
 800e572:	e7e9      	b.n	800e548 <_vfiprintf_r+0x4c>
 800e574:	2300      	movs	r3, #0
 800e576:	9309      	str	r3, [sp, #36]	; 0x24
 800e578:	2320      	movs	r3, #32
 800e57a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e57e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e582:	2330      	movs	r3, #48	; 0x30
 800e584:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e748 <_vfiprintf_r+0x24c>
 800e588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e58c:	f04f 0901 	mov.w	r9, #1
 800e590:	4623      	mov	r3, r4
 800e592:	469a      	mov	sl, r3
 800e594:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e598:	b10a      	cbz	r2, 800e59e <_vfiprintf_r+0xa2>
 800e59a:	2a25      	cmp	r2, #37	; 0x25
 800e59c:	d1f9      	bne.n	800e592 <_vfiprintf_r+0x96>
 800e59e:	ebba 0b04 	subs.w	fp, sl, r4
 800e5a2:	d00b      	beq.n	800e5bc <_vfiprintf_r+0xc0>
 800e5a4:	465b      	mov	r3, fp
 800e5a6:	4622      	mov	r2, r4
 800e5a8:	4629      	mov	r1, r5
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	f7ff ff93 	bl	800e4d6 <__sfputs_r>
 800e5b0:	3001      	adds	r0, #1
 800e5b2:	f000 80aa 	beq.w	800e70a <_vfiprintf_r+0x20e>
 800e5b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5b8:	445a      	add	r2, fp
 800e5ba:	9209      	str	r2, [sp, #36]	; 0x24
 800e5bc:	f89a 3000 	ldrb.w	r3, [sl]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	f000 80a2 	beq.w	800e70a <_vfiprintf_r+0x20e>
 800e5c6:	2300      	movs	r3, #0
 800e5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800e5cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5d0:	f10a 0a01 	add.w	sl, sl, #1
 800e5d4:	9304      	str	r3, [sp, #16]
 800e5d6:	9307      	str	r3, [sp, #28]
 800e5d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e5dc:	931a      	str	r3, [sp, #104]	; 0x68
 800e5de:	4654      	mov	r4, sl
 800e5e0:	2205      	movs	r2, #5
 800e5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5e6:	4858      	ldr	r0, [pc, #352]	; (800e748 <_vfiprintf_r+0x24c>)
 800e5e8:	f7f1 fdf2 	bl	80001d0 <memchr>
 800e5ec:	9a04      	ldr	r2, [sp, #16]
 800e5ee:	b9d8      	cbnz	r0, 800e628 <_vfiprintf_r+0x12c>
 800e5f0:	06d1      	lsls	r1, r2, #27
 800e5f2:	bf44      	itt	mi
 800e5f4:	2320      	movmi	r3, #32
 800e5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e5fa:	0713      	lsls	r3, r2, #28
 800e5fc:	bf44      	itt	mi
 800e5fe:	232b      	movmi	r3, #43	; 0x2b
 800e600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e604:	f89a 3000 	ldrb.w	r3, [sl]
 800e608:	2b2a      	cmp	r3, #42	; 0x2a
 800e60a:	d015      	beq.n	800e638 <_vfiprintf_r+0x13c>
 800e60c:	9a07      	ldr	r2, [sp, #28]
 800e60e:	4654      	mov	r4, sl
 800e610:	2000      	movs	r0, #0
 800e612:	f04f 0c0a 	mov.w	ip, #10
 800e616:	4621      	mov	r1, r4
 800e618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e61c:	3b30      	subs	r3, #48	; 0x30
 800e61e:	2b09      	cmp	r3, #9
 800e620:	d94e      	bls.n	800e6c0 <_vfiprintf_r+0x1c4>
 800e622:	b1b0      	cbz	r0, 800e652 <_vfiprintf_r+0x156>
 800e624:	9207      	str	r2, [sp, #28]
 800e626:	e014      	b.n	800e652 <_vfiprintf_r+0x156>
 800e628:	eba0 0308 	sub.w	r3, r0, r8
 800e62c:	fa09 f303 	lsl.w	r3, r9, r3
 800e630:	4313      	orrs	r3, r2
 800e632:	9304      	str	r3, [sp, #16]
 800e634:	46a2      	mov	sl, r4
 800e636:	e7d2      	b.n	800e5de <_vfiprintf_r+0xe2>
 800e638:	9b03      	ldr	r3, [sp, #12]
 800e63a:	1d19      	adds	r1, r3, #4
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	9103      	str	r1, [sp, #12]
 800e640:	2b00      	cmp	r3, #0
 800e642:	bfbb      	ittet	lt
 800e644:	425b      	neglt	r3, r3
 800e646:	f042 0202 	orrlt.w	r2, r2, #2
 800e64a:	9307      	strge	r3, [sp, #28]
 800e64c:	9307      	strlt	r3, [sp, #28]
 800e64e:	bfb8      	it	lt
 800e650:	9204      	strlt	r2, [sp, #16]
 800e652:	7823      	ldrb	r3, [r4, #0]
 800e654:	2b2e      	cmp	r3, #46	; 0x2e
 800e656:	d10c      	bne.n	800e672 <_vfiprintf_r+0x176>
 800e658:	7863      	ldrb	r3, [r4, #1]
 800e65a:	2b2a      	cmp	r3, #42	; 0x2a
 800e65c:	d135      	bne.n	800e6ca <_vfiprintf_r+0x1ce>
 800e65e:	9b03      	ldr	r3, [sp, #12]
 800e660:	1d1a      	adds	r2, r3, #4
 800e662:	681b      	ldr	r3, [r3, #0]
 800e664:	9203      	str	r2, [sp, #12]
 800e666:	2b00      	cmp	r3, #0
 800e668:	bfb8      	it	lt
 800e66a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e66e:	3402      	adds	r4, #2
 800e670:	9305      	str	r3, [sp, #20]
 800e672:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e758 <_vfiprintf_r+0x25c>
 800e676:	7821      	ldrb	r1, [r4, #0]
 800e678:	2203      	movs	r2, #3
 800e67a:	4650      	mov	r0, sl
 800e67c:	f7f1 fda8 	bl	80001d0 <memchr>
 800e680:	b140      	cbz	r0, 800e694 <_vfiprintf_r+0x198>
 800e682:	2340      	movs	r3, #64	; 0x40
 800e684:	eba0 000a 	sub.w	r0, r0, sl
 800e688:	fa03 f000 	lsl.w	r0, r3, r0
 800e68c:	9b04      	ldr	r3, [sp, #16]
 800e68e:	4303      	orrs	r3, r0
 800e690:	3401      	adds	r4, #1
 800e692:	9304      	str	r3, [sp, #16]
 800e694:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e698:	482c      	ldr	r0, [pc, #176]	; (800e74c <_vfiprintf_r+0x250>)
 800e69a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e69e:	2206      	movs	r2, #6
 800e6a0:	f7f1 fd96 	bl	80001d0 <memchr>
 800e6a4:	2800      	cmp	r0, #0
 800e6a6:	d03f      	beq.n	800e728 <_vfiprintf_r+0x22c>
 800e6a8:	4b29      	ldr	r3, [pc, #164]	; (800e750 <_vfiprintf_r+0x254>)
 800e6aa:	bb1b      	cbnz	r3, 800e6f4 <_vfiprintf_r+0x1f8>
 800e6ac:	9b03      	ldr	r3, [sp, #12]
 800e6ae:	3307      	adds	r3, #7
 800e6b0:	f023 0307 	bic.w	r3, r3, #7
 800e6b4:	3308      	adds	r3, #8
 800e6b6:	9303      	str	r3, [sp, #12]
 800e6b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6ba:	443b      	add	r3, r7
 800e6bc:	9309      	str	r3, [sp, #36]	; 0x24
 800e6be:	e767      	b.n	800e590 <_vfiprintf_r+0x94>
 800e6c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	2001      	movs	r0, #1
 800e6c8:	e7a5      	b.n	800e616 <_vfiprintf_r+0x11a>
 800e6ca:	2300      	movs	r3, #0
 800e6cc:	3401      	adds	r4, #1
 800e6ce:	9305      	str	r3, [sp, #20]
 800e6d0:	4619      	mov	r1, r3
 800e6d2:	f04f 0c0a 	mov.w	ip, #10
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e6dc:	3a30      	subs	r2, #48	; 0x30
 800e6de:	2a09      	cmp	r2, #9
 800e6e0:	d903      	bls.n	800e6ea <_vfiprintf_r+0x1ee>
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d0c5      	beq.n	800e672 <_vfiprintf_r+0x176>
 800e6e6:	9105      	str	r1, [sp, #20]
 800e6e8:	e7c3      	b.n	800e672 <_vfiprintf_r+0x176>
 800e6ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	2301      	movs	r3, #1
 800e6f2:	e7f0      	b.n	800e6d6 <_vfiprintf_r+0x1da>
 800e6f4:	ab03      	add	r3, sp, #12
 800e6f6:	9300      	str	r3, [sp, #0]
 800e6f8:	462a      	mov	r2, r5
 800e6fa:	4b16      	ldr	r3, [pc, #88]	; (800e754 <_vfiprintf_r+0x258>)
 800e6fc:	a904      	add	r1, sp, #16
 800e6fe:	4630      	mov	r0, r6
 800e700:	f3af 8000 	nop.w
 800e704:	4607      	mov	r7, r0
 800e706:	1c78      	adds	r0, r7, #1
 800e708:	d1d6      	bne.n	800e6b8 <_vfiprintf_r+0x1bc>
 800e70a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e70c:	07d9      	lsls	r1, r3, #31
 800e70e:	d405      	bmi.n	800e71c <_vfiprintf_r+0x220>
 800e710:	89ab      	ldrh	r3, [r5, #12]
 800e712:	059a      	lsls	r2, r3, #22
 800e714:	d402      	bmi.n	800e71c <_vfiprintf_r+0x220>
 800e716:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e718:	f7ff fc23 	bl	800df62 <__retarget_lock_release_recursive>
 800e71c:	89ab      	ldrh	r3, [r5, #12]
 800e71e:	065b      	lsls	r3, r3, #25
 800e720:	f53f af12 	bmi.w	800e548 <_vfiprintf_r+0x4c>
 800e724:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e726:	e711      	b.n	800e54c <_vfiprintf_r+0x50>
 800e728:	ab03      	add	r3, sp, #12
 800e72a:	9300      	str	r3, [sp, #0]
 800e72c:	462a      	mov	r2, r5
 800e72e:	4b09      	ldr	r3, [pc, #36]	; (800e754 <_vfiprintf_r+0x258>)
 800e730:	a904      	add	r1, sp, #16
 800e732:	4630      	mov	r0, r6
 800e734:	f000 f880 	bl	800e838 <_printf_i>
 800e738:	e7e4      	b.n	800e704 <_vfiprintf_r+0x208>
 800e73a:	bf00      	nop
 800e73c:	08010674 	.word	0x08010674
 800e740:	08010694 	.word	0x08010694
 800e744:	08010654 	.word	0x08010654
 800e748:	080106b4 	.word	0x080106b4
 800e74c:	080106be 	.word	0x080106be
 800e750:	00000000 	.word	0x00000000
 800e754:	0800e4d7 	.word	0x0800e4d7
 800e758:	080106ba 	.word	0x080106ba

0800e75c <_printf_common>:
 800e75c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e760:	4616      	mov	r6, r2
 800e762:	4699      	mov	r9, r3
 800e764:	688a      	ldr	r2, [r1, #8]
 800e766:	690b      	ldr	r3, [r1, #16]
 800e768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e76c:	4293      	cmp	r3, r2
 800e76e:	bfb8      	it	lt
 800e770:	4613      	movlt	r3, r2
 800e772:	6033      	str	r3, [r6, #0]
 800e774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e778:	4607      	mov	r7, r0
 800e77a:	460c      	mov	r4, r1
 800e77c:	b10a      	cbz	r2, 800e782 <_printf_common+0x26>
 800e77e:	3301      	adds	r3, #1
 800e780:	6033      	str	r3, [r6, #0]
 800e782:	6823      	ldr	r3, [r4, #0]
 800e784:	0699      	lsls	r1, r3, #26
 800e786:	bf42      	ittt	mi
 800e788:	6833      	ldrmi	r3, [r6, #0]
 800e78a:	3302      	addmi	r3, #2
 800e78c:	6033      	strmi	r3, [r6, #0]
 800e78e:	6825      	ldr	r5, [r4, #0]
 800e790:	f015 0506 	ands.w	r5, r5, #6
 800e794:	d106      	bne.n	800e7a4 <_printf_common+0x48>
 800e796:	f104 0a19 	add.w	sl, r4, #25
 800e79a:	68e3      	ldr	r3, [r4, #12]
 800e79c:	6832      	ldr	r2, [r6, #0]
 800e79e:	1a9b      	subs	r3, r3, r2
 800e7a0:	42ab      	cmp	r3, r5
 800e7a2:	dc26      	bgt.n	800e7f2 <_printf_common+0x96>
 800e7a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e7a8:	1e13      	subs	r3, r2, #0
 800e7aa:	6822      	ldr	r2, [r4, #0]
 800e7ac:	bf18      	it	ne
 800e7ae:	2301      	movne	r3, #1
 800e7b0:	0692      	lsls	r2, r2, #26
 800e7b2:	d42b      	bmi.n	800e80c <_printf_common+0xb0>
 800e7b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7b8:	4649      	mov	r1, r9
 800e7ba:	4638      	mov	r0, r7
 800e7bc:	47c0      	blx	r8
 800e7be:	3001      	adds	r0, #1
 800e7c0:	d01e      	beq.n	800e800 <_printf_common+0xa4>
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	68e5      	ldr	r5, [r4, #12]
 800e7c6:	6832      	ldr	r2, [r6, #0]
 800e7c8:	f003 0306 	and.w	r3, r3, #6
 800e7cc:	2b04      	cmp	r3, #4
 800e7ce:	bf08      	it	eq
 800e7d0:	1aad      	subeq	r5, r5, r2
 800e7d2:	68a3      	ldr	r3, [r4, #8]
 800e7d4:	6922      	ldr	r2, [r4, #16]
 800e7d6:	bf0c      	ite	eq
 800e7d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e7dc:	2500      	movne	r5, #0
 800e7de:	4293      	cmp	r3, r2
 800e7e0:	bfc4      	itt	gt
 800e7e2:	1a9b      	subgt	r3, r3, r2
 800e7e4:	18ed      	addgt	r5, r5, r3
 800e7e6:	2600      	movs	r6, #0
 800e7e8:	341a      	adds	r4, #26
 800e7ea:	42b5      	cmp	r5, r6
 800e7ec:	d11a      	bne.n	800e824 <_printf_common+0xc8>
 800e7ee:	2000      	movs	r0, #0
 800e7f0:	e008      	b.n	800e804 <_printf_common+0xa8>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	4652      	mov	r2, sl
 800e7f6:	4649      	mov	r1, r9
 800e7f8:	4638      	mov	r0, r7
 800e7fa:	47c0      	blx	r8
 800e7fc:	3001      	adds	r0, #1
 800e7fe:	d103      	bne.n	800e808 <_printf_common+0xac>
 800e800:	f04f 30ff 	mov.w	r0, #4294967295
 800e804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e808:	3501      	adds	r5, #1
 800e80a:	e7c6      	b.n	800e79a <_printf_common+0x3e>
 800e80c:	18e1      	adds	r1, r4, r3
 800e80e:	1c5a      	adds	r2, r3, #1
 800e810:	2030      	movs	r0, #48	; 0x30
 800e812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e816:	4422      	add	r2, r4
 800e818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e81c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e820:	3302      	adds	r3, #2
 800e822:	e7c7      	b.n	800e7b4 <_printf_common+0x58>
 800e824:	2301      	movs	r3, #1
 800e826:	4622      	mov	r2, r4
 800e828:	4649      	mov	r1, r9
 800e82a:	4638      	mov	r0, r7
 800e82c:	47c0      	blx	r8
 800e82e:	3001      	adds	r0, #1
 800e830:	d0e6      	beq.n	800e800 <_printf_common+0xa4>
 800e832:	3601      	adds	r6, #1
 800e834:	e7d9      	b.n	800e7ea <_printf_common+0x8e>
	...

0800e838 <_printf_i>:
 800e838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e83c:	7e0f      	ldrb	r7, [r1, #24]
 800e83e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e840:	2f78      	cmp	r7, #120	; 0x78
 800e842:	4691      	mov	r9, r2
 800e844:	4680      	mov	r8, r0
 800e846:	460c      	mov	r4, r1
 800e848:	469a      	mov	sl, r3
 800e84a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e84e:	d807      	bhi.n	800e860 <_printf_i+0x28>
 800e850:	2f62      	cmp	r7, #98	; 0x62
 800e852:	d80a      	bhi.n	800e86a <_printf_i+0x32>
 800e854:	2f00      	cmp	r7, #0
 800e856:	f000 80d8 	beq.w	800ea0a <_printf_i+0x1d2>
 800e85a:	2f58      	cmp	r7, #88	; 0x58
 800e85c:	f000 80a3 	beq.w	800e9a6 <_printf_i+0x16e>
 800e860:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e868:	e03a      	b.n	800e8e0 <_printf_i+0xa8>
 800e86a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e86e:	2b15      	cmp	r3, #21
 800e870:	d8f6      	bhi.n	800e860 <_printf_i+0x28>
 800e872:	a101      	add	r1, pc, #4	; (adr r1, 800e878 <_printf_i+0x40>)
 800e874:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e878:	0800e8d1 	.word	0x0800e8d1
 800e87c:	0800e8e5 	.word	0x0800e8e5
 800e880:	0800e861 	.word	0x0800e861
 800e884:	0800e861 	.word	0x0800e861
 800e888:	0800e861 	.word	0x0800e861
 800e88c:	0800e861 	.word	0x0800e861
 800e890:	0800e8e5 	.word	0x0800e8e5
 800e894:	0800e861 	.word	0x0800e861
 800e898:	0800e861 	.word	0x0800e861
 800e89c:	0800e861 	.word	0x0800e861
 800e8a0:	0800e861 	.word	0x0800e861
 800e8a4:	0800e9f1 	.word	0x0800e9f1
 800e8a8:	0800e915 	.word	0x0800e915
 800e8ac:	0800e9d3 	.word	0x0800e9d3
 800e8b0:	0800e861 	.word	0x0800e861
 800e8b4:	0800e861 	.word	0x0800e861
 800e8b8:	0800ea13 	.word	0x0800ea13
 800e8bc:	0800e861 	.word	0x0800e861
 800e8c0:	0800e915 	.word	0x0800e915
 800e8c4:	0800e861 	.word	0x0800e861
 800e8c8:	0800e861 	.word	0x0800e861
 800e8cc:	0800e9db 	.word	0x0800e9db
 800e8d0:	682b      	ldr	r3, [r5, #0]
 800e8d2:	1d1a      	adds	r2, r3, #4
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	602a      	str	r2, [r5, #0]
 800e8d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e8e0:	2301      	movs	r3, #1
 800e8e2:	e0a3      	b.n	800ea2c <_printf_i+0x1f4>
 800e8e4:	6820      	ldr	r0, [r4, #0]
 800e8e6:	6829      	ldr	r1, [r5, #0]
 800e8e8:	0606      	lsls	r6, r0, #24
 800e8ea:	f101 0304 	add.w	r3, r1, #4
 800e8ee:	d50a      	bpl.n	800e906 <_printf_i+0xce>
 800e8f0:	680e      	ldr	r6, [r1, #0]
 800e8f2:	602b      	str	r3, [r5, #0]
 800e8f4:	2e00      	cmp	r6, #0
 800e8f6:	da03      	bge.n	800e900 <_printf_i+0xc8>
 800e8f8:	232d      	movs	r3, #45	; 0x2d
 800e8fa:	4276      	negs	r6, r6
 800e8fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e900:	485e      	ldr	r0, [pc, #376]	; (800ea7c <_printf_i+0x244>)
 800e902:	230a      	movs	r3, #10
 800e904:	e019      	b.n	800e93a <_printf_i+0x102>
 800e906:	680e      	ldr	r6, [r1, #0]
 800e908:	602b      	str	r3, [r5, #0]
 800e90a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e90e:	bf18      	it	ne
 800e910:	b236      	sxthne	r6, r6
 800e912:	e7ef      	b.n	800e8f4 <_printf_i+0xbc>
 800e914:	682b      	ldr	r3, [r5, #0]
 800e916:	6820      	ldr	r0, [r4, #0]
 800e918:	1d19      	adds	r1, r3, #4
 800e91a:	6029      	str	r1, [r5, #0]
 800e91c:	0601      	lsls	r1, r0, #24
 800e91e:	d501      	bpl.n	800e924 <_printf_i+0xec>
 800e920:	681e      	ldr	r6, [r3, #0]
 800e922:	e002      	b.n	800e92a <_printf_i+0xf2>
 800e924:	0646      	lsls	r6, r0, #25
 800e926:	d5fb      	bpl.n	800e920 <_printf_i+0xe8>
 800e928:	881e      	ldrh	r6, [r3, #0]
 800e92a:	4854      	ldr	r0, [pc, #336]	; (800ea7c <_printf_i+0x244>)
 800e92c:	2f6f      	cmp	r7, #111	; 0x6f
 800e92e:	bf0c      	ite	eq
 800e930:	2308      	moveq	r3, #8
 800e932:	230a      	movne	r3, #10
 800e934:	2100      	movs	r1, #0
 800e936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e93a:	6865      	ldr	r5, [r4, #4]
 800e93c:	60a5      	str	r5, [r4, #8]
 800e93e:	2d00      	cmp	r5, #0
 800e940:	bfa2      	ittt	ge
 800e942:	6821      	ldrge	r1, [r4, #0]
 800e944:	f021 0104 	bicge.w	r1, r1, #4
 800e948:	6021      	strge	r1, [r4, #0]
 800e94a:	b90e      	cbnz	r6, 800e950 <_printf_i+0x118>
 800e94c:	2d00      	cmp	r5, #0
 800e94e:	d04d      	beq.n	800e9ec <_printf_i+0x1b4>
 800e950:	4615      	mov	r5, r2
 800e952:	fbb6 f1f3 	udiv	r1, r6, r3
 800e956:	fb03 6711 	mls	r7, r3, r1, r6
 800e95a:	5dc7      	ldrb	r7, [r0, r7]
 800e95c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e960:	4637      	mov	r7, r6
 800e962:	42bb      	cmp	r3, r7
 800e964:	460e      	mov	r6, r1
 800e966:	d9f4      	bls.n	800e952 <_printf_i+0x11a>
 800e968:	2b08      	cmp	r3, #8
 800e96a:	d10b      	bne.n	800e984 <_printf_i+0x14c>
 800e96c:	6823      	ldr	r3, [r4, #0]
 800e96e:	07de      	lsls	r6, r3, #31
 800e970:	d508      	bpl.n	800e984 <_printf_i+0x14c>
 800e972:	6923      	ldr	r3, [r4, #16]
 800e974:	6861      	ldr	r1, [r4, #4]
 800e976:	4299      	cmp	r1, r3
 800e978:	bfde      	ittt	le
 800e97a:	2330      	movle	r3, #48	; 0x30
 800e97c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e980:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e984:	1b52      	subs	r2, r2, r5
 800e986:	6122      	str	r2, [r4, #16]
 800e988:	f8cd a000 	str.w	sl, [sp]
 800e98c:	464b      	mov	r3, r9
 800e98e:	aa03      	add	r2, sp, #12
 800e990:	4621      	mov	r1, r4
 800e992:	4640      	mov	r0, r8
 800e994:	f7ff fee2 	bl	800e75c <_printf_common>
 800e998:	3001      	adds	r0, #1
 800e99a:	d14c      	bne.n	800ea36 <_printf_i+0x1fe>
 800e99c:	f04f 30ff 	mov.w	r0, #4294967295
 800e9a0:	b004      	add	sp, #16
 800e9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9a6:	4835      	ldr	r0, [pc, #212]	; (800ea7c <_printf_i+0x244>)
 800e9a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e9ac:	6829      	ldr	r1, [r5, #0]
 800e9ae:	6823      	ldr	r3, [r4, #0]
 800e9b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e9b4:	6029      	str	r1, [r5, #0]
 800e9b6:	061d      	lsls	r5, r3, #24
 800e9b8:	d514      	bpl.n	800e9e4 <_printf_i+0x1ac>
 800e9ba:	07df      	lsls	r7, r3, #31
 800e9bc:	bf44      	itt	mi
 800e9be:	f043 0320 	orrmi.w	r3, r3, #32
 800e9c2:	6023      	strmi	r3, [r4, #0]
 800e9c4:	b91e      	cbnz	r6, 800e9ce <_printf_i+0x196>
 800e9c6:	6823      	ldr	r3, [r4, #0]
 800e9c8:	f023 0320 	bic.w	r3, r3, #32
 800e9cc:	6023      	str	r3, [r4, #0]
 800e9ce:	2310      	movs	r3, #16
 800e9d0:	e7b0      	b.n	800e934 <_printf_i+0xfc>
 800e9d2:	6823      	ldr	r3, [r4, #0]
 800e9d4:	f043 0320 	orr.w	r3, r3, #32
 800e9d8:	6023      	str	r3, [r4, #0]
 800e9da:	2378      	movs	r3, #120	; 0x78
 800e9dc:	4828      	ldr	r0, [pc, #160]	; (800ea80 <_printf_i+0x248>)
 800e9de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e9e2:	e7e3      	b.n	800e9ac <_printf_i+0x174>
 800e9e4:	0659      	lsls	r1, r3, #25
 800e9e6:	bf48      	it	mi
 800e9e8:	b2b6      	uxthmi	r6, r6
 800e9ea:	e7e6      	b.n	800e9ba <_printf_i+0x182>
 800e9ec:	4615      	mov	r5, r2
 800e9ee:	e7bb      	b.n	800e968 <_printf_i+0x130>
 800e9f0:	682b      	ldr	r3, [r5, #0]
 800e9f2:	6826      	ldr	r6, [r4, #0]
 800e9f4:	6961      	ldr	r1, [r4, #20]
 800e9f6:	1d18      	adds	r0, r3, #4
 800e9f8:	6028      	str	r0, [r5, #0]
 800e9fa:	0635      	lsls	r5, r6, #24
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	d501      	bpl.n	800ea04 <_printf_i+0x1cc>
 800ea00:	6019      	str	r1, [r3, #0]
 800ea02:	e002      	b.n	800ea0a <_printf_i+0x1d2>
 800ea04:	0670      	lsls	r0, r6, #25
 800ea06:	d5fb      	bpl.n	800ea00 <_printf_i+0x1c8>
 800ea08:	8019      	strh	r1, [r3, #0]
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	6123      	str	r3, [r4, #16]
 800ea0e:	4615      	mov	r5, r2
 800ea10:	e7ba      	b.n	800e988 <_printf_i+0x150>
 800ea12:	682b      	ldr	r3, [r5, #0]
 800ea14:	1d1a      	adds	r2, r3, #4
 800ea16:	602a      	str	r2, [r5, #0]
 800ea18:	681d      	ldr	r5, [r3, #0]
 800ea1a:	6862      	ldr	r2, [r4, #4]
 800ea1c:	2100      	movs	r1, #0
 800ea1e:	4628      	mov	r0, r5
 800ea20:	f7f1 fbd6 	bl	80001d0 <memchr>
 800ea24:	b108      	cbz	r0, 800ea2a <_printf_i+0x1f2>
 800ea26:	1b40      	subs	r0, r0, r5
 800ea28:	6060      	str	r0, [r4, #4]
 800ea2a:	6863      	ldr	r3, [r4, #4]
 800ea2c:	6123      	str	r3, [r4, #16]
 800ea2e:	2300      	movs	r3, #0
 800ea30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea34:	e7a8      	b.n	800e988 <_printf_i+0x150>
 800ea36:	6923      	ldr	r3, [r4, #16]
 800ea38:	462a      	mov	r2, r5
 800ea3a:	4649      	mov	r1, r9
 800ea3c:	4640      	mov	r0, r8
 800ea3e:	47d0      	blx	sl
 800ea40:	3001      	adds	r0, #1
 800ea42:	d0ab      	beq.n	800e99c <_printf_i+0x164>
 800ea44:	6823      	ldr	r3, [r4, #0]
 800ea46:	079b      	lsls	r3, r3, #30
 800ea48:	d413      	bmi.n	800ea72 <_printf_i+0x23a>
 800ea4a:	68e0      	ldr	r0, [r4, #12]
 800ea4c:	9b03      	ldr	r3, [sp, #12]
 800ea4e:	4298      	cmp	r0, r3
 800ea50:	bfb8      	it	lt
 800ea52:	4618      	movlt	r0, r3
 800ea54:	e7a4      	b.n	800e9a0 <_printf_i+0x168>
 800ea56:	2301      	movs	r3, #1
 800ea58:	4632      	mov	r2, r6
 800ea5a:	4649      	mov	r1, r9
 800ea5c:	4640      	mov	r0, r8
 800ea5e:	47d0      	blx	sl
 800ea60:	3001      	adds	r0, #1
 800ea62:	d09b      	beq.n	800e99c <_printf_i+0x164>
 800ea64:	3501      	adds	r5, #1
 800ea66:	68e3      	ldr	r3, [r4, #12]
 800ea68:	9903      	ldr	r1, [sp, #12]
 800ea6a:	1a5b      	subs	r3, r3, r1
 800ea6c:	42ab      	cmp	r3, r5
 800ea6e:	dcf2      	bgt.n	800ea56 <_printf_i+0x21e>
 800ea70:	e7eb      	b.n	800ea4a <_printf_i+0x212>
 800ea72:	2500      	movs	r5, #0
 800ea74:	f104 0619 	add.w	r6, r4, #25
 800ea78:	e7f5      	b.n	800ea66 <_printf_i+0x22e>
 800ea7a:	bf00      	nop
 800ea7c:	080106c5 	.word	0x080106c5
 800ea80:	080106d6 	.word	0x080106d6

0800ea84 <_sbrk_r>:
 800ea84:	b538      	push	{r3, r4, r5, lr}
 800ea86:	4d06      	ldr	r5, [pc, #24]	; (800eaa0 <_sbrk_r+0x1c>)
 800ea88:	2300      	movs	r3, #0
 800ea8a:	4604      	mov	r4, r0
 800ea8c:	4608      	mov	r0, r1
 800ea8e:	602b      	str	r3, [r5, #0]
 800ea90:	f7f4 fe76 	bl	8003780 <_sbrk>
 800ea94:	1c43      	adds	r3, r0, #1
 800ea96:	d102      	bne.n	800ea9e <_sbrk_r+0x1a>
 800ea98:	682b      	ldr	r3, [r5, #0]
 800ea9a:	b103      	cbz	r3, 800ea9e <_sbrk_r+0x1a>
 800ea9c:	6023      	str	r3, [r4, #0]
 800ea9e:	bd38      	pop	{r3, r4, r5, pc}
 800eaa0:	20006114 	.word	0x20006114

0800eaa4 <__sread>:
 800eaa4:	b510      	push	{r4, lr}
 800eaa6:	460c      	mov	r4, r1
 800eaa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaac:	f000 f8ea 	bl	800ec84 <_read_r>
 800eab0:	2800      	cmp	r0, #0
 800eab2:	bfab      	itete	ge
 800eab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eab6:	89a3      	ldrhlt	r3, [r4, #12]
 800eab8:	181b      	addge	r3, r3, r0
 800eaba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eabe:	bfac      	ite	ge
 800eac0:	6563      	strge	r3, [r4, #84]	; 0x54
 800eac2:	81a3      	strhlt	r3, [r4, #12]
 800eac4:	bd10      	pop	{r4, pc}

0800eac6 <__swrite>:
 800eac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaca:	461f      	mov	r7, r3
 800eacc:	898b      	ldrh	r3, [r1, #12]
 800eace:	05db      	lsls	r3, r3, #23
 800ead0:	4605      	mov	r5, r0
 800ead2:	460c      	mov	r4, r1
 800ead4:	4616      	mov	r6, r2
 800ead6:	d505      	bpl.n	800eae4 <__swrite+0x1e>
 800ead8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eadc:	2302      	movs	r3, #2
 800eade:	2200      	movs	r2, #0
 800eae0:	f000 f868 	bl	800ebb4 <_lseek_r>
 800eae4:	89a3      	ldrh	r3, [r4, #12]
 800eae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eaea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eaee:	81a3      	strh	r3, [r4, #12]
 800eaf0:	4632      	mov	r2, r6
 800eaf2:	463b      	mov	r3, r7
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eafa:	f000 b817 	b.w	800eb2c <_write_r>

0800eafe <__sseek>:
 800eafe:	b510      	push	{r4, lr}
 800eb00:	460c      	mov	r4, r1
 800eb02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb06:	f000 f855 	bl	800ebb4 <_lseek_r>
 800eb0a:	1c43      	adds	r3, r0, #1
 800eb0c:	89a3      	ldrh	r3, [r4, #12]
 800eb0e:	bf15      	itete	ne
 800eb10:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb1a:	81a3      	strheq	r3, [r4, #12]
 800eb1c:	bf18      	it	ne
 800eb1e:	81a3      	strhne	r3, [r4, #12]
 800eb20:	bd10      	pop	{r4, pc}

0800eb22 <__sclose>:
 800eb22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb26:	f000 b813 	b.w	800eb50 <_close_r>
	...

0800eb2c <_write_r>:
 800eb2c:	b538      	push	{r3, r4, r5, lr}
 800eb2e:	4d07      	ldr	r5, [pc, #28]	; (800eb4c <_write_r+0x20>)
 800eb30:	4604      	mov	r4, r0
 800eb32:	4608      	mov	r0, r1
 800eb34:	4611      	mov	r1, r2
 800eb36:	2200      	movs	r2, #0
 800eb38:	602a      	str	r2, [r5, #0]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	f7f2 fab2 	bl	80010a4 <_write>
 800eb40:	1c43      	adds	r3, r0, #1
 800eb42:	d102      	bne.n	800eb4a <_write_r+0x1e>
 800eb44:	682b      	ldr	r3, [r5, #0]
 800eb46:	b103      	cbz	r3, 800eb4a <_write_r+0x1e>
 800eb48:	6023      	str	r3, [r4, #0]
 800eb4a:	bd38      	pop	{r3, r4, r5, pc}
 800eb4c:	20006114 	.word	0x20006114

0800eb50 <_close_r>:
 800eb50:	b538      	push	{r3, r4, r5, lr}
 800eb52:	4d06      	ldr	r5, [pc, #24]	; (800eb6c <_close_r+0x1c>)
 800eb54:	2300      	movs	r3, #0
 800eb56:	4604      	mov	r4, r0
 800eb58:	4608      	mov	r0, r1
 800eb5a:	602b      	str	r3, [r5, #0]
 800eb5c:	f7f4 fddb 	bl	8003716 <_close>
 800eb60:	1c43      	adds	r3, r0, #1
 800eb62:	d102      	bne.n	800eb6a <_close_r+0x1a>
 800eb64:	682b      	ldr	r3, [r5, #0]
 800eb66:	b103      	cbz	r3, 800eb6a <_close_r+0x1a>
 800eb68:	6023      	str	r3, [r4, #0]
 800eb6a:	bd38      	pop	{r3, r4, r5, pc}
 800eb6c:	20006114 	.word	0x20006114

0800eb70 <_fstat_r>:
 800eb70:	b538      	push	{r3, r4, r5, lr}
 800eb72:	4d07      	ldr	r5, [pc, #28]	; (800eb90 <_fstat_r+0x20>)
 800eb74:	2300      	movs	r3, #0
 800eb76:	4604      	mov	r4, r0
 800eb78:	4608      	mov	r0, r1
 800eb7a:	4611      	mov	r1, r2
 800eb7c:	602b      	str	r3, [r5, #0]
 800eb7e:	f7f4 fdd6 	bl	800372e <_fstat>
 800eb82:	1c43      	adds	r3, r0, #1
 800eb84:	d102      	bne.n	800eb8c <_fstat_r+0x1c>
 800eb86:	682b      	ldr	r3, [r5, #0]
 800eb88:	b103      	cbz	r3, 800eb8c <_fstat_r+0x1c>
 800eb8a:	6023      	str	r3, [r4, #0]
 800eb8c:	bd38      	pop	{r3, r4, r5, pc}
 800eb8e:	bf00      	nop
 800eb90:	20006114 	.word	0x20006114

0800eb94 <_isatty_r>:
 800eb94:	b538      	push	{r3, r4, r5, lr}
 800eb96:	4d06      	ldr	r5, [pc, #24]	; (800ebb0 <_isatty_r+0x1c>)
 800eb98:	2300      	movs	r3, #0
 800eb9a:	4604      	mov	r4, r0
 800eb9c:	4608      	mov	r0, r1
 800eb9e:	602b      	str	r3, [r5, #0]
 800eba0:	f7f4 fdd5 	bl	800374e <_isatty>
 800eba4:	1c43      	adds	r3, r0, #1
 800eba6:	d102      	bne.n	800ebae <_isatty_r+0x1a>
 800eba8:	682b      	ldr	r3, [r5, #0]
 800ebaa:	b103      	cbz	r3, 800ebae <_isatty_r+0x1a>
 800ebac:	6023      	str	r3, [r4, #0]
 800ebae:	bd38      	pop	{r3, r4, r5, pc}
 800ebb0:	20006114 	.word	0x20006114

0800ebb4 <_lseek_r>:
 800ebb4:	b538      	push	{r3, r4, r5, lr}
 800ebb6:	4d07      	ldr	r5, [pc, #28]	; (800ebd4 <_lseek_r+0x20>)
 800ebb8:	4604      	mov	r4, r0
 800ebba:	4608      	mov	r0, r1
 800ebbc:	4611      	mov	r1, r2
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	602a      	str	r2, [r5, #0]
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	f7f4 fdce 	bl	8003764 <_lseek>
 800ebc8:	1c43      	adds	r3, r0, #1
 800ebca:	d102      	bne.n	800ebd2 <_lseek_r+0x1e>
 800ebcc:	682b      	ldr	r3, [r5, #0]
 800ebce:	b103      	cbz	r3, 800ebd2 <_lseek_r+0x1e>
 800ebd0:	6023      	str	r3, [r4, #0]
 800ebd2:	bd38      	pop	{r3, r4, r5, pc}
 800ebd4:	20006114 	.word	0x20006114

0800ebd8 <memmove>:
 800ebd8:	4288      	cmp	r0, r1
 800ebda:	b510      	push	{r4, lr}
 800ebdc:	eb01 0402 	add.w	r4, r1, r2
 800ebe0:	d902      	bls.n	800ebe8 <memmove+0x10>
 800ebe2:	4284      	cmp	r4, r0
 800ebe4:	4623      	mov	r3, r4
 800ebe6:	d807      	bhi.n	800ebf8 <memmove+0x20>
 800ebe8:	1e43      	subs	r3, r0, #1
 800ebea:	42a1      	cmp	r1, r4
 800ebec:	d008      	beq.n	800ec00 <memmove+0x28>
 800ebee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ebf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ebf6:	e7f8      	b.n	800ebea <memmove+0x12>
 800ebf8:	4402      	add	r2, r0
 800ebfa:	4601      	mov	r1, r0
 800ebfc:	428a      	cmp	r2, r1
 800ebfe:	d100      	bne.n	800ec02 <memmove+0x2a>
 800ec00:	bd10      	pop	{r4, pc}
 800ec02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec0a:	e7f7      	b.n	800ebfc <memmove+0x24>

0800ec0c <__malloc_lock>:
 800ec0c:	4801      	ldr	r0, [pc, #4]	; (800ec14 <__malloc_lock+0x8>)
 800ec0e:	f7ff b9a7 	b.w	800df60 <__retarget_lock_acquire_recursive>
 800ec12:	bf00      	nop
 800ec14:	20006108 	.word	0x20006108

0800ec18 <__malloc_unlock>:
 800ec18:	4801      	ldr	r0, [pc, #4]	; (800ec20 <__malloc_unlock+0x8>)
 800ec1a:	f7ff b9a2 	b.w	800df62 <__retarget_lock_release_recursive>
 800ec1e:	bf00      	nop
 800ec20:	20006108 	.word	0x20006108

0800ec24 <_realloc_r>:
 800ec24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec28:	4680      	mov	r8, r0
 800ec2a:	4614      	mov	r4, r2
 800ec2c:	460e      	mov	r6, r1
 800ec2e:	b921      	cbnz	r1, 800ec3a <_realloc_r+0x16>
 800ec30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec34:	4611      	mov	r1, r2
 800ec36:	f7ff ba67 	b.w	800e108 <_malloc_r>
 800ec3a:	b92a      	cbnz	r2, 800ec48 <_realloc_r+0x24>
 800ec3c:	f7ff f9f8 	bl	800e030 <_free_r>
 800ec40:	4625      	mov	r5, r4
 800ec42:	4628      	mov	r0, r5
 800ec44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec48:	f000 f82e 	bl	800eca8 <_malloc_usable_size_r>
 800ec4c:	4284      	cmp	r4, r0
 800ec4e:	4607      	mov	r7, r0
 800ec50:	d802      	bhi.n	800ec58 <_realloc_r+0x34>
 800ec52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec56:	d812      	bhi.n	800ec7e <_realloc_r+0x5a>
 800ec58:	4621      	mov	r1, r4
 800ec5a:	4640      	mov	r0, r8
 800ec5c:	f7ff fa54 	bl	800e108 <_malloc_r>
 800ec60:	4605      	mov	r5, r0
 800ec62:	2800      	cmp	r0, #0
 800ec64:	d0ed      	beq.n	800ec42 <_realloc_r+0x1e>
 800ec66:	42bc      	cmp	r4, r7
 800ec68:	4622      	mov	r2, r4
 800ec6a:	4631      	mov	r1, r6
 800ec6c:	bf28      	it	cs
 800ec6e:	463a      	movcs	r2, r7
 800ec70:	f7fe fe3a 	bl	800d8e8 <memcpy>
 800ec74:	4631      	mov	r1, r6
 800ec76:	4640      	mov	r0, r8
 800ec78:	f7ff f9da 	bl	800e030 <_free_r>
 800ec7c:	e7e1      	b.n	800ec42 <_realloc_r+0x1e>
 800ec7e:	4635      	mov	r5, r6
 800ec80:	e7df      	b.n	800ec42 <_realloc_r+0x1e>
	...

0800ec84 <_read_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	4d07      	ldr	r5, [pc, #28]	; (800eca4 <_read_r+0x20>)
 800ec88:	4604      	mov	r4, r0
 800ec8a:	4608      	mov	r0, r1
 800ec8c:	4611      	mov	r1, r2
 800ec8e:	2200      	movs	r2, #0
 800ec90:	602a      	str	r2, [r5, #0]
 800ec92:	461a      	mov	r2, r3
 800ec94:	f7f4 fd22 	bl	80036dc <_read>
 800ec98:	1c43      	adds	r3, r0, #1
 800ec9a:	d102      	bne.n	800eca2 <_read_r+0x1e>
 800ec9c:	682b      	ldr	r3, [r5, #0]
 800ec9e:	b103      	cbz	r3, 800eca2 <_read_r+0x1e>
 800eca0:	6023      	str	r3, [r4, #0]
 800eca2:	bd38      	pop	{r3, r4, r5, pc}
 800eca4:	20006114 	.word	0x20006114

0800eca8 <_malloc_usable_size_r>:
 800eca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecac:	1f18      	subs	r0, r3, #4
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	bfbc      	itt	lt
 800ecb2:	580b      	ldrlt	r3, [r1, r0]
 800ecb4:	18c0      	addlt	r0, r0, r3
 800ecb6:	4770      	bx	lr

0800ecb8 <_init>:
 800ecb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecba:	bf00      	nop
 800ecbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecbe:	bc08      	pop	{r3}
 800ecc0:	469e      	mov	lr, r3
 800ecc2:	4770      	bx	lr

0800ecc4 <_fini>:
 800ecc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecc6:	bf00      	nop
 800ecc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecca:	bc08      	pop	{r3}
 800eccc:	469e      	mov	lr, r3
 800ecce:	4770      	bx	lr
