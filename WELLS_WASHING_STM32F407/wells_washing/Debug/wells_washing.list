
wells_washing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e978  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015ec  0800eb08  0800eb08  0001eb08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080100f4  080100f4  00030160  2**0
                  CONTENTS
  4 .ARM          00000008  080100f4  080100f4  000200f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080100fc  080100fc  00030160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080100fc  080100fc  000200fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010100  08010100  00020100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08010104  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030160  2**0
                  CONTENTS
 10 .bss          00005dc8  20000160  20000160  00030160  2**2
                  ALLOC
 11 ._user_heap_stack 0000c000  20005f28  20005f28  00030160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020ffc  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004f1e  00000000  00000000  0005118c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d18  00000000  00000000  000560b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b28  00000000  00000000  00057dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b7c  00000000  00000000  000598f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029d98  00000000  00000000  0008146c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d637c  00000000  00000000  000ab204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00181580  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008354  00000000  00000000  001815d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800eaf0 	.word	0x0800eaf0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800eaf0 	.word	0x0800eaf0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <is_data_init>:

_def_step step;


int is_data_init()
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	if(system_data.flash_data.factory_code != FACTORY_CODE)
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <is_data_init+0x24>)
 800057a:	f8b3 3dd8 	ldrh.w	r3, [r3, #3544]	; 0xdd8
 800057e:	f645 225a 	movw	r2, #23130	; 0x5a5a
 8000582:	4293      	cmp	r3, r2
 8000584:	d001      	beq.n	800058a <is_data_init+0x16>
	{
		return 0;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <is_data_init+0x18>
	}
	return 1;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000017c 	.word	0x2000017c

0800059c <dt_calculator_pg_stepnumber>:

void dt_calculator_pg_stepnumber(void){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	for(int i=0;i<10;i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e037      	b.n	8000618 <dt_calculator_pg_stepnumber+0x7c>
	{
		system_data.pg_stepnumber[i] =0;
 80005a8:	4a20      	ldr	r2, [pc, #128]	; (800062c <dt_calculator_pg_stepnumber+0x90>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80005b0:	005b      	lsls	r3, r3, #1
 80005b2:	4413      	add	r3, r2
 80005b4:	2200      	movs	r2, #0
 80005b6:	809a      	strh	r2, [r3, #4]
		for(int j=0;j<25;j++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	e024      	b.n	8000608 <dt_calculator_pg_stepnumber+0x6c>
		{
			if(system_data.flash_data.Program_para[i][j].type == STEP_TYPE_NONE )
 80005be:	481b      	ldr	r0, [pc, #108]	; (800062c <dt_calculator_pg_stepnumber+0x90>)
 80005c0:	683a      	ldr	r2, [r7, #0]
 80005c2:	6879      	ldr	r1, [r7, #4]
 80005c4:	4613      	mov	r3, r2
 80005c6:	00db      	lsls	r3, r3, #3
 80005c8:	1a9b      	subs	r3, r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80005d0:	fb01 f202 	mul.w	r2, r1, r2
 80005d4:	4413      	add	r3, r2
 80005d6:	4403      	add	r3, r0
 80005d8:	332c      	adds	r3, #44	; 0x2c
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d017      	beq.n	8000610 <dt_calculator_pg_stepnumber+0x74>
			{
				break;
			}
			system_data.pg_stepnumber[i]++;
 80005e0:	4a12      	ldr	r2, [pc, #72]	; (800062c <dt_calculator_pg_stepnumber+0x90>)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	4413      	add	r3, r2
 80005ec:	889b      	ldrh	r3, [r3, #4]
 80005ee:	3301      	adds	r3, #1
 80005f0:	b299      	uxth	r1, r3
 80005f2:	4a0e      	ldr	r2, [pc, #56]	; (800062c <dt_calculator_pg_stepnumber+0x90>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f203 63ec 	addw	r3, r3, #1772	; 0x6ec
 80005fa:	005b      	lsls	r3, r3, #1
 80005fc:	4413      	add	r3, r2
 80005fe:	460a      	mov	r2, r1
 8000600:	809a      	strh	r2, [r3, #4]
		for(int j=0;j<25;j++)
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	3301      	adds	r3, #1
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	2b18      	cmp	r3, #24
 800060c:	ddd7      	ble.n	80005be <dt_calculator_pg_stepnumber+0x22>
 800060e:	e000      	b.n	8000612 <dt_calculator_pg_stepnumber+0x76>
				break;
 8000610:	bf00      	nop
	for(int i=0;i<10;i++)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	3301      	adds	r3, #1
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b09      	cmp	r3, #9
 800061c:	ddc4      	ble.n	80005a8 <dt_calculator_pg_stepnumber+0xc>
		}
	}
}
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	2000017c 	.word	0x2000017c

08000630 <is_step_differrent>:
//			system_data.pg_stepnumber[i]++;
//		}
	}
}

int is_step_differrent(uint8_t pg,uint8_t stepindex ,_def_step step){
 8000630:	b082      	sub	sp, #8
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	f107 0c10 	add.w	ip, r7, #16
 800063c:	e88c 000c 	stmia.w	ip, {r2, r3}
 8000640:	4603      	mov	r3, r0
 8000642:	71fb      	strb	r3, [r7, #7]
 8000644:	460b      	mov	r3, r1
 8000646:	71bb      	strb	r3, [r7, #6]
	return memcmp(&system_data.flash_data.Program_para[pg][stepindex], &step, sizeof(_def_step));
 8000648:	79f9      	ldrb	r1, [r7, #7]
 800064a:	79ba      	ldrb	r2, [r7, #6]
 800064c:	4613      	mov	r3, r2
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	1a9b      	subs	r3, r3, r2
 8000652:	005b      	lsls	r3, r3, #1
 8000654:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000658:	fb01 f202 	mul.w	r2, r1, r2
 800065c:	4413      	add	r3, r2
 800065e:	3328      	adds	r3, #40	; 0x28
 8000660:	4a08      	ldr	r2, [pc, #32]	; (8000684 <is_step_differrent+0x54>)
 8000662:	4413      	add	r3, r2
 8000664:	3304      	adds	r3, #4
 8000666:	220e      	movs	r2, #14
 8000668:	f107 0110 	add.w	r1, r7, #16
 800066c:	4618      	mov	r0, r3
 800066e:	f00d f847 	bl	800d700 <memcmp>
 8000672:	4603      	mov	r3, r0
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800067e:	b002      	add	sp, #8
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	2000017c 	.word	0x2000017c

08000688 <dt_Modify_step>:

void dt_Modify_step(uint8_t pg,uint8_t stepindex ,_def_step step)
{
 8000688:	b082      	sub	sp, #8
 800068a:	b5b0      	push	{r4, r5, r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af02      	add	r7, sp, #8
 8000690:	f107 0418 	add.w	r4, r7, #24
 8000694:	e884 000c 	stmia.w	r4, {r2, r3}
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	460b      	mov	r3, r1
 800069e:	71bb      	strb	r3, [r7, #6]
	if(is_step_differrent(pg,stepindex ,step))
 80006a0:	79bd      	ldrb	r5, [r7, #6]
 80006a2:	79fc      	ldrb	r4, [r7, #7]
 80006a4:	466b      	mov	r3, sp
 80006a6:	f107 0220 	add.w	r2, r7, #32
 80006aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ae:	6018      	str	r0, [r3, #0]
 80006b0:	3304      	adds	r3, #4
 80006b2:	8019      	strh	r1, [r3, #0]
 80006b4:	f107 0318 	add.w	r3, r7, #24
 80006b8:	cb0c      	ldmia	r3, {r2, r3}
 80006ba:	4629      	mov	r1, r5
 80006bc:	4620      	mov	r0, r4
 80006be:	f7ff ffb7 	bl	8000630 <is_step_differrent>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d016      	beq.n	80006f6 <dt_Modify_step+0x6e>
	{
		memcpy(&system_data.flash_data.Program_para[pg][stepindex],&step,sizeof(_def_step));
 80006c8:	79f9      	ldrb	r1, [r7, #7]
 80006ca:	79ba      	ldrb	r2, [r7, #6]
 80006cc:	4613      	mov	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	005b      	lsls	r3, r3, #1
 80006d4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80006d8:	fb01 f202 	mul.w	r2, r1, r2
 80006dc:	4413      	add	r3, r2
 80006de:	3328      	adds	r3, #40	; 0x28
 80006e0:	4a08      	ldr	r2, [pc, #32]	; (8000704 <dt_Modify_step+0x7c>)
 80006e2:	4413      	add	r3, r2
 80006e4:	3304      	adds	r3, #4
 80006e6:	220e      	movs	r2, #14
 80006e8:	f107 0118 	add.w	r1, r7, #24
 80006ec:	4618      	mov	r0, r3
 80006ee:	f00d f817 	bl	800d720 <memcpy>
		dt_store_system_data();
 80006f2:	f000 f833 	bl	800075c <dt_store_system_data>
	}
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000700:	b002      	add	sp, #8
 8000702:	4770      	bx	lr
 8000704:	2000017c 	.word	0x2000017c

08000708 <dt_system_data_init>:

void dt_system_data_init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
	read_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS);
 800070c:	4a10      	ldr	r2, [pc, #64]	; (8000750 <dt_system_data_init+0x48>)
 800070e:	f640 51dc 	movw	r1, #3548	; 0xddc
 8000712:	4810      	ldr	r0, [pc, #64]	; (8000754 <dt_system_data_init+0x4c>)
 8000714:	f000 fbca 	bl	8000eac <read_flash>
	if(!is_data_init())
 8000718:	f7ff ff2c 	bl	8000574 <is_data_init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d112      	bne.n	8000748 <dt_system_data_init+0x40>
	{
		memcpy(&system_data.flash_data,&flash_defaul,sizeof(_flash_data));
 8000722:	4a0c      	ldr	r2, [pc, #48]	; (8000754 <dt_system_data_init+0x4c>)
 8000724:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <dt_system_data_init+0x50>)
 8000726:	4610      	mov	r0, r2
 8000728:	4619      	mov	r1, r3
 800072a:	f640 53dc 	movw	r3, #3548	; 0xddc
 800072e:	461a      	mov	r2, r3
 8000730:	f00c fff6 	bl	800d720 <memcpy>
		if(write_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS) != HAL_OK)
 8000734:	4a06      	ldr	r2, [pc, #24]	; (8000750 <dt_system_data_init+0x48>)
 8000736:	f640 51dc 	movw	r1, #3548	; 0xddc
 800073a:	4806      	ldr	r0, [pc, #24]	; (8000754 <dt_system_data_init+0x4c>)
 800073c:	f000 fb78 	bl	8000e30 <write_flash>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d000      	beq.n	8000748 <dt_system_data_init+0x40>
		{
			//do when write flash fail
			__NOP();
 8000746:	bf00      	nop
		}
	}
	dt_calculator_pg_stepnumber();
 8000748:	f7ff ff28 	bl	800059c <dt_calculator_pg_stepnumber>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	08060000 	.word	0x08060000
 8000754:	2000017c 	.word	0x2000017c
 8000758:	0800f260 	.word	0x0800f260

0800075c <dt_store_system_data>:

HAL_StatusTypeDef dt_store_system_data(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res = write_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS);
 8000762:	4a0a      	ldr	r2, [pc, #40]	; (800078c <dt_store_system_data+0x30>)
 8000764:	f640 51dc 	movw	r1, #3548	; 0xddc
 8000768:	4809      	ldr	r0, [pc, #36]	; (8000790 <dt_store_system_data+0x34>)
 800076a:	f000 fb61 	bl	8000e30 <write_flash>
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
	if( res != HAL_OK){
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d004      	beq.n	8000782 <dt_store_system_data+0x26>
		printf("wirte flash fail! error code : %d",res);
 8000778:	79fb      	ldrb	r3, [r7, #7]
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	; (8000794 <dt_store_system_data+0x38>)
 800077e:	f00c ffe5 	bl	800d74c <iprintf>
	}
	return res;
 8000782:	79fb      	ldrb	r3, [r7, #7]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	08060000 	.word	0x08060000
 8000790:	2000017c 	.word	0x2000017c
 8000794:	0800eb08 	.word	0x0800eb08

08000798 <Dw_write>:
	memset(&s_log,0,sizeof(s_log));
}


static inline void Dw_write(uint8_t *data,uint16_t len)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	807b      	strh	r3, [r7, #2]
	uart_transmit_block(data, len, 1000);
 80007a4:	887b      	ldrh	r3, [r7, #2]
 80007a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007aa:	4619      	mov	r1, r3
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f002 ff97 	bl	80036e0 <uart_transmit_block>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <Dwin_Write_VP>:

	}
}

int Dwin_Write_VP(uint16_t Addr,uint16_t *data,uint16_t len)
{
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b09c      	sub	sp, #112	; 0x70
 80007be:	af00      	add	r7, sp, #0
 80007c0:	4603      	mov	r3, r0
 80007c2:	6039      	str	r1, [r7, #0]
 80007c4:	80fb      	strh	r3, [r7, #6]
 80007c6:	4613      	mov	r3, r2
 80007c8:	80bb      	strh	r3, [r7, #4]
	uint8_t DwinBuf[100];
	DwinBuf[0]= 0x5A;
 80007ca:	235a      	movs	r3, #90	; 0x5a
 80007cc:	723b      	strb	r3, [r7, #8]
	DwinBuf[1]= 0xA5;
 80007ce:	23a5      	movs	r3, #165	; 0xa5
 80007d0:	727b      	strb	r3, [r7, #9]
	DwinBuf[2]= (len+1)*2 +1;  //
 80007d2:	88bb      	ldrh	r3, [r7, #4]
 80007d4:	3301      	adds	r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	3301      	adds	r3, #1
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	72bb      	strb	r3, [r7, #10]
	DwinBuf[3]= 0x82;
 80007e2:	2382      	movs	r3, #130	; 0x82
 80007e4:	72fb      	strb	r3, [r7, #11]
	DwinBuf[4]= Addr>>8;
 80007e6:	88fb      	ldrh	r3, [r7, #6]
 80007e8:	0a1b      	lsrs	r3, r3, #8
 80007ea:	b29b      	uxth	r3, r3
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	733b      	strb	r3, [r7, #12]
	DwinBuf[5]= Addr;
 80007f0:	88fb      	ldrh	r3, [r7, #6]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	737b      	strb	r3, [r7, #13]
	for(int i=0;i<len;i++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80007fa:	e01f      	b.n	800083c <Dwin_Write_VP+0x82>
	{
		DwinBuf[6+i*2] = data[i]/256;
 80007fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	683a      	ldr	r2, [r7, #0]
 8000802:	4413      	add	r3, r2
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	0a1b      	lsrs	r3, r3, #8
 8000808:	b29a      	uxth	r2, r3
 800080a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800080c:	3303      	adds	r3, #3
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	3370      	adds	r3, #112	; 0x70
 8000814:	443b      	add	r3, r7
 8000816:	f803 2c68 	strb.w	r2, [r3, #-104]
		DwinBuf[6+i*2+1] = data[i];
 800081a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800081c:	005b      	lsls	r3, r3, #1
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	4413      	add	r3, r2
 8000822:	881a      	ldrh	r2, [r3, #0]
 8000824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000826:	3303      	adds	r3, #3
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	3301      	adds	r3, #1
 800082c:	b2d2      	uxtb	r2, r2
 800082e:	3370      	adds	r3, #112	; 0x70
 8000830:	443b      	add	r3, r7
 8000832:	f803 2c68 	strb.w	r2, [r3, #-104]
	for(int i=0;i<len;i++)
 8000836:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000838:	3301      	adds	r3, #1
 800083a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800083c:	88bb      	ldrh	r3, [r7, #4]
 800083e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000840:	429a      	cmp	r2, r3
 8000842:	dbdb      	blt.n	80007fc <Dwin_Write_VP+0x42>
	}
    len = (len+1)*2 +4;
 8000844:	88bb      	ldrh	r3, [r7, #4]
 8000846:	3303      	adds	r3, #3
 8000848:	b29b      	uxth	r3, r3
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	80bb      	strh	r3, [r7, #4]
    Dw_write(DwinBuf, len);
 800084e:	88ba      	ldrh	r2, [r7, #4]
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	4611      	mov	r1, r2
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff ff9e 	bl	8000798 <Dw_write>
	return 1;
 800085c:	2301      	movs	r3, #1
}
 800085e:	4618      	mov	r0, r3
 8000860:	3770      	adds	r7, #112	; 0x70
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}

08000866 <Dwin_switch_page>:
    len = (len+1)*2 +4;
    Dw_write(DwinBuf, len);
	return 1;
}
void Dwin_switch_page(int page_index)
{
 8000866:	b580      	push	{r7, lr}
 8000868:	b084      	sub	sp, #16
 800086a:	af00      	add	r7, sp, #0
 800086c:	6078      	str	r0, [r7, #4]
	uint16_t Buf[2] = {0x5A01,00};
 800086e:	f645 2301 	movw	r3, #23041	; 0x5a01
 8000872:	81bb      	strh	r3, [r7, #12]
 8000874:	2300      	movs	r3, #0
 8000876:	81fb      	strh	r3, [r7, #14]
	Buf[1] = page_index;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	b29b      	uxth	r3, r3
 800087c:	81fb      	strh	r3, [r7, #14]
	Dwin_Write_VP(0X0084,Buf,2);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	2202      	movs	r2, #2
 8000884:	4619      	mov	r1, r3
 8000886:	2084      	movs	r0, #132	; 0x84
 8000888:	f7ff ff97 	bl	80007ba <Dwin_Write_VP>
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}

08000894 <Dwin_init>:

void Dwin_init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	Dwin_reset();
 8000898:	f000 f812 	bl	80008c0 <Dwin_reset>
	HAL_Delay(1000);
 800089c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a0:	f002 ffce 	bl	8003840 <HAL_Delay>
	Dwin_switch_page(05);
 80008a4:	2005      	movs	r0, #5
 80008a6:	f7ff ffde 	bl	8000866 <Dwin_switch_page>
	memset(&s_log,0,sizeof(s_log));
 80008aa:	f240 2206 	movw	r2, #518	; 0x206
 80008ae:	2100      	movs	r1, #0
 80008b0:	4802      	ldr	r0, [pc, #8]	; (80008bc <Dwin_init+0x28>)
 80008b2:	f00c ff43 	bl	800d73c <memset>
}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000f80 	.word	0x20000f80

080008c0 <Dwin_reset>:


void Dwin_reset(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	uint16_t Buf[2] = {0x55AA,0x5AA5};
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <Dwin_reset+0x20>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	607b      	str	r3, [r7, #4]
	Dwin_Write_VP(0X0004,Buf,2);
 80008cc:	1d3b      	adds	r3, r7, #4
 80008ce:	2202      	movs	r2, #2
 80008d0:	4619      	mov	r1, r3
 80008d2:	2004      	movs	r0, #4
 80008d4:	f7ff ff71 	bl	80007ba <Dwin_Write_VP>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	0800eb38 	.word	0x0800eb38

080008e4 <dw_update_setup_page>:

int dw_update_setup_page(uint8_t pg,uint8_t stepnumber){
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	460a      	mov	r2, r1
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
	if((pg < 1 ) || (stepnumber <1)){
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d002      	beq.n	8000900 <dw_update_setup_page+0x1c>
 80008fa:	79bb      	ldrb	r3, [r7, #6]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d102      	bne.n	8000906 <dw_update_setup_page+0x22>
			return -1;
 8000900:	f04f 33ff 	mov.w	r3, #4294967295
 8000904:	e056      	b.n	80009b4 <dw_update_setup_page+0xd0>
	}
	uint16_t data[10];

	data[0] = pg;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	b29b      	uxth	r3, r3
 800090a:	813b      	strh	r3, [r7, #8]
	data[1] = stepnumber;
 800090c:	79bb      	ldrb	r3, [r7, #6]
 800090e:	b29b      	uxth	r3, r3
 8000910:	817b      	strh	r3, [r7, #10]
	data[2] = system_data.flash_data.Program_para[pg-1][stepnumber-1].type;
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	1e59      	subs	r1, r3, #1
 8000916:	79bb      	ldrb	r3, [r7, #6]
 8000918:	1e5a      	subs	r2, r3, #1
 800091a:	4828      	ldr	r0, [pc, #160]	; (80009bc <dw_update_setup_page+0xd8>)
 800091c:	4613      	mov	r3, r2
 800091e:	00db      	lsls	r3, r3, #3
 8000920:	1a9b      	subs	r3, r3, r2
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8000928:	fb01 f202 	mul.w	r2, r1, r2
 800092c:	4413      	add	r3, r2
 800092e:	4403      	add	r3, r0
 8000930:	332c      	adds	r3, #44	; 0x2c
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	b29b      	uxth	r3, r3
 8000936:	81bb      	strh	r3, [r7, #12]
	data[3] = system_data.flash_data.Program_para[pg-1][stepnumber-1].wells;
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	1e59      	subs	r1, r3, #1
 800093c:	79bb      	ldrb	r3, [r7, #6]
 800093e:	1e5a      	subs	r2, r3, #1
 8000940:	481e      	ldr	r0, [pc, #120]	; (80009bc <dw_update_setup_page+0xd8>)
 8000942:	4613      	mov	r3, r2
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	1a9b      	subs	r3, r3, r2
 8000948:	005b      	lsls	r3, r3, #1
 800094a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800094e:	fb01 f202 	mul.w	r2, r1, r2
 8000952:	4413      	add	r3, r2
 8000954:	4403      	add	r3, r0
 8000956:	332d      	adds	r3, #45	; 0x2d
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	b29b      	uxth	r3, r3
 800095c:	81fb      	strh	r3, [r7, #14]
	for(int i=4;i<10;i++)
 800095e:	2304      	movs	r3, #4
 8000960:	61fb      	str	r3, [r7, #28]
 8000962:	e01b      	b.n	800099c <dw_update_setup_page+0xb8>
	{
		data[i] = system_data.flash_data.Program_para[pg-1][stepnumber-1].timing[i-4];
 8000964:	79fb      	ldrb	r3, [r7, #7]
 8000966:	1e58      	subs	r0, r3, #1
 8000968:	79bb      	ldrb	r3, [r7, #6]
 800096a:	1e5a      	subs	r2, r3, #1
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	1f19      	subs	r1, r3, #4
 8000970:	4c12      	ldr	r4, [pc, #72]	; (80009bc <dw_update_setup_page+0xd8>)
 8000972:	4613      	mov	r3, r2
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	1a9b      	subs	r3, r3, r2
 8000978:	22af      	movs	r2, #175	; 0xaf
 800097a:	fb00 f202 	mul.w	r2, r0, r2
 800097e:	4413      	add	r3, r2
 8000980:	440b      	add	r3, r1
 8000982:	3314      	adds	r3, #20
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	4423      	add	r3, r4
 8000988:	88da      	ldrh	r2, [r3, #6]
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	3320      	adds	r3, #32
 8000990:	443b      	add	r3, r7
 8000992:	f823 2c18 	strh.w	r2, [r3, #-24]
	for(int i=4;i<10;i++)
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	3301      	adds	r3, #1
 800099a:	61fb      	str	r3, [r7, #28]
 800099c:	69fb      	ldr	r3, [r7, #28]
 800099e:	2b09      	cmp	r3, #9
 80009a0:	dde0      	ble.n	8000964 <dw_update_setup_page+0x80>
	}
	Dwin_Write_VP(VP_SETUP_PARA,data,10);
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	220a      	movs	r2, #10
 80009a8:	4619      	mov	r1, r3
 80009aa:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 80009ae:	f7ff ff04 	bl	80007ba <Dwin_Write_VP>
	return 1;
 80009b2:	2301      	movs	r3, #1
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3724      	adds	r7, #36	; 0x24
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd90      	pop	{r4, r7, pc}
 80009bc:	2000017c 	.word	0x2000017c

080009c0 <show_setup_page>:

void show_setup_page(uint8_t pg,uint8_t stepnumber){
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	4603      	mov	r3, r0
 80009c8:	460a      	mov	r2, r1
 80009ca:	71fb      	strb	r3, [r7, #7]
 80009cc:	4613      	mov	r3, r2
 80009ce:	71bb      	strb	r3, [r7, #6]
	if((pg < 1 ) || (stepnumber <1)){
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d037      	beq.n	8000a46 <show_setup_page+0x86>
 80009d6:	79bb      	ldrb	r3, [r7, #6]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d034      	beq.n	8000a46 <show_setup_page+0x86>
		return;
	}
	switch(system_data.flash_data.Program_para[pg-1][stepnumber-1].type){
 80009dc:	79fb      	ldrb	r3, [r7, #7]
 80009de:	1e59      	subs	r1, r3, #1
 80009e0:	79bb      	ldrb	r3, [r7, #6]
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	481a      	ldr	r0, [pc, #104]	; (8000a50 <show_setup_page+0x90>)
 80009e6:	4613      	mov	r3, r2
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	1a9b      	subs	r3, r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80009f2:	fb01 f202 	mul.w	r2, r1, r2
 80009f6:	4413      	add	r3, r2
 80009f8:	4403      	add	r3, r0
 80009fa:	332c      	adds	r3, #44	; 0x2c
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	2b03      	cmp	r3, #3
 8000a00:	d81a      	bhi.n	8000a38 <show_setup_page+0x78>
 8000a02:	a201      	add	r2, pc, #4	; (adr r2, 8000a08 <show_setup_page+0x48>)
 8000a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a08:	08000a19 	.word	0x08000a19
 8000a0c:	08000a21 	.word	0x08000a21
 8000a10:	08000a29 	.word	0x08000a29
 8000a14:	08000a31 	.word	0x08000a31
		case (STEP_TYPE_NONE):
				Dwin_switch_page(PAGE_SETUP_STEP_NONE);
 8000a18:	2002      	movs	r0, #2
 8000a1a:	f7ff ff24 	bl	8000866 <Dwin_switch_page>
				break;
 8000a1e:	e00b      	b.n	8000a38 <show_setup_page+0x78>
		case (STEP_TYPE_SHAKE):
				Dwin_switch_page(PAGE_SETUP_STEP_SHAKE);
 8000a20:	2002      	movs	r0, #2
 8000a22:	f7ff ff20 	bl	8000866 <Dwin_switch_page>
				break;
 8000a26:	e007      	b.n	8000a38 <show_setup_page+0x78>
		case (STEP_TYPE_WASHING):
				Dwin_switch_page(PAGE_SETUP_STEP_WASHING);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f7ff ff1c 	bl	8000866 <Dwin_switch_page>
				break;
 8000a2e:	e003      	b.n	8000a38 <show_setup_page+0x78>
		case (STEP_TYPE_DRYING):
				Dwin_switch_page(PAGE_SETUP_STEP_DRYING);
 8000a30:	2004      	movs	r0, #4
 8000a32:	f7ff ff18 	bl	8000866 <Dwin_switch_page>
				break;
 8000a36:	bf00      	nop
	}
	dw_update_setup_page(pg,stepnumber);
 8000a38:	79ba      	ldrb	r2, [r7, #6]
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f7ff ff50 	bl	80008e4 <dw_update_setup_page>
 8000a44:	e000      	b.n	8000a48 <show_setup_page+0x88>
		return;
 8000a46:	bf00      	nop
}
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	2000017c 	.word	0x2000017c

08000a54 <dwin_update_step>:
//                 2F  FF      2F FF   30  00
//                                  8      10  11  12  13 14  15  16
//{5A}{A5}{18}{83}{3A}{00}{0A}{00}{00}{00}{01}{00}{01}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}
void dwin_update_step(uint8_t *data){
 8000a54:	b5b0      	push	{r4, r5, r7, lr}
 8000a56:	b08a      	sub	sp, #40	; 0x28
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	6078      	str	r0, [r7, #4]
	_def_step step;
	uint8_t pg = data[8]; // 0x3000
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	7a1b      	ldrb	r3, [r3, #8]
 8000a60:	76fb      	strb	r3, [r7, #27]
	uint8_t stepindex = data[10]; // 0x3001
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	7a9b      	ldrb	r3, [r3, #10]
 8000a66:	76bb      	strb	r3, [r7, #26]
	step.type  =data[12];
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	7b1b      	ldrb	r3, [r3, #12]
 8000a6c:	733b      	strb	r3, [r7, #12]
	step.wells =data[14];
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	7b9b      	ldrb	r3, [r3, #14]
 8000a72:	737b      	strb	r3, [r7, #13]
	for(int i=0;i<6;i++){
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
 8000a78:	e01c      	b.n	8000ab4 <dwin_update_step+0x60>
		step.timing[i] = (uint16_t)data[15+i*2]*256 + data[16+i*2];
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	330f      	adds	r3, #15
 8000a80:	461a      	mov	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4413      	add	r3, r2
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b29b      	uxth	r3, r3
 8000a8a:	021b      	lsls	r3, r3, #8
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3308      	adds	r3, #8
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4619      	mov	r1, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	440b      	add	r3, r1
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	4413      	add	r3, r2
 8000aa0:	b29a      	uxth	r2, r3
 8000aa2:	69fb      	ldr	r3, [r7, #28]
 8000aa4:	005b      	lsls	r3, r3, #1
 8000aa6:	3320      	adds	r3, #32
 8000aa8:	443b      	add	r3, r7
 8000aaa:	f823 2c12 	strh.w	r2, [r3, #-18]
	for(int i=0;i<6;i++){
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	61fb      	str	r3, [r7, #28]
 8000ab4:	69fb      	ldr	r3, [r7, #28]
 8000ab6:	2b05      	cmp	r3, #5
 8000ab8:	dddf      	ble.n	8000a7a <dwin_update_step+0x26>
	}

	dt_Modify_step(pg-1, stepindex-1, step);
 8000aba:	7efb      	ldrb	r3, [r7, #27]
 8000abc:	3b01      	subs	r3, #1
 8000abe:	b2dc      	uxtb	r4, r3
 8000ac0:	7ebb      	ldrb	r3, [r7, #26]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	b2dd      	uxtb	r5, r3
 8000ac6:	466b      	mov	r3, sp
 8000ac8:	f107 0214 	add.w	r2, r7, #20
 8000acc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ad0:	6018      	str	r0, [r3, #0]
 8000ad2:	3304      	adds	r3, #4
 8000ad4:	8019      	strh	r1, [r3, #0]
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	cb0c      	ldmia	r3, {r2, r3}
 8000adc:	4629      	mov	r1, r5
 8000ade:	4620      	mov	r0, r4
 8000ae0:	f7ff fdd2 	bl	8000688 <dt_Modify_step>
}
 8000ae4:	bf00      	nop
 8000ae6:	3720      	adds	r7, #32
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bdb0      	pop	{r4, r5, r7, pc}

08000aec <dwin_start_program>:

void dwin_start_program(uint8_t pg){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b09c      	sub	sp, #112	; 0x70
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]

//	s_log.s_size = sprintf(s_log.log,"\r\nIF I DIE");
	Dwin_switch_page(PAGE_MANUAL_CONTROL);
 8000af6:	2005      	movs	r0, #5
 8000af8:	f7ff feb5 	bl	8000866 <Dwin_switch_page>
//	s_log_clear();
	HAL_Delay(1);
 8000afc:	2001      	movs	r0, #1
 8000afe:	f002 fe9f 	bl	8003840 <HAL_Delay>
	char tmp[100];
	sprintf(tmp,"START PROGRAM %d",pg);
 8000b02:	79fa      	ldrb	r2, [r7, #7]
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	4907      	ldr	r1, [pc, #28]	; (8000b28 <dwin_start_program+0x3c>)
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f00c feac 	bl	800d868 <siprintf>
	pg_start(pg-1, 0);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	b2db      	uxtb	r3, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 ffeb 	bl	8002af4 <pg_start>

//	s_log_add_1_line(tmp);
//	Dwin_Write_VP_String(0x3800,s_log.log, s_log.s_size);
}
 8000b1e:	bf00      	nop
 8000b20:	3770      	adds	r7, #112	; 0x70
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	0800eb3c 	.word	0x0800eb3c

08000b2c <dw_process_rx_buffer>:

static uint8_t current_pg_setup;
static uint8_t current_step_setup;
int dw_process_rx_buffer(uint8_t *data,uint16_t size){ //USART_CR2_TOEN
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	807b      	strh	r3, [r7, #2]

	if(size < 5){
 8000b38:	887b      	ldrh	r3, [r7, #2]
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	d802      	bhi.n	8000b44 <dw_process_rx_buffer+0x18>
		return -1;
 8000b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b42:	e0f4      	b.n	8000d2e <dw_process_rx_buffer+0x202>
	}
	if(data[0] != 0x5A && data[1] != 0xA5 ){
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b5a      	cmp	r3, #90	; 0x5a
 8000b4a:	d007      	beq.n	8000b5c <dw_process_rx_buffer+0x30>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	2ba5      	cmp	r3, #165	; 0xa5
 8000b54:	d002      	beq.n	8000b5c <dw_process_rx_buffer+0x30>
		return -2;
 8000b56:	f06f 0301 	mvn.w	r3, #1
 8000b5a:	e0e8      	b.n	8000d2e <dw_process_rx_buffer+0x202>
	}
	uint16_t code = data[4];
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	3304      	adds	r3, #4
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	81fb      	strh	r3, [r7, #14]
	code = code*256+ data[5];
 8000b64:	89fb      	ldrh	r3, [r7, #14]
 8000b66:	021b      	lsls	r3, r3, #8
 8000b68:	b29a      	uxth	r2, r3
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3305      	adds	r3, #5
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	81fb      	strh	r3, [r7, #14]
	uint16_t value;
	switch (code) {
 8000b76:	89fb      	ldrh	r3, [r7, #14]
 8000b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b7c:	f000 80ce 	beq.w	8000d1c <dw_process_rx_buffer+0x1f0>
 8000b80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b84:	f300 80d1 	bgt.w	8000d2a <dw_process_rx_buffer+0x1fe>
 8000b88:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 8000b8c:	d072      	beq.n	8000c74 <dw_process_rx_buffer+0x148>
 8000b8e:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 8000b92:	f300 80ca 	bgt.w	8000d2a <dw_process_rx_buffer+0x1fe>
 8000b96:	f243 1201 	movw	r2, #12545	; 0x3101
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d064      	beq.n	8000c68 <dw_process_rx_buffer+0x13c>
 8000b9e:	f243 1201 	movw	r2, #12545	; 0x3101
 8000ba2:	4293      	cmp	r3, r2
 8000ba4:	f300 80c1 	bgt.w	8000d2a <dw_process_rx_buffer+0x1fe>
 8000ba8:	f243 0201 	movw	r2, #12289	; 0x3001
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d04a      	beq.n	8000c46 <dw_process_rx_buffer+0x11a>
 8000bb0:	f243 0201 	movw	r2, #12289	; 0x3001
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	f300 80b8 	bgt.w	8000d2a <dw_process_rx_buffer+0x1fe>
 8000bba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000bbe:	d030      	beq.n	8000c22 <dw_process_rx_buffer+0xf6>
 8000bc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000bc4:	f300 80b1 	bgt.w	8000d2a <dw_process_rx_buffer+0x1fe>
 8000bc8:	f242 5201 	movw	r2, #9473	; 0x2501
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	f000 80a1 	beq.w	8000d14 <dw_process_rx_buffer+0x1e8>
 8000bd2:	f242 5201 	movw	r2, #9473	; 0x2501
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	f300 80a7 	bgt.w	8000d2a <dw_process_rx_buffer+0x1fe>
 8000bdc:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 8000be0:	f000 8094 	beq.w	8000d0c <dw_process_rx_buffer+0x1e0>
 8000be4:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 8000be8:	f300 809f 	bgt.w	8000d2a <dw_process_rx_buffer+0x1fe>
 8000bec:	f242 3205 	movw	r2, #8965	; 0x2305
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d067      	beq.n	8000cc4 <dw_process_rx_buffer+0x198>
 8000bf4:	f242 3205 	movw	r2, #8965	; 0x2305
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	f300 8096 	bgt.w	8000d2a <dw_process_rx_buffer+0x1fe>
 8000bfe:	f242 3204 	movw	r2, #8964	; 0x2304
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d070      	beq.n	8000ce8 <dw_process_rx_buffer+0x1bc>
 8000c06:	f242 3204 	movw	r2, #8964	; 0x2304
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	f300 808d 	bgt.w	8000d2a <dw_process_rx_buffer+0x1fe>
 8000c10:	f242 2204 	movw	r2, #8708	; 0x2204
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d043      	beq.n	8000ca0 <dw_process_rx_buffer+0x174>
 8000c18:	f242 2205 	movw	r2, #8709	; 0x2205
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d02d      	beq.n	8000c7c <dw_process_rx_buffer+0x150>
		case BT_START_PG:
				dwin_start_program(data[8]);
				break;

		default:
			break;
 8000c20:	e083      	b.n	8000d2a <dw_process_rx_buffer+0x1fe>
				current_pg_setup=value = data[8];
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	3308      	adds	r3, #8
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	81bb      	strh	r3, [r7, #12]
 8000c2a:	89bb      	ldrh	r3, [r7, #12]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b42      	ldr	r3, [pc, #264]	; (8000d38 <dw_process_rx_buffer+0x20c>)
 8000c30:	701a      	strb	r2, [r3, #0]
				current_step_setup =1;
 8000c32:	4b42      	ldr	r3, [pc, #264]	; (8000d3c <dw_process_rx_buffer+0x210>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
				show_setup_page(value,1);
 8000c38:	89bb      	ldrh	r3, [r7, #12]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff febe 	bl	80009c0 <show_setup_page>
			break;
 8000c44:	e072      	b.n	8000d2c <dw_process_rx_buffer+0x200>
				current_step_setup = value = data[8];
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	3308      	adds	r3, #8
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	81bb      	strh	r3, [r7, #12]
 8000c4e:	89bb      	ldrh	r3, [r7, #12]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4b3a      	ldr	r3, [pc, #232]	; (8000d3c <dw_process_rx_buffer+0x210>)
 8000c54:	701a      	strb	r2, [r3, #0]
				show_setup_page(current_pg_setup,value);
 8000c56:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <dw_process_rx_buffer+0x20c>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	89ba      	ldrh	r2, [r7, #12]
 8000c5c:	b2d2      	uxtb	r2, r2
 8000c5e:	4611      	mov	r1, r2
 8000c60:	4618      	mov	r0, r3
 8000c62:	f7ff fead 	bl	80009c0 <show_setup_page>
			break;
 8000c66:	e061      	b.n	8000d2c <dw_process_rx_buffer+0x200>
				dw_update_step_numbers();
 8000c68:	f000 f86e 	bl	8000d48 <dw_update_step_numbers>
				current_pg_setup =0;
 8000c6c:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <dw_process_rx_buffer+0x20c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
			break;
 8000c72:	e05b      	b.n	8000d2c <dw_process_rx_buffer+0x200>
				dwin_update_step(data);
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff feed 	bl	8000a54 <dwin_update_step>
				break;
 8000c7a:	e057      	b.n	8000d2c <dw_process_rx_buffer+0x200>
				value = (uint16_t)data[7]*256+data[8];
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	3307      	adds	r3, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	021b      	lsls	r3, r3, #8
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	3308      	adds	r3, #8
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4413      	add	r3, r2
 8000c92:	81bb      	strh	r3, [r7, #12]
				step_mt_move_foward(&x_motor, value);
 8000c94:	89bb      	ldrh	r3, [r7, #12]
 8000c96:	4619      	mov	r1, r3
 8000c98:	4829      	ldr	r0, [pc, #164]	; (8000d40 <dw_process_rx_buffer+0x214>)
 8000c9a:	f000 ff5d 	bl	8001b58 <step_mt_move_foward>
				break;
 8000c9e:	e045      	b.n	8000d2c <dw_process_rx_buffer+0x200>
				value = (uint16_t)data[7]*256+data[8];
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3307      	adds	r3, #7
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	021b      	lsls	r3, r3, #8
 8000caa:	b29a      	uxth	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3308      	adds	r3, #8
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	4413      	add	r3, r2
 8000cb6:	81bb      	strh	r3, [r7, #12]
				step_mt_move_backward(&x_motor, value);
 8000cb8:	89bb      	ldrh	r3, [r7, #12]
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4820      	ldr	r0, [pc, #128]	; (8000d40 <dw_process_rx_buffer+0x214>)
 8000cbe:	f000 ff67 	bl	8001b90 <step_mt_move_backward>
				break;
 8000cc2:	e033      	b.n	8000d2c <dw_process_rx_buffer+0x200>
				value = (uint16_t)data[7]*256+data[8];
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3307      	adds	r3, #7
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	021b      	lsls	r3, r3, #8
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3308      	adds	r3, #8
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	4413      	add	r3, r2
 8000cda:	81bb      	strh	r3, [r7, #12]
				step_mt_move_foward(&z_motor, value);
 8000cdc:	89bb      	ldrh	r3, [r7, #12]
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4818      	ldr	r0, [pc, #96]	; (8000d44 <dw_process_rx_buffer+0x218>)
 8000ce2:	f000 ff39 	bl	8001b58 <step_mt_move_foward>
				break;
 8000ce6:	e021      	b.n	8000d2c <dw_process_rx_buffer+0x200>
				value = (uint16_t)data[7]*256+data[8];
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3307      	adds	r3, #7
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	021b      	lsls	r3, r3, #8
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	3308      	adds	r3, #8
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	b29b      	uxth	r3, r3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	81bb      	strh	r3, [r7, #12]
				step_mt_move_backward(&z_motor, value);
 8000d00:	89bb      	ldrh	r3, [r7, #12]
 8000d02:	4619      	mov	r1, r3
 8000d04:	480f      	ldr	r0, [pc, #60]	; (8000d44 <dw_process_rx_buffer+0x218>)
 8000d06:	f000 ff43 	bl	8001b90 <step_mt_move_backward>
				break;
 8000d0a:	e00f      	b.n	8000d2c <dw_process_rx_buffer+0x200>
				mt_move_to_home(&x_motor);
 8000d0c:	480c      	ldr	r0, [pc, #48]	; (8000d40 <dw_process_rx_buffer+0x214>)
 8000d0e:	f000 fe82 	bl	8001a16 <mt_move_to_home>
				break;
 8000d12:	e00b      	b.n	8000d2c <dw_process_rx_buffer+0x200>
				mt_move_to_home(&z_motor);
 8000d14:	480b      	ldr	r0, [pc, #44]	; (8000d44 <dw_process_rx_buffer+0x218>)
 8000d16:	f000 fe7e 	bl	8001a16 <mt_move_to_home>
				break;
 8000d1a:	e007      	b.n	8000d2c <dw_process_rx_buffer+0x200>
				dwin_start_program(data[8]);
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3308      	adds	r3, #8
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fee2 	bl	8000aec <dwin_start_program>
				break;
 8000d28:	e000      	b.n	8000d2c <dw_process_rx_buffer+0x200>
			break;
 8000d2a:	bf00      	nop
	}
	return 1;
 8000d2c:	2301      	movs	r3, #1
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20001186 	.word	0x20001186
 8000d3c:	20001187 	.word	0x20001187
 8000d40:	200028c8 	.word	0x200028c8
 8000d44:	200028f8 	.word	0x200028f8

08000d48 <dw_update_step_numbers>:

int dw_update_step_numbers(void){
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
	dt_calculator_pg_stepnumber();
 8000d4c:	f7ff fc26 	bl	800059c <dt_calculator_pg_stepnumber>
	Dwin_Write_VP(VP_STEP_NUMBERS,system_data.pg_stepnumber,10);
 8000d50:	220a      	movs	r2, #10
 8000d52:	4904      	ldr	r1, [pc, #16]	; (8000d64 <dw_update_step_numbers+0x1c>)
 8000d54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d58:	f7ff fd2f 	bl	80007ba <Dwin_Write_VP>
	return 1;
 8000d5c:	2301      	movs	r3, #1
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000f58 	.word	0x20000f58

08000d68 <dw_update_steper_positon>:
float xxxx;
int dw_update_steper_positon(void){
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
	static uint32_t time_tmp =0;
	if( (HAL_GetTick() > time_tmp)&&((x_motor.old_pos != x_motor.current_pos) || (z_motor.old_pos != z_motor.current_pos)))
 8000d6e:	f002 fd5b 	bl	8003828 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <dw_update_steper_positon+0xb8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d94b      	bls.n	8000e14 <dw_update_steper_positon+0xac>
 8000d7c:	4b29      	ldr	r3, [pc, #164]	; (8000e24 <dw_update_steper_positon+0xbc>)
 8000d7e:	685a      	ldr	r2, [r3, #4]
 8000d80:	4b28      	ldr	r3, [pc, #160]	; (8000e24 <dw_update_steper_positon+0xbc>)
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d105      	bne.n	8000d94 <dw_update_steper_positon+0x2c>
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <dw_update_steper_positon+0xc0>)
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	4b26      	ldr	r3, [pc, #152]	; (8000e28 <dw_update_steper_positon+0xc0>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	d03f      	beq.n	8000e14 <dw_update_steper_positon+0xac>
	{
		time_tmp = HAL_GetTick() +50;
 8000d94:	f002 fd48 	bl	8003828 <HAL_GetTick>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	3332      	adds	r3, #50	; 0x32
 8000d9c:	4a20      	ldr	r2, [pc, #128]	; (8000e20 <dw_update_steper_positon+0xb8>)
 8000d9e:	6013      	str	r3, [r2, #0]
		x_motor.old_pos = x_motor.current_pos;
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <dw_update_steper_positon+0xbc>)
 8000da2:	689b      	ldr	r3, [r3, #8]
 8000da4:	4a1f      	ldr	r2, [pc, #124]	; (8000e24 <dw_update_steper_positon+0xbc>)
 8000da6:	6053      	str	r3, [r2, #4]
		z_motor.old_pos = z_motor.current_pos;
 8000da8:	4b1f      	ldr	r3, [pc, #124]	; (8000e28 <dw_update_steper_positon+0xc0>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	4a1e      	ldr	r2, [pc, #120]	; (8000e28 <dw_update_steper_positon+0xc0>)
 8000dae:	6053      	str	r3, [r2, #4]
		uint16_t data[4];
		float tmp = (float)x_motor.current_pos/PULSES_PER_MM;
 8000db0:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <dw_update_steper_positon+0xbc>)
 8000db2:	689b      	ldr	r3, [r3, #8]
 8000db4:	ee07 3a90 	vmov	s15, r3
 8000db8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000dbc:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8000dc0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dc4:	edc7 7a00 	vstr	s15, [r7]
		uint16_t *p = (uint16_t *)&tmp;
 8000dc8:	463b      	mov	r3, r7
 8000dca:	60fb      	str	r3, [r7, #12]
		data[0] = p[1];
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	885b      	ldrh	r3, [r3, #2]
 8000dd0:	80bb      	strh	r3, [r7, #4]
		data[1] = p[0];
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	80fb      	strh	r3, [r7, #6]
		tmp = (float)z_motor.current_pos/PULSES_PER_MM;
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <dw_update_steper_positon+0xc0>)
 8000dda:	689b      	ldr	r3, [r3, #8]
 8000ddc:	ee07 3a90 	vmov	s15, r3
 8000de0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000de4:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8000de8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dec:	edc7 7a00 	vstr	s15, [r7]
		xxxx= tmp;
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <dw_update_steper_positon+0xc4>)
 8000df4:	6013      	str	r3, [r2, #0]
		data[2] = p[1];
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	885b      	ldrh	r3, [r3, #2]
 8000dfa:	813b      	strh	r3, [r7, #8]
		data[3] = p[0];
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	817b      	strh	r3, [r7, #10]
		Dwin_Write_VP(VP_X_STEP_MOTOR,data,4);
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	2204      	movs	r2, #4
 8000e06:	4619      	mov	r1, r3
 8000e08:	f44f 5008 	mov.w	r0, #8704	; 0x2200
 8000e0c:	f7ff fcd5 	bl	80007ba <Dwin_Write_VP>
		return 1;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e000      	b.n	8000e16 <dw_update_steper_positon+0xae>
	}
	return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	2000118c 	.word	0x2000118c
 8000e24:	200028c8 	.word	0x200028c8
 8000e28:	200028f8 	.word	0x200028f8
 8000e2c:	20001188 	.word	0x20001188

08000e30 <write_flash>:
 * @param data Pointer to the data to be written
 * @param size Size of the data to be written, in bytes
 * @param address Memory address where the data will be written
 * @return HAL status
 */
HAL_StatusTypeDef write_flash(uint8_t* data, uint32_t size, uint32_t address) {
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	75fb      	strb	r3, [r7, #23]
    // Unlock flash
    HAL_FLASH_Unlock();
 8000e40:	f003 fa8a 	bl	8004358 <HAL_FLASH_Unlock>

    // Erase sector
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8000e44:	4b18      	ldr	r3, [pc, #96]	; (8000ea8 <write_flash+0x78>)
 8000e46:	22b3      	movs	r2, #179	; 0xb3
 8000e48:	60da      	str	r2, [r3, #12]
	FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 8000e4a:	2102      	movs	r1, #2
 8000e4c:	2007      	movs	r0, #7
 8000e4e:	f003 fbe5 	bl	800461c <FLASH_Erase_Sector>

    if (status == HAL_OK) {
 8000e52:	7dfb      	ldrb	r3, [r7, #23]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d120      	bne.n	8000e9a <write_flash+0x6a>
        // Write data
        for (uint32_t i = 0; i < size; i++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	e017      	b.n	8000e8e <write_flash+0x5e>
            status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address + i, data[i]);
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	18d1      	adds	r1, r2, r3
 8000e64:	68fa      	ldr	r2, [r7, #12]
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	4413      	add	r3, r2
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2200      	movs	r2, #0
 8000e70:	461c      	mov	r4, r3
 8000e72:	4615      	mov	r5, r2
 8000e74:	4622      	mov	r2, r4
 8000e76:	462b      	mov	r3, r5
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f003 fa19 	bl	80042b0 <HAL_FLASH_Program>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 8000e82:	7dfb      	ldrb	r3, [r7, #23]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d107      	bne.n	8000e98 <write_flash+0x68>
        for (uint32_t i = 0; i < size; i++) {
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d3e3      	bcc.n	8000e5e <write_flash+0x2e>
 8000e96:	e000      	b.n	8000e9a <write_flash+0x6a>
                break;
 8000e98:	bf00      	nop
            }
        }
    }

    // Lock flash
    HAL_FLASH_Lock();
 8000e9a:	f003 fa7f 	bl	800439c <HAL_FLASH_Lock>

    return status;
 8000e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3718      	adds	r7, #24
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea8:	40023c00 	.word	0x40023c00

08000eac <read_flash>:
 * @brief Reads data from flash memory
 * @param data Pointer to the buffer where the data will be stored
 * @param size Size of the data to be read, in bytes
 * @param address Memory address where the data will be read from
 */
void read_flash(uint8_t* data, uint32_t size, uint32_t address) {
 8000eac:	b480      	push	{r7}
 8000eae:	b087      	sub	sp, #28
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < size; i++) {
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	e00b      	b.n	8000ed6 <read_flash+0x2a>
        data[i] = *((uint8_t*)(address + i));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	68fa      	ldr	r2, [r7, #12]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	4413      	add	r3, r2
 8000ecc:	780a      	ldrb	r2, [r1, #0]
 8000ece:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	d3ef      	bcc.n	8000ebe <read_flash+0x12>
    }
}
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
 8000ee2:	371c      	adds	r7, #28
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <debug_process>:
_debug_frame debuglog[LOG_FRAME];
uint8_t debug_cnt = 0;
static uint8_t out_index = 0;
static uint8_t in_index = 0;
void debug_process()
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

	if(debug_cnt)
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <debug_process+0x6c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d02c      	beq.n	8000f52 <debug_process+0x66>
	{
		if(CDC_Transmit_FS(debuglog[out_index].data,debuglog[out_index].size)==USBD_OK)
 8000ef8:	4b18      	ldr	r3, [pc, #96]	; (8000f5c <debug_process+0x70>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	2365      	movs	r3, #101	; 0x65
 8000f00:	fb02 f303 	mul.w	r3, r2, r3
 8000f04:	4a16      	ldr	r2, [pc, #88]	; (8000f60 <debug_process+0x74>)
 8000f06:	4413      	add	r3, r2
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <debug_process+0x70>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	4913      	ldr	r1, [pc, #76]	; (8000f60 <debug_process+0x74>)
 8000f12:	2365      	movs	r3, #101	; 0x65
 8000f14:	fb00 f303 	mul.w	r3, r0, r3
 8000f18:	440b      	add	r3, r1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4610      	mov	r0, r2
 8000f22:	f00b ff59 	bl	800cdd8 <CDC_Transmit_FS>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d112      	bne.n	8000f52 <debug_process+0x66>
		{
			out_index++;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <debug_process+0x70>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	3301      	adds	r3, #1
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <debug_process+0x70>)
 8000f36:	701a      	strb	r2, [r3, #0]
			if(out_index == LOG_FRAME)
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <debug_process+0x70>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b32      	cmp	r3, #50	; 0x32
 8000f3e:	d102      	bne.n	8000f46 <debug_process+0x5a>
				out_index =0;
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <debug_process+0x70>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
			debug_cnt--;
 8000f46:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <debug_process+0x6c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b02      	ldr	r3, [pc, #8]	; (8000f58 <debug_process+0x6c>)
 8000f50:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200028c2 	.word	0x200028c2
 8000f5c:	200028c3 	.word	0x200028c3
 8000f60:	20001508 	.word	0x20001508

08000f64 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b084      	sub	sp, #16
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]

	debuglog[in_index].size = len;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <_write+0x80>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	b2d9      	uxtb	r1, r3
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <_write+0x84>)
 8000f7c:	2365      	movs	r3, #101	; 0x65
 8000f7e:	fb00 f303 	mul.w	r3, r0, r3
 8000f82:	4413      	add	r3, r2
 8000f84:	460a      	mov	r2, r1
 8000f86:	701a      	strb	r2, [r3, #0]
	memcpy(debuglog[in_index].data,ptr,len);
 8000f88:	4b16      	ldr	r3, [pc, #88]	; (8000fe4 <_write+0x80>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	2365      	movs	r3, #101	; 0x65
 8000f90:	fb02 f303 	mul.w	r3, r2, r3
 8000f94:	4a14      	ldr	r2, [pc, #80]	; (8000fe8 <_write+0x84>)
 8000f96:	4413      	add	r3, r2
 8000f98:	3301      	adds	r3, #1
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00c fbbe 	bl	800d720 <memcpy>
	debug_cnt++;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <_write+0x88>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <_write+0x88>)
 8000fae:	701a      	strb	r2, [r3, #0]
	if(debug_cnt>LOG_FRAME)
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <_write+0x88>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	2b32      	cmp	r3, #50	; 0x32
 8000fb6:	d902      	bls.n	8000fbe <_write+0x5a>
	{
		debug_cnt = LOG_FRAME;
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <_write+0x88>)
 8000fba:	2232      	movs	r2, #50	; 0x32
 8000fbc:	701a      	strb	r2, [r3, #0]
	}
	in_index++;
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <_write+0x80>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b07      	ldr	r3, [pc, #28]	; (8000fe4 <_write+0x80>)
 8000fc8:	701a      	strb	r2, [r3, #0]
	if(in_index == LOG_FRAME)
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <_write+0x80>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b32      	cmp	r3, #50	; 0x32
 8000fd0:	d102      	bne.n	8000fd8 <_write+0x74>
		in_index =0;
 8000fd2:	4b04      	ldr	r3, [pc, #16]	; (8000fe4 <_write+0x80>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
	return len;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	200028c4 	.word	0x200028c4
 8000fe8:	20001508 	.word	0x20001508
 8000fec:	200028c2 	.word	0x200028c2

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8000ff4:	f002 fbb2 	bl	800375c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff8:	f000 f89c 	bl	8001134 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffc:	f000 fbc4 	bl	8001788 <MX_GPIO_Init>
  MX_DMA_Init();
 8001000:	f000 fb84 	bl	800170c <MX_DMA_Init>
  MX_I2C1_Init();
 8001004:	f000 f900 	bl	8001208 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001008:	f000 f92c 	bl	8001264 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800100c:	f000 fb54 	bl	80016b8 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001010:	f00b fe24 	bl	800cc5c <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001014:	f000 f95c 	bl	80012d0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001018:	f000 fa4a 	bl	80014b0 <MX_TIM3_Init>
  MX_TIM8_Init();
 800101c:	f000 fb10 	bl	8001640 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001020:	f000 f9f8 	bl	8001414 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001024:	f000 fabc 	bl	80015a0 <MX_TIM5_Init>
//  HAL_FLASH_Unlock();
//  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
//  FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
//  HAL_FLASH_Program(TYPEPROGRAM_WORD,0x08060000, 0x11223344);
//  HAL_FLASH_Lock();
  Dwin_init();
 8001028:	f7ff fc34 	bl	8000894 <Dwin_init>
  dt_system_data_init();
 800102c:	f7ff fb6c 	bl	8000708 <dt_system_data_init>
  uart_dma_start();
 8001030:	f002 faf4 	bl	800361c <uart_dma_start>
  dw_update_step_numbers();
 8001034:	f7ff fe88 	bl	8000d48 <dw_update_step_numbers>
//  HAL_TIM_Base_Start(&htim3);
  x_step_mt_int();
 8001038:	f000 fd6a 	bl	8001b10 <x_step_mt_int>
  z_step_mt_int();
 800103c:	f000 feea 	bl	8001e14 <z_step_mt_int>
  mt_move_to_home(&x_motor);
 8001040:	4835      	ldr	r0, [pc, #212]	; (8001118 <main+0x128>)
 8001042:	f000 fce8 	bl	8001a16 <mt_move_to_home>
  mt_move_to_home(&z_motor);
 8001046:	4835      	ldr	r0, [pc, #212]	; (800111c <main+0x12c>)
 8001048:	f000 fce5 	bl	8001a16 <mt_move_to_home>
  while(1){  // home Z
	  z_step_motor_process();
 800104c:	f000 ff30 	bl	8001eb0 <z_step_motor_process>
	  dw_update_steper_positon();
 8001050:	f7ff fe8a 	bl	8000d68 <dw_update_steper_positon>
	  if(z_motor.is_home)
 8001054:	4b31      	ldr	r3, [pc, #196]	; (800111c <main+0x12c>)
 8001056:	7cdb      	ldrb	r3, [r3, #19]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d0f7      	beq.n	800104c <main+0x5c>
		  break;
  }
  while(1){  // home Z
	  x_step_motor_process();
 800105c:	f000 fe22 	bl	8001ca4 <x_step_motor_process>
	  dw_update_steper_positon();
 8001060:	f7ff fe82 	bl	8000d68 <dw_update_steper_positon>
	  dw_update_steper_positon();
 8001064:	f7ff fe80 	bl	8000d68 <dw_update_steper_positon>
	  if(x_motor.is_home)
 8001068:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <main+0x128>)
 800106a:	7cdb      	ldrb	r3, [r3, #19]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d100      	bne.n	8001072 <main+0x82>
	  x_step_motor_process();
 8001070:	e7f4      	b.n	800105c <main+0x6c>
		  break;
 8001072:	bf00      	nop
 }
//  uint32_t ti;
  printf("code started \n");
 8001074:	482a      	ldr	r0, [pc, #168]	; (8001120 <main+0x130>)
 8001076:	f00c fbef 	bl	800d858 <puts>
  HAL_Delay(100);
 800107a:	2064      	movs	r0, #100	; 0x64
 800107c:	f002 fbe0 	bl	8003840 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  usercommand =1;
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <main+0x134>)
 8001082:	2201      	movs	r2, #1
 8001084:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  debug_process();
 8001086:	f7ff ff31 	bl	8000eec <debug_process>
//			sprintf(tmp,"CURRENT_TIME :%d",cnt ++);
//			s_log_add_1_line(tmp);
//		   ti = HAL_GetTick() +500;
//	  }
//	  step_shake_process();
	  pg_process_loop();
 800108a:	f001 fdd3 	bl	8002c34 <pg_process_loop>
	  uart_process();
 800108e:	f002 fadd 	bl	800364c <uart_process>
	  x_step_motor_process();
 8001092:	f000 fe07 	bl	8001ca4 <x_step_motor_process>
	  dw_update_steper_positon();
 8001096:	f7ff fe67 	bl	8000d68 <dw_update_steper_positon>
	  z_step_motor_process();
 800109a:	f000 ff09 	bl	8001eb0 <z_step_motor_process>
	  dw_update_steper_positon();
 800109e:	f7ff fe63 	bl	8000d68 <dw_update_steper_positon>
	  switch (usercommand) {
 80010a2:	4b20      	ldr	r3, [pc, #128]	; (8001124 <main+0x134>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	2b04      	cmp	r3, #4
 80010aa:	d832      	bhi.n	8001112 <main+0x122>
 80010ac:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <main+0xc4>)
 80010ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b2:	bf00      	nop
 80010b4:	080010c9 	.word	0x080010c9
 80010b8:	080010d1 	.word	0x080010d1
 80010bc:	080010e1 	.word	0x080010e1
 80010c0:	080010f1 	.word	0x080010f1
 80010c4:	08001103 	.word	0x08001103
		case 1:
//			step_shake_start();
			usercommand = 0;
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <main+0x134>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
			break;
 80010ce:	e021      	b.n	8001114 <main+0x124>
		case 2:
			HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80010d0:	2100      	movs	r1, #0
 80010d2:	4815      	ldr	r0, [pc, #84]	; (8001128 <main+0x138>)
 80010d4:	f005 fec6 	bl	8006e64 <HAL_TIM_PWM_Start>
			usercommand = 0;
 80010d8:	4b12      	ldr	r3, [pc, #72]	; (8001124 <main+0x134>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
			break;
 80010de:	e019      	b.n	8001114 <main+0x124>
		case 3:
			HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80010e0:	2100      	movs	r1, #0
 80010e2:	4811      	ldr	r0, [pc, #68]	; (8001128 <main+0x138>)
 80010e4:	f005 ff86 	bl	8006ff4 <HAL_TIM_PWM_Stop>
			usercommand = 0;
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <main+0x134>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
			break;
 80010ee:	e011      	b.n	8001114 <main+0x124>
		case 4:
			HAL_GPIO_TogglePin(Z_MOTOR_EN_GPIO_Port, Z_MOTOR_EN_Pin);
 80010f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010f4:	480d      	ldr	r0, [pc, #52]	; (800112c <main+0x13c>)
 80010f6:	f003 fca6 	bl	8004a46 <HAL_GPIO_TogglePin>
			usercommand = 0;
 80010fa:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <main+0x134>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	701a      	strb	r2, [r3, #0]
			break;
 8001100:	e008      	b.n	8001114 <main+0x124>
		case 5:
			HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 8001102:	2100      	movs	r1, #0
 8001104:	480a      	ldr	r0, [pc, #40]	; (8001130 <main+0x140>)
 8001106:	f005 ffe5 	bl	80070d4 <HAL_TIM_PWM_Stop_IT>
			usercommand = 0;
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <main+0x134>)
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]
			break;
 8001110:	e000      	b.n	8001114 <main+0x124>
		default:
			break;
 8001112:	bf00      	nop
	  debug_process();
 8001114:	e7b7      	b.n	8001086 <main+0x96>
 8001116:	bf00      	nop
 8001118:	200028c8 	.word	0x200028c8
 800111c:	200028f8 	.word	0x200028f8
 8001120:	0800eb50 	.word	0x0800eb50
 8001124:	200028c5 	.word	0x200028c5
 8001128:	200012cc 	.word	0x200012cc
 800112c:	40020800 	.word	0x40020800
 8001130:	2000123c 	.word	0x2000123c

08001134 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b094      	sub	sp, #80	; 0x50
 8001138:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113a:	f107 0320 	add.w	r3, r7, #32
 800113e:	2230      	movs	r2, #48	; 0x30
 8001140:	2100      	movs	r1, #0
 8001142:	4618      	mov	r0, r3
 8001144:	f00c fafa 	bl	800d73c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
 8001156:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b28      	ldr	r3, [pc, #160]	; (8001200 <SystemClock_Config+0xcc>)
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	4a27      	ldr	r2, [pc, #156]	; (8001200 <SystemClock_Config+0xcc>)
 8001162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001166:	6413      	str	r3, [r2, #64]	; 0x40
 8001168:	4b25      	ldr	r3, [pc, #148]	; (8001200 <SystemClock_Config+0xcc>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001174:	2300      	movs	r3, #0
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	4b22      	ldr	r3, [pc, #136]	; (8001204 <SystemClock_Config+0xd0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <SystemClock_Config+0xd0>)
 800117e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001182:	6013      	str	r3, [r2, #0]
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <SystemClock_Config+0xd0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001190:	2301      	movs	r3, #1
 8001192:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800119e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a4:	2304      	movs	r3, #4
 80011a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80011a8:	23a8      	movs	r3, #168	; 0xa8
 80011aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ac:	2302      	movs	r3, #2
 80011ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011b0:	2307      	movs	r3, #7
 80011b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011b4:	f107 0320 	add.w	r3, r7, #32
 80011b8:	4618      	mov	r0, r3
 80011ba:	f005 f821 	bl	8006200 <HAL_RCC_OscConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011c4:	f000 fc22 	bl	8001a0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c8:	230f      	movs	r3, #15
 80011ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011cc:	2302      	movs	r3, #2
 80011ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d0:	2300      	movs	r3, #0
 80011d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80011da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	2105      	movs	r1, #5
 80011e6:	4618      	mov	r0, r3
 80011e8:	f005 fa82 	bl	80066f0 <HAL_RCC_ClockConfig>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80011f2:	f000 fc0b 	bl	8001a0c <Error_Handler>
  }
}
 80011f6:	bf00      	nop
 80011f8:	3750      	adds	r7, #80	; 0x50
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40007000 	.word	0x40007000

08001208 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800120c:	4b12      	ldr	r3, [pc, #72]	; (8001258 <MX_I2C1_Init+0x50>)
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <MX_I2C1_Init+0x54>)
 8001210:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001212:	4b11      	ldr	r3, [pc, #68]	; (8001258 <MX_I2C1_Init+0x50>)
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <MX_I2C1_Init+0x58>)
 8001216:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <MX_I2C1_Init+0x50>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800121e:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <MX_I2C1_Init+0x50>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <MX_I2C1_Init+0x50>)
 8001226:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800122a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001238:	4b07      	ldr	r3, [pc, #28]	; (8001258 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800123e:	4b06      	ldr	r3, [pc, #24]	; (8001258 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <MX_I2C1_Init+0x50>)
 8001246:	f003 fc19 	bl	8004a7c <HAL_I2C_Init>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001250:	f000 fbdc 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}
 8001258:	20001190 	.word	0x20001190
 800125c:	40005400 	.word	0x40005400
 8001260:	000186a0 	.word	0x000186a0

08001264 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_SPI1_Init+0x64>)
 800126a:	4a18      	ldr	r2, [pc, #96]	; (80012cc <MX_SPI1_Init+0x68>)
 800126c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001270:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001274:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_SPI1_Init+0x64>)
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_SPI1_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001294:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_SPI1_Init+0x64>)
 8001298:	2200      	movs	r2, #0
 800129a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <MX_SPI1_Init+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_SPI1_Init+0x64>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <MX_SPI1_Init+0x64>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_SPI1_Init+0x64>)
 80012b0:	220a      	movs	r2, #10
 80012b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_SPI1_Init+0x64>)
 80012b6:	f005 fc3b 	bl	8006b30 <HAL_SPI_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012c0:	f000 fba4 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200011e4 	.word	0x200011e4
 80012cc:	40013000 	.word	0x40013000

080012d0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b096      	sub	sp, #88	; 0x58
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
 80012de:	605a      	str	r2, [r3, #4]
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]
 80012fe:	615a      	str	r2, [r3, #20]
 8001300:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2220      	movs	r2, #32
 8001306:	2100      	movs	r1, #0
 8001308:	4618      	mov	r0, r3
 800130a:	f00c fa17 	bl	800d73c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800130e:	4b3f      	ldr	r3, [pc, #252]	; (800140c <MX_TIM1_Init+0x13c>)
 8001310:	4a3f      	ldr	r2, [pc, #252]	; (8001410 <MX_TIM1_Init+0x140>)
 8001312:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20;
 8001314:	4b3d      	ldr	r3, [pc, #244]	; (800140c <MX_TIM1_Init+0x13c>)
 8001316:	2214      	movs	r2, #20
 8001318:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <MX_TIM1_Init+0x13c>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001320:	4b3a      	ldr	r3, [pc, #232]	; (800140c <MX_TIM1_Init+0x13c>)
 8001322:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001326:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b38      	ldr	r3, [pc, #224]	; (800140c <MX_TIM1_Init+0x13c>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 199;
 800132e:	4b37      	ldr	r3, [pc, #220]	; (800140c <MX_TIM1_Init+0x13c>)
 8001330:	22c7      	movs	r2, #199	; 0xc7
 8001332:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001334:	4b35      	ldr	r3, [pc, #212]	; (800140c <MX_TIM1_Init+0x13c>)
 8001336:	2200      	movs	r2, #0
 8001338:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800133a:	4834      	ldr	r0, [pc, #208]	; (800140c <MX_TIM1_Init+0x13c>)
 800133c:	f005 fc81 	bl	8006c42 <HAL_TIM_Base_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001346:	f000 fb61 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800134a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800134e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001350:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001354:	4619      	mov	r1, r3
 8001356:	482d      	ldr	r0, [pc, #180]	; (800140c <MX_TIM1_Init+0x13c>)
 8001358:	f006 f88c 	bl	8007474 <HAL_TIM_ConfigClockSource>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001362:	f000 fb53 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001366:	4829      	ldr	r0, [pc, #164]	; (800140c <MX_TIM1_Init+0x13c>)
 8001368:	f005 fd22 	bl	8006db0 <HAL_TIM_PWM_Init>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001372:	f000 fb4b 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001376:	2340      	movs	r3, #64	; 0x40
 8001378:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800137e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001382:	4619      	mov	r1, r3
 8001384:	4821      	ldr	r0, [pc, #132]	; (800140c <MX_TIM1_Init+0x13c>)
 8001386:	f006 fd1f 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001390:	f000 fb3c 	bl	8001a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001394:	2360      	movs	r3, #96	; 0x60
 8001396:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8001398:	f240 13f3 	movw	r3, #499	; 0x1f3
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800139e:	2300      	movs	r3, #0
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013a2:	2300      	movs	r3, #0
 80013a4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013a6:	2300      	movs	r3, #0
 80013a8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b6:	2200      	movs	r2, #0
 80013b8:	4619      	mov	r1, r3
 80013ba:	4814      	ldr	r0, [pc, #80]	; (800140c <MX_TIM1_Init+0x13c>)
 80013bc:	f005 ff98 	bl	80072f0 <HAL_TIM_PWM_ConfigChannel>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 80013c6:	f000 fb21 	bl	8001a0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	4619      	mov	r1, r3
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <MX_TIM1_Init+0x13c>)
 80013ee:	f006 fd67 	bl	8007ec0 <HAL_TIMEx_ConfigBreakDeadTime>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80013f8:	f000 fb08 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <MX_TIM1_Init+0x13c>)
 80013fe:	f001 fe3f 	bl	8003080 <HAL_TIM_MspPostInit>

}
 8001402:	bf00      	nop
 8001404:	3758      	adds	r7, #88	; 0x58
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000123c 	.word	0x2000123c
 8001410:	40010000 	.word	0x40010000

08001414 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <MX_TIM2_Init+0x98>)
 8001434:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001438:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_TIM2_Init+0x98>)
 800143c:	2200      	movs	r2, #0
 800143e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_TIM2_Init+0x98>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_TIM2_Init+0x98>)
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_TIM2_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_TIM2_Init+0x98>)
 8001456:	2200      	movs	r2, #0
 8001458:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <MX_TIM2_Init+0x98>)
 800145c:	f005 fbf1 	bl	8006c42 <HAL_TIM_Base_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001466:	f000 fad1 	bl	8001a0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800146a:	2307      	movs	r3, #7
 800146c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <MX_TIM2_Init+0x98>)
 800147a:	f006 f8c2 	bl	8007602 <HAL_TIM_SlaveConfigSynchro>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001484:	f000 fac2 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_TIM2_Init+0x98>)
 8001496:	f006 fc97 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80014a0:	f000 fab4 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20001284 	.word	0x20001284

080014b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b08e      	sub	sp, #56	; 0x38
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]
 80014c0:	609a      	str	r2, [r3, #8]
 80014c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c4:	f107 0320 	add.w	r3, r7, #32
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
 80014dc:	615a      	str	r2, [r3, #20]
 80014de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014e0:	4b2d      	ldr	r3, [pc, #180]	; (8001598 <MX_TIM3_Init+0xe8>)
 80014e2:	4a2e      	ldr	r2, [pc, #184]	; (800159c <MX_TIM3_Init+0xec>)
 80014e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 20;
 80014e6:	4b2c      	ldr	r3, [pc, #176]	; (8001598 <MX_TIM3_Init+0xe8>)
 80014e8:	2214      	movs	r2, #20
 80014ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <MX_TIM3_Init+0xe8>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80014f2:	4b29      	ldr	r3, [pc, #164]	; (8001598 <MX_TIM3_Init+0xe8>)
 80014f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014fa:	4b27      	ldr	r3, [pc, #156]	; (8001598 <MX_TIM3_Init+0xe8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001500:	4b25      	ldr	r3, [pc, #148]	; (8001598 <MX_TIM3_Init+0xe8>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001506:	4824      	ldr	r0, [pc, #144]	; (8001598 <MX_TIM3_Init+0xe8>)
 8001508:	f005 fb9b 	bl	8006c42 <HAL_TIM_Base_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001512:	f000 fa7b 	bl	8001a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800151a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800151c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001520:	4619      	mov	r1, r3
 8001522:	481d      	ldr	r0, [pc, #116]	; (8001598 <MX_TIM3_Init+0xe8>)
 8001524:	f005 ffa6 	bl	8007474 <HAL_TIM_ConfigClockSource>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800152e:	f000 fa6d 	bl	8001a0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001532:	4819      	ldr	r0, [pc, #100]	; (8001598 <MX_TIM3_Init+0xe8>)
 8001534:	f005 fc3c 	bl	8006db0 <HAL_TIM_PWM_Init>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800153e:	f000 fa65 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001542:	2340      	movs	r3, #64	; 0x40
 8001544:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	4619      	mov	r1, r3
 8001550:	4811      	ldr	r0, [pc, #68]	; (8001598 <MX_TIM3_Init+0xe8>)
 8001552:	f006 fc39 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800155c:	f000 fa56 	bl	8001a0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001560:	2360      	movs	r3, #96	; 0x60
 8001562:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8001564:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001568:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	2200      	movs	r2, #0
 8001576:	4619      	mov	r1, r3
 8001578:	4807      	ldr	r0, [pc, #28]	; (8001598 <MX_TIM3_Init+0xe8>)
 800157a:	f005 feb9 	bl	80072f0 <HAL_TIM_PWM_ConfigChannel>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001584:	f000 fa42 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001588:	4803      	ldr	r0, [pc, #12]	; (8001598 <MX_TIM3_Init+0xe8>)
 800158a:	f001 fd79 	bl	8003080 <HAL_TIM_MspPostInit>

}
 800158e:	bf00      	nop
 8001590:	3738      	adds	r7, #56	; 0x38
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200012cc 	.word	0x200012cc
 800159c:	40000400 	.word	0x40000400

080015a0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80015a6:	f107 030c 	add.w	r3, r7, #12
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015be:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <MX_TIM5_Init+0x98>)
 80015c0:	4a1e      	ldr	r2, [pc, #120]	; (800163c <MX_TIM5_Init+0x9c>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80015c4:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <MX_TIM5_Init+0x98>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ca:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <MX_TIM5_Init+0x98>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <MX_TIM5_Init+0x98>)
 80015d2:	f04f 32ff 	mov.w	r2, #4294967295
 80015d6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <MX_TIM5_Init+0x98>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_TIM5_Init+0x98>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80015e4:	4814      	ldr	r0, [pc, #80]	; (8001638 <MX_TIM5_Init+0x98>)
 80015e6:	f005 fb2c 	bl	8006c42 <HAL_TIM_Base_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80015f0:	f000 fa0c 	bl	8001a0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80015f4:	2307      	movs	r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80015f8:	2310      	movs	r3, #16
 80015fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	4619      	mov	r1, r3
 8001602:	480d      	ldr	r0, [pc, #52]	; (8001638 <MX_TIM5_Init+0x98>)
 8001604:	f005 fffd 	bl	8007602 <HAL_TIM_SlaveConfigSynchro>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 800160e:	f000 f9fd 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001612:	2300      	movs	r3, #0
 8001614:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <MX_TIM5_Init+0x98>)
 8001620:	f006 fbd2 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 800162a:	f000 f9ef 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3720      	adds	r7, #32
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20001314 	.word	0x20001314
 800163c:	40000c00 	.word	0x40000c00

08001640 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001646:	463b      	mov	r3, r7
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800164e:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_TIM8_Init+0x70>)
 8001650:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <MX_TIM8_Init+0x74>)
 8001652:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001654:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <MX_TIM8_Init+0x70>)
 8001656:	2200      	movs	r2, #0
 8001658:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800165a:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_TIM8_Init+0x70>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_TIM8_Init+0x70>)
 8001662:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001666:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001668:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_TIM8_Init+0x70>)
 800166a:	2200      	movs	r2, #0
 800166c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <MX_TIM8_Init+0x70>)
 8001670:	2200      	movs	r2, #0
 8001672:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001674:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_TIM8_Init+0x70>)
 8001676:	2200      	movs	r2, #0
 8001678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 800167a:	2108      	movs	r1, #8
 800167c:	480c      	ldr	r0, [pc, #48]	; (80016b0 <MX_TIM8_Init+0x70>)
 800167e:	f005 fde7 	bl	8007250 <HAL_TIM_OnePulse_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM8_Init+0x4c>
  {
    Error_Handler();
 8001688:	f000 f9c0 	bl	8001a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001694:	463b      	mov	r3, r7
 8001696:	4619      	mov	r1, r3
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_TIM8_Init+0x70>)
 800169a:	f006 fb95 	bl	8007dc8 <HAL_TIMEx_MasterConfigSynchronization>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 80016a4:	f000 f9b2 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000135c 	.word	0x2000135c
 80016b4:	40010400 	.word	0x40010400

080016b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016bc:	4b11      	ldr	r3, [pc, #68]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016be:	4a12      	ldr	r2, [pc, #72]	; (8001708 <MX_USART2_UART_Init+0x50>)
 80016c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016c2:	4b10      	ldr	r3, [pc, #64]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ca:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d0:	4b0c      	ldr	r3, [pc, #48]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d6:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016d8:	2200      	movs	r2, #0
 80016da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016de:	220c      	movs	r2, #12
 80016e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e2:	4b08      	ldr	r3, [pc, #32]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e8:	4b06      	ldr	r3, [pc, #24]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ee:	4805      	ldr	r0, [pc, #20]	; (8001704 <MX_USART2_UART_Init+0x4c>)
 80016f0:	f006 fc38 	bl	8007f64 <HAL_UART_Init>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016fa:	f000 f987 	bl	8001a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20001404 	.word	0x20001404
 8001708:	40004400 	.word	0x40004400

0800170c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	4b1b      	ldr	r3, [pc, #108]	; (8001784 <MX_DMA_Init+0x78>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a1a      	ldr	r2, [pc, #104]	; (8001784 <MX_DMA_Init+0x78>)
 800171c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b18      	ldr	r3, [pc, #96]	; (8001784 <MX_DMA_Init+0x78>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	603b      	str	r3, [r7, #0]
 8001732:	4b14      	ldr	r3, [pc, #80]	; (8001784 <MX_DMA_Init+0x78>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a13      	ldr	r2, [pc, #76]	; (8001784 <MX_DMA_Init+0x78>)
 8001738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_DMA_Init+0x78>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001746:	603b      	str	r3, [r7, #0]
 8001748:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800174a:	2200      	movs	r2, #0
 800174c:	2100      	movs	r1, #0
 800174e:	2010      	movs	r0, #16
 8001750:	f002 f975 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001754:	2010      	movs	r0, #16
 8001756:	f002 f98e 	bl	8003a76 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	2011      	movs	r0, #17
 8001760:	f002 f96d 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001764:	2011      	movs	r0, #17
 8001766:	f002 f986 	bl	8003a76 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800176a:	2200      	movs	r2, #0
 800176c:	2100      	movs	r1, #0
 800176e:	2039      	movs	r0, #57	; 0x39
 8001770:	f002 f965 	bl	8003a3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001774:	2039      	movs	r0, #57	; 0x39
 8001776:	f002 f97e 	bl	8003a76 <HAL_NVIC_EnableIRQ>

}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40023800 	.word	0x40023800

08001788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	; 0x30
 800178c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178e:	f107 031c 	add.w	r3, r7, #28
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]
 8001798:	609a      	str	r2, [r3, #8]
 800179a:	60da      	str	r2, [r3, #12]
 800179c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
 80017a2:	4b94      	ldr	r3, [pc, #592]	; (80019f4 <MX_GPIO_Init+0x26c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a93      	ldr	r2, [pc, #588]	; (80019f4 <MX_GPIO_Init+0x26c>)
 80017a8:	f043 0310 	orr.w	r3, r3, #16
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b91      	ldr	r3, [pc, #580]	; (80019f4 <MX_GPIO_Init+0x26c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	4b8d      	ldr	r3, [pc, #564]	; (80019f4 <MX_GPIO_Init+0x26c>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a8c      	ldr	r2, [pc, #560]	; (80019f4 <MX_GPIO_Init+0x26c>)
 80017c4:	f043 0304 	orr.w	r3, r3, #4
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b8a      	ldr	r3, [pc, #552]	; (80019f4 <MX_GPIO_Init+0x26c>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b86      	ldr	r3, [pc, #536]	; (80019f4 <MX_GPIO_Init+0x26c>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a85      	ldr	r2, [pc, #532]	; (80019f4 <MX_GPIO_Init+0x26c>)
 80017e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b83      	ldr	r3, [pc, #524]	; (80019f4 <MX_GPIO_Init+0x26c>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b7f      	ldr	r3, [pc, #508]	; (80019f4 <MX_GPIO_Init+0x26c>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a7e      	ldr	r2, [pc, #504]	; (80019f4 <MX_GPIO_Init+0x26c>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b7c      	ldr	r3, [pc, #496]	; (80019f4 <MX_GPIO_Init+0x26c>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b78      	ldr	r3, [pc, #480]	; (80019f4 <MX_GPIO_Init+0x26c>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a77      	ldr	r2, [pc, #476]	; (80019f4 <MX_GPIO_Init+0x26c>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b75      	ldr	r3, [pc, #468]	; (80019f4 <MX_GPIO_Init+0x26c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b71      	ldr	r3, [pc, #452]	; (80019f4 <MX_GPIO_Init+0x26c>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a70      	ldr	r2, [pc, #448]	; (80019f4 <MX_GPIO_Init+0x26c>)
 8001834:	f043 0308 	orr.w	r3, r3, #8
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b6e      	ldr	r3, [pc, #440]	; (80019f4 <MX_GPIO_Init+0x26c>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|X_MOTOR_DIR_Pin|X_MOTOR_EN_Pin, GPIO_PIN_RESET);
 8001846:	2200      	movs	r2, #0
 8001848:	f640 4108 	movw	r1, #3080	; 0xc08
 800184c:	486a      	ldr	r0, [pc, #424]	; (80019f8 <MX_GPIO_Init+0x270>)
 800184e:	f003 f8e1 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001852:	2201      	movs	r2, #1
 8001854:	2101      	movs	r1, #1
 8001856:	4869      	ldr	r0, [pc, #420]	; (80019fc <MX_GPIO_Init+0x274>)
 8001858:	f003 f8dc 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800185c:	2200      	movs	r2, #0
 800185e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001862:	4867      	ldr	r0, [pc, #412]	; (8001a00 <MX_GPIO_Init+0x278>)
 8001864:	f003 f8d6 	bl	8004a14 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Z_MOTOR_DIR_Pin|Z_MOTOR_EN_Pin, GPIO_PIN_RESET);
 8001868:	2200      	movs	r2, #0
 800186a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800186e:	4863      	ldr	r0, [pc, #396]	; (80019fc <MX_GPIO_Init+0x274>)
 8001870:	f003 f8d0 	bl	8004a14 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin X_MOTOR_DIR_Pin X_MOTOR_EN_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|X_MOTOR_DIR_Pin|X_MOTOR_EN_Pin;
 8001874:	f640 4308 	movw	r3, #3080	; 0xc08
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2301      	movs	r3, #1
 800187c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001882:	2300      	movs	r3, #0
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001886:	f107 031c 	add.w	r3, r7, #28
 800188a:	4619      	mov	r1, r3
 800188c:	485a      	ldr	r0, [pc, #360]	; (80019f8 <MX_GPIO_Init+0x270>)
 800188e:	f002 ff0d 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Z_MOTOR_DIR_Pin Z_MOTOR_EN_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Z_MOTOR_DIR_Pin|Z_MOTOR_EN_Pin;
 8001892:	f240 1381 	movw	r3, #385	; 0x181
 8001896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4854      	ldr	r0, [pc, #336]	; (80019fc <MX_GPIO_Init+0x274>)
 80018ac:	f002 fefe 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80018b0:	2308      	movs	r3, #8
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018c0:	2305      	movs	r3, #5
 80018c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	484c      	ldr	r0, [pc, #304]	; (80019fc <MX_GPIO_Init+0x274>)
 80018cc:	f002 feee 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018d0:	2301      	movs	r3, #1
 80018d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 031c 	add.w	r3, r7, #28
 80018e2:	4619      	mov	r1, r3
 80018e4:	4847      	ldr	r0, [pc, #284]	; (8001a04 <MX_GPIO_Init+0x27c>)
 80018e6:	f002 fee1 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80018ea:	2310      	movs	r3, #16
 80018ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	2302      	movs	r3, #2
 80018f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f6:	2300      	movs	r3, #0
 80018f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018fa:	2306      	movs	r3, #6
 80018fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	483f      	ldr	r0, [pc, #252]	; (8001a04 <MX_GPIO_Init+0x27c>)
 8001906:	f002 fed1 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800190a:	2304      	movs	r3, #4
 800190c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001916:	f107 031c 	add.w	r3, r7, #28
 800191a:	4619      	mov	r1, r3
 800191c:	483a      	ldr	r0, [pc, #232]	; (8001a08 <MX_GPIO_Init+0x280>)
 800191e:	f002 fec5 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : X_HOME_SWITCH_Pin */
  GPIO_InitStruct.Pin = X_HOME_SWITCH_Pin;
 8001922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800192c:	2301      	movs	r3, #1
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X_HOME_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	4830      	ldr	r0, [pc, #192]	; (80019f8 <MX_GPIO_Init+0x270>)
 8001938:	f002 feb8 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800193c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800194e:	2305      	movs	r3, #5
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	482b      	ldr	r0, [pc, #172]	; (8001a08 <MX_GPIO_Init+0x280>)
 800195a:	f002 fea7 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800195e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001962:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001964:	2301      	movs	r3, #1
 8001966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4822      	ldr	r0, [pc, #136]	; (8001a00 <MX_GPIO_Init+0x278>)
 8001978:	f002 fe98 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_HOME_SWITCH_Pin */
  GPIO_InitStruct.Pin = Z_HOME_SWITCH_Pin;
 800197c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001986:	2301      	movs	r3, #1
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Z_HOME_SWITCH_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	481a      	ldr	r0, [pc, #104]	; (80019fc <MX_GPIO_Init+0x274>)
 8001992:	f002 fe8b 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001996:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199c:	2302      	movs	r3, #2
 800199e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a4:	2300      	movs	r3, #0
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019a8:	2306      	movs	r3, #6
 80019aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4812      	ldr	r0, [pc, #72]	; (80019fc <MX_GPIO_Init+0x274>)
 80019b4:	f002 fe7a 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019b8:	2320      	movs	r3, #32
 80019ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	480d      	ldr	r0, [pc, #52]	; (8001a00 <MX_GPIO_Init+0x278>)
 80019cc:	f002 fe6e 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80019d0:	2302      	movs	r3, #2
 80019d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019d4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80019d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_GPIO_Init+0x270>)
 80019e6:	f002 fe61 	bl	80046ac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019ea:	bf00      	nop
 80019ec:	3730      	adds	r7, #48	; 0x30
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40020800 	.word	0x40020800
 8001a00:	40020c00 	.word	0x40020c00
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40020400 	.word	0x40020400

08001a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a10:	b672      	cpsid	i
}
 8001a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <Error_Handler+0x8>

08001a16 <mt_move_to_home>:
extern TIM_HandleTypeDef htim5;

_motor_typedef x_motor;


void mt_move_to_home(_motor_typedef *motor){
 8001a16:	b480      	push	{r7}
 8001a18:	b083      	sub	sp, #12
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
	if(motor->command == CMD_IDLE){
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	7d1b      	ldrb	r3, [r3, #20]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <mt_move_to_home+0x16>
		motor->command = CMD_REQUEST_HOME;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	751a      	strb	r2, [r3, #20]
	}
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <mt_set_target_position>:

void mt_set_target_position(_motor_typedef *motor,uint32_t new_position){
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
	motor->next_pos = new_position;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	60da      	str	r2, [r3, #12]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <x_mt_set_dir>:

void x_mt_set_dir(){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	if(x_motor.current_pos < x_motor.next_pos){
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <x_mt_set_dir+0x5c>)
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <x_mt_set_dir+0x5c>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d211      	bcs.n	8001a88 <x_mt_set_dir+0x34>
		x_motor.current_dir = DIR_FORWARD;
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <x_mt_set_dir+0x5c>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_FORWARD);
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a70:	4810      	ldr	r0, [pc, #64]	; (8001ab4 <x_mt_set_dir+0x60>)
 8001a72:	f002 ffcf 	bl	8004a14 <HAL_GPIO_WritePin>
		htim2.Instance->CR1 &= ~(1<<4);
 8001a76:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <x_mt_set_dir+0x64>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <x_mt_set_dir+0x64>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f022 0210 	bic.w	r2, r2, #16
 8001a84:	601a      	str	r2, [r3, #0]
		x_motor.current_dir = DIR_BACKWARD;
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_BACKWARD);
		htim2.Instance->CR1 |= (1<<4);
	}

}
 8001a86:	e010      	b.n	8001aaa <x_mt_set_dir+0x56>
		x_motor.current_dir = DIR_BACKWARD;
 8001a88:	4b09      	ldr	r3, [pc, #36]	; (8001ab0 <x_mt_set_dir+0x5c>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_BACKWARD);
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a94:	4807      	ldr	r0, [pc, #28]	; (8001ab4 <x_mt_set_dir+0x60>)
 8001a96:	f002 ffbd 	bl	8004a14 <HAL_GPIO_WritePin>
		htim2.Instance->CR1 |= (1<<4);
 8001a9a:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <x_mt_set_dir+0x64>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <x_mt_set_dir+0x64>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f042 0210 	orr.w	r2, r2, #16
 8001aa8:	601a      	str	r2, [r3, #0]
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	200028c8 	.word	0x200028c8
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	20001284 	.word	0x20001284

08001abc <x_mt_start>:


void x_mt_start(){
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4802      	ldr	r0, [pc, #8]	; (8001acc <x_mt_start+0x10>)
 8001ac4:	f005 f9ce 	bl	8006e64 <HAL_TIM_PWM_Start>
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	2000123c 	.word	0x2000123c

08001ad0 <x_mt_stop>:




void x_mt_stop()
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <x_mt_stop+0x10>)
 8001ad8:	f005 fa8c 	bl	8006ff4 <HAL_TIM_PWM_Stop>
}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	2000123c 	.word	0x2000123c

08001ae4 <x_set_current_position>:

void x_mt_move_to_pos(uint32_t pos){
	x_motor.next_pos = pos;
}

void x_set_current_position(uint32_t pos){
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	x_motor.current_pos = pos;
 8001aec:	4a06      	ldr	r2, [pc, #24]	; (8001b08 <x_set_current_position+0x24>)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6093      	str	r3, [r2, #8]
	htim2.Instance->CNT = pos;
 8001af2:	4b06      	ldr	r3, [pc, #24]	; (8001b0c <x_set_current_position+0x28>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	200028c8 	.word	0x200028c8
 8001b0c:	20001284 	.word	0x20001284

08001b10 <x_step_mt_int>:


void x_step_mt_int(void){
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	x_motor.current_pos= x_motor.next_pos = htim2.Instance->CNT = 0;
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <x_step_mt_int+0x3c>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	6253      	str	r3, [r2, #36]	; 0x24
 8001b1c:	4a0c      	ldr	r2, [pc, #48]	; (8001b50 <x_step_mt_int+0x40>)
 8001b1e:	60d3      	str	r3, [r2, #12]
 8001b20:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <x_step_mt_int+0x40>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	4a0a      	ldr	r2, [pc, #40]	; (8001b50 <x_step_mt_int+0x40>)
 8001b26:	6093      	str	r3, [r2, #8]
	x_motor.old_pos = x_motor.ud_time =0;
 8001b28:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <x_step_mt_int+0x40>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <x_step_mt_int+0x40>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <x_step_mt_int+0x40>)
 8001b34:	6053      	str	r3, [r2, #4]
	x_motor.home_achieve = 0;
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <x_step_mt_int+0x40>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	749a      	strb	r2, [r3, #18]
	x_motor.set_current_position = x_set_current_position;
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <x_step_mt_int+0x40>)
 8001b3e:	4a05      	ldr	r2, [pc, #20]	; (8001b54 <x_step_mt_int+0x44>)
 8001b40:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Start(&htim2);
 8001b42:	4802      	ldr	r0, [pc, #8]	; (8001b4c <x_step_mt_int+0x3c>)
 8001b44:	f005 f8cc 	bl	8006ce0 <HAL_TIM_Base_Start>
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20001284 	.word	0x20001284
 8001b50:	200028c8 	.word	0x200028c8
 8001b54:	08001ae5 	.word	0x08001ae5

08001b58 <step_mt_move_foward>:

void step_mt_move_foward(_motor_typedef *step,uint32_t numstep){
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
	step->next_pos +=numstep;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	441a      	add	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60da      	str	r2, [r3, #12]
	if(step->next_pos > 2000000000)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	4a06      	ldr	r2, [pc, #24]	; (8001b8c <step_mt_move_foward+0x34>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d902      	bls.n	8001b7e <step_mt_move_foward+0x26>
	{
		step->next_pos =2000000000;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <step_mt_move_foward+0x34>)
 8001b7c:	60da      	str	r2, [r3, #12]
	}
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	77359400 	.word	0x77359400

08001b90 <step_mt_move_backward>:

void step_mt_move_backward(_motor_typedef *step,uint32_t numstep){
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
	step->next_pos -=numstep;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	1ad2      	subs	r2, r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	60da      	str	r2, [r3, #12]
	if(step->next_pos > 2000000000)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	68db      	ldr	r3, [r3, #12]
 8001baa:	4a06      	ldr	r2, [pc, #24]	; (8001bc4 <step_mt_move_backward+0x34>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d902      	bls.n	8001bb6 <step_mt_move_backward+0x26>
	{
		step->next_pos =0;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]
	}
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	77359400 	.word	0x77359400

08001bc8 <x_step_motor_home_position>:

void x_step_motor_home_position()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(X_HOME_SWITCH_GPIO_Port, X_HOME_SWITCH_Pin) && (!x_motor.is_home))
 8001bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bd0:	4811      	ldr	r0, [pc, #68]	; (8001c18 <x_step_motor_home_position+0x50>)
 8001bd2:	f002 ff07 	bl	80049e4 <HAL_GPIO_ReadPin>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d112      	bne.n	8001c02 <x_step_motor_home_position+0x3a>
 8001bdc:	4b0f      	ldr	r3, [pc, #60]	; (8001c1c <x_step_motor_home_position+0x54>)
 8001bde:	7cdb      	ldrb	r3, [r3, #19]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10e      	bne.n	8001c02 <x_step_motor_home_position+0x3a>
	{
		x_motor.home_achieve = 1;
 8001be4:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <x_step_motor_home_position+0x54>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	749a      	strb	r2, [r3, #18]
		x_motor.is_home = 1;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	; (8001c1c <x_step_motor_home_position+0x54>)
 8001bec:	2201      	movs	r2, #1
 8001bee:	74da      	strb	r2, [r3, #19]
		x_mt_stop();
 8001bf0:	f7ff ff6e 	bl	8001ad0 <x_mt_stop>
		x_motor.current_dir = htim2.Instance->CNT =0;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <x_step_motor_home_position+0x58>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	625a      	str	r2, [r3, #36]	; 0x24
 8001bfc:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <x_step_motor_home_position+0x54>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	741a      	strb	r2, [r3, #16]
	}
	if(htim2.Instance->CNT)
 8001c02:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <x_step_motor_home_position+0x58>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d002      	beq.n	8001c12 <x_step_motor_home_position+0x4a>
	{
		x_motor.is_home = 0;
 8001c0c:	4b03      	ldr	r3, [pc, #12]	; (8001c1c <x_step_motor_home_position+0x54>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	74da      	strb	r2, [r3, #19]
	}
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	200028c8 	.word	0x200028c8
 8001c20:	20001284 	.word	0x20001284

08001c24 <home_process>:

void home_process(_motor_typedef *motor)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
	switch (motor->command) {
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7d1b      	ldrb	r3, [r3, #20]
 8001c30:	2b03      	cmp	r3, #3
 8001c32:	d029      	beq.n	8001c88 <home_process+0x64>
 8001c34:	2b03      	cmp	r3, #3
 8001c36:	dc2b      	bgt.n	8001c90 <home_process+0x6c>
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d002      	beq.n	8001c42 <home_process+0x1e>
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d01b      	beq.n	8001c78 <home_process+0x54>
			break;
		case CMD_HOME_FINSH:
			motor->command = CMD_IDLE;
			break;
		default:
			break;
 8001c40:	e026      	b.n	8001c90 <home_process+0x6c>
			if(motor->home_achieve && (motor->current_pos == 0))
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7c9b      	ldrb	r3, [r3, #18]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <home_process+0x36>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d103      	bne.n	8001c5a <home_process+0x36>
				motor->command = CMD_HOME_FINSH;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2203      	movs	r2, #3
 8001c56:	751a      	strb	r2, [r3, #20]
				break;
 8001c58:	e01d      	b.n	8001c96 <home_process+0x72>
			if(!motor->home_achieve)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	7c9b      	ldrb	r3, [r3, #18]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d103      	bne.n	8001c6a <home_process+0x46>
				motor->set_current_position(200000000);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	699b      	ldr	r3, [r3, #24]
 8001c66:	480e      	ldr	r0, [pc, #56]	; (8001ca0 <home_process+0x7c>)
 8001c68:	4798      	blx	r3
			motor ->next_pos = 0;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
			motor->command = CMD_WAIT_HOME;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2202      	movs	r2, #2
 8001c74:	751a      	strb	r2, [r3, #20]
			break;
 8001c76:	e00e      	b.n	8001c96 <home_process+0x72>
			if(motor->current_pos == 0)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d109      	bne.n	8001c94 <home_process+0x70>
				motor->command = CMD_HOME_FINSH;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2203      	movs	r2, #3
 8001c84:	751a      	strb	r2, [r3, #20]
			break;
 8001c86:	e005      	b.n	8001c94 <home_process+0x70>
			motor->command = CMD_IDLE;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	751a      	strb	r2, [r3, #20]
			break;
 8001c8e:	e002      	b.n	8001c96 <home_process+0x72>
			break;
 8001c90:	bf00      	nop
 8001c92:	e000      	b.n	8001c96 <home_process+0x72>
			break;
 8001c94:	bf00      	nop
	}
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	0bebc200 	.word	0x0bebc200

08001ca4 <x_step_motor_process>:
void x_step_motor_process(void){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
	x_motor.current_pos = htim2.Instance->CNT;
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	; (8001d54 <x_step_motor_process+0xb0>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	4a2a      	ldr	r2, [pc, #168]	; (8001d58 <x_step_motor_process+0xb4>)
 8001cb0:	6093      	str	r3, [r2, #8]
	x_step_motor_home_position();
 8001cb2:	f7ff ff89 	bl	8001bc8 <x_step_motor_home_position>
	home_process(&x_motor);
 8001cb6:	4828      	ldr	r0, [pc, #160]	; (8001d58 <x_step_motor_process+0xb4>)
 8001cb8:	f7ff ffb4 	bl	8001c24 <home_process>
	switch (x_motor.state) {
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <x_step_motor_process+0xb4>)
 8001cbe:	7c5b      	ldrb	r3, [r3, #17]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d83f      	bhi.n	8001d44 <x_step_motor_process+0xa0>
 8001cc4:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <x_step_motor_process+0x28>)
 8001cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cca:	bf00      	nop
 8001ccc:	08001cdd 	.word	0x08001cdd
 8001cd0:	08001cf9 	.word	0x08001cf9
 8001cd4:	08001d09 	.word	0x08001d09
 8001cd8:	08001d39 	.word	0x08001d39
		case MT_STATE_IDLE:
			if(abs(x_motor.current_pos- x_motor.next_pos) > STEP_LOSS){
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	; (8001d58 <x_step_motor_process+0xb4>)
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <x_step_motor_process+0xb4>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bfb8      	it	lt
 8001cea:	425b      	neglt	r3, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	dd2b      	ble.n	8001d48 <x_step_motor_process+0xa4>
				x_motor.state = MT_STATE_START;
 8001cf0:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <x_step_motor_process+0xb4>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	745a      	strb	r2, [r3, #17]
			}
			break;
 8001cf6:	e027      	b.n	8001d48 <x_step_motor_process+0xa4>
		case MT_STATE_START:
			x_mt_set_dir();
 8001cf8:	f7ff feac 	bl	8001a54 <x_mt_set_dir>
			x_mt_start();
 8001cfc:	f7ff fede 	bl	8001abc <x_mt_start>
			x_motor.state = MT_STATE_RUNING;
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <x_step_motor_process+0xb4>)
 8001d02:	2202      	movs	r2, #2
 8001d04:	745a      	strb	r2, [r3, #17]
			break;
 8001d06:	e022      	b.n	8001d4e <x_step_motor_process+0xaa>
		case MT_STATE_RUNING:
			if(x_motor.current_dir == DIR_FORWARD){
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <x_step_motor_process+0xb4>)
 8001d0a:	7c1b      	ldrb	r3, [r3, #16]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <x_step_motor_process+0x80>
				if(x_motor.current_pos >= x_motor.next_pos){
 8001d10:	4b11      	ldr	r3, [pc, #68]	; (8001d58 <x_step_motor_process+0xb4>)
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	4b10      	ldr	r3, [pc, #64]	; (8001d58 <x_step_motor_process+0xb4>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d317      	bcc.n	8001d4c <x_step_motor_process+0xa8>
					x_motor.state = MT_STATE_STTOP;
 8001d1c:	4b0e      	ldr	r3, [pc, #56]	; (8001d58 <x_step_motor_process+0xb4>)
 8001d1e:	2203      	movs	r2, #3
 8001d20:	745a      	strb	r2, [r3, #17]
				}
			}
//			if(abs(x_motor.current_pos- x_motor.next_pos) < STEP_LOSS){
//							x_motor.state = MT_STATE_STTOP;
//			}
			break;
 8001d22:	e013      	b.n	8001d4c <x_step_motor_process+0xa8>
				if(x_motor.current_pos <= x_motor.next_pos){
 8001d24:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <x_step_motor_process+0xb4>)
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	4b0b      	ldr	r3, [pc, #44]	; (8001d58 <x_step_motor_process+0xb4>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d80d      	bhi.n	8001d4c <x_step_motor_process+0xa8>
					x_motor.state = MT_STATE_STTOP;
 8001d30:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <x_step_motor_process+0xb4>)
 8001d32:	2203      	movs	r2, #3
 8001d34:	745a      	strb	r2, [r3, #17]
			break;
 8001d36:	e009      	b.n	8001d4c <x_step_motor_process+0xa8>
		case MT_STATE_STTOP:
			x_mt_stop();
 8001d38:	f7ff feca 	bl	8001ad0 <x_mt_stop>
			x_motor.state = MT_STATE_IDLE;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <x_step_motor_process+0xb4>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	745a      	strb	r2, [r3, #17]
			break;
 8001d42:	e004      	b.n	8001d4e <x_step_motor_process+0xaa>
		default:
			break;
 8001d44:	bf00      	nop
 8001d46:	e002      	b.n	8001d4e <x_step_motor_process+0xaa>
			break;
 8001d48:	bf00      	nop
 8001d4a:	e000      	b.n	8001d4e <x_step_motor_process+0xaa>
			break;
 8001d4c:	bf00      	nop
	}
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	20001284 	.word	0x20001284
 8001d58:	200028c8 	.word	0x200028c8

08001d5c <z_mt_set_dir>:

_motor_typedef z_motor;



void z_mt_set_dir(){
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	if(z_motor.current_pos < z_motor.next_pos){
 8001d60:	4b14      	ldr	r3, [pc, #80]	; (8001db4 <z_mt_set_dir+0x58>)
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <z_mt_set_dir+0x58>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d210      	bcs.n	8001d8e <z_mt_set_dir+0x32>
		z_motor.current_dir = DIR_FORWARD;
 8001d6c:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <z_mt_set_dir+0x58>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_FORWARD);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2180      	movs	r1, #128	; 0x80
 8001d76:	4810      	ldr	r0, [pc, #64]	; (8001db8 <z_mt_set_dir+0x5c>)
 8001d78:	f002 fe4c 	bl	8004a14 <HAL_GPIO_WritePin>
		htim5.Instance->CR1 &= ~(1<<4);
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <z_mt_set_dir+0x60>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <z_mt_set_dir+0x60>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0210 	bic.w	r2, r2, #16
 8001d8a:	601a      	str	r2, [r3, #0]
		z_motor.current_dir = DIR_BACKWARD;
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_BACKWARD);
		htim5.Instance->CR1 |= (1<<4);
	}

}
 8001d8c:	e00f      	b.n	8001dae <z_mt_set_dir+0x52>
		z_motor.current_dir = DIR_BACKWARD;
 8001d8e:	4b09      	ldr	r3, [pc, #36]	; (8001db4 <z_mt_set_dir+0x58>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_BACKWARD);
 8001d94:	2201      	movs	r2, #1
 8001d96:	2180      	movs	r1, #128	; 0x80
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <z_mt_set_dir+0x5c>)
 8001d9a:	f002 fe3b 	bl	8004a14 <HAL_GPIO_WritePin>
		htim5.Instance->CR1 |= (1<<4);
 8001d9e:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <z_mt_set_dir+0x60>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <z_mt_set_dir+0x60>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0210 	orr.w	r2, r2, #16
 8001dac:	601a      	str	r2, [r3, #0]
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	200028f8 	.word	0x200028f8
 8001db8:	40020800 	.word	0x40020800
 8001dbc:	20001314 	.word	0x20001314

08001dc0 <z_mt_start>:

void z_mt_start(){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <z_mt_start+0x10>)
 8001dc8:	f005 f84c 	bl	8006e64 <HAL_TIM_PWM_Start>
}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	200012cc 	.word	0x200012cc

08001dd4 <z_mt_stop>:

void z_mt_stop()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	4802      	ldr	r0, [pc, #8]	; (8001de4 <z_mt_stop+0x10>)
 8001ddc:	f005 f90a 	bl	8006ff4 <HAL_TIM_PWM_Stop>
}
 8001de0:	bf00      	nop
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	200012cc 	.word	0x200012cc

08001de8 <z_set_current_position>:
	z_motor.current_pos = htim5.Instance->CNT;
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
	z_mt_set_dir(z_motor.current_pos,z_motor.next_pos);
}

void z_set_current_position(uint32_t pos){
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	z_motor.current_pos = pos;
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <z_set_current_position+0x24>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6093      	str	r3, [r2, #8]
	htim5.Instance->CNT = pos;
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <z_set_current_position+0x28>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001dfe:	bf00      	nop
 8001e00:	370c      	adds	r7, #12
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	200028f8 	.word	0x200028f8
 8001e10:	20001314 	.word	0x20001314

08001e14 <z_step_mt_int>:
void z_step_mt_int(void){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
	z_motor.current_pos= z_motor.next_pos = htim5.Instance->CNT = 0;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <z_step_mt_int+0x38>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	6253      	str	r3, [r2, #36]	; 0x24
 8001e20:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <z_step_mt_int+0x3c>)
 8001e22:	60d3      	str	r3, [r2, #12]
 8001e24:	4b0a      	ldr	r3, [pc, #40]	; (8001e50 <z_step_mt_int+0x3c>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4a09      	ldr	r2, [pc, #36]	; (8001e50 <z_step_mt_int+0x3c>)
 8001e2a:	6093      	str	r3, [r2, #8]
	z_motor.old_pos = z_motor.ud_time =0;
 8001e2c:	4b08      	ldr	r3, [pc, #32]	; (8001e50 <z_step_mt_int+0x3c>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <z_step_mt_int+0x3c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a06      	ldr	r2, [pc, #24]	; (8001e50 <z_step_mt_int+0x3c>)
 8001e38:	6053      	str	r3, [r2, #4]
	z_motor.set_current_position = z_set_current_position;
 8001e3a:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <z_step_mt_int+0x3c>)
 8001e3c:	4a05      	ldr	r2, [pc, #20]	; (8001e54 <z_step_mt_int+0x40>)
 8001e3e:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Start(&htim5);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <z_step_mt_int+0x38>)
 8001e42:	f004 ff4d 	bl	8006ce0 <HAL_TIM_Base_Start>
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20001314 	.word	0x20001314
 8001e50:	200028f8 	.word	0x200028f8
 8001e54:	08001de9 	.word	0x08001de9

08001e58 <z_step_motor_home_position>:


void z_step_motor_home_position()
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(Z_HOME_SWITCH_GPIO_Port, Z_HOME_SWITCH_Pin) && (!z_motor.is_home))
 8001e5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e60:	4810      	ldr	r0, [pc, #64]	; (8001ea4 <z_step_motor_home_position+0x4c>)
 8001e62:	f002 fdbf 	bl	80049e4 <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d111      	bne.n	8001e90 <z_step_motor_home_position+0x38>
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <z_step_motor_home_position+0x50>)
 8001e6e:	7cdb      	ldrb	r3, [r3, #19]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10d      	bne.n	8001e90 <z_step_motor_home_position+0x38>
	{
		z_motor.home_achieve = 1;
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <z_step_motor_home_position+0x50>)
 8001e76:	2201      	movs	r2, #1
 8001e78:	749a      	strb	r2, [r3, #18]
		z_motor.is_home = 1;
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <z_step_motor_home_position+0x50>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	74da      	strb	r2, [r3, #19]
		z_mt_stop();
 8001e80:	f7ff ffa8 	bl	8001dd4 <z_mt_stop>
		z_motor.current_pos = htim5.Instance->CNT =0;
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <z_step_motor_home_position+0x54>)
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	6253      	str	r3, [r2, #36]	; 0x24
 8001e8c:	4a06      	ldr	r2, [pc, #24]	; (8001ea8 <z_step_motor_home_position+0x50>)
 8001e8e:	6093      	str	r3, [r2, #8]
	}
	if(htim5.Instance->CNT)
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <z_step_motor_home_position+0x54>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d002      	beq.n	8001ea0 <z_step_motor_home_position+0x48>
	{
		z_motor.is_home = 0;
 8001e9a:	4b03      	ldr	r3, [pc, #12]	; (8001ea8 <z_step_motor_home_position+0x50>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	74da      	strb	r2, [r3, #19]
	}
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40020800 	.word	0x40020800
 8001ea8:	200028f8 	.word	0x200028f8
 8001eac:	20001314 	.word	0x20001314

08001eb0 <z_step_motor_process>:



void z_step_motor_process(void){
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
	z_motor.current_pos = htim5.Instance->CNT;
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <z_step_motor_process+0xb0>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eba:	4a2a      	ldr	r2, [pc, #168]	; (8001f64 <z_step_motor_process+0xb4>)
 8001ebc:	6093      	str	r3, [r2, #8]
	z_step_motor_home_position();
 8001ebe:	f7ff ffcb 	bl	8001e58 <z_step_motor_home_position>
	home_process(&z_motor);
 8001ec2:	4828      	ldr	r0, [pc, #160]	; (8001f64 <z_step_motor_process+0xb4>)
 8001ec4:	f7ff feae 	bl	8001c24 <home_process>
//	if(znext!= z_motor.next_pos)
//	{
//		znext= z_motor.next_pos;
//		printf("z next: %lu\n",z_motor.next_pos);
//	}
	switch (z_motor.state) {
 8001ec8:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <z_step_motor_process+0xb4>)
 8001eca:	7c5b      	ldrb	r3, [r3, #17]
 8001ecc:	2b03      	cmp	r3, #3
 8001ece:	d83f      	bhi.n	8001f50 <z_step_motor_process+0xa0>
 8001ed0:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <z_step_motor_process+0x28>)
 8001ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed6:	bf00      	nop
 8001ed8:	08001ee9 	.word	0x08001ee9
 8001edc:	08001f05 	.word	0x08001f05
 8001ee0:	08001f15 	.word	0x08001f15
 8001ee4:	08001f45 	.word	0x08001f45
		case MT_STATE_IDLE:
			if(abs(z_motor.current_pos- z_motor.next_pos) > STEP_LOSS){
 8001ee8:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <z_step_motor_process+0xb4>)
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <z_step_motor_process+0xb4>)
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	bfb8      	it	lt
 8001ef6:	425b      	neglt	r3, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	dd2b      	ble.n	8001f54 <z_step_motor_process+0xa4>
				z_motor.state = MT_STATE_START;
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <z_step_motor_process+0xb4>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	745a      	strb	r2, [r3, #17]
			}
			break;
 8001f02:	e027      	b.n	8001f54 <z_step_motor_process+0xa4>
		case MT_STATE_START:
			z_mt_set_dir();
 8001f04:	f7ff ff2a 	bl	8001d5c <z_mt_set_dir>
			z_mt_start();
 8001f08:	f7ff ff5a 	bl	8001dc0 <z_mt_start>
			z_motor.state = MT_STATE_RUNING;
 8001f0c:	4b15      	ldr	r3, [pc, #84]	; (8001f64 <z_step_motor_process+0xb4>)
 8001f0e:	2202      	movs	r2, #2
 8001f10:	745a      	strb	r2, [r3, #17]
			break;
 8001f12:	e022      	b.n	8001f5a <z_step_motor_process+0xaa>
		case MT_STATE_RUNING:
			if(z_motor.current_dir == DIR_FORWARD){
 8001f14:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <z_step_motor_process+0xb4>)
 8001f16:	7c1b      	ldrb	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <z_step_motor_process+0x80>
				if(z_motor.current_pos >= z_motor.next_pos){
 8001f1c:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <z_step_motor_process+0xb4>)
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4b10      	ldr	r3, [pc, #64]	; (8001f64 <z_step_motor_process+0xb4>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d317      	bcc.n	8001f58 <z_step_motor_process+0xa8>
					z_motor.state = MT_STATE_STTOP;
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <z_step_motor_process+0xb4>)
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	745a      	strb	r2, [r3, #17]
			} else {
				if(z_motor.current_pos <= z_motor.next_pos){
					z_motor.state = MT_STATE_STTOP;
				}
			}
			break;
 8001f2e:	e013      	b.n	8001f58 <z_step_motor_process+0xa8>
				if(z_motor.current_pos <= z_motor.next_pos){
 8001f30:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <z_step_motor_process+0xb4>)
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <z_step_motor_process+0xb4>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d80d      	bhi.n	8001f58 <z_step_motor_process+0xa8>
					z_motor.state = MT_STATE_STTOP;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <z_step_motor_process+0xb4>)
 8001f3e:	2203      	movs	r2, #3
 8001f40:	745a      	strb	r2, [r3, #17]
			break;
 8001f42:	e009      	b.n	8001f58 <z_step_motor_process+0xa8>
		case MT_STATE_STTOP:
			z_mt_stop();
 8001f44:	f7ff ff46 	bl	8001dd4 <z_mt_stop>
			z_motor.state = MT_STATE_IDLE;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <z_step_motor_process+0xb4>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	745a      	strb	r2, [r3, #17]
			break;
 8001f4e:	e004      	b.n	8001f5a <z_step_motor_process+0xaa>
		default:
			break;
 8001f50:	bf00      	nop
 8001f52:	e002      	b.n	8001f5a <z_step_motor_process+0xaa>
			break;
 8001f54:	bf00      	nop
 8001f56:	e000      	b.n	8001f5a <z_step_motor_process+0xaa>
			break;
 8001f58:	bf00      	nop
	}
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20001314 	.word	0x20001314
 8001f64:	200028f8 	.word	0x200028f8

08001f68 <step_shake_start>:
static uint8_t running_step= 0;
static _def_step step_para;
static uint32_t t_time = 0;
_step_shake_state shake_state = SHAKE_STATE_IDE;
int step_shake_start(void)
{
 8001f68:	b598      	push	{r3, r4, r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	if(shake_state == SHAKE_STATE_IDE)
 8001f6c:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <step_shake_start+0x68>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d129      	bne.n	8001fc8 <step_shake_start+0x60>
	{
		LOGI("start step: %d of program : %d",running_step,running_pg);
 8001f74:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <step_shake_start+0x6c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <step_shake_start+0x70>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	4917      	ldr	r1, [pc, #92]	; (8001fdc <step_shake_start+0x74>)
 8001f80:	4817      	ldr	r0, [pc, #92]	; (8001fe0 <step_shake_start+0x78>)
 8001f82:	f00b fbe3 	bl	800d74c <iprintf>
		step_para = system_data.flash_data.Program_para[running_pg][running_step];
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <step_shake_start+0x70>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <step_shake_start+0x6c>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	4c14      	ldr	r4, [pc, #80]	; (8001fe4 <step_shake_start+0x7c>)
 8001f94:	4914      	ldr	r1, [pc, #80]	; (8001fe8 <step_shake_start+0x80>)
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	005b      	lsls	r3, r3, #1
 8001f9e:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001fa2:	fb00 f202 	mul.w	r2, r0, r2
 8001fa6:	4413      	add	r3, r2
 8001fa8:	440b      	add	r3, r1
 8001faa:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001fae:	4623      	mov	r3, r4
 8001fb0:	1d14      	adds	r4, r2, #4
 8001fb2:	6820      	ldr	r0, [r4, #0]
 8001fb4:	6861      	ldr	r1, [r4, #4]
 8001fb6:	68a2      	ldr	r2, [r4, #8]
 8001fb8:	c307      	stmia	r3!, {r0, r1, r2}
 8001fba:	89a2      	ldrh	r2, [r4, #12]
 8001fbc:	801a      	strh	r2, [r3, #0]
		shake_state = SHAKE_STATE_START;
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <step_shake_start+0x68>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	701a      	strb	r2, [r3, #0]
		return 1;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e000      	b.n	8001fca <step_shake_start+0x62>
	}
	return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	bd98      	pop	{r3, r4, r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20002940 	.word	0x20002940
 8001fd4:	20002929 	.word	0x20002929
 8001fd8:	20002928 	.word	0x20002928
 8001fdc:	0800eb60 	.word	0x0800eb60
 8001fe0:	0800eb68 	.word	0x0800eb68
 8001fe4:	2000292c 	.word	0x2000292c
 8001fe8:	2000017c 	.word	0x2000017c

08001fec <show_infor_shake_step>:
//return 1 mean step done
void show_infor_shake_step()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	LOGI("1:Move to Wells: %d",step_para.wells);
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <show_infor_shake_step+0x6c>)
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	4919      	ldr	r1, [pc, #100]	; (800205c <show_infor_shake_step+0x70>)
 8001ff8:	4819      	ldr	r0, [pc, #100]	; (8002060 <show_infor_shake_step+0x74>)
 8001ffa:	f00b fba7 	bl	800d74c <iprintf>
	LOGI("2:wait1 : %ds",step_para.timing[0]);
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <show_infor_shake_step+0x6c>)
 8002000:	885b      	ldrh	r3, [r3, #2]
 8002002:	461a      	mov	r2, r3
 8002004:	4915      	ldr	r1, [pc, #84]	; (800205c <show_infor_shake_step+0x70>)
 8002006:	4817      	ldr	r0, [pc, #92]	; (8002064 <show_infor_shake_step+0x78>)
 8002008:	f00b fba0 	bl	800d74c <iprintf>
	LOGI("3:move z to bottom");
 800200c:	4913      	ldr	r1, [pc, #76]	; (800205c <show_infor_shake_step+0x70>)
 800200e:	4816      	ldr	r0, [pc, #88]	; (8002068 <show_infor_shake_step+0x7c>)
 8002010:	f00b fb9c 	bl	800d74c <iprintf>
	LOGI("4:wait2 : %ds",step_para.timing[1]);
 8002014:	4b10      	ldr	r3, [pc, #64]	; (8002058 <show_infor_shake_step+0x6c>)
 8002016:	889b      	ldrh	r3, [r3, #4]
 8002018:	461a      	mov	r2, r3
 800201a:	4910      	ldr	r1, [pc, #64]	; (800205c <show_infor_shake_step+0x70>)
 800201c:	4813      	ldr	r0, [pc, #76]	; (800206c <show_infor_shake_step+0x80>)
 800201e:	f00b fb95 	bl	800d74c <iprintf>
	LOGI("5:shake on : %ds",step_para.timing[2]);
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <show_infor_shake_step+0x6c>)
 8002024:	88db      	ldrh	r3, [r3, #6]
 8002026:	461a      	mov	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	; (800205c <show_infor_shake_step+0x70>)
 800202a:	4811      	ldr	r0, [pc, #68]	; (8002070 <show_infor_shake_step+0x84>)
 800202c:	f00b fb8e 	bl	800d74c <iprintf>
	LOGI("6:wait4 : %ds",step_para.timing[3]);
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <show_infor_shake_step+0x6c>)
 8002032:	891b      	ldrh	r3, [r3, #8]
 8002034:	461a      	mov	r2, r3
 8002036:	4909      	ldr	r1, [pc, #36]	; (800205c <show_infor_shake_step+0x70>)
 8002038:	480e      	ldr	r0, [pc, #56]	; (8002074 <show_infor_shake_step+0x88>)
 800203a:	f00b fb87 	bl	800d74c <iprintf>
	LOGI("7:move z to top");
 800203e:	4907      	ldr	r1, [pc, #28]	; (800205c <show_infor_shake_step+0x70>)
 8002040:	480d      	ldr	r0, [pc, #52]	; (8002078 <show_infor_shake_step+0x8c>)
 8002042:	f00b fb83 	bl	800d74c <iprintf>
	LOGI("8:wait5 : %ds",step_para.timing[4]);
 8002046:	4b04      	ldr	r3, [pc, #16]	; (8002058 <show_infor_shake_step+0x6c>)
 8002048:	895b      	ldrh	r3, [r3, #10]
 800204a:	461a      	mov	r2, r3
 800204c:	4903      	ldr	r1, [pc, #12]	; (800205c <show_infor_shake_step+0x70>)
 800204e:	480b      	ldr	r0, [pc, #44]	; (800207c <show_infor_shake_step+0x90>)
 8002050:	f00b fb7c 	bl	800d74c <iprintf>
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}
 8002058:	2000292c 	.word	0x2000292c
 800205c:	0800eb60 	.word	0x0800eb60
 8002060:	0800eb90 	.word	0x0800eb90
 8002064:	0800ebac 	.word	0x0800ebac
 8002068:	0800ebc0 	.word	0x0800ebc0
 800206c:	0800ebdc 	.word	0x0800ebdc
 8002070:	0800ebf0 	.word	0x0800ebf0
 8002074:	0800ec08 	.word	0x0800ec08
 8002078:	0800ec1c 	.word	0x0800ec1c
 800207c:	0800ec34 	.word	0x0800ec34

08002080 <step_shake_process>:
int step_shake_process(void){
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
	static _step_shake_state old_state = SHAKE_STATE_IDE;

	switch (shake_state) {
 8002084:	4bab      	ldr	r3, [pc, #684]	; (8002334 <step_shake_process+0x2b4>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b07      	cmp	r3, #7
 800208a:	f200 814d 	bhi.w	8002328 <step_shake_process+0x2a8>
 800208e:	a201      	add	r2, pc, #4	; (adr r2, 8002094 <step_shake_process+0x14>)
 8002090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002094:	08002329 	.word	0x08002329
 8002098:	080020b5 	.word	0x080020b5
 800209c:	080020f7 	.word	0x080020f7
 80020a0:	08002147 	.word	0x08002147
 80020a4:	08002207 	.word	0x08002207
 80020a8:	0800224d 	.word	0x0800224d
 80020ac:	080022cf 	.word	0x080022cf
 80020b0:	0800230f 	.word	0x0800230f
//	                old_state = shake_state;
//	                shake_state = SHAKE_STATE_START;
	                break;
	            case SHAKE_STATE_START:
	                // handle SHAKE_STATE_START -> move x to well
	            	show_infor_shake_step();
 80020b4:	f7ff ff9a 	bl	8001fec <show_infor_shake_step>
	            	LOGI("move x to %lu",system_data.flash_data.Well_position[step_para.wells-1]);
 80020b8:	4b9f      	ldr	r3, [pc, #636]	; (8002338 <step_shake_process+0x2b8>)
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	3b01      	subs	r3, #1
 80020be:	4a9f      	ldr	r2, [pc, #636]	; (800233c <step_shake_process+0x2bc>)
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	461a      	mov	r2, r3
 80020c8:	499d      	ldr	r1, [pc, #628]	; (8002340 <step_shake_process+0x2c0>)
 80020ca:	489e      	ldr	r0, [pc, #632]	; (8002344 <step_shake_process+0x2c4>)
 80020cc:	f00b fb3e 	bl	800d74c <iprintf>
	            	mt_set_target_position(&x_motor, system_data.flash_data.Well_position[step_para.wells-1]);
 80020d0:	4b99      	ldr	r3, [pc, #612]	; (8002338 <step_shake_process+0x2b8>)
 80020d2:	785b      	ldrb	r3, [r3, #1]
 80020d4:	3b01      	subs	r3, #1
 80020d6:	4a99      	ldr	r2, [pc, #612]	; (800233c <step_shake_process+0x2bc>)
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	4619      	mov	r1, r3
 80020e0:	4899      	ldr	r0, [pc, #612]	; (8002348 <step_shake_process+0x2c8>)
 80020e2:	f7ff fca9 	bl	8001a38 <mt_set_target_position>
	                old_state = shake_state;
 80020e6:	4b93      	ldr	r3, [pc, #588]	; (8002334 <step_shake_process+0x2b4>)
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	4b98      	ldr	r3, [pc, #608]	; (800234c <step_shake_process+0x2cc>)
 80020ec:	701a      	strb	r2, [r3, #0]
	                shake_state = SHAKE_STATE_MOVE_WELLS;
 80020ee:	4b91      	ldr	r3, [pc, #580]	; (8002334 <step_shake_process+0x2b4>)
 80020f0:	2202      	movs	r2, #2
 80020f2:	701a      	strb	r2, [r3, #0]
	                break;
 80020f4:	e143      	b.n	800237e <step_shake_process+0x2fe>
	            case SHAKE_STATE_MOVE_WELLS:
	                // handle SHAKE_STATE_MOVE_WELLS
	            	if(Mt_get_current_prosition(x_motor) == system_data.flash_data.Well_position[step_para.wells-1])
 80020f6:	4b94      	ldr	r3, [pc, #592]	; (8002348 <step_shake_process+0x2c8>)
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	4b8f      	ldr	r3, [pc, #572]	; (8002338 <step_shake_process+0x2b8>)
 80020fc:	785b      	ldrb	r3, [r3, #1]
 80020fe:	3b01      	subs	r3, #1
 8002100:	498e      	ldr	r1, [pc, #568]	; (800233c <step_shake_process+0x2bc>)
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	429a      	cmp	r2, r3
 800210a:	f040 810f 	bne.w	800232c <step_shake_process+0x2ac>
	            	{
	            		LOGI("move x done, wait %ds",step_para.timing[0]);
 800210e:	4b8a      	ldr	r3, [pc, #552]	; (8002338 <step_shake_process+0x2b8>)
 8002110:	885b      	ldrh	r3, [r3, #2]
 8002112:	461a      	mov	r2, r3
 8002114:	498a      	ldr	r1, [pc, #552]	; (8002340 <step_shake_process+0x2c0>)
 8002116:	488e      	ldr	r0, [pc, #568]	; (8002350 <step_shake_process+0x2d0>)
 8002118:	f00b fb18 	bl	800d74c <iprintf>
						old_state = shake_state;
 800211c:	4b85      	ldr	r3, [pc, #532]	; (8002334 <step_shake_process+0x2b4>)
 800211e:	781a      	ldrb	r2, [r3, #0]
 8002120:	4b8a      	ldr	r3, [pc, #552]	; (800234c <step_shake_process+0x2cc>)
 8002122:	701a      	strb	r2, [r3, #0]
						shake_state = SHAKE_STATE_WAIT;
 8002124:	4b83      	ldr	r3, [pc, #524]	; (8002334 <step_shake_process+0x2b4>)
 8002126:	2203      	movs	r2, #3
 8002128:	701a      	strb	r2, [r3, #0]
						t_time = HAL_GetTick() +  (uint32_t)step_para.timing[0] * 1000;
 800212a:	f001 fb7d 	bl	8003828 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	4b81      	ldr	r3, [pc, #516]	; (8002338 <step_shake_process+0x2b8>)
 8002132:	885b      	ldrh	r3, [r3, #2]
 8002134:	4619      	mov	r1, r3
 8002136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213a:	fb01 f303 	mul.w	r3, r1, r3
 800213e:	4413      	add	r3, r2
 8002140:	4a84      	ldr	r2, [pc, #528]	; (8002354 <step_shake_process+0x2d4>)
 8002142:	6013      	str	r3, [r2, #0]
	            	}
	                break;
 8002144:	e0f2      	b.n	800232c <step_shake_process+0x2ac>
	            case SHAKE_STATE_WAIT:
	                // handle SHAKE_STATE_WAIT
	            	if(HAL_GetTick() > t_time)
 8002146:	f001 fb6f 	bl	8003828 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	4b81      	ldr	r3, [pc, #516]	; (8002354 <step_shake_process+0x2d4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d954      	bls.n	80021fe <step_shake_process+0x17e>
	            	{
	            		switch (old_state) {
 8002154:	4b7d      	ldr	r3, [pc, #500]	; (800234c <step_shake_process+0x2cc>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	3b02      	subs	r3, #2
 800215a:	2b05      	cmp	r3, #5
 800215c:	d851      	bhi.n	8002202 <step_shake_process+0x182>
 800215e:	a201      	add	r2, pc, #4	; (adr r2, 8002164 <step_shake_process+0xe4>)
 8002160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002164:	0800217d 	.word	0x0800217d
 8002168:	08002203 	.word	0x08002203
 800216c:	0800219f 	.word	0x0800219f
 8002170:	080021df 	.word	0x080021df
 8002174:	080021f7 	.word	0x080021f7
 8002178:	08002203 	.word	0x08002203
	            		    case SHAKE_STATE_MOVE_WELLS:
	            		    	LOGI("move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
 800217c:	4b6f      	ldr	r3, [pc, #444]	; (800233c <step_shake_process+0x2bc>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	496f      	ldr	r1, [pc, #444]	; (8002340 <step_shake_process+0x2c0>)
 8002184:	4874      	ldr	r0, [pc, #464]	; (8002358 <step_shake_process+0x2d8>)
 8002186:	f00b fae1 	bl	800d74c <iprintf>
	            		    	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 800218a:	4b6c      	ldr	r3, [pc, #432]	; (800233c <step_shake_process+0x2bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4619      	mov	r1, r3
 8002190:	4872      	ldr	r0, [pc, #456]	; (800235c <step_shake_process+0x2dc>)
 8002192:	f7ff fc51 	bl	8001a38 <mt_set_target_position>
	            		    	shake_state = SHAKE_STATE_Z_BOTTOM;
 8002196:	4b67      	ldr	r3, [pc, #412]	; (8002334 <step_shake_process+0x2b4>)
 8002198:	2204      	movs	r2, #4
 800219a:	701a      	strb	r2, [r3, #0]
	            		        break;
 800219c:	e032      	b.n	8002204 <step_shake_process+0x184>
	            		    case SHAKE_STATE_Z_BOTTOM:
	            		    	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 800219e:	4b67      	ldr	r3, [pc, #412]	; (800233c <step_shake_process+0x2bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80021a6:	4619      	mov	r1, r3
 80021a8:	486c      	ldr	r0, [pc, #432]	; (800235c <step_shake_process+0x2dc>)
 80021aa:	f7ff fc45 	bl	8001a38 <mt_set_target_position>
	            		    	t_time = HAL_GetTick() +  (uint32_t)step_para.timing[2] * 1000;
 80021ae:	f001 fb3b 	bl	8003828 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	4b60      	ldr	r3, [pc, #384]	; (8002338 <step_shake_process+0x2b8>)
 80021b6:	88db      	ldrh	r3, [r3, #6]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021be:	fb01 f303 	mul.w	r3, r1, r3
 80021c2:	4413      	add	r3, r2
 80021c4:	4a63      	ldr	r2, [pc, #396]	; (8002354 <step_shake_process+0x2d4>)
 80021c6:	6013      	str	r3, [r2, #0]
	            		    	LOGI("start shake in %ds",step_para.timing[2]);
 80021c8:	4b5b      	ldr	r3, [pc, #364]	; (8002338 <step_shake_process+0x2b8>)
 80021ca:	88db      	ldrh	r3, [r3, #6]
 80021cc:	461a      	mov	r2, r3
 80021ce:	495c      	ldr	r1, [pc, #368]	; (8002340 <step_shake_process+0x2c0>)
 80021d0:	4863      	ldr	r0, [pc, #396]	; (8002360 <step_shake_process+0x2e0>)
 80021d2:	f00b fabb 	bl	800d74c <iprintf>
	            		    	shake_state = SHAKE_STATE_SHAKE;
 80021d6:	4b57      	ldr	r3, [pc, #348]	; (8002334 <step_shake_process+0x2b4>)
 80021d8:	2205      	movs	r2, #5
 80021da:	701a      	strb	r2, [r3, #0]
	            		        break;
 80021dc:	e012      	b.n	8002204 <step_shake_process+0x184>
	            		    case SHAKE_STATE_SHAKE:
	            		    	LOGI("move z to top");
 80021de:	4958      	ldr	r1, [pc, #352]	; (8002340 <step_shake_process+0x2c0>)
 80021e0:	4860      	ldr	r0, [pc, #384]	; (8002364 <step_shake_process+0x2e4>)
 80021e2:	f00b fab3 	bl	800d74c <iprintf>
	            		    	mt_set_target_position(&z_motor,0);
 80021e6:	2100      	movs	r1, #0
 80021e8:	485c      	ldr	r0, [pc, #368]	; (800235c <step_shake_process+0x2dc>)
 80021ea:	f7ff fc25 	bl	8001a38 <mt_set_target_position>
	            		    	shake_state = SHAKE_STATE_Z_TOP;
 80021ee:	4b51      	ldr	r3, [pc, #324]	; (8002334 <step_shake_process+0x2b4>)
 80021f0:	2206      	movs	r2, #6
 80021f2:	701a      	strb	r2, [r3, #0]
	            		        break;
 80021f4:	e006      	b.n	8002204 <step_shake_process+0x184>
	            		    case SHAKE_STATE_Z_TOP:
	            		    	shake_state = SHAKE_STATE_Z_FINISH;
 80021f6:	4b4f      	ldr	r3, [pc, #316]	; (8002334 <step_shake_process+0x2b4>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	701a      	strb	r2, [r3, #0]
	            		        break;
 80021fc:	e002      	b.n	8002204 <step_shake_process+0x184>
	            		        break;
	            		    default:
	            		        // handle unknown state
	            		        break;
	            		}
	            	}
 80021fe:	bf00      	nop
 8002200:	e0bd      	b.n	800237e <step_shake_process+0x2fe>
	            		        break;
 8002202:	bf00      	nop
	                break;
 8002204:	e0bb      	b.n	800237e <step_shake_process+0x2fe>
	            case SHAKE_STATE_Z_BOTTOM:
	                // handle SHAKE_STATE_Z_BOTTOM
	            	if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8002206:	4b55      	ldr	r3, [pc, #340]	; (800235c <step_shake_process+0x2dc>)
 8002208:	689a      	ldr	r2, [r3, #8]
 800220a:	4b4c      	ldr	r3, [pc, #304]	; (800233c <step_shake_process+0x2bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	f040 808e 	bne.w	8002330 <step_shake_process+0x2b0>
					{
						old_state = shake_state;
 8002214:	4b47      	ldr	r3, [pc, #284]	; (8002334 <step_shake_process+0x2b4>)
 8002216:	781a      	ldrb	r2, [r3, #0]
 8002218:	4b4c      	ldr	r3, [pc, #304]	; (800234c <step_shake_process+0x2cc>)
 800221a:	701a      	strb	r2, [r3, #0]
						shake_state = SHAKE_STATE_WAIT;
 800221c:	4b45      	ldr	r3, [pc, #276]	; (8002334 <step_shake_process+0x2b4>)
 800221e:	2203      	movs	r2, #3
 8002220:	701a      	strb	r2, [r3, #0]
						LOGI("wait2 %d",step_para.timing[1]);
 8002222:	4b45      	ldr	r3, [pc, #276]	; (8002338 <step_shake_process+0x2b8>)
 8002224:	889b      	ldrh	r3, [r3, #4]
 8002226:	461a      	mov	r2, r3
 8002228:	4945      	ldr	r1, [pc, #276]	; (8002340 <step_shake_process+0x2c0>)
 800222a:	484f      	ldr	r0, [pc, #316]	; (8002368 <step_shake_process+0x2e8>)
 800222c:	f00b fa8e 	bl	800d74c <iprintf>
						t_time = HAL_GetTick() +  (uint32_t)step_para.timing[1] * 1000;
 8002230:	f001 fafa 	bl	8003828 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	4b40      	ldr	r3, [pc, #256]	; (8002338 <step_shake_process+0x2b8>)
 8002238:	889b      	ldrh	r3, [r3, #4]
 800223a:	4619      	mov	r1, r3
 800223c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	4413      	add	r3, r2
 8002246:	4a43      	ldr	r2, [pc, #268]	; (8002354 <step_shake_process+0x2d4>)
 8002248:	6013      	str	r3, [r2, #0]
					}
//					break;
//	                old_state = shake_state;
//	                shake_state = SHAKE_STATE_SHAKE;
	                break;
 800224a:	e071      	b.n	8002330 <step_shake_process+0x2b0>
	            case SHAKE_STATE_SHAKE:
	                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos - 1000)
 800224c:	4b43      	ldr	r3, [pc, #268]	; (800235c <step_shake_process+0x2dc>)
 800224e:	689a      	ldr	r2, [r3, #8]
 8002250:	4b3a      	ldr	r3, [pc, #232]	; (800233c <step_shake_process+0x2bc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002258:	429a      	cmp	r2, r3
 800225a:	d105      	bne.n	8002268 <step_shake_process+0x1e8>
	            	{
	                	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos);
 800225c:	4b37      	ldr	r3, [pc, #220]	; (800233c <step_shake_process+0x2bc>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4619      	mov	r1, r3
 8002262:	483e      	ldr	r0, [pc, #248]	; (800235c <step_shake_process+0x2dc>)
 8002264:	f7ff fbe8 	bl	8001a38 <mt_set_target_position>
	            	}
	                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8002268:	4b3c      	ldr	r3, [pc, #240]	; (800235c <step_shake_process+0x2dc>)
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <step_shake_process+0x2bc>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	f040 8081 	bne.w	8002378 <step_shake_process+0x2f8>
					{
	                	if(HAL_GetTick() > t_time)
 8002276:	f001 fad7 	bl	8003828 <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	4b35      	ldr	r3, [pc, #212]	; (8002354 <step_shake_process+0x2d4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	429a      	cmp	r2, r3
 8002282:	d91b      	bls.n	80022bc <step_shake_process+0x23c>
	                	{
	                		LOGI("shake done, wait4 : %d",step_para.timing[3]);
 8002284:	4b2c      	ldr	r3, [pc, #176]	; (8002338 <step_shake_process+0x2b8>)
 8002286:	891b      	ldrh	r3, [r3, #8]
 8002288:	461a      	mov	r2, r3
 800228a:	492d      	ldr	r1, [pc, #180]	; (8002340 <step_shake_process+0x2c0>)
 800228c:	4837      	ldr	r0, [pc, #220]	; (800236c <step_shake_process+0x2ec>)
 800228e:	f00b fa5d 	bl	800d74c <iprintf>
	    	                old_state = shake_state;
 8002292:	4b28      	ldr	r3, [pc, #160]	; (8002334 <step_shake_process+0x2b4>)
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	4b2d      	ldr	r3, [pc, #180]	; (800234c <step_shake_process+0x2cc>)
 8002298:	701a      	strb	r2, [r3, #0]
	    	                t_time = HAL_GetTick() +  (uint32_t)step_para.timing[3] * 1000;
 800229a:	f001 fac5 	bl	8003828 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	4b25      	ldr	r3, [pc, #148]	; (8002338 <step_shake_process+0x2b8>)
 80022a2:	891b      	ldrh	r3, [r3, #8]
 80022a4:	4619      	mov	r1, r3
 80022a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022aa:	fb01 f303 	mul.w	r3, r1, r3
 80022ae:	4413      	add	r3, r2
 80022b0:	4a28      	ldr	r2, [pc, #160]	; (8002354 <step_shake_process+0x2d4>)
 80022b2:	6013      	str	r3, [r2, #0]
	    	                shake_state = SHAKE_STATE_WAIT;
 80022b4:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <step_shake_process+0x2b4>)
 80022b6:	2203      	movs	r2, #3
 80022b8:	701a      	strb	r2, [r3, #0]
	                	else
	                	{
	                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
	                	}
					}
	                break;
 80022ba:	e05d      	b.n	8002378 <step_shake_process+0x2f8>
	                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <step_shake_process+0x2bc>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80022c4:	4619      	mov	r1, r3
 80022c6:	4825      	ldr	r0, [pc, #148]	; (800235c <step_shake_process+0x2dc>)
 80022c8:	f7ff fbb6 	bl	8001a38 <mt_set_target_position>
	                break;
 80022cc:	e054      	b.n	8002378 <step_shake_process+0x2f8>
	            case SHAKE_STATE_Z_TOP:
	            	if(Mt_get_current_prosition(z_motor) == 0)
 80022ce:	4b23      	ldr	r3, [pc, #140]	; (800235c <step_shake_process+0x2dc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d152      	bne.n	800237c <step_shake_process+0x2fc>
					{
	            		LOGI("all done wait5: %d",step_para.timing[4]);
 80022d6:	4b18      	ldr	r3, [pc, #96]	; (8002338 <step_shake_process+0x2b8>)
 80022d8:	895b      	ldrh	r3, [r3, #10]
 80022da:	461a      	mov	r2, r3
 80022dc:	4918      	ldr	r1, [pc, #96]	; (8002340 <step_shake_process+0x2c0>)
 80022de:	4824      	ldr	r0, [pc, #144]	; (8002370 <step_shake_process+0x2f0>)
 80022e0:	f00b fa34 	bl	800d74c <iprintf>
	            		old_state = shake_state;
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <step_shake_process+0x2b4>)
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	4b18      	ldr	r3, [pc, #96]	; (800234c <step_shake_process+0x2cc>)
 80022ea:	701a      	strb	r2, [r3, #0]
						t_time = HAL_GetTick() +  (uint32_t)step_para.timing[4] * 1000;
 80022ec:	f001 fa9c 	bl	8003828 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b11      	ldr	r3, [pc, #68]	; (8002338 <step_shake_process+0x2b8>)
 80022f4:	895b      	ldrh	r3, [r3, #10]
 80022f6:	4619      	mov	r1, r3
 80022f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fc:	fb01 f303 	mul.w	r3, r1, r3
 8002300:	4413      	add	r3, r2
 8002302:	4a14      	ldr	r2, [pc, #80]	; (8002354 <step_shake_process+0x2d4>)
 8002304:	6013      	str	r3, [r2, #0]
						shake_state = SHAKE_STATE_WAIT;
 8002306:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <step_shake_process+0x2b4>)
 8002308:	2203      	movs	r2, #3
 800230a:	701a      	strb	r2, [r3, #0]
					}
	                break;
 800230c:	e036      	b.n	800237c <step_shake_process+0x2fc>
	            case SHAKE_STATE_Z_FINISH:
	                // handle SHAKE_STATE_Z_FINISH
	            	LOGI("step finish");
 800230e:	490c      	ldr	r1, [pc, #48]	; (8002340 <step_shake_process+0x2c0>)
 8002310:	4818      	ldr	r0, [pc, #96]	; (8002374 <step_shake_process+0x2f4>)
 8002312:	f00b fa1b 	bl	800d74c <iprintf>
	                old_state = shake_state;
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <step_shake_process+0x2b4>)
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	4b0c      	ldr	r3, [pc, #48]	; (800234c <step_shake_process+0x2cc>)
 800231c:	701a      	strb	r2, [r3, #0]
	                shake_state = SHAKE_STATE_IDE;
 800231e:	4b05      	ldr	r3, [pc, #20]	; (8002334 <step_shake_process+0x2b4>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
	                return 1;
 8002324:	2301      	movs	r3, #1
 8002326:	e02b      	b.n	8002380 <step_shake_process+0x300>
	                break;
	            default:
	                // handle unknown state
//	                old_state = shake_state;
//	                shake_state = SHAKE_STATE_IDE;
	                break;
 8002328:	bf00      	nop
 800232a:	e028      	b.n	800237e <step_shake_process+0x2fe>
	                break;
 800232c:	bf00      	nop
 800232e:	e026      	b.n	800237e <step_shake_process+0x2fe>
	                break;
 8002330:	bf00      	nop
 8002332:	e024      	b.n	800237e <step_shake_process+0x2fe>
 8002334:	20002940 	.word	0x20002940
 8002338:	2000292c 	.word	0x2000292c
 800233c:	2000017c 	.word	0x2000017c
 8002340:	0800eb60 	.word	0x0800eb60
 8002344:	0800ec48 	.word	0x0800ec48
 8002348:	200028c8 	.word	0x200028c8
 800234c:	20002946 	.word	0x20002946
 8002350:	0800ec5c 	.word	0x0800ec5c
 8002354:	2000293c 	.word	0x2000293c
 8002358:	0800ec78 	.word	0x0800ec78
 800235c:	200028f8 	.word	0x200028f8
 8002360:	0800ec94 	.word	0x0800ec94
 8002364:	0800ecb0 	.word	0x0800ecb0
 8002368:	0800ecc4 	.word	0x0800ecc4
 800236c:	0800ecd4 	.word	0x0800ecd4
 8002370:	0800ecf4 	.word	0x0800ecf4
 8002374:	0800ed10 	.word	0x0800ed10
	                break;
 8002378:	bf00      	nop
 800237a:	e000      	b.n	800237e <step_shake_process+0x2fe>
	                break;
 800237c:	bf00      	nop
	        }
	return 0;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}

08002384 <start_fill_washing_solution>:

_step_ws_state ws_state = WS_STATE_IDE;
_step_ws_state old_ws_state = WS_STATE_IDE;
void start_fill_washing_solution(){
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	LOGI("start fill washing solution ");
 8002388:	4902      	ldr	r1, [pc, #8]	; (8002394 <start_fill_washing_solution+0x10>)
 800238a:	4803      	ldr	r0, [pc, #12]	; (8002398 <start_fill_washing_solution+0x14>)
 800238c:	f00b f9de 	bl	800d74c <iprintf>
}
 8002390:	bf00      	nop
 8002392:	bd80      	pop	{r7, pc}
 8002394:	0800eb60 	.word	0x0800eb60
 8002398:	0800ed24 	.word	0x0800ed24

0800239c <is_washing_solution_full>:
int is_washing_solution_full()
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
	return 1;
 80023a0:	2301      	movs	r3, #1
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <stop_fill_washing_solution>:
void stop_fill_washing_solution(){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
	LOGI("stop fill washing solution ");
 80023b0:	4902      	ldr	r1, [pc, #8]	; (80023bc <stop_fill_washing_solution+0x10>)
 80023b2:	4803      	ldr	r0, [pc, #12]	; (80023c0 <stop_fill_washing_solution+0x14>)
 80023b4:	f00b f9ca 	bl	800d74c <iprintf>
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	0800eb60 	.word	0x0800eb60
 80023c0:	0800ed48 	.word	0x0800ed48

080023c4 <start_drain_washing_solution>:


void start_drain_washing_solution(){
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	LOGI("start drain fill solution ");
 80023c8:	4902      	ldr	r1, [pc, #8]	; (80023d4 <start_drain_washing_solution+0x10>)
 80023ca:	4803      	ldr	r0, [pc, #12]	; (80023d8 <start_drain_washing_solution+0x14>)
 80023cc:	f00b f9be 	bl	800d74c <iprintf>
}
 80023d0:	bf00      	nop
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	0800eb60 	.word	0x0800eb60
 80023d8:	0800ed6c 	.word	0x0800ed6c

080023dc <is_washing_solution_empty>:
int is_washing_solution_empty()
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
	return 1;
 80023e0:	2301      	movs	r3, #1
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <stop_drain_washing_solution>:
void stop_drain_washing_solution(){
 80023ec:	b580      	push	{r7, lr}
 80023ee:	af00      	add	r7, sp, #0
	LOGI("stop drain washing solution ");
 80023f0:	4902      	ldr	r1, [pc, #8]	; (80023fc <stop_drain_washing_solution+0x10>)
 80023f2:	4803      	ldr	r0, [pc, #12]	; (8002400 <stop_drain_washing_solution+0x14>)
 80023f4:	f00b f9aa 	bl	800d74c <iprintf>
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	0800eb60 	.word	0x0800eb60
 8002400:	0800ed90 	.word	0x0800ed90

08002404 <step_washing_start>:
int step_washing_start()
{
 8002404:	b598      	push	{r3, r4, r7, lr}
 8002406:	af00      	add	r7, sp, #0
	if(ws_state == WS_STATE_IDE)
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <step_washing_start+0x68>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d129      	bne.n	8002464 <step_washing_start+0x60>
	{
		LOGI("--------------- washing step: %d of program : %d----------------",running_step,running_pg);
 8002410:	4b17      	ldr	r3, [pc, #92]	; (8002470 <step_washing_start+0x6c>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	461a      	mov	r2, r3
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <step_washing_start+0x70>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	4917      	ldr	r1, [pc, #92]	; (8002478 <step_washing_start+0x74>)
 800241c:	4817      	ldr	r0, [pc, #92]	; (800247c <step_washing_start+0x78>)
 800241e:	f00b f995 	bl	800d74c <iprintf>
		step_para = system_data.flash_data.Program_para[running_pg][running_step];
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <step_washing_start+0x70>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	4b11      	ldr	r3, [pc, #68]	; (8002470 <step_washing_start+0x6c>)
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	461a      	mov	r2, r3
 800242e:	4c14      	ldr	r4, [pc, #80]	; (8002480 <step_washing_start+0x7c>)
 8002430:	4914      	ldr	r1, [pc, #80]	; (8002484 <step_washing_start+0x80>)
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800243e:	fb00 f202 	mul.w	r2, r0, r2
 8002442:	4413      	add	r3, r2
 8002444:	440b      	add	r3, r1
 8002446:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800244a:	4623      	mov	r3, r4
 800244c:	1d14      	adds	r4, r2, #4
 800244e:	6820      	ldr	r0, [r4, #0]
 8002450:	6861      	ldr	r1, [r4, #4]
 8002452:	68a2      	ldr	r2, [r4, #8]
 8002454:	c307      	stmia	r3!, {r0, r1, r2}
 8002456:	89a2      	ldrh	r2, [r4, #12]
 8002458:	801a      	strh	r2, [r3, #0]
		shake_state = WS_STATE_START;
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <step_washing_start+0x84>)
 800245c:	2201      	movs	r2, #1
 800245e:	701a      	strb	r2, [r3, #0]
		return 1;
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <step_washing_start+0x62>
	}
	return 0;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	bd98      	pop	{r3, r4, r7, pc}
 800246a:	bf00      	nop
 800246c:	20002941 	.word	0x20002941
 8002470:	20002929 	.word	0x20002929
 8002474:	20002928 	.word	0x20002928
 8002478:	0800eb60 	.word	0x0800eb60
 800247c:	0800edb4 	.word	0x0800edb4
 8002480:	2000292c 	.word	0x2000292c
 8002484:	2000017c 	.word	0x2000017c
 8002488:	20002940 	.word	0x20002940

0800248c <show_infor_drying_step>:

void show_infor_drying_step()
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
	LOGI("1:Move to Wells: %d",step_para.wells);
 8002490:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <show_infor_drying_step+0x6c>)
 8002492:	785b      	ldrb	r3, [r3, #1]
 8002494:	461a      	mov	r2, r3
 8002496:	4919      	ldr	r1, [pc, #100]	; (80024fc <show_infor_drying_step+0x70>)
 8002498:	4819      	ldr	r0, [pc, #100]	; (8002500 <show_infor_drying_step+0x74>)
 800249a:	f00b f957 	bl	800d74c <iprintf>
	LOGI("2:wait1 : %ds",step_para.timing[0]);
 800249e:	4b16      	ldr	r3, [pc, #88]	; (80024f8 <show_infor_drying_step+0x6c>)
 80024a0:	885b      	ldrh	r3, [r3, #2]
 80024a2:	461a      	mov	r2, r3
 80024a4:	4915      	ldr	r1, [pc, #84]	; (80024fc <show_infor_drying_step+0x70>)
 80024a6:	4817      	ldr	r0, [pc, #92]	; (8002504 <show_infor_drying_step+0x78>)
 80024a8:	f00b f950 	bl	800d74c <iprintf>
	LOGI("3:fill washing solution\n4:move z to bottom");
 80024ac:	4913      	ldr	r1, [pc, #76]	; (80024fc <show_infor_drying_step+0x70>)
 80024ae:	4816      	ldr	r0, [pc, #88]	; (8002508 <show_infor_drying_step+0x7c>)
 80024b0:	f00b f94c 	bl	800d74c <iprintf>
	LOGI("5:wait2 : %ds",step_para.timing[1]);
 80024b4:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <show_infor_drying_step+0x6c>)
 80024b6:	889b      	ldrh	r3, [r3, #4]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4910      	ldr	r1, [pc, #64]	; (80024fc <show_infor_drying_step+0x70>)
 80024bc:	4813      	ldr	r0, [pc, #76]	; (800250c <show_infor_drying_step+0x80>)
 80024be:	f00b f945 	bl	800d74c <iprintf>
	LOGI("6:shake on : %ds",step_para.timing[2]);
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <show_infor_drying_step+0x6c>)
 80024c4:	88db      	ldrh	r3, [r3, #6]
 80024c6:	461a      	mov	r2, r3
 80024c8:	490c      	ldr	r1, [pc, #48]	; (80024fc <show_infor_drying_step+0x70>)
 80024ca:	4811      	ldr	r0, [pc, #68]	; (8002510 <show_infor_drying_step+0x84>)
 80024cc:	f00b f93e 	bl	800d74c <iprintf>
	LOGI("7:wait4 : %ds",step_para.timing[3]);
 80024d0:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <show_infor_drying_step+0x6c>)
 80024d2:	891b      	ldrh	r3, [r3, #8]
 80024d4:	461a      	mov	r2, r3
 80024d6:	4909      	ldr	r1, [pc, #36]	; (80024fc <show_infor_drying_step+0x70>)
 80024d8:	480e      	ldr	r0, [pc, #56]	; (8002514 <show_infor_drying_step+0x88>)
 80024da:	f00b f937 	bl	800d74c <iprintf>
	LOGI("8:move z to top\n9:Drain washing solution");
 80024de:	4907      	ldr	r1, [pc, #28]	; (80024fc <show_infor_drying_step+0x70>)
 80024e0:	480d      	ldr	r0, [pc, #52]	; (8002518 <show_infor_drying_step+0x8c>)
 80024e2:	f00b f933 	bl	800d74c <iprintf>
	LOGI("10:wait5 : %ds",step_para.timing[4]);
 80024e6:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <show_infor_drying_step+0x6c>)
 80024e8:	895b      	ldrh	r3, [r3, #10]
 80024ea:	461a      	mov	r2, r3
 80024ec:	4903      	ldr	r1, [pc, #12]	; (80024fc <show_infor_drying_step+0x70>)
 80024ee:	480b      	ldr	r0, [pc, #44]	; (800251c <show_infor_drying_step+0x90>)
 80024f0:	f00b f92c 	bl	800d74c <iprintf>
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	2000292c 	.word	0x2000292c
 80024fc:	0800eb60 	.word	0x0800eb60
 8002500:	0800eb90 	.word	0x0800eb90
 8002504:	0800ebac 	.word	0x0800ebac
 8002508:	0800edfc 	.word	0x0800edfc
 800250c:	0800ee30 	.word	0x0800ee30
 8002510:	0800ee44 	.word	0x0800ee44
 8002514:	0800ee5c 	.word	0x0800ee5c
 8002518:	0800ee70 	.word	0x0800ee70
 800251c:	0800eea0 	.word	0x0800eea0

08002520 <step_washing_process>:

int step_washing_process(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	    switch(ws_state) {
 8002524:	4b9e      	ldr	r3, [pc, #632]	; (80027a0 <step_washing_process+0x280>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b09      	cmp	r3, #9
 800252a:	f200 819e 	bhi.w	800286a <step_washing_process+0x34a>
 800252e:	a201      	add	r2, pc, #4	; (adr r2, 8002534 <step_washing_process+0x14>)
 8002530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002534:	0800255d 	.word	0x0800255d
 8002538:	08002565 	.word	0x08002565
 800253c:	0800259f 	.word	0x0800259f
 8002540:	08002621 	.word	0x08002621
 8002544:	080025ef 	.word	0x080025ef
 8002548:	08002667 	.word	0x08002667
 800254c:	080026e9 	.word	0x080026e9
 8002550:	0800270f 	.word	0x0800270f
 8002554:	08002757 	.word	0x08002757
 8002558:	08002859 	.word	0x08002859
	        case WS_STATE_IDE:
	            // Do something when in state WS_STATE_IDE
	            ws_state = WS_STATE_START; // Example transition to next state
 800255c:	4b90      	ldr	r3, [pc, #576]	; (80027a0 <step_washing_process+0x280>)
 800255e:	2201      	movs	r2, #1
 8002560:	701a      	strb	r2, [r3, #0]
	            break;
 8002562:	e18f      	b.n	8002884 <step_washing_process+0x364>
	        case WS_STATE_START:
	        	show_infor_drying_step();
 8002564:	f7ff ff92 	bl	800248c <show_infor_drying_step>
	            LOGI("move x to %lu",system_data.flash_data.Well_position[step_para.wells-1]);
 8002568:	4b8e      	ldr	r3, [pc, #568]	; (80027a4 <step_washing_process+0x284>)
 800256a:	785b      	ldrb	r3, [r3, #1]
 800256c:	3b01      	subs	r3, #1
 800256e:	4a8e      	ldr	r2, [pc, #568]	; (80027a8 <step_washing_process+0x288>)
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	461a      	mov	r2, r3
 8002578:	498c      	ldr	r1, [pc, #560]	; (80027ac <step_washing_process+0x28c>)
 800257a:	488d      	ldr	r0, [pc, #564]	; (80027b0 <step_washing_process+0x290>)
 800257c:	f00b f8e6 	bl	800d74c <iprintf>
            	mt_set_target_position(&x_motor, system_data.flash_data.Well_position[step_para.wells-1]); // m
 8002580:	4b88      	ldr	r3, [pc, #544]	; (80027a4 <step_washing_process+0x284>)
 8002582:	785b      	ldrb	r3, [r3, #1]
 8002584:	3b01      	subs	r3, #1
 8002586:	4a88      	ldr	r2, [pc, #544]	; (80027a8 <step_washing_process+0x288>)
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	4619      	mov	r1, r3
 8002590:	4888      	ldr	r0, [pc, #544]	; (80027b4 <step_washing_process+0x294>)
 8002592:	f7ff fa51 	bl	8001a38 <mt_set_target_position>
	            ws_state = WS_STATE_MOVE_WELLS; // Example transition to next state
 8002596:	4b82      	ldr	r3, [pc, #520]	; (80027a0 <step_washing_process+0x280>)
 8002598:	2202      	movs	r2, #2
 800259a:	701a      	strb	r2, [r3, #0]
	            break;
 800259c:	e172      	b.n	8002884 <step_washing_process+0x364>
	        case WS_STATE_MOVE_WELLS:
	        	if(Mt_get_current_prosition(x_motor) == system_data.flash_data.Well_position[step_para.wells-1])
 800259e:	4b85      	ldr	r3, [pc, #532]	; (80027b4 <step_washing_process+0x294>)
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	4b80      	ldr	r3, [pc, #512]	; (80027a4 <step_washing_process+0x284>)
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	497f      	ldr	r1, [pc, #508]	; (80027a8 <step_washing_process+0x288>)
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	f040 815c 	bne.w	800286e <step_washing_process+0x34e>
				{
					LOGI("move x done, wait1 %ds",step_para.timing[0]);
 80025b6:	4b7b      	ldr	r3, [pc, #492]	; (80027a4 <step_washing_process+0x284>)
 80025b8:	885b      	ldrh	r3, [r3, #2]
 80025ba:	461a      	mov	r2, r3
 80025bc:	497b      	ldr	r1, [pc, #492]	; (80027ac <step_washing_process+0x28c>)
 80025be:	487e      	ldr	r0, [pc, #504]	; (80027b8 <step_washing_process+0x298>)
 80025c0:	f00b f8c4 	bl	800d74c <iprintf>
					old_ws_state = ws_state;
 80025c4:	4b76      	ldr	r3, [pc, #472]	; (80027a0 <step_washing_process+0x280>)
 80025c6:	781a      	ldrb	r2, [r3, #0]
 80025c8:	4b7c      	ldr	r3, [pc, #496]	; (80027bc <step_washing_process+0x29c>)
 80025ca:	701a      	strb	r2, [r3, #0]
					ws_state = WS_STATE_WAIT;
 80025cc:	4b74      	ldr	r3, [pc, #464]	; (80027a0 <step_washing_process+0x280>)
 80025ce:	2208      	movs	r2, #8
 80025d0:	701a      	strb	r2, [r3, #0]
					t_time = HAL_GetTick() +  (uint32_t)step_para.timing[0] * 1000;
 80025d2:	f001 f929 	bl	8003828 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	4b72      	ldr	r3, [pc, #456]	; (80027a4 <step_washing_process+0x284>)
 80025da:	885b      	ldrh	r3, [r3, #2]
 80025dc:	4619      	mov	r1, r3
 80025de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025e2:	fb01 f303 	mul.w	r3, r1, r3
 80025e6:	4413      	add	r3, r2
 80025e8:	4a75      	ldr	r2, [pc, #468]	; (80027c0 <step_washing_process+0x2a0>)
 80025ea:	6013      	str	r3, [r2, #0]
				}
	            break;
 80025ec:	e13f      	b.n	800286e <step_washing_process+0x34e>
	        case WS_STATE_FILL_WS_SOLUTION:
	            if(is_washing_solution_full())
 80025ee:	f7ff fed5 	bl	800239c <is_washing_solution_full>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 813c 	beq.w	8002872 <step_washing_process+0x352>
	            {
					LOGI("Fill done,move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
 80025fa:	4b6b      	ldr	r3, [pc, #428]	; (80027a8 <step_washing_process+0x288>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	496a      	ldr	r1, [pc, #424]	; (80027ac <step_washing_process+0x28c>)
 8002602:	4870      	ldr	r0, [pc, #448]	; (80027c4 <step_washing_process+0x2a4>)
 8002604:	f00b f8a2 	bl	800d74c <iprintf>
					mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 8002608:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <step_washing_process+0x288>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4619      	mov	r1, r3
 800260e:	486e      	ldr	r0, [pc, #440]	; (80027c8 <step_washing_process+0x2a8>)
 8002610:	f7ff fa12 	bl	8001a38 <mt_set_target_position>
					ws_state = WS_STATE_Z_BOTTOM;
 8002614:	4b62      	ldr	r3, [pc, #392]	; (80027a0 <step_washing_process+0x280>)
 8002616:	2203      	movs	r2, #3
 8002618:	701a      	strb	r2, [r3, #0]
	            	stop_fill_washing_solution();
 800261a:	f7ff fec7 	bl	80023ac <stop_fill_washing_solution>
	            }
	            break;
 800261e:	e128      	b.n	8002872 <step_washing_process+0x352>
	        case WS_STATE_Z_BOTTOM:
            	if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8002620:	4b69      	ldr	r3, [pc, #420]	; (80027c8 <step_washing_process+0x2a8>)
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	4b60      	ldr	r3, [pc, #384]	; (80027a8 <step_washing_process+0x288>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	429a      	cmp	r2, r3
 800262a:	f040 8124 	bne.w	8002876 <step_washing_process+0x356>
				{
            		LOGI("move z done, wait2 %ds",step_para.timing[1]);
 800262e:	4b5d      	ldr	r3, [pc, #372]	; (80027a4 <step_washing_process+0x284>)
 8002630:	889b      	ldrh	r3, [r3, #4]
 8002632:	461a      	mov	r2, r3
 8002634:	495d      	ldr	r1, [pc, #372]	; (80027ac <step_washing_process+0x28c>)
 8002636:	4865      	ldr	r0, [pc, #404]	; (80027cc <step_washing_process+0x2ac>)
 8002638:	f00b f888 	bl	800d74c <iprintf>
					old_ws_state = ws_state;
 800263c:	4b58      	ldr	r3, [pc, #352]	; (80027a0 <step_washing_process+0x280>)
 800263e:	781a      	ldrb	r2, [r3, #0]
 8002640:	4b5e      	ldr	r3, [pc, #376]	; (80027bc <step_washing_process+0x29c>)
 8002642:	701a      	strb	r2, [r3, #0]
	            	t_time = HAL_GetTick() +  (uint32_t)step_para.timing[1] * 1000;
 8002644:	f001 f8f0 	bl	8003828 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	4b56      	ldr	r3, [pc, #344]	; (80027a4 <step_washing_process+0x284>)
 800264c:	889b      	ldrh	r3, [r3, #4]
 800264e:	4619      	mov	r1, r3
 8002650:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002654:	fb01 f303 	mul.w	r3, r1, r3
 8002658:	4413      	add	r3, r2
 800265a:	4a59      	ldr	r2, [pc, #356]	; (80027c0 <step_washing_process+0x2a0>)
 800265c:	6013      	str	r3, [r2, #0]
		            ws_state = WS_STATE_WAIT; // Example transition to next state
 800265e:	4b50      	ldr	r3, [pc, #320]	; (80027a0 <step_washing_process+0x280>)
 8002660:	2208      	movs	r2, #8
 8002662:	701a      	strb	r2, [r3, #0]

				}
	            break;
 8002664:	e107      	b.n	8002876 <step_washing_process+0x356>
	        case WS_STATE_SHAKE:
                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos - 1000)
 8002666:	4b58      	ldr	r3, [pc, #352]	; (80027c8 <step_washing_process+0x2a8>)
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	4b4f      	ldr	r3, [pc, #316]	; (80027a8 <step_washing_process+0x288>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002672:	429a      	cmp	r2, r3
 8002674:	d105      	bne.n	8002682 <step_washing_process+0x162>
            	{
                	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos);
 8002676:	4b4c      	ldr	r3, [pc, #304]	; (80027a8 <step_washing_process+0x288>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4619      	mov	r1, r3
 800267c:	4852      	ldr	r0, [pc, #328]	; (80027c8 <step_washing_process+0x2a8>)
 800267e:	f7ff f9db 	bl	8001a38 <mt_set_target_position>
            	}
                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8002682:	4b51      	ldr	r3, [pc, #324]	; (80027c8 <step_washing_process+0x2a8>)
 8002684:	689a      	ldr	r2, [r3, #8]
 8002686:	4b48      	ldr	r3, [pc, #288]	; (80027a8 <step_washing_process+0x288>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	429a      	cmp	r2, r3
 800268c:	f040 80f5 	bne.w	800287a <step_washing_process+0x35a>
				{
                	if(HAL_GetTick() > t_time)
 8002690:	f001 f8ca 	bl	8003828 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <step_washing_process+0x2a0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d91b      	bls.n	80026d6 <step_washing_process+0x1b6>
                	{
                		LOGI("shake done, wait4 : %d",step_para.timing[3]);
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <step_washing_process+0x284>)
 80026a0:	891b      	ldrh	r3, [r3, #8]
 80026a2:	461a      	mov	r2, r3
 80026a4:	4941      	ldr	r1, [pc, #260]	; (80027ac <step_washing_process+0x28c>)
 80026a6:	484a      	ldr	r0, [pc, #296]	; (80027d0 <step_washing_process+0x2b0>)
 80026a8:	f00b f850 	bl	800d74c <iprintf>
                		old_ws_state = ws_state;
 80026ac:	4b3c      	ldr	r3, [pc, #240]	; (80027a0 <step_washing_process+0x280>)
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	4b42      	ldr	r3, [pc, #264]	; (80027bc <step_washing_process+0x29c>)
 80026b2:	701a      	strb	r2, [r3, #0]
    	                t_time = HAL_GetTick() +  (uint32_t)step_para.timing[3] * 1000;
 80026b4:	f001 f8b8 	bl	8003828 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	4b3a      	ldr	r3, [pc, #232]	; (80027a4 <step_washing_process+0x284>)
 80026bc:	891b      	ldrh	r3, [r3, #8]
 80026be:	4619      	mov	r1, r3
 80026c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4413      	add	r3, r2
 80026ca:	4a3d      	ldr	r2, [pc, #244]	; (80027c0 <step_washing_process+0x2a0>)
 80026cc:	6013      	str	r3, [r2, #0]
    	                ws_state = WS_STATE_WAIT;
 80026ce:	4b34      	ldr	r3, [pc, #208]	; (80027a0 <step_washing_process+0x280>)
 80026d0:	2208      	movs	r2, #8
 80026d2:	701a      	strb	r2, [r3, #0]
                	else
                	{
                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
                	}
				}
	            break;
 80026d4:	e0d1      	b.n	800287a <step_washing_process+0x35a>
                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 80026d6:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <step_washing_process+0x288>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80026de:	4619      	mov	r1, r3
 80026e0:	4839      	ldr	r0, [pc, #228]	; (80027c8 <step_washing_process+0x2a8>)
 80026e2:	f7ff f9a9 	bl	8001a38 <mt_set_target_position>
	            break;
 80026e6:	e0c8      	b.n	800287a <step_washing_process+0x35a>
	        case WS_STATE_Z_TOP:
            	if(Mt_get_current_prosition(z_motor) == 0){
 80026e8:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <step_washing_process+0x2a8>)
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f040 80c6 	bne.w	800287e <step_washing_process+0x35e>
            		LOGI("ztop done, start drain ws solution");
 80026f2:	492e      	ldr	r1, [pc, #184]	; (80027ac <step_washing_process+0x28c>)
 80026f4:	4837      	ldr	r0, [pc, #220]	; (80027d4 <step_washing_process+0x2b4>)
 80026f6:	f00b f829 	bl	800d74c <iprintf>
            		old_ws_state = ws_state;
 80026fa:	4b29      	ldr	r3, [pc, #164]	; (80027a0 <step_washing_process+0x280>)
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	4b2f      	ldr	r3, [pc, #188]	; (80027bc <step_washing_process+0x29c>)
 8002700:	701a      	strb	r2, [r3, #0]
            		start_drain_washing_solution();
 8002702:	f7ff fe5f 	bl	80023c4 <start_drain_washing_solution>
//					t_time = HAL_GetTick() +  (uint32_t)step_para.timing[4] * 1000;
            		ws_state = WS_STATE_DRAIN_WS_SOLUTION;
 8002706:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <step_washing_process+0x280>)
 8002708:	2207      	movs	r2, #7
 800270a:	701a      	strb	r2, [r3, #0]
				}
	            break;
 800270c:	e0b7      	b.n	800287e <step_washing_process+0x35e>
	        case WS_STATE_DRAIN_WS_SOLUTION:
	            if(is_washing_solution_empty())
 800270e:	f7ff fe65 	bl	80023dc <is_washing_solution_empty>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80b4 	beq.w	8002882 <step_washing_process+0x362>
	            {
	            	LOGI("solution empty,wait5 :%ds",step_para.timing[4]);
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <step_washing_process+0x284>)
 800271c:	895b      	ldrh	r3, [r3, #10]
 800271e:	461a      	mov	r2, r3
 8002720:	4922      	ldr	r1, [pc, #136]	; (80027ac <step_washing_process+0x28c>)
 8002722:	482d      	ldr	r0, [pc, #180]	; (80027d8 <step_washing_process+0x2b8>)
 8002724:	f00b f812 	bl	800d74c <iprintf>
	            	stop_drain_washing_solution();
 8002728:	f7ff fe60 	bl	80023ec <stop_drain_washing_solution>
	            	old_ws_state = ws_state;
 800272c:	4b1c      	ldr	r3, [pc, #112]	; (80027a0 <step_washing_process+0x280>)
 800272e:	781a      	ldrb	r2, [r3, #0]
 8002730:	4b22      	ldr	r3, [pc, #136]	; (80027bc <step_washing_process+0x29c>)
 8002732:	701a      	strb	r2, [r3, #0]
	            	t_time = HAL_GetTick() +  (uint32_t)step_para.timing[4] * 1000;
 8002734:	f001 f878 	bl	8003828 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	4b1a      	ldr	r3, [pc, #104]	; (80027a4 <step_washing_process+0x284>)
 800273c:	895b      	ldrh	r3, [r3, #10]
 800273e:	4619      	mov	r1, r3
 8002740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	4a1d      	ldr	r2, [pc, #116]	; (80027c0 <step_washing_process+0x2a0>)
 800274c:	6013      	str	r3, [r2, #0]
	            	ws_state = WS_STATE_WAIT; // Example transition to next state
 800274e:	4b14      	ldr	r3, [pc, #80]	; (80027a0 <step_washing_process+0x280>)
 8002750:	2208      	movs	r2, #8
 8002752:	701a      	strb	r2, [r3, #0]
	            }
	            break;
 8002754:	e095      	b.n	8002882 <step_washing_process+0x362>
	        case WS_STATE_WAIT:
	            if(HAL_GetTick() > t_time)
 8002756:	f001 f867 	bl	8003828 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <step_washing_process+0x2a0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d975      	bls.n	8002850 <step_washing_process+0x330>
	            {
	            	switch (old_ws_state) {
 8002764:	4b15      	ldr	r3, [pc, #84]	; (80027bc <step_washing_process+0x29c>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	3b02      	subs	r3, #2
 800276a:	2b05      	cmp	r3, #5
 800276c:	d872      	bhi.n	8002854 <step_washing_process+0x334>
 800276e:	a201      	add	r2, pc, #4	; (adr r2, 8002774 <step_washing_process+0x254>)
 8002770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002774:	0800278d 	.word	0x0800278d
 8002778:	080027e1 	.word	0x080027e1
 800277c:	08002855 	.word	0x08002855
 8002780:	08002829 	.word	0x08002829
 8002784:	08002855 	.word	0x08002855
 8002788:	08002841 	.word	0x08002841
						case WS_STATE_MOVE_WELLS:
							LOGI("wait1 done");
 800278c:	4907      	ldr	r1, [pc, #28]	; (80027ac <step_washing_process+0x28c>)
 800278e:	4813      	ldr	r0, [pc, #76]	; (80027dc <step_washing_process+0x2bc>)
 8002790:	f00a ffdc 	bl	800d74c <iprintf>
							ws_state = WS_STATE_FILL_WS_SOLUTION;
 8002794:	4b02      	ldr	r3, [pc, #8]	; (80027a0 <step_washing_process+0x280>)
 8002796:	2204      	movs	r2, #4
 8002798:	701a      	strb	r2, [r3, #0]
							start_fill_washing_solution();
 800279a:	f7ff fdf3 	bl	8002384 <start_fill_washing_solution>
							break;
 800279e:	e05a      	b.n	8002856 <step_washing_process+0x336>
 80027a0:	20002941 	.word	0x20002941
 80027a4:	2000292c 	.word	0x2000292c
 80027a8:	2000017c 	.word	0x2000017c
 80027ac:	0800eb60 	.word	0x0800eb60
 80027b0:	0800ec48 	.word	0x0800ec48
 80027b4:	200028c8 	.word	0x200028c8
 80027b8:	0800eeb8 	.word	0x0800eeb8
 80027bc:	20002942 	.word	0x20002942
 80027c0:	2000293c 	.word	0x2000293c
 80027c4:	0800eed8 	.word	0x0800eed8
 80027c8:	200028f8 	.word	0x200028f8
 80027cc:	0800ef00 	.word	0x0800ef00
 80027d0:	0800ecd4 	.word	0x0800ecd4
 80027d4:	0800ef20 	.word	0x0800ef20
 80027d8:	0800ef4c 	.word	0x0800ef4c
 80027dc:	0800ef6c 	.word	0x0800ef6c
						case WS_STATE_Z_BOTTOM:
							LOGI("wait2 done");
 80027e0:	492a      	ldr	r1, [pc, #168]	; (800288c <step_washing_process+0x36c>)
 80027e2:	482b      	ldr	r0, [pc, #172]	; (8002890 <step_washing_process+0x370>)
 80027e4:	f00a ffb2 	bl	800d74c <iprintf>
							mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 80027e8:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <step_washing_process+0x374>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80027f0:	4619      	mov	r1, r3
 80027f2:	4829      	ldr	r0, [pc, #164]	; (8002898 <step_washing_process+0x378>)
 80027f4:	f7ff f920 	bl	8001a38 <mt_set_target_position>
							t_time = HAL_GetTick() +  (uint32_t)step_para.timing[2] * 1000;
 80027f8:	f001 f816 	bl	8003828 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b27      	ldr	r3, [pc, #156]	; (800289c <step_washing_process+0x37c>)
 8002800:	88db      	ldrh	r3, [r3, #6]
 8002802:	4619      	mov	r1, r3
 8002804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	4a24      	ldr	r2, [pc, #144]	; (80028a0 <step_washing_process+0x380>)
 8002810:	6013      	str	r3, [r2, #0]
							LOGI("start shake in %ds",step_para.timing[2]);
 8002812:	4b22      	ldr	r3, [pc, #136]	; (800289c <step_washing_process+0x37c>)
 8002814:	88db      	ldrh	r3, [r3, #6]
 8002816:	461a      	mov	r2, r3
 8002818:	491c      	ldr	r1, [pc, #112]	; (800288c <step_washing_process+0x36c>)
 800281a:	4822      	ldr	r0, [pc, #136]	; (80028a4 <step_washing_process+0x384>)
 800281c:	f00a ff96 	bl	800d74c <iprintf>
							ws_state = WS_STATE_SHAKE;
 8002820:	4b21      	ldr	r3, [pc, #132]	; (80028a8 <step_washing_process+0x388>)
 8002822:	2205      	movs	r2, #5
 8002824:	701a      	strb	r2, [r3, #0]
							break;
 8002826:	e016      	b.n	8002856 <step_washing_process+0x336>
						case WS_STATE_SHAKE:
							LOGI("wait4 done, move z to top");
 8002828:	4918      	ldr	r1, [pc, #96]	; (800288c <step_washing_process+0x36c>)
 800282a:	4820      	ldr	r0, [pc, #128]	; (80028ac <step_washing_process+0x38c>)
 800282c:	f00a ff8e 	bl	800d74c <iprintf>
							mt_set_target_position(&z_motor,0);
 8002830:	2100      	movs	r1, #0
 8002832:	4819      	ldr	r0, [pc, #100]	; (8002898 <step_washing_process+0x378>)
 8002834:	f7ff f900 	bl	8001a38 <mt_set_target_position>
							ws_state = WS_STATE_Z_TOP;
 8002838:	4b1b      	ldr	r3, [pc, #108]	; (80028a8 <step_washing_process+0x388>)
 800283a:	2206      	movs	r2, #6
 800283c:	701a      	strb	r2, [r3, #0]
							break;
 800283e:	e00a      	b.n	8002856 <step_washing_process+0x336>
						case WS_STATE_DRAIN_WS_SOLUTION:
							LOGI("wait5 done");
 8002840:	4912      	ldr	r1, [pc, #72]	; (800288c <step_washing_process+0x36c>)
 8002842:	481b      	ldr	r0, [pc, #108]	; (80028b0 <step_washing_process+0x390>)
 8002844:	f00a ff82 	bl	800d74c <iprintf>
							ws_state = WS_STATE_Z_FINISH;
 8002848:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <step_washing_process+0x388>)
 800284a:	2209      	movs	r2, #9
 800284c:	701a      	strb	r2, [r3, #0]
							break;
 800284e:	e002      	b.n	8002856 <step_washing_process+0x336>
						default:
							break;
					}
	            }
 8002850:	bf00      	nop
 8002852:	e017      	b.n	8002884 <step_washing_process+0x364>
							break;
 8002854:	bf00      	nop
	            break;
 8002856:	e015      	b.n	8002884 <step_washing_process+0x364>
	        case WS_STATE_Z_FINISH:
	        	LOGI("-------------------------------washing step done----------------------");
 8002858:	490c      	ldr	r1, [pc, #48]	; (800288c <step_washing_process+0x36c>)
 800285a:	4816      	ldr	r0, [pc, #88]	; (80028b4 <step_washing_process+0x394>)
 800285c:	f00a ff76 	bl	800d74c <iprintf>
	            ws_state = WS_STATE_IDE;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <step_washing_process+0x388>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
	        	return 1;
 8002866:	2301      	movs	r3, #1
 8002868:	e00d      	b.n	8002886 <step_washing_process+0x366>
	            break;
	        default:
	            // Handle an invalid state
	            break;
 800286a:	bf00      	nop
 800286c:	e00a      	b.n	8002884 <step_washing_process+0x364>
	            break;
 800286e:	bf00      	nop
 8002870:	e008      	b.n	8002884 <step_washing_process+0x364>
	            break;
 8002872:	bf00      	nop
 8002874:	e006      	b.n	8002884 <step_washing_process+0x364>
	            break;
 8002876:	bf00      	nop
 8002878:	e004      	b.n	8002884 <step_washing_process+0x364>
	            break;
 800287a:	bf00      	nop
 800287c:	e002      	b.n	8002884 <step_washing_process+0x364>
	            break;
 800287e:	bf00      	nop
 8002880:	e000      	b.n	8002884 <step_washing_process+0x364>
	            break;
 8002882:	bf00      	nop
	    }
	    return 0;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	0800eb60 	.word	0x0800eb60
 8002890:	0800ef80 	.word	0x0800ef80
 8002894:	2000017c 	.word	0x2000017c
 8002898:	200028f8 	.word	0x200028f8
 800289c:	2000292c 	.word	0x2000292c
 80028a0:	2000293c 	.word	0x2000293c
 80028a4:	0800ec94 	.word	0x0800ec94
 80028a8:	20002941 	.word	0x20002941
 80028ac:	0800ef94 	.word	0x0800ef94
 80028b0:	0800efb4 	.word	0x0800efb4
 80028b4:	0800efc8 	.word	0x0800efc8

080028b8 <step_drying_start>:

_step_dy_state dy_state = DY_STATE_IDE;
_step_dy_state old_dy_state = DY_STATE_IDE;

int step_drying_start()
{
 80028b8:	b598      	push	{r3, r4, r7, lr}
 80028ba:	af00      	add	r7, sp, #0
	if(ws_state == WS_STATE_IDE)
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <step_drying_start+0x68>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d129      	bne.n	8002918 <step_drying_start+0x60>
	{
		LOGI("--------------- drying step: %d of program : %d----------------",running_step,running_pg);
 80028c4:	4b17      	ldr	r3, [pc, #92]	; (8002924 <step_drying_start+0x6c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b17      	ldr	r3, [pc, #92]	; (8002928 <step_drying_start+0x70>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	4917      	ldr	r1, [pc, #92]	; (800292c <step_drying_start+0x74>)
 80028d0:	4817      	ldr	r0, [pc, #92]	; (8002930 <step_drying_start+0x78>)
 80028d2:	f00a ff3b 	bl	800d74c <iprintf>
		step_para = system_data.flash_data.Program_para[running_pg][running_step];
 80028d6:	4b14      	ldr	r3, [pc, #80]	; (8002928 <step_drying_start+0x70>)
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <step_drying_start+0x6c>)
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	461a      	mov	r2, r3
 80028e2:	4c14      	ldr	r4, [pc, #80]	; (8002934 <step_drying_start+0x7c>)
 80028e4:	4914      	ldr	r1, [pc, #80]	; (8002938 <step_drying_start+0x80>)
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	1a9b      	subs	r3, r3, r2
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80028f2:	fb00 f202 	mul.w	r2, r0, r2
 80028f6:	4413      	add	r3, r2
 80028f8:	440b      	add	r3, r1
 80028fa:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80028fe:	4623      	mov	r3, r4
 8002900:	1d14      	adds	r4, r2, #4
 8002902:	6820      	ldr	r0, [r4, #0]
 8002904:	6861      	ldr	r1, [r4, #4]
 8002906:	68a2      	ldr	r2, [r4, #8]
 8002908:	c307      	stmia	r3!, {r0, r1, r2}
 800290a:	89a2      	ldrh	r2, [r4, #12]
 800290c:	801a      	strh	r2, [r3, #0]
		dy_state = DY_STATE_START;
 800290e:	4b0b      	ldr	r3, [pc, #44]	; (800293c <step_drying_start+0x84>)
 8002910:	2201      	movs	r2, #1
 8002912:	701a      	strb	r2, [r3, #0]
		return 1;
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <step_drying_start+0x62>
	}
	return 0;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	bd98      	pop	{r3, r4, r7, pc}
 800291e:	bf00      	nop
 8002920:	20002941 	.word	0x20002941
 8002924:	20002929 	.word	0x20002929
 8002928:	20002928 	.word	0x20002928
 800292c:	0800eb60 	.word	0x0800eb60
 8002930:	0800f018 	.word	0x0800f018
 8002934:	2000292c 	.word	0x2000292c
 8002938:	2000017c 	.word	0x2000017c
 800293c:	20002943 	.word	0x20002943

08002940 <step_drying_process>:

int step_drying_process(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	switch (dy_state) {
 8002944:	4b5d      	ldr	r3, [pc, #372]	; (8002abc <step_drying_process+0x17c>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b08      	cmp	r3, #8
 800294a:	f200 80ac 	bhi.w	8002aa6 <step_drying_process+0x166>
 800294e:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <step_drying_process+0x14>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	08002aa7 	.word	0x08002aa7
 8002958:	08002979 	.word	0x08002979
 800295c:	080029b7 	.word	0x080029b7
 8002960:	080029f1 	.word	0x080029f1
 8002964:	08002a15 	.word	0x08002a15
 8002968:	08002a4d 	.word	0x08002a4d
 800296c:	08002a7d 	.word	0x08002a7d
 8002970:	08002a65 	.word	0x08002a65
 8002974:	08002aa3 	.word	0x08002aa3
	    case DY_STATE_IDE:
	        break;
	    case DY_STATE_START:
//        	show_infor_drying_step();
            LOGI("move x to %lu",system_data.flash_data.Well_position[step_para.wells-1]);
 8002978:	4b51      	ldr	r3, [pc, #324]	; (8002ac0 <step_drying_process+0x180>)
 800297a:	785b      	ldrb	r3, [r3, #1]
 800297c:	3b01      	subs	r3, #1
 800297e:	4a51      	ldr	r2, [pc, #324]	; (8002ac4 <step_drying_process+0x184>)
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	461a      	mov	r2, r3
 8002988:	494f      	ldr	r1, [pc, #316]	; (8002ac8 <step_drying_process+0x188>)
 800298a:	4850      	ldr	r0, [pc, #320]	; (8002acc <step_drying_process+0x18c>)
 800298c:	f00a fede 	bl	800d74c <iprintf>
        	mt_set_target_position(&x_motor, system_data.flash_data.Well_position[step_para.wells-1]); // m
 8002990:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <step_drying_process+0x180>)
 8002992:	785b      	ldrb	r3, [r3, #1]
 8002994:	3b01      	subs	r3, #1
 8002996:	4a4b      	ldr	r2, [pc, #300]	; (8002ac4 <step_drying_process+0x184>)
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4619      	mov	r1, r3
 80029a0:	484b      	ldr	r0, [pc, #300]	; (8002ad0 <step_drying_process+0x190>)
 80029a2:	f7ff f849 	bl	8001a38 <mt_set_target_position>
        	old_dy_state = dy_state;
 80029a6:	4b45      	ldr	r3, [pc, #276]	; (8002abc <step_drying_process+0x17c>)
 80029a8:	781a      	ldrb	r2, [r3, #0]
 80029aa:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <step_drying_process+0x194>)
 80029ac:	701a      	strb	r2, [r3, #0]
        	dy_state = DY_STATE_MOVE_WELLS; // Example transition to next state
 80029ae:	4b43      	ldr	r3, [pc, #268]	; (8002abc <step_drying_process+0x17c>)
 80029b0:	2202      	movs	r2, #2
 80029b2:	701a      	strb	r2, [r3, #0]
            break;
 80029b4:	e07e      	b.n	8002ab4 <step_drying_process+0x174>
	    case DY_STATE_MOVE_WELLS:
        	if(Mt_get_current_prosition(x_motor) == system_data.flash_data.Well_position[step_para.wells-1])
 80029b6:	4b46      	ldr	r3, [pc, #280]	; (8002ad0 <step_drying_process+0x190>)
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <step_drying_process+0x180>)
 80029bc:	785b      	ldrb	r3, [r3, #1]
 80029be:	3b01      	subs	r3, #1
 80029c0:	4940      	ldr	r1, [pc, #256]	; (8002ac4 <step_drying_process+0x184>)
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d16e      	bne.n	8002aaa <step_drying_process+0x16a>
			{
				LOGI("move x done, move z to bottom");
 80029cc:	493e      	ldr	r1, [pc, #248]	; (8002ac8 <step_drying_process+0x188>)
 80029ce:	4842      	ldr	r0, [pc, #264]	; (8002ad8 <step_drying_process+0x198>)
 80029d0:	f00a febc 	bl	800d74c <iprintf>
				old_dy_state = dy_state;
 80029d4:	4b39      	ldr	r3, [pc, #228]	; (8002abc <step_drying_process+0x17c>)
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	4b3e      	ldr	r3, [pc, #248]	; (8002ad4 <step_drying_process+0x194>)
 80029da:	701a      	strb	r2, [r3, #0]
				mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 80029dc:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <step_drying_process+0x184>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4619      	mov	r1, r3
 80029e2:	483e      	ldr	r0, [pc, #248]	; (8002adc <step_drying_process+0x19c>)
 80029e4:	f7ff f828 	bl	8001a38 <mt_set_target_position>
				dy_state = DY_STATE_Z_BOTTOM;
 80029e8:	4b34      	ldr	r3, [pc, #208]	; (8002abc <step_drying_process+0x17c>)
 80029ea:	2203      	movs	r2, #3
 80029ec:	701a      	strb	r2, [r3, #0]
			}
	        break;
 80029ee:	e05c      	b.n	8002aaa <step_drying_process+0x16a>
	    case DY_STATE_Z_BOTTOM:
	    	if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 80029f0:	4b3a      	ldr	r3, [pc, #232]	; (8002adc <step_drying_process+0x19c>)
 80029f2:	689a      	ldr	r2, [r3, #8]
 80029f4:	4b33      	ldr	r3, [pc, #204]	; (8002ac4 <step_drying_process+0x184>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d158      	bne.n	8002aae <step_drying_process+0x16e>
			{
				LOGI("move z done");
 80029fc:	4932      	ldr	r1, [pc, #200]	; (8002ac8 <step_drying_process+0x188>)
 80029fe:	4838      	ldr	r0, [pc, #224]	; (8002ae0 <step_drying_process+0x1a0>)
 8002a00:	f00a fea4 	bl	800d74c <iprintf>
				old_dy_state = dy_state;
 8002a04:	4b2d      	ldr	r3, [pc, #180]	; (8002abc <step_drying_process+0x17c>)
 8002a06:	781a      	ldrb	r2, [r3, #0]
 8002a08:	4b32      	ldr	r3, [pc, #200]	; (8002ad4 <step_drying_process+0x194>)
 8002a0a:	701a      	strb	r2, [r3, #0]
				dy_state = DY_HEATER_ON; // Example transition to next state
 8002a0c:	4b2b      	ldr	r3, [pc, #172]	; (8002abc <step_drying_process+0x17c>)
 8002a0e:	2204      	movs	r2, #4
 8002a10:	701a      	strb	r2, [r3, #0]

			}
			break;
 8002a12:	e04c      	b.n	8002aae <step_drying_process+0x16e>
	    case DY_HEATER_ON:
	    	LOGI("heater on, wait : %ds",step_para.timing[0]);
 8002a14:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <step_drying_process+0x180>)
 8002a16:	885b      	ldrh	r3, [r3, #2]
 8002a18:	461a      	mov	r2, r3
 8002a1a:	492b      	ldr	r1, [pc, #172]	; (8002ac8 <step_drying_process+0x188>)
 8002a1c:	4831      	ldr	r0, [pc, #196]	; (8002ae4 <step_drying_process+0x1a4>)
 8002a1e:	f00a fe95 	bl	800d74c <iprintf>
	    	old_dy_state = dy_state;
 8002a22:	4b26      	ldr	r3, [pc, #152]	; (8002abc <step_drying_process+0x17c>)
 8002a24:	781a      	ldrb	r2, [r3, #0]
 8002a26:	4b2b      	ldr	r3, [pc, #172]	; (8002ad4 <step_drying_process+0x194>)
 8002a28:	701a      	strb	r2, [r3, #0]
	    	t_time = HAL_GetTick() +  (uint32_t)step_para.timing[0] * 1000;
 8002a2a:	f000 fefd 	bl	8003828 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4b23      	ldr	r3, [pc, #140]	; (8002ac0 <step_drying_process+0x180>)
 8002a32:	885b      	ldrh	r3, [r3, #2]
 8002a34:	4619      	mov	r1, r3
 8002a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	4a29      	ldr	r2, [pc, #164]	; (8002ae8 <step_drying_process+0x1a8>)
 8002a42:	6013      	str	r3, [r2, #0]
	    	dy_state = DY_STATE_WAIT; // Example transition to next state
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <step_drying_process+0x17c>)
 8002a46:	2206      	movs	r2, #6
 8002a48:	701a      	strb	r2, [r3, #0]
	        break;
 8002a4a:	e033      	b.n	8002ab4 <step_drying_process+0x174>
	    case DY_HEATER_OFF:
	    	LOGI("heater off");
 8002a4c:	491e      	ldr	r1, [pc, #120]	; (8002ac8 <step_drying_process+0x188>)
 8002a4e:	4827      	ldr	r0, [pc, #156]	; (8002aec <step_drying_process+0x1ac>)
 8002a50:	f00a fe7c 	bl	800d74c <iprintf>
	    	mt_set_target_position(&z_motor,0);
 8002a54:	2100      	movs	r1, #0
 8002a56:	4821      	ldr	r0, [pc, #132]	; (8002adc <step_drying_process+0x19c>)
 8002a58:	f7fe ffee 	bl	8001a38 <mt_set_target_position>
	    	dy_state = DY_STATE_Z_TOP;
 8002a5c:	4b17      	ldr	r3, [pc, #92]	; (8002abc <step_drying_process+0x17c>)
 8002a5e:	2207      	movs	r2, #7
 8002a60:	701a      	strb	r2, [r3, #0]
	        break;
 8002a62:	e027      	b.n	8002ab4 <step_drying_process+0x174>
	    case DY_STATE_Z_TOP:
        	if(Mt_get_current_prosition(z_motor) == 0){
 8002a64:	4b1d      	ldr	r3, [pc, #116]	; (8002adc <step_drying_process+0x19c>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d122      	bne.n	8002ab2 <step_drying_process+0x172>
        		LOGI("ztop done");
 8002a6c:	4916      	ldr	r1, [pc, #88]	; (8002ac8 <step_drying_process+0x188>)
 8002a6e:	4820      	ldr	r0, [pc, #128]	; (8002af0 <step_drying_process+0x1b0>)
 8002a70:	f00a fe6c 	bl	800d74c <iprintf>
        		dy_state = DY_STATE_Z_FINISH;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <step_drying_process+0x17c>)
 8002a76:	2208      	movs	r2, #8
 8002a78:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002a7a:	e01a      	b.n	8002ab2 <step_drying_process+0x172>
	    case DY_STATE_WAIT:
	        // code to execute when the state is DY_STATE_WAIT
	    	if(HAL_GetTick() > t_time)
 8002a7c:	f000 fed4 	bl	8003828 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <step_drying_process+0x1a8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d907      	bls.n	8002a9a <step_drying_process+0x15a>
			{
				switch (old_dy_state) {
 8002a8a:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <step_drying_process+0x194>)
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d105      	bne.n	8002a9e <step_drying_process+0x15e>
					case DY_HEATER_ON:
						dy_state = DY_HEATER_OFF; // Example transition to next state
 8002a92:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <step_drying_process+0x17c>)
 8002a94:	2205      	movs	r2, #5
 8002a96:	701a      	strb	r2, [r3, #0]
						break;
 8002a98:	e002      	b.n	8002aa0 <step_drying_process+0x160>
				    default:
				        break;
				}
			}
 8002a9a:	bf00      	nop
 8002a9c:	e00a      	b.n	8002ab4 <step_drying_process+0x174>
				        break;
 8002a9e:	bf00      	nop
	        break;
 8002aa0:	e008      	b.n	8002ab4 <step_drying_process+0x174>
	    case DY_STATE_Z_FINISH:
	    	return 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e007      	b.n	8002ab6 <step_drying_process+0x176>
	        old_dy_state = DY_STATE_Z_FINISH;
	        break;
	    default:
	        break;
 8002aa6:	bf00      	nop
 8002aa8:	e004      	b.n	8002ab4 <step_drying_process+0x174>
	        break;
 8002aaa:	bf00      	nop
 8002aac:	e002      	b.n	8002ab4 <step_drying_process+0x174>
			break;
 8002aae:	bf00      	nop
 8002ab0:	e000      	b.n	8002ab4 <step_drying_process+0x174>
			break;
 8002ab2:	bf00      	nop
	}
	return 0;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	20002943 	.word	0x20002943
 8002ac0:	2000292c 	.word	0x2000292c
 8002ac4:	2000017c 	.word	0x2000017c
 8002ac8:	0800eb60 	.word	0x0800eb60
 8002acc:	0800ec48 	.word	0x0800ec48
 8002ad0:	200028c8 	.word	0x200028c8
 8002ad4:	20002944 	.word	0x20002944
 8002ad8:	0800f060 	.word	0x0800f060
 8002adc:	200028f8 	.word	0x200028f8
 8002ae0:	0800f084 	.word	0x0800f084
 8002ae4:	0800f098 	.word	0x0800f098
 8002ae8:	2000293c 	.word	0x2000293c
 8002aec:	0800f0b4 	.word	0x0800f0b4
 8002af0:	0800f0c8 	.word	0x0800f0c8

08002af4 <pg_start>:

_program_state pgstate = PG_STATE_IDLE;


int pg_start(uint8_t pg,uint8_t stepindex)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	460a      	mov	r2, r1
 8002afe:	71fb      	strb	r3, [r7, #7]
 8002b00:	4613      	mov	r3, r2
 8002b02:	71bb      	strb	r3, [r7, #6]
	if(pgstate == PG_STATE_IDLE)
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <pg_start+0x44>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d110      	bne.n	8002b2e <pg_start+0x3a>
	{
		LOGI("start step: %d of program : %d",stepindex,pg);
 8002b0c:	79ba      	ldrb	r2, [r7, #6]
 8002b0e:	79fb      	ldrb	r3, [r7, #7]
 8002b10:	490a      	ldr	r1, [pc, #40]	; (8002b3c <pg_start+0x48>)
 8002b12:	480b      	ldr	r0, [pc, #44]	; (8002b40 <pg_start+0x4c>)
 8002b14:	f00a fe1a 	bl	800d74c <iprintf>
		running_pg = pg;
 8002b18:	4a0a      	ldr	r2, [pc, #40]	; (8002b44 <pg_start+0x50>)
 8002b1a:	79fb      	ldrb	r3, [r7, #7]
 8002b1c:	7013      	strb	r3, [r2, #0]
		running_step = stepindex;
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <pg_start+0x54>)
 8002b20:	79bb      	ldrb	r3, [r7, #6]
 8002b22:	7013      	strb	r3, [r2, #0]
		pgstate = PG_STATE_START;
 8002b24:	4b04      	ldr	r3, [pc, #16]	; (8002b38 <pg_start+0x44>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
		return 1;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e000      	b.n	8002b30 <pg_start+0x3c>
	}
	return 0;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3708      	adds	r7, #8
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	20002945 	.word	0x20002945
 8002b3c:	0800eb60 	.word	0x0800eb60
 8002b40:	0800eb68 	.word	0x0800eb68
 8002b44:	20002928 	.word	0x20002928
 8002b48:	20002929 	.word	0x20002929

08002b4c <start_step>:

_step_type start_step(){
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
	switch (system_data.flash_data.Program_para[running_pg][running_step].type) {
 8002b50:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <start_step+0xc4>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	4b2f      	ldr	r3, [pc, #188]	; (8002c14 <start_step+0xc8>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	492e      	ldr	r1, [pc, #184]	; (8002c18 <start_step+0xcc>)
 8002b5e:	4613      	mov	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002b6a:	fb00 f202 	mul.w	r2, r0, r2
 8002b6e:	4413      	add	r3, r2
 8002b70:	440b      	add	r3, r1
 8002b72:	332c      	adds	r3, #44	; 0x2c
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d830      	bhi.n	8002bdc <start_step+0x90>
 8002b7a:	a201      	add	r2, pc, #4	; (adr r2, 8002b80 <start_step+0x34>)
 8002b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b80:	08002b91 	.word	0x08002b91
 8002b84:	08002ba1 	.word	0x08002ba1
 8002b88:	08002bb5 	.word	0x08002bb5
 8002b8c:	08002bc9 	.word	0x08002bc9
		case STEP_TYPE_NONE:
			LOGI("step :%d  isn't active",running_step);
 8002b90:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <start_step+0xc8>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4921      	ldr	r1, [pc, #132]	; (8002c1c <start_step+0xd0>)
 8002b98:	4821      	ldr	r0, [pc, #132]	; (8002c20 <start_step+0xd4>)
 8002b9a:	f00a fdd7 	bl	800d74c <iprintf>
			break;
 8002b9e:	e022      	b.n	8002be6 <start_step+0x9a>
		case STEP_TYPE_SHAKE:
			LOGI("Shaking step (%d)  is currently active",running_step);
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <start_step+0xc8>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	491d      	ldr	r1, [pc, #116]	; (8002c1c <start_step+0xd0>)
 8002ba8:	481e      	ldr	r0, [pc, #120]	; (8002c24 <start_step+0xd8>)
 8002baa:	f00a fdcf 	bl	800d74c <iprintf>
			step_shake_start();
 8002bae:	f7ff f9db 	bl	8001f68 <step_shake_start>
			break;
 8002bb2:	e018      	b.n	8002be6 <start_step+0x9a>
		case STEP_TYPE_WASHING:
			LOGI("Washing step (%d)  is currently active",running_step);
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <start_step+0xc8>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4918      	ldr	r1, [pc, #96]	; (8002c1c <start_step+0xd0>)
 8002bbc:	481a      	ldr	r0, [pc, #104]	; (8002c28 <start_step+0xdc>)
 8002bbe:	f00a fdc5 	bl	800d74c <iprintf>
			step_washing_start();
 8002bc2:	f7ff fc1f 	bl	8002404 <step_washing_start>
			break;
 8002bc6:	e00e      	b.n	8002be6 <start_step+0x9a>
		case STEP_TYPE_DRYING:
			LOGI("Drying step (%d) is currently active",running_step);
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <start_step+0xc8>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4913      	ldr	r1, [pc, #76]	; (8002c1c <start_step+0xd0>)
 8002bd0:	4816      	ldr	r0, [pc, #88]	; (8002c2c <start_step+0xe0>)
 8002bd2:	f00a fdbb 	bl	800d74c <iprintf>
			step_drying_start();
 8002bd6:	f7ff fe6f 	bl	80028b8 <step_drying_start>
			break;
 8002bda:	e004      	b.n	8002be6 <start_step+0x9a>
		default:
			LOGI("Unknown step type");
 8002bdc:	490f      	ldr	r1, [pc, #60]	; (8002c1c <start_step+0xd0>)
 8002bde:	4814      	ldr	r0, [pc, #80]	; (8002c30 <start_step+0xe4>)
 8002be0:	f00a fdb4 	bl	800d74c <iprintf>
			// Code to handle unknown step type
			break;
 8002be4:	bf00      	nop
	}
	return system_data.flash_data.Program_para[running_pg][running_step].type;
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <start_step+0xc4>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <start_step+0xc8>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4909      	ldr	r1, [pc, #36]	; (8002c18 <start_step+0xcc>)
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002c00:	fb00 f202 	mul.w	r2, r0, r2
 8002c04:	4413      	add	r3, r2
 8002c06:	440b      	add	r3, r1
 8002c08:	332c      	adds	r3, #44	; 0x2c
 8002c0a:	781b      	ldrb	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20002928 	.word	0x20002928
 8002c14:	20002929 	.word	0x20002929
 8002c18:	2000017c 	.word	0x2000017c
 8002c1c:	0800eb60 	.word	0x0800eb60
 8002c20:	0800f0d8 	.word	0x0800f0d8
 8002c24:	0800f0f8 	.word	0x0800f0f8
 8002c28:	0800f128 	.word	0x0800f128
 8002c2c:	0800f158 	.word	0x0800f158
 8002c30:	0800f184 	.word	0x0800f184

08002c34 <pg_process_loop>:

void pg_process_loop(void) {
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
	switch (pgstate) {
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <pg_process_loop+0x148>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	f200 8099 	bhi.w	8002d74 <pg_process_loop+0x140>
 8002c42:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <pg_process_loop+0x14>)
 8002c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c48:	08002d75 	.word	0x08002d75
 8002c4c:	08002c5d 	.word	0x08002c5d
 8002c50:	08002c8d 	.word	0x08002c8d
 8002c54:	08002d75 	.word	0x08002d75
 8002c58:	08002d5f 	.word	0x08002d5f
		case PG_STATE_IDLE:
//			printf("Program is idle\n");
			// Code to handle the idle state
			break;
		case PG_STATE_START:
			if(running_step == MAX_STEP_NUM){
 8002c5c:	4b48      	ldr	r3, [pc, #288]	; (8002d80 <pg_process_loop+0x14c>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b19      	cmp	r3, #25
 8002c62:	d103      	bne.n	8002c6c <pg_process_loop+0x38>
				pgstate= PG_STATE_END;
 8002c64:	4b45      	ldr	r3, [pc, #276]	; (8002d7c <pg_process_loop+0x148>)
 8002c66:	2204      	movs	r2, #4
 8002c68:	701a      	strb	r2, [r3, #0]
				break;
 8002c6a:	e084      	b.n	8002d76 <pg_process_loop+0x142>
			}
			if(start_step()!= STEP_TYPE_NONE) {
 8002c6c:	f7ff ff6e 	bl	8002b4c <start_step>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <pg_process_loop+0x4a>
				pgstate= PG_STATE_RUNNING;
 8002c76:	4b41      	ldr	r3, [pc, #260]	; (8002d7c <pg_process_loop+0x148>)
 8002c78:	2202      	movs	r2, #2
 8002c7a:	701a      	strb	r2, [r3, #0]
			}
			else {
				running_step++;
			}
			// Code to handle the start state
			break;
 8002c7c:	e07b      	b.n	8002d76 <pg_process_loop+0x142>
				running_step++;
 8002c7e:	4b40      	ldr	r3, [pc, #256]	; (8002d80 <pg_process_loop+0x14c>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <pg_process_loop+0x14c>)
 8002c88:	701a      	strb	r2, [r3, #0]
			break;
 8002c8a:	e074      	b.n	8002d76 <pg_process_loop+0x142>
		case PG_STATE_RUNNING:
			switch (system_data.flash_data.Program_para[running_pg][running_step].type) {
 8002c8c:	4b3d      	ldr	r3, [pc, #244]	; (8002d84 <pg_process_loop+0x150>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	4b3b      	ldr	r3, [pc, #236]	; (8002d80 <pg_process_loop+0x14c>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	461a      	mov	r2, r3
 8002c98:	493b      	ldr	r1, [pc, #236]	; (8002d88 <pg_process_loop+0x154>)
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8002ca6:	fb00 f202 	mul.w	r2, r0, r2
 8002caa:	4413      	add	r3, r2
 8002cac:	440b      	add	r3, r1
 8002cae:	332c      	adds	r3, #44	; 0x2c
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b03      	cmp	r3, #3
 8002cb4:	d032      	beq.n	8002d1c <pg_process_loop+0xe8>
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	dc46      	bgt.n	8002d48 <pg_process_loop+0x114>
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d002      	beq.n	8002cc4 <pg_process_loop+0x90>
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d016      	beq.n	8002cf0 <pg_process_loop+0xbc>
 8002cc2:	e041      	b.n	8002d48 <pg_process_loop+0x114>
				case STEP_TYPE_SHAKE:
					if(step_shake_process())
 8002cc4:	f7ff f9dc 	bl	8002080 <step_shake_process>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d041      	beq.n	8002d52 <pg_process_loop+0x11e>
					{
						LOGI("Shaking step (%d) finish",running_step);
 8002cce:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <pg_process_loop+0x14c>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	492d      	ldr	r1, [pc, #180]	; (8002d8c <pg_process_loop+0x158>)
 8002cd6:	482e      	ldr	r0, [pc, #184]	; (8002d90 <pg_process_loop+0x15c>)
 8002cd8:	f00a fd38 	bl	800d74c <iprintf>
						running_step++;
 8002cdc:	4b28      	ldr	r3, [pc, #160]	; (8002d80 <pg_process_loop+0x14c>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	3301      	adds	r3, #1
 8002ce2:	b2da      	uxtb	r2, r3
 8002ce4:	4b26      	ldr	r3, [pc, #152]	; (8002d80 <pg_process_loop+0x14c>)
 8002ce6:	701a      	strb	r2, [r3, #0]
						pgstate = PG_STATE_START;
 8002ce8:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <pg_process_loop+0x148>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002cee:	e030      	b.n	8002d52 <pg_process_loop+0x11e>
				case STEP_TYPE_WASHING:
					if(step_washing_process())
 8002cf0:	f7ff fc16 	bl	8002520 <step_washing_process>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d02d      	beq.n	8002d56 <pg_process_loop+0x122>
					{
						LOGI("washing step (%d) finish",running_step);
 8002cfa:	4b21      	ldr	r3, [pc, #132]	; (8002d80 <pg_process_loop+0x14c>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	461a      	mov	r2, r3
 8002d00:	4922      	ldr	r1, [pc, #136]	; (8002d8c <pg_process_loop+0x158>)
 8002d02:	4824      	ldr	r0, [pc, #144]	; (8002d94 <pg_process_loop+0x160>)
 8002d04:	f00a fd22 	bl	800d74c <iprintf>
						running_step++;
 8002d08:	4b1d      	ldr	r3, [pc, #116]	; (8002d80 <pg_process_loop+0x14c>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <pg_process_loop+0x14c>)
 8002d12:	701a      	strb	r2, [r3, #0]
						pgstate = PG_STATE_START;
 8002d14:	4b19      	ldr	r3, [pc, #100]	; (8002d7c <pg_process_loop+0x148>)
 8002d16:	2201      	movs	r2, #1
 8002d18:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002d1a:	e01c      	b.n	8002d56 <pg_process_loop+0x122>
				case STEP_TYPE_DRYING:
					if(step_drying_process())
 8002d1c:	f7ff fe10 	bl	8002940 <step_drying_process>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d019      	beq.n	8002d5a <pg_process_loop+0x126>
					{
						LOGI("drying step (%d) finish",running_step);
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <pg_process_loop+0x14c>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	4917      	ldr	r1, [pc, #92]	; (8002d8c <pg_process_loop+0x158>)
 8002d2e:	481a      	ldr	r0, [pc, #104]	; (8002d98 <pg_process_loop+0x164>)
 8002d30:	f00a fd0c 	bl	800d74c <iprintf>
						running_step++;
 8002d34:	4b12      	ldr	r3, [pc, #72]	; (8002d80 <pg_process_loop+0x14c>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <pg_process_loop+0x14c>)
 8002d3e:	701a      	strb	r2, [r3, #0]
						pgstate = PG_STATE_START;
 8002d40:	4b0e      	ldr	r3, [pc, #56]	; (8002d7c <pg_process_loop+0x148>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002d46:	e008      	b.n	8002d5a <pg_process_loop+0x126>
				default:
					LOGI("Unknown step type");
 8002d48:	4910      	ldr	r1, [pc, #64]	; (8002d8c <pg_process_loop+0x158>)
 8002d4a:	4814      	ldr	r0, [pc, #80]	; (8002d9c <pg_process_loop+0x168>)
 8002d4c:	f00a fcfe 	bl	800d74c <iprintf>
					break;
 8002d50:	e004      	b.n	8002d5c <pg_process_loop+0x128>
					break;
 8002d52:	bf00      	nop
 8002d54:	e00f      	b.n	8002d76 <pg_process_loop+0x142>
					break;
 8002d56:	bf00      	nop
 8002d58:	e00d      	b.n	8002d76 <pg_process_loop+0x142>
					break;
 8002d5a:	bf00      	nop
			}
			break;
 8002d5c:	e00b      	b.n	8002d76 <pg_process_loop+0x142>
//			printf("Program is stopping\n");
			// Code to handle the stop state
			break;
		case PG_STATE_END:
//			printf("Program has ended\n");
			LOGI("Program %d has ended",running_pg);
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <pg_process_loop+0x150>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	461a      	mov	r2, r3
 8002d64:	4909      	ldr	r1, [pc, #36]	; (8002d8c <pg_process_loop+0x158>)
 8002d66:	480e      	ldr	r0, [pc, #56]	; (8002da0 <pg_process_loop+0x16c>)
 8002d68:	f00a fcf0 	bl	800d74c <iprintf>
			pgstate = PG_STATE_IDLE;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	; (8002d7c <pg_process_loop+0x148>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
			// Code to handle the end state
			break;
 8002d72:	e000      	b.n	8002d76 <pg_process_loop+0x142>
		default:
//			printf("Unknown program state\n");
			// Code to handle unknown state
			break;
 8002d74:	bf00      	nop
	}
}
 8002d76:	bf00      	nop
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20002945 	.word	0x20002945
 8002d80:	20002929 	.word	0x20002929
 8002d84:	20002928 	.word	0x20002928
 8002d88:	2000017c 	.word	0x2000017c
 8002d8c:	0800eb60 	.word	0x0800eb60
 8002d90:	0800f19c 	.word	0x0800f19c
 8002d94:	0800f1bc 	.word	0x0800f1bc
 8002d98:	0800f1dc 	.word	0x0800f1dc
 8002d9c:	0800f184 	.word	0x0800f184
 8002da0:	0800f1fc 	.word	0x0800f1fc

08002da4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	4b10      	ldr	r3, [pc, #64]	; (8002df0 <HAL_MspInit+0x4c>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	4a0f      	ldr	r2, [pc, #60]	; (8002df0 <HAL_MspInit+0x4c>)
 8002db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dba:	4b0d      	ldr	r3, [pc, #52]	; (8002df0 <HAL_MspInit+0x4c>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc2:	607b      	str	r3, [r7, #4]
 8002dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	603b      	str	r3, [r7, #0]
 8002dca:	4b09      	ldr	r3, [pc, #36]	; (8002df0 <HAL_MspInit+0x4c>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <HAL_MspInit+0x4c>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b06      	ldr	r3, [pc, #24]	; (8002df0 <HAL_MspInit+0x4c>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	603b      	str	r3, [r7, #0]
 8002de0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002de2:	2007      	movs	r0, #7
 8002de4:	f000 fe20 	bl	8003a28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002de8:	bf00      	nop
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40023800 	.word	0x40023800

08002df4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08a      	sub	sp, #40	; 0x28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a19      	ldr	r2, [pc, #100]	; (8002e78 <HAL_I2C_MspInit+0x84>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d12c      	bne.n	8002e70 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e16:	2300      	movs	r3, #0
 8002e18:	613b      	str	r3, [r7, #16]
 8002e1a:	4b18      	ldr	r3, [pc, #96]	; (8002e7c <HAL_I2C_MspInit+0x88>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1e:	4a17      	ldr	r2, [pc, #92]	; (8002e7c <HAL_I2C_MspInit+0x88>)
 8002e20:	f043 0302 	orr.w	r3, r3, #2
 8002e24:	6313      	str	r3, [r2, #48]	; 0x30
 8002e26:	4b15      	ldr	r3, [pc, #84]	; (8002e7c <HAL_I2C_MspInit+0x88>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	f003 0302 	and.w	r3, r3, #2
 8002e2e:	613b      	str	r3, [r7, #16]
 8002e30:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8002e32:	f44f 7310 	mov.w	r3, #576	; 0x240
 8002e36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e38:	2312      	movs	r3, #18
 8002e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e40:	2300      	movs	r3, #0
 8002e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e44:	2304      	movs	r3, #4
 8002e46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e48:	f107 0314 	add.w	r3, r7, #20
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	480c      	ldr	r0, [pc, #48]	; (8002e80 <HAL_I2C_MspInit+0x8c>)
 8002e50:	f001 fc2c 	bl	80046ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e54:	2300      	movs	r3, #0
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_I2C_MspInit+0x88>)
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <HAL_I2C_MspInit+0x88>)
 8002e5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e62:	6413      	str	r3, [r2, #64]	; 0x40
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <HAL_I2C_MspInit+0x88>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002e70:	bf00      	nop
 8002e72:	3728      	adds	r7, #40	; 0x28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40005400 	.word	0x40005400
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	40020400 	.word	0x40020400

08002e84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	; 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	2200      	movs	r2, #0
 8002e92:	601a      	str	r2, [r3, #0]
 8002e94:	605a      	str	r2, [r3, #4]
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	60da      	str	r2, [r3, #12]
 8002e9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a19      	ldr	r2, [pc, #100]	; (8002f08 <HAL_SPI_MspInit+0x84>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d12b      	bne.n	8002efe <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	613b      	str	r3, [r7, #16]
 8002eaa:	4b18      	ldr	r3, [pc, #96]	; (8002f0c <HAL_SPI_MspInit+0x88>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eae:	4a17      	ldr	r2, [pc, #92]	; (8002f0c <HAL_SPI_MspInit+0x88>)
 8002eb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002eb4:	6453      	str	r3, [r2, #68]	; 0x44
 8002eb6:	4b15      	ldr	r3, [pc, #84]	; (8002f0c <HAL_SPI_MspInit+0x88>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_SPI_MspInit+0x88>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a10      	ldr	r2, [pc, #64]	; (8002f0c <HAL_SPI_MspInit+0x88>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b0e      	ldr	r3, [pc, #56]	; (8002f0c <HAL_SPI_MspInit+0x88>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	60fb      	str	r3, [r7, #12]
 8002edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002ede:	23e0      	movs	r3, #224	; 0xe0
 8002ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eea:	2300      	movs	r3, #0
 8002eec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002eee:	2305      	movs	r3, #5
 8002ef0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ef2:	f107 0314 	add.w	r3, r7, #20
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4805      	ldr	r0, [pc, #20]	; (8002f10 <HAL_SPI_MspInit+0x8c>)
 8002efa:	f001 fbd7 	bl	80046ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002efe:	bf00      	nop
 8002f00:	3728      	adds	r7, #40	; 0x28
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40013000 	.word	0x40013000
 8002f0c:	40023800 	.word	0x40023800
 8002f10:	40020000 	.word	0x40020000

08002f14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a40      	ldr	r2, [pc, #256]	; (8003024 <HAL_TIM_Base_MspInit+0x110>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d13e      	bne.n	8002fa4 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	; (8003028 <HAL_TIM_Base_MspInit+0x114>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a3e      	ldr	r2, [pc, #248]	; (8003028 <HAL_TIM_Base_MspInit+0x114>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b3c      	ldr	r3, [pc, #240]	; (8003028 <HAL_TIM_Base_MspInit+0x114>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f003 0301 	and.w	r3, r3, #1
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8002f42:	4b3a      	ldr	r3, [pc, #232]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f44:	4a3a      	ldr	r2, [pc, #232]	; (8003030 <HAL_TIM_Base_MspInit+0x11c>)
 8002f46:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8002f48:	4b38      	ldr	r3, [pc, #224]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f4a:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8002f4e:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f50:	4b36      	ldr	r3, [pc, #216]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f56:	4b35      	ldr	r3, [pc, #212]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f5c:	4b33      	ldr	r3, [pc, #204]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f62:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f64:	4b31      	ldr	r3, [pc, #196]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f6a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f6c:	4b2f      	ldr	r3, [pc, #188]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f72:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8002f74:	4b2d      	ldr	r3, [pc, #180]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002f7a:	4b2c      	ldr	r3, [pc, #176]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f80:	4b2a      	ldr	r3, [pc, #168]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8002f86:	4829      	ldr	r0, [pc, #164]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f88:	f000 fd90 	bl	8003aac <HAL_DMA_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d001      	beq.n	8002f96 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002f92:	f7fe fd3b 	bl	8001a0c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a24      	ldr	r2, [pc, #144]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f9a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f9c:	4a23      	ldr	r2, [pc, #140]	; (800302c <HAL_TIM_Base_MspInit+0x118>)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002fa2:	e03a      	b.n	800301a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fac:	d10e      	bne.n	8002fcc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_TIM_Base_MspInit+0x114>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <HAL_TIM_Base_MspInit+0x114>)
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbe:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <HAL_TIM_Base_MspInit+0x114>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]
}
 8002fca:	e026      	b.n	800301a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a18      	ldr	r2, [pc, #96]	; (8003034 <HAL_TIM_Base_MspInit+0x120>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d10e      	bne.n	8002ff4 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <HAL_TIM_Base_MspInit+0x114>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a12      	ldr	r2, [pc, #72]	; (8003028 <HAL_TIM_Base_MspInit+0x114>)
 8002fe0:	f043 0302 	orr.w	r3, r3, #2
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe6:	4b10      	ldr	r3, [pc, #64]	; (8003028 <HAL_TIM_Base_MspInit+0x114>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	60fb      	str	r3, [r7, #12]
 8002ff0:	68fb      	ldr	r3, [r7, #12]
}
 8002ff2:	e012      	b.n	800301a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_TIM_Base_MspInit+0x124>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d10d      	bne.n	800301a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ffe:	2300      	movs	r3, #0
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	4b09      	ldr	r3, [pc, #36]	; (8003028 <HAL_TIM_Base_MspInit+0x114>)
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	4a08      	ldr	r2, [pc, #32]	; (8003028 <HAL_TIM_Base_MspInit+0x114>)
 8003008:	f043 0308 	orr.w	r3, r3, #8
 800300c:	6413      	str	r3, [r2, #64]	; 0x40
 800300e:	4b06      	ldr	r3, [pc, #24]	; (8003028 <HAL_TIM_Base_MspInit+0x114>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40010000 	.word	0x40010000
 8003028:	40023800 	.word	0x40023800
 800302c:	200013a4 	.word	0x200013a4
 8003030:	40026428 	.word	0x40026428
 8003034:	40000400 	.word	0x40000400
 8003038:	40000c00 	.word	0x40000c00

0800303c <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a0b      	ldr	r2, [pc, #44]	; (8003078 <HAL_TIM_OnePulse_MspInit+0x3c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10d      	bne.n	800306a <HAL_TIM_OnePulse_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	4b0a      	ldr	r3, [pc, #40]	; (800307c <HAL_TIM_OnePulse_MspInit+0x40>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	4a09      	ldr	r2, [pc, #36]	; (800307c <HAL_TIM_OnePulse_MspInit+0x40>)
 8003058:	f043 0302 	orr.w	r3, r3, #2
 800305c:	6453      	str	r3, [r2, #68]	; 0x44
 800305e:	4b07      	ldr	r3, [pc, #28]	; (800307c <HAL_TIM_OnePulse_MspInit+0x40>)
 8003060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003062:	f003 0302 	and.w	r3, r3, #2
 8003066:	60fb      	str	r3, [r7, #12]
 8003068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	40010400 	.word	0x40010400
 800307c:	40023800 	.word	0x40023800

08003080 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08a      	sub	sp, #40	; 0x28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003088:	f107 0314 	add.w	r3, r7, #20
 800308c:	2200      	movs	r2, #0
 800308e:	601a      	str	r2, [r3, #0]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	60da      	str	r2, [r3, #12]
 8003096:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a24      	ldr	r2, [pc, #144]	; (8003130 <HAL_TIM_MspPostInit+0xb0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d11f      	bne.n	80030e2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	4b23      	ldr	r3, [pc, #140]	; (8003134 <HAL_TIM_MspPostInit+0xb4>)
 80030a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030aa:	4a22      	ldr	r2, [pc, #136]	; (8003134 <HAL_TIM_MspPostInit+0xb4>)
 80030ac:	f043 0310 	orr.w	r3, r3, #16
 80030b0:	6313      	str	r3, [r2, #48]	; 0x30
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <HAL_TIM_MspPostInit+0xb4>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80030be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c4:	2302      	movs	r3, #2
 80030c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030c8:	2301      	movs	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030cc:	2303      	movs	r3, #3
 80030ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80030d0:	2301      	movs	r3, #1
 80030d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80030d4:	f107 0314 	add.w	r3, r7, #20
 80030d8:	4619      	mov	r1, r3
 80030da:	4817      	ldr	r0, [pc, #92]	; (8003138 <HAL_TIM_MspPostInit+0xb8>)
 80030dc:	f001 fae6 	bl	80046ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80030e0:	e022      	b.n	8003128 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a15      	ldr	r2, [pc, #84]	; (800313c <HAL_TIM_MspPostInit+0xbc>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d11d      	bne.n	8003128 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ec:	2300      	movs	r3, #0
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	4b10      	ldr	r3, [pc, #64]	; (8003134 <HAL_TIM_MspPostInit+0xb4>)
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	4a0f      	ldr	r2, [pc, #60]	; (8003134 <HAL_TIM_MspPostInit+0xb4>)
 80030f6:	f043 0304 	orr.w	r3, r3, #4
 80030fa:	6313      	str	r3, [r2, #48]	; 0x30
 80030fc:	4b0d      	ldr	r3, [pc, #52]	; (8003134 <HAL_TIM_MspPostInit+0xb4>)
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003108:	2340      	movs	r3, #64	; 0x40
 800310a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310c:	2302      	movs	r3, #2
 800310e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003110:	2301      	movs	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003114:	2300      	movs	r3, #0
 8003116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003118:	2302      	movs	r3, #2
 800311a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	4619      	mov	r1, r3
 8003122:	4807      	ldr	r0, [pc, #28]	; (8003140 <HAL_TIM_MspPostInit+0xc0>)
 8003124:	f001 fac2 	bl	80046ac <HAL_GPIO_Init>
}
 8003128:	bf00      	nop
 800312a:	3728      	adds	r7, #40	; 0x28
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40010000 	.word	0x40010000
 8003134:	40023800 	.word	0x40023800
 8003138:	40021000 	.word	0x40021000
 800313c:	40000400 	.word	0x40000400
 8003140:	40020800 	.word	0x40020800

08003144 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	; 0x28
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	2200      	movs	r2, #0
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	60da      	str	r2, [r3, #12]
 800315a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a4b      	ldr	r2, [pc, #300]	; (8003290 <HAL_UART_MspInit+0x14c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	f040 8090 	bne.w	8003288 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003168:	2300      	movs	r3, #0
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	4b49      	ldr	r3, [pc, #292]	; (8003294 <HAL_UART_MspInit+0x150>)
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	4a48      	ldr	r2, [pc, #288]	; (8003294 <HAL_UART_MspInit+0x150>)
 8003172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003176:	6413      	str	r3, [r2, #64]	; 0x40
 8003178:	4b46      	ldr	r3, [pc, #280]	; (8003294 <HAL_UART_MspInit+0x150>)
 800317a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003184:	2300      	movs	r3, #0
 8003186:	60fb      	str	r3, [r7, #12]
 8003188:	4b42      	ldr	r3, [pc, #264]	; (8003294 <HAL_UART_MspInit+0x150>)
 800318a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318c:	4a41      	ldr	r2, [pc, #260]	; (8003294 <HAL_UART_MspInit+0x150>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	6313      	str	r3, [r2, #48]	; 0x30
 8003194:	4b3f      	ldr	r3, [pc, #252]	; (8003294 <HAL_UART_MspInit+0x150>)
 8003196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80031a0:	230c      	movs	r3, #12
 80031a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a4:	2302      	movs	r3, #2
 80031a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031a8:	2301      	movs	r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ac:	2303      	movs	r3, #3
 80031ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031b0:	2307      	movs	r3, #7
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	4619      	mov	r1, r3
 80031ba:	4837      	ldr	r0, [pc, #220]	; (8003298 <HAL_UART_MspInit+0x154>)
 80031bc:	f001 fa76 	bl	80046ac <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80031c0:	4b36      	ldr	r3, [pc, #216]	; (800329c <HAL_UART_MspInit+0x158>)
 80031c2:	4a37      	ldr	r2, [pc, #220]	; (80032a0 <HAL_UART_MspInit+0x15c>)
 80031c4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80031c6:	4b35      	ldr	r3, [pc, #212]	; (800329c <HAL_UART_MspInit+0x158>)
 80031c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80031cc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80031ce:	4b33      	ldr	r3, [pc, #204]	; (800329c <HAL_UART_MspInit+0x158>)
 80031d0:	2240      	movs	r2, #64	; 0x40
 80031d2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80031d4:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_UART_MspInit+0x158>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80031da:	4b30      	ldr	r3, [pc, #192]	; (800329c <HAL_UART_MspInit+0x158>)
 80031dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031e0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80031e2:	4b2e      	ldr	r3, [pc, #184]	; (800329c <HAL_UART_MspInit+0x158>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80031e8:	4b2c      	ldr	r3, [pc, #176]	; (800329c <HAL_UART_MspInit+0x158>)
 80031ea:	2200      	movs	r2, #0
 80031ec:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80031ee:	4b2b      	ldr	r3, [pc, #172]	; (800329c <HAL_UART_MspInit+0x158>)
 80031f0:	2200      	movs	r2, #0
 80031f2:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80031f4:	4b29      	ldr	r3, [pc, #164]	; (800329c <HAL_UART_MspInit+0x158>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031fa:	4b28      	ldr	r3, [pc, #160]	; (800329c <HAL_UART_MspInit+0x158>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003200:	4826      	ldr	r0, [pc, #152]	; (800329c <HAL_UART_MspInit+0x158>)
 8003202:	f000 fc53 	bl	8003aac <HAL_DMA_Init>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800320c:	f7fe fbfe 	bl	8001a0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a22      	ldr	r2, [pc, #136]	; (800329c <HAL_UART_MspInit+0x158>)
 8003214:	635a      	str	r2, [r3, #52]	; 0x34
 8003216:	4a21      	ldr	r2, [pc, #132]	; (800329c <HAL_UART_MspInit+0x158>)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800321c:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <HAL_UART_MspInit+0x160>)
 800321e:	4a22      	ldr	r2, [pc, #136]	; (80032a8 <HAL_UART_MspInit+0x164>)
 8003220:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003222:	4b20      	ldr	r3, [pc, #128]	; (80032a4 <HAL_UART_MspInit+0x160>)
 8003224:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003228:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800322a:	4b1e      	ldr	r3, [pc, #120]	; (80032a4 <HAL_UART_MspInit+0x160>)
 800322c:	2200      	movs	r2, #0
 800322e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003230:	4b1c      	ldr	r3, [pc, #112]	; (80032a4 <HAL_UART_MspInit+0x160>)
 8003232:	2200      	movs	r2, #0
 8003234:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003236:	4b1b      	ldr	r3, [pc, #108]	; (80032a4 <HAL_UART_MspInit+0x160>)
 8003238:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800323c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800323e:	4b19      	ldr	r3, [pc, #100]	; (80032a4 <HAL_UART_MspInit+0x160>)
 8003240:	2200      	movs	r2, #0
 8003242:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003244:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <HAL_UART_MspInit+0x160>)
 8003246:	2200      	movs	r2, #0
 8003248:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800324a:	4b16      	ldr	r3, [pc, #88]	; (80032a4 <HAL_UART_MspInit+0x160>)
 800324c:	2200      	movs	r2, #0
 800324e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003250:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <HAL_UART_MspInit+0x160>)
 8003252:	2200      	movs	r2, #0
 8003254:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003256:	4b13      	ldr	r3, [pc, #76]	; (80032a4 <HAL_UART_MspInit+0x160>)
 8003258:	2200      	movs	r2, #0
 800325a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800325c:	4811      	ldr	r0, [pc, #68]	; (80032a4 <HAL_UART_MspInit+0x160>)
 800325e:	f000 fc25 	bl	8003aac <HAL_DMA_Init>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d001      	beq.n	800326c <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8003268:	f7fe fbd0 	bl	8001a0c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a0d      	ldr	r2, [pc, #52]	; (80032a4 <HAL_UART_MspInit+0x160>)
 8003270:	639a      	str	r2, [r3, #56]	; 0x38
 8003272:	4a0c      	ldr	r2, [pc, #48]	; (80032a4 <HAL_UART_MspInit+0x160>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003278:	2200      	movs	r2, #0
 800327a:	2100      	movs	r1, #0
 800327c:	2026      	movs	r0, #38	; 0x26
 800327e:	f000 fbde 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003282:	2026      	movs	r0, #38	; 0x26
 8003284:	f000 fbf7 	bl	8003a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003288:	bf00      	nop
 800328a:	3728      	adds	r7, #40	; 0x28
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40004400 	.word	0x40004400
 8003294:	40023800 	.word	0x40023800
 8003298:	40020000 	.word	0x40020000
 800329c:	20001448 	.word	0x20001448
 80032a0:	400260a0 	.word	0x400260a0
 80032a4:	200014a8 	.word	0x200014a8
 80032a8:	40026088 	.word	0x40026088

080032ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032b0:	e7fe      	b.n	80032b0 <NMI_Handler+0x4>

080032b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032b6:	e7fe      	b.n	80032b6 <HardFault_Handler+0x4>

080032b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032bc:	e7fe      	b.n	80032bc <MemManage_Handler+0x4>

080032be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032be:	b480      	push	{r7}
 80032c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032c2:	e7fe      	b.n	80032c2 <BusFault_Handler+0x4>

080032c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032c4:	b480      	push	{r7}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032c8:	e7fe      	b.n	80032c8 <UsageFault_Handler+0x4>

080032ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032ca:	b480      	push	{r7}
 80032cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80032ce:	bf00      	nop
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032e6:	b480      	push	{r7}
 80032e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr

080032f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f8:	f000 fa82 	bl	8003800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032fc:	bf00      	nop
 80032fe:	bd80      	pop	{r7, pc}

08003300 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003304:	4802      	ldr	r0, [pc, #8]	; (8003310 <DMA1_Stream5_IRQHandler+0x10>)
 8003306:	f000 fd69 	bl	8003ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	200014a8 	.word	0x200014a8

08003314 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003318:	4802      	ldr	r0, [pc, #8]	; (8003324 <DMA1_Stream6_IRQHandler+0x10>)
 800331a:	f000 fd5f 	bl	8003ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800331e:	bf00      	nop
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20001448 	.word	0x20001448

08003328 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800332c:	4802      	ldr	r0, [pc, #8]	; (8003338 <USART2_IRQHandler+0x10>)
 800332e:	f004 ff95 	bl	800825c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003332:	bf00      	nop
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20001404 	.word	0x20001404

0800333c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8003340:	4802      	ldr	r0, [pc, #8]	; (800334c <DMA2_Stream1_IRQHandler+0x10>)
 8003342:	f000 fd4b 	bl	8003ddc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003346:	bf00      	nop
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	200013a4 	.word	0x200013a4

08003350 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003354:	4802      	ldr	r0, [pc, #8]	; (8003360 <OTG_FS_IRQHandler+0x10>)
 8003356:	f001 fe25 	bl	8004fa4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	200057ec 	.word	0x200057ec

08003364 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	e00a      	b.n	800338c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003376:	f3af 8000 	nop.w
 800337a:	4601      	mov	r1, r0
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	60ba      	str	r2, [r7, #8]
 8003382:	b2ca      	uxtb	r2, r1
 8003384:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	3301      	adds	r3, #1
 800338a:	617b      	str	r3, [r7, #20]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	429a      	cmp	r2, r3
 8003392:	dbf0      	blt.n	8003376 <_read+0x12>
  }

  return len;
 8003394:	687b      	ldr	r3, [r7, #4]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <_close>:
  }
  return len;
}

int _close(int file)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80033a6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr

080033b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
 80033be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033c6:	605a      	str	r2, [r3, #4]
  return 0;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr

080033d6 <_isatty>:

int _isatty(int file)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80033de:	2301      	movs	r3, #1
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003410:	4a14      	ldr	r2, [pc, #80]	; (8003464 <_sbrk+0x5c>)
 8003412:	4b15      	ldr	r3, [pc, #84]	; (8003468 <_sbrk+0x60>)
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800341c:	4b13      	ldr	r3, [pc, #76]	; (800346c <_sbrk+0x64>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d102      	bne.n	800342a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003424:	4b11      	ldr	r3, [pc, #68]	; (800346c <_sbrk+0x64>)
 8003426:	4a12      	ldr	r2, [pc, #72]	; (8003470 <_sbrk+0x68>)
 8003428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800342a:	4b10      	ldr	r3, [pc, #64]	; (800346c <_sbrk+0x64>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4413      	add	r3, r2
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	429a      	cmp	r2, r3
 8003436:	d207      	bcs.n	8003448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003438:	f00a f938 	bl	800d6ac <__errno>
 800343c:	4603      	mov	r3, r0
 800343e:	220c      	movs	r2, #12
 8003440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003442:	f04f 33ff 	mov.w	r3, #4294967295
 8003446:	e009      	b.n	800345c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003448:	4b08      	ldr	r3, [pc, #32]	; (800346c <_sbrk+0x64>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800344e:	4b07      	ldr	r3, [pc, #28]	; (800346c <_sbrk+0x64>)
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4413      	add	r3, r2
 8003456:	4a05      	ldr	r2, [pc, #20]	; (800346c <_sbrk+0x64>)
 8003458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800345a:	68fb      	ldr	r3, [r7, #12]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3718      	adds	r7, #24
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	20020000 	.word	0x20020000
 8003468:	00008000 	.word	0x00008000
 800346c:	20002948 	.word	0x20002948
 8003470:	20005f28 	.word	0x20005f28

08003474 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <SystemInit+0x20>)
 800347a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347e:	4a05      	ldr	r2, [pc, #20]	; (8003494 <SystemInit+0x20>)
 8003480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003488:	bf00      	nop
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <HAL_UART_TxCpltCallback>:
void uart_dma_stop(void);

_uart_frame tx[10];
static uint8_t tc=0,ti=0,to=0;
uint32_t uart_tc =0,uart_itc =0;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
	uart_itc++;
 80034a0:	4b1d      	ldr	r3, [pc, #116]	; (8003518 <HAL_UART_TxCpltCallback+0x80>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3301      	adds	r3, #1
 80034a6:	4a1c      	ldr	r2, [pc, #112]	; (8003518 <HAL_UART_TxCpltCallback+0x80>)
 80034a8:	6013      	str	r3, [r2, #0]
	if(tc)
 80034aa:	4b1c      	ldr	r3, [pc, #112]	; (800351c <HAL_UART_TxCpltCallback+0x84>)
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d02d      	beq.n	800350e <HAL_UART_TxCpltCallback+0x76>
	{
		if(HAL_UART_Transmit_DMA(&huart2, tx[to].data, tx[to].size) == HAL_OK){
 80034b2:	4b1b      	ldr	r3, [pc, #108]	; (8003520 <HAL_UART_TxCpltCallback+0x88>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	f240 235a 	movw	r3, #602	; 0x25a
 80034bc:	fb02 f303 	mul.w	r3, r2, r3
 80034c0:	4a18      	ldr	r2, [pc, #96]	; (8003524 <HAL_UART_TxCpltCallback+0x8c>)
 80034c2:	4413      	add	r3, r2
 80034c4:	1c99      	adds	r1, r3, #2
 80034c6:	4b16      	ldr	r3, [pc, #88]	; (8003520 <HAL_UART_TxCpltCallback+0x88>)
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	4a15      	ldr	r2, [pc, #84]	; (8003524 <HAL_UART_TxCpltCallback+0x8c>)
 80034ce:	f240 235a 	movw	r3, #602	; 0x25a
 80034d2:	fb00 f303 	mul.w	r3, r0, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	4812      	ldr	r0, [pc, #72]	; (8003528 <HAL_UART_TxCpltCallback+0x90>)
 80034de:	f004 fd8f 	bl	8008000 <HAL_UART_Transmit_DMA>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d112      	bne.n	800350e <HAL_UART_TxCpltCallback+0x76>
				to++;
 80034e8:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <HAL_UART_TxCpltCallback+0x88>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	3301      	adds	r3, #1
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	4b0b      	ldr	r3, [pc, #44]	; (8003520 <HAL_UART_TxCpltCallback+0x88>)
 80034f2:	701a      	strb	r2, [r3, #0]
				tc--;
 80034f4:	4b09      	ldr	r3, [pc, #36]	; (800351c <HAL_UART_TxCpltCallback+0x84>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	3b01      	subs	r3, #1
 80034fa:	b2da      	uxtb	r2, r3
 80034fc:	4b07      	ldr	r3, [pc, #28]	; (800351c <HAL_UART_TxCpltCallback+0x84>)
 80034fe:	701a      	strb	r2, [r3, #0]
				if(to ==TX_SIZE)
 8003500:	4b07      	ldr	r3, [pc, #28]	; (8003520 <HAL_UART_TxCpltCallback+0x88>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b0a      	cmp	r3, #10
 8003506:	d102      	bne.n	800350e <HAL_UART_TxCpltCallback+0x76>
					to = 0;
 8003508:	4b05      	ldr	r3, [pc, #20]	; (8003520 <HAL_UART_TxCpltCallback+0x88>)
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800350e:	bf00      	nop
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200042e4 	.word	0x200042e4
 800351c:	200042dc 	.word	0x200042dc
 8003520:	200042de 	.word	0x200042de
 8003524:	20002b58 	.word	0x20002b58
 8003528:	20001404 	.word	0x20001404

0800352c <uart_transmit>:
void uart_transmit(uint8_t *data,uint8_t size)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	70fb      	strb	r3, [r7, #3]
	uart_tc++;
 8003538:	4b32      	ldr	r3, [pc, #200]	; (8003604 <uart_transmit+0xd8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	3301      	adds	r3, #1
 800353e:	4a31      	ldr	r2, [pc, #196]	; (8003604 <uart_transmit+0xd8>)
 8003540:	6013      	str	r3, [r2, #0]
	tx[ti].size = size;
 8003542:	4b31      	ldr	r3, [pc, #196]	; (8003608 <uart_transmit+0xdc>)
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	b299      	uxth	r1, r3
 800354c:	4a2f      	ldr	r2, [pc, #188]	; (800360c <uart_transmit+0xe0>)
 800354e:	f240 235a 	movw	r3, #602	; 0x25a
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	4413      	add	r3, r2
 8003558:	460a      	mov	r2, r1
 800355a:	801a      	strh	r2, [r3, #0]
	memcpy(tx[ti].data,data,size);
 800355c:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <uart_transmit+0xdc>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	461a      	mov	r2, r3
 8003562:	f240 235a 	movw	r3, #602	; 0x25a
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	4a28      	ldr	r2, [pc, #160]	; (800360c <uart_transmit+0xe0>)
 800356c:	4413      	add	r3, r2
 800356e:	3302      	adds	r3, #2
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4618      	mov	r0, r3
 8003576:	f00a f8d3 	bl	800d720 <memcpy>
	ti++;
 800357a:	4b23      	ldr	r3, [pc, #140]	; (8003608 <uart_transmit+0xdc>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	b2da      	uxtb	r2, r3
 8003582:	4b21      	ldr	r3, [pc, #132]	; (8003608 <uart_transmit+0xdc>)
 8003584:	701a      	strb	r2, [r3, #0]
	if(ti ==TX_SIZE)
 8003586:	4b20      	ldr	r3, [pc, #128]	; (8003608 <uart_transmit+0xdc>)
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b0a      	cmp	r3, #10
 800358c:	d102      	bne.n	8003594 <uart_transmit+0x68>
		ti = 0;
 800358e:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <uart_transmit+0xdc>)
 8003590:	2200      	movs	r2, #0
 8003592:	701a      	strb	r2, [r3, #0]
	tc++;
 8003594:	4b1e      	ldr	r3, [pc, #120]	; (8003610 <uart_transmit+0xe4>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	3301      	adds	r3, #1
 800359a:	b2da      	uxtb	r2, r3
 800359c:	4b1c      	ldr	r3, [pc, #112]	; (8003610 <uart_transmit+0xe4>)
 800359e:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(&huart2, tx[to].data, tx[to].size) == HAL_OK){
 80035a0:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <uart_transmit+0xe8>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	461a      	mov	r2, r3
 80035a6:	f240 235a 	movw	r3, #602	; 0x25a
 80035aa:	fb02 f303 	mul.w	r3, r2, r3
 80035ae:	4a17      	ldr	r2, [pc, #92]	; (800360c <uart_transmit+0xe0>)
 80035b0:	4413      	add	r3, r2
 80035b2:	1c99      	adds	r1, r3, #2
 80035b4:	4b17      	ldr	r3, [pc, #92]	; (8003614 <uart_transmit+0xe8>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	4a14      	ldr	r2, [pc, #80]	; (800360c <uart_transmit+0xe0>)
 80035bc:	f240 235a 	movw	r3, #602	; 0x25a
 80035c0:	fb00 f303 	mul.w	r3, r0, r3
 80035c4:	4413      	add	r3, r2
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	461a      	mov	r2, r3
 80035ca:	4813      	ldr	r0, [pc, #76]	; (8003618 <uart_transmit+0xec>)
 80035cc:	f004 fd18 	bl	8008000 <HAL_UART_Transmit_DMA>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d112      	bne.n	80035fc <uart_transmit+0xd0>
		to++;
 80035d6:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <uart_transmit+0xe8>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	3301      	adds	r3, #1
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	4b0d      	ldr	r3, [pc, #52]	; (8003614 <uart_transmit+0xe8>)
 80035e0:	701a      	strb	r2, [r3, #0]
		tc--;
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <uart_transmit+0xe4>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b2da      	uxtb	r2, r3
 80035ea:	4b09      	ldr	r3, [pc, #36]	; (8003610 <uart_transmit+0xe4>)
 80035ec:	701a      	strb	r2, [r3, #0]
		if(to ==TX_SIZE)
 80035ee:	4b09      	ldr	r3, [pc, #36]	; (8003614 <uart_transmit+0xe8>)
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b0a      	cmp	r3, #10
 80035f4:	d102      	bne.n	80035fc <uart_transmit+0xd0>
			to = 0;
 80035f6:	4b07      	ldr	r3, [pc, #28]	; (8003614 <uart_transmit+0xe8>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	701a      	strb	r2, [r3, #0]

	}
}
 80035fc:	bf00      	nop
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	200042e0 	.word	0x200042e0
 8003608:	200042dd 	.word	0x200042dd
 800360c:	20002b58 	.word	0x20002b58
 8003610:	200042dc 	.word	0x200042dc
 8003614:	200042de 	.word	0x200042de
 8003618:	20001404 	.word	0x20001404

0800361c <uart_dma_start>:


void uart_dma_start(void){
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, uart_rxbuf, UART_BUF_SIZE);
 8003620:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003624:	4902      	ldr	r1, [pc, #8]	; (8003630 <uart_dma_start+0x14>)
 8003626:	4803      	ldr	r0, [pc, #12]	; (8003634 <uart_dma_start+0x18>)
 8003628:	f004 fd68 	bl	80080fc <HAL_UART_Receive_DMA>
}
 800362c:	bf00      	nop
 800362e:	bd80      	pop	{r7, pc}
 8003630:	2000294c 	.word	0x2000294c
 8003634:	20001404 	.word	0x20001404

08003638 <uart_dma_stop>:

void uart_dma_stop(void){
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart2);			//stop DMA
 800363c:	4802      	ldr	r0, [pc, #8]	; (8003648 <uart_dma_stop+0x10>)
 800363e:	f004 fd8d 	bl	800815c <HAL_UART_DMAStop>
}
 8003642:	bf00      	nop
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20001404 	.word	0x20001404

0800364c <uart_process>:

__weak int dw_process_rx_buffer(uint8_t *data,uint16_t size){
	return 0;
}

void uart_process(void){
 800364c:	b580      	push	{r7, lr}
 800364e:	af00      	add	r7, sp, #0
	if(huart2.hdmarx->Instance->NDTR != UART_BUF_SIZE) {
 8003650:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <uart_process+0x80>)
 8003652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800365c:	d034      	beq.n	80036c8 <uart_process+0x7c>
	  if(huart2.hdmarx->Instance->NDTR != UART_Rx_recved) {
 800365e:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <uart_process+0x80>)
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	4a1a      	ldr	r2, [pc, #104]	; (80036d0 <uart_process+0x84>)
 8003668:	8812      	ldrh	r2, [r2, #0]
 800366a:	4293      	cmp	r3, r2
 800366c:	d00d      	beq.n	800368a <uart_process+0x3e>
		  UART_Rx_recved = huart2.hdmarx->Instance->NDTR;
 800366e:	4b17      	ldr	r3, [pc, #92]	; (80036cc <uart_process+0x80>)
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	b29a      	uxth	r2, r3
 8003678:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <uart_process+0x84>)
 800367a:	801a      	strh	r2, [r3, #0]
		  UART_Rx_Time = HAL_GetTick() + 2;
 800367c:	f000 f8d4 	bl	8003828 <HAL_GetTick>
 8003680:	4603      	mov	r3, r0
 8003682:	3302      	adds	r3, #2
 8003684:	4a13      	ldr	r2, [pc, #76]	; (80036d4 <uart_process+0x88>)
 8003686:	6013      	str	r3, [r2, #0]
			  uart_dma_start();
//			  process_data_rx_uart();
		  }
	  }
	}
}
 8003688:	e01e      	b.n	80036c8 <uart_process+0x7c>
		  if(HAL_GetTick()> UART_Rx_Time)  // timeoutframe
 800368a:	f000 f8cd 	bl	8003828 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	4b10      	ldr	r3, [pc, #64]	; (80036d4 <uart_process+0x88>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d917      	bls.n	80036c8 <uart_process+0x7c>
			  uart_dma_stop();
 8003698:	f7ff ffce 	bl	8003638 <uart_dma_stop>
			  uart_rx_cnt++;
 800369c:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <uart_process+0x8c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	3301      	adds	r3, #1
 80036a2:	4a0d      	ldr	r2, [pc, #52]	; (80036d8 <uart_process+0x8c>)
 80036a4:	6013      	str	r3, [r2, #0]
			  UART_Rx_recved =0;
 80036a6:	4b0a      	ldr	r3, [pc, #40]	; (80036d0 <uart_process+0x84>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	801a      	strh	r2, [r3, #0]
			  dw_process_rx_buffer(uart_rxbuf, UART_BUF_SIZE - huart2.hdmarx->Instance->NDTR);
 80036ac:	4b07      	ldr	r3, [pc, #28]	; (80036cc <uart_process+0x80>)
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	4619      	mov	r1, r3
 80036be:	4807      	ldr	r0, [pc, #28]	; (80036dc <uart_process+0x90>)
 80036c0:	f7fd fa34 	bl	8000b2c <dw_process_rx_buffer>
			  uart_dma_start();
 80036c4:	f7ff ffaa 	bl	800361c <uart_dma_start>
}
 80036c8:	bf00      	nop
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	20001404 	.word	0x20001404
 80036d0:	20002b4c 	.word	0x20002b4c
 80036d4:	20002b50 	.word	0x20002b50
 80036d8:	20002b54 	.word	0x20002b54
 80036dc:	2000294c 	.word	0x2000294c

080036e0 <uart_transmit_block>:

HAL_StatusTypeDef uart_transmit_block(uint8_t *data,uint16_t size,uint16_t timeout){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	460b      	mov	r3, r1
 80036ea:	807b      	strh	r3, [r7, #2]
 80036ec:	4613      	mov	r3, r2
 80036ee:	803b      	strh	r3, [r7, #0]
	//return HAL_UART_Transmit(&huart2, data, size, timeout);
	uart_transmit(data,size);
 80036f0:	887b      	ldrh	r3, [r7, #2]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	4619      	mov	r1, r3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ff18 	bl	800352c <uart_transmit>
	return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003740 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800370c:	480d      	ldr	r0, [pc, #52]	; (8003744 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800370e:	490e      	ldr	r1, [pc, #56]	; (8003748 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003710:	4a0e      	ldr	r2, [pc, #56]	; (800374c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003712:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003714:	e002      	b.n	800371c <LoopCopyDataInit>

08003716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800371a:	3304      	adds	r3, #4

0800371c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800371c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800371e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003720:	d3f9      	bcc.n	8003716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003722:	4a0b      	ldr	r2, [pc, #44]	; (8003750 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003724:	4c0b      	ldr	r4, [pc, #44]	; (8003754 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003728:	e001      	b.n	800372e <LoopFillZerobss>

0800372a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800372a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800372c:	3204      	adds	r2, #4

0800372e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800372e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003730:	d3fb      	bcc.n	800372a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003732:	f7ff fe9f 	bl	8003474 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003736:	f009 ffbf 	bl	800d6b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800373a:	f7fd fc59 	bl	8000ff0 <main>
  bx  lr    
 800373e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003740:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003744:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003748:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 800374c:	08010104 	.word	0x08010104
  ldr r2, =_sbss
 8003750:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8003754:	20005f28 	.word	0x20005f28

08003758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003758:	e7fe      	b.n	8003758 <ADC_IRQHandler>
	...

0800375c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003760:	4b0e      	ldr	r3, [pc, #56]	; (800379c <HAL_Init+0x40>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a0d      	ldr	r2, [pc, #52]	; (800379c <HAL_Init+0x40>)
 8003766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800376a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800376c:	4b0b      	ldr	r3, [pc, #44]	; (800379c <HAL_Init+0x40>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a0a      	ldr	r2, [pc, #40]	; (800379c <HAL_Init+0x40>)
 8003772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003778:	4b08      	ldr	r3, [pc, #32]	; (800379c <HAL_Init+0x40>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a07      	ldr	r2, [pc, #28]	; (800379c <HAL_Init+0x40>)
 800377e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003784:	2003      	movs	r0, #3
 8003786:	f000 f94f 	bl	8003a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800378a:	2000      	movs	r0, #0
 800378c:	f000 f808 	bl	80037a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003790:	f7ff fb08 	bl	8002da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40023c00 	.word	0x40023c00

080037a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037a8:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_InitTick+0x54>)
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_InitTick+0x58>)
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	4619      	mov	r1, r3
 80037b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80037b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80037ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f967 	bl	8003a92 <HAL_SYSTICK_Config>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d001      	beq.n	80037ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e00e      	b.n	80037ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b0f      	cmp	r3, #15
 80037d2:	d80a      	bhi.n	80037ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037d4:	2200      	movs	r2, #0
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	f04f 30ff 	mov.w	r0, #4294967295
 80037dc:	f000 f92f 	bl	8003a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037e0:	4a06      	ldr	r2, [pc, #24]	; (80037fc <HAL_InitTick+0x5c>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
 80037e8:	e000      	b.n	80037ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000000 	.word	0x20000000
 80037f8:	20000008 	.word	0x20000008
 80037fc:	20000004 	.word	0x20000004

08003800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003800:	b480      	push	{r7}
 8003802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <HAL_IncTick+0x20>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	461a      	mov	r2, r3
 800380a:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_IncTick+0x24>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4413      	add	r3, r2
 8003810:	4a04      	ldr	r2, [pc, #16]	; (8003824 <HAL_IncTick+0x24>)
 8003812:	6013      	str	r3, [r2, #0]
}
 8003814:	bf00      	nop
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000008 	.word	0x20000008
 8003824:	200042e8 	.word	0x200042e8

08003828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return uwTick;
 800382c:	4b03      	ldr	r3, [pc, #12]	; (800383c <HAL_GetTick+0x14>)
 800382e:	681b      	ldr	r3, [r3, #0]
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	200042e8 	.word	0x200042e8

08003840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003848:	f7ff ffee 	bl	8003828 <HAL_GetTick>
 800384c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003858:	d005      	beq.n	8003866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800385a:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <HAL_Delay+0x44>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003866:	bf00      	nop
 8003868:	f7ff ffde 	bl	8003828 <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	429a      	cmp	r2, r3
 8003876:	d8f7      	bhi.n	8003868 <HAL_Delay+0x28>
  {
  }
}
 8003878:	bf00      	nop
 800387a:	bf00      	nop
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000008 	.word	0x20000008

08003888 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003898:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <__NVIC_SetPriorityGrouping+0x44>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038a4:	4013      	ands	r3, r2
 80038a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80038b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ba:	4a04      	ldr	r2, [pc, #16]	; (80038cc <__NVIC_SetPriorityGrouping+0x44>)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	60d3      	str	r3, [r2, #12]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	e000ed00 	.word	0xe000ed00

080038d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038d0:	b480      	push	{r7}
 80038d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038d4:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <__NVIC_GetPriorityGrouping+0x18>)
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	0a1b      	lsrs	r3, r3, #8
 80038da:	f003 0307 	and.w	r3, r3, #7
}
 80038de:	4618      	mov	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	4603      	mov	r3, r0
 80038f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	db0b      	blt.n	8003916 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038fe:	79fb      	ldrb	r3, [r7, #7]
 8003900:	f003 021f 	and.w	r2, r3, #31
 8003904:	4907      	ldr	r1, [pc, #28]	; (8003924 <__NVIC_EnableIRQ+0x38>)
 8003906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800390a:	095b      	lsrs	r3, r3, #5
 800390c:	2001      	movs	r0, #1
 800390e:	fa00 f202 	lsl.w	r2, r0, r2
 8003912:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003920:	4770      	bx	lr
 8003922:	bf00      	nop
 8003924:	e000e100 	.word	0xe000e100

08003928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	6039      	str	r1, [r7, #0]
 8003932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003938:	2b00      	cmp	r3, #0
 800393a:	db0a      	blt.n	8003952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	b2da      	uxtb	r2, r3
 8003940:	490c      	ldr	r1, [pc, #48]	; (8003974 <__NVIC_SetPriority+0x4c>)
 8003942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003946:	0112      	lsls	r2, r2, #4
 8003948:	b2d2      	uxtb	r2, r2
 800394a:	440b      	add	r3, r1
 800394c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003950:	e00a      	b.n	8003968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	b2da      	uxtb	r2, r3
 8003956:	4908      	ldr	r1, [pc, #32]	; (8003978 <__NVIC_SetPriority+0x50>)
 8003958:	79fb      	ldrb	r3, [r7, #7]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	3b04      	subs	r3, #4
 8003960:	0112      	lsls	r2, r2, #4
 8003962:	b2d2      	uxtb	r2, r2
 8003964:	440b      	add	r3, r1
 8003966:	761a      	strb	r2, [r3, #24]
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr
 8003974:	e000e100 	.word	0xe000e100
 8003978:	e000ed00 	.word	0xe000ed00

0800397c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800397c:	b480      	push	{r7}
 800397e:	b089      	sub	sp, #36	; 0x24
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 0307 	and.w	r3, r3, #7
 800398e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	f1c3 0307 	rsb	r3, r3, #7
 8003996:	2b04      	cmp	r3, #4
 8003998:	bf28      	it	cs
 800399a:	2304      	movcs	r3, #4
 800399c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3304      	adds	r3, #4
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d902      	bls.n	80039ac <NVIC_EncodePriority+0x30>
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3b03      	subs	r3, #3
 80039aa:	e000      	b.n	80039ae <NVIC_EncodePriority+0x32>
 80039ac:	2300      	movs	r3, #0
 80039ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039b0:	f04f 32ff 	mov.w	r2, #4294967295
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43da      	mvns	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	401a      	ands	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039c4:	f04f 31ff 	mov.w	r1, #4294967295
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	fa01 f303 	lsl.w	r3, r1, r3
 80039ce:	43d9      	mvns	r1, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039d4:	4313      	orrs	r3, r2
         );
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3724      	adds	r7, #36	; 0x24
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr
	...

080039e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f4:	d301      	bcc.n	80039fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039f6:	2301      	movs	r3, #1
 80039f8:	e00f      	b.n	8003a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039fa:	4a0a      	ldr	r2, [pc, #40]	; (8003a24 <SysTick_Config+0x40>)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a02:	210f      	movs	r1, #15
 8003a04:	f04f 30ff 	mov.w	r0, #4294967295
 8003a08:	f7ff ff8e 	bl	8003928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a0c:	4b05      	ldr	r3, [pc, #20]	; (8003a24 <SysTick_Config+0x40>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a12:	4b04      	ldr	r3, [pc, #16]	; (8003a24 <SysTick_Config+0x40>)
 8003a14:	2207      	movs	r2, #7
 8003a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a18:	2300      	movs	r3, #0
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3708      	adds	r7, #8
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
 8003a22:	bf00      	nop
 8003a24:	e000e010 	.word	0xe000e010

08003a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff ff29 	bl	8003888 <__NVIC_SetPriorityGrouping>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b086      	sub	sp, #24
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	4603      	mov	r3, r0
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
 8003a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a50:	f7ff ff3e 	bl	80038d0 <__NVIC_GetPriorityGrouping>
 8003a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	6978      	ldr	r0, [r7, #20]
 8003a5c:	f7ff ff8e 	bl	800397c <NVIC_EncodePriority>
 8003a60:	4602      	mov	r2, r0
 8003a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7ff ff5d 	bl	8003928 <__NVIC_SetPriority>
}
 8003a6e:	bf00      	nop
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}

08003a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a76:	b580      	push	{r7, lr}
 8003a78:	b082      	sub	sp, #8
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f7ff ff31 	bl	80038ec <__NVIC_EnableIRQ>
}
 8003a8a:	bf00      	nop
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b082      	sub	sp, #8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ffa2 	bl	80039e4 <SysTick_Config>
 8003aa0:	4603      	mov	r3, r0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3708      	adds	r7, #8
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
	...

08003aac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ab8:	f7ff feb6 	bl	8003828 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e099      	b.n	8003bfc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2202      	movs	r2, #2
 8003acc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ae8:	e00f      	b.n	8003b0a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003aea:	f7ff fe9d 	bl	8003828 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d908      	bls.n	8003b0a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2203      	movs	r2, #3
 8003b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e078      	b.n	8003bfc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1e8      	bne.n	8003aea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4b38      	ldr	r3, [pc, #224]	; (8003c04 <HAL_DMA_Init+0x158>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685a      	ldr	r2, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b36:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003b42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003b4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	2b04      	cmp	r3, #4
 8003b62:	d107      	bne.n	8003b74 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f023 0307 	bic.w	r3, r3, #7
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d117      	bne.n	8003bce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00e      	beq.n	8003bce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 fb01 	bl	80041b8 <DMA_CheckFifoParam>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2240      	movs	r2, #64	; 0x40
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e016      	b.n	8003bfc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fab8 	bl	800414c <DMA_CalcBaseAndBitshift>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be4:	223f      	movs	r2, #63	; 0x3f
 8003be6:	409a      	lsls	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	f010803f 	.word	0xf010803f

08003c08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b086      	sub	sp, #24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	607a      	str	r2, [r7, #4]
 8003c14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d101      	bne.n	8003c2e <HAL_DMA_Start_IT+0x26>
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	e040      	b.n	8003cb0 <HAL_DMA_Start_IT+0xa8>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d12f      	bne.n	8003ca2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2202      	movs	r2, #2
 8003c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	687a      	ldr	r2, [r7, #4]
 8003c54:	68b9      	ldr	r1, [r7, #8]
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fa4a 	bl	80040f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	223f      	movs	r2, #63	; 0x3f
 8003c62:	409a      	lsls	r2, r3
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f042 0216 	orr.w	r2, r2, #22
 8003c76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f042 0208 	orr.w	r2, r2, #8
 8003c8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e005      	b.n	8003cae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003caa:	2302      	movs	r3, #2
 8003cac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003cae:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cc4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003cc6:	f7ff fdaf 	bl	8003828 <HAL_GetTick>
 8003cca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d008      	beq.n	8003cea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2280      	movs	r2, #128	; 0x80
 8003cdc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e052      	b.n	8003d90 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0216 	bic.w	r2, r2, #22
 8003cf8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695a      	ldr	r2, [r3, #20]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d08:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <HAL_DMA_Abort+0x62>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d007      	beq.n	8003d2a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0208 	bic.w	r2, r2, #8
 8003d28:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0201 	bic.w	r2, r2, #1
 8003d38:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d3a:	e013      	b.n	8003d64 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d3c:	f7ff fd74 	bl	8003828 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b05      	cmp	r3, #5
 8003d48:	d90c      	bls.n	8003d64 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2203      	movs	r2, #3
 8003d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e015      	b.n	8003d90 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1e4      	bne.n	8003d3c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d76:	223f      	movs	r2, #63	; 0x3f
 8003d78:	409a      	lsls	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003da6:	b2db      	uxtb	r3, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d004      	beq.n	8003db6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2280      	movs	r2, #128	; 0x80
 8003db0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e00c      	b.n	8003dd0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2205      	movs	r2, #5
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0201 	bic.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003de8:	4b8e      	ldr	r3, [pc, #568]	; (8004024 <HAL_DMA_IRQHandler+0x248>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a8e      	ldr	r2, [pc, #568]	; (8004028 <HAL_DMA_IRQHandler+0x24c>)
 8003dee:	fba2 2303 	umull	r2, r3, r2, r3
 8003df2:	0a9b      	lsrs	r3, r3, #10
 8003df4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dfa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	2208      	movs	r2, #8
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01a      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0304 	and.w	r3, r3, #4
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d013      	beq.n	8003e48 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0204 	bic.w	r2, r2, #4
 8003e2e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e34:	2208      	movs	r2, #8
 8003e36:	409a      	lsls	r2, r3
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e40:	f043 0201 	orr.w	r2, r3, #1
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	409a      	lsls	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4013      	ands	r3, r2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d012      	beq.n	8003e7e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00b      	beq.n	8003e7e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e76:	f043 0202 	orr.w	r2, r3, #2
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	2204      	movs	r2, #4
 8003e84:	409a      	lsls	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4013      	ands	r3, r2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d012      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00b      	beq.n	8003eb4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ea0:	2204      	movs	r2, #4
 8003ea2:	409a      	lsls	r2, r3
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eac:	f043 0204 	orr.w	r2, r3, #4
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb8:	2210      	movs	r2, #16
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d043      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0308 	and.w	r3, r3, #8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d03c      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed6:	2210      	movs	r2, #16
 8003ed8:	409a      	lsls	r2, r3
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d018      	beq.n	8003f1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d108      	bne.n	8003f0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d024      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	4798      	blx	r3
 8003f0a:	e01f      	b.n	8003f4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d01b      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	4798      	blx	r3
 8003f1c:	e016      	b.n	8003f4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d107      	bne.n	8003f3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0208 	bic.w	r2, r2, #8
 8003f3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f50:	2220      	movs	r2, #32
 8003f52:	409a      	lsls	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 808f 	beq.w	800407c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0310 	and.w	r3, r3, #16
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 8087 	beq.w	800407c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	2220      	movs	r2, #32
 8003f74:	409a      	lsls	r2, r3
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b05      	cmp	r3, #5
 8003f84:	d136      	bne.n	8003ff4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0216 	bic.w	r2, r2, #22
 8003f94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <HAL_DMA_IRQHandler+0x1da>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d007      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0208 	bic.w	r2, r2, #8
 8003fc4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fca:	223f      	movs	r2, #63	; 0x3f
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d07e      	beq.n	80040e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	4798      	blx	r3
        }
        return;
 8003ff2:	e079      	b.n	80040e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d01d      	beq.n	800403e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d10d      	bne.n	800402c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004014:	2b00      	cmp	r3, #0
 8004016:	d031      	beq.n	800407c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401c:	6878      	ldr	r0, [r7, #4]
 800401e:	4798      	blx	r3
 8004020:	e02c      	b.n	800407c <HAL_DMA_IRQHandler+0x2a0>
 8004022:	bf00      	nop
 8004024:	20000000 	.word	0x20000000
 8004028:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d023      	beq.n	800407c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	4798      	blx	r3
 800403c:	e01e      	b.n	800407c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10f      	bne.n	800406c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0210 	bic.w	r2, r2, #16
 800405a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2201      	movs	r2, #1
 8004060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004080:	2b00      	cmp	r3, #0
 8004082:	d032      	beq.n	80040ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d022      	beq.n	80040d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2205      	movs	r2, #5
 8004094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0201 	bic.w	r2, r2, #1
 80040a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	3301      	adds	r3, #1
 80040ac:	60bb      	str	r3, [r7, #8]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d307      	bcc.n	80040c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1f2      	bne.n	80040a8 <HAL_DMA_IRQHandler+0x2cc>
 80040c2:	e000      	b.n	80040c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80040c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d005      	beq.n	80040ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	4798      	blx	r3
 80040e6:	e000      	b.n	80040ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80040e8:	bf00      	nop
    }
  }
}
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800410c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	683a      	ldr	r2, [r7, #0]
 8004114:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	689b      	ldr	r3, [r3, #8]
 800411a:	2b40      	cmp	r3, #64	; 0x40
 800411c:	d108      	bne.n	8004130 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68ba      	ldr	r2, [r7, #8]
 800412c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800412e:	e007      	b.n	8004140 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68ba      	ldr	r2, [r7, #8]
 8004136:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	60da      	str	r2, [r3, #12]
}
 8004140:	bf00      	nop
 8004142:	3714      	adds	r7, #20
 8004144:	46bd      	mov	sp, r7
 8004146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414a:	4770      	bx	lr

0800414c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800414c:	b480      	push	{r7}
 800414e:	b085      	sub	sp, #20
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	3b10      	subs	r3, #16
 800415c:	4a14      	ldr	r2, [pc, #80]	; (80041b0 <DMA_CalcBaseAndBitshift+0x64>)
 800415e:	fba2 2303 	umull	r2, r3, r2, r3
 8004162:	091b      	lsrs	r3, r3, #4
 8004164:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004166:	4a13      	ldr	r2, [pc, #76]	; (80041b4 <DMA_CalcBaseAndBitshift+0x68>)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b03      	cmp	r3, #3
 8004178:	d909      	bls.n	800418e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	1d1a      	adds	r2, r3, #4
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	659a      	str	r2, [r3, #88]	; 0x58
 800418c:	e007      	b.n	800419e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004196:	f023 0303 	bic.w	r3, r3, #3
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	aaaaaaab 	.word	0xaaaaaaab
 80041b4:	08010054 	.word	0x08010054

080041b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b085      	sub	sp, #20
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	699b      	ldr	r3, [r3, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d11f      	bne.n	8004212 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d856      	bhi.n	8004286 <DMA_CheckFifoParam+0xce>
 80041d8:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <DMA_CheckFifoParam+0x28>)
 80041da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041de:	bf00      	nop
 80041e0:	080041f1 	.word	0x080041f1
 80041e4:	08004203 	.word	0x08004203
 80041e8:	080041f1 	.word	0x080041f1
 80041ec:	08004287 	.word	0x08004287
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d046      	beq.n	800428a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004200:	e043      	b.n	800428a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800420a:	d140      	bne.n	800428e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004210:	e03d      	b.n	800428e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800421a:	d121      	bne.n	8004260 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2b03      	cmp	r3, #3
 8004220:	d837      	bhi.n	8004292 <DMA_CheckFifoParam+0xda>
 8004222:	a201      	add	r2, pc, #4	; (adr r2, 8004228 <DMA_CheckFifoParam+0x70>)
 8004224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004228:	08004239 	.word	0x08004239
 800422c:	0800423f 	.word	0x0800423f
 8004230:	08004239 	.word	0x08004239
 8004234:	08004251 	.word	0x08004251
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	73fb      	strb	r3, [r7, #15]
      break;
 800423c:	e030      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d025      	beq.n	8004296 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800424e:	e022      	b.n	8004296 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004254:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004258:	d11f      	bne.n	800429a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800425e:	e01c      	b.n	800429a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d903      	bls.n	800426e <DMA_CheckFifoParam+0xb6>
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	2b03      	cmp	r3, #3
 800426a:	d003      	beq.n	8004274 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800426c:	e018      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	73fb      	strb	r3, [r7, #15]
      break;
 8004272:	e015      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d00e      	beq.n	800429e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	73fb      	strb	r3, [r7, #15]
      break;
 8004284:	e00b      	b.n	800429e <DMA_CheckFifoParam+0xe6>
      break;
 8004286:	bf00      	nop
 8004288:	e00a      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      break;
 800428a:	bf00      	nop
 800428c:	e008      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      break;
 800428e:	bf00      	nop
 8004290:	e006      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004292:	bf00      	nop
 8004294:	e004      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      break;
 8004296:	bf00      	nop
 8004298:	e002      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      break;   
 800429a:	bf00      	nop
 800429c:	e000      	b.n	80042a0 <DMA_CheckFifoParam+0xe8>
      break;
 800429e:	bf00      	nop
    }
  } 
  
  return status; 
 80042a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3714      	adds	r7, #20
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop

080042b0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b086      	sub	sp, #24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80042c2:	4b23      	ldr	r3, [pc, #140]	; (8004350 <HAL_FLASH_Program+0xa0>)
 80042c4:	7e1b      	ldrb	r3, [r3, #24]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d101      	bne.n	80042ce <HAL_FLASH_Program+0x1e>
 80042ca:	2302      	movs	r3, #2
 80042cc:	e03b      	b.n	8004346 <HAL_FLASH_Program+0x96>
 80042ce:	4b20      	ldr	r3, [pc, #128]	; (8004350 <HAL_FLASH_Program+0xa0>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80042d4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80042d8:	f000 f870 	bl	80043bc <FLASH_WaitForLastOperation>
 80042dc:	4603      	mov	r3, r0
 80042de:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80042e0:	7dfb      	ldrb	r3, [r7, #23]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d12b      	bne.n	800433e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d105      	bne.n	80042f8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80042ec:	783b      	ldrb	r3, [r7, #0]
 80042ee:	4619      	mov	r1, r3
 80042f0:	68b8      	ldr	r0, [r7, #8]
 80042f2:	f000 f91b 	bl	800452c <FLASH_Program_Byte>
 80042f6:	e016      	b.n	8004326 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b01      	cmp	r3, #1
 80042fc:	d105      	bne.n	800430a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80042fe:	883b      	ldrh	r3, [r7, #0]
 8004300:	4619      	mov	r1, r3
 8004302:	68b8      	ldr	r0, [r7, #8]
 8004304:	f000 f8ee 	bl	80044e4 <FLASH_Program_HalfWord>
 8004308:	e00d      	b.n	8004326 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2b02      	cmp	r3, #2
 800430e:	d105      	bne.n	800431c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	4619      	mov	r1, r3
 8004314:	68b8      	ldr	r0, [r7, #8]
 8004316:	f000 f8c3 	bl	80044a0 <FLASH_Program_Word>
 800431a:	e004      	b.n	8004326 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800431c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004320:	68b8      	ldr	r0, [r7, #8]
 8004322:	f000 f88b 	bl	800443c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004326:	f24c 3050 	movw	r0, #50000	; 0xc350
 800432a:	f000 f847 	bl	80043bc <FLASH_WaitForLastOperation>
 800432e:	4603      	mov	r3, r0
 8004330:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004332:	4b08      	ldr	r3, [pc, #32]	; (8004354 <HAL_FLASH_Program+0xa4>)
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	4a07      	ldr	r2, [pc, #28]	; (8004354 <HAL_FLASH_Program+0xa4>)
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800433e:	4b04      	ldr	r3, [pc, #16]	; (8004350 <HAL_FLASH_Program+0xa0>)
 8004340:	2200      	movs	r2, #0
 8004342:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	200042ec 	.word	0x200042ec
 8004354:	40023c00 	.word	0x40023c00

08004358 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004362:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_FLASH_Unlock+0x38>)
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	da0b      	bge.n	8004382 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800436a:	4b09      	ldr	r3, [pc, #36]	; (8004390 <HAL_FLASH_Unlock+0x38>)
 800436c:	4a09      	ldr	r2, [pc, #36]	; (8004394 <HAL_FLASH_Unlock+0x3c>)
 800436e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004370:	4b07      	ldr	r3, [pc, #28]	; (8004390 <HAL_FLASH_Unlock+0x38>)
 8004372:	4a09      	ldr	r2, [pc, #36]	; (8004398 <HAL_FLASH_Unlock+0x40>)
 8004374:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_FLASH_Unlock+0x38>)
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	2b00      	cmp	r3, #0
 800437c:	da01      	bge.n	8004382 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8004382:	79fb      	ldrb	r3, [r7, #7]
}
 8004384:	4618      	mov	r0, r3
 8004386:	370c      	adds	r7, #12
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40023c00 	.word	0x40023c00
 8004394:	45670123 	.word	0x45670123
 8004398:	cdef89ab 	.word	0xcdef89ab

0800439c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80043a0:	4b05      	ldr	r3, [pc, #20]	; (80043b8 <HAL_FLASH_Lock+0x1c>)
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	4a04      	ldr	r2, [pc, #16]	; (80043b8 <HAL_FLASH_Lock+0x1c>)
 80043a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043aa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b6:	4770      	bx	lr
 80043b8:	40023c00 	.word	0x40023c00

080043bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80043c8:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <FLASH_WaitForLastOperation+0x78>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80043ce:	f7ff fa2b 	bl	8003828 <HAL_GetTick>
 80043d2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80043d4:	e010      	b.n	80043f8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043dc:	d00c      	beq.n	80043f8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d007      	beq.n	80043f4 <FLASH_WaitForLastOperation+0x38>
 80043e4:	f7ff fa20 	bl	8003828 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d201      	bcs.n	80043f8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e019      	b.n	800442c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80043f8:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <FLASH_WaitForLastOperation+0x7c>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e8      	bne.n	80043d6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004404:	4b0c      	ldr	r3, [pc, #48]	; (8004438 <FLASH_WaitForLastOperation+0x7c>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	2b00      	cmp	r3, #0
 800440e:	d002      	beq.n	8004416 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <FLASH_WaitForLastOperation+0x7c>)
 8004412:	2201      	movs	r2, #1
 8004414:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004416:	4b08      	ldr	r3, [pc, #32]	; (8004438 <FLASH_WaitForLastOperation+0x7c>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d003      	beq.n	800442a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004422:	f000 f8a5 	bl	8004570 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
  
}  
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	200042ec 	.word	0x200042ec
 8004438:	40023c00 	.word	0x40023c00

0800443c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004448:	4b14      	ldr	r3, [pc, #80]	; (800449c <FLASH_Program_DoubleWord+0x60>)
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	4a13      	ldr	r2, [pc, #76]	; (800449c <FLASH_Program_DoubleWord+0x60>)
 800444e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004452:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004454:	4b11      	ldr	r3, [pc, #68]	; (800449c <FLASH_Program_DoubleWord+0x60>)
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	4a10      	ldr	r2, [pc, #64]	; (800449c <FLASH_Program_DoubleWord+0x60>)
 800445a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800445e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004460:	4b0e      	ldr	r3, [pc, #56]	; (800449c <FLASH_Program_DoubleWord+0x60>)
 8004462:	691b      	ldr	r3, [r3, #16]
 8004464:	4a0d      	ldr	r2, [pc, #52]	; (800449c <FLASH_Program_DoubleWord+0x60>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	683a      	ldr	r2, [r7, #0]
 8004470:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8004472:	f3bf 8f6f 	isb	sy
}
 8004476:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004478:	e9d7 0100 	ldrd	r0, r1, [r7]
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	000a      	movs	r2, r1
 8004486:	2300      	movs	r3, #0
 8004488:	68f9      	ldr	r1, [r7, #12]
 800448a:	3104      	adds	r1, #4
 800448c:	4613      	mov	r3, r2
 800448e:	600b      	str	r3, [r1, #0]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	40023c00 	.word	0x40023c00

080044a0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80044aa:	4b0d      	ldr	r3, [pc, #52]	; (80044e0 <FLASH_Program_Word+0x40>)
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	4a0c      	ldr	r2, [pc, #48]	; (80044e0 <FLASH_Program_Word+0x40>)
 80044b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <FLASH_Program_Word+0x40>)
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <FLASH_Program_Word+0x40>)
 80044bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80044c2:	4b07      	ldr	r3, [pc, #28]	; (80044e0 <FLASH_Program_Word+0x40>)
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	4a06      	ldr	r2, [pc, #24]	; (80044e0 <FLASH_Program_Word+0x40>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	683a      	ldr	r2, [r7, #0]
 80044d2:	601a      	str	r2, [r3, #0]
}
 80044d4:	bf00      	nop
 80044d6:	370c      	adds	r7, #12
 80044d8:	46bd      	mov	sp, r7
 80044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044de:	4770      	bx	lr
 80044e0:	40023c00 	.word	0x40023c00

080044e4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	460b      	mov	r3, r1
 80044ee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80044f0:	4b0d      	ldr	r3, [pc, #52]	; (8004528 <FLASH_Program_HalfWord+0x44>)
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	4a0c      	ldr	r2, [pc, #48]	; (8004528 <FLASH_Program_HalfWord+0x44>)
 80044f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80044fc:	4b0a      	ldr	r3, [pc, #40]	; (8004528 <FLASH_Program_HalfWord+0x44>)
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	4a09      	ldr	r2, [pc, #36]	; (8004528 <FLASH_Program_HalfWord+0x44>)
 8004502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004506:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004508:	4b07      	ldr	r3, [pc, #28]	; (8004528 <FLASH_Program_HalfWord+0x44>)
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	4a06      	ldr	r2, [pc, #24]	; (8004528 <FLASH_Program_HalfWord+0x44>)
 800450e:	f043 0301 	orr.w	r3, r3, #1
 8004512:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	887a      	ldrh	r2, [r7, #2]
 8004518:	801a      	strh	r2, [r3, #0]
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
 8004526:	bf00      	nop
 8004528:	40023c00 	.word	0x40023c00

0800452c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	460b      	mov	r3, r1
 8004536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004538:	4b0c      	ldr	r3, [pc, #48]	; (800456c <FLASH_Program_Byte+0x40>)
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	4a0b      	ldr	r2, [pc, #44]	; (800456c <FLASH_Program_Byte+0x40>)
 800453e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004542:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004544:	4b09      	ldr	r3, [pc, #36]	; (800456c <FLASH_Program_Byte+0x40>)
 8004546:	4a09      	ldr	r2, [pc, #36]	; (800456c <FLASH_Program_Byte+0x40>)
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <FLASH_Program_Byte+0x40>)
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	4a06      	ldr	r2, [pc, #24]	; (800456c <FLASH_Program_Byte+0x40>)
 8004552:	f043 0301 	orr.w	r3, r3, #1
 8004556:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	701a      	strb	r2, [r3, #0]
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr
 800456a:	bf00      	nop
 800456c:	40023c00 	.word	0x40023c00

08004570 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004570:	b480      	push	{r7}
 8004572:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004574:	4b27      	ldr	r3, [pc, #156]	; (8004614 <FLASH_SetErrorCode+0xa4>)
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2b00      	cmp	r3, #0
 800457e:	d008      	beq.n	8004592 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004580:	4b25      	ldr	r3, [pc, #148]	; (8004618 <FLASH_SetErrorCode+0xa8>)
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f043 0310 	orr.w	r3, r3, #16
 8004588:	4a23      	ldr	r2, [pc, #140]	; (8004618 <FLASH_SetErrorCode+0xa8>)
 800458a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800458c:	4b21      	ldr	r3, [pc, #132]	; (8004614 <FLASH_SetErrorCode+0xa4>)
 800458e:	2210      	movs	r2, #16
 8004590:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <FLASH_SetErrorCode+0xa4>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d008      	beq.n	80045b0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <FLASH_SetErrorCode+0xa8>)
 80045a0:	69db      	ldr	r3, [r3, #28]
 80045a2:	f043 0308 	orr.w	r3, r3, #8
 80045a6:	4a1c      	ldr	r2, [pc, #112]	; (8004618 <FLASH_SetErrorCode+0xa8>)
 80045a8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80045aa:	4b1a      	ldr	r3, [pc, #104]	; (8004614 <FLASH_SetErrorCode+0xa4>)
 80045ac:	2220      	movs	r2, #32
 80045ae:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80045b0:	4b18      	ldr	r3, [pc, #96]	; (8004614 <FLASH_SetErrorCode+0xa4>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d008      	beq.n	80045ce <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80045bc:	4b16      	ldr	r3, [pc, #88]	; (8004618 <FLASH_SetErrorCode+0xa8>)
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	f043 0304 	orr.w	r3, r3, #4
 80045c4:	4a14      	ldr	r2, [pc, #80]	; (8004618 <FLASH_SetErrorCode+0xa8>)
 80045c6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80045c8:	4b12      	ldr	r3, [pc, #72]	; (8004614 <FLASH_SetErrorCode+0xa4>)
 80045ca:	2240      	movs	r2, #64	; 0x40
 80045cc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80045ce:	4b11      	ldr	r3, [pc, #68]	; (8004614 <FLASH_SetErrorCode+0xa4>)
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80045da:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <FLASH_SetErrorCode+0xa8>)
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f043 0302 	orr.w	r3, r3, #2
 80045e2:	4a0d      	ldr	r2, [pc, #52]	; (8004618 <FLASH_SetErrorCode+0xa8>)
 80045e4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80045e6:	4b0b      	ldr	r3, [pc, #44]	; (8004614 <FLASH_SetErrorCode+0xa4>)
 80045e8:	2280      	movs	r2, #128	; 0x80
 80045ea:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <FLASH_SetErrorCode+0xa4>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d008      	beq.n	800460a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80045f8:	4b07      	ldr	r3, [pc, #28]	; (8004618 <FLASH_SetErrorCode+0xa8>)
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	f043 0320 	orr.w	r3, r3, #32
 8004600:	4a05      	ldr	r2, [pc, #20]	; (8004618 <FLASH_SetErrorCode+0xa8>)
 8004602:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <FLASH_SetErrorCode+0xa4>)
 8004606:	2202      	movs	r2, #2
 8004608:	60da      	str	r2, [r3, #12]
  }
}
 800460a:	bf00      	nop
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	40023c00 	.word	0x40023c00
 8004618:	200042ec 	.word	0x200042ec

0800461c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	460b      	mov	r3, r1
 8004626:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d102      	bne.n	8004638 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	e010      	b.n	800465a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004638:	78fb      	ldrb	r3, [r7, #3]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d103      	bne.n	8004646 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800463e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e009      	b.n	800465a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	2b02      	cmp	r3, #2
 800464a:	d103      	bne.n	8004654 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800464c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	e002      	b.n	800465a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004654:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004658:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800465a:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <FLASH_Erase_Sector+0x8c>)
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	4a12      	ldr	r2, [pc, #72]	; (80046a8 <FLASH_Erase_Sector+0x8c>)
 8004660:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004664:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004666:	4b10      	ldr	r3, [pc, #64]	; (80046a8 <FLASH_Erase_Sector+0x8c>)
 8004668:	691a      	ldr	r2, [r3, #16]
 800466a:	490f      	ldr	r1, [pc, #60]	; (80046a8 <FLASH_Erase_Sector+0x8c>)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004672:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <FLASH_Erase_Sector+0x8c>)
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	4a0c      	ldr	r2, [pc, #48]	; (80046a8 <FLASH_Erase_Sector+0x8c>)
 8004678:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800467c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <FLASH_Erase_Sector+0x8c>)
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	00db      	lsls	r3, r3, #3
 8004686:	4313      	orrs	r3, r2
 8004688:	4a07      	ldr	r2, [pc, #28]	; (80046a8 <FLASH_Erase_Sector+0x8c>)
 800468a:	f043 0302 	orr.w	r3, r3, #2
 800468e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004690:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <FLASH_Erase_Sector+0x8c>)
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <FLASH_Erase_Sector+0x8c>)
 8004696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800469a:	6113      	str	r3, [r2, #16]
}
 800469c:	bf00      	nop
 800469e:	3714      	adds	r7, #20
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr
 80046a8:	40023c00 	.word	0x40023c00

080046ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	; 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046c2:	2300      	movs	r3, #0
 80046c4:	61fb      	str	r3, [r7, #28]
 80046c6:	e16b      	b.n	80049a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046c8:	2201      	movs	r2, #1
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4013      	ands	r3, r2
 80046da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	f040 815a 	bne.w	800499a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d005      	beq.n	80046fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d130      	bne.n	8004760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	005b      	lsls	r3, r3, #1
 8004708:	2203      	movs	r2, #3
 800470a:	fa02 f303 	lsl.w	r3, r2, r3
 800470e:	43db      	mvns	r3, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	fa02 f303 	lsl.w	r3, r2, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4313      	orrs	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004734:	2201      	movs	r2, #1
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	43db      	mvns	r3, r3
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	4013      	ands	r3, r2
 8004742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	091b      	lsrs	r3, r3, #4
 800474a:	f003 0201 	and.w	r2, r3, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	4313      	orrs	r3, r2
 8004758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69ba      	ldr	r2, [r7, #24]
 800475e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	2b03      	cmp	r3, #3
 800476a:	d017      	beq.n	800479c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	2203      	movs	r2, #3
 8004778:	fa02 f303 	lsl.w	r3, r2, r3
 800477c:	43db      	mvns	r3, r3
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	4013      	ands	r3, r2
 8004782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	fa02 f303 	lsl.w	r3, r2, r3
 8004790:	69ba      	ldr	r2, [r7, #24]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f003 0303 	and.w	r3, r3, #3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d123      	bne.n	80047f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	08da      	lsrs	r2, r3, #3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	3208      	adds	r2, #8
 80047b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	220f      	movs	r2, #15
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	43db      	mvns	r3, r3
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	4013      	ands	r3, r2
 80047ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691a      	ldr	r2, [r3, #16]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	f003 0307 	and.w	r3, r3, #7
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	4313      	orrs	r3, r2
 80047e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	08da      	lsrs	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3208      	adds	r2, #8
 80047ea:	69b9      	ldr	r1, [r7, #24]
 80047ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f003 0203 	and.w	r2, r3, #3
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800482c:	2b00      	cmp	r3, #0
 800482e:	f000 80b4 	beq.w	800499a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	4b60      	ldr	r3, [pc, #384]	; (80049b8 <HAL_GPIO_Init+0x30c>)
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	4a5f      	ldr	r2, [pc, #380]	; (80049b8 <HAL_GPIO_Init+0x30c>)
 800483c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004840:	6453      	str	r3, [r2, #68]	; 0x44
 8004842:	4b5d      	ldr	r3, [pc, #372]	; (80049b8 <HAL_GPIO_Init+0x30c>)
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800484a:	60fb      	str	r3, [r7, #12]
 800484c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800484e:	4a5b      	ldr	r2, [pc, #364]	; (80049bc <HAL_GPIO_Init+0x310>)
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	089b      	lsrs	r3, r3, #2
 8004854:	3302      	adds	r3, #2
 8004856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	220f      	movs	r2, #15
 8004866:	fa02 f303 	lsl.w	r3, r2, r3
 800486a:	43db      	mvns	r3, r3
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4013      	ands	r3, r2
 8004870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	4a52      	ldr	r2, [pc, #328]	; (80049c0 <HAL_GPIO_Init+0x314>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d02b      	beq.n	80048d2 <HAL_GPIO_Init+0x226>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a51      	ldr	r2, [pc, #324]	; (80049c4 <HAL_GPIO_Init+0x318>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d025      	beq.n	80048ce <HAL_GPIO_Init+0x222>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a50      	ldr	r2, [pc, #320]	; (80049c8 <HAL_GPIO_Init+0x31c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d01f      	beq.n	80048ca <HAL_GPIO_Init+0x21e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a4f      	ldr	r2, [pc, #316]	; (80049cc <HAL_GPIO_Init+0x320>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d019      	beq.n	80048c6 <HAL_GPIO_Init+0x21a>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a4e      	ldr	r2, [pc, #312]	; (80049d0 <HAL_GPIO_Init+0x324>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d013      	beq.n	80048c2 <HAL_GPIO_Init+0x216>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a4d      	ldr	r2, [pc, #308]	; (80049d4 <HAL_GPIO_Init+0x328>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00d      	beq.n	80048be <HAL_GPIO_Init+0x212>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a4c      	ldr	r2, [pc, #304]	; (80049d8 <HAL_GPIO_Init+0x32c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d007      	beq.n	80048ba <HAL_GPIO_Init+0x20e>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a4b      	ldr	r2, [pc, #300]	; (80049dc <HAL_GPIO_Init+0x330>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d101      	bne.n	80048b6 <HAL_GPIO_Init+0x20a>
 80048b2:	2307      	movs	r3, #7
 80048b4:	e00e      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048b6:	2308      	movs	r3, #8
 80048b8:	e00c      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048ba:	2306      	movs	r3, #6
 80048bc:	e00a      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048be:	2305      	movs	r3, #5
 80048c0:	e008      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048c2:	2304      	movs	r3, #4
 80048c4:	e006      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048c6:	2303      	movs	r3, #3
 80048c8:	e004      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048ca:	2302      	movs	r3, #2
 80048cc:	e002      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_GPIO_Init+0x228>
 80048d2:	2300      	movs	r3, #0
 80048d4:	69fa      	ldr	r2, [r7, #28]
 80048d6:	f002 0203 	and.w	r2, r2, #3
 80048da:	0092      	lsls	r2, r2, #2
 80048dc:	4093      	lsls	r3, r2
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048e4:	4935      	ldr	r1, [pc, #212]	; (80049bc <HAL_GPIO_Init+0x310>)
 80048e6:	69fb      	ldr	r3, [r7, #28]
 80048e8:	089b      	lsrs	r3, r3, #2
 80048ea:	3302      	adds	r3, #2
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048f2:	4b3b      	ldr	r3, [pc, #236]	; (80049e0 <HAL_GPIO_Init+0x334>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	69ba      	ldr	r2, [r7, #24]
 80048fe:	4013      	ands	r3, r2
 8004900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004916:	4a32      	ldr	r2, [pc, #200]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800491c:	4b30      	ldr	r3, [pc, #192]	; (80049e0 <HAL_GPIO_Init+0x334>)
 800491e:	68db      	ldr	r3, [r3, #12]
 8004920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	43db      	mvns	r3, r3
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	4013      	ands	r3, r2
 800492a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004938:	69ba      	ldr	r2, [r7, #24]
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004940:	4a27      	ldr	r2, [pc, #156]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004946:	4b26      	ldr	r3, [pc, #152]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	43db      	mvns	r3, r3
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	4013      	ands	r3, r2
 8004954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	4313      	orrs	r3, r2
 8004968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800496a:	4a1d      	ldr	r2, [pc, #116]	; (80049e0 <HAL_GPIO_Init+0x334>)
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004970:	4b1b      	ldr	r3, [pc, #108]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	43db      	mvns	r3, r3
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	4013      	ands	r3, r2
 800497e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	4313      	orrs	r3, r2
 8004992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004994:	4a12      	ldr	r2, [pc, #72]	; (80049e0 <HAL_GPIO_Init+0x334>)
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	3301      	adds	r3, #1
 800499e:	61fb      	str	r3, [r7, #28]
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	2b0f      	cmp	r3, #15
 80049a4:	f67f ae90 	bls.w	80046c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	3724      	adds	r7, #36	; 0x24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800
 80049bc:	40013800 	.word	0x40013800
 80049c0:	40020000 	.word	0x40020000
 80049c4:	40020400 	.word	0x40020400
 80049c8:	40020800 	.word	0x40020800
 80049cc:	40020c00 	.word	0x40020c00
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40021400 	.word	0x40021400
 80049d8:	40021800 	.word	0x40021800
 80049dc:	40021c00 	.word	0x40021c00
 80049e0:	40013c00 	.word	0x40013c00

080049e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	460b      	mov	r3, r1
 80049ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691a      	ldr	r2, [r3, #16]
 80049f4:	887b      	ldrh	r3, [r7, #2]
 80049f6:	4013      	ands	r3, r2
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049fc:	2301      	movs	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
 8004a00:	e001      	b.n	8004a06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a02:	2300      	movs	r3, #0
 8004a04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	807b      	strh	r3, [r7, #2]
 8004a20:	4613      	mov	r3, r2
 8004a22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a24:	787b      	ldrb	r3, [r7, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d003      	beq.n	8004a32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a2a:	887a      	ldrh	r2, [r7, #2]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a30:	e003      	b.n	8004a3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a32:	887b      	ldrh	r3, [r7, #2]
 8004a34:	041a      	lsls	r2, r3, #16
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	619a      	str	r2, [r3, #24]
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b085      	sub	sp, #20
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a58:	887a      	ldrh	r2, [r7, #2]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	041a      	lsls	r2, r3, #16
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	43d9      	mvns	r1, r3
 8004a64:	887b      	ldrh	r3, [r7, #2]
 8004a66:	400b      	ands	r3, r1
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	619a      	str	r2, [r3, #24]
}
 8004a6e:	bf00      	nop
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
	...

08004a7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e12b      	b.n	8004ce6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d106      	bne.n	8004aa8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f7fe f9a6 	bl	8002df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2224      	movs	r2, #36	; 0x24
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ace:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004ade:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004ae0:	f001 fffe 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 8004ae4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	4a81      	ldr	r2, [pc, #516]	; (8004cf0 <HAL_I2C_Init+0x274>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d807      	bhi.n	8004b00 <HAL_I2C_Init+0x84>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4a80      	ldr	r2, [pc, #512]	; (8004cf4 <HAL_I2C_Init+0x278>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	bf94      	ite	ls
 8004af8:	2301      	movls	r3, #1
 8004afa:	2300      	movhi	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e006      	b.n	8004b0e <HAL_I2C_Init+0x92>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4a7d      	ldr	r2, [pc, #500]	; (8004cf8 <HAL_I2C_Init+0x27c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	bf94      	ite	ls
 8004b08:	2301      	movls	r3, #1
 8004b0a:	2300      	movhi	r3, #0
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d001      	beq.n	8004b16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e0e7      	b.n	8004ce6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4a78      	ldr	r2, [pc, #480]	; (8004cfc <HAL_I2C_Init+0x280>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	0c9b      	lsrs	r3, r3, #18
 8004b20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	6a1b      	ldr	r3, [r3, #32]
 8004b3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	4a6a      	ldr	r2, [pc, #424]	; (8004cf0 <HAL_I2C_Init+0x274>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d802      	bhi.n	8004b50 <HAL_I2C_Init+0xd4>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	e009      	b.n	8004b64 <HAL_I2C_Init+0xe8>
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004b56:	fb02 f303 	mul.w	r3, r2, r3
 8004b5a:	4a69      	ldr	r2, [pc, #420]	; (8004d00 <HAL_I2C_Init+0x284>)
 8004b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b60:	099b      	lsrs	r3, r3, #6
 8004b62:	3301      	adds	r3, #1
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004b76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	495c      	ldr	r1, [pc, #368]	; (8004cf0 <HAL_I2C_Init+0x274>)
 8004b80:	428b      	cmp	r3, r1
 8004b82:	d819      	bhi.n	8004bb8 <HAL_I2C_Init+0x13c>
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	1e59      	subs	r1, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	005b      	lsls	r3, r3, #1
 8004b8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004b92:	1c59      	adds	r1, r3, #1
 8004b94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004b98:	400b      	ands	r3, r1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00a      	beq.n	8004bb4 <HAL_I2C_Init+0x138>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	1e59      	subs	r1, r3, #1
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	005b      	lsls	r3, r3, #1
 8004ba8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bac:	3301      	adds	r3, #1
 8004bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bb2:	e051      	b.n	8004c58 <HAL_I2C_Init+0x1dc>
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	e04f      	b.n	8004c58 <HAL_I2C_Init+0x1dc>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d111      	bne.n	8004be4 <HAL_I2C_Init+0x168>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	1e58      	subs	r0, r3, #1
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6859      	ldr	r1, [r3, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	440b      	add	r3, r1
 8004bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bd2:	3301      	adds	r3, #1
 8004bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bf0c      	ite	eq
 8004bdc:	2301      	moveq	r3, #1
 8004bde:	2300      	movne	r3, #0
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	e012      	b.n	8004c0a <HAL_I2C_Init+0x18e>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1e58      	subs	r0, r3, #1
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6859      	ldr	r1, [r3, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	0099      	lsls	r1, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004bfa:	3301      	adds	r3, #1
 8004bfc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <HAL_I2C_Init+0x196>
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e022      	b.n	8004c58 <HAL_I2C_Init+0x1dc>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d10e      	bne.n	8004c38 <HAL_I2C_Init+0x1bc>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	1e58      	subs	r0, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6859      	ldr	r1, [r3, #4]
 8004c22:	460b      	mov	r3, r1
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	440b      	add	r3, r1
 8004c28:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c36:	e00f      	b.n	8004c58 <HAL_I2C_Init+0x1dc>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	1e58      	subs	r0, r3, #1
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6859      	ldr	r1, [r3, #4]
 8004c40:	460b      	mov	r3, r1
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	0099      	lsls	r1, r3, #2
 8004c48:	440b      	add	r3, r1
 8004c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c4e:	3301      	adds	r3, #1
 8004c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	6809      	ldr	r1, [r1, #0]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69da      	ldr	r2, [r3, #28]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6a1b      	ldr	r3, [r3, #32]
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004c86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6911      	ldr	r1, [r2, #16]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68d2      	ldr	r2, [r2, #12]
 8004c92:	4311      	orrs	r1, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	430b      	orrs	r3, r1
 8004c9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	695a      	ldr	r2, [r3, #20]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f042 0201 	orr.w	r2, r2, #1
 8004cc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	000186a0 	.word	0x000186a0
 8004cf4:	001e847f 	.word	0x001e847f
 8004cf8:	003d08ff 	.word	0x003d08ff
 8004cfc:	431bde83 	.word	0x431bde83
 8004d00:	10624dd3 	.word	0x10624dd3

08004d04 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d06:	b08f      	sub	sp, #60	; 0x3c
 8004d08:	af0a      	add	r7, sp, #40	; 0x28
 8004d0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d101      	bne.n	8004d16 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e10f      	b.n	8004f36 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d106      	bne.n	8004d36 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f008 f999 	bl	800d068 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2203      	movs	r2, #3
 8004d3a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4618      	mov	r0, r3
 8004d56:	f004 fc80 	bl	800965a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	687e      	ldr	r6, [r7, #4]
 8004d62:	466d      	mov	r5, sp
 8004d64:	f106 0410 	add.w	r4, r6, #16
 8004d68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d74:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d78:	1d33      	adds	r3, r6, #4
 8004d7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d7c:	6838      	ldr	r0, [r7, #0]
 8004d7e:	f004 fb57 	bl	8009430 <USB_CoreInit>
 8004d82:	4603      	mov	r3, r0
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d005      	beq.n	8004d94 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0d0      	b.n	8004f36 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2100      	movs	r1, #0
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f004 fc6e 	bl	800967c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004da0:	2300      	movs	r3, #0
 8004da2:	73fb      	strb	r3, [r7, #15]
 8004da4:	e04a      	b.n	8004e3c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004da6:	7bfa      	ldrb	r2, [r7, #15]
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	4413      	add	r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	333d      	adds	r3, #61	; 0x3d
 8004db6:	2201      	movs	r2, #1
 8004db8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004dba:	7bfa      	ldrb	r2, [r7, #15]
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	333c      	adds	r3, #60	; 0x3c
 8004dca:	7bfa      	ldrb	r2, [r7, #15]
 8004dcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004dce:	7bfa      	ldrb	r2, [r7, #15]
 8004dd0:	7bfb      	ldrb	r3, [r7, #15]
 8004dd2:	b298      	uxth	r0, r3
 8004dd4:	6879      	ldr	r1, [r7, #4]
 8004dd6:	4613      	mov	r3, r2
 8004dd8:	00db      	lsls	r3, r3, #3
 8004dda:	4413      	add	r3, r2
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	440b      	add	r3, r1
 8004de0:	3344      	adds	r3, #68	; 0x44
 8004de2:	4602      	mov	r2, r0
 8004de4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004de6:	7bfa      	ldrb	r2, [r7, #15]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	3340      	adds	r3, #64	; 0x40
 8004df6:	2200      	movs	r2, #0
 8004df8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004dfa:	7bfa      	ldrb	r2, [r7, #15]
 8004dfc:	6879      	ldr	r1, [r7, #4]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	00db      	lsls	r3, r3, #3
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	3348      	adds	r3, #72	; 0x48
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004e0e:	7bfa      	ldrb	r2, [r7, #15]
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	4613      	mov	r3, r2
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	440b      	add	r3, r1
 8004e1c:	334c      	adds	r3, #76	; 0x4c
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004e22:	7bfa      	ldrb	r2, [r7, #15]
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	4613      	mov	r3, r2
 8004e28:	00db      	lsls	r3, r3, #3
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	3354      	adds	r3, #84	; 0x54
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e36:	7bfb      	ldrb	r3, [r7, #15]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
 8004e3c:	7bfa      	ldrb	r2, [r7, #15]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d3af      	bcc.n	8004da6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e46:	2300      	movs	r3, #0
 8004e48:	73fb      	strb	r3, [r7, #15]
 8004e4a:	e044      	b.n	8004ed6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004e4c:	7bfa      	ldrb	r2, [r7, #15]
 8004e4e:	6879      	ldr	r1, [r7, #4]
 8004e50:	4613      	mov	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4413      	add	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004e5e:	2200      	movs	r2, #0
 8004e60:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004e62:	7bfa      	ldrb	r2, [r7, #15]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	00db      	lsls	r3, r3, #3
 8004e6a:	4413      	add	r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e74:	7bfa      	ldrb	r2, [r7, #15]
 8004e76:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e78:	7bfa      	ldrb	r2, [r7, #15]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	00db      	lsls	r3, r3, #3
 8004e80:	4413      	add	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e8e:	7bfa      	ldrb	r2, [r7, #15]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	4413      	add	r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ea4:	7bfa      	ldrb	r2, [r7, #15]
 8004ea6:	6879      	ldr	r1, [r7, #4]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	4413      	add	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	440b      	add	r3, r1
 8004eb2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004eba:	7bfa      	ldrb	r2, [r7, #15]
 8004ebc:	6879      	ldr	r1, [r7, #4]
 8004ebe:	4613      	mov	r3, r2
 8004ec0:	00db      	lsls	r3, r3, #3
 8004ec2:	4413      	add	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	440b      	add	r3, r1
 8004ec8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004ecc:	2200      	movs	r2, #0
 8004ece:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	73fb      	strb	r3, [r7, #15]
 8004ed6:	7bfa      	ldrb	r2, [r7, #15]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d3b5      	bcc.n	8004e4c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	603b      	str	r3, [r7, #0]
 8004ee6:	687e      	ldr	r6, [r7, #4]
 8004ee8:	466d      	mov	r5, sp
 8004eea:	f106 0410 	add.w	r4, r6, #16
 8004eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ef0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ef4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ef6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004efa:	e885 0003 	stmia.w	r5, {r0, r1}
 8004efe:	1d33      	adds	r3, r6, #4
 8004f00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004f02:	6838      	ldr	r0, [r7, #0]
 8004f04:	f004 fc06 	bl	8009714 <USB_DevInit>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e00d      	b.n	8004f36 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f005 fd55 	bl	800a9de <USB_DevDisconnect>

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3714      	adds	r7, #20
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f3e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d101      	bne.n	8004f5a <HAL_PCD_Start+0x1c>
 8004f56:	2302      	movs	r3, #2
 8004f58:	e020      	b.n	8004f9c <HAL_PCD_Start+0x5e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d109      	bne.n	8004f7e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d005      	beq.n	8004f7e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f76:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f004 fb58 	bl	8009638 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f005 fd05 	bl	800a99c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004fa4:	b590      	push	{r4, r7, lr}
 8004fa6:	b08d      	sub	sp, #52	; 0x34
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f005 fdc3 	bl	800ab46 <USB_GetMode>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f040 848a 	bne.w	80058dc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f005 fd27 	bl	800aa20 <USB_ReadInterrupts>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	f000 8480 	beq.w	80058da <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	0a1b      	lsrs	r3, r3, #8
 8004fe4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f005 fd14 	bl	800aa20 <USB_ReadInterrupts>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d107      	bne.n	8005012 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695a      	ldr	r2, [r3, #20]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f002 0202 	and.w	r2, r2, #2
 8005010:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f005 fd02 	bl	800aa20 <USB_ReadInterrupts>
 800501c:	4603      	mov	r3, r0
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b10      	cmp	r3, #16
 8005024:	d161      	bne.n	80050ea <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	699a      	ldr	r2, [r3, #24]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f022 0210 	bic.w	r2, r2, #16
 8005034:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005036:	6a3b      	ldr	r3, [r7, #32]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f003 020f 	and.w	r2, r3, #15
 8005042:	4613      	mov	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	4413      	add	r3, r2
 8005052:	3304      	adds	r3, #4
 8005054:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	0c5b      	lsrs	r3, r3, #17
 800505a:	f003 030f 	and.w	r3, r3, #15
 800505e:	2b02      	cmp	r3, #2
 8005060:	d124      	bne.n	80050ac <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005068:	4013      	ands	r3, r2
 800506a:	2b00      	cmp	r3, #0
 800506c:	d035      	beq.n	80050da <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	091b      	lsrs	r3, r3, #4
 8005076:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005078:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800507c:	b29b      	uxth	r3, r3
 800507e:	461a      	mov	r2, r3
 8005080:	6a38      	ldr	r0, [r7, #32]
 8005082:	f005 fb39 	bl	800a6f8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	691a      	ldr	r2, [r3, #16]
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	091b      	lsrs	r3, r3, #4
 800508e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005092:	441a      	add	r2, r3
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	6a1a      	ldr	r2, [r3, #32]
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	091b      	lsrs	r3, r3, #4
 80050a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050a4:	441a      	add	r2, r3
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
 80050aa:	e016      	b.n	80050da <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	0c5b      	lsrs	r3, r3, #17
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	2b06      	cmp	r3, #6
 80050b6:	d110      	bne.n	80050da <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050be:	2208      	movs	r2, #8
 80050c0:	4619      	mov	r1, r3
 80050c2:	6a38      	ldr	r0, [r7, #32]
 80050c4:	f005 fb18 	bl	800a6f8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	6a1a      	ldr	r2, [r3, #32]
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	091b      	lsrs	r3, r3, #4
 80050d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050d4:	441a      	add	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	699a      	ldr	r2, [r3, #24]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f042 0210 	orr.w	r2, r2, #16
 80050e8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f005 fc96 	bl	800aa20 <USB_ReadInterrupts>
 80050f4:	4603      	mov	r3, r0
 80050f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80050fe:	f040 80a7 	bne.w	8005250 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f005 fc9b 	bl	800aa46 <USB_ReadDevAllOutEpInterrupt>
 8005110:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005112:	e099      	b.n	8005248 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 808e 	beq.w	800523c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	4611      	mov	r1, r2
 800512a:	4618      	mov	r0, r3
 800512c:	f005 fcbf 	bl	800aaae <USB_ReadDevOutEPInterrupt>
 8005130:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00c      	beq.n	8005156 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800513c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	461a      	mov	r2, r3
 800514a:	2301      	movs	r3, #1
 800514c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800514e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 fec3 	bl	8005edc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00c      	beq.n	800517a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	015a      	lsls	r2, r3, #5
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	4413      	add	r3, r2
 8005168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800516c:	461a      	mov	r2, r3
 800516e:	2308      	movs	r3, #8
 8005170:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005172:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 ff99 	bl	80060ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f003 0310 	and.w	r3, r3, #16
 8005180:	2b00      	cmp	r3, #0
 8005182:	d008      	beq.n	8005196 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005190:	461a      	mov	r2, r3
 8005192:	2310      	movs	r3, #16
 8005194:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	f003 0302 	and.w	r3, r3, #2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d030      	beq.n	8005202 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	695b      	ldr	r3, [r3, #20]
 80051a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a8:	2b80      	cmp	r3, #128	; 0x80
 80051aa:	d109      	bne.n	80051c0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80051ac:	69fb      	ldr	r3, [r7, #28]
 80051ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	69fa      	ldr	r2, [r7, #28]
 80051b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80051be:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80051c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051c2:	4613      	mov	r3, r2
 80051c4:	00db      	lsls	r3, r3, #3
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	4413      	add	r3, r2
 80051d2:	3304      	adds	r3, #4
 80051d4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	78db      	ldrb	r3, [r3, #3]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d108      	bne.n	80051f0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	2200      	movs	r2, #0
 80051e2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80051e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	4619      	mov	r1, r3
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f008 f850 	bl	800d290 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fc:	461a      	mov	r2, r3
 80051fe:	2302      	movs	r3, #2
 8005200:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f003 0320 	and.w	r3, r3, #32
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800520c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005218:	461a      	mov	r2, r3
 800521a:	2320      	movs	r3, #32
 800521c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005224:	2b00      	cmp	r3, #0
 8005226:	d009      	beq.n	800523c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	461a      	mov	r2, r3
 8005236:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800523a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800523c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800523e:	3301      	adds	r3, #1
 8005240:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005244:	085b      	lsrs	r3, r3, #1
 8005246:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524a:	2b00      	cmp	r3, #0
 800524c:	f47f af62 	bne.w	8005114 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4618      	mov	r0, r3
 8005256:	f005 fbe3 	bl	800aa20 <USB_ReadInterrupts>
 800525a:	4603      	mov	r3, r0
 800525c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005260:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005264:	f040 80db 	bne.w	800541e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4618      	mov	r0, r3
 800526e:	f005 fc04 	bl	800aa7a <USB_ReadDevAllInEpInterrupt>
 8005272:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005278:	e0cd      	b.n	8005416 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 80c2 	beq.w	800540a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800528c:	b2d2      	uxtb	r2, r2
 800528e:	4611      	mov	r1, r2
 8005290:	4618      	mov	r0, r3
 8005292:	f005 fc2a 	bl	800aaea <USB_ReadDevInEPInterrupt>
 8005296:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d057      	beq.n	8005352 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	f003 030f 	and.w	r3, r3, #15
 80052a8:	2201      	movs	r2, #1
 80052aa:	fa02 f303 	lsl.w	r3, r2, r3
 80052ae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	43db      	mvns	r3, r3
 80052bc:	69f9      	ldr	r1, [r7, #28]
 80052be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052c2:	4013      	ands	r3, r2
 80052c4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80052c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d2:	461a      	mov	r2, r3
 80052d4:	2301      	movs	r3, #1
 80052d6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d132      	bne.n	8005346 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	334c      	adds	r3, #76	; 0x4c
 80052f0:	6819      	ldr	r1, [r3, #0]
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f6:	4613      	mov	r3, r2
 80052f8:	00db      	lsls	r3, r3, #3
 80052fa:	4413      	add	r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4403      	add	r3, r0
 8005300:	3348      	adds	r3, #72	; 0x48
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4419      	add	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800530a:	4613      	mov	r3, r2
 800530c:	00db      	lsls	r3, r3, #3
 800530e:	4413      	add	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4403      	add	r3, r0
 8005314:	334c      	adds	r3, #76	; 0x4c
 8005316:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	2b00      	cmp	r3, #0
 800531c:	d113      	bne.n	8005346 <HAL_PCD_IRQHandler+0x3a2>
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005322:	4613      	mov	r3, r2
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	440b      	add	r3, r1
 800532c:	3354      	adds	r3, #84	; 0x54
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d108      	bne.n	8005346 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6818      	ldr	r0, [r3, #0]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800533e:	461a      	mov	r2, r3
 8005340:	2101      	movs	r1, #1
 8005342:	f005 fc31 	bl	800aba8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005348:	b2db      	uxtb	r3, r3
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f007 ff1a 	bl	800d186 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	f003 0308 	and.w	r3, r3, #8
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	4413      	add	r3, r2
 8005364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005368:	461a      	mov	r2, r3
 800536a:	2308      	movs	r3, #8
 800536c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	d008      	beq.n	800538a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537a:	015a      	lsls	r2, r3, #5
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	4413      	add	r3, r2
 8005380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005384:	461a      	mov	r2, r3
 8005386:	2310      	movs	r3, #16
 8005388:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005390:	2b00      	cmp	r3, #0
 8005392:	d008      	beq.n	80053a6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a0:	461a      	mov	r2, r3
 80053a2:	2340      	movs	r3, #64	; 0x40
 80053a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f003 0302 	and.w	r3, r3, #2
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d023      	beq.n	80053f8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80053b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053b2:	6a38      	ldr	r0, [r7, #32]
 80053b4:	f004 fb12 	bl	80099dc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80053b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ba:	4613      	mov	r3, r2
 80053bc:	00db      	lsls	r3, r3, #3
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	3338      	adds	r3, #56	; 0x38
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	4413      	add	r3, r2
 80053c8:	3304      	adds	r3, #4
 80053ca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	78db      	ldrb	r3, [r3, #3]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d108      	bne.n	80053e6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2200      	movs	r2, #0
 80053d8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80053da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f007 ff67 	bl	800d2b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80053e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053f2:	461a      	mov	r2, r3
 80053f4:	2302      	movs	r3, #2
 80053f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d003      	beq.n	800540a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005402:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fcdb 	bl	8005dc0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	3301      	adds	r3, #1
 800540e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005412:	085b      	lsrs	r3, r3, #1
 8005414:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	2b00      	cmp	r3, #0
 800541a:	f47f af2e 	bne.w	800527a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4618      	mov	r0, r3
 8005424:	f005 fafc 	bl	800aa20 <USB_ReadInterrupts>
 8005428:	4603      	mov	r3, r0
 800542a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800542e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005432:	d122      	bne.n	800547a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005434:	69fb      	ldr	r3, [r7, #28]
 8005436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	69fa      	ldr	r2, [r7, #28]
 800543e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005442:	f023 0301 	bic.w	r3, r3, #1
 8005446:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800544e:	2b01      	cmp	r3, #1
 8005450:	d108      	bne.n	8005464 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800545a:	2100      	movs	r1, #0
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fec3 	bl	80061e8 <HAL_PCDEx_LPM_Callback>
 8005462:	e002      	b.n	800546a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f007 ff05 	bl	800d274 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005478:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f005 face 	bl	800aa20 <USB_ReadInterrupts>
 8005484:	4603      	mov	r3, r0
 8005486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800548a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800548e:	d112      	bne.n	80054b6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b01      	cmp	r3, #1
 800549e:	d102      	bne.n	80054a6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f007 fec1 	bl	800d228 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	695a      	ldr	r2, [r3, #20]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80054b4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f005 fab0 	bl	800aa20 <USB_ReadInterrupts>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ca:	f040 80b7 	bne.w	800563c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	69fa      	ldr	r2, [r7, #28]
 80054d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054dc:	f023 0301 	bic.w	r3, r3, #1
 80054e0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2110      	movs	r1, #16
 80054e8:	4618      	mov	r0, r3
 80054ea:	f004 fa77 	bl	80099dc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054ee:	2300      	movs	r3, #0
 80054f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054f2:	e046      	b.n	8005582 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	461a      	mov	r2, r3
 8005502:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005506:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	440a      	add	r2, r1
 800551e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005522:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005526:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005534:	461a      	mov	r2, r3
 8005536:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800553a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	015a      	lsls	r2, r3, #5
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	4413      	add	r3, r2
 8005544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554c:	0151      	lsls	r1, r2, #5
 800554e:	69fa      	ldr	r2, [r7, #28]
 8005550:	440a      	add	r2, r1
 8005552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005556:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800555a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	4413      	add	r3, r2
 8005564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	440a      	add	r2, r1
 8005572:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005576:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800557a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557e:	3301      	adds	r3, #1
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005588:	429a      	cmp	r2, r3
 800558a:	d3b3      	bcc.n	80054f4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005592:	69db      	ldr	r3, [r3, #28]
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800559e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d016      	beq.n	80055d6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b2:	69fa      	ldr	r2, [r7, #28]
 80055b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b8:	f043 030b 	orr.w	r3, r3, #11
 80055bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c8:	69fa      	ldr	r2, [r7, #28]
 80055ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055ce:	f043 030b 	orr.w	r3, r3, #11
 80055d2:	6453      	str	r3, [r2, #68]	; 0x44
 80055d4:	e015      	b.n	8005602 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80055e8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80055ec:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055fc:	f043 030b 	orr.w	r3, r3, #11
 8005600:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	69fa      	ldr	r2, [r7, #28]
 800560c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005610:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005614:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005626:	461a      	mov	r2, r3
 8005628:	f005 fabe 	bl	800aba8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	695a      	ldr	r2, [r3, #20]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800563a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4618      	mov	r0, r3
 8005642:	f005 f9ed 	bl	800aa20 <USB_ReadInterrupts>
 8005646:	4603      	mov	r3, r0
 8005648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800564c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005650:	d124      	bne.n	800569c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4618      	mov	r0, r3
 8005658:	f005 fa83 	bl	800ab62 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f004 fa38 	bl	8009ad6 <USB_GetDevSpeed>
 8005666:	4603      	mov	r3, r0
 8005668:	461a      	mov	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681c      	ldr	r4, [r3, #0]
 8005672:	f001 fa29 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8005676:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	4620      	mov	r0, r4
 8005682:	f003 ff37 	bl	80094f4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f007 fda5 	bl	800d1d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695a      	ldr	r2, [r3, #20]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800569a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4618      	mov	r0, r3
 80056a2:	f005 f9bd 	bl	800aa20 <USB_ReadInterrupts>
 80056a6:	4603      	mov	r3, r0
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b08      	cmp	r3, #8
 80056ae:	d10a      	bne.n	80056c6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f007 fd82 	bl	800d1ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	695a      	ldr	r2, [r3, #20]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f002 0208 	and.w	r2, r2, #8
 80056c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f005 f9a8 	bl	800aa20 <USB_ReadInterrupts>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d6:	2b80      	cmp	r3, #128	; 0x80
 80056d8:	d122      	bne.n	8005720 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	699b      	ldr	r3, [r3, #24]
 80056de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056e6:	2301      	movs	r3, #1
 80056e8:	627b      	str	r3, [r7, #36]	; 0x24
 80056ea:	e014      	b.n	8005716 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f0:	4613      	mov	r3, r2
 80056f2:	00db      	lsls	r3, r3, #3
 80056f4:	4413      	add	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	2b01      	cmp	r3, #1
 8005702:	d105      	bne.n	8005710 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005706:	b2db      	uxtb	r3, r3
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fb27 	bl	8005d5e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	3301      	adds	r3, #1
 8005714:	627b      	str	r3, [r7, #36]	; 0x24
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571c:	429a      	cmp	r2, r3
 800571e:	d3e5      	bcc.n	80056ec <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f005 f97b 	bl	800aa20 <USB_ReadInterrupts>
 800572a:	4603      	mov	r3, r0
 800572c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005730:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005734:	d13b      	bne.n	80057ae <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005736:	2301      	movs	r3, #1
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
 800573a:	e02b      	b.n	8005794 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005750:	4613      	mov	r3, r2
 8005752:	00db      	lsls	r3, r3, #3
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	3340      	adds	r3, #64	; 0x40
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b01      	cmp	r3, #1
 8005760:	d115      	bne.n	800578e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005762:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005764:	2b00      	cmp	r3, #0
 8005766:	da12      	bge.n	800578e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005768:	6879      	ldr	r1, [r7, #4]
 800576a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576c:	4613      	mov	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	440b      	add	r3, r1
 8005776:	333f      	adds	r3, #63	; 0x3f
 8005778:	2201      	movs	r2, #1
 800577a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800577c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005784:	b2db      	uxtb	r3, r3
 8005786:	4619      	mov	r1, r3
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fae8 	bl	8005d5e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	3301      	adds	r3, #1
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800579a:	429a      	cmp	r2, r3
 800579c:	d3ce      	bcc.n	800573c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	695a      	ldr	r2, [r3, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80057ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f005 f934 	bl	800aa20 <USB_ReadInterrupts>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057c2:	d155      	bne.n	8005870 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057c4:	2301      	movs	r3, #1
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
 80057c8:	e045      	b.n	8005856 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	69fb      	ldr	r3, [r7, #28]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057de:	4613      	mov	r3, r2
 80057e0:	00db      	lsls	r3, r3, #3
 80057e2:	4413      	add	r3, r2
 80057e4:	009b      	lsls	r3, r3, #2
 80057e6:	440b      	add	r3, r1
 80057e8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d12e      	bne.n	8005850 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057f2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	da2b      	bge.n	8005850 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80057f8:	69bb      	ldr	r3, [r7, #24]
 80057fa:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005804:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005808:	429a      	cmp	r2, r3
 800580a:	d121      	bne.n	8005850 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800581e:	2201      	movs	r2, #1
 8005820:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800582e:	6a3b      	ldr	r3, [r7, #32]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10a      	bne.n	8005850 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	69fa      	ldr	r2, [r7, #28]
 8005844:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005848:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800584c:	6053      	str	r3, [r2, #4]
            break;
 800584e:	e007      	b.n	8005860 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	3301      	adds	r3, #1
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800585c:	429a      	cmp	r2, r3
 800585e:	d3b4      	bcc.n	80057ca <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800586e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4618      	mov	r0, r3
 8005876:	f005 f8d3 	bl	800aa20 <USB_ReadInterrupts>
 800587a:	4603      	mov	r3, r0
 800587c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005884:	d10a      	bne.n	800589c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f007 fd26 	bl	800d2d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	695a      	ldr	r2, [r3, #20]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800589a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f005 f8bd 	bl	800aa20 <USB_ReadInterrupts>
 80058a6:	4603      	mov	r3, r0
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d115      	bne.n	80058dc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	f003 0304 	and.w	r3, r3, #4
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d002      	beq.n	80058c8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f007 fd16 	bl	800d2f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6859      	ldr	r1, [r3, #4]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	605a      	str	r2, [r3, #4]
 80058d8:	e000      	b.n	80058dc <HAL_PCD_IRQHandler+0x938>
      return;
 80058da:	bf00      	nop
    }
  }
}
 80058dc:	3734      	adds	r7, #52	; 0x34
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd90      	pop	{r4, r7, pc}

080058e2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b082      	sub	sp, #8
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
 80058ea:	460b      	mov	r3, r1
 80058ec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_PCD_SetAddress+0x1a>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e013      	b.n	8005924 <HAL_PCD_SetAddress+0x42>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	78fa      	ldrb	r2, [r7, #3]
 8005908:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	78fa      	ldrb	r2, [r7, #3]
 8005912:	4611      	mov	r1, r2
 8005914:	4618      	mov	r0, r3
 8005916:	f005 f81b 	bl	800a950 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b084      	sub	sp, #16
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	4608      	mov	r0, r1
 8005936:	4611      	mov	r1, r2
 8005938:	461a      	mov	r2, r3
 800593a:	4603      	mov	r3, r0
 800593c:	70fb      	strb	r3, [r7, #3]
 800593e:	460b      	mov	r3, r1
 8005940:	803b      	strh	r3, [r7, #0]
 8005942:	4613      	mov	r3, r2
 8005944:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800594a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800594e:	2b00      	cmp	r3, #0
 8005950:	da0f      	bge.n	8005972 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005952:	78fb      	ldrb	r3, [r7, #3]
 8005954:	f003 020f 	and.w	r2, r3, #15
 8005958:	4613      	mov	r3, r2
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	4413      	add	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	3338      	adds	r3, #56	; 0x38
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	4413      	add	r3, r2
 8005966:	3304      	adds	r3, #4
 8005968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2201      	movs	r2, #1
 800596e:	705a      	strb	r2, [r3, #1]
 8005970:	e00f      	b.n	8005992 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	f003 020f 	and.w	r2, r3, #15
 8005978:	4613      	mov	r3, r2
 800597a:	00db      	lsls	r3, r3, #3
 800597c:	4413      	add	r3, r2
 800597e:	009b      	lsls	r3, r3, #2
 8005980:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	3304      	adds	r3, #4
 800598a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2200      	movs	r2, #0
 8005990:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005992:	78fb      	ldrb	r3, [r7, #3]
 8005994:	f003 030f 	and.w	r3, r3, #15
 8005998:	b2da      	uxtb	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800599e:	883a      	ldrh	r2, [r7, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	78ba      	ldrb	r2, [r7, #2]
 80059a8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	785b      	ldrb	r3, [r3, #1]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d004      	beq.n	80059bc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80059bc:	78bb      	ldrb	r3, [r7, #2]
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d102      	bne.n	80059c8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <HAL_PCD_EP_Open+0xaa>
 80059d2:	2302      	movs	r3, #2
 80059d4:	e00e      	b.n	80059f4 <HAL_PCD_EP_Open+0xc8>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68f9      	ldr	r1, [r7, #12]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f004 f89b 	bl	8009b20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80059f2:	7afb      	ldrb	r3, [r7, #11]
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	460b      	mov	r3, r1
 8005a06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	da0f      	bge.n	8005a30 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a10:	78fb      	ldrb	r3, [r7, #3]
 8005a12:	f003 020f 	and.w	r2, r3, #15
 8005a16:	4613      	mov	r3, r2
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	3338      	adds	r3, #56	; 0x38
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	4413      	add	r3, r2
 8005a24:	3304      	adds	r3, #4
 8005a26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	705a      	strb	r2, [r3, #1]
 8005a2e:	e00f      	b.n	8005a50 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	f003 020f 	and.w	r2, r3, #15
 8005a36:	4613      	mov	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	4413      	add	r3, r2
 8005a3c:	009b      	lsls	r3, r3, #2
 8005a3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a42:	687a      	ldr	r2, [r7, #4]
 8005a44:	4413      	add	r3, r2
 8005a46:	3304      	adds	r3, #4
 8005a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a50:	78fb      	ldrb	r3, [r7, #3]
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d101      	bne.n	8005a6a <HAL_PCD_EP_Close+0x6e>
 8005a66:	2302      	movs	r3, #2
 8005a68:	e00e      	b.n	8005a88 <HAL_PCD_EP_Close+0x8c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68f9      	ldr	r1, [r7, #12]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f004 f8d9 	bl	8009c30 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	607a      	str	r2, [r7, #4]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	460b      	mov	r3, r1
 8005a9e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aa0:	7afb      	ldrb	r3, [r7, #11]
 8005aa2:	f003 020f 	and.w	r2, r3, #15
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	00db      	lsls	r3, r3, #3
 8005aaa:	4413      	add	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	3304      	adds	r3, #4
 8005ab8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ad2:	7afb      	ldrb	r3, [r7, #11]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d102      	bne.n	8005aec <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005aec:	7afb      	ldrb	r3, [r7, #11]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	6979      	ldr	r1, [r7, #20]
 8005b04:	f004 fbb8 	bl	800a278 <USB_EP0StartXfer>
 8005b08:	e008      	b.n	8005b1c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6818      	ldr	r0, [r3, #0]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	b2db      	uxtb	r3, r3
 8005b14:	461a      	mov	r2, r3
 8005b16:	6979      	ldr	r1, [r7, #20]
 8005b18:	f004 f966 	bl	8009de8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}

08005b26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	460b      	mov	r3, r1
 8005b30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b32:	78fb      	ldrb	r3, [r7, #3]
 8005b34:	f003 020f 	and.w	r2, r3, #15
 8005b38:	6879      	ldr	r1, [r7, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	4413      	add	r3, r2
 8005b40:	009b      	lsls	r3, r3, #2
 8005b42:	440b      	add	r3, r1
 8005b44:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005b48:	681b      	ldr	r3, [r3, #0]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b086      	sub	sp, #24
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	60f8      	str	r0, [r7, #12]
 8005b5e:	607a      	str	r2, [r7, #4]
 8005b60:	603b      	str	r3, [r7, #0]
 8005b62:	460b      	mov	r3, r1
 8005b64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b66:	7afb      	ldrb	r3, [r7, #11]
 8005b68:	f003 020f 	and.w	r2, r3, #15
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	4413      	add	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	3338      	adds	r3, #56	; 0x38
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4413      	add	r3, r2
 8005b7a:	3304      	adds	r3, #4
 8005b7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	2201      	movs	r2, #1
 8005b94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b96:	7afb      	ldrb	r3, [r7, #11]
 8005b98:	f003 030f 	and.w	r3, r3, #15
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d102      	bne.n	8005bb0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005bb0:	7afb      	ldrb	r3, [r7, #11]
 8005bb2:	f003 030f 	and.w	r3, r3, #15
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d109      	bne.n	8005bce <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	691b      	ldr	r3, [r3, #16]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6979      	ldr	r1, [r7, #20]
 8005bc8:	f004 fb56 	bl	800a278 <USB_EP0StartXfer>
 8005bcc:	e008      	b.n	8005be0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	461a      	mov	r2, r3
 8005bda:	6979      	ldr	r1, [r7, #20]
 8005bdc:	f004 f904 	bl	8009de8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3718      	adds	r7, #24
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}

08005bea <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	b084      	sub	sp, #16
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	f003 020f 	and.w	r2, r3, #15
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d901      	bls.n	8005c08 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e050      	b.n	8005caa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005c08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	da0f      	bge.n	8005c30 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c10:	78fb      	ldrb	r3, [r7, #3]
 8005c12:	f003 020f 	and.w	r2, r3, #15
 8005c16:	4613      	mov	r3, r2
 8005c18:	00db      	lsls	r3, r3, #3
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	3338      	adds	r3, #56	; 0x38
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	3304      	adds	r3, #4
 8005c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	705a      	strb	r2, [r3, #1]
 8005c2e:	e00d      	b.n	8005c4c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c30:	78fa      	ldrb	r2, [r7, #3]
 8005c32:	4613      	mov	r3, r2
 8005c34:	00db      	lsls	r3, r3, #3
 8005c36:	4413      	add	r3, r2
 8005c38:	009b      	lsls	r3, r3, #2
 8005c3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	4413      	add	r3, r2
 8005c42:	3304      	adds	r3, #4
 8005c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	f003 030f 	and.w	r3, r3, #15
 8005c58:	b2da      	uxtb	r2, r3
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d101      	bne.n	8005c6c <HAL_PCD_EP_SetStall+0x82>
 8005c68:	2302      	movs	r3, #2
 8005c6a:	e01e      	b.n	8005caa <HAL_PCD_EP_SetStall+0xc0>
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68f9      	ldr	r1, [r7, #12]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f004 fd94 	bl	800a7a8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c80:	78fb      	ldrb	r3, [r7, #3]
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6818      	ldr	r0, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	b2d9      	uxtb	r1, r3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f004 ff84 	bl	800aba8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ca8:	2300      	movs	r3, #0
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3710      	adds	r7, #16
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	460b      	mov	r3, r1
 8005cbc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005cbe:	78fb      	ldrb	r3, [r7, #3]
 8005cc0:	f003 020f 	and.w	r2, r3, #15
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d901      	bls.n	8005cd0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e042      	b.n	8005d56 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	da0f      	bge.n	8005cf8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cd8:	78fb      	ldrb	r3, [r7, #3]
 8005cda:	f003 020f 	and.w	r2, r3, #15
 8005cde:	4613      	mov	r3, r2
 8005ce0:	00db      	lsls	r3, r3, #3
 8005ce2:	4413      	add	r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	3338      	adds	r3, #56	; 0x38
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	4413      	add	r3, r2
 8005cec:	3304      	adds	r3, #4
 8005cee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	705a      	strb	r2, [r3, #1]
 8005cf6:	e00f      	b.n	8005d18 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cf8:	78fb      	ldrb	r3, [r7, #3]
 8005cfa:	f003 020f 	and.w	r2, r3, #15
 8005cfe:	4613      	mov	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	3304      	adds	r3, #4
 8005d10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d1e:	78fb      	ldrb	r3, [r7, #3]
 8005d20:	f003 030f 	and.w	r3, r3, #15
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_PCD_EP_ClrStall+0x86>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e00e      	b.n	8005d56 <HAL_PCD_EP_ClrStall+0xa4>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	68f9      	ldr	r1, [r7, #12]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f004 fd9c 	bl	800a884 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
 8005d66:	460b      	mov	r3, r1
 8005d68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	da0c      	bge.n	8005d8c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	4613      	mov	r3, r2
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	3338      	adds	r3, #56	; 0x38
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	4413      	add	r3, r2
 8005d86:	3304      	adds	r3, #4
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e00c      	b.n	8005da6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	4613      	mov	r3, r2
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4413      	add	r3, r2
 8005da2:	3304      	adds	r3, #4
 8005da4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68f9      	ldr	r1, [r7, #12]
 8005dac:	4618      	mov	r0, r3
 8005dae:	f004 fbbb 	bl	800a528 <USB_EPStopXfer>
 8005db2:	4603      	mov	r3, r0
 8005db4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005db6:	7afb      	ldrb	r3, [r7, #11]
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b08a      	sub	sp, #40	; 0x28
 8005dc4:	af02      	add	r7, sp, #8
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	00db      	lsls	r3, r3, #3
 8005dda:	4413      	add	r3, r2
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	3338      	adds	r3, #56	; 0x38
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	4413      	add	r3, r2
 8005de4:	3304      	adds	r3, #4
 8005de6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a1a      	ldr	r2, [r3, #32]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d901      	bls.n	8005df8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e06c      	b.n	8005ed2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	699a      	ldr	r2, [r3, #24]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	69fa      	ldr	r2, [r7, #28]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d902      	bls.n	8005e14 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	3303      	adds	r3, #3
 8005e18:	089b      	lsrs	r3, r3, #2
 8005e1a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e1c:	e02b      	b.n	8005e76 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d902      	bls.n	8005e3a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	3303      	adds	r3, #3
 8005e3e:	089b      	lsrs	r3, r3, #2
 8005e40:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	6919      	ldr	r1, [r3, #16]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	9300      	str	r3, [sp, #0]
 8005e56:	4603      	mov	r3, r0
 8005e58:	6978      	ldr	r0, [r7, #20]
 8005e5a:	f004 fc0f 	bl	800a67c <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	441a      	add	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a1a      	ldr	r2, [r3, #32]
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	441a      	add	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	015a      	lsls	r2, r3, #5
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	69ba      	ldr	r2, [r7, #24]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d809      	bhi.n	8005ea0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	6a1a      	ldr	r2, [r3, #32]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d203      	bcs.n	8005ea0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1be      	bne.n	8005e1e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	699a      	ldr	r2, [r3, #24]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d811      	bhi.n	8005ed0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	f003 030f 	and.w	r3, r3, #15
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	43db      	mvns	r3, r3
 8005ec6:	6939      	ldr	r1, [r7, #16]
 8005ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ecc:	4013      	ands	r3, r2
 8005ece:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
	...

08005edc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b088      	sub	sp, #32
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	333c      	adds	r3, #60	; 0x3c
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	015a      	lsls	r2, r3, #5
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d17b      	bne.n	800600a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	f003 0308 	and.w	r3, r3, #8
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d015      	beq.n	8005f48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	4a61      	ldr	r2, [pc, #388]	; (80060a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	f240 80b9 	bls.w	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	f000 80b3 	beq.w	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f44:	6093      	str	r3, [r2, #8]
 8005f46:	e0a7      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	f003 0320 	and.w	r3, r3, #32
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d009      	beq.n	8005f66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f5e:	461a      	mov	r2, r3
 8005f60:	2320      	movs	r3, #32
 8005f62:	6093      	str	r3, [r2, #8]
 8005f64:	e098      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f040 8093 	bne.w	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	4a4b      	ldr	r2, [pc, #300]	; (80060a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d90f      	bls.n	8005f9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d00a      	beq.n	8005f9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f90:	461a      	mov	r2, r3
 8005f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f96:	6093      	str	r3, [r2, #8]
 8005f98:	e07e      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	4613      	mov	r3, r2
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	4413      	add	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4413      	add	r3, r2
 8005fac:	3304      	adds	r3, #4
 8005fae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	0159      	lsls	r1, r3, #5
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	440b      	add	r3, r1
 8005fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc0:	691b      	ldr	r3, [r3, #16]
 8005fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fc6:	1ad2      	subs	r2, r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d114      	bne.n	8005ffc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	2101      	movs	r1, #1
 8005fe8:	f004 fdde 	bl	800aba8 <USB_EP0_OutStart>
 8005fec:	e006      	b.n	8005ffc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	691a      	ldr	r2, [r3, #16]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	441a      	add	r2, r3
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f007 f8a4 	bl	800d150 <HAL_PCD_DataOutStageCallback>
 8006008:	e046      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	4a26      	ldr	r2, [pc, #152]	; (80060a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d124      	bne.n	800605c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	461a      	mov	r2, r3
 800602a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800602e:	6093      	str	r3, [r2, #8]
 8006030:	e032      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006032:	693b      	ldr	r3, [r7, #16]
 8006034:	f003 0320 	and.w	r3, r3, #32
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	4413      	add	r3, r2
 8006044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006048:	461a      	mov	r2, r3
 800604a:	2320      	movs	r3, #32
 800604c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	4619      	mov	r1, r3
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f007 f87b 	bl	800d150 <HAL_PCD_DataOutStageCallback>
 800605a:	e01d      	b.n	8006098 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d114      	bne.n	800608c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	4613      	mov	r3, r2
 8006068:	00db      	lsls	r3, r3, #3
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d108      	bne.n	800608c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6818      	ldr	r0, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006084:	461a      	mov	r2, r3
 8006086:	2100      	movs	r1, #0
 8006088:	f004 fd8e 	bl	800aba8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	b2db      	uxtb	r3, r3
 8006090:	4619      	mov	r1, r3
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f007 f85c 	bl	800d150 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	3720      	adds	r7, #32
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	4f54300a 	.word	0x4f54300a
 80060a8:	4f54310a 	.word	0x4f54310a

080060ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	333c      	adds	r3, #60	; 0x3c
 80060c4:	3304      	adds	r3, #4
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	015a      	lsls	r2, r3, #5
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	4413      	add	r3, r2
 80060d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d6:	689b      	ldr	r3, [r3, #8]
 80060d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	4a15      	ldr	r2, [pc, #84]	; (8006134 <PCD_EP_OutSetupPacket_int+0x88>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d90e      	bls.n	8006100 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d009      	beq.n	8006100 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f8:	461a      	mov	r2, r3
 80060fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f007 f813 	bl	800d12c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a0a      	ldr	r2, [pc, #40]	; (8006134 <PCD_EP_OutSetupPacket_int+0x88>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d90c      	bls.n	8006128 <PCD_EP_OutSetupPacket_int+0x7c>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d108      	bne.n	8006128 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006120:	461a      	mov	r2, r3
 8006122:	2101      	movs	r1, #1
 8006124:	f004 fd40 	bl	800aba8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006128:	2300      	movs	r3, #0
}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	4f54300a 	.word	0x4f54300a

08006138 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006138:	b480      	push	{r7}
 800613a:	b085      	sub	sp, #20
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	460b      	mov	r3, r1
 8006142:	70fb      	strb	r3, [r7, #3]
 8006144:	4613      	mov	r3, r2
 8006146:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d107      	bne.n	8006166 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006156:	883b      	ldrh	r3, [r7, #0]
 8006158:	0419      	lsls	r1, r3, #16
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	430a      	orrs	r2, r1
 8006162:	629a      	str	r2, [r3, #40]	; 0x28
 8006164:	e028      	b.n	80061b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	0c1b      	lsrs	r3, r3, #16
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	4413      	add	r3, r2
 8006172:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006174:	2300      	movs	r3, #0
 8006176:	73fb      	strb	r3, [r7, #15]
 8006178:	e00d      	b.n	8006196 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	3340      	adds	r3, #64	; 0x40
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	0c1b      	lsrs	r3, r3, #16
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	4413      	add	r3, r2
 800618e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	3301      	adds	r3, #1
 8006194:	73fb      	strb	r3, [r7, #15]
 8006196:	7bfa      	ldrb	r2, [r7, #15]
 8006198:	78fb      	ldrb	r3, [r7, #3]
 800619a:	3b01      	subs	r3, #1
 800619c:	429a      	cmp	r2, r3
 800619e:	d3ec      	bcc.n	800617a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80061a0:	883b      	ldrh	r3, [r7, #0]
 80061a2:	0418      	lsls	r0, r3, #16
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6819      	ldr	r1, [r3, #0]
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	4302      	orrs	r2, r0
 80061b0:	3340      	adds	r3, #64	; 0x40
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	440b      	add	r3, r1
 80061b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
 80061ce:	460b      	mov	r3, r1
 80061d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	887a      	ldrh	r2, [r7, #2]
 80061d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80061da:	2300      	movs	r3, #0
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	460b      	mov	r3, r1
 80061f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d101      	bne.n	8006212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e267      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d075      	beq.n	800630a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800621e:	4b88      	ldr	r3, [pc, #544]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f003 030c 	and.w	r3, r3, #12
 8006226:	2b04      	cmp	r3, #4
 8006228:	d00c      	beq.n	8006244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800622a:	4b85      	ldr	r3, [pc, #532]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006232:	2b08      	cmp	r3, #8
 8006234:	d112      	bne.n	800625c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006236:	4b82      	ldr	r3, [pc, #520]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800623e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006242:	d10b      	bne.n	800625c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006244:	4b7e      	ldr	r3, [pc, #504]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d05b      	beq.n	8006308 <HAL_RCC_OscConfig+0x108>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d157      	bne.n	8006308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e242      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006264:	d106      	bne.n	8006274 <HAL_RCC_OscConfig+0x74>
 8006266:	4b76      	ldr	r3, [pc, #472]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a75      	ldr	r2, [pc, #468]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800626c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	e01d      	b.n	80062b0 <HAL_RCC_OscConfig+0xb0>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800627c:	d10c      	bne.n	8006298 <HAL_RCC_OscConfig+0x98>
 800627e:	4b70      	ldr	r3, [pc, #448]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6f      	ldr	r2, [pc, #444]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006288:	6013      	str	r3, [r2, #0]
 800628a:	4b6d      	ldr	r3, [pc, #436]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a6c      	ldr	r2, [pc, #432]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006294:	6013      	str	r3, [r2, #0]
 8006296:	e00b      	b.n	80062b0 <HAL_RCC_OscConfig+0xb0>
 8006298:	4b69      	ldr	r3, [pc, #420]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a68      	ldr	r2, [pc, #416]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800629e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a2:	6013      	str	r3, [r2, #0]
 80062a4:	4b66      	ldr	r3, [pc, #408]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a65      	ldr	r2, [pc, #404]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d013      	beq.n	80062e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062b8:	f7fd fab6 	bl	8003828 <HAL_GetTick>
 80062bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062c0:	f7fd fab2 	bl	8003828 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b64      	cmp	r3, #100	; 0x64
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e207      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	4b5b      	ldr	r3, [pc, #364]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d0f0      	beq.n	80062c0 <HAL_RCC_OscConfig+0xc0>
 80062de:	e014      	b.n	800630a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062e0:	f7fd faa2 	bl	8003828 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062e8:	f7fd fa9e 	bl	8003828 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b64      	cmp	r3, #100	; 0x64
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e1f3      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062fa:	4b51      	ldr	r3, [pc, #324]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d1f0      	bne.n	80062e8 <HAL_RCC_OscConfig+0xe8>
 8006306:	e000      	b.n	800630a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b00      	cmp	r3, #0
 8006314:	d063      	beq.n	80063de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006316:	4b4a      	ldr	r3, [pc, #296]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006322:	4b47      	ldr	r3, [pc, #284]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800632a:	2b08      	cmp	r3, #8
 800632c:	d11c      	bne.n	8006368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800632e:	4b44      	ldr	r3, [pc, #272]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d116      	bne.n	8006368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800633a:	4b41      	ldr	r3, [pc, #260]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d005      	beq.n	8006352 <HAL_RCC_OscConfig+0x152>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d001      	beq.n	8006352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e1c7      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006352:	4b3b      	ldr	r3, [pc, #236]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	4937      	ldr	r1, [pc, #220]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006362:	4313      	orrs	r3, r2
 8006364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006366:	e03a      	b.n	80063de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d020      	beq.n	80063b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006370:	4b34      	ldr	r3, [pc, #208]	; (8006444 <HAL_RCC_OscConfig+0x244>)
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006376:	f7fd fa57 	bl	8003828 <HAL_GetTick>
 800637a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800637c:	e008      	b.n	8006390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800637e:	f7fd fa53 	bl	8003828 <HAL_GetTick>
 8006382:	4602      	mov	r2, r0
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	1ad3      	subs	r3, r2, r3
 8006388:	2b02      	cmp	r3, #2
 800638a:	d901      	bls.n	8006390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800638c:	2303      	movs	r3, #3
 800638e:	e1a8      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006390:	4b2b      	ldr	r3, [pc, #172]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0302 	and.w	r3, r3, #2
 8006398:	2b00      	cmp	r3, #0
 800639a:	d0f0      	beq.n	800637e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800639c:	4b28      	ldr	r3, [pc, #160]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	00db      	lsls	r3, r3, #3
 80063aa:	4925      	ldr	r1, [pc, #148]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	600b      	str	r3, [r1, #0]
 80063b0:	e015      	b.n	80063de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063b2:	4b24      	ldr	r3, [pc, #144]	; (8006444 <HAL_RCC_OscConfig+0x244>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b8:	f7fd fa36 	bl	8003828 <HAL_GetTick>
 80063bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063be:	e008      	b.n	80063d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063c0:	f7fd fa32 	bl	8003828 <HAL_GetTick>
 80063c4:	4602      	mov	r2, r0
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d901      	bls.n	80063d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e187      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063d2:	4b1b      	ldr	r3, [pc, #108]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f003 0302 	and.w	r3, r3, #2
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d1f0      	bne.n	80063c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d036      	beq.n	8006458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	695b      	ldr	r3, [r3, #20]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d016      	beq.n	8006420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063f2:	4b15      	ldr	r3, [pc, #84]	; (8006448 <HAL_RCC_OscConfig+0x248>)
 80063f4:	2201      	movs	r2, #1
 80063f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063f8:	f7fd fa16 	bl	8003828 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006400:	f7fd fa12 	bl	8003828 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e167      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006412:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <HAL_RCC_OscConfig+0x240>)
 8006414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006416:	f003 0302 	and.w	r3, r3, #2
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0x200>
 800641e:	e01b      	b.n	8006458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006420:	4b09      	ldr	r3, [pc, #36]	; (8006448 <HAL_RCC_OscConfig+0x248>)
 8006422:	2200      	movs	r2, #0
 8006424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006426:	f7fd f9ff 	bl	8003828 <HAL_GetTick>
 800642a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800642c:	e00e      	b.n	800644c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800642e:	f7fd f9fb 	bl	8003828 <HAL_GetTick>
 8006432:	4602      	mov	r2, r0
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	2b02      	cmp	r3, #2
 800643a:	d907      	bls.n	800644c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800643c:	2303      	movs	r3, #3
 800643e:	e150      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
 8006440:	40023800 	.word	0x40023800
 8006444:	42470000 	.word	0x42470000
 8006448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800644c:	4b88      	ldr	r3, [pc, #544]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800644e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1ea      	bne.n	800642e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f003 0304 	and.w	r3, r3, #4
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8097 	beq.w	8006594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006466:	2300      	movs	r3, #0
 8006468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800646a:	4b81      	ldr	r3, [pc, #516]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10f      	bne.n	8006496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006476:	2300      	movs	r3, #0
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	4b7d      	ldr	r3, [pc, #500]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647e:	4a7c      	ldr	r2, [pc, #496]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006484:	6413      	str	r3, [r2, #64]	; 0x40
 8006486:	4b7a      	ldr	r3, [pc, #488]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648e:	60bb      	str	r3, [r7, #8]
 8006490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006492:	2301      	movs	r3, #1
 8006494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006496:	4b77      	ldr	r3, [pc, #476]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d118      	bne.n	80064d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064a2:	4b74      	ldr	r3, [pc, #464]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4a73      	ldr	r2, [pc, #460]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 80064a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064ae:	f7fd f9bb 	bl	8003828 <HAL_GetTick>
 80064b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064b4:	e008      	b.n	80064c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064b6:	f7fd f9b7 	bl	8003828 <HAL_GetTick>
 80064ba:	4602      	mov	r2, r0
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	1ad3      	subs	r3, r2, r3
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d901      	bls.n	80064c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064c4:	2303      	movs	r3, #3
 80064c6:	e10c      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064c8:	4b6a      	ldr	r3, [pc, #424]	; (8006674 <HAL_RCC_OscConfig+0x474>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d0f0      	beq.n	80064b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	689b      	ldr	r3, [r3, #8]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d106      	bne.n	80064ea <HAL_RCC_OscConfig+0x2ea>
 80064dc:	4b64      	ldr	r3, [pc, #400]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064e0:	4a63      	ldr	r2, [pc, #396]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064e2:	f043 0301 	orr.w	r3, r3, #1
 80064e6:	6713      	str	r3, [r2, #112]	; 0x70
 80064e8:	e01c      	b.n	8006524 <HAL_RCC_OscConfig+0x324>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	2b05      	cmp	r3, #5
 80064f0:	d10c      	bne.n	800650c <HAL_RCC_OscConfig+0x30c>
 80064f2:	4b5f      	ldr	r3, [pc, #380]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f6:	4a5e      	ldr	r2, [pc, #376]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80064f8:	f043 0304 	orr.w	r3, r3, #4
 80064fc:	6713      	str	r3, [r2, #112]	; 0x70
 80064fe:	4b5c      	ldr	r3, [pc, #368]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006502:	4a5b      	ldr	r2, [pc, #364]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006504:	f043 0301 	orr.w	r3, r3, #1
 8006508:	6713      	str	r3, [r2, #112]	; 0x70
 800650a:	e00b      	b.n	8006524 <HAL_RCC_OscConfig+0x324>
 800650c:	4b58      	ldr	r3, [pc, #352]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800650e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006510:	4a57      	ldr	r2, [pc, #348]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006512:	f023 0301 	bic.w	r3, r3, #1
 8006516:	6713      	str	r3, [r2, #112]	; 0x70
 8006518:	4b55      	ldr	r3, [pc, #340]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800651a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800651c:	4a54      	ldr	r2, [pc, #336]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800651e:	f023 0304 	bic.w	r3, r3, #4
 8006522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d015      	beq.n	8006558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fd f97c 	bl	8003828 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006532:	e00a      	b.n	800654a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006534:	f7fd f978 	bl	8003828 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006542:	4293      	cmp	r3, r2
 8006544:	d901      	bls.n	800654a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006546:	2303      	movs	r3, #3
 8006548:	e0cb      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800654a:	4b49      	ldr	r3, [pc, #292]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800654c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b00      	cmp	r3, #0
 8006554:	d0ee      	beq.n	8006534 <HAL_RCC_OscConfig+0x334>
 8006556:	e014      	b.n	8006582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006558:	f7fd f966 	bl	8003828 <HAL_GetTick>
 800655c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800655e:	e00a      	b.n	8006576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006560:	f7fd f962 	bl	8003828 <HAL_GetTick>
 8006564:	4602      	mov	r2, r0
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	1ad3      	subs	r3, r2, r3
 800656a:	f241 3288 	movw	r2, #5000	; 0x1388
 800656e:	4293      	cmp	r3, r2
 8006570:	d901      	bls.n	8006576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006572:	2303      	movs	r3, #3
 8006574:	e0b5      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006576:	4b3e      	ldr	r3, [pc, #248]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800657a:	f003 0302 	and.w	r3, r3, #2
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1ee      	bne.n	8006560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006582:	7dfb      	ldrb	r3, [r7, #23]
 8006584:	2b01      	cmp	r3, #1
 8006586:	d105      	bne.n	8006594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006588:	4b39      	ldr	r3, [pc, #228]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	4a38      	ldr	r2, [pc, #224]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800658e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	2b00      	cmp	r3, #0
 800659a:	f000 80a1 	beq.w	80066e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800659e:	4b34      	ldr	r3, [pc, #208]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80065a0:	689b      	ldr	r3, [r3, #8]
 80065a2:	f003 030c 	and.w	r3, r3, #12
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d05c      	beq.n	8006664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d141      	bne.n	8006636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065b2:	4b31      	ldr	r3, [pc, #196]	; (8006678 <HAL_RCC_OscConfig+0x478>)
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065b8:	f7fd f936 	bl	8003828 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065be:	e008      	b.n	80065d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065c0:	f7fd f932 	bl	8003828 <HAL_GetTick>
 80065c4:	4602      	mov	r2, r0
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	2b02      	cmp	r3, #2
 80065cc:	d901      	bls.n	80065d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80065ce:	2303      	movs	r3, #3
 80065d0:	e087      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065d2:	4b27      	ldr	r3, [pc, #156]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1f0      	bne.n	80065c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69da      	ldr	r2, [r3, #28]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	431a      	orrs	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ec:	019b      	lsls	r3, r3, #6
 80065ee:	431a      	orrs	r2, r3
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f4:	085b      	lsrs	r3, r3, #1
 80065f6:	3b01      	subs	r3, #1
 80065f8:	041b      	lsls	r3, r3, #16
 80065fa:	431a      	orrs	r2, r3
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006600:	061b      	lsls	r3, r3, #24
 8006602:	491b      	ldr	r1, [pc, #108]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006604:	4313      	orrs	r3, r2
 8006606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006608:	4b1b      	ldr	r3, [pc, #108]	; (8006678 <HAL_RCC_OscConfig+0x478>)
 800660a:	2201      	movs	r2, #1
 800660c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800660e:	f7fd f90b 	bl	8003828 <HAL_GetTick>
 8006612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006614:	e008      	b.n	8006628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006616:	f7fd f907 	bl	8003828 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	2b02      	cmp	r3, #2
 8006622:	d901      	bls.n	8006628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e05c      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006628:	4b11      	ldr	r3, [pc, #68]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d0f0      	beq.n	8006616 <HAL_RCC_OscConfig+0x416>
 8006634:	e054      	b.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006636:	4b10      	ldr	r3, [pc, #64]	; (8006678 <HAL_RCC_OscConfig+0x478>)
 8006638:	2200      	movs	r2, #0
 800663a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663c:	f7fd f8f4 	bl	8003828 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006644:	f7fd f8f0 	bl	8003828 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e045      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <HAL_RCC_OscConfig+0x470>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f0      	bne.n	8006644 <HAL_RCC_OscConfig+0x444>
 8006662:	e03d      	b.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d107      	bne.n	800667c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800666c:	2301      	movs	r3, #1
 800666e:	e038      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
 8006670:	40023800 	.word	0x40023800
 8006674:	40007000 	.word	0x40007000
 8006678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800667c:	4b1b      	ldr	r3, [pc, #108]	; (80066ec <HAL_RCC_OscConfig+0x4ec>)
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d028      	beq.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006694:	429a      	cmp	r2, r3
 8006696:	d121      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d11a      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066a6:	68fa      	ldr	r2, [r7, #12]
 80066a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066b4:	4293      	cmp	r3, r2
 80066b6:	d111      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066c2:	085b      	lsrs	r3, r3, #1
 80066c4:	3b01      	subs	r3, #1
 80066c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066c8:	429a      	cmp	r2, r3
 80066ca:	d107      	bne.n	80066dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066d8:	429a      	cmp	r2, r3
 80066da:	d001      	beq.n	80066e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e000      	b.n	80066e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3718      	adds	r7, #24
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	40023800 	.word	0x40023800

080066f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0cc      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006704:	4b68      	ldr	r3, [pc, #416]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 0307 	and.w	r3, r3, #7
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d90c      	bls.n	800672c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006712:	4b65      	ldr	r3, [pc, #404]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006714:	683a      	ldr	r2, [r7, #0]
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800671a:	4b63      	ldr	r3, [pc, #396]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0307 	and.w	r3, r3, #7
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d001      	beq.n	800672c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	e0b8      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d020      	beq.n	800677a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0304 	and.w	r3, r3, #4
 8006740:	2b00      	cmp	r3, #0
 8006742:	d005      	beq.n	8006750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006744:	4b59      	ldr	r3, [pc, #356]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	4a58      	ldr	r2, [pc, #352]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800674a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800674e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f003 0308 	and.w	r3, r3, #8
 8006758:	2b00      	cmp	r3, #0
 800675a:	d005      	beq.n	8006768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800675c:	4b53      	ldr	r3, [pc, #332]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	4a52      	ldr	r2, [pc, #328]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006768:	4b50      	ldr	r3, [pc, #320]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	494d      	ldr	r1, [pc, #308]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006776:	4313      	orrs	r3, r2
 8006778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b00      	cmp	r3, #0
 8006784:	d044      	beq.n	8006810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d107      	bne.n	800679e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678e:	4b47      	ldr	r3, [pc, #284]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d119      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e07f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	2b02      	cmp	r3, #2
 80067a4:	d003      	beq.n	80067ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d107      	bne.n	80067be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ae:	4b3f      	ldr	r3, [pc, #252]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e06f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067be:	4b3b      	ldr	r3, [pc, #236]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e067      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ce:	4b37      	ldr	r3, [pc, #220]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f023 0203 	bic.w	r2, r3, #3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4934      	ldr	r1, [pc, #208]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80067e0:	f7fd f822 	bl	8003828 <HAL_GetTick>
 80067e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e6:	e00a      	b.n	80067fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e8:	f7fd f81e 	bl	8003828 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e04f      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fe:	4b2b      	ldr	r3, [pc, #172]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 020c 	and.w	r2, r3, #12
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	429a      	cmp	r2, r3
 800680e:	d1eb      	bne.n	80067e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006810:	4b25      	ldr	r3, [pc, #148]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 0307 	and.w	r3, r3, #7
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d20c      	bcs.n	8006838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681e:	4b22      	ldr	r3, [pc, #136]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	b2d2      	uxtb	r2, r2
 8006824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006826:	4b20      	ldr	r3, [pc, #128]	; (80068a8 <HAL_RCC_ClockConfig+0x1b8>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	429a      	cmp	r2, r3
 8006832:	d001      	beq.n	8006838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e032      	b.n	800689e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0304 	and.w	r3, r3, #4
 8006840:	2b00      	cmp	r3, #0
 8006842:	d008      	beq.n	8006856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006844:	4b19      	ldr	r3, [pc, #100]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	68db      	ldr	r3, [r3, #12]
 8006850:	4916      	ldr	r1, [pc, #88]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	4313      	orrs	r3, r2
 8006854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006862:	4b12      	ldr	r3, [pc, #72]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006864:	689b      	ldr	r3, [r3, #8]
 8006866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	00db      	lsls	r3, r3, #3
 8006870:	490e      	ldr	r1, [pc, #56]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 8006872:	4313      	orrs	r3, r2
 8006874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006876:	f000 f821 	bl	80068bc <HAL_RCC_GetSysClockFreq>
 800687a:	4602      	mov	r2, r0
 800687c:	4b0b      	ldr	r3, [pc, #44]	; (80068ac <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	091b      	lsrs	r3, r3, #4
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	490a      	ldr	r1, [pc, #40]	; (80068b0 <HAL_RCC_ClockConfig+0x1c0>)
 8006888:	5ccb      	ldrb	r3, [r1, r3]
 800688a:	fa22 f303 	lsr.w	r3, r2, r3
 800688e:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <HAL_RCC_ClockConfig+0x1c4>)
 8006890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006892:	4b09      	ldr	r3, [pc, #36]	; (80068b8 <HAL_RCC_ClockConfig+0x1c8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4618      	mov	r0, r3
 8006898:	f7fc ff82 	bl	80037a0 <HAL_InitTick>

  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}
 80068a6:	bf00      	nop
 80068a8:	40023c00 	.word	0x40023c00
 80068ac:	40023800 	.word	0x40023800
 80068b0:	0801003c 	.word	0x0801003c
 80068b4:	20000000 	.word	0x20000000
 80068b8:	20000004 	.word	0x20000004

080068bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c0:	b094      	sub	sp, #80	; 0x50
 80068c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068c4:	2300      	movs	r3, #0
 80068c6:	647b      	str	r3, [r7, #68]	; 0x44
 80068c8:	2300      	movs	r3, #0
 80068ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068cc:	2300      	movs	r3, #0
 80068ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068d4:	4b79      	ldr	r3, [pc, #484]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	f003 030c 	and.w	r3, r3, #12
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d00d      	beq.n	80068fc <HAL_RCC_GetSysClockFreq+0x40>
 80068e0:	2b08      	cmp	r3, #8
 80068e2:	f200 80e1 	bhi.w	8006aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d002      	beq.n	80068f0 <HAL_RCC_GetSysClockFreq+0x34>
 80068ea:	2b04      	cmp	r3, #4
 80068ec:	d003      	beq.n	80068f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80068ee:	e0db      	b.n	8006aa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068f0:	4b73      	ldr	r3, [pc, #460]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 80068f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80068f4:	e0db      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068f6:	4b73      	ldr	r3, [pc, #460]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x208>)
 80068f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068fa:	e0d8      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80068fc:	4b6f      	ldr	r3, [pc, #444]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006904:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006906:	4b6d      	ldr	r3, [pc, #436]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d063      	beq.n	80069da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006912:	4b6a      	ldr	r3, [pc, #424]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	099b      	lsrs	r3, r3, #6
 8006918:	2200      	movs	r2, #0
 800691a:	63bb      	str	r3, [r7, #56]	; 0x38
 800691c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800691e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006920:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006924:	633b      	str	r3, [r7, #48]	; 0x30
 8006926:	2300      	movs	r3, #0
 8006928:	637b      	str	r3, [r7, #52]	; 0x34
 800692a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800692e:	4622      	mov	r2, r4
 8006930:	462b      	mov	r3, r5
 8006932:	f04f 0000 	mov.w	r0, #0
 8006936:	f04f 0100 	mov.w	r1, #0
 800693a:	0159      	lsls	r1, r3, #5
 800693c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006940:	0150      	lsls	r0, r2, #5
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4621      	mov	r1, r4
 8006948:	1a51      	subs	r1, r2, r1
 800694a:	6139      	str	r1, [r7, #16]
 800694c:	4629      	mov	r1, r5
 800694e:	eb63 0301 	sbc.w	r3, r3, r1
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006960:	4659      	mov	r1, fp
 8006962:	018b      	lsls	r3, r1, #6
 8006964:	4651      	mov	r1, sl
 8006966:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800696a:	4651      	mov	r1, sl
 800696c:	018a      	lsls	r2, r1, #6
 800696e:	4651      	mov	r1, sl
 8006970:	ebb2 0801 	subs.w	r8, r2, r1
 8006974:	4659      	mov	r1, fp
 8006976:	eb63 0901 	sbc.w	r9, r3, r1
 800697a:	f04f 0200 	mov.w	r2, #0
 800697e:	f04f 0300 	mov.w	r3, #0
 8006982:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006986:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800698a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800698e:	4690      	mov	r8, r2
 8006990:	4699      	mov	r9, r3
 8006992:	4623      	mov	r3, r4
 8006994:	eb18 0303 	adds.w	r3, r8, r3
 8006998:	60bb      	str	r3, [r7, #8]
 800699a:	462b      	mov	r3, r5
 800699c:	eb49 0303 	adc.w	r3, r9, r3
 80069a0:	60fb      	str	r3, [r7, #12]
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069ae:	4629      	mov	r1, r5
 80069b0:	024b      	lsls	r3, r1, #9
 80069b2:	4621      	mov	r1, r4
 80069b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80069b8:	4621      	mov	r1, r4
 80069ba:	024a      	lsls	r2, r1, #9
 80069bc:	4610      	mov	r0, r2
 80069be:	4619      	mov	r1, r3
 80069c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069c2:	2200      	movs	r2, #0
 80069c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80069c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069cc:	f7f9 fc50 	bl	8000270 <__aeabi_uldivmod>
 80069d0:	4602      	mov	r2, r0
 80069d2:	460b      	mov	r3, r1
 80069d4:	4613      	mov	r3, r2
 80069d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069d8:	e058      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069da:	4b38      	ldr	r3, [pc, #224]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	099b      	lsrs	r3, r3, #6
 80069e0:	2200      	movs	r2, #0
 80069e2:	4618      	mov	r0, r3
 80069e4:	4611      	mov	r1, r2
 80069e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069ea:	623b      	str	r3, [r7, #32]
 80069ec:	2300      	movs	r3, #0
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
 80069f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069f4:	4642      	mov	r2, r8
 80069f6:	464b      	mov	r3, r9
 80069f8:	f04f 0000 	mov.w	r0, #0
 80069fc:	f04f 0100 	mov.w	r1, #0
 8006a00:	0159      	lsls	r1, r3, #5
 8006a02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a06:	0150      	lsls	r0, r2, #5
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4641      	mov	r1, r8
 8006a0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a12:	4649      	mov	r1, r9
 8006a14:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a2c:	ebb2 040a 	subs.w	r4, r2, sl
 8006a30:	eb63 050b 	sbc.w	r5, r3, fp
 8006a34:	f04f 0200 	mov.w	r2, #0
 8006a38:	f04f 0300 	mov.w	r3, #0
 8006a3c:	00eb      	lsls	r3, r5, #3
 8006a3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a42:	00e2      	lsls	r2, r4, #3
 8006a44:	4614      	mov	r4, r2
 8006a46:	461d      	mov	r5, r3
 8006a48:	4643      	mov	r3, r8
 8006a4a:	18e3      	adds	r3, r4, r3
 8006a4c:	603b      	str	r3, [r7, #0]
 8006a4e:	464b      	mov	r3, r9
 8006a50:	eb45 0303 	adc.w	r3, r5, r3
 8006a54:	607b      	str	r3, [r7, #4]
 8006a56:	f04f 0200 	mov.w	r2, #0
 8006a5a:	f04f 0300 	mov.w	r3, #0
 8006a5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a62:	4629      	mov	r1, r5
 8006a64:	028b      	lsls	r3, r1, #10
 8006a66:	4621      	mov	r1, r4
 8006a68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	028a      	lsls	r2, r1, #10
 8006a70:	4610      	mov	r0, r2
 8006a72:	4619      	mov	r1, r3
 8006a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a76:	2200      	movs	r2, #0
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	61fa      	str	r2, [r7, #28]
 8006a7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a80:	f7f9 fbf6 	bl	8000270 <__aeabi_uldivmod>
 8006a84:	4602      	mov	r2, r0
 8006a86:	460b      	mov	r3, r1
 8006a88:	4613      	mov	r3, r2
 8006a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a8c:	4b0b      	ldr	r3, [pc, #44]	; (8006abc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	0c1b      	lsrs	r3, r3, #16
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	3301      	adds	r3, #1
 8006a98:	005b      	lsls	r3, r3, #1
 8006a9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006a9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aa6:	e002      	b.n	8006aae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006aa8:	4b05      	ldr	r3, [pc, #20]	; (8006ac0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006aaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006aae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3750      	adds	r7, #80	; 0x50
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aba:	bf00      	nop
 8006abc:	40023800 	.word	0x40023800
 8006ac0:	00f42400 	.word	0x00f42400
 8006ac4:	007a1200 	.word	0x007a1200

08006ac8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006acc:	4b03      	ldr	r3, [pc, #12]	; (8006adc <HAL_RCC_GetHCLKFreq+0x14>)
 8006ace:	681b      	ldr	r3, [r3, #0]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
 8006ada:	bf00      	nop
 8006adc:	20000000 	.word	0x20000000

08006ae0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ae4:	f7ff fff0 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8006ae8:	4602      	mov	r2, r0
 8006aea:	4b05      	ldr	r3, [pc, #20]	; (8006b00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	0a9b      	lsrs	r3, r3, #10
 8006af0:	f003 0307 	and.w	r3, r3, #7
 8006af4:	4903      	ldr	r1, [pc, #12]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006af6:	5ccb      	ldrb	r3, [r1, r3]
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	40023800 	.word	0x40023800
 8006b04:	0801004c 	.word	0x0801004c

08006b08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b0c:	f7ff ffdc 	bl	8006ac8 <HAL_RCC_GetHCLKFreq>
 8006b10:	4602      	mov	r2, r0
 8006b12:	4b05      	ldr	r3, [pc, #20]	; (8006b28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	0b5b      	lsrs	r3, r3, #13
 8006b18:	f003 0307 	and.w	r3, r3, #7
 8006b1c:	4903      	ldr	r1, [pc, #12]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b1e:	5ccb      	ldrb	r3, [r1, r3]
 8006b20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	40023800 	.word	0x40023800
 8006b2c:	0801004c 	.word	0x0801004c

08006b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d101      	bne.n	8006b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e07b      	b.n	8006c3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d108      	bne.n	8006b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b52:	d009      	beq.n	8006b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2200      	movs	r2, #0
 8006b58:	61da      	str	r2, [r3, #28]
 8006b5a:	e005      	b.n	8006b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d106      	bne.n	8006b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7fc f97e 	bl	8002e84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b9e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	691b      	ldr	r3, [r3, #16]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	431a      	orrs	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	699b      	ldr	r3, [r3, #24]
 8006bd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd8:	431a      	orrs	r2, r3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69db      	ldr	r3, [r3, #28]
 8006bde:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006be2:	431a      	orrs	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bec:	ea42 0103 	orr.w	r1, r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	699b      	ldr	r3, [r3, #24]
 8006c04:	0c1b      	lsrs	r3, r3, #16
 8006c06:	f003 0104 	and.w	r1, r3, #4
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0e:	f003 0210 	and.w	r2, r3, #16
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	430a      	orrs	r2, r1
 8006c18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69da      	ldr	r2, [r3, #28]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006c28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b082      	sub	sp, #8
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d101      	bne.n	8006c54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e041      	b.n	8006cd8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d106      	bne.n	8006c6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2200      	movs	r2, #0
 8006c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7fc f953 	bl	8002f14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2202      	movs	r2, #2
 8006c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4610      	mov	r0, r2
 8006c82:	f000 fd01 	bl	8007688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2201      	movs	r2, #1
 8006c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2201      	movs	r2, #1
 8006cb2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d001      	beq.n	8006cf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e046      	b.n	8006d86 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a23      	ldr	r2, [pc, #140]	; (8006d94 <HAL_TIM_Base_Start+0xb4>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d022      	beq.n	8006d50 <HAL_TIM_Base_Start+0x70>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d12:	d01d      	beq.n	8006d50 <HAL_TIM_Base_Start+0x70>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a1f      	ldr	r2, [pc, #124]	; (8006d98 <HAL_TIM_Base_Start+0xb8>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d018      	beq.n	8006d50 <HAL_TIM_Base_Start+0x70>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a1e      	ldr	r2, [pc, #120]	; (8006d9c <HAL_TIM_Base_Start+0xbc>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d013      	beq.n	8006d50 <HAL_TIM_Base_Start+0x70>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1c      	ldr	r2, [pc, #112]	; (8006da0 <HAL_TIM_Base_Start+0xc0>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d00e      	beq.n	8006d50 <HAL_TIM_Base_Start+0x70>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1b      	ldr	r2, [pc, #108]	; (8006da4 <HAL_TIM_Base_Start+0xc4>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d009      	beq.n	8006d50 <HAL_TIM_Base_Start+0x70>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a19      	ldr	r2, [pc, #100]	; (8006da8 <HAL_TIM_Base_Start+0xc8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d004      	beq.n	8006d50 <HAL_TIM_Base_Start+0x70>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a18      	ldr	r2, [pc, #96]	; (8006dac <HAL_TIM_Base_Start+0xcc>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d111      	bne.n	8006d74 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 0307 	and.w	r3, r3, #7
 8006d5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b06      	cmp	r3, #6
 8006d60:	d010      	beq.n	8006d84 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f042 0201 	orr.w	r2, r2, #1
 8006d70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d72:	e007      	b.n	8006d84 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f042 0201 	orr.w	r2, r2, #1
 8006d82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40010000 	.word	0x40010000
 8006d98:	40000400 	.word	0x40000400
 8006d9c:	40000800 	.word	0x40000800
 8006da0:	40000c00 	.word	0x40000c00
 8006da4:	40010400 	.word	0x40010400
 8006da8:	40014000 	.word	0x40014000
 8006dac:	40001800 	.word	0x40001800

08006db0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b082      	sub	sp, #8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d101      	bne.n	8006dc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	e041      	b.n	8006e46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f839 	bl	8006e4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4619      	mov	r1, r3
 8006dee:	4610      	mov	r0, r2
 8006df0:	f000 fc4a 	bl	8007688 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3708      	adds	r7, #8
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
	...

08006e64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d109      	bne.n	8006e88 <HAL_TIM_PWM_Start+0x24>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	bf14      	ite	ne
 8006e80:	2301      	movne	r3, #1
 8006e82:	2300      	moveq	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	e022      	b.n	8006ece <HAL_TIM_PWM_Start+0x6a>
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d109      	bne.n	8006ea2 <HAL_TIM_PWM_Start+0x3e>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	2b01      	cmp	r3, #1
 8006e98:	bf14      	ite	ne
 8006e9a:	2301      	movne	r3, #1
 8006e9c:	2300      	moveq	r3, #0
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	e015      	b.n	8006ece <HAL_TIM_PWM_Start+0x6a>
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b08      	cmp	r3, #8
 8006ea6:	d109      	bne.n	8006ebc <HAL_TIM_PWM_Start+0x58>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eae:	b2db      	uxtb	r3, r3
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	bf14      	ite	ne
 8006eb4:	2301      	movne	r3, #1
 8006eb6:	2300      	moveq	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	e008      	b.n	8006ece <HAL_TIM_PWM_Start+0x6a>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	bf14      	ite	ne
 8006ec8:	2301      	movne	r3, #1
 8006eca:	2300      	moveq	r3, #0
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e07c      	b.n	8006fd0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <HAL_TIM_PWM_Start+0x82>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ee4:	e013      	b.n	8006f0e <HAL_TIM_PWM_Start+0xaa>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	d104      	bne.n	8006ef6 <HAL_TIM_PWM_Start+0x92>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ef4:	e00b      	b.n	8006f0e <HAL_TIM_PWM_Start+0xaa>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b08      	cmp	r3, #8
 8006efa:	d104      	bne.n	8006f06 <HAL_TIM_PWM_Start+0xa2>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f04:	e003      	b.n	8006f0e <HAL_TIM_PWM_Start+0xaa>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2201      	movs	r2, #1
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f000 ff31 	bl	8007d7e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	4a2d      	ldr	r2, [pc, #180]	; (8006fd8 <HAL_TIM_PWM_Start+0x174>)
 8006f22:	4293      	cmp	r3, r2
 8006f24:	d004      	beq.n	8006f30 <HAL_TIM_PWM_Start+0xcc>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a2c      	ldr	r2, [pc, #176]	; (8006fdc <HAL_TIM_PWM_Start+0x178>)
 8006f2c:	4293      	cmp	r3, r2
 8006f2e:	d101      	bne.n	8006f34 <HAL_TIM_PWM_Start+0xd0>
 8006f30:	2301      	movs	r3, #1
 8006f32:	e000      	b.n	8006f36 <HAL_TIM_PWM_Start+0xd2>
 8006f34:	2300      	movs	r3, #0
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d007      	beq.n	8006f4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a22      	ldr	r2, [pc, #136]	; (8006fd8 <HAL_TIM_PWM_Start+0x174>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d022      	beq.n	8006f9a <HAL_TIM_PWM_Start+0x136>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f5c:	d01d      	beq.n	8006f9a <HAL_TIM_PWM_Start+0x136>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a1f      	ldr	r2, [pc, #124]	; (8006fe0 <HAL_TIM_PWM_Start+0x17c>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d018      	beq.n	8006f9a <HAL_TIM_PWM_Start+0x136>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a1d      	ldr	r2, [pc, #116]	; (8006fe4 <HAL_TIM_PWM_Start+0x180>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d013      	beq.n	8006f9a <HAL_TIM_PWM_Start+0x136>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a1c      	ldr	r2, [pc, #112]	; (8006fe8 <HAL_TIM_PWM_Start+0x184>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d00e      	beq.n	8006f9a <HAL_TIM_PWM_Start+0x136>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a16      	ldr	r2, [pc, #88]	; (8006fdc <HAL_TIM_PWM_Start+0x178>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d009      	beq.n	8006f9a <HAL_TIM_PWM_Start+0x136>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a18      	ldr	r2, [pc, #96]	; (8006fec <HAL_TIM_PWM_Start+0x188>)
 8006f8c:	4293      	cmp	r3, r2
 8006f8e:	d004      	beq.n	8006f9a <HAL_TIM_PWM_Start+0x136>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4a16      	ldr	r2, [pc, #88]	; (8006ff0 <HAL_TIM_PWM_Start+0x18c>)
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d111      	bne.n	8006fbe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f003 0307 	and.w	r3, r3, #7
 8006fa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2b06      	cmp	r3, #6
 8006faa:	d010      	beq.n	8006fce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f042 0201 	orr.w	r2, r2, #1
 8006fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fbc:	e007      	b.n	8006fce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	681a      	ldr	r2, [r3, #0]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f042 0201 	orr.w	r2, r2, #1
 8006fcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006fce:	2300      	movs	r3, #0
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40010000 	.word	0x40010000
 8006fdc:	40010400 	.word	0x40010400
 8006fe0:	40000400 	.word	0x40000400
 8006fe4:	40000800 	.word	0x40000800
 8006fe8:	40000c00 	.word	0x40000c00
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40001800 	.word	0x40001800

08006ff4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2200      	movs	r2, #0
 8007004:	6839      	ldr	r1, [r7, #0]
 8007006:	4618      	mov	r0, r3
 8007008:	f000 feb9 	bl	8007d7e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a2e      	ldr	r2, [pc, #184]	; (80070cc <HAL_TIM_PWM_Stop+0xd8>)
 8007012:	4293      	cmp	r3, r2
 8007014:	d004      	beq.n	8007020 <HAL_TIM_PWM_Stop+0x2c>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a2d      	ldr	r2, [pc, #180]	; (80070d0 <HAL_TIM_PWM_Stop+0xdc>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d101      	bne.n	8007024 <HAL_TIM_PWM_Stop+0x30>
 8007020:	2301      	movs	r3, #1
 8007022:	e000      	b.n	8007026 <HAL_TIM_PWM_Stop+0x32>
 8007024:	2300      	movs	r3, #0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d017      	beq.n	800705a <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	6a1a      	ldr	r2, [r3, #32]
 8007030:	f241 1311 	movw	r3, #4369	; 0x1111
 8007034:	4013      	ands	r3, r2
 8007036:	2b00      	cmp	r3, #0
 8007038:	d10f      	bne.n	800705a <HAL_TIM_PWM_Stop+0x66>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	6a1a      	ldr	r2, [r3, #32]
 8007040:	f240 4344 	movw	r3, #1092	; 0x444
 8007044:	4013      	ands	r3, r2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d107      	bne.n	800705a <HAL_TIM_PWM_Stop+0x66>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007058:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	6a1a      	ldr	r2, [r3, #32]
 8007060:	f241 1311 	movw	r3, #4369	; 0x1111
 8007064:	4013      	ands	r3, r2
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10f      	bne.n	800708a <HAL_TIM_PWM_Stop+0x96>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6a1a      	ldr	r2, [r3, #32]
 8007070:	f240 4344 	movw	r3, #1092	; 0x444
 8007074:	4013      	ands	r3, r2
 8007076:	2b00      	cmp	r3, #0
 8007078:	d107      	bne.n	800708a <HAL_TIM_PWM_Stop+0x96>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681a      	ldr	r2, [r3, #0]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f022 0201 	bic.w	r2, r2, #1
 8007088:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d104      	bne.n	800709a <HAL_TIM_PWM_Stop+0xa6>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007098:	e013      	b.n	80070c2 <HAL_TIM_PWM_Stop+0xce>
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	2b04      	cmp	r3, #4
 800709e:	d104      	bne.n	80070aa <HAL_TIM_PWM_Stop+0xb6>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070a8:	e00b      	b.n	80070c2 <HAL_TIM_PWM_Stop+0xce>
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	d104      	bne.n	80070ba <HAL_TIM_PWM_Stop+0xc6>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2201      	movs	r2, #1
 80070b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070b8:	e003      	b.n	80070c2 <HAL_TIM_PWM_Stop+0xce>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80070c2:	2300      	movs	r3, #0
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3708      	adds	r7, #8
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	40010000 	.word	0x40010000
 80070d0:	40010400 	.word	0x40010400

080070d4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80070de:	2300      	movs	r3, #0
 80070e0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	2b0c      	cmp	r3, #12
 80070e6:	d841      	bhi.n	800716c <HAL_TIM_PWM_Stop_IT+0x98>
 80070e8:	a201      	add	r2, pc, #4	; (adr r2, 80070f0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 80070ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ee:	bf00      	nop
 80070f0:	08007125 	.word	0x08007125
 80070f4:	0800716d 	.word	0x0800716d
 80070f8:	0800716d 	.word	0x0800716d
 80070fc:	0800716d 	.word	0x0800716d
 8007100:	08007137 	.word	0x08007137
 8007104:	0800716d 	.word	0x0800716d
 8007108:	0800716d 	.word	0x0800716d
 800710c:	0800716d 	.word	0x0800716d
 8007110:	08007149 	.word	0x08007149
 8007114:	0800716d 	.word	0x0800716d
 8007118:	0800716d 	.word	0x0800716d
 800711c:	0800716d 	.word	0x0800716d
 8007120:	0800715b 	.word	0x0800715b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68da      	ldr	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f022 0202 	bic.w	r2, r2, #2
 8007132:	60da      	str	r2, [r3, #12]
      break;
 8007134:	e01d      	b.n	8007172 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 0204 	bic.w	r2, r2, #4
 8007144:	60da      	str	r2, [r3, #12]
      break;
 8007146:	e014      	b.n	8007172 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68da      	ldr	r2, [r3, #12]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f022 0208 	bic.w	r2, r2, #8
 8007156:	60da      	str	r2, [r3, #12]
      break;
 8007158:	e00b      	b.n	8007172 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68da      	ldr	r2, [r3, #12]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f022 0210 	bic.w	r2, r2, #16
 8007168:	60da      	str	r2, [r3, #12]
      break;
 800716a:	e002      	b.n	8007172 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	73fb      	strb	r3, [r7, #15]
      break;
 8007170:	bf00      	nop
  }

  if (status == HAL_OK)
 8007172:	7bfb      	ldrb	r3, [r7, #15]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d161      	bne.n	800723c <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2200      	movs	r2, #0
 800717e:	6839      	ldr	r1, [r7, #0]
 8007180:	4618      	mov	r0, r3
 8007182:	f000 fdfc 	bl	8007d7e <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a2f      	ldr	r2, [pc, #188]	; (8007248 <HAL_TIM_PWM_Stop_IT+0x174>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d004      	beq.n	800719a <HAL_TIM_PWM_Stop_IT+0xc6>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	4a2d      	ldr	r2, [pc, #180]	; (800724c <HAL_TIM_PWM_Stop_IT+0x178>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d101      	bne.n	800719e <HAL_TIM_PWM_Stop_IT+0xca>
 800719a:	2301      	movs	r3, #1
 800719c:	e000      	b.n	80071a0 <HAL_TIM_PWM_Stop_IT+0xcc>
 800719e:	2300      	movs	r3, #0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d017      	beq.n	80071d4 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6a1a      	ldr	r2, [r3, #32]
 80071aa:	f241 1311 	movw	r3, #4369	; 0x1111
 80071ae:	4013      	ands	r3, r2
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d10f      	bne.n	80071d4 <HAL_TIM_PWM_Stop_IT+0x100>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	6a1a      	ldr	r2, [r3, #32]
 80071ba:	f240 4344 	movw	r3, #1092	; 0x444
 80071be:	4013      	ands	r3, r2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d107      	bne.n	80071d4 <HAL_TIM_PWM_Stop_IT+0x100>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071d2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6a1a      	ldr	r2, [r3, #32]
 80071da:	f241 1311 	movw	r3, #4369	; 0x1111
 80071de:	4013      	ands	r3, r2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10f      	bne.n	8007204 <HAL_TIM_PWM_Stop_IT+0x130>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	6a1a      	ldr	r2, [r3, #32]
 80071ea:	f240 4344 	movw	r3, #1092	; 0x444
 80071ee:	4013      	ands	r3, r2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d107      	bne.n	8007204 <HAL_TIM_PWM_Stop_IT+0x130>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d104      	bne.n	8007214 <HAL_TIM_PWM_Stop_IT+0x140>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007212:	e013      	b.n	800723c <HAL_TIM_PWM_Stop_IT+0x168>
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	2b04      	cmp	r3, #4
 8007218:	d104      	bne.n	8007224 <HAL_TIM_PWM_Stop_IT+0x150>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007222:	e00b      	b.n	800723c <HAL_TIM_PWM_Stop_IT+0x168>
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b08      	cmp	r3, #8
 8007228:	d104      	bne.n	8007234 <HAL_TIM_PWM_Stop_IT+0x160>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007232:	e003      	b.n	800723c <HAL_TIM_PWM_Stop_IT+0x168>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800723c:	7bfb      	ldrb	r3, [r7, #15]
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40010000 	.word	0x40010000
 800724c:	40010400 	.word	0x40010400

08007250 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007260:	2301      	movs	r3, #1
 8007262:	e041      	b.n	80072e8 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b00      	cmp	r3, #0
 800726e:	d106      	bne.n	800727e <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7fb fedf 	bl	800303c <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2202      	movs	r2, #2
 8007282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	3304      	adds	r3, #4
 800728e:	4619      	mov	r1, r3
 8007290:	4610      	mov	r0, r2
 8007292:	f000 f9f9 	bl	8007688 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f022 0208 	bic.w	r2, r2, #8
 80072a4:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6819      	ldr	r1, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	683a      	ldr	r2, [r7, #0]
 80072b2:	430a      	orrs	r2, r1
 80072b4:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2201      	movs	r2, #1
 80072ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2201      	movs	r2, #1
 80072c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2201      	movs	r2, #1
 80072ca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	60f8      	str	r0, [r7, #12]
 80072f8:	60b9      	str	r1, [r7, #8]
 80072fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80072fc:	2300      	movs	r3, #0
 80072fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007306:	2b01      	cmp	r3, #1
 8007308:	d101      	bne.n	800730e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800730a:	2302      	movs	r3, #2
 800730c:	e0ae      	b.n	800746c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2b0c      	cmp	r3, #12
 800731a:	f200 809f 	bhi.w	800745c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007359 	.word	0x08007359
 8007328:	0800745d 	.word	0x0800745d
 800732c:	0800745d 	.word	0x0800745d
 8007330:	0800745d 	.word	0x0800745d
 8007334:	08007399 	.word	0x08007399
 8007338:	0800745d 	.word	0x0800745d
 800733c:	0800745d 	.word	0x0800745d
 8007340:	0800745d 	.word	0x0800745d
 8007344:	080073db 	.word	0x080073db
 8007348:	0800745d 	.word	0x0800745d
 800734c:	0800745d 	.word	0x0800745d
 8007350:	0800745d 	.word	0x0800745d
 8007354:	0800741b 	.word	0x0800741b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68b9      	ldr	r1, [r7, #8]
 800735e:	4618      	mov	r0, r3
 8007360:	f000 fa32 	bl	80077c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699a      	ldr	r2, [r3, #24]
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f042 0208 	orr.w	r2, r2, #8
 8007372:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	699a      	ldr	r2, [r3, #24]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f022 0204 	bic.w	r2, r2, #4
 8007382:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	6999      	ldr	r1, [r3, #24]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	691a      	ldr	r2, [r3, #16]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	619a      	str	r2, [r3, #24]
      break;
 8007396:	e064      	b.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68b9      	ldr	r1, [r7, #8]
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 fa82 	bl	80078a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	699a      	ldr	r2, [r3, #24]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	699a      	ldr	r2, [r3, #24]
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6999      	ldr	r1, [r3, #24]
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	021a      	lsls	r2, r3, #8
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	619a      	str	r2, [r3, #24]
      break;
 80073d8:	e043      	b.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	68b9      	ldr	r1, [r7, #8]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fad7 	bl	8007994 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69da      	ldr	r2, [r3, #28]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f042 0208 	orr.w	r2, r2, #8
 80073f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69da      	ldr	r2, [r3, #28]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 0204 	bic.w	r2, r2, #4
 8007404:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69d9      	ldr	r1, [r3, #28]
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	691a      	ldr	r2, [r3, #16]
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	430a      	orrs	r2, r1
 8007416:	61da      	str	r2, [r3, #28]
      break;
 8007418:	e023      	b.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68b9      	ldr	r1, [r7, #8]
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fb2b 	bl	8007a7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69da      	ldr	r2, [r3, #28]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007434:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	69da      	ldr	r2, [r3, #28]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007444:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	69d9      	ldr	r1, [r3, #28]
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	691b      	ldr	r3, [r3, #16]
 8007450:	021a      	lsls	r2, r3, #8
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	430a      	orrs	r2, r1
 8007458:	61da      	str	r2, [r3, #28]
      break;
 800745a:	e002      	b.n	8007462 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	75fb      	strb	r3, [r7, #23]
      break;
 8007460:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800746a:	7dfb      	ldrb	r3, [r7, #23]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800747e:	2300      	movs	r3, #0
 8007480:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007488:	2b01      	cmp	r3, #1
 800748a:	d101      	bne.n	8007490 <HAL_TIM_ConfigClockSource+0x1c>
 800748c:	2302      	movs	r3, #2
 800748e:	e0b4      	b.n	80075fa <HAL_TIM_ConfigClockSource+0x186>
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2202      	movs	r2, #2
 800749c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80074ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80074b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68ba      	ldr	r2, [r7, #8]
 80074be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074c8:	d03e      	beq.n	8007548 <HAL_TIM_ConfigClockSource+0xd4>
 80074ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ce:	f200 8087 	bhi.w	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 80074d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074d6:	f000 8086 	beq.w	80075e6 <HAL_TIM_ConfigClockSource+0x172>
 80074da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074de:	d87f      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e0:	2b70      	cmp	r3, #112	; 0x70
 80074e2:	d01a      	beq.n	800751a <HAL_TIM_ConfigClockSource+0xa6>
 80074e4:	2b70      	cmp	r3, #112	; 0x70
 80074e6:	d87b      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 80074e8:	2b60      	cmp	r3, #96	; 0x60
 80074ea:	d050      	beq.n	800758e <HAL_TIM_ConfigClockSource+0x11a>
 80074ec:	2b60      	cmp	r3, #96	; 0x60
 80074ee:	d877      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 80074f0:	2b50      	cmp	r3, #80	; 0x50
 80074f2:	d03c      	beq.n	800756e <HAL_TIM_ConfigClockSource+0xfa>
 80074f4:	2b50      	cmp	r3, #80	; 0x50
 80074f6:	d873      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 80074f8:	2b40      	cmp	r3, #64	; 0x40
 80074fa:	d058      	beq.n	80075ae <HAL_TIM_ConfigClockSource+0x13a>
 80074fc:	2b40      	cmp	r3, #64	; 0x40
 80074fe:	d86f      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007500:	2b30      	cmp	r3, #48	; 0x30
 8007502:	d064      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0x15a>
 8007504:	2b30      	cmp	r3, #48	; 0x30
 8007506:	d86b      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007508:	2b20      	cmp	r3, #32
 800750a:	d060      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0x15a>
 800750c:	2b20      	cmp	r3, #32
 800750e:	d867      	bhi.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d05c      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0x15a>
 8007514:	2b10      	cmp	r3, #16
 8007516:	d05a      	beq.n	80075ce <HAL_TIM_ConfigClockSource+0x15a>
 8007518:	e062      	b.n	80075e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6818      	ldr	r0, [r3, #0]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	6899      	ldr	r1, [r3, #8]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	685a      	ldr	r2, [r3, #4]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f000 fc08 	bl	8007d3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800753c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	609a      	str	r2, [r3, #8]
      break;
 8007546:	e04f      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	6899      	ldr	r1, [r3, #8]
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f000 fbf1 	bl	8007d3e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689a      	ldr	r2, [r3, #8]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800756a:	609a      	str	r2, [r3, #8]
      break;
 800756c:	e03c      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6818      	ldr	r0, [r3, #0]
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	6859      	ldr	r1, [r3, #4]
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	461a      	mov	r2, r3
 800757c:	f000 fb65 	bl	8007c4a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	2150      	movs	r1, #80	; 0x50
 8007586:	4618      	mov	r0, r3
 8007588:	f000 fbbe 	bl	8007d08 <TIM_ITRx_SetConfig>
      break;
 800758c:	e02c      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6818      	ldr	r0, [r3, #0]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	6859      	ldr	r1, [r3, #4]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	461a      	mov	r2, r3
 800759c:	f000 fb84 	bl	8007ca8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	2160      	movs	r1, #96	; 0x60
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fbae 	bl	8007d08 <TIM_ITRx_SetConfig>
      break;
 80075ac:	e01c      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6818      	ldr	r0, [r3, #0]
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	6859      	ldr	r1, [r3, #4]
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	461a      	mov	r2, r3
 80075bc:	f000 fb45 	bl	8007c4a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2140      	movs	r1, #64	; 0x40
 80075c6:	4618      	mov	r0, r3
 80075c8:	f000 fb9e 	bl	8007d08 <TIM_ITRx_SetConfig>
      break;
 80075cc:	e00c      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4619      	mov	r1, r3
 80075d8:	4610      	mov	r0, r2
 80075da:	f000 fb95 	bl	8007d08 <TIM_ITRx_SetConfig>
      break;
 80075de:	e003      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80075e0:	2301      	movs	r3, #1
 80075e2:	73fb      	strb	r3, [r7, #15]
      break;
 80075e4:	e000      	b.n	80075e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80075e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b082      	sub	sp, #8
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007612:	2b01      	cmp	r3, #1
 8007614:	d101      	bne.n	800761a <HAL_TIM_SlaveConfigSynchro+0x18>
 8007616:	2302      	movs	r3, #2
 8007618:	e031      	b.n	800767e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2202      	movs	r2, #2
 8007626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800762a:	6839      	ldr	r1, [r7, #0]
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f000 fa7b 	bl	8007b28 <TIM_SlaveTimer_SetConfig>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d009      	beq.n	800764c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e018      	b.n	800767e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800765a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	68da      	ldr	r2, [r3, #12]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800766a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
	...

08007688 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a40      	ldr	r2, [pc, #256]	; (800779c <TIM_Base_SetConfig+0x114>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d013      	beq.n	80076c8 <TIM_Base_SetConfig+0x40>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a6:	d00f      	beq.n	80076c8 <TIM_Base_SetConfig+0x40>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a3d      	ldr	r2, [pc, #244]	; (80077a0 <TIM_Base_SetConfig+0x118>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d00b      	beq.n	80076c8 <TIM_Base_SetConfig+0x40>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a3c      	ldr	r2, [pc, #240]	; (80077a4 <TIM_Base_SetConfig+0x11c>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d007      	beq.n	80076c8 <TIM_Base_SetConfig+0x40>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	4a3b      	ldr	r2, [pc, #236]	; (80077a8 <TIM_Base_SetConfig+0x120>)
 80076bc:	4293      	cmp	r3, r2
 80076be:	d003      	beq.n	80076c8 <TIM_Base_SetConfig+0x40>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a3a      	ldr	r2, [pc, #232]	; (80077ac <TIM_Base_SetConfig+0x124>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d108      	bne.n	80076da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	4a2f      	ldr	r2, [pc, #188]	; (800779c <TIM_Base_SetConfig+0x114>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d02b      	beq.n	800773a <TIM_Base_SetConfig+0xb2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076e8:	d027      	beq.n	800773a <TIM_Base_SetConfig+0xb2>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a2c      	ldr	r2, [pc, #176]	; (80077a0 <TIM_Base_SetConfig+0x118>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d023      	beq.n	800773a <TIM_Base_SetConfig+0xb2>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a2b      	ldr	r2, [pc, #172]	; (80077a4 <TIM_Base_SetConfig+0x11c>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d01f      	beq.n	800773a <TIM_Base_SetConfig+0xb2>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a2a      	ldr	r2, [pc, #168]	; (80077a8 <TIM_Base_SetConfig+0x120>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d01b      	beq.n	800773a <TIM_Base_SetConfig+0xb2>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a29      	ldr	r2, [pc, #164]	; (80077ac <TIM_Base_SetConfig+0x124>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d017      	beq.n	800773a <TIM_Base_SetConfig+0xb2>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a28      	ldr	r2, [pc, #160]	; (80077b0 <TIM_Base_SetConfig+0x128>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d013      	beq.n	800773a <TIM_Base_SetConfig+0xb2>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a27      	ldr	r2, [pc, #156]	; (80077b4 <TIM_Base_SetConfig+0x12c>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00f      	beq.n	800773a <TIM_Base_SetConfig+0xb2>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a26      	ldr	r2, [pc, #152]	; (80077b8 <TIM_Base_SetConfig+0x130>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00b      	beq.n	800773a <TIM_Base_SetConfig+0xb2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a25      	ldr	r2, [pc, #148]	; (80077bc <TIM_Base_SetConfig+0x134>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d007      	beq.n	800773a <TIM_Base_SetConfig+0xb2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a24      	ldr	r2, [pc, #144]	; (80077c0 <TIM_Base_SetConfig+0x138>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d003      	beq.n	800773a <TIM_Base_SetConfig+0xb2>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a23      	ldr	r2, [pc, #140]	; (80077c4 <TIM_Base_SetConfig+0x13c>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d108      	bne.n	800774c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a0a      	ldr	r2, [pc, #40]	; (800779c <TIM_Base_SetConfig+0x114>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d003      	beq.n	8007780 <TIM_Base_SetConfig+0xf8>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a0c      	ldr	r2, [pc, #48]	; (80077ac <TIM_Base_SetConfig+0x124>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d103      	bne.n	8007788 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	615a      	str	r2, [r3, #20]
}
 800778e:	bf00      	nop
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	40010000 	.word	0x40010000
 80077a0:	40000400 	.word	0x40000400
 80077a4:	40000800 	.word	0x40000800
 80077a8:	40000c00 	.word	0x40000c00
 80077ac:	40010400 	.word	0x40010400
 80077b0:	40014000 	.word	0x40014000
 80077b4:	40014400 	.word	0x40014400
 80077b8:	40014800 	.word	0x40014800
 80077bc:	40001800 	.word	0x40001800
 80077c0:	40001c00 	.word	0x40001c00
 80077c4:	40002000 	.word	0x40002000

080077c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	f023 0201 	bic.w	r2, r3, #1
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a1b      	ldr	r3, [r3, #32]
 80077e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0303 	bic.w	r3, r3, #3
 80077fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f023 0302 	bic.w	r3, r3, #2
 8007810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	4313      	orrs	r3, r2
 800781a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a20      	ldr	r2, [pc, #128]	; (80078a0 <TIM_OC1_SetConfig+0xd8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d003      	beq.n	800782c <TIM_OC1_SetConfig+0x64>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	4a1f      	ldr	r2, [pc, #124]	; (80078a4 <TIM_OC1_SetConfig+0xdc>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d10c      	bne.n	8007846 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	f023 0308 	bic.w	r3, r3, #8
 8007832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	4313      	orrs	r3, r2
 800783c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f023 0304 	bic.w	r3, r3, #4
 8007844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	4a15      	ldr	r2, [pc, #84]	; (80078a0 <TIM_OC1_SetConfig+0xd8>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d003      	beq.n	8007856 <TIM_OC1_SetConfig+0x8e>
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a14      	ldr	r2, [pc, #80]	; (80078a4 <TIM_OC1_SetConfig+0xdc>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d111      	bne.n	800787a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800785c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	4313      	orrs	r3, r2
 800786e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	693a      	ldr	r2, [r7, #16]
 8007876:	4313      	orrs	r3, r2
 8007878:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	693a      	ldr	r2, [r7, #16]
 800787e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	697a      	ldr	r2, [r7, #20]
 8007892:	621a      	str	r2, [r3, #32]
}
 8007894:	bf00      	nop
 8007896:	371c      	adds	r7, #28
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	40010000 	.word	0x40010000
 80078a4:	40010400 	.word	0x40010400

080078a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	f023 0210 	bic.w	r2, r3, #16
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	021b      	lsls	r3, r3, #8
 80078e6:	68fa      	ldr	r2, [r7, #12]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	f023 0320 	bic.w	r3, r3, #32
 80078f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	011b      	lsls	r3, r3, #4
 80078fa:	697a      	ldr	r2, [r7, #20]
 80078fc:	4313      	orrs	r3, r2
 80078fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a22      	ldr	r2, [pc, #136]	; (800798c <TIM_OC2_SetConfig+0xe4>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d003      	beq.n	8007910 <TIM_OC2_SetConfig+0x68>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	4a21      	ldr	r2, [pc, #132]	; (8007990 <TIM_OC2_SetConfig+0xe8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d10d      	bne.n	800792c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007916:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	011b      	lsls	r3, r3, #4
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	4313      	orrs	r3, r2
 8007922:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800792a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a17      	ldr	r2, [pc, #92]	; (800798c <TIM_OC2_SetConfig+0xe4>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d003      	beq.n	800793c <TIM_OC2_SetConfig+0x94>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a16      	ldr	r2, [pc, #88]	; (8007990 <TIM_OC2_SetConfig+0xe8>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d113      	bne.n	8007964 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007942:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800794a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	695b      	ldr	r3, [r3, #20]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	693a      	ldr	r2, [r7, #16]
 8007954:	4313      	orrs	r3, r2
 8007956:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	699b      	ldr	r3, [r3, #24]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	693a      	ldr	r2, [r7, #16]
 8007960:	4313      	orrs	r3, r2
 8007962:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	68fa      	ldr	r2, [r7, #12]
 800796e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	697a      	ldr	r2, [r7, #20]
 800797c:	621a      	str	r2, [r3, #32]
}
 800797e:	bf00      	nop
 8007980:	371c      	adds	r7, #28
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	40010000 	.word	0x40010000
 8007990:	40010400 	.word	0x40010400

08007994 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6a1b      	ldr	r3, [r3, #32]
 80079a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6a1b      	ldr	r3, [r3, #32]
 80079ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f023 0303 	bic.w	r3, r3, #3
 80079ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68fa      	ldr	r2, [r7, #12]
 80079d2:	4313      	orrs	r3, r2
 80079d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80079dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	021b      	lsls	r3, r3, #8
 80079e4:	697a      	ldr	r2, [r7, #20]
 80079e6:	4313      	orrs	r3, r2
 80079e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	4a21      	ldr	r2, [pc, #132]	; (8007a74 <TIM_OC3_SetConfig+0xe0>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d003      	beq.n	80079fa <TIM_OC3_SetConfig+0x66>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	4a20      	ldr	r2, [pc, #128]	; (8007a78 <TIM_OC3_SetConfig+0xe4>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d10d      	bne.n	8007a16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007a00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	021b      	lsls	r3, r3, #8
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007a14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a16      	ldr	r2, [pc, #88]	; (8007a74 <TIM_OC3_SetConfig+0xe0>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d003      	beq.n	8007a26 <TIM_OC3_SetConfig+0x92>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a15      	ldr	r2, [pc, #84]	; (8007a78 <TIM_OC3_SetConfig+0xe4>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d113      	bne.n	8007a4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a26:	693b      	ldr	r3, [r7, #16]
 8007a28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	695b      	ldr	r3, [r3, #20]
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	693a      	ldr	r2, [r7, #16]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	699b      	ldr	r3, [r3, #24]
 8007a46:	011b      	lsls	r3, r3, #4
 8007a48:	693a      	ldr	r2, [r7, #16]
 8007a4a:	4313      	orrs	r3, r2
 8007a4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	685a      	ldr	r2, [r3, #4]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	621a      	str	r2, [r3, #32]
}
 8007a68:	bf00      	nop
 8007a6a:	371c      	adds	r7, #28
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr
 8007a74:	40010000 	.word	0x40010000
 8007a78:	40010400 	.word	0x40010400

08007a7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b087      	sub	sp, #28
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	685b      	ldr	r3, [r3, #4]
 8007a9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	69db      	ldr	r3, [r3, #28]
 8007aa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ab2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	021b      	lsls	r3, r3, #8
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	4313      	orrs	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ac6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	031b      	lsls	r3, r3, #12
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a12      	ldr	r2, [pc, #72]	; (8007b20 <TIM_OC4_SetConfig+0xa4>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_OC4_SetConfig+0x68>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a11      	ldr	r2, [pc, #68]	; (8007b24 <TIM_OC4_SetConfig+0xa8>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d109      	bne.n	8007af8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007aea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	695b      	ldr	r3, [r3, #20]
 8007af0:	019b      	lsls	r3, r3, #6
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	697a      	ldr	r2, [r7, #20]
 8007afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	621a      	str	r2, [r3, #32]
}
 8007b12:	bf00      	nop
 8007b14:	371c      	adds	r7, #28
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	40010000 	.word	0x40010000
 8007b24:	40010400 	.word	0x40010400

08007b28 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b086      	sub	sp, #24
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b44:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f023 0307 	bic.w	r3, r3, #7
 8007b56:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	693a      	ldr	r2, [r7, #16]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	2b70      	cmp	r3, #112	; 0x70
 8007b70:	d01a      	beq.n	8007ba8 <TIM_SlaveTimer_SetConfig+0x80>
 8007b72:	2b70      	cmp	r3, #112	; 0x70
 8007b74:	d860      	bhi.n	8007c38 <TIM_SlaveTimer_SetConfig+0x110>
 8007b76:	2b60      	cmp	r3, #96	; 0x60
 8007b78:	d054      	beq.n	8007c24 <TIM_SlaveTimer_SetConfig+0xfc>
 8007b7a:	2b60      	cmp	r3, #96	; 0x60
 8007b7c:	d85c      	bhi.n	8007c38 <TIM_SlaveTimer_SetConfig+0x110>
 8007b7e:	2b50      	cmp	r3, #80	; 0x50
 8007b80:	d046      	beq.n	8007c10 <TIM_SlaveTimer_SetConfig+0xe8>
 8007b82:	2b50      	cmp	r3, #80	; 0x50
 8007b84:	d858      	bhi.n	8007c38 <TIM_SlaveTimer_SetConfig+0x110>
 8007b86:	2b40      	cmp	r3, #64	; 0x40
 8007b88:	d019      	beq.n	8007bbe <TIM_SlaveTimer_SetConfig+0x96>
 8007b8a:	2b40      	cmp	r3, #64	; 0x40
 8007b8c:	d854      	bhi.n	8007c38 <TIM_SlaveTimer_SetConfig+0x110>
 8007b8e:	2b30      	cmp	r3, #48	; 0x30
 8007b90:	d055      	beq.n	8007c3e <TIM_SlaveTimer_SetConfig+0x116>
 8007b92:	2b30      	cmp	r3, #48	; 0x30
 8007b94:	d850      	bhi.n	8007c38 <TIM_SlaveTimer_SetConfig+0x110>
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	d051      	beq.n	8007c3e <TIM_SlaveTimer_SetConfig+0x116>
 8007b9a:	2b20      	cmp	r3, #32
 8007b9c:	d84c      	bhi.n	8007c38 <TIM_SlaveTimer_SetConfig+0x110>
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d04d      	beq.n	8007c3e <TIM_SlaveTimer_SetConfig+0x116>
 8007ba2:	2b10      	cmp	r3, #16
 8007ba4:	d04b      	beq.n	8007c3e <TIM_SlaveTimer_SetConfig+0x116>
 8007ba6:	e047      	b.n	8007c38 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6818      	ldr	r0, [r3, #0]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	68d9      	ldr	r1, [r3, #12]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f000 f8c1 	bl	8007d3e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007bbc:	e040      	b.n	8007c40 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b05      	cmp	r3, #5
 8007bc4:	d101      	bne.n	8007bca <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e03b      	b.n	8007c42 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6a1a      	ldr	r2, [r3, #32]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0201 	bic.w	r2, r2, #1
 8007be0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	699b      	ldr	r3, [r3, #24]
 8007be8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bf0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	011b      	lsls	r3, r3, #4
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68ba      	ldr	r2, [r7, #8]
 8007c04:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	621a      	str	r2, [r3, #32]
      break;
 8007c0e:	e017      	b.n	8007c40 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6818      	ldr	r0, [r3, #0]
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	6899      	ldr	r1, [r3, #8]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	f000 f814 	bl	8007c4a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007c22:	e00d      	b.n	8007c40 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6818      	ldr	r0, [r3, #0]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	6899      	ldr	r1, [r3, #8]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	461a      	mov	r2, r3
 8007c32:	f000 f839 	bl	8007ca8 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007c36:	e003      	b.n	8007c40 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007c38:	2301      	movs	r3, #1
 8007c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8007c3c:	e000      	b.n	8007c40 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007c3e:	bf00      	nop
  }

  return status;
 8007c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3718      	adds	r7, #24
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}

08007c4a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	b087      	sub	sp, #28
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	60f8      	str	r0, [r7, #12]
 8007c52:	60b9      	str	r1, [r7, #8]
 8007c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6a1b      	ldr	r3, [r3, #32]
 8007c60:	f023 0201 	bic.w	r2, r3, #1
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	699b      	ldr	r3, [r3, #24]
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	011b      	lsls	r3, r3, #4
 8007c7a:	693a      	ldr	r2, [r7, #16]
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f023 030a 	bic.w	r3, r3, #10
 8007c86:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007c88:	697a      	ldr	r2, [r7, #20]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	621a      	str	r2, [r3, #32]
}
 8007c9c:	bf00      	nop
 8007c9e:	371c      	adds	r7, #28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	60f8      	str	r0, [r7, #12]
 8007cb0:	60b9      	str	r1, [r7, #8]
 8007cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6a1b      	ldr	r3, [r3, #32]
 8007cb8:	f023 0210 	bic.w	r2, r3, #16
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a1b      	ldr	r3, [r3, #32]
 8007cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007cd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	031b      	lsls	r3, r3, #12
 8007cd8:	697a      	ldr	r2, [r7, #20]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007ce4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	011b      	lsls	r3, r3, #4
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	697a      	ldr	r2, [r7, #20]
 8007cf4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	693a      	ldr	r2, [r7, #16]
 8007cfa:	621a      	str	r2, [r3, #32]
}
 8007cfc:	bf00      	nop
 8007cfe:	371c      	adds	r7, #28
 8007d00:	46bd      	mov	sp, r7
 8007d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d06:	4770      	bx	lr

08007d08 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b085      	sub	sp, #20
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
 8007d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d1e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f043 0307 	orr.w	r3, r3, #7
 8007d2a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	609a      	str	r2, [r3, #8]
}
 8007d32:	bf00      	nop
 8007d34:	3714      	adds	r7, #20
 8007d36:	46bd      	mov	sp, r7
 8007d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3c:	4770      	bx	lr

08007d3e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b087      	sub	sp, #28
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	607a      	str	r2, [r7, #4]
 8007d4a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	689b      	ldr	r3, [r3, #8]
 8007d50:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d58:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	021a      	lsls	r2, r3, #8
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	431a      	orrs	r2, r3
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	4313      	orrs	r3, r2
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	609a      	str	r2, [r3, #8]
}
 8007d72:	bf00      	nop
 8007d74:	371c      	adds	r7, #28
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr

08007d7e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d7e:	b480      	push	{r7}
 8007d80:	b087      	sub	sp, #28
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	60f8      	str	r0, [r7, #12]
 8007d86:	60b9      	str	r1, [r7, #8]
 8007d88:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f003 031f 	and.w	r3, r3, #31
 8007d90:	2201      	movs	r2, #1
 8007d92:	fa02 f303 	lsl.w	r3, r2, r3
 8007d96:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6a1a      	ldr	r2, [r3, #32]
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	43db      	mvns	r3, r3
 8007da0:	401a      	ands	r2, r3
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6a1a      	ldr	r2, [r3, #32]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f003 031f 	and.w	r3, r3, #31
 8007db0:	6879      	ldr	r1, [r7, #4]
 8007db2:	fa01 f303 	lsl.w	r3, r1, r3
 8007db6:	431a      	orrs	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	621a      	str	r2, [r3, #32]
}
 8007dbc:	bf00      	nop
 8007dbe:	371c      	adds	r7, #28
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d101      	bne.n	8007de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007ddc:	2302      	movs	r3, #2
 8007dde:	e05a      	b.n	8007e96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2201      	movs	r2, #1
 8007de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2202      	movs	r2, #2
 8007dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	68fa      	ldr	r2, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a21      	ldr	r2, [pc, #132]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d022      	beq.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e2c:	d01d      	beq.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a1d      	ldr	r2, [pc, #116]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d018      	beq.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a1b      	ldr	r2, [pc, #108]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d013      	beq.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a1a      	ldr	r2, [pc, #104]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00e      	beq.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d009      	beq.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a17      	ldr	r2, [pc, #92]	; (8007eb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a15      	ldr	r2, [pc, #84]	; (8007ebc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d10c      	bne.n	8007e84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e94:	2300      	movs	r3, #0
}
 8007e96:	4618      	mov	r0, r3
 8007e98:	3714      	adds	r7, #20
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	40010000 	.word	0x40010000
 8007ea8:	40000400 	.word	0x40000400
 8007eac:	40000800 	.word	0x40000800
 8007eb0:	40000c00 	.word	0x40000c00
 8007eb4:	40010400 	.word	0x40010400
 8007eb8:	40014000 	.word	0x40014000
 8007ebc:	40001800 	.word	0x40001800

08007ec0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007ec0:	b480      	push	{r7}
 8007ec2:	b085      	sub	sp, #20
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d101      	bne.n	8007edc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007ed8:	2302      	movs	r3, #2
 8007eda:	e03d      	b.n	8007f58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	691b      	ldr	r3, [r3, #16]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2200      	movs	r2, #0
 8007f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f56:	2300      	movs	r3, #0
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3714      	adds	r7, #20
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	e03f      	b.n	8007ff6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d106      	bne.n	8007f90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f7fb f8da 	bl	8003144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2224      	movs	r2, #36	; 0x24
 8007f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	68da      	ldr	r2, [r3, #12]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007fa6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 ffcd 	bl	8008f48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	691a      	ldr	r2, [r3, #16]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007fbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	695a      	ldr	r2, [r3, #20]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2220      	movs	r2, #32
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b08c      	sub	sp, #48	; 0x30
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	4613      	mov	r3, r2
 800800c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b20      	cmp	r3, #32
 8008018:	d165      	bne.n	80080e6 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <HAL_UART_Transmit_DMA+0x26>
 8008020:	88fb      	ldrh	r3, [r7, #6]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e05e      	b.n	80080e8 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_UART_Transmit_DMA+0x38>
 8008034:	2302      	movs	r3, #2
 8008036:	e057      	b.n	80080e8 <HAL_UART_Transmit_DMA+0xe8>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008040:	68ba      	ldr	r2, [r7, #8]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	88fa      	ldrh	r2, [r7, #6]
 800804a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	88fa      	ldrh	r2, [r7, #6]
 8008050:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2221      	movs	r2, #33	; 0x21
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008064:	4a22      	ldr	r2, [pc, #136]	; (80080f0 <HAL_UART_Transmit_DMA+0xf0>)
 8008066:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806c:	4a21      	ldr	r2, [pc, #132]	; (80080f4 <HAL_UART_Transmit_DMA+0xf4>)
 800806e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008074:	4a20      	ldr	r2, [pc, #128]	; (80080f8 <HAL_UART_Transmit_DMA+0xf8>)
 8008076:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800807c:	2200      	movs	r2, #0
 800807e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008080:	f107 0308 	add.w	r3, r7, #8
 8008084:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800808a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800808c:	6819      	ldr	r1, [r3, #0]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	3304      	adds	r3, #4
 8008094:	461a      	mov	r2, r3
 8008096:	88fb      	ldrh	r3, [r7, #6]
 8008098:	f7fb fdb6 	bl	8003c08 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80080a4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	3314      	adds	r3, #20
 80080b4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	e853 3f00 	ldrex	r3, [r3]
 80080bc:	617b      	str	r3, [r7, #20]
   return(result);
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080c4:	62bb      	str	r3, [r7, #40]	; 0x28
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	3314      	adds	r3, #20
 80080cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080ce:	627a      	str	r2, [r7, #36]	; 0x24
 80080d0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080d2:	6a39      	ldr	r1, [r7, #32]
 80080d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d6:	e841 2300 	strex	r3, r2, [r1]
 80080da:	61fb      	str	r3, [r7, #28]
   return(result);
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d1e5      	bne.n	80080ae <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	e000      	b.n	80080e8 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80080e6:	2302      	movs	r3, #2
  }
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3730      	adds	r7, #48	; 0x30
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	080087e1 	.word	0x080087e1
 80080f4:	0800887b 	.word	0x0800887b
 80080f8:	080089f3 	.word	0x080089f3

080080fc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4613      	mov	r3, r2
 8008108:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b20      	cmp	r3, #32
 8008114:	d11d      	bne.n	8008152 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <HAL_UART_Receive_DMA+0x26>
 800811c:	88fb      	ldrh	r3, [r7, #6]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e016      	b.n	8008154 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800812c:	2b01      	cmp	r3, #1
 800812e:	d101      	bne.n	8008134 <HAL_UART_Receive_DMA+0x38>
 8008130:	2302      	movs	r3, #2
 8008132:	e00f      	b.n	8008154 <HAL_UART_Receive_DMA+0x58>
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2201      	movs	r2, #1
 8008138:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008142:	88fb      	ldrh	r3, [r7, #6]
 8008144:	461a      	mov	r2, r3
 8008146:	68b9      	ldr	r1, [r7, #8]
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 fc9d 	bl	8008a88 <UART_Start_Receive_DMA>
 800814e:	4603      	mov	r3, r0
 8008150:	e000      	b.n	8008154 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008152:	2302      	movs	r3, #2
  }
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b090      	sub	sp, #64	; 0x40
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008164:	2300      	movs	r3, #0
 8008166:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	695b      	ldr	r3, [r3, #20]
 800816e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008172:	2b80      	cmp	r3, #128	; 0x80
 8008174:	bf0c      	ite	eq
 8008176:	2301      	moveq	r3, #1
 8008178:	2300      	movne	r3, #0
 800817a:	b2db      	uxtb	r3, r3
 800817c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b21      	cmp	r3, #33	; 0x21
 8008188:	d128      	bne.n	80081dc <HAL_UART_DMAStop+0x80>
 800818a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800818c:	2b00      	cmp	r3, #0
 800818e:	d025      	beq.n	80081dc <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	3314      	adds	r3, #20
 8008196:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800819a:	e853 3f00 	ldrex	r3, [r3]
 800819e:	623b      	str	r3, [r7, #32]
   return(result);
 80081a0:	6a3b      	ldr	r3, [r7, #32]
 80081a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3314      	adds	r3, #20
 80081ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081b0:	633a      	str	r2, [r7, #48]	; 0x30
 80081b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b8:	e841 2300 	strex	r3, r2, [r1]
 80081bc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e5      	bne.n	8008190 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d004      	beq.n	80081d6 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d0:	4618      	mov	r0, r3
 80081d2:	f7fb fd71 	bl	8003cb8 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fcf4 	bl	8008bc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	695b      	ldr	r3, [r3, #20]
 80081e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e6:	2b40      	cmp	r3, #64	; 0x40
 80081e8:	bf0c      	ite	eq
 80081ea:	2301      	moveq	r3, #1
 80081ec:	2300      	movne	r3, #0
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b22      	cmp	r3, #34	; 0x22
 80081fc:	d128      	bne.n	8008250 <HAL_UART_DMAStop+0xf4>
 80081fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008200:	2b00      	cmp	r3, #0
 8008202:	d025      	beq.n	8008250 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	3314      	adds	r3, #20
 800820a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	e853 3f00 	ldrex	r3, [r3]
 8008212:	60fb      	str	r3, [r7, #12]
   return(result);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3314      	adds	r3, #20
 8008222:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008224:	61fa      	str	r2, [r7, #28]
 8008226:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008228:	69b9      	ldr	r1, [r7, #24]
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	e841 2300 	strex	r3, r2, [r1]
 8008230:	617b      	str	r3, [r7, #20]
   return(result);
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	2b00      	cmp	r3, #0
 8008236:	d1e5      	bne.n	8008204 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823c:	2b00      	cmp	r3, #0
 800823e:	d004      	beq.n	800824a <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008244:	4618      	mov	r0, r3
 8008246:	f7fb fd37 	bl	8003cb8 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fce2 	bl	8008c14 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	3740      	adds	r7, #64	; 0x40
 8008256:	46bd      	mov	sp, r7
 8008258:	bd80      	pop	{r7, pc}
	...

0800825c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b0ba      	sub	sp, #232	; 0xe8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008282:	2300      	movs	r3, #0
 8008284:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008288:	2300      	movs	r3, #0
 800828a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800828e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008292:	f003 030f 	and.w	r3, r3, #15
 8008296:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800829a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d10f      	bne.n	80082c2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80082a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082a6:	f003 0320 	and.w	r3, r3, #32
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d009      	beq.n	80082c2 <HAL_UART_IRQHandler+0x66>
 80082ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082b2:	f003 0320 	and.w	r3, r3, #32
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d003      	beq.n	80082c2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f000 fd89 	bl	8008dd2 <UART_Receive_IT>
      return;
 80082c0:	e256      	b.n	8008770 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80082c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 80de 	beq.w	8008488 <HAL_UART_IRQHandler+0x22c>
 80082cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082d0:	f003 0301 	and.w	r3, r3, #1
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d106      	bne.n	80082e6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082dc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	f000 80d1 	beq.w	8008488 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082ea:	f003 0301 	and.w	r3, r3, #1
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d00b      	beq.n	800830a <HAL_UART_IRQHandler+0xae>
 80082f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d005      	beq.n	800830a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	f043 0201 	orr.w	r2, r3, #1
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800830a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800830e:	f003 0304 	and.w	r3, r3, #4
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00b      	beq.n	800832e <HAL_UART_IRQHandler+0xd2>
 8008316:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d005      	beq.n	800832e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008326:	f043 0202 	orr.w	r2, r3, #2
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800832e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008332:	f003 0302 	and.w	r3, r3, #2
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00b      	beq.n	8008352 <HAL_UART_IRQHandler+0xf6>
 800833a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800833e:	f003 0301 	and.w	r3, r3, #1
 8008342:	2b00      	cmp	r3, #0
 8008344:	d005      	beq.n	8008352 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800834a:	f043 0204 	orr.w	r2, r3, #4
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008356:	f003 0308 	and.w	r3, r3, #8
 800835a:	2b00      	cmp	r3, #0
 800835c:	d011      	beq.n	8008382 <HAL_UART_IRQHandler+0x126>
 800835e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008362:	f003 0320 	and.w	r3, r3, #32
 8008366:	2b00      	cmp	r3, #0
 8008368:	d105      	bne.n	8008376 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800836a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800836e:	f003 0301 	and.w	r3, r3, #1
 8008372:	2b00      	cmp	r3, #0
 8008374:	d005      	beq.n	8008382 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837a:	f043 0208 	orr.w	r2, r3, #8
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008386:	2b00      	cmp	r3, #0
 8008388:	f000 81ed 	beq.w	8008766 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800838c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008390:	f003 0320 	and.w	r3, r3, #32
 8008394:	2b00      	cmp	r3, #0
 8008396:	d008      	beq.n	80083aa <HAL_UART_IRQHandler+0x14e>
 8008398:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800839c:	f003 0320 	and.w	r3, r3, #32
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d002      	beq.n	80083aa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f000 fd14 	bl	8008dd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	695b      	ldr	r3, [r3, #20]
 80083b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083b4:	2b40      	cmp	r3, #64	; 0x40
 80083b6:	bf0c      	ite	eq
 80083b8:	2301      	moveq	r3, #1
 80083ba:	2300      	movne	r3, #0
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d103      	bne.n	80083d6 <HAL_UART_IRQHandler+0x17a>
 80083ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d04f      	beq.n	8008476 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 fc1c 	bl	8008c14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e6:	2b40      	cmp	r3, #64	; 0x40
 80083e8:	d141      	bne.n	800846e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	3314      	adds	r3, #20
 80083f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80083f8:	e853 3f00 	ldrex	r3, [r3]
 80083fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008404:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3314      	adds	r3, #20
 8008412:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008416:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800841a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008422:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008426:	e841 2300 	strex	r3, r2, [r1]
 800842a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800842e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008432:	2b00      	cmp	r3, #0
 8008434:	d1d9      	bne.n	80083ea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800843a:	2b00      	cmp	r3, #0
 800843c:	d013      	beq.n	8008466 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008442:	4a7d      	ldr	r2, [pc, #500]	; (8008638 <HAL_UART_IRQHandler+0x3dc>)
 8008444:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844a:	4618      	mov	r0, r3
 800844c:	f7fb fca4 	bl	8003d98 <HAL_DMA_Abort_IT>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d016      	beq.n	8008484 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008460:	4610      	mov	r0, r2
 8008462:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008464:	e00e      	b.n	8008484 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 f9a4 	bl	80087b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800846c:	e00a      	b.n	8008484 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 f9a0 	bl	80087b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008474:	e006      	b.n	8008484 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 f99c 	bl	80087b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008482:	e170      	b.n	8008766 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008484:	bf00      	nop
    return;
 8008486:	e16e      	b.n	8008766 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848c:	2b01      	cmp	r3, #1
 800848e:	f040 814a 	bne.w	8008726 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008496:	f003 0310 	and.w	r3, r3, #16
 800849a:	2b00      	cmp	r3, #0
 800849c:	f000 8143 	beq.w	8008726 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80084a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a4:	f003 0310 	and.w	r3, r3, #16
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	f000 813c 	beq.w	8008726 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084ae:	2300      	movs	r3, #0
 80084b0:	60bb      	str	r3, [r7, #8]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	60bb      	str	r3, [r7, #8]
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	60bb      	str	r3, [r7, #8]
 80084c2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ce:	2b40      	cmp	r3, #64	; 0x40
 80084d0:	f040 80b4 	bne.w	800863c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 8140 	beq.w	800876a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80084ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084f2:	429a      	cmp	r2, r3
 80084f4:	f080 8139 	bcs.w	800876a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80084fe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800850a:	f000 8088 	beq.w	800861e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	330c      	adds	r3, #12
 8008514:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008518:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800851c:	e853 3f00 	ldrex	r3, [r3]
 8008520:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008524:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008528:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800852c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	330c      	adds	r3, #12
 8008536:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800853a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800853e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008542:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008546:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800854a:	e841 2300 	strex	r3, r2, [r1]
 800854e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1d9      	bne.n	800850e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3314      	adds	r3, #20
 8008560:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008562:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008564:	e853 3f00 	ldrex	r3, [r3]
 8008568:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800856a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800856c:	f023 0301 	bic.w	r3, r3, #1
 8008570:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3314      	adds	r3, #20
 800857a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800857e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008582:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008584:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008586:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800858a:	e841 2300 	strex	r3, r2, [r1]
 800858e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1e1      	bne.n	800855a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3314      	adds	r3, #20
 800859c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80085a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	3314      	adds	r3, #20
 80085b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80085ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80085bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80085c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80085c2:	e841 2300 	strex	r3, r2, [r1]
 80085c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80085c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1e3      	bne.n	8008596 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2220      	movs	r2, #32
 80085d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2200      	movs	r2, #0
 80085da:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	330c      	adds	r3, #12
 80085e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085e6:	e853 3f00 	ldrex	r3, [r3]
 80085ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80085ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ee:	f023 0310 	bic.w	r3, r3, #16
 80085f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	330c      	adds	r3, #12
 80085fc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008600:	65ba      	str	r2, [r7, #88]	; 0x58
 8008602:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008604:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008606:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008608:	e841 2300 	strex	r3, r2, [r1]
 800860c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800860e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1e3      	bne.n	80085dc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008618:	4618      	mov	r0, r3
 800861a:	f7fb fb4d 	bl	8003cb8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008626:	b29b      	uxth	r3, r3
 8008628:	1ad3      	subs	r3, r2, r3
 800862a:	b29b      	uxth	r3, r3
 800862c:	4619      	mov	r1, r3
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f8ca 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008634:	e099      	b.n	800876a <HAL_UART_IRQHandler+0x50e>
 8008636:	bf00      	nop
 8008638:	08008cdb 	.word	0x08008cdb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008644:	b29b      	uxth	r3, r3
 8008646:	1ad3      	subs	r3, r2, r3
 8008648:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008650:	b29b      	uxth	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	f000 808b 	beq.w	800876e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800865c:	2b00      	cmp	r3, #0
 800865e:	f000 8086 	beq.w	800876e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	330c      	adds	r3, #12
 8008668:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800866a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866c:	e853 3f00 	ldrex	r3, [r3]
 8008670:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008674:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008678:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	330c      	adds	r3, #12
 8008682:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008686:	647a      	str	r2, [r7, #68]	; 0x44
 8008688:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800868a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800868c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800868e:	e841 2300 	strex	r3, r2, [r1]
 8008692:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d1e3      	bne.n	8008662 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	3314      	adds	r3, #20
 80086a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	623b      	str	r3, [r7, #32]
   return(result);
 80086aa:	6a3b      	ldr	r3, [r7, #32]
 80086ac:	f023 0301 	bic.w	r3, r3, #1
 80086b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3314      	adds	r3, #20
 80086ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80086be:	633a      	str	r2, [r7, #48]	; 0x30
 80086c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80086c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086c6:	e841 2300 	strex	r3, r2, [r1]
 80086ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e3      	bne.n	800869a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2220      	movs	r2, #32
 80086d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	330c      	adds	r3, #12
 80086e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	e853 3f00 	ldrex	r3, [r3]
 80086ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f023 0310 	bic.w	r3, r3, #16
 80086f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	330c      	adds	r3, #12
 8008700:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008704:	61fa      	str	r2, [r7, #28]
 8008706:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008708:	69b9      	ldr	r1, [r7, #24]
 800870a:	69fa      	ldr	r2, [r7, #28]
 800870c:	e841 2300 	strex	r3, r2, [r1]
 8008710:	617b      	str	r3, [r7, #20]
   return(result);
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e3      	bne.n	80086e0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008718:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f852 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008724:	e023      	b.n	800876e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800872e:	2b00      	cmp	r3, #0
 8008730:	d009      	beq.n	8008746 <HAL_UART_IRQHandler+0x4ea>
 8008732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fadf 	bl	8008d02 <UART_Transmit_IT>
    return;
 8008744:	e014      	b.n	8008770 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800874a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800874e:	2b00      	cmp	r3, #0
 8008750:	d00e      	beq.n	8008770 <HAL_UART_IRQHandler+0x514>
 8008752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008756:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800875a:	2b00      	cmp	r3, #0
 800875c:	d008      	beq.n	8008770 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fb1f 	bl	8008da2 <UART_EndTransmit_IT>
    return;
 8008764:	e004      	b.n	8008770 <HAL_UART_IRQHandler+0x514>
    return;
 8008766:	bf00      	nop
 8008768:	e002      	b.n	8008770 <HAL_UART_IRQHandler+0x514>
      return;
 800876a:	bf00      	nop
 800876c:	e000      	b.n	8008770 <HAL_UART_IRQHandler+0x514>
      return;
 800876e:	bf00      	nop
  }
}
 8008770:	37e8      	adds	r7, #232	; 0xe8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
 8008776:	bf00      	nop

08008778 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b090      	sub	sp, #64	; 0x40
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d137      	bne.n	800886c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80087fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fe:	2200      	movs	r2, #0
 8008800:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3314      	adds	r3, #20
 8008808:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	623b      	str	r3, [r7, #32]
   return(result);
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008818:	63bb      	str	r3, [r7, #56]	; 0x38
 800881a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3314      	adds	r3, #20
 8008820:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008822:	633a      	str	r2, [r7, #48]	; 0x30
 8008824:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e5      	bne.n	8008802 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	330c      	adds	r3, #12
 800883c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	60fb      	str	r3, [r7, #12]
   return(result);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800884c:	637b      	str	r3, [r7, #52]	; 0x34
 800884e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	330c      	adds	r3, #12
 8008854:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008856:	61fa      	str	r2, [r7, #28]
 8008858:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	69b9      	ldr	r1, [r7, #24]
 800885c:	69fa      	ldr	r2, [r7, #28]
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	617b      	str	r3, [r7, #20]
   return(result);
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e5      	bne.n	8008836 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800886a:	e002      	b.n	8008872 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800886c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800886e:	f7fa fe13 	bl	8003498 <HAL_UART_TxCpltCallback>
}
 8008872:	bf00      	nop
 8008874:	3740      	adds	r7, #64	; 0x40
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008886:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7ff ff75 	bl	8008778 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b09c      	sub	sp, #112	; 0x70
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d172      	bne.n	8008998 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80088b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088b4:	2200      	movs	r2, #0
 80088b6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	330c      	adds	r3, #12
 80088be:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80088c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80088d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	330c      	adds	r3, #12
 80088d6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80088d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80088da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80088de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80088e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e5      	bne.n	80088b8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3314      	adds	r3, #20
 80088f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80088fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fe:	f023 0301 	bic.w	r3, r3, #1
 8008902:	667b      	str	r3, [r7, #100]	; 0x64
 8008904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3314      	adds	r3, #20
 800890a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800890c:	647a      	str	r2, [r7, #68]	; 0x44
 800890e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008910:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008912:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008914:	e841 2300 	strex	r3, r2, [r1]
 8008918:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800891a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1e5      	bne.n	80088ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3314      	adds	r3, #20
 8008926:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	623b      	str	r3, [r7, #32]
   return(result);
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008936:	663b      	str	r3, [r7, #96]	; 0x60
 8008938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3314      	adds	r3, #20
 800893e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008940:	633a      	str	r2, [r7, #48]	; 0x30
 8008942:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008946:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800894e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e5      	bne.n	8008920 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008956:	2220      	movs	r2, #32
 8008958:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800895c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800895e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008960:	2b01      	cmp	r3, #1
 8008962:	d119      	bne.n	8008998 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	330c      	adds	r3, #12
 800896a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	e853 3f00 	ldrex	r3, [r3]
 8008972:	60fb      	str	r3, [r7, #12]
   return(result);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 0310 	bic.w	r3, r3, #16
 800897a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800897c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	330c      	adds	r3, #12
 8008982:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008984:	61fa      	str	r2, [r7, #28]
 8008986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	69b9      	ldr	r1, [r7, #24]
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	617b      	str	r3, [r7, #20]
   return(result);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e5      	bne.n	8008964 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008998:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800899c:	2b01      	cmp	r3, #1
 800899e:	d106      	bne.n	80089ae <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089a2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089a4:	4619      	mov	r1, r3
 80089a6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80089a8:	f7ff ff0e 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089ac:	e002      	b.n	80089b4 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80089ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80089b0:	f7ff feec 	bl	800878c <HAL_UART_RxCpltCallback>
}
 80089b4:	bf00      	nop
 80089b6:	3770      	adds	r7, #112	; 0x70
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}

080089bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c8:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ce:	2b01      	cmp	r3, #1
 80089d0:	d108      	bne.n	80089e4 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089d6:	085b      	lsrs	r3, r3, #1
 80089d8:	b29b      	uxth	r3, r3
 80089da:	4619      	mov	r1, r3
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f7ff fef3 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089e2:	e002      	b.n	80089ea <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80089e4:	68f8      	ldr	r0, [r7, #12]
 80089e6:	f7ff fedb 	bl	80087a0 <HAL_UART_RxHalfCpltCallback>
}
 80089ea:	bf00      	nop
 80089ec:	3710      	adds	r7, #16
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}

080089f2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80089f2:	b580      	push	{r7, lr}
 80089f4:	b084      	sub	sp, #16
 80089f6:	af00      	add	r7, sp, #0
 80089f8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a02:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a0e:	2b80      	cmp	r3, #128	; 0x80
 8008a10:	bf0c      	ite	eq
 8008a12:	2301      	moveq	r3, #1
 8008a14:	2300      	movne	r3, #0
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b21      	cmp	r3, #33	; 0x21
 8008a24:	d108      	bne.n	8008a38 <UART_DMAError+0x46>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d005      	beq.n	8008a38 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008a32:	68b8      	ldr	r0, [r7, #8]
 8008a34:	f000 f8c6 	bl	8008bc4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	695b      	ldr	r3, [r3, #20]
 8008a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a42:	2b40      	cmp	r3, #64	; 0x40
 8008a44:	bf0c      	ite	eq
 8008a46:	2301      	moveq	r3, #1
 8008a48:	2300      	movne	r3, #0
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	2b22      	cmp	r3, #34	; 0x22
 8008a58:	d108      	bne.n	8008a6c <UART_DMAError+0x7a>
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	2200      	movs	r2, #0
 8008a64:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008a66:	68b8      	ldr	r0, [r7, #8]
 8008a68:	f000 f8d4 	bl	8008c14 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a70:	f043 0210 	orr.w	r2, r3, #16
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a78:	68b8      	ldr	r0, [r7, #8]
 8008a7a:	f7ff fe9b 	bl	80087b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a7e:	bf00      	nop
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}
	...

08008a88 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b098      	sub	sp, #96	; 0x60
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008a96:	68ba      	ldr	r2, [r7, #8]
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	88fa      	ldrh	r2, [r7, #6]
 8008aa0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2222      	movs	r2, #34	; 0x22
 8008aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab4:	4a40      	ldr	r2, [pc, #256]	; (8008bb8 <UART_Start_Receive_DMA+0x130>)
 8008ab6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abc:	4a3f      	ldr	r2, [pc, #252]	; (8008bbc <UART_Start_Receive_DMA+0x134>)
 8008abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac4:	4a3e      	ldr	r2, [pc, #248]	; (8008bc0 <UART_Start_Receive_DMA+0x138>)
 8008ac6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008acc:	2200      	movs	r2, #0
 8008ace:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008ad0:	f107 0308 	add.w	r3, r7, #8
 8008ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	88fb      	ldrh	r3, [r7, #6]
 8008ae8:	f7fb f88e 	bl	8003c08 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008aec:	2300      	movs	r3, #0
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	613b      	str	r3, [r7, #16]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	613b      	str	r3, [r7, #16]
 8008b00:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	691b      	ldr	r3, [r3, #16]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d019      	beq.n	8008b46 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	330c      	adds	r3, #12
 8008b18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b1c:	e853 3f00 	ldrex	r3, [r3]
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b28:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	330c      	adds	r3, #12
 8008b30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b32:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008b34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008b38:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b3a:	e841 2300 	strex	r3, r2, [r1]
 8008b3e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1e5      	bne.n	8008b12 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3314      	adds	r3, #20
 8008b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b50:	e853 3f00 	ldrex	r3, [r3]
 8008b54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b58:	f043 0301 	orr.w	r3, r3, #1
 8008b5c:	657b      	str	r3, [r7, #84]	; 0x54
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3314      	adds	r3, #20
 8008b64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b66:	63ba      	str	r2, [r7, #56]	; 0x38
 8008b68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008b6e:	e841 2300 	strex	r3, r2, [r1]
 8008b72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d1e5      	bne.n	8008b46 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3314      	adds	r3, #20
 8008b80:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	617b      	str	r3, [r7, #20]
   return(result);
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b90:	653b      	str	r3, [r7, #80]	; 0x50
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3314      	adds	r3, #20
 8008b98:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b9a:	627a      	str	r2, [r7, #36]	; 0x24
 8008b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6a39      	ldr	r1, [r7, #32]
 8008ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e5      	bne.n	8008b7a <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3760      	adds	r7, #96	; 0x60
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	08008897 	.word	0x08008897
 8008bbc:	080089bd 	.word	0x080089bd
 8008bc0:	080089f3 	.word	0x080089f3

08008bc4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b089      	sub	sp, #36	; 0x24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	330c      	adds	r3, #12
 8008bd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	e853 3f00 	ldrex	r3, [r3]
 8008bda:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008be2:	61fb      	str	r3, [r7, #28]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	330c      	adds	r3, #12
 8008bea:	69fa      	ldr	r2, [r7, #28]
 8008bec:	61ba      	str	r2, [r7, #24]
 8008bee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf0:	6979      	ldr	r1, [r7, #20]
 8008bf2:	69ba      	ldr	r2, [r7, #24]
 8008bf4:	e841 2300 	strex	r3, r2, [r1]
 8008bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d1e5      	bne.n	8008bcc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2220      	movs	r2, #32
 8008c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008c08:	bf00      	nop
 8008c0a:	3724      	adds	r7, #36	; 0x24
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b095      	sub	sp, #84	; 0x54
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	330c      	adds	r3, #12
 8008c22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c26:	e853 3f00 	ldrex	r3, [r3]
 8008c2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	330c      	adds	r3, #12
 8008c3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008c3c:	643a      	str	r2, [r7, #64]	; 0x40
 8008c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c44:	e841 2300 	strex	r3, r2, [r1]
 8008c48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d1e5      	bne.n	8008c1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	3314      	adds	r3, #20
 8008c56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c58:	6a3b      	ldr	r3, [r7, #32]
 8008c5a:	e853 3f00 	ldrex	r3, [r3]
 8008c5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	f023 0301 	bic.w	r3, r3, #1
 8008c66:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3314      	adds	r3, #20
 8008c6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c78:	e841 2300 	strex	r3, r2, [r1]
 8008c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1e5      	bne.n	8008c50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d119      	bne.n	8008cc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	330c      	adds	r3, #12
 8008c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	e853 3f00 	ldrex	r3, [r3]
 8008c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f023 0310 	bic.w	r3, r3, #16
 8008ca2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	330c      	adds	r3, #12
 8008caa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cac:	61ba      	str	r2, [r7, #24]
 8008cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb0:	6979      	ldr	r1, [r7, #20]
 8008cb2:	69ba      	ldr	r2, [r7, #24]
 8008cb4:	e841 2300 	strex	r3, r2, [r1]
 8008cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d1e5      	bne.n	8008c8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2220      	movs	r2, #32
 8008cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2200      	movs	r2, #0
 8008ccc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008cce:	bf00      	nop
 8008cd0:	3754      	adds	r7, #84	; 0x54
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cda:	b580      	push	{r7, lr}
 8008cdc:	b084      	sub	sp, #16
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2200      	movs	r2, #0
 8008cec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cf4:	68f8      	ldr	r0, [r7, #12]
 8008cf6:	f7ff fd5d 	bl	80087b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cfa:	bf00      	nop
 8008cfc:	3710      	adds	r7, #16
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	bd80      	pop	{r7, pc}

08008d02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d02:	b480      	push	{r7}
 8008d04:	b085      	sub	sp, #20
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b21      	cmp	r3, #33	; 0x21
 8008d14:	d13e      	bne.n	8008d94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d1e:	d114      	bne.n	8008d4a <UART_Transmit_IT+0x48>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	691b      	ldr	r3, [r3, #16]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d110      	bne.n	8008d4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	881b      	ldrh	r3, [r3, #0]
 8008d32:	461a      	mov	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	1c9a      	adds	r2, r3, #2
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	621a      	str	r2, [r3, #32]
 8008d48:	e008      	b.n	8008d5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6a1b      	ldr	r3, [r3, #32]
 8008d4e:	1c59      	adds	r1, r3, #1
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	6211      	str	r1, [r2, #32]
 8008d54:	781a      	ldrb	r2, [r3, #0]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	3b01      	subs	r3, #1
 8008d64:	b29b      	uxth	r3, r3
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	4619      	mov	r1, r3
 8008d6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d10f      	bne.n	8008d90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68da      	ldr	r2, [r3, #12]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	68da      	ldr	r2, [r3, #12]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	e000      	b.n	8008d96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008d94:	2302      	movs	r3, #2
  }
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da0:	4770      	bx	lr

08008da2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b082      	sub	sp, #8
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008db8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2220      	movs	r2, #32
 8008dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f7fa fb68 	bl	8003498 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b08c      	sub	sp, #48	; 0x30
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b22      	cmp	r3, #34	; 0x22
 8008de4:	f040 80ab 	bne.w	8008f3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df0:	d117      	bne.n	8008e22 <UART_Receive_IT+0x50>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d113      	bne.n	8008e22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	b29b      	uxth	r3, r3
 8008e0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e10:	b29a      	uxth	r2, r3
 8008e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1a:	1c9a      	adds	r2, r3, #2
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	629a      	str	r2, [r3, #40]	; 0x28
 8008e20:	e026      	b.n	8008e70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e34:	d007      	beq.n	8008e46 <UART_Receive_IT+0x74>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10a      	bne.n	8008e54 <UART_Receive_IT+0x82>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d106      	bne.n	8008e54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	b2da      	uxtb	r2, r3
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e50:	701a      	strb	r2, [r3, #0]
 8008e52:	e008      	b.n	8008e66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	685b      	ldr	r3, [r3, #4]
 8008e5a:	b2db      	uxtb	r3, r3
 8008e5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e60:	b2da      	uxtb	r2, r3
 8008e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	687a      	ldr	r2, [r7, #4]
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d15a      	bne.n	8008f3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68da      	ldr	r2, [r3, #12]
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f022 0220 	bic.w	r2, r2, #32
 8008e92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	68da      	ldr	r2, [r3, #12]
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ea2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	695a      	ldr	r2, [r3, #20]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f022 0201 	bic.w	r2, r2, #1
 8008eb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2220      	movs	r2, #32
 8008eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d135      	bne.n	8008f30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	330c      	adds	r3, #12
 8008ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	e853 3f00 	ldrex	r3, [r3]
 8008ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	f023 0310 	bic.w	r3, r3, #16
 8008ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	330c      	adds	r3, #12
 8008ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eea:	623a      	str	r2, [r7, #32]
 8008eec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eee:	69f9      	ldr	r1, [r7, #28]
 8008ef0:	6a3a      	ldr	r2, [r7, #32]
 8008ef2:	e841 2300 	strex	r3, r2, [r1]
 8008ef6:	61bb      	str	r3, [r7, #24]
   return(result);
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1e5      	bne.n	8008eca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f003 0310 	and.w	r3, r3, #16
 8008f08:	2b10      	cmp	r3, #16
 8008f0a:	d10a      	bne.n	8008f22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	60fb      	str	r3, [r7, #12]
 8008f20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f26:	4619      	mov	r1, r3
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f7ff fc4d 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
 8008f2e:	e002      	b.n	8008f36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f7ff fc2b 	bl	800878c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f36:	2300      	movs	r3, #0
 8008f38:	e002      	b.n	8008f40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	e000      	b.n	8008f40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008f3e:	2302      	movs	r3, #2
  }
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3730      	adds	r7, #48	; 0x30
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f4c:	b0c0      	sub	sp, #256	; 0x100
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	691b      	ldr	r3, [r3, #16]
 8008f5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f64:	68d9      	ldr	r1, [r3, #12]
 8008f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	ea40 0301 	orr.w	r3, r0, r1
 8008f70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f76:	689a      	ldr	r2, [r3, #8]
 8008f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f7c:	691b      	ldr	r3, [r3, #16]
 8008f7e:	431a      	orrs	r2, r3
 8008f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f84:	695b      	ldr	r3, [r3, #20]
 8008f86:	431a      	orrs	r2, r3
 8008f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008fa0:	f021 010c 	bic.w	r1, r1, #12
 8008fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008fae:	430b      	orrs	r3, r1
 8008fb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc2:	6999      	ldr	r1, [r3, #24]
 8008fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fc8:	681a      	ldr	r2, [r3, #0]
 8008fca:	ea40 0301 	orr.w	r3, r0, r1
 8008fce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	4b8f      	ldr	r3, [pc, #572]	; (8009214 <UART_SetConfig+0x2cc>)
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d005      	beq.n	8008fe8 <UART_SetConfig+0xa0>
 8008fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008fe0:	681a      	ldr	r2, [r3, #0]
 8008fe2:	4b8d      	ldr	r3, [pc, #564]	; (8009218 <UART_SetConfig+0x2d0>)
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d104      	bne.n	8008ff2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fe8:	f7fd fd8e 	bl	8006b08 <HAL_RCC_GetPCLK2Freq>
 8008fec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008ff0:	e003      	b.n	8008ffa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008ff2:	f7fd fd75 	bl	8006ae0 <HAL_RCC_GetPCLK1Freq>
 8008ff6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ffe:	69db      	ldr	r3, [r3, #28]
 8009000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009004:	f040 810c 	bne.w	8009220 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800900c:	2200      	movs	r2, #0
 800900e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009012:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009016:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800901a:	4622      	mov	r2, r4
 800901c:	462b      	mov	r3, r5
 800901e:	1891      	adds	r1, r2, r2
 8009020:	65b9      	str	r1, [r7, #88]	; 0x58
 8009022:	415b      	adcs	r3, r3
 8009024:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009026:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800902a:	4621      	mov	r1, r4
 800902c:	eb12 0801 	adds.w	r8, r2, r1
 8009030:	4629      	mov	r1, r5
 8009032:	eb43 0901 	adc.w	r9, r3, r1
 8009036:	f04f 0200 	mov.w	r2, #0
 800903a:	f04f 0300 	mov.w	r3, #0
 800903e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009042:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009046:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800904a:	4690      	mov	r8, r2
 800904c:	4699      	mov	r9, r3
 800904e:	4623      	mov	r3, r4
 8009050:	eb18 0303 	adds.w	r3, r8, r3
 8009054:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009058:	462b      	mov	r3, r5
 800905a:	eb49 0303 	adc.w	r3, r9, r3
 800905e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009066:	685b      	ldr	r3, [r3, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800906e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009072:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009076:	460b      	mov	r3, r1
 8009078:	18db      	adds	r3, r3, r3
 800907a:	653b      	str	r3, [r7, #80]	; 0x50
 800907c:	4613      	mov	r3, r2
 800907e:	eb42 0303 	adc.w	r3, r2, r3
 8009082:	657b      	str	r3, [r7, #84]	; 0x54
 8009084:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009088:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800908c:	f7f7 f8f0 	bl	8000270 <__aeabi_uldivmod>
 8009090:	4602      	mov	r2, r0
 8009092:	460b      	mov	r3, r1
 8009094:	4b61      	ldr	r3, [pc, #388]	; (800921c <UART_SetConfig+0x2d4>)
 8009096:	fba3 2302 	umull	r2, r3, r3, r2
 800909a:	095b      	lsrs	r3, r3, #5
 800909c:	011c      	lsls	r4, r3, #4
 800909e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80090ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80090b0:	4642      	mov	r2, r8
 80090b2:	464b      	mov	r3, r9
 80090b4:	1891      	adds	r1, r2, r2
 80090b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80090b8:	415b      	adcs	r3, r3
 80090ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80090c0:	4641      	mov	r1, r8
 80090c2:	eb12 0a01 	adds.w	sl, r2, r1
 80090c6:	4649      	mov	r1, r9
 80090c8:	eb43 0b01 	adc.w	fp, r3, r1
 80090cc:	f04f 0200 	mov.w	r2, #0
 80090d0:	f04f 0300 	mov.w	r3, #0
 80090d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80090dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090e0:	4692      	mov	sl, r2
 80090e2:	469b      	mov	fp, r3
 80090e4:	4643      	mov	r3, r8
 80090e6:	eb1a 0303 	adds.w	r3, sl, r3
 80090ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090ee:	464b      	mov	r3, r9
 80090f0:	eb4b 0303 	adc.w	r3, fp, r3
 80090f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80090f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	2200      	movs	r2, #0
 8009100:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009104:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009108:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800910c:	460b      	mov	r3, r1
 800910e:	18db      	adds	r3, r3, r3
 8009110:	643b      	str	r3, [r7, #64]	; 0x40
 8009112:	4613      	mov	r3, r2
 8009114:	eb42 0303 	adc.w	r3, r2, r3
 8009118:	647b      	str	r3, [r7, #68]	; 0x44
 800911a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800911e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009122:	f7f7 f8a5 	bl	8000270 <__aeabi_uldivmod>
 8009126:	4602      	mov	r2, r0
 8009128:	460b      	mov	r3, r1
 800912a:	4611      	mov	r1, r2
 800912c:	4b3b      	ldr	r3, [pc, #236]	; (800921c <UART_SetConfig+0x2d4>)
 800912e:	fba3 2301 	umull	r2, r3, r3, r1
 8009132:	095b      	lsrs	r3, r3, #5
 8009134:	2264      	movs	r2, #100	; 0x64
 8009136:	fb02 f303 	mul.w	r3, r2, r3
 800913a:	1acb      	subs	r3, r1, r3
 800913c:	00db      	lsls	r3, r3, #3
 800913e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009142:	4b36      	ldr	r3, [pc, #216]	; (800921c <UART_SetConfig+0x2d4>)
 8009144:	fba3 2302 	umull	r2, r3, r3, r2
 8009148:	095b      	lsrs	r3, r3, #5
 800914a:	005b      	lsls	r3, r3, #1
 800914c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009150:	441c      	add	r4, r3
 8009152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009156:	2200      	movs	r2, #0
 8009158:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800915c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009160:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009164:	4642      	mov	r2, r8
 8009166:	464b      	mov	r3, r9
 8009168:	1891      	adds	r1, r2, r2
 800916a:	63b9      	str	r1, [r7, #56]	; 0x38
 800916c:	415b      	adcs	r3, r3
 800916e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009170:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009174:	4641      	mov	r1, r8
 8009176:	1851      	adds	r1, r2, r1
 8009178:	6339      	str	r1, [r7, #48]	; 0x30
 800917a:	4649      	mov	r1, r9
 800917c:	414b      	adcs	r3, r1
 800917e:	637b      	str	r3, [r7, #52]	; 0x34
 8009180:	f04f 0200 	mov.w	r2, #0
 8009184:	f04f 0300 	mov.w	r3, #0
 8009188:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800918c:	4659      	mov	r1, fp
 800918e:	00cb      	lsls	r3, r1, #3
 8009190:	4651      	mov	r1, sl
 8009192:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009196:	4651      	mov	r1, sl
 8009198:	00ca      	lsls	r2, r1, #3
 800919a:	4610      	mov	r0, r2
 800919c:	4619      	mov	r1, r3
 800919e:	4603      	mov	r3, r0
 80091a0:	4642      	mov	r2, r8
 80091a2:	189b      	adds	r3, r3, r2
 80091a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80091a8:	464b      	mov	r3, r9
 80091aa:	460a      	mov	r2, r1
 80091ac:	eb42 0303 	adc.w	r3, r2, r3
 80091b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80091b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80091c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80091c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80091c8:	460b      	mov	r3, r1
 80091ca:	18db      	adds	r3, r3, r3
 80091cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80091ce:	4613      	mov	r3, r2
 80091d0:	eb42 0303 	adc.w	r3, r2, r3
 80091d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80091da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80091de:	f7f7 f847 	bl	8000270 <__aeabi_uldivmod>
 80091e2:	4602      	mov	r2, r0
 80091e4:	460b      	mov	r3, r1
 80091e6:	4b0d      	ldr	r3, [pc, #52]	; (800921c <UART_SetConfig+0x2d4>)
 80091e8:	fba3 1302 	umull	r1, r3, r3, r2
 80091ec:	095b      	lsrs	r3, r3, #5
 80091ee:	2164      	movs	r1, #100	; 0x64
 80091f0:	fb01 f303 	mul.w	r3, r1, r3
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	00db      	lsls	r3, r3, #3
 80091f8:	3332      	adds	r3, #50	; 0x32
 80091fa:	4a08      	ldr	r2, [pc, #32]	; (800921c <UART_SetConfig+0x2d4>)
 80091fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009200:	095b      	lsrs	r3, r3, #5
 8009202:	f003 0207 	and.w	r2, r3, #7
 8009206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4422      	add	r2, r4
 800920e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009210:	e105      	b.n	800941e <UART_SetConfig+0x4d6>
 8009212:	bf00      	nop
 8009214:	40011000 	.word	0x40011000
 8009218:	40011400 	.word	0x40011400
 800921c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009220:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009224:	2200      	movs	r2, #0
 8009226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800922a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800922e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009232:	4642      	mov	r2, r8
 8009234:	464b      	mov	r3, r9
 8009236:	1891      	adds	r1, r2, r2
 8009238:	6239      	str	r1, [r7, #32]
 800923a:	415b      	adcs	r3, r3
 800923c:	627b      	str	r3, [r7, #36]	; 0x24
 800923e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009242:	4641      	mov	r1, r8
 8009244:	1854      	adds	r4, r2, r1
 8009246:	4649      	mov	r1, r9
 8009248:	eb43 0501 	adc.w	r5, r3, r1
 800924c:	f04f 0200 	mov.w	r2, #0
 8009250:	f04f 0300 	mov.w	r3, #0
 8009254:	00eb      	lsls	r3, r5, #3
 8009256:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800925a:	00e2      	lsls	r2, r4, #3
 800925c:	4614      	mov	r4, r2
 800925e:	461d      	mov	r5, r3
 8009260:	4643      	mov	r3, r8
 8009262:	18e3      	adds	r3, r4, r3
 8009264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009268:	464b      	mov	r3, r9
 800926a:	eb45 0303 	adc.w	r3, r5, r3
 800926e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800927e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009282:	f04f 0200 	mov.w	r2, #0
 8009286:	f04f 0300 	mov.w	r3, #0
 800928a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800928e:	4629      	mov	r1, r5
 8009290:	008b      	lsls	r3, r1, #2
 8009292:	4621      	mov	r1, r4
 8009294:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009298:	4621      	mov	r1, r4
 800929a:	008a      	lsls	r2, r1, #2
 800929c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80092a0:	f7f6 ffe6 	bl	8000270 <__aeabi_uldivmod>
 80092a4:	4602      	mov	r2, r0
 80092a6:	460b      	mov	r3, r1
 80092a8:	4b60      	ldr	r3, [pc, #384]	; (800942c <UART_SetConfig+0x4e4>)
 80092aa:	fba3 2302 	umull	r2, r3, r3, r2
 80092ae:	095b      	lsrs	r3, r3, #5
 80092b0:	011c      	lsls	r4, r3, #4
 80092b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092b6:	2200      	movs	r2, #0
 80092b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80092bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80092c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80092c4:	4642      	mov	r2, r8
 80092c6:	464b      	mov	r3, r9
 80092c8:	1891      	adds	r1, r2, r2
 80092ca:	61b9      	str	r1, [r7, #24]
 80092cc:	415b      	adcs	r3, r3
 80092ce:	61fb      	str	r3, [r7, #28]
 80092d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092d4:	4641      	mov	r1, r8
 80092d6:	1851      	adds	r1, r2, r1
 80092d8:	6139      	str	r1, [r7, #16]
 80092da:	4649      	mov	r1, r9
 80092dc:	414b      	adcs	r3, r1
 80092de:	617b      	str	r3, [r7, #20]
 80092e0:	f04f 0200 	mov.w	r2, #0
 80092e4:	f04f 0300 	mov.w	r3, #0
 80092e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092ec:	4659      	mov	r1, fp
 80092ee:	00cb      	lsls	r3, r1, #3
 80092f0:	4651      	mov	r1, sl
 80092f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092f6:	4651      	mov	r1, sl
 80092f8:	00ca      	lsls	r2, r1, #3
 80092fa:	4610      	mov	r0, r2
 80092fc:	4619      	mov	r1, r3
 80092fe:	4603      	mov	r3, r0
 8009300:	4642      	mov	r2, r8
 8009302:	189b      	adds	r3, r3, r2
 8009304:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009308:	464b      	mov	r3, r9
 800930a:	460a      	mov	r2, r1
 800930c:	eb42 0303 	adc.w	r3, r2, r3
 8009310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	67bb      	str	r3, [r7, #120]	; 0x78
 800931e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	f04f 0300 	mov.w	r3, #0
 8009328:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800932c:	4649      	mov	r1, r9
 800932e:	008b      	lsls	r3, r1, #2
 8009330:	4641      	mov	r1, r8
 8009332:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009336:	4641      	mov	r1, r8
 8009338:	008a      	lsls	r2, r1, #2
 800933a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800933e:	f7f6 ff97 	bl	8000270 <__aeabi_uldivmod>
 8009342:	4602      	mov	r2, r0
 8009344:	460b      	mov	r3, r1
 8009346:	4b39      	ldr	r3, [pc, #228]	; (800942c <UART_SetConfig+0x4e4>)
 8009348:	fba3 1302 	umull	r1, r3, r3, r2
 800934c:	095b      	lsrs	r3, r3, #5
 800934e:	2164      	movs	r1, #100	; 0x64
 8009350:	fb01 f303 	mul.w	r3, r1, r3
 8009354:	1ad3      	subs	r3, r2, r3
 8009356:	011b      	lsls	r3, r3, #4
 8009358:	3332      	adds	r3, #50	; 0x32
 800935a:	4a34      	ldr	r2, [pc, #208]	; (800942c <UART_SetConfig+0x4e4>)
 800935c:	fba2 2303 	umull	r2, r3, r2, r3
 8009360:	095b      	lsrs	r3, r3, #5
 8009362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009366:	441c      	add	r4, r3
 8009368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800936c:	2200      	movs	r2, #0
 800936e:	673b      	str	r3, [r7, #112]	; 0x70
 8009370:	677a      	str	r2, [r7, #116]	; 0x74
 8009372:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009376:	4642      	mov	r2, r8
 8009378:	464b      	mov	r3, r9
 800937a:	1891      	adds	r1, r2, r2
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	415b      	adcs	r3, r3
 8009380:	60fb      	str	r3, [r7, #12]
 8009382:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009386:	4641      	mov	r1, r8
 8009388:	1851      	adds	r1, r2, r1
 800938a:	6039      	str	r1, [r7, #0]
 800938c:	4649      	mov	r1, r9
 800938e:	414b      	adcs	r3, r1
 8009390:	607b      	str	r3, [r7, #4]
 8009392:	f04f 0200 	mov.w	r2, #0
 8009396:	f04f 0300 	mov.w	r3, #0
 800939a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800939e:	4659      	mov	r1, fp
 80093a0:	00cb      	lsls	r3, r1, #3
 80093a2:	4651      	mov	r1, sl
 80093a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093a8:	4651      	mov	r1, sl
 80093aa:	00ca      	lsls	r2, r1, #3
 80093ac:	4610      	mov	r0, r2
 80093ae:	4619      	mov	r1, r3
 80093b0:	4603      	mov	r3, r0
 80093b2:	4642      	mov	r2, r8
 80093b4:	189b      	adds	r3, r3, r2
 80093b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80093b8:	464b      	mov	r3, r9
 80093ba:	460a      	mov	r2, r1
 80093bc:	eb42 0303 	adc.w	r3, r2, r3
 80093c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80093c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	663b      	str	r3, [r7, #96]	; 0x60
 80093cc:	667a      	str	r2, [r7, #100]	; 0x64
 80093ce:	f04f 0200 	mov.w	r2, #0
 80093d2:	f04f 0300 	mov.w	r3, #0
 80093d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80093da:	4649      	mov	r1, r9
 80093dc:	008b      	lsls	r3, r1, #2
 80093de:	4641      	mov	r1, r8
 80093e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093e4:	4641      	mov	r1, r8
 80093e6:	008a      	lsls	r2, r1, #2
 80093e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80093ec:	f7f6 ff40 	bl	8000270 <__aeabi_uldivmod>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4b0d      	ldr	r3, [pc, #52]	; (800942c <UART_SetConfig+0x4e4>)
 80093f6:	fba3 1302 	umull	r1, r3, r3, r2
 80093fa:	095b      	lsrs	r3, r3, #5
 80093fc:	2164      	movs	r1, #100	; 0x64
 80093fe:	fb01 f303 	mul.w	r3, r1, r3
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	011b      	lsls	r3, r3, #4
 8009406:	3332      	adds	r3, #50	; 0x32
 8009408:	4a08      	ldr	r2, [pc, #32]	; (800942c <UART_SetConfig+0x4e4>)
 800940a:	fba2 2303 	umull	r2, r3, r2, r3
 800940e:	095b      	lsrs	r3, r3, #5
 8009410:	f003 020f 	and.w	r2, r3, #15
 8009414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4422      	add	r2, r4
 800941c:	609a      	str	r2, [r3, #8]
}
 800941e:	bf00      	nop
 8009420:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009424:	46bd      	mov	sp, r7
 8009426:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800942a:	bf00      	nop
 800942c:	51eb851f 	.word	0x51eb851f

08009430 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009430:	b084      	sub	sp, #16
 8009432:	b580      	push	{r7, lr}
 8009434:	b084      	sub	sp, #16
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	f107 001c 	add.w	r0, r7, #28
 800943e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009444:	2b01      	cmp	r3, #1
 8009446:	d122      	bne.n	800948e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800944c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	68db      	ldr	r3, [r3, #12]
 8009458:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800945c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	68db      	ldr	r3, [r3, #12]
 8009468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009472:	2b01      	cmp	r3, #1
 8009474:	d105      	bne.n	8009482 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f001 fbee 	bl	800ac64 <USB_CoreReset>
 8009488:	4603      	mov	r3, r0
 800948a:	73fb      	strb	r3, [r7, #15]
 800948c:	e01a      	b.n	80094c4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	68db      	ldr	r3, [r3, #12]
 8009492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f001 fbe2 	bl	800ac64 <USB_CoreReset>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80094a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d106      	bne.n	80094b8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	639a      	str	r2, [r3, #56]	; 0x38
 80094b6:	e005      	b.n	80094c4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80094c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d10b      	bne.n	80094e2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f043 0206 	orr.w	r2, r3, #6
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f043 0220 	orr.w	r2, r3, #32
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80094ee:	b004      	add	sp, #16
 80094f0:	4770      	bx	lr
	...

080094f4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b087      	sub	sp, #28
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60f8      	str	r0, [r7, #12]
 80094fc:	60b9      	str	r1, [r7, #8]
 80094fe:	4613      	mov	r3, r2
 8009500:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009502:	79fb      	ldrb	r3, [r7, #7]
 8009504:	2b02      	cmp	r3, #2
 8009506:	d165      	bne.n	80095d4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	4a41      	ldr	r2, [pc, #260]	; (8009610 <USB_SetTurnaroundTime+0x11c>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d906      	bls.n	800951e <USB_SetTurnaroundTime+0x2a>
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	4a40      	ldr	r2, [pc, #256]	; (8009614 <USB_SetTurnaroundTime+0x120>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d202      	bcs.n	800951e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009518:	230f      	movs	r3, #15
 800951a:	617b      	str	r3, [r7, #20]
 800951c:	e062      	b.n	80095e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	4a3c      	ldr	r2, [pc, #240]	; (8009614 <USB_SetTurnaroundTime+0x120>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d306      	bcc.n	8009534 <USB_SetTurnaroundTime+0x40>
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	4a3b      	ldr	r2, [pc, #236]	; (8009618 <USB_SetTurnaroundTime+0x124>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d202      	bcs.n	8009534 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800952e:	230e      	movs	r3, #14
 8009530:	617b      	str	r3, [r7, #20]
 8009532:	e057      	b.n	80095e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	4a38      	ldr	r2, [pc, #224]	; (8009618 <USB_SetTurnaroundTime+0x124>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d306      	bcc.n	800954a <USB_SetTurnaroundTime+0x56>
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	4a37      	ldr	r2, [pc, #220]	; (800961c <USB_SetTurnaroundTime+0x128>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d202      	bcs.n	800954a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009544:	230d      	movs	r3, #13
 8009546:	617b      	str	r3, [r7, #20]
 8009548:	e04c      	b.n	80095e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	4a33      	ldr	r2, [pc, #204]	; (800961c <USB_SetTurnaroundTime+0x128>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d306      	bcc.n	8009560 <USB_SetTurnaroundTime+0x6c>
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	4a32      	ldr	r2, [pc, #200]	; (8009620 <USB_SetTurnaroundTime+0x12c>)
 8009556:	4293      	cmp	r3, r2
 8009558:	d802      	bhi.n	8009560 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800955a:	230c      	movs	r3, #12
 800955c:	617b      	str	r3, [r7, #20]
 800955e:	e041      	b.n	80095e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	4a2f      	ldr	r2, [pc, #188]	; (8009620 <USB_SetTurnaroundTime+0x12c>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d906      	bls.n	8009576 <USB_SetTurnaroundTime+0x82>
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	4a2e      	ldr	r2, [pc, #184]	; (8009624 <USB_SetTurnaroundTime+0x130>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d802      	bhi.n	8009576 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009570:	230b      	movs	r3, #11
 8009572:	617b      	str	r3, [r7, #20]
 8009574:	e036      	b.n	80095e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	4a2a      	ldr	r2, [pc, #168]	; (8009624 <USB_SetTurnaroundTime+0x130>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d906      	bls.n	800958c <USB_SetTurnaroundTime+0x98>
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	4a29      	ldr	r2, [pc, #164]	; (8009628 <USB_SetTurnaroundTime+0x134>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d802      	bhi.n	800958c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009586:	230a      	movs	r3, #10
 8009588:	617b      	str	r3, [r7, #20]
 800958a:	e02b      	b.n	80095e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	4a26      	ldr	r2, [pc, #152]	; (8009628 <USB_SetTurnaroundTime+0x134>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d906      	bls.n	80095a2 <USB_SetTurnaroundTime+0xae>
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	4a25      	ldr	r2, [pc, #148]	; (800962c <USB_SetTurnaroundTime+0x138>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d202      	bcs.n	80095a2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800959c:	2309      	movs	r3, #9
 800959e:	617b      	str	r3, [r7, #20]
 80095a0:	e020      	b.n	80095e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	4a21      	ldr	r2, [pc, #132]	; (800962c <USB_SetTurnaroundTime+0x138>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d306      	bcc.n	80095b8 <USB_SetTurnaroundTime+0xc4>
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	4a20      	ldr	r2, [pc, #128]	; (8009630 <USB_SetTurnaroundTime+0x13c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d802      	bhi.n	80095b8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80095b2:	2308      	movs	r3, #8
 80095b4:	617b      	str	r3, [r7, #20]
 80095b6:	e015      	b.n	80095e4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	4a1d      	ldr	r2, [pc, #116]	; (8009630 <USB_SetTurnaroundTime+0x13c>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d906      	bls.n	80095ce <USB_SetTurnaroundTime+0xda>
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	4a1c      	ldr	r2, [pc, #112]	; (8009634 <USB_SetTurnaroundTime+0x140>)
 80095c4:	4293      	cmp	r3, r2
 80095c6:	d202      	bcs.n	80095ce <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80095c8:	2307      	movs	r3, #7
 80095ca:	617b      	str	r3, [r7, #20]
 80095cc:	e00a      	b.n	80095e4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80095ce:	2306      	movs	r3, #6
 80095d0:	617b      	str	r3, [r7, #20]
 80095d2:	e007      	b.n	80095e4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80095d4:	79fb      	ldrb	r3, [r7, #7]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d102      	bne.n	80095e0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80095da:	2309      	movs	r3, #9
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	e001      	b.n	80095e4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80095e0:	2309      	movs	r3, #9
 80095e2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	68da      	ldr	r2, [r3, #12]
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	029b      	lsls	r3, r3, #10
 80095f8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80095fc:	431a      	orrs	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009602:	2300      	movs	r3, #0
}
 8009604:	4618      	mov	r0, r3
 8009606:	371c      	adds	r7, #28
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr
 8009610:	00d8acbf 	.word	0x00d8acbf
 8009614:	00e4e1c0 	.word	0x00e4e1c0
 8009618:	00f42400 	.word	0x00f42400
 800961c:	01067380 	.word	0x01067380
 8009620:	011a499f 	.word	0x011a499f
 8009624:	01312cff 	.word	0x01312cff
 8009628:	014ca43f 	.word	0x014ca43f
 800962c:	016e3600 	.word	0x016e3600
 8009630:	01a6ab1f 	.word	0x01a6ab1f
 8009634:	01e84800 	.word	0x01e84800

08009638 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009638:	b480      	push	{r7}
 800963a:	b083      	sub	sp, #12
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f043 0201 	orr.w	r2, r3, #1
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800964c:	2300      	movs	r3, #0
}
 800964e:	4618      	mov	r0, r3
 8009650:	370c      	adds	r7, #12
 8009652:	46bd      	mov	sp, r7
 8009654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009658:	4770      	bx	lr

0800965a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800965a:	b480      	push	{r7}
 800965c:	b083      	sub	sp, #12
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	f023 0201 	bic.w	r2, r3, #1
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009688:	2300      	movs	r3, #0
 800968a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d115      	bne.n	80096ca <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68db      	ldr	r3, [r3, #12]
 80096a2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80096aa:	2001      	movs	r0, #1
 80096ac:	f7fa f8c8 	bl	8003840 <HAL_Delay>
      ms++;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3301      	adds	r3, #1
 80096b4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f001 fa45 	bl	800ab46 <USB_GetMode>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d01e      	beq.n	8009700 <USB_SetCurrentMode+0x84>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b31      	cmp	r3, #49	; 0x31
 80096c6:	d9f0      	bls.n	80096aa <USB_SetCurrentMode+0x2e>
 80096c8:	e01a      	b.n	8009700 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80096ca:	78fb      	ldrb	r3, [r7, #3]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d115      	bne.n	80096fc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80096dc:	2001      	movs	r0, #1
 80096de:	f7fa f8af 	bl	8003840 <HAL_Delay>
      ms++;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	3301      	adds	r3, #1
 80096e6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f001 fa2c 	bl	800ab46 <USB_GetMode>
 80096ee:	4603      	mov	r3, r0
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d005      	beq.n	8009700 <USB_SetCurrentMode+0x84>
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2b31      	cmp	r3, #49	; 0x31
 80096f8:	d9f0      	bls.n	80096dc <USB_SetCurrentMode+0x60>
 80096fa:	e001      	b.n	8009700 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e005      	b.n	800970c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	2b32      	cmp	r3, #50	; 0x32
 8009704:	d101      	bne.n	800970a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e000      	b.n	800970c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800970a:	2300      	movs	r3, #0
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009714:	b084      	sub	sp, #16
 8009716:	b580      	push	{r7, lr}
 8009718:	b086      	sub	sp, #24
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009722:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009726:	2300      	movs	r3, #0
 8009728:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800972e:	2300      	movs	r3, #0
 8009730:	613b      	str	r3, [r7, #16]
 8009732:	e009      	b.n	8009748 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009734:	687a      	ldr	r2, [r7, #4]
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	3340      	adds	r3, #64	; 0x40
 800973a:	009b      	lsls	r3, r3, #2
 800973c:	4413      	add	r3, r2
 800973e:	2200      	movs	r2, #0
 8009740:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	3301      	adds	r3, #1
 8009746:	613b      	str	r3, [r7, #16]
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	2b0e      	cmp	r3, #14
 800974c:	d9f2      	bls.n	8009734 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800974e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009750:	2b00      	cmp	r3, #0
 8009752:	d11c      	bne.n	800978e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009762:	f043 0302 	orr.w	r3, r3, #2
 8009766:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800976c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009778:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009784:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	639a      	str	r2, [r3, #56]	; 0x38
 800978c:	e00b      	b.n	80097a6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80097ac:	461a      	mov	r2, r3
 80097ae:	2300      	movs	r3, #0
 80097b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097b8:	4619      	mov	r1, r3
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097c0:	461a      	mov	r2, r3
 80097c2:	680b      	ldr	r3, [r1, #0]
 80097c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80097c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d10c      	bne.n	80097e6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80097cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d104      	bne.n	80097dc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80097d2:	2100      	movs	r1, #0
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 f965 	bl	8009aa4 <USB_SetDevSpeed>
 80097da:	e008      	b.n	80097ee <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80097dc:	2101      	movs	r1, #1
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 f960 	bl	8009aa4 <USB_SetDevSpeed>
 80097e4:	e003      	b.n	80097ee <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80097e6:	2103      	movs	r1, #3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f000 f95b 	bl	8009aa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80097ee:	2110      	movs	r1, #16
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 f8f3 	bl	80099dc <USB_FlushTxFifo>
 80097f6:	4603      	mov	r3, r0
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d001      	beq.n	8009800 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80097fc:	2301      	movs	r3, #1
 80097fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009800:	6878      	ldr	r0, [r7, #4]
 8009802:	f000 f91f 	bl	8009a44 <USB_FlushRxFifo>
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800980c:	2301      	movs	r3, #1
 800980e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009816:	461a      	mov	r2, r3
 8009818:	2300      	movs	r3, #0
 800981a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009822:	461a      	mov	r2, r3
 8009824:	2300      	movs	r3, #0
 8009826:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800982e:	461a      	mov	r2, r3
 8009830:	2300      	movs	r3, #0
 8009832:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009834:	2300      	movs	r3, #0
 8009836:	613b      	str	r3, [r7, #16]
 8009838:	e043      	b.n	80098c2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	015a      	lsls	r2, r3, #5
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	4413      	add	r3, r2
 8009842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800984c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009850:	d118      	bne.n	8009884 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d10a      	bne.n	800986e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	015a      	lsls	r2, r3, #5
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009864:	461a      	mov	r2, r3
 8009866:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	e013      	b.n	8009896 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	015a      	lsls	r2, r3, #5
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	4413      	add	r3, r2
 8009876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800987a:	461a      	mov	r2, r3
 800987c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	e008      	b.n	8009896 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	015a      	lsls	r2, r3, #5
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	4413      	add	r3, r2
 800988c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009890:	461a      	mov	r2, r3
 8009892:	2300      	movs	r3, #0
 8009894:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	4413      	add	r3, r2
 800989e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098a2:	461a      	mov	r2, r3
 80098a4:	2300      	movs	r3, #0
 80098a6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	015a      	lsls	r2, r3, #5
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	4413      	add	r3, r2
 80098b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098b4:	461a      	mov	r2, r3
 80098b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80098ba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	3301      	adds	r3, #1
 80098c0:	613b      	str	r3, [r7, #16]
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	693a      	ldr	r2, [r7, #16]
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d3b7      	bcc.n	800983a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098ca:	2300      	movs	r3, #0
 80098cc:	613b      	str	r3, [r7, #16]
 80098ce:	e043      	b.n	8009958 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80098e6:	d118      	bne.n	800991a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10a      	bne.n	8009904 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	015a      	lsls	r2, r3, #5
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	4413      	add	r3, r2
 80098f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098fa:	461a      	mov	r2, r3
 80098fc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	e013      	b.n	800992c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	4413      	add	r3, r2
 800990c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009910:	461a      	mov	r2, r3
 8009912:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009916:	6013      	str	r3, [r2, #0]
 8009918:	e008      	b.n	800992c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800991a:	693b      	ldr	r3, [r7, #16]
 800991c:	015a      	lsls	r2, r3, #5
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	4413      	add	r3, r2
 8009922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009926:	461a      	mov	r2, r3
 8009928:	2300      	movs	r3, #0
 800992a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	015a      	lsls	r2, r3, #5
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	4413      	add	r3, r2
 8009934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009938:	461a      	mov	r2, r3
 800993a:	2300      	movs	r3, #0
 800993c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	015a      	lsls	r2, r3, #5
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	4413      	add	r3, r2
 8009946:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800994a:	461a      	mov	r2, r3
 800994c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009950:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	3301      	adds	r3, #1
 8009956:	613b      	str	r3, [r7, #16]
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995a:	693a      	ldr	r2, [r7, #16]
 800995c:	429a      	cmp	r2, r3
 800995e:	d3b7      	bcc.n	80098d0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800996e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009972:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009980:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009984:	2b00      	cmp	r3, #0
 8009986:	d105      	bne.n	8009994 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	699b      	ldr	r3, [r3, #24]
 800998c:	f043 0210 	orr.w	r2, r3, #16
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	699a      	ldr	r2, [r3, #24]
 8009998:	4b0f      	ldr	r3, [pc, #60]	; (80099d8 <USB_DevInit+0x2c4>)
 800999a:	4313      	orrs	r3, r2
 800999c:	687a      	ldr	r2, [r7, #4]
 800999e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80099a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d005      	beq.n	80099b2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	f043 0208 	orr.w	r2, r3, #8
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80099b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d107      	bne.n	80099c8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699b      	ldr	r3, [r3, #24]
 80099bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099c0:	f043 0304 	orr.w	r3, r3, #4
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80099c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3718      	adds	r7, #24
 80099ce:	46bd      	mov	sp, r7
 80099d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80099d4:	b004      	add	sp, #16
 80099d6:	4770      	bx	lr
 80099d8:	803c3800 	.word	0x803c3800

080099dc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3301      	adds	r3, #1
 80099ee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	4a13      	ldr	r2, [pc, #76]	; (8009a40 <USB_FlushTxFifo+0x64>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d901      	bls.n	80099fc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e01b      	b.n	8009a34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	daf2      	bge.n	80099ea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009a04:	2300      	movs	r3, #0
 8009a06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	019b      	lsls	r3, r3, #6
 8009a0c:	f043 0220 	orr.w	r2, r3, #32
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	3301      	adds	r3, #1
 8009a18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	4a08      	ldr	r2, [pc, #32]	; (8009a40 <USB_FlushTxFifo+0x64>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d901      	bls.n	8009a26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e006      	b.n	8009a34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	691b      	ldr	r3, [r3, #16]
 8009a2a:	f003 0320 	and.w	r3, r3, #32
 8009a2e:	2b20      	cmp	r3, #32
 8009a30:	d0f0      	beq.n	8009a14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3714      	adds	r7, #20
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr
 8009a40:	00030d40 	.word	0x00030d40

08009a44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b085      	sub	sp, #20
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	3301      	adds	r3, #1
 8009a54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	4a11      	ldr	r2, [pc, #68]	; (8009aa0 <USB_FlushRxFifo+0x5c>)
 8009a5a:	4293      	cmp	r3, r2
 8009a5c:	d901      	bls.n	8009a62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	e018      	b.n	8009a94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	daf2      	bge.n	8009a50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2210      	movs	r2, #16
 8009a72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	3301      	adds	r3, #1
 8009a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	4a08      	ldr	r2, [pc, #32]	; (8009aa0 <USB_FlushRxFifo+0x5c>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d901      	bls.n	8009a86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a82:	2303      	movs	r3, #3
 8009a84:	e006      	b.n	8009a94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	691b      	ldr	r3, [r3, #16]
 8009a8a:	f003 0310 	and.w	r3, r3, #16
 8009a8e:	2b10      	cmp	r3, #16
 8009a90:	d0f0      	beq.n	8009a74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr
 8009aa0:	00030d40 	.word	0x00030d40

08009aa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b085      	sub	sp, #20
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	460b      	mov	r3, r1
 8009aae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	78fb      	ldrb	r3, [r7, #3]
 8009abe:	68f9      	ldr	r1, [r7, #12]
 8009ac0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ac4:	4313      	orrs	r3, r2
 8009ac6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr

08009ad6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009ad6:	b480      	push	{r7}
 8009ad8:	b087      	sub	sp, #28
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009ae2:	693b      	ldr	r3, [r7, #16]
 8009ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	f003 0306 	and.w	r3, r3, #6
 8009aee:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d102      	bne.n	8009afc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009af6:	2300      	movs	r3, #0
 8009af8:	75fb      	strb	r3, [r7, #23]
 8009afa:	e00a      	b.n	8009b12 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d002      	beq.n	8009b08 <USB_GetDevSpeed+0x32>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	2b06      	cmp	r3, #6
 8009b06:	d102      	bne.n	8009b0e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009b08:	2302      	movs	r3, #2
 8009b0a:	75fb      	strb	r3, [r7, #23]
 8009b0c:	e001      	b.n	8009b12 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009b0e:	230f      	movs	r3, #15
 8009b10:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	371c      	adds	r7, #28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr

08009b20 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b085      	sub	sp, #20
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	785b      	ldrb	r3, [r3, #1]
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d13a      	bne.n	8009bb2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b42:	69da      	ldr	r2, [r3, #28]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	f003 030f 	and.w	r3, r3, #15
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	68f9      	ldr	r1, [r7, #12]
 8009b56:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009b5a:	4313      	orrs	r3, r2
 8009b5c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	015a      	lsls	r2, r3, #5
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d155      	bne.n	8009c20 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	791b      	ldrb	r3, [r3, #4]
 8009b8e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b90:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	059b      	lsls	r3, r3, #22
 8009b96:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	68ba      	ldr	r2, [r7, #8]
 8009b9c:	0151      	lsls	r1, r2, #5
 8009b9e:	68fa      	ldr	r2, [r7, #12]
 8009ba0:	440a      	add	r2, r1
 8009ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	e036      	b.n	8009c20 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb8:	69da      	ldr	r2, [r3, #28]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	f003 030f 	and.w	r3, r3, #15
 8009bc2:	2101      	movs	r1, #1
 8009bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009bc8:	041b      	lsls	r3, r3, #16
 8009bca:	68f9      	ldr	r1, [r7, #12]
 8009bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d11a      	bne.n	8009c20 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	015a      	lsls	r2, r3, #5
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	4413      	add	r3, r2
 8009bf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	68db      	ldr	r3, [r3, #12]
 8009bfc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	791b      	ldrb	r3, [r3, #4]
 8009c04:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009c06:	430b      	orrs	r3, r1
 8009c08:	4313      	orrs	r3, r2
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	0151      	lsls	r1, r2, #5
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	440a      	add	r2, r1
 8009c12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c1e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3714      	adds	r7, #20
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr
	...

08009c30 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
 8009c38:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	785b      	ldrb	r3, [r3, #1]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d161      	bne.n	8009d10 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	015a      	lsls	r2, r3, #5
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	4413      	add	r3, r2
 8009c54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c62:	d11f      	bne.n	8009ca4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	015a      	lsls	r2, r3, #5
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68ba      	ldr	r2, [r7, #8]
 8009c74:	0151      	lsls	r1, r2, #5
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	440a      	add	r2, r1
 8009c7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c82:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	015a      	lsls	r2, r3, #5
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	0151      	lsls	r1, r2, #5
 8009c96:	68fa      	ldr	r2, [r7, #12]
 8009c98:	440a      	add	r2, r1
 8009c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ca2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009caa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	f003 030f 	and.w	r3, r3, #15
 8009cb4:	2101      	movs	r1, #1
 8009cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	43db      	mvns	r3, r3
 8009cbe:	68f9      	ldr	r1, [r7, #12]
 8009cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009cc4:	4013      	ands	r3, r2
 8009cc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cce:	69da      	ldr	r2, [r3, #28]
 8009cd0:	683b      	ldr	r3, [r7, #0]
 8009cd2:	781b      	ldrb	r3, [r3, #0]
 8009cd4:	f003 030f 	and.w	r3, r3, #15
 8009cd8:	2101      	movs	r1, #1
 8009cda:	fa01 f303 	lsl.w	r3, r1, r3
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	43db      	mvns	r3, r3
 8009ce2:	68f9      	ldr	r1, [r7, #12]
 8009ce4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ce8:	4013      	ands	r3, r2
 8009cea:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009cf8:	681a      	ldr	r2, [r3, #0]
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	0159      	lsls	r1, r3, #5
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	440b      	add	r3, r1
 8009d02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d06:	4619      	mov	r1, r3
 8009d08:	4b35      	ldr	r3, [pc, #212]	; (8009de0 <USB_DeactivateEndpoint+0x1b0>)
 8009d0a:	4013      	ands	r3, r2
 8009d0c:	600b      	str	r3, [r1, #0]
 8009d0e:	e060      	b.n	8009dd2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	015a      	lsls	r2, r3, #5
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	4413      	add	r3, r2
 8009d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d26:	d11f      	bne.n	8009d68 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	015a      	lsls	r2, r3, #5
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4413      	add	r3, r2
 8009d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68ba      	ldr	r2, [r7, #8]
 8009d38:	0151      	lsls	r1, r2, #5
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	440a      	add	r2, r1
 8009d3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d42:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009d46:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009d48:	68bb      	ldr	r3, [r7, #8]
 8009d4a:	015a      	lsls	r2, r3, #5
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	4413      	add	r3, r2
 8009d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	0151      	lsls	r1, r2, #5
 8009d5a:	68fa      	ldr	r2, [r7, #12]
 8009d5c:	440a      	add	r2, r1
 8009d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009d62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d66:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	f003 030f 	and.w	r3, r3, #15
 8009d78:	2101      	movs	r1, #1
 8009d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8009d7e:	041b      	lsls	r3, r3, #16
 8009d80:	43db      	mvns	r3, r3
 8009d82:	68f9      	ldr	r1, [r7, #12]
 8009d84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d88:	4013      	ands	r3, r2
 8009d8a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d92:	69da      	ldr	r2, [r3, #28]
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	f003 030f 	and.w	r3, r3, #15
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8009da2:	041b      	lsls	r3, r3, #16
 8009da4:	43db      	mvns	r3, r3
 8009da6:	68f9      	ldr	r1, [r7, #12]
 8009da8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dac:	4013      	ands	r3, r2
 8009dae:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	015a      	lsls	r2, r3, #5
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	4413      	add	r3, r2
 8009db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dbc:	681a      	ldr	r2, [r3, #0]
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	0159      	lsls	r1, r3, #5
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	440b      	add	r3, r1
 8009dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dca:	4619      	mov	r1, r3
 8009dcc:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <USB_DeactivateEndpoint+0x1b4>)
 8009dce:	4013      	ands	r3, r2
 8009dd0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	ec337800 	.word	0xec337800
 8009de4:	eff37800 	.word	0xeff37800

08009de8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b08a      	sub	sp, #40	; 0x28
 8009dec:	af02      	add	r7, sp, #8
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	4613      	mov	r3, r2
 8009df4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	781b      	ldrb	r3, [r3, #0]
 8009dfe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	785b      	ldrb	r3, [r3, #1]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	f040 815c 	bne.w	800a0c2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d132      	bne.n	8009e78 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	015a      	lsls	r2, r3, #5
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	4413      	add	r3, r2
 8009e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e1e:	691b      	ldr	r3, [r3, #16]
 8009e20:	69ba      	ldr	r2, [r7, #24]
 8009e22:	0151      	lsls	r1, r2, #5
 8009e24:	69fa      	ldr	r2, [r7, #28]
 8009e26:	440a      	add	r2, r1
 8009e28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e2c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009e30:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009e34:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	015a      	lsls	r2, r3, #5
 8009e3a:	69fb      	ldr	r3, [r7, #28]
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e42:	691b      	ldr	r3, [r3, #16]
 8009e44:	69ba      	ldr	r2, [r7, #24]
 8009e46:	0151      	lsls	r1, r2, #5
 8009e48:	69fa      	ldr	r2, [r7, #28]
 8009e4a:	440a      	add	r2, r1
 8009e4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e50:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e54:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	015a      	lsls	r2, r3, #5
 8009e5a:	69fb      	ldr	r3, [r7, #28]
 8009e5c:	4413      	add	r3, r2
 8009e5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	69ba      	ldr	r2, [r7, #24]
 8009e66:	0151      	lsls	r1, r2, #5
 8009e68:	69fa      	ldr	r2, [r7, #28]
 8009e6a:	440a      	add	r2, r1
 8009e6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e70:	0cdb      	lsrs	r3, r3, #19
 8009e72:	04db      	lsls	r3, r3, #19
 8009e74:	6113      	str	r3, [r2, #16]
 8009e76:	e074      	b.n	8009f62 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	015a      	lsls	r2, r3, #5
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	4413      	add	r3, r2
 8009e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e84:	691b      	ldr	r3, [r3, #16]
 8009e86:	69ba      	ldr	r2, [r7, #24]
 8009e88:	0151      	lsls	r1, r2, #5
 8009e8a:	69fa      	ldr	r2, [r7, #28]
 8009e8c:	440a      	add	r2, r1
 8009e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e92:	0cdb      	lsrs	r3, r3, #19
 8009e94:	04db      	lsls	r3, r3, #19
 8009e96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e98:	69bb      	ldr	r3, [r7, #24]
 8009e9a:	015a      	lsls	r2, r3, #5
 8009e9c:	69fb      	ldr	r3, [r7, #28]
 8009e9e:	4413      	add	r3, r2
 8009ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ea4:	691b      	ldr	r3, [r3, #16]
 8009ea6:	69ba      	ldr	r2, [r7, #24]
 8009ea8:	0151      	lsls	r1, r2, #5
 8009eaa:	69fa      	ldr	r2, [r7, #28]
 8009eac:	440a      	add	r2, r1
 8009eae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eb2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009eb6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009eba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	015a      	lsls	r2, r3, #5
 8009ec0:	69fb      	ldr	r3, [r7, #28]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	6999      	ldr	r1, [r3, #24]
 8009ece:	68bb      	ldr	r3, [r7, #8]
 8009ed0:	68db      	ldr	r3, [r3, #12]
 8009ed2:	440b      	add	r3, r1
 8009ed4:	1e59      	subs	r1, r3, #1
 8009ed6:	68bb      	ldr	r3, [r7, #8]
 8009ed8:	68db      	ldr	r3, [r3, #12]
 8009eda:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ede:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009ee0:	4b9d      	ldr	r3, [pc, #628]	; (800a158 <USB_EPStartXfer+0x370>)
 8009ee2:	400b      	ands	r3, r1
 8009ee4:	69b9      	ldr	r1, [r7, #24]
 8009ee6:	0148      	lsls	r0, r1, #5
 8009ee8:	69f9      	ldr	r1, [r7, #28]
 8009eea:	4401      	add	r1, r0
 8009eec:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009ef0:	4313      	orrs	r3, r2
 8009ef2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f00:	691a      	ldr	r2, [r3, #16]
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	699b      	ldr	r3, [r3, #24]
 8009f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f0a:	69b9      	ldr	r1, [r7, #24]
 8009f0c:	0148      	lsls	r0, r1, #5
 8009f0e:	69f9      	ldr	r1, [r7, #28]
 8009f10:	4401      	add	r1, r0
 8009f12:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009f16:	4313      	orrs	r3, r2
 8009f18:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009f1a:	68bb      	ldr	r3, [r7, #8]
 8009f1c:	791b      	ldrb	r3, [r3, #4]
 8009f1e:	2b01      	cmp	r3, #1
 8009f20:	d11f      	bne.n	8009f62 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009f22:	69bb      	ldr	r3, [r7, #24]
 8009f24:	015a      	lsls	r2, r3, #5
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	4413      	add	r3, r2
 8009f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	69ba      	ldr	r2, [r7, #24]
 8009f32:	0151      	lsls	r1, r2, #5
 8009f34:	69fa      	ldr	r2, [r7, #28]
 8009f36:	440a      	add	r2, r1
 8009f38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f3c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8009f40:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8009f42:	69bb      	ldr	r3, [r7, #24]
 8009f44:	015a      	lsls	r2, r3, #5
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	4413      	add	r3, r2
 8009f4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f4e:	691b      	ldr	r3, [r3, #16]
 8009f50:	69ba      	ldr	r2, [r7, #24]
 8009f52:	0151      	lsls	r1, r2, #5
 8009f54:	69fa      	ldr	r2, [r7, #28]
 8009f56:	440a      	add	r2, r1
 8009f58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009f60:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009f62:	79fb      	ldrb	r3, [r7, #7]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d14b      	bne.n	800a000 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	695b      	ldr	r3, [r3, #20]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d009      	beq.n	8009f84 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f70:	69bb      	ldr	r3, [r7, #24]
 8009f72:	015a      	lsls	r2, r3, #5
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	4413      	add	r3, r2
 8009f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	695b      	ldr	r3, [r3, #20]
 8009f82:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	791b      	ldrb	r3, [r3, #4]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d128      	bne.n	8009fde <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f92:	689b      	ldr	r3, [r3, #8]
 8009f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d110      	bne.n	8009fbe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f9c:	69bb      	ldr	r3, [r7, #24]
 8009f9e:	015a      	lsls	r2, r3, #5
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	69ba      	ldr	r2, [r7, #24]
 8009fac:	0151      	lsls	r1, r2, #5
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	440a      	add	r2, r1
 8009fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fb6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009fba:	6013      	str	r3, [r2, #0]
 8009fbc:	e00f      	b.n	8009fde <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	015a      	lsls	r2, r3, #5
 8009fc2:	69fb      	ldr	r3, [r7, #28]
 8009fc4:	4413      	add	r3, r2
 8009fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	69ba      	ldr	r2, [r7, #24]
 8009fce:	0151      	lsls	r1, r2, #5
 8009fd0:	69fa      	ldr	r2, [r7, #28]
 8009fd2:	440a      	add	r2, r1
 8009fd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fdc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fde:	69bb      	ldr	r3, [r7, #24]
 8009fe0:	015a      	lsls	r2, r3, #5
 8009fe2:	69fb      	ldr	r3, [r7, #28]
 8009fe4:	4413      	add	r3, r2
 8009fe6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	69ba      	ldr	r2, [r7, #24]
 8009fee:	0151      	lsls	r1, r2, #5
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	440a      	add	r2, r1
 8009ff4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ff8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	e133      	b.n	800a268 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a000:	69bb      	ldr	r3, [r7, #24]
 800a002:	015a      	lsls	r2, r3, #5
 800a004:	69fb      	ldr	r3, [r7, #28]
 800a006:	4413      	add	r3, r2
 800a008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	69ba      	ldr	r2, [r7, #24]
 800a010:	0151      	lsls	r1, r2, #5
 800a012:	69fa      	ldr	r2, [r7, #28]
 800a014:	440a      	add	r2, r1
 800a016:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a01a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a01e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a020:	68bb      	ldr	r3, [r7, #8]
 800a022:	791b      	ldrb	r3, [r3, #4]
 800a024:	2b01      	cmp	r3, #1
 800a026:	d015      	beq.n	800a054 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	699b      	ldr	r3, [r3, #24]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	f000 811b 	beq.w	800a268 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a032:	69fb      	ldr	r3, [r7, #28]
 800a034:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a038:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	781b      	ldrb	r3, [r3, #0]
 800a03e:	f003 030f 	and.w	r3, r3, #15
 800a042:	2101      	movs	r1, #1
 800a044:	fa01 f303 	lsl.w	r3, r1, r3
 800a048:	69f9      	ldr	r1, [r7, #28]
 800a04a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a04e:	4313      	orrs	r3, r2
 800a050:	634b      	str	r3, [r1, #52]	; 0x34
 800a052:	e109      	b.n	800a268 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a05a:	689b      	ldr	r3, [r3, #8]
 800a05c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a060:	2b00      	cmp	r3, #0
 800a062:	d110      	bne.n	800a086 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a064:	69bb      	ldr	r3, [r7, #24]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	69ba      	ldr	r2, [r7, #24]
 800a074:	0151      	lsls	r1, r2, #5
 800a076:	69fa      	ldr	r2, [r7, #28]
 800a078:	440a      	add	r2, r1
 800a07a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a07e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a082:	6013      	str	r3, [r2, #0]
 800a084:	e00f      	b.n	800a0a6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	015a      	lsls	r2, r3, #5
 800a08a:	69fb      	ldr	r3, [r7, #28]
 800a08c:	4413      	add	r3, r2
 800a08e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	69ba      	ldr	r2, [r7, #24]
 800a096:	0151      	lsls	r1, r2, #5
 800a098:	69fa      	ldr	r2, [r7, #28]
 800a09a:	440a      	add	r2, r1
 800a09c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0a4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	6919      	ldr	r1, [r3, #16]
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	781a      	ldrb	r2, [r3, #0]
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	b298      	uxth	r0, r3
 800a0b4:	79fb      	ldrb	r3, [r7, #7]
 800a0b6:	9300      	str	r3, [sp, #0]
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f000 fade 	bl	800a67c <USB_WritePacket>
 800a0c0:	e0d2      	b.n	800a268 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	015a      	lsls	r2, r3, #5
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	69ba      	ldr	r2, [r7, #24]
 800a0d2:	0151      	lsls	r1, r2, #5
 800a0d4:	69fa      	ldr	r2, [r7, #28]
 800a0d6:	440a      	add	r2, r1
 800a0d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0dc:	0cdb      	lsrs	r3, r3, #19
 800a0de:	04db      	lsls	r3, r3, #19
 800a0e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	015a      	lsls	r2, r3, #5
 800a0e6:	69fb      	ldr	r3, [r7, #28]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	69ba      	ldr	r2, [r7, #24]
 800a0f2:	0151      	lsls	r1, r2, #5
 800a0f4:	69fa      	ldr	r2, [r7, #28]
 800a0f6:	440a      	add	r2, r1
 800a0f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a0fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a100:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a104:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d126      	bne.n	800a15c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a11a:	691a      	ldr	r2, [r3, #16]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a124:	69b9      	ldr	r1, [r7, #24]
 800a126:	0148      	lsls	r0, r1, #5
 800a128:	69f9      	ldr	r1, [r7, #28]
 800a12a:	4401      	add	r1, r0
 800a12c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a130:	4313      	orrs	r3, r2
 800a132:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	0151      	lsls	r1, r2, #5
 800a146:	69fa      	ldr	r2, [r7, #28]
 800a148:	440a      	add	r2, r1
 800a14a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a14e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a152:	6113      	str	r3, [r2, #16]
 800a154:	e03a      	b.n	800a1cc <USB_EPStartXfer+0x3e4>
 800a156:	bf00      	nop
 800a158:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	699a      	ldr	r2, [r3, #24]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	4413      	add	r3, r2
 800a166:	1e5a      	subs	r2, r3, #1
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a170:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	8afa      	ldrh	r2, [r7, #22]
 800a178:	fb03 f202 	mul.w	r2, r3, r2
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	015a      	lsls	r2, r3, #5
 800a184:	69fb      	ldr	r3, [r7, #28]
 800a186:	4413      	add	r3, r2
 800a188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a18c:	691a      	ldr	r2, [r3, #16]
 800a18e:	8afb      	ldrh	r3, [r7, #22]
 800a190:	04d9      	lsls	r1, r3, #19
 800a192:	4b38      	ldr	r3, [pc, #224]	; (800a274 <USB_EPStartXfer+0x48c>)
 800a194:	400b      	ands	r3, r1
 800a196:	69b9      	ldr	r1, [r7, #24]
 800a198:	0148      	lsls	r0, r1, #5
 800a19a:	69f9      	ldr	r1, [r7, #28]
 800a19c:	4401      	add	r1, r0
 800a19e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1a2:	4313      	orrs	r3, r2
 800a1a4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	015a      	lsls	r2, r3, #5
 800a1aa:	69fb      	ldr	r3, [r7, #28]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1b2:	691a      	ldr	r2, [r3, #16]
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	69db      	ldr	r3, [r3, #28]
 800a1b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1bc:	69b9      	ldr	r1, [r7, #24]
 800a1be:	0148      	lsls	r0, r1, #5
 800a1c0:	69f9      	ldr	r1, [r7, #28]
 800a1c2:	4401      	add	r1, r0
 800a1c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a1cc:	79fb      	ldrb	r3, [r7, #7]
 800a1ce:	2b01      	cmp	r3, #1
 800a1d0:	d10d      	bne.n	800a1ee <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d009      	beq.n	800a1ee <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	6919      	ldr	r1, [r3, #16]
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	015a      	lsls	r2, r3, #5
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1ea:	460a      	mov	r2, r1
 800a1ec:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	791b      	ldrb	r3, [r3, #4]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d128      	bne.n	800a248 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a1f6:	69fb      	ldr	r3, [r7, #28]
 800a1f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a202:	2b00      	cmp	r3, #0
 800a204:	d110      	bne.n	800a228 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a206:	69bb      	ldr	r3, [r7, #24]
 800a208:	015a      	lsls	r2, r3, #5
 800a20a:	69fb      	ldr	r3, [r7, #28]
 800a20c:	4413      	add	r3, r2
 800a20e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	69ba      	ldr	r2, [r7, #24]
 800a216:	0151      	lsls	r1, r2, #5
 800a218:	69fa      	ldr	r2, [r7, #28]
 800a21a:	440a      	add	r2, r1
 800a21c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a220:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	e00f      	b.n	800a248 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a228:	69bb      	ldr	r3, [r7, #24]
 800a22a:	015a      	lsls	r2, r3, #5
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	4413      	add	r3, r2
 800a230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	69ba      	ldr	r2, [r7, #24]
 800a238:	0151      	lsls	r1, r2, #5
 800a23a:	69fa      	ldr	r2, [r7, #28]
 800a23c:	440a      	add	r2, r1
 800a23e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a246:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	015a      	lsls	r2, r3, #5
 800a24c:	69fb      	ldr	r3, [r7, #28]
 800a24e:	4413      	add	r3, r2
 800a250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	0151      	lsls	r1, r2, #5
 800a25a:	69fa      	ldr	r2, [r7, #28]
 800a25c:	440a      	add	r2, r1
 800a25e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a262:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a266:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3720      	adds	r7, #32
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	1ff80000 	.word	0x1ff80000

0800a278 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	60f8      	str	r0, [r7, #12]
 800a280:	60b9      	str	r1, [r7, #8]
 800a282:	4613      	mov	r3, r2
 800a284:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a28a:	68bb      	ldr	r3, [r7, #8]
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	785b      	ldrb	r3, [r3, #1]
 800a294:	2b01      	cmp	r3, #1
 800a296:	f040 80ce 	bne.w	800a436 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d132      	bne.n	800a308 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	015a      	lsls	r2, r3, #5
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	0151      	lsls	r1, r2, #5
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	440a      	add	r2, r1
 800a2b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a2c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a2c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a2c6:	693b      	ldr	r3, [r7, #16]
 800a2c8:	015a      	lsls	r2, r3, #5
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	4413      	add	r3, r2
 800a2ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	693a      	ldr	r2, [r7, #16]
 800a2d6:	0151      	lsls	r1, r2, #5
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	440a      	add	r2, r1
 800a2dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a2e6:	693b      	ldr	r3, [r7, #16]
 800a2e8:	015a      	lsls	r2, r3, #5
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	4413      	add	r3, r2
 800a2ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2f2:	691b      	ldr	r3, [r3, #16]
 800a2f4:	693a      	ldr	r2, [r7, #16]
 800a2f6:	0151      	lsls	r1, r2, #5
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	440a      	add	r2, r1
 800a2fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a300:	0cdb      	lsrs	r3, r3, #19
 800a302:	04db      	lsls	r3, r3, #19
 800a304:	6113      	str	r3, [r2, #16]
 800a306:	e04e      	b.n	800a3a6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	015a      	lsls	r2, r3, #5
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	4413      	add	r3, r2
 800a310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a314:	691b      	ldr	r3, [r3, #16]
 800a316:	693a      	ldr	r2, [r7, #16]
 800a318:	0151      	lsls	r1, r2, #5
 800a31a:	697a      	ldr	r2, [r7, #20]
 800a31c:	440a      	add	r2, r1
 800a31e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a322:	0cdb      	lsrs	r3, r3, #19
 800a324:	04db      	lsls	r3, r3, #19
 800a326:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a334:	691b      	ldr	r3, [r3, #16]
 800a336:	693a      	ldr	r2, [r7, #16]
 800a338:	0151      	lsls	r1, r2, #5
 800a33a:	697a      	ldr	r2, [r7, #20]
 800a33c:	440a      	add	r2, r1
 800a33e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a342:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a346:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a34a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	699a      	ldr	r2, [r3, #24]
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	429a      	cmp	r2, r3
 800a356:	d903      	bls.n	800a360 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	68da      	ldr	r2, [r3, #12]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a360:	693b      	ldr	r3, [r7, #16]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	4413      	add	r3, r2
 800a368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	693a      	ldr	r2, [r7, #16]
 800a370:	0151      	lsls	r1, r2, #5
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	440a      	add	r2, r1
 800a376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a37a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a37e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a38c:	691a      	ldr	r2, [r3, #16]
 800a38e:	68bb      	ldr	r3, [r7, #8]
 800a390:	699b      	ldr	r3, [r3, #24]
 800a392:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a396:	6939      	ldr	r1, [r7, #16]
 800a398:	0148      	lsls	r0, r1, #5
 800a39a:	6979      	ldr	r1, [r7, #20]
 800a39c:	4401      	add	r1, r0
 800a39e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a3a6:	79fb      	ldrb	r3, [r7, #7]
 800a3a8:	2b01      	cmp	r3, #1
 800a3aa:	d11e      	bne.n	800a3ea <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	695b      	ldr	r3, [r3, #20]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d009      	beq.n	800a3c8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	015a      	lsls	r2, r3, #5
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	4413      	add	r3, r2
 800a3bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	695b      	ldr	r3, [r3, #20]
 800a3c6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	015a      	lsls	r2, r3, #5
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	4413      	add	r3, r2
 800a3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	0151      	lsls	r1, r2, #5
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	440a      	add	r2, r1
 800a3de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a3e6:	6013      	str	r3, [r2, #0]
 800a3e8:	e097      	b.n	800a51a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a3ea:	693b      	ldr	r3, [r7, #16]
 800a3ec:	015a      	lsls	r2, r3, #5
 800a3ee:	697b      	ldr	r3, [r7, #20]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	693a      	ldr	r2, [r7, #16]
 800a3fa:	0151      	lsls	r1, r2, #5
 800a3fc:	697a      	ldr	r2, [r7, #20]
 800a3fe:	440a      	add	r2, r1
 800a400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a404:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a408:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a40a:	68bb      	ldr	r3, [r7, #8]
 800a40c:	699b      	ldr	r3, [r3, #24]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	f000 8083 	beq.w	800a51a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a414:	697b      	ldr	r3, [r7, #20]
 800a416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a41a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	781b      	ldrb	r3, [r3, #0]
 800a420:	f003 030f 	and.w	r3, r3, #15
 800a424:	2101      	movs	r1, #1
 800a426:	fa01 f303 	lsl.w	r3, r1, r3
 800a42a:	6979      	ldr	r1, [r7, #20]
 800a42c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a430:	4313      	orrs	r3, r2
 800a432:	634b      	str	r3, [r1, #52]	; 0x34
 800a434:	e071      	b.n	800a51a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	015a      	lsls	r2, r3, #5
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	4413      	add	r3, r2
 800a43e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a442:	691b      	ldr	r3, [r3, #16]
 800a444:	693a      	ldr	r2, [r7, #16]
 800a446:	0151      	lsls	r1, r2, #5
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	440a      	add	r2, r1
 800a44c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a450:	0cdb      	lsrs	r3, r3, #19
 800a452:	04db      	lsls	r3, r3, #19
 800a454:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	015a      	lsls	r2, r3, #5
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	4413      	add	r3, r2
 800a45e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	693a      	ldr	r2, [r7, #16]
 800a466:	0151      	lsls	r1, r2, #5
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	440a      	add	r2, r1
 800a46c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a470:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a474:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a478:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d003      	beq.n	800a48a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a482:	68bb      	ldr	r3, [r7, #8]
 800a484:	68da      	ldr	r2, [r3, #12]
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a48a:	68bb      	ldr	r3, [r7, #8]
 800a48c:	68da      	ldr	r2, [r3, #12]
 800a48e:	68bb      	ldr	r3, [r7, #8]
 800a490:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	015a      	lsls	r2, r3, #5
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	4413      	add	r3, r2
 800a49a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	0151      	lsls	r1, r2, #5
 800a4a4:	697a      	ldr	r2, [r7, #20]
 800a4a6:	440a      	add	r2, r1
 800a4a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a4ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a4b2:	693b      	ldr	r3, [r7, #16]
 800a4b4:	015a      	lsls	r2, r3, #5
 800a4b6:	697b      	ldr	r3, [r7, #20]
 800a4b8:	4413      	add	r3, r2
 800a4ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4be:	691a      	ldr	r2, [r3, #16]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	69db      	ldr	r3, [r3, #28]
 800a4c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4c8:	6939      	ldr	r1, [r7, #16]
 800a4ca:	0148      	lsls	r0, r1, #5
 800a4cc:	6979      	ldr	r1, [r7, #20]
 800a4ce:	4401      	add	r1, r0
 800a4d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d10d      	bne.n	800a4fa <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	691b      	ldr	r3, [r3, #16]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d009      	beq.n	800a4fa <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a4e6:	68bb      	ldr	r3, [r7, #8]
 800a4e8:	6919      	ldr	r1, [r3, #16]
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f6:	460a      	mov	r2, r1
 800a4f8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	4413      	add	r3, r2
 800a502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	693a      	ldr	r2, [r7, #16]
 800a50a:	0151      	lsls	r1, r2, #5
 800a50c:	697a      	ldr	r2, [r7, #20]
 800a50e:	440a      	add	r2, r1
 800a510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a514:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a518:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a51a:	2300      	movs	r3, #0
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	371c      	adds	r7, #28
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a528:	b480      	push	{r7}
 800a52a:	b087      	sub	sp, #28
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a532:	2300      	movs	r3, #0
 800a534:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a536:	2300      	movs	r3, #0
 800a538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	785b      	ldrb	r3, [r3, #1]
 800a542:	2b01      	cmp	r3, #1
 800a544:	d14a      	bne.n	800a5dc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	015a      	lsls	r2, r3, #5
 800a54c:	693b      	ldr	r3, [r7, #16]
 800a54e:	4413      	add	r3, r2
 800a550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a55a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a55e:	f040 8086 	bne.w	800a66e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a562:	683b      	ldr	r3, [r7, #0]
 800a564:	781b      	ldrb	r3, [r3, #0]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	683a      	ldr	r2, [r7, #0]
 800a574:	7812      	ldrb	r2, [r2, #0]
 800a576:	0151      	lsls	r1, r2, #5
 800a578:	693a      	ldr	r2, [r7, #16]
 800a57a:	440a      	add	r2, r1
 800a57c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a580:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a584:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	781b      	ldrb	r3, [r3, #0]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	683a      	ldr	r2, [r7, #0]
 800a598:	7812      	ldrb	r2, [r2, #0]
 800a59a:	0151      	lsls	r1, r2, #5
 800a59c:	693a      	ldr	r2, [r7, #16]
 800a59e:	440a      	add	r2, r1
 800a5a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f242 7210 	movw	r2, #10000	; 0x2710
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d902      	bls.n	800a5c0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	75fb      	strb	r3, [r7, #23]
          break;
 800a5be:	e056      	b.n	800a66e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a5c0:	683b      	ldr	r3, [r7, #0]
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	015a      	lsls	r2, r3, #5
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	4413      	add	r3, r2
 800a5ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5d8:	d0e7      	beq.n	800a5aa <USB_EPStopXfer+0x82>
 800a5da:	e048      	b.n	800a66e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	781b      	ldrb	r3, [r3, #0]
 800a5e0:	015a      	lsls	r2, r3, #5
 800a5e2:	693b      	ldr	r3, [r7, #16]
 800a5e4:	4413      	add	r3, r2
 800a5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a5f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5f4:	d13b      	bne.n	800a66e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	015a      	lsls	r2, r3, #5
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	4413      	add	r3, r2
 800a600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	7812      	ldrb	r2, [r2, #0]
 800a60a:	0151      	lsls	r1, r2, #5
 800a60c:	693a      	ldr	r2, [r7, #16]
 800a60e:	440a      	add	r2, r1
 800a610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a614:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a618:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	015a      	lsls	r2, r3, #5
 800a620:	693b      	ldr	r3, [r7, #16]
 800a622:	4413      	add	r3, r2
 800a624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	7812      	ldrb	r2, [r2, #0]
 800a62e:	0151      	lsls	r1, r2, #5
 800a630:	693a      	ldr	r2, [r7, #16]
 800a632:	440a      	add	r2, r1
 800a634:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a638:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a63c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	3301      	adds	r3, #1
 800a642:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f242 7210 	movw	r2, #10000	; 0x2710
 800a64a:	4293      	cmp	r3, r2
 800a64c:	d902      	bls.n	800a654 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	75fb      	strb	r3, [r7, #23]
          break;
 800a652:	e00c      	b.n	800a66e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	015a      	lsls	r2, r3, #5
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	4413      	add	r3, r2
 800a65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a66c:	d0e7      	beq.n	800a63e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a66e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a670:	4618      	mov	r0, r3
 800a672:	371c      	adds	r7, #28
 800a674:	46bd      	mov	sp, r7
 800a676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a67a:	4770      	bx	lr

0800a67c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a67c:	b480      	push	{r7}
 800a67e:	b089      	sub	sp, #36	; 0x24
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	4611      	mov	r1, r2
 800a688:	461a      	mov	r2, r3
 800a68a:	460b      	mov	r3, r1
 800a68c:	71fb      	strb	r3, [r7, #7]
 800a68e:	4613      	mov	r3, r2
 800a690:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a69a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d123      	bne.n	800a6ea <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a6a2:	88bb      	ldrh	r3, [r7, #4]
 800a6a4:	3303      	adds	r3, #3
 800a6a6:	089b      	lsrs	r3, r3, #2
 800a6a8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	61bb      	str	r3, [r7, #24]
 800a6ae:	e018      	b.n	800a6e2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a6b0:	79fb      	ldrb	r3, [r7, #7]
 800a6b2:	031a      	lsls	r2, r3, #12
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	4413      	add	r3, r2
 800a6b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6bc:	461a      	mov	r2, r3
 800a6be:	69fb      	ldr	r3, [r7, #28]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a6c4:	69fb      	ldr	r3, [r7, #28]
 800a6c6:	3301      	adds	r3, #1
 800a6c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a6ca:	69fb      	ldr	r3, [r7, #28]
 800a6cc:	3301      	adds	r3, #1
 800a6ce:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a6d0:	69fb      	ldr	r3, [r7, #28]
 800a6d2:	3301      	adds	r3, #1
 800a6d4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a6d6:	69fb      	ldr	r3, [r7, #28]
 800a6d8:	3301      	adds	r3, #1
 800a6da:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a6dc:	69bb      	ldr	r3, [r7, #24]
 800a6de:	3301      	adds	r3, #1
 800a6e0:	61bb      	str	r3, [r7, #24]
 800a6e2:	69ba      	ldr	r2, [r7, #24]
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d3e2      	bcc.n	800a6b0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3724      	adds	r7, #36	; 0x24
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b08b      	sub	sp, #44	; 0x2c
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	60f8      	str	r0, [r7, #12]
 800a700:	60b9      	str	r1, [r7, #8]
 800a702:	4613      	mov	r3, r2
 800a704:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a70e:	88fb      	ldrh	r3, [r7, #6]
 800a710:	089b      	lsrs	r3, r3, #2
 800a712:	b29b      	uxth	r3, r3
 800a714:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a716:	88fb      	ldrh	r3, [r7, #6]
 800a718:	f003 0303 	and.w	r3, r3, #3
 800a71c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a71e:	2300      	movs	r3, #0
 800a720:	623b      	str	r3, [r7, #32]
 800a722:	e014      	b.n	800a74e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a72a:	681a      	ldr	r2, [r3, #0]
 800a72c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a72e:	601a      	str	r2, [r3, #0]
    pDest++;
 800a730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a732:	3301      	adds	r3, #1
 800a734:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a738:	3301      	adds	r3, #1
 800a73a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73e:	3301      	adds	r3, #1
 800a740:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a744:	3301      	adds	r3, #1
 800a746:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	3301      	adds	r3, #1
 800a74c:	623b      	str	r3, [r7, #32]
 800a74e:	6a3a      	ldr	r2, [r7, #32]
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	429a      	cmp	r2, r3
 800a754:	d3e6      	bcc.n	800a724 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a756:	8bfb      	ldrh	r3, [r7, #30]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01e      	beq.n	800a79a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a75c:	2300      	movs	r3, #0
 800a75e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a766:	461a      	mov	r2, r3
 800a768:	f107 0310 	add.w	r3, r7, #16
 800a76c:	6812      	ldr	r2, [r2, #0]
 800a76e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	6a3b      	ldr	r3, [r7, #32]
 800a774:	b2db      	uxtb	r3, r3
 800a776:	00db      	lsls	r3, r3, #3
 800a778:	fa22 f303 	lsr.w	r3, r2, r3
 800a77c:	b2da      	uxtb	r2, r3
 800a77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a780:	701a      	strb	r2, [r3, #0]
      i++;
 800a782:	6a3b      	ldr	r3, [r7, #32]
 800a784:	3301      	adds	r3, #1
 800a786:	623b      	str	r3, [r7, #32]
      pDest++;
 800a788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78a:	3301      	adds	r3, #1
 800a78c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a78e:	8bfb      	ldrh	r3, [r7, #30]
 800a790:	3b01      	subs	r3, #1
 800a792:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a794:	8bfb      	ldrh	r3, [r7, #30]
 800a796:	2b00      	cmp	r3, #0
 800a798:	d1ea      	bne.n	800a770 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a79a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	372c      	adds	r7, #44	; 0x2c
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b085      	sub	sp, #20
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	785b      	ldrb	r3, [r3, #1]
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d12c      	bne.n	800a81e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a7c4:	68bb      	ldr	r3, [r7, #8]
 800a7c6:	015a      	lsls	r2, r3, #5
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	db12      	blt.n	800a7fc <USB_EPSetStall+0x54>
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d00f      	beq.n	800a7fc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	015a      	lsls	r2, r3, #5
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68ba      	ldr	r2, [r7, #8]
 800a7ec:	0151      	lsls	r1, r2, #5
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	440a      	add	r2, r1
 800a7f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7f6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a7fa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a7fc:	68bb      	ldr	r3, [r7, #8]
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	68ba      	ldr	r2, [r7, #8]
 800a80c:	0151      	lsls	r1, r2, #5
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	440a      	add	r2, r1
 800a812:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a816:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a81a:	6013      	str	r3, [r2, #0]
 800a81c:	e02b      	b.n	800a876 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	015a      	lsls	r2, r3, #5
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	4413      	add	r3, r2
 800a826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	db12      	blt.n	800a856 <USB_EPSetStall+0xae>
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00f      	beq.n	800a856 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	015a      	lsls	r2, r3, #5
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	4413      	add	r3, r2
 800a83e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	0151      	lsls	r1, r2, #5
 800a848:	68fa      	ldr	r2, [r7, #12]
 800a84a:	440a      	add	r2, r1
 800a84c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a850:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a854:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	015a      	lsls	r2, r3, #5
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	4413      	add	r3, r2
 800a85e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	0151      	lsls	r1, r2, #5
 800a868:	68fa      	ldr	r2, [r7, #12]
 800a86a:	440a      	add	r2, r1
 800a86c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a874:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a876:	2300      	movs	r3, #0
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	785b      	ldrb	r3, [r3, #1]
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d128      	bne.n	800a8f2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	015a      	lsls	r2, r3, #5
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	4413      	add	r3, r2
 800a8a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	0151      	lsls	r1, r2, #5
 800a8b2:	68fa      	ldr	r2, [r7, #12]
 800a8b4:	440a      	add	r2, r1
 800a8b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a8be:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	791b      	ldrb	r3, [r3, #4]
 800a8c4:	2b03      	cmp	r3, #3
 800a8c6:	d003      	beq.n	800a8d0 <USB_EPClearStall+0x4c>
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	791b      	ldrb	r3, [r3, #4]
 800a8cc:	2b02      	cmp	r3, #2
 800a8ce:	d138      	bne.n	800a942 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a8d0:	68bb      	ldr	r3, [r7, #8]
 800a8d2:	015a      	lsls	r2, r3, #5
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	68ba      	ldr	r2, [r7, #8]
 800a8e0:	0151      	lsls	r1, r2, #5
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	440a      	add	r2, r1
 800a8e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a8ee:	6013      	str	r3, [r2, #0]
 800a8f0:	e027      	b.n	800a942 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	015a      	lsls	r2, r3, #5
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	4413      	add	r3, r2
 800a8fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	0151      	lsls	r1, r2, #5
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	440a      	add	r2, r1
 800a908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a90c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a910:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a912:	683b      	ldr	r3, [r7, #0]
 800a914:	791b      	ldrb	r3, [r3, #4]
 800a916:	2b03      	cmp	r3, #3
 800a918:	d003      	beq.n	800a922 <USB_EPClearStall+0x9e>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	791b      	ldrb	r3, [r3, #4]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d10f      	bne.n	800a942 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	015a      	lsls	r2, r3, #5
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	4413      	add	r3, r2
 800a92a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	68ba      	ldr	r2, [r7, #8]
 800a932:	0151      	lsls	r1, r2, #5
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	440a      	add	r2, r1
 800a938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a93c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a940:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
 800a958:	460b      	mov	r3, r1
 800a95a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a96e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a972:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	78fb      	ldrb	r3, [r7, #3]
 800a97e:	011b      	lsls	r3, r3, #4
 800a980:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a984:	68f9      	ldr	r1, [r7, #12]
 800a986:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a98a:	4313      	orrs	r3, r2
 800a98c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr

0800a99c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a99c:	b480      	push	{r7}
 800a99e:	b085      	sub	sp, #20
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9b6:	f023 0303 	bic.w	r3, r3, #3
 800a9ba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	68fa      	ldr	r2, [r7, #12]
 800a9c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a9ca:	f023 0302 	bic.w	r3, r3, #2
 800a9ce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a9d0:	2300      	movs	r3, #0
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3714      	adds	r7, #20
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a9de:	b480      	push	{r7}
 800a9e0:	b085      	sub	sp, #20
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9f8:	f023 0303 	bic.w	r3, r3, #3
 800a9fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa0c:	f043 0302 	orr.w	r3, r3, #2
 800aa10:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800aa20:	b480      	push	{r7}
 800aa22:	b085      	sub	sp, #20
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	68fa      	ldr	r2, [r7, #12]
 800aa34:	4013      	ands	r3, r2
 800aa36:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800aa38:	68fb      	ldr	r3, [r7, #12]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3714      	adds	r7, #20
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr

0800aa46 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b085      	sub	sp, #20
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa58:	699b      	ldr	r3, [r3, #24]
 800aa5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa62:	69db      	ldr	r3, [r3, #28]
 800aa64:	68ba      	ldr	r2, [r7, #8]
 800aa66:	4013      	ands	r3, r2
 800aa68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	0c1b      	lsrs	r3, r3, #16
}
 800aa6e:	4618      	mov	r0, r3
 800aa70:	3714      	adds	r7, #20
 800aa72:	46bd      	mov	sp, r7
 800aa74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa78:	4770      	bx	lr

0800aa7a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800aa7a:	b480      	push	{r7}
 800aa7c:	b085      	sub	sp, #20
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa8c:	699b      	ldr	r3, [r3, #24]
 800aa8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa96:	69db      	ldr	r3, [r3, #28]
 800aa98:	68ba      	ldr	r2, [r7, #8]
 800aa9a:	4013      	ands	r3, r2
 800aa9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	b29b      	uxth	r3, r3
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aaae:	b480      	push	{r7}
 800aab0:	b085      	sub	sp, #20
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
 800aab6:	460b      	mov	r3, r1
 800aab8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800aabe:	78fb      	ldrb	r3, [r7, #3]
 800aac0:	015a      	lsls	r2, r3, #5
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	4413      	add	r3, r2
 800aac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aad4:	695b      	ldr	r3, [r3, #20]
 800aad6:	68ba      	ldr	r2, [r7, #8]
 800aad8:	4013      	ands	r3, r2
 800aada:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800aadc:	68bb      	ldr	r3, [r7, #8]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3714      	adds	r7, #20
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr

0800aaea <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800aaea:	b480      	push	{r7}
 800aaec:	b087      	sub	sp, #28
 800aaee:	af00      	add	r7, sp, #0
 800aaf0:	6078      	str	r0, [r7, #4]
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab00:	691b      	ldr	r3, [r3, #16]
 800ab02:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ab0e:	78fb      	ldrb	r3, [r7, #3]
 800ab10:	f003 030f 	and.w	r3, r3, #15
 800ab14:	68fa      	ldr	r2, [r7, #12]
 800ab16:	fa22 f303 	lsr.w	r3, r2, r3
 800ab1a:	01db      	lsls	r3, r3, #7
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	693a      	ldr	r2, [r7, #16]
 800ab20:	4313      	orrs	r3, r2
 800ab22:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ab24:	78fb      	ldrb	r3, [r7, #3]
 800ab26:	015a      	lsls	r2, r3, #5
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	4413      	add	r3, r2
 800ab2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab30:	689b      	ldr	r3, [r3, #8]
 800ab32:	693a      	ldr	r2, [r7, #16]
 800ab34:	4013      	ands	r3, r2
 800ab36:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ab38:	68bb      	ldr	r3, [r7, #8]
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	371c      	adds	r7, #28
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b083      	sub	sp, #12
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	695b      	ldr	r3, [r3, #20]
 800ab52:	f003 0301 	and.w	r3, r3, #1
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ab62:	b480      	push	{r7}
 800ab64:	b085      	sub	sp, #20
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab7c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ab80:	f023 0307 	bic.w	r3, r3, #7
 800ab84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ab98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3714      	adds	r7, #20
 800aba0:	46bd      	mov	sp, r7
 800aba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba6:	4770      	bx	lr

0800aba8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	460b      	mov	r3, r1
 800abb2:	607a      	str	r2, [r7, #4]
 800abb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	333c      	adds	r3, #60	; 0x3c
 800abbe:	3304      	adds	r3, #4
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800abc4:	693b      	ldr	r3, [r7, #16]
 800abc6:	4a26      	ldr	r2, [pc, #152]	; (800ac60 <USB_EP0_OutStart+0xb8>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d90a      	bls.n	800abe2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abcc:	697b      	ldr	r3, [r7, #20]
 800abce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abdc:	d101      	bne.n	800abe2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	e037      	b.n	800ac52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe8:	461a      	mov	r2, r3
 800abea:	2300      	movs	r3, #0
 800abec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf4:	691b      	ldr	r3, [r3, #16]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	697a      	ldr	r2, [r7, #20]
 800ac0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac10:	f043 0318 	orr.w	r3, r3, #24
 800ac14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	697a      	ldr	r2, [r7, #20]
 800ac20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ac28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ac2a:	7afb      	ldrb	r3, [r7, #11]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d10f      	bne.n	800ac50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac36:	461a      	mov	r2, r3
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ac3c:	697b      	ldr	r3, [r7, #20]
 800ac3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	697a      	ldr	r2, [r7, #20]
 800ac46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ac4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	371c      	adds	r7, #28
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	4f54300a 	.word	0x4f54300a

0800ac64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ac64:	b480      	push	{r7}
 800ac66:	b085      	sub	sp, #20
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	3301      	adds	r3, #1
 800ac74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	4a13      	ldr	r2, [pc, #76]	; (800acc8 <USB_CoreReset+0x64>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d901      	bls.n	800ac82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ac7e:	2303      	movs	r3, #3
 800ac80:	e01b      	b.n	800acba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	daf2      	bge.n	800ac70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	f043 0201 	orr.w	r2, r3, #1
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3301      	adds	r3, #1
 800ac9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	4a09      	ldr	r2, [pc, #36]	; (800acc8 <USB_CoreReset+0x64>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d901      	bls.n	800acac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aca8:	2303      	movs	r3, #3
 800acaa:	e006      	b.n	800acba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d0f0      	beq.n	800ac9a <USB_CoreReset+0x36>

  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3714      	adds	r7, #20
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
 800acc6:	bf00      	nop
 800acc8:	00030d40 	.word	0x00030d40

0800accc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800accc:	b580      	push	{r7, lr}
 800acce:	b084      	sub	sp, #16
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	460b      	mov	r3, r1
 800acd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800acd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800acdc:	f002 fca2 	bl	800d624 <USBD_static_malloc>
 800ace0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d109      	bne.n	800acfc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	32b0      	adds	r2, #176	; 0xb0
 800acf2:	2100      	movs	r1, #0
 800acf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800acf8:	2302      	movs	r3, #2
 800acfa:	e0d4      	b.n	800aea6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800acfc:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800ad00:	2100      	movs	r1, #0
 800ad02:	68f8      	ldr	r0, [r7, #12]
 800ad04:	f002 fd1a 	bl	800d73c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	32b0      	adds	r2, #176	; 0xb0
 800ad12:	68f9      	ldr	r1, [r7, #12]
 800ad14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	32b0      	adds	r2, #176	; 0xb0
 800ad22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	7c1b      	ldrb	r3, [r3, #16]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d138      	bne.n	800ada6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ad34:	4b5e      	ldr	r3, [pc, #376]	; (800aeb0 <USBD_CDC_Init+0x1e4>)
 800ad36:	7819      	ldrb	r1, [r3, #0]
 800ad38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad3c:	2202      	movs	r2, #2
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f002 fb4d 	bl	800d3de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ad44:	4b5a      	ldr	r3, [pc, #360]	; (800aeb0 <USBD_CDC_Init+0x1e4>)
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	f003 020f 	and.w	r2, r3, #15
 800ad4c:	6879      	ldr	r1, [r7, #4]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	009b      	lsls	r3, r3, #2
 800ad52:	4413      	add	r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	440b      	add	r3, r1
 800ad58:	3324      	adds	r3, #36	; 0x24
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ad5e:	4b55      	ldr	r3, [pc, #340]	; (800aeb4 <USBD_CDC_Init+0x1e8>)
 800ad60:	7819      	ldrb	r1, [r3, #0]
 800ad62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad66:	2202      	movs	r2, #2
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f002 fb38 	bl	800d3de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ad6e:	4b51      	ldr	r3, [pc, #324]	; (800aeb4 <USBD_CDC_Init+0x1e8>)
 800ad70:	781b      	ldrb	r3, [r3, #0]
 800ad72:	f003 020f 	and.w	r2, r3, #15
 800ad76:	6879      	ldr	r1, [r7, #4]
 800ad78:	4613      	mov	r3, r2
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	440b      	add	r3, r1
 800ad82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad86:	2201      	movs	r2, #1
 800ad88:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ad8a:	4b4b      	ldr	r3, [pc, #300]	; (800aeb8 <USBD_CDC_Init+0x1ec>)
 800ad8c:	781b      	ldrb	r3, [r3, #0]
 800ad8e:	f003 020f 	and.w	r2, r3, #15
 800ad92:	6879      	ldr	r1, [r7, #4]
 800ad94:	4613      	mov	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	4413      	add	r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	440b      	add	r3, r1
 800ad9e:	3326      	adds	r3, #38	; 0x26
 800ada0:	2210      	movs	r2, #16
 800ada2:	801a      	strh	r2, [r3, #0]
 800ada4:	e035      	b.n	800ae12 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ada6:	4b42      	ldr	r3, [pc, #264]	; (800aeb0 <USBD_CDC_Init+0x1e4>)
 800ada8:	7819      	ldrb	r1, [r3, #0]
 800adaa:	2340      	movs	r3, #64	; 0x40
 800adac:	2202      	movs	r2, #2
 800adae:	6878      	ldr	r0, [r7, #4]
 800adb0:	f002 fb15 	bl	800d3de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800adb4:	4b3e      	ldr	r3, [pc, #248]	; (800aeb0 <USBD_CDC_Init+0x1e4>)
 800adb6:	781b      	ldrb	r3, [r3, #0]
 800adb8:	f003 020f 	and.w	r2, r3, #15
 800adbc:	6879      	ldr	r1, [r7, #4]
 800adbe:	4613      	mov	r3, r2
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	4413      	add	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	440b      	add	r3, r1
 800adc8:	3324      	adds	r3, #36	; 0x24
 800adca:	2201      	movs	r2, #1
 800adcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800adce:	4b39      	ldr	r3, [pc, #228]	; (800aeb4 <USBD_CDC_Init+0x1e8>)
 800add0:	7819      	ldrb	r1, [r3, #0]
 800add2:	2340      	movs	r3, #64	; 0x40
 800add4:	2202      	movs	r2, #2
 800add6:	6878      	ldr	r0, [r7, #4]
 800add8:	f002 fb01 	bl	800d3de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800addc:	4b35      	ldr	r3, [pc, #212]	; (800aeb4 <USBD_CDC_Init+0x1e8>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	f003 020f 	and.w	r2, r3, #15
 800ade4:	6879      	ldr	r1, [r7, #4]
 800ade6:	4613      	mov	r3, r2
 800ade8:	009b      	lsls	r3, r3, #2
 800adea:	4413      	add	r3, r2
 800adec:	009b      	lsls	r3, r3, #2
 800adee:	440b      	add	r3, r1
 800adf0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800adf4:	2201      	movs	r2, #1
 800adf6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800adf8:	4b2f      	ldr	r3, [pc, #188]	; (800aeb8 <USBD_CDC_Init+0x1ec>)
 800adfa:	781b      	ldrb	r3, [r3, #0]
 800adfc:	f003 020f 	and.w	r2, r3, #15
 800ae00:	6879      	ldr	r1, [r7, #4]
 800ae02:	4613      	mov	r3, r2
 800ae04:	009b      	lsls	r3, r3, #2
 800ae06:	4413      	add	r3, r2
 800ae08:	009b      	lsls	r3, r3, #2
 800ae0a:	440b      	add	r3, r1
 800ae0c:	3326      	adds	r3, #38	; 0x26
 800ae0e:	2210      	movs	r2, #16
 800ae10:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ae12:	4b29      	ldr	r3, [pc, #164]	; (800aeb8 <USBD_CDC_Init+0x1ec>)
 800ae14:	7819      	ldrb	r1, [r3, #0]
 800ae16:	2308      	movs	r3, #8
 800ae18:	2203      	movs	r2, #3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f002 fadf 	bl	800d3de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ae20:	4b25      	ldr	r3, [pc, #148]	; (800aeb8 <USBD_CDC_Init+0x1ec>)
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	f003 020f 	and.w	r2, r3, #15
 800ae28:	6879      	ldr	r1, [r7, #4]
 800ae2a:	4613      	mov	r3, r2
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	4413      	add	r3, r2
 800ae30:	009b      	lsls	r3, r3, #2
 800ae32:	440b      	add	r3, r1
 800ae34:	3324      	adds	r3, #36	; 0x24
 800ae36:	2201      	movs	r2, #1
 800ae38:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ae48:	687a      	ldr	r2, [r7, #4]
 800ae4a:	33b0      	adds	r3, #176	; 0xb0
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	4413      	add	r3, r2
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800ae70:	2302      	movs	r3, #2
 800ae72:	e018      	b.n	800aea6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	7c1b      	ldrb	r3, [r3, #16]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10a      	bne.n	800ae92 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae7c:	4b0d      	ldr	r3, [pc, #52]	; (800aeb4 <USBD_CDC_Init+0x1e8>)
 800ae7e:	7819      	ldrb	r1, [r3, #0]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae86:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f002 fb96 	bl	800d5bc <USBD_LL_PrepareReceive>
 800ae90:	e008      	b.n	800aea4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ae92:	4b08      	ldr	r3, [pc, #32]	; (800aeb4 <USBD_CDC_Init+0x1e8>)
 800ae94:	7819      	ldrb	r1, [r3, #0]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae9c:	2340      	movs	r3, #64	; 0x40
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f002 fb8c 	bl	800d5bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aea4:	2300      	movs	r3, #0
}
 800aea6:	4618      	mov	r0, r3
 800aea8:	3710      	adds	r7, #16
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	bd80      	pop	{r7, pc}
 800aeae:	bf00      	nop
 800aeb0:	20000093 	.word	0x20000093
 800aeb4:	20000094 	.word	0x20000094
 800aeb8:	20000095 	.word	0x20000095

0800aebc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b082      	sub	sp, #8
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
 800aec4:	460b      	mov	r3, r1
 800aec6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800aec8:	4b3a      	ldr	r3, [pc, #232]	; (800afb4 <USBD_CDC_DeInit+0xf8>)
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	4619      	mov	r1, r3
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f002 faab 	bl	800d42a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800aed4:	4b37      	ldr	r3, [pc, #220]	; (800afb4 <USBD_CDC_DeInit+0xf8>)
 800aed6:	781b      	ldrb	r3, [r3, #0]
 800aed8:	f003 020f 	and.w	r2, r3, #15
 800aedc:	6879      	ldr	r1, [r7, #4]
 800aede:	4613      	mov	r3, r2
 800aee0:	009b      	lsls	r3, r3, #2
 800aee2:	4413      	add	r3, r2
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	440b      	add	r3, r1
 800aee8:	3324      	adds	r3, #36	; 0x24
 800aeea:	2200      	movs	r2, #0
 800aeec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800aeee:	4b32      	ldr	r3, [pc, #200]	; (800afb8 <USBD_CDC_DeInit+0xfc>)
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	4619      	mov	r1, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f002 fa98 	bl	800d42a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800aefa:	4b2f      	ldr	r3, [pc, #188]	; (800afb8 <USBD_CDC_DeInit+0xfc>)
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	f003 020f 	and.w	r2, r3, #15
 800af02:	6879      	ldr	r1, [r7, #4]
 800af04:	4613      	mov	r3, r2
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	009b      	lsls	r3, r3, #2
 800af0c:	440b      	add	r3, r1
 800af0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af12:	2200      	movs	r2, #0
 800af14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800af16:	4b29      	ldr	r3, [pc, #164]	; (800afbc <USBD_CDC_DeInit+0x100>)
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	4619      	mov	r1, r3
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f002 fa84 	bl	800d42a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800af22:	4b26      	ldr	r3, [pc, #152]	; (800afbc <USBD_CDC_DeInit+0x100>)
 800af24:	781b      	ldrb	r3, [r3, #0]
 800af26:	f003 020f 	and.w	r2, r3, #15
 800af2a:	6879      	ldr	r1, [r7, #4]
 800af2c:	4613      	mov	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	440b      	add	r3, r1
 800af36:	3324      	adds	r3, #36	; 0x24
 800af38:	2200      	movs	r2, #0
 800af3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800af3c:	4b1f      	ldr	r3, [pc, #124]	; (800afbc <USBD_CDC_DeInit+0x100>)
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	f003 020f 	and.w	r2, r3, #15
 800af44:	6879      	ldr	r1, [r7, #4]
 800af46:	4613      	mov	r3, r2
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4413      	add	r3, r2
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	440b      	add	r3, r1
 800af50:	3326      	adds	r3, #38	; 0x26
 800af52:	2200      	movs	r2, #0
 800af54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	32b0      	adds	r2, #176	; 0xb0
 800af60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d01f      	beq.n	800afa8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800af6e:	687a      	ldr	r2, [r7, #4]
 800af70:	33b0      	adds	r3, #176	; 0xb0
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4413      	add	r3, r2
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	32b0      	adds	r2, #176	; 0xb0
 800af86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8a:	4618      	mov	r0, r3
 800af8c:	f002 fb58 	bl	800d640 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	32b0      	adds	r2, #176	; 0xb0
 800af9a:	2100      	movs	r1, #0
 800af9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2200      	movs	r2, #0
 800afa4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800afa8:	2300      	movs	r3, #0
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3708      	adds	r7, #8
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}
 800afb2:	bf00      	nop
 800afb4:	20000093 	.word	0x20000093
 800afb8:	20000094 	.word	0x20000094
 800afbc:	20000095 	.word	0x20000095

0800afc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	32b0      	adds	r2, #176	; 0xb0
 800afd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afd8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800afda:	2300      	movs	r3, #0
 800afdc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800afde:	2300      	movs	r3, #0
 800afe0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800afe2:	2300      	movs	r3, #0
 800afe4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d101      	bne.n	800aff0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800afec:	2303      	movs	r3, #3
 800afee:	e0bf      	b.n	800b170 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	781b      	ldrb	r3, [r3, #0]
 800aff4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d050      	beq.n	800b09e <USBD_CDC_Setup+0xde>
 800affc:	2b20      	cmp	r3, #32
 800affe:	f040 80af 	bne.w	800b160 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b002:	683b      	ldr	r3, [r7, #0]
 800b004:	88db      	ldrh	r3, [r3, #6]
 800b006:	2b00      	cmp	r3, #0
 800b008:	d03a      	beq.n	800b080 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	b25b      	sxtb	r3, r3
 800b010:	2b00      	cmp	r3, #0
 800b012:	da1b      	bge.n	800b04c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	33b0      	adds	r3, #176	; 0xb0
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	689b      	ldr	r3, [r3, #8]
 800b026:	683a      	ldr	r2, [r7, #0]
 800b028:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b02a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	88d2      	ldrh	r2, [r2, #6]
 800b030:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	88db      	ldrh	r3, [r3, #6]
 800b036:	2b07      	cmp	r3, #7
 800b038:	bf28      	it	cs
 800b03a:	2307      	movcs	r3, #7
 800b03c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	89fa      	ldrh	r2, [r7, #14]
 800b042:	4619      	mov	r1, r3
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f001 fd89 	bl	800cb5c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b04a:	e090      	b.n	800b16e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	785a      	ldrb	r2, [r3, #1]
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	88db      	ldrh	r3, [r3, #6]
 800b05a:	2b3f      	cmp	r3, #63	; 0x3f
 800b05c:	d803      	bhi.n	800b066 <USBD_CDC_Setup+0xa6>
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	88db      	ldrh	r3, [r3, #6]
 800b062:	b2da      	uxtb	r2, r3
 800b064:	e000      	b.n	800b068 <USBD_CDC_Setup+0xa8>
 800b066:	2240      	movs	r2, #64	; 0x40
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b06e:	6939      	ldr	r1, [r7, #16]
 800b070:	693b      	ldr	r3, [r7, #16]
 800b072:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b076:	461a      	mov	r2, r3
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f001 fd9b 	bl	800cbb4 <USBD_CtlPrepareRx>
      break;
 800b07e:	e076      	b.n	800b16e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	33b0      	adds	r3, #176	; 0xb0
 800b08a:	009b      	lsls	r3, r3, #2
 800b08c:	4413      	add	r3, r2
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	689b      	ldr	r3, [r3, #8]
 800b092:	683a      	ldr	r2, [r7, #0]
 800b094:	7850      	ldrb	r0, [r2, #1]
 800b096:	2200      	movs	r2, #0
 800b098:	6839      	ldr	r1, [r7, #0]
 800b09a:	4798      	blx	r3
      break;
 800b09c:	e067      	b.n	800b16e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	785b      	ldrb	r3, [r3, #1]
 800b0a2:	2b0b      	cmp	r3, #11
 800b0a4:	d851      	bhi.n	800b14a <USBD_CDC_Setup+0x18a>
 800b0a6:	a201      	add	r2, pc, #4	; (adr r2, 800b0ac <USBD_CDC_Setup+0xec>)
 800b0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ac:	0800b0dd 	.word	0x0800b0dd
 800b0b0:	0800b159 	.word	0x0800b159
 800b0b4:	0800b14b 	.word	0x0800b14b
 800b0b8:	0800b14b 	.word	0x0800b14b
 800b0bc:	0800b14b 	.word	0x0800b14b
 800b0c0:	0800b14b 	.word	0x0800b14b
 800b0c4:	0800b14b 	.word	0x0800b14b
 800b0c8:	0800b14b 	.word	0x0800b14b
 800b0cc:	0800b14b 	.word	0x0800b14b
 800b0d0:	0800b14b 	.word	0x0800b14b
 800b0d4:	0800b107 	.word	0x0800b107
 800b0d8:	0800b131 	.word	0x0800b131
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0e2:	b2db      	uxtb	r3, r3
 800b0e4:	2b03      	cmp	r3, #3
 800b0e6:	d107      	bne.n	800b0f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b0e8:	f107 030a 	add.w	r3, r7, #10
 800b0ec:	2202      	movs	r2, #2
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f001 fd33 	bl	800cb5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b0f6:	e032      	b.n	800b15e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f001 fcbd 	bl	800ca7a <USBD_CtlError>
            ret = USBD_FAIL;
 800b100:	2303      	movs	r3, #3
 800b102:	75fb      	strb	r3, [r7, #23]
          break;
 800b104:	e02b      	b.n	800b15e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	2b03      	cmp	r3, #3
 800b110:	d107      	bne.n	800b122 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b112:	f107 030d 	add.w	r3, r7, #13
 800b116:	2201      	movs	r2, #1
 800b118:	4619      	mov	r1, r3
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f001 fd1e 	bl	800cb5c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b120:	e01d      	b.n	800b15e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b122:	6839      	ldr	r1, [r7, #0]
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f001 fca8 	bl	800ca7a <USBD_CtlError>
            ret = USBD_FAIL;
 800b12a:	2303      	movs	r3, #3
 800b12c:	75fb      	strb	r3, [r7, #23]
          break;
 800b12e:	e016      	b.n	800b15e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b136:	b2db      	uxtb	r3, r3
 800b138:	2b03      	cmp	r3, #3
 800b13a:	d00f      	beq.n	800b15c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b13c:	6839      	ldr	r1, [r7, #0]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f001 fc9b 	bl	800ca7a <USBD_CtlError>
            ret = USBD_FAIL;
 800b144:	2303      	movs	r3, #3
 800b146:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b148:	e008      	b.n	800b15c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b14a:	6839      	ldr	r1, [r7, #0]
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 fc94 	bl	800ca7a <USBD_CtlError>
          ret = USBD_FAIL;
 800b152:	2303      	movs	r3, #3
 800b154:	75fb      	strb	r3, [r7, #23]
          break;
 800b156:	e002      	b.n	800b15e <USBD_CDC_Setup+0x19e>
          break;
 800b158:	bf00      	nop
 800b15a:	e008      	b.n	800b16e <USBD_CDC_Setup+0x1ae>
          break;
 800b15c:	bf00      	nop
      }
      break;
 800b15e:	e006      	b.n	800b16e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f001 fc89 	bl	800ca7a <USBD_CtlError>
      ret = USBD_FAIL;
 800b168:	2303      	movs	r3, #3
 800b16a:	75fb      	strb	r3, [r7, #23]
      break;
 800b16c:	bf00      	nop
  }

  return (uint8_t)ret;
 800b16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3718      	adds	r7, #24
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
 800b180:	460b      	mov	r3, r1
 800b182:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b18a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	32b0      	adds	r2, #176	; 0xb0
 800b196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d101      	bne.n	800b1a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b19e:	2303      	movs	r3, #3
 800b1a0:	e065      	b.n	800b26e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	32b0      	adds	r2, #176	; 0xb0
 800b1ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b1b2:	78fb      	ldrb	r3, [r7, #3]
 800b1b4:	f003 020f 	and.w	r2, r3, #15
 800b1b8:	6879      	ldr	r1, [r7, #4]
 800b1ba:	4613      	mov	r3, r2
 800b1bc:	009b      	lsls	r3, r3, #2
 800b1be:	4413      	add	r3, r2
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	440b      	add	r3, r1
 800b1c4:	3318      	adds	r3, #24
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d02f      	beq.n	800b22c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b1cc:	78fb      	ldrb	r3, [r7, #3]
 800b1ce:	f003 020f 	and.w	r2, r3, #15
 800b1d2:	6879      	ldr	r1, [r7, #4]
 800b1d4:	4613      	mov	r3, r2
 800b1d6:	009b      	lsls	r3, r3, #2
 800b1d8:	4413      	add	r3, r2
 800b1da:	009b      	lsls	r3, r3, #2
 800b1dc:	440b      	add	r3, r1
 800b1de:	3318      	adds	r3, #24
 800b1e0:	681a      	ldr	r2, [r3, #0]
 800b1e2:	78fb      	ldrb	r3, [r7, #3]
 800b1e4:	f003 010f 	and.w	r1, r3, #15
 800b1e8:	68f8      	ldr	r0, [r7, #12]
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	00db      	lsls	r3, r3, #3
 800b1ee:	440b      	add	r3, r1
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	4403      	add	r3, r0
 800b1f4:	3348      	adds	r3, #72	; 0x48
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	fbb2 f1f3 	udiv	r1, r2, r3
 800b1fc:	fb01 f303 	mul.w	r3, r1, r3
 800b200:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b202:	2b00      	cmp	r3, #0
 800b204:	d112      	bne.n	800b22c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b206:	78fb      	ldrb	r3, [r7, #3]
 800b208:	f003 020f 	and.w	r2, r3, #15
 800b20c:	6879      	ldr	r1, [r7, #4]
 800b20e:	4613      	mov	r3, r2
 800b210:	009b      	lsls	r3, r3, #2
 800b212:	4413      	add	r3, r2
 800b214:	009b      	lsls	r3, r3, #2
 800b216:	440b      	add	r3, r1
 800b218:	3318      	adds	r3, #24
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b21e:	78f9      	ldrb	r1, [r7, #3]
 800b220:	2300      	movs	r3, #0
 800b222:	2200      	movs	r2, #0
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f002 f9a8 	bl	800d57a <USBD_LL_Transmit>
 800b22a:	e01f      	b.n	800b26c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b22c:	68bb      	ldr	r3, [r7, #8]
 800b22e:	2200      	movs	r2, #0
 800b230:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	33b0      	adds	r3, #176	; 0xb0
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	4413      	add	r3, r2
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	691b      	ldr	r3, [r3, #16]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d010      	beq.n	800b26c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b250:	687a      	ldr	r2, [r7, #4]
 800b252:	33b0      	adds	r3, #176	; 0xb0
 800b254:	009b      	lsls	r3, r3, #2
 800b256:	4413      	add	r3, r2
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b262:	68ba      	ldr	r2, [r7, #8]
 800b264:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b268:	78fa      	ldrb	r2, [r7, #3]
 800b26a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b26c:	2300      	movs	r3, #0
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}

0800b276 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b276:	b580      	push	{r7, lr}
 800b278:	b084      	sub	sp, #16
 800b27a:	af00      	add	r7, sp, #0
 800b27c:	6078      	str	r0, [r7, #4]
 800b27e:	460b      	mov	r3, r1
 800b280:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	32b0      	adds	r2, #176	; 0xb0
 800b28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b290:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	32b0      	adds	r2, #176	; 0xb0
 800b29c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d101      	bne.n	800b2a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e01a      	b.n	800b2de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b2a8:	78fb      	ldrb	r3, [r7, #3]
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f002 f9a6 	bl	800d5fe <USBD_LL_GetRxDataSize>
 800b2b2:	4602      	mov	r2, r0
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	33b0      	adds	r3, #176	; 0xb0
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	4413      	add	r3, r2
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b2d8:	4611      	mov	r1, r2
 800b2da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b2dc:	2300      	movs	r3, #0
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	32b0      	adds	r2, #176	; 0xb0
 800b2f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d101      	bne.n	800b308 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b304:	2303      	movs	r3, #3
 800b306:	e025      	b.n	800b354 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	33b0      	adds	r3, #176	; 0xb0
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4413      	add	r3, r2
 800b316:	685b      	ldr	r3, [r3, #4]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d01a      	beq.n	800b352 <USBD_CDC_EP0_RxReady+0x6c>
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b322:	2bff      	cmp	r3, #255	; 0xff
 800b324:	d015      	beq.n	800b352 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	33b0      	adds	r3, #176	; 0xb0
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4413      	add	r3, r2
 800b334:	685b      	ldr	r3, [r3, #4]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	68fa      	ldr	r2, [r7, #12]
 800b33a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b33e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b340:	68fa      	ldr	r2, [r7, #12]
 800b342:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b346:	b292      	uxth	r2, r2
 800b348:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	22ff      	movs	r2, #255	; 0xff
 800b34e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b352:	2300      	movs	r3, #0
}
 800b354:	4618      	mov	r0, r3
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b086      	sub	sp, #24
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b364:	2182      	movs	r1, #130	; 0x82
 800b366:	4818      	ldr	r0, [pc, #96]	; (800b3c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b368:	f000 fd4f 	bl	800be0a <USBD_GetEpDesc>
 800b36c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b36e:	2101      	movs	r1, #1
 800b370:	4815      	ldr	r0, [pc, #84]	; (800b3c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b372:	f000 fd4a 	bl	800be0a <USBD_GetEpDesc>
 800b376:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b378:	2181      	movs	r1, #129	; 0x81
 800b37a:	4813      	ldr	r0, [pc, #76]	; (800b3c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b37c:	f000 fd45 	bl	800be0a <USBD_GetEpDesc>
 800b380:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	2210      	movs	r2, #16
 800b38c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b38e:	693b      	ldr	r3, [r7, #16]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d006      	beq.n	800b3a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	2200      	movs	r2, #0
 800b398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b39c:	711a      	strb	r2, [r3, #4]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d006      	beq.n	800b3b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3b0:	711a      	strb	r2, [r3, #4]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2243      	movs	r2, #67	; 0x43
 800b3ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b3bc:	4b02      	ldr	r3, [pc, #8]	; (800b3c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3718      	adds	r7, #24
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20000050 	.word	0x20000050

0800b3cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b3d4:	2182      	movs	r1, #130	; 0x82
 800b3d6:	4818      	ldr	r0, [pc, #96]	; (800b438 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3d8:	f000 fd17 	bl	800be0a <USBD_GetEpDesc>
 800b3dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b3de:	2101      	movs	r1, #1
 800b3e0:	4815      	ldr	r0, [pc, #84]	; (800b438 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3e2:	f000 fd12 	bl	800be0a <USBD_GetEpDesc>
 800b3e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b3e8:	2181      	movs	r1, #129	; 0x81
 800b3ea:	4813      	ldr	r0, [pc, #76]	; (800b438 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b3ec:	f000 fd0d 	bl	800be0a <USBD_GetEpDesc>
 800b3f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d002      	beq.n	800b3fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	2210      	movs	r2, #16
 800b3fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d006      	beq.n	800b412 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	2200      	movs	r2, #0
 800b408:	711a      	strb	r2, [r3, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	f042 0202 	orr.w	r2, r2, #2
 800b410:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d006      	beq.n	800b426 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	2200      	movs	r2, #0
 800b41c:	711a      	strb	r2, [r3, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	f042 0202 	orr.w	r2, r2, #2
 800b424:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2243      	movs	r2, #67	; 0x43
 800b42a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b42c:	4b02      	ldr	r3, [pc, #8]	; (800b438 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b42e:	4618      	mov	r0, r3
 800b430:	3718      	adds	r7, #24
 800b432:	46bd      	mov	sp, r7
 800b434:	bd80      	pop	{r7, pc}
 800b436:	bf00      	nop
 800b438:	20000050 	.word	0x20000050

0800b43c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b086      	sub	sp, #24
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b444:	2182      	movs	r1, #130	; 0x82
 800b446:	4818      	ldr	r0, [pc, #96]	; (800b4a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b448:	f000 fcdf 	bl	800be0a <USBD_GetEpDesc>
 800b44c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b44e:	2101      	movs	r1, #1
 800b450:	4815      	ldr	r0, [pc, #84]	; (800b4a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b452:	f000 fcda 	bl	800be0a <USBD_GetEpDesc>
 800b456:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b458:	2181      	movs	r1, #129	; 0x81
 800b45a:	4813      	ldr	r0, [pc, #76]	; (800b4a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b45c:	f000 fcd5 	bl	800be0a <USBD_GetEpDesc>
 800b460:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	2210      	movs	r2, #16
 800b46c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d006      	beq.n	800b482 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	2200      	movs	r2, #0
 800b478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b47c:	711a      	strb	r2, [r3, #4]
 800b47e:	2200      	movs	r2, #0
 800b480:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d006      	beq.n	800b496 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	2200      	movs	r2, #0
 800b48c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b490:	711a      	strb	r2, [r3, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2243      	movs	r2, #67	; 0x43
 800b49a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b49c:	4b02      	ldr	r3, [pc, #8]	; (800b4a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3718      	adds	r7, #24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd80      	pop	{r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	20000050 	.word	0x20000050

0800b4ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	220a      	movs	r2, #10
 800b4b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b4ba:	4b03      	ldr	r3, [pc, #12]	; (800b4c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr
 800b4c8:	2000000c 	.word	0x2000000c

0800b4cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d101      	bne.n	800b4e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e009      	b.n	800b4f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	33b0      	adds	r3, #176	; 0xb0
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	4413      	add	r3, r2
 800b4ee:	683a      	ldr	r2, [r7, #0]
 800b4f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr

0800b500 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b500:	b480      	push	{r7}
 800b502:	b087      	sub	sp, #28
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	60b9      	str	r1, [r7, #8]
 800b50a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	32b0      	adds	r2, #176	; 0xb0
 800b516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b51a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d101      	bne.n	800b526 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b522:	2303      	movs	r3, #3
 800b524:	e008      	b.n	800b538 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	68ba      	ldr	r2, [r7, #8]
 800b52a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	687a      	ldr	r2, [r7, #4]
 800b532:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	371c      	adds	r7, #28
 800b53c:	46bd      	mov	sp, r7
 800b53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b542:	4770      	bx	lr

0800b544 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	32b0      	adds	r2, #176	; 0xb0
 800b558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b55c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d101      	bne.n	800b568 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b564:	2303      	movs	r3, #3
 800b566:	e004      	b.n	800b572 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	683a      	ldr	r2, [r7, #0]
 800b56c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b570:	2300      	movs	r3, #0
}
 800b572:	4618      	mov	r0, r3
 800b574:	3714      	adds	r7, #20
 800b576:	46bd      	mov	sp, r7
 800b578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57c:	4770      	bx	lr
	...

0800b580 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	32b0      	adds	r2, #176	; 0xb0
 800b592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b596:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b598:	2301      	movs	r3, #1
 800b59a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	32b0      	adds	r2, #176	; 0xb0
 800b5a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d101      	bne.n	800b5b2 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b5ae:	2303      	movs	r3, #3
 800b5b0:	e025      	b.n	800b5fe <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	d11f      	bne.n	800b5fc <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b5bc:	68bb      	ldr	r3, [r7, #8]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b5c4:	4b10      	ldr	r3, [pc, #64]	; (800b608 <USBD_CDC_TransmitPacket+0x88>)
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	f003 020f 	and.w	r2, r3, #15
 800b5cc:	68bb      	ldr	r3, [r7, #8]
 800b5ce:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	4413      	add	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4403      	add	r3, r0
 800b5de:	3318      	adds	r3, #24
 800b5e0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b5e2:	4b09      	ldr	r3, [pc, #36]	; (800b608 <USBD_CDC_TransmitPacket+0x88>)
 800b5e4:	7819      	ldrb	r1, [r3, #0]
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 ffc1 	bl	800d57a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	20000093 	.word	0x20000093

0800b60c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	32b0      	adds	r2, #176	; 0xb0
 800b61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b622:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	32b0      	adds	r2, #176	; 0xb0
 800b62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d101      	bne.n	800b63a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b636:	2303      	movs	r3, #3
 800b638:	e018      	b.n	800b66c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	7c1b      	ldrb	r3, [r3, #16]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d10a      	bne.n	800b658 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b642:	4b0c      	ldr	r3, [pc, #48]	; (800b674 <USBD_CDC_ReceivePacket+0x68>)
 800b644:	7819      	ldrb	r1, [r3, #0]
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b64c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f001 ffb3 	bl	800d5bc <USBD_LL_PrepareReceive>
 800b656:	e008      	b.n	800b66a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b658:	4b06      	ldr	r3, [pc, #24]	; (800b674 <USBD_CDC_ReceivePacket+0x68>)
 800b65a:	7819      	ldrb	r1, [r3, #0]
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b662:	2340      	movs	r3, #64	; 0x40
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f001 ffa9 	bl	800d5bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}
 800b674:	20000094 	.word	0x20000094

0800b678 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b678:	b580      	push	{r7, lr}
 800b67a:	b086      	sub	sp, #24
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	60f8      	str	r0, [r7, #12]
 800b680:	60b9      	str	r1, [r7, #8]
 800b682:	4613      	mov	r3, r2
 800b684:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d101      	bne.n	800b690 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b68c:	2303      	movs	r3, #3
 800b68e:	e01f      	b.n	800b6d0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2200      	movs	r2, #0
 800b69c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d003      	beq.n	800b6b6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	79fa      	ldrb	r2, [r7, #7]
 800b6c2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b6c4:	68f8      	ldr	r0, [r7, #12]
 800b6c6:	f001 fe23 	bl	800d310 <USBD_LL_Init>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b6ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3718      	adds	r7, #24
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d101      	bne.n	800b6f0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b6ec:	2303      	movs	r3, #3
 800b6ee:	e025      	b.n	800b73c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	683a      	ldr	r2, [r7, #0]
 800b6f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	32ae      	adds	r2, #174	; 0xae
 800b702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00f      	beq.n	800b72c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	32ae      	adds	r2, #174	; 0xae
 800b716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b71c:	f107 020e 	add.w	r2, r7, #14
 800b720:	4610      	mov	r0, r2
 800b722:	4798      	blx	r3
 800b724:	4602      	mov	r2, r0
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b732:	1c5a      	adds	r2, r3, #1
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b73a:	2300      	movs	r3, #0
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f001 fe2b 	bl	800d3a8 <USBD_LL_Start>
 800b752:	4603      	mov	r3, r0
}
 800b754:	4618      	mov	r0, r3
 800b756:	3708      	adds	r7, #8
 800b758:	46bd      	mov	sp, r7
 800b75a:	bd80      	pop	{r7, pc}

0800b75c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b764:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b766:	4618      	mov	r0, r3
 800b768:	370c      	adds	r7, #12
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b084      	sub	sp, #16
 800b776:	af00      	add	r7, sp, #0
 800b778:	6078      	str	r0, [r7, #4]
 800b77a:	460b      	mov	r3, r1
 800b77c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b77e:	2300      	movs	r3, #0
 800b780:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d009      	beq.n	800b7a0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	78fa      	ldrb	r2, [r7, #3]
 800b796:	4611      	mov	r1, r2
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	4798      	blx	r3
 800b79c:	4603      	mov	r3, r0
 800b79e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
 800b7b2:	460b      	mov	r3, r1
 800b7b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b7c0:	685b      	ldr	r3, [r3, #4]
 800b7c2:	78fa      	ldrb	r2, [r7, #3]
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	4798      	blx	r3
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d001      	beq.n	800b7d4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b7d0:	2303      	movs	r3, #3
 800b7d2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b7de:	b580      	push	{r7, lr}
 800b7e0:	b084      	sub	sp, #16
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b7ee:	6839      	ldr	r1, [r7, #0]
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f001 f908 	bl	800ca06 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b804:	461a      	mov	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b812:	f003 031f 	and.w	r3, r3, #31
 800b816:	2b02      	cmp	r3, #2
 800b818:	d01a      	beq.n	800b850 <USBD_LL_SetupStage+0x72>
 800b81a:	2b02      	cmp	r3, #2
 800b81c:	d822      	bhi.n	800b864 <USBD_LL_SetupStage+0x86>
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d002      	beq.n	800b828 <USBD_LL_SetupStage+0x4a>
 800b822:	2b01      	cmp	r3, #1
 800b824:	d00a      	beq.n	800b83c <USBD_LL_SetupStage+0x5e>
 800b826:	e01d      	b.n	800b864 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b82e:	4619      	mov	r1, r3
 800b830:	6878      	ldr	r0, [r7, #4]
 800b832:	f000 fb5f 	bl	800bef4 <USBD_StdDevReq>
 800b836:	4603      	mov	r3, r0
 800b838:	73fb      	strb	r3, [r7, #15]
      break;
 800b83a:	e020      	b.n	800b87e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b842:	4619      	mov	r1, r3
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 fbc7 	bl	800bfd8 <USBD_StdItfReq>
 800b84a:	4603      	mov	r3, r0
 800b84c:	73fb      	strb	r3, [r7, #15]
      break;
 800b84e:	e016      	b.n	800b87e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b856:	4619      	mov	r1, r3
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 fc29 	bl	800c0b0 <USBD_StdEPReq>
 800b85e:	4603      	mov	r3, r0
 800b860:	73fb      	strb	r3, [r7, #15]
      break;
 800b862:	e00c      	b.n	800b87e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b86a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	4619      	mov	r1, r3
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f001 fdf8 	bl	800d468 <USBD_LL_StallEP>
 800b878:	4603      	mov	r3, r0
 800b87a:	73fb      	strb	r3, [r7, #15]
      break;
 800b87c:	bf00      	nop
  }

  return ret;
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b880:	4618      	mov	r0, r3
 800b882:	3710      	adds	r7, #16
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}

0800b888 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	460b      	mov	r3, r1
 800b892:	607a      	str	r2, [r7, #4]
 800b894:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b896:	2300      	movs	r3, #0
 800b898:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b89a:	7afb      	ldrb	r3, [r7, #11]
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d16e      	bne.n	800b97e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b8a6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b8ae:	2b03      	cmp	r3, #3
 800b8b0:	f040 8098 	bne.w	800b9e4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	689a      	ldr	r2, [r3, #8]
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d913      	bls.n	800b8e8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	689a      	ldr	r2, [r3, #8]
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	1ad2      	subs	r2, r2, r3
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	68da      	ldr	r2, [r3, #12]
 800b8d2:	693b      	ldr	r3, [r7, #16]
 800b8d4:	689b      	ldr	r3, [r3, #8]
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	bf28      	it	cs
 800b8da:	4613      	movcs	r3, r2
 800b8dc:	461a      	mov	r2, r3
 800b8de:	6879      	ldr	r1, [r7, #4]
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f001 f984 	bl	800cbee <USBD_CtlContinueRx>
 800b8e6:	e07d      	b.n	800b9e4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b8ee:	f003 031f 	and.w	r3, r3, #31
 800b8f2:	2b02      	cmp	r3, #2
 800b8f4:	d014      	beq.n	800b920 <USBD_LL_DataOutStage+0x98>
 800b8f6:	2b02      	cmp	r3, #2
 800b8f8:	d81d      	bhi.n	800b936 <USBD_LL_DataOutStage+0xae>
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d002      	beq.n	800b904 <USBD_LL_DataOutStage+0x7c>
 800b8fe:	2b01      	cmp	r3, #1
 800b900:	d003      	beq.n	800b90a <USBD_LL_DataOutStage+0x82>
 800b902:	e018      	b.n	800b936 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b904:	2300      	movs	r3, #0
 800b906:	75bb      	strb	r3, [r7, #22]
            break;
 800b908:	e018      	b.n	800b93c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b910:	b2db      	uxtb	r3, r3
 800b912:	4619      	mov	r1, r3
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 fa5e 	bl	800bdd6 <USBD_CoreFindIF>
 800b91a:	4603      	mov	r3, r0
 800b91c:	75bb      	strb	r3, [r7, #22]
            break;
 800b91e:	e00d      	b.n	800b93c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800b926:	b2db      	uxtb	r3, r3
 800b928:	4619      	mov	r1, r3
 800b92a:	68f8      	ldr	r0, [r7, #12]
 800b92c:	f000 fa60 	bl	800bdf0 <USBD_CoreFindEP>
 800b930:	4603      	mov	r3, r0
 800b932:	75bb      	strb	r3, [r7, #22]
            break;
 800b934:	e002      	b.n	800b93c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b936:	2300      	movs	r3, #0
 800b938:	75bb      	strb	r3, [r7, #22]
            break;
 800b93a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b93c:	7dbb      	ldrb	r3, [r7, #22]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d119      	bne.n	800b976 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	2b03      	cmp	r3, #3
 800b94c:	d113      	bne.n	800b976 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b94e:	7dba      	ldrb	r2, [r7, #22]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	32ae      	adds	r2, #174	; 0xae
 800b954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d00b      	beq.n	800b976 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b95e:	7dba      	ldrb	r2, [r7, #22]
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b966:	7dba      	ldrb	r2, [r7, #22]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	32ae      	adds	r2, #174	; 0xae
 800b96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b970:	691b      	ldr	r3, [r3, #16]
 800b972:	68f8      	ldr	r0, [r7, #12]
 800b974:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b976:	68f8      	ldr	r0, [r7, #12]
 800b978:	f001 f94a 	bl	800cc10 <USBD_CtlSendStatus>
 800b97c:	e032      	b.n	800b9e4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b97e:	7afb      	ldrb	r3, [r7, #11]
 800b980:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b984:	b2db      	uxtb	r3, r3
 800b986:	4619      	mov	r1, r3
 800b988:	68f8      	ldr	r0, [r7, #12]
 800b98a:	f000 fa31 	bl	800bdf0 <USBD_CoreFindEP>
 800b98e:	4603      	mov	r3, r0
 800b990:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b992:	7dbb      	ldrb	r3, [r7, #22]
 800b994:	2bff      	cmp	r3, #255	; 0xff
 800b996:	d025      	beq.n	800b9e4 <USBD_LL_DataOutStage+0x15c>
 800b998:	7dbb      	ldrb	r3, [r7, #22]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d122      	bne.n	800b9e4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b9a4:	b2db      	uxtb	r3, r3
 800b9a6:	2b03      	cmp	r3, #3
 800b9a8:	d117      	bne.n	800b9da <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b9aa:	7dba      	ldrb	r2, [r7, #22]
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	32ae      	adds	r2, #174	; 0xae
 800b9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b4:	699b      	ldr	r3, [r3, #24]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d00f      	beq.n	800b9da <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b9ba:	7dba      	ldrb	r2, [r7, #22]
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b9c2:	7dba      	ldrb	r2, [r7, #22]
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	32ae      	adds	r2, #174	; 0xae
 800b9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	7afa      	ldrb	r2, [r7, #11]
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	68f8      	ldr	r0, [r7, #12]
 800b9d4:	4798      	blx	r3
 800b9d6:	4603      	mov	r3, r0
 800b9d8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b9da:	7dfb      	ldrb	r3, [r7, #23]
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d001      	beq.n	800b9e4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b9e0:	7dfb      	ldrb	r3, [r7, #23]
 800b9e2:	e000      	b.n	800b9e6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3718      	adds	r7, #24
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b086      	sub	sp, #24
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	60f8      	str	r0, [r7, #12]
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	607a      	str	r2, [r7, #4]
 800b9fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b9fc:	7afb      	ldrb	r3, [r7, #11]
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d16f      	bne.n	800bae2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	3314      	adds	r3, #20
 800ba06:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ba0e:	2b02      	cmp	r3, #2
 800ba10:	d15a      	bne.n	800bac8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	689a      	ldr	r2, [r3, #8]
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d914      	bls.n	800ba48 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	689a      	ldr	r2, [r3, #8]
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	68db      	ldr	r3, [r3, #12]
 800ba26:	1ad2      	subs	r2, r2, r3
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ba2c:	693b      	ldr	r3, [r7, #16]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	461a      	mov	r2, r3
 800ba32:	6879      	ldr	r1, [r7, #4]
 800ba34:	68f8      	ldr	r0, [r7, #12]
 800ba36:	f001 f8ac 	bl	800cb92 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	2100      	movs	r1, #0
 800ba40:	68f8      	ldr	r0, [r7, #12]
 800ba42:	f001 fdbb 	bl	800d5bc <USBD_LL_PrepareReceive>
 800ba46:	e03f      	b.n	800bac8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ba48:	693b      	ldr	r3, [r7, #16]
 800ba4a:	68da      	ldr	r2, [r3, #12]
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	429a      	cmp	r2, r3
 800ba52:	d11c      	bne.n	800ba8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	693b      	ldr	r3, [r7, #16]
 800ba5a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d316      	bcc.n	800ba8e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	685a      	ldr	r2, [r3, #4]
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d20f      	bcs.n	800ba8e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ba6e:	2200      	movs	r2, #0
 800ba70:	2100      	movs	r1, #0
 800ba72:	68f8      	ldr	r0, [r7, #12]
 800ba74:	f001 f88d 	bl	800cb92 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	2200      	movs	r2, #0
 800ba7c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ba80:	2300      	movs	r3, #0
 800ba82:	2200      	movs	r2, #0
 800ba84:	2100      	movs	r1, #0
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f001 fd98 	bl	800d5bc <USBD_LL_PrepareReceive>
 800ba8c:	e01c      	b.n	800bac8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b03      	cmp	r3, #3
 800ba98:	d10f      	bne.n	800baba <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d009      	beq.n	800baba <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bab4:	68db      	ldr	r3, [r3, #12]
 800bab6:	68f8      	ldr	r0, [r7, #12]
 800bab8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800baba:	2180      	movs	r1, #128	; 0x80
 800babc:	68f8      	ldr	r0, [r7, #12]
 800babe:	f001 fcd3 	bl	800d468 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bac2:	68f8      	ldr	r0, [r7, #12]
 800bac4:	f001 f8b7 	bl	800cc36 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d03a      	beq.n	800bb48 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f7ff fe42 	bl	800b75c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	2200      	movs	r2, #0
 800badc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bae0:	e032      	b.n	800bb48 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bae2:	7afb      	ldrb	r3, [r7, #11]
 800bae4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	4619      	mov	r1, r3
 800baec:	68f8      	ldr	r0, [r7, #12]
 800baee:	f000 f97f 	bl	800bdf0 <USBD_CoreFindEP>
 800baf2:	4603      	mov	r3, r0
 800baf4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800baf6:	7dfb      	ldrb	r3, [r7, #23]
 800baf8:	2bff      	cmp	r3, #255	; 0xff
 800bafa:	d025      	beq.n	800bb48 <USBD_LL_DataInStage+0x15a>
 800bafc:	7dfb      	ldrb	r3, [r7, #23]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d122      	bne.n	800bb48 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	2b03      	cmp	r3, #3
 800bb0c:	d11c      	bne.n	800bb48 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bb0e:	7dfa      	ldrb	r2, [r7, #23]
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	32ae      	adds	r2, #174	; 0xae
 800bb14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb18:	695b      	ldr	r3, [r3, #20]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d014      	beq.n	800bb48 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bb1e:	7dfa      	ldrb	r2, [r7, #23]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bb26:	7dfa      	ldrb	r2, [r7, #23]
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	32ae      	adds	r2, #174	; 0xae
 800bb2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb30:	695b      	ldr	r3, [r3, #20]
 800bb32:	7afa      	ldrb	r2, [r7, #11]
 800bb34:	4611      	mov	r1, r2
 800bb36:	68f8      	ldr	r0, [r7, #12]
 800bb38:	4798      	blx	r3
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bb3e:	7dbb      	ldrb	r3, [r7, #22]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d001      	beq.n	800bb48 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bb44:	7dbb      	ldrb	r3, [r7, #22]
 800bb46:	e000      	b.n	800bb4a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bb48:	2300      	movs	r3, #0
}
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	3718      	adds	r7, #24
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	bd80      	pop	{r7, pc}

0800bb52 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b084      	sub	sp, #16
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2201      	movs	r2, #1
 800bb62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d014      	beq.n	800bbb8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d00e      	beq.n	800bbb8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bba0:	685b      	ldr	r3, [r3, #4]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	6852      	ldr	r2, [r2, #4]
 800bba6:	b2d2      	uxtb	r2, r2
 800bba8:	4611      	mov	r1, r2
 800bbaa:	6878      	ldr	r0, [r7, #4]
 800bbac:	4798      	blx	r3
 800bbae:	4603      	mov	r3, r0
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d001      	beq.n	800bbb8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbb8:	2340      	movs	r3, #64	; 0x40
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f001 fc0d 	bl	800d3de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2201      	movs	r2, #1
 800bbc8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2240      	movs	r2, #64	; 0x40
 800bbd0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bbd4:	2340      	movs	r3, #64	; 0x40
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	2180      	movs	r1, #128	; 0x80
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f001 fbff 	bl	800d3de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2240      	movs	r2, #64	; 0x40
 800bbea:	621a      	str	r2, [r3, #32]

  return ret;
 800bbec:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3710      	adds	r7, #16
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
 800bbfe:	460b      	mov	r3, r1
 800bc00:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	78fa      	ldrb	r2, [r7, #3]
 800bc06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bc08:	2300      	movs	r3, #0
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	370c      	adds	r7, #12
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc14:	4770      	bx	lr

0800bc16 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800bc16:	b480      	push	{r7}
 800bc18:	b083      	sub	sp, #12
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc24:	b2da      	uxtb	r2, r3
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2204      	movs	r2, #4
 800bc30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	370c      	adds	r7, #12
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr

0800bc42 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800bc42:	b480      	push	{r7}
 800bc44:	b083      	sub	sp, #12
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	2b04      	cmp	r3, #4
 800bc54:	d106      	bne.n	800bc64 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	370c      	adds	r7, #12
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800bc72:	b580      	push	{r7, lr}
 800bc74:	b082      	sub	sp, #8
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc80:	b2db      	uxtb	r3, r3
 800bc82:	2b03      	cmp	r3, #3
 800bc84:	d110      	bne.n	800bca8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d00b      	beq.n	800bca8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc96:	69db      	ldr	r3, [r3, #28]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d005      	beq.n	800bca8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bca2:	69db      	ldr	r3, [r3, #28]
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bca8:	2300      	movs	r3, #0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b082      	sub	sp, #8
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	460b      	mov	r3, r1
 800bcbc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	32ae      	adds	r2, #174	; 0xae
 800bcc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d101      	bne.n	800bcd4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bcd0:	2303      	movs	r3, #3
 800bcd2:	e01c      	b.n	800bd0e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bcda:	b2db      	uxtb	r3, r3
 800bcdc:	2b03      	cmp	r3, #3
 800bcde:	d115      	bne.n	800bd0c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	32ae      	adds	r2, #174	; 0xae
 800bcea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcee:	6a1b      	ldr	r3, [r3, #32]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d00b      	beq.n	800bd0c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	32ae      	adds	r2, #174	; 0xae
 800bcfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd02:	6a1b      	ldr	r3, [r3, #32]
 800bd04:	78fa      	ldrb	r2, [r7, #3]
 800bd06:	4611      	mov	r1, r2
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd0c:	2300      	movs	r3, #0
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3708      	adds	r7, #8
 800bd12:	46bd      	mov	sp, r7
 800bd14:	bd80      	pop	{r7, pc}

0800bd16 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bd16:	b580      	push	{r7, lr}
 800bd18:	b082      	sub	sp, #8
 800bd1a:	af00      	add	r7, sp, #0
 800bd1c:	6078      	str	r0, [r7, #4]
 800bd1e:	460b      	mov	r3, r1
 800bd20:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	32ae      	adds	r2, #174	; 0xae
 800bd2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d101      	bne.n	800bd38 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bd34:	2303      	movs	r3, #3
 800bd36:	e01c      	b.n	800bd72 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd3e:	b2db      	uxtb	r3, r3
 800bd40:	2b03      	cmp	r3, #3
 800bd42:	d115      	bne.n	800bd70 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	32ae      	adds	r2, #174	; 0xae
 800bd4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d00b      	beq.n	800bd70 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	32ae      	adds	r2, #174	; 0xae
 800bd62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd68:	78fa      	ldrb	r2, [r7, #3]
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}

0800bd7a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bd7a:	b480      	push	{r7}
 800bd7c:	b083      	sub	sp, #12
 800bd7e:	af00      	add	r7, sp, #0
 800bd80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bd82:	2300      	movs	r3, #0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	370c      	adds	r7, #12
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8e:	4770      	bx	lr

0800bd90 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b084      	sub	sp, #16
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2201      	movs	r2, #1
 800bda0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d00e      	beq.n	800bdcc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	687a      	ldr	r2, [r7, #4]
 800bdb8:	6852      	ldr	r2, [r2, #4]
 800bdba:	b2d2      	uxtb	r2, r2
 800bdbc:	4611      	mov	r1, r2
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	4798      	blx	r3
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d001      	beq.n	800bdcc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bdc8:	2303      	movs	r3, #3
 800bdca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bdcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdce:	4618      	mov	r0, r3
 800bdd0:	3710      	adds	r7, #16
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}

0800bdd6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bdd6:	b480      	push	{r7}
 800bdd8:	b083      	sub	sp, #12
 800bdda:	af00      	add	r7, sp, #0
 800bddc:	6078      	str	r0, [r7, #4]
 800bdde:	460b      	mov	r3, r1
 800bde0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bde2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	370c      	adds	r7, #12
 800bde8:	46bd      	mov	sp, r7
 800bdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdee:	4770      	bx	lr

0800bdf0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
 800bdf8:	460b      	mov	r3, r1
 800bdfa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bdfc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	370c      	adds	r7, #12
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr

0800be0a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b086      	sub	sp, #24
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	460b      	mov	r3, r1
 800be14:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800be1e:	2300      	movs	r3, #0
 800be20:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	885b      	ldrh	r3, [r3, #2]
 800be26:	b29a      	uxth	r2, r3
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	429a      	cmp	r2, r3
 800be30:	d920      	bls.n	800be74 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	b29b      	uxth	r3, r3
 800be38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800be3a:	e013      	b.n	800be64 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800be3c:	f107 030a 	add.w	r3, r7, #10
 800be40:	4619      	mov	r1, r3
 800be42:	6978      	ldr	r0, [r7, #20]
 800be44:	f000 f81b 	bl	800be7e <USBD_GetNextDesc>
 800be48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800be4a:	697b      	ldr	r3, [r7, #20]
 800be4c:	785b      	ldrb	r3, [r3, #1]
 800be4e:	2b05      	cmp	r3, #5
 800be50:	d108      	bne.n	800be64 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	789b      	ldrb	r3, [r3, #2]
 800be5a:	78fa      	ldrb	r2, [r7, #3]
 800be5c:	429a      	cmp	r2, r3
 800be5e:	d008      	beq.n	800be72 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800be60:	2300      	movs	r3, #0
 800be62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	885b      	ldrh	r3, [r3, #2]
 800be68:	b29a      	uxth	r2, r3
 800be6a:	897b      	ldrh	r3, [r7, #10]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d8e5      	bhi.n	800be3c <USBD_GetEpDesc+0x32>
 800be70:	e000      	b.n	800be74 <USBD_GetEpDesc+0x6a>
          break;
 800be72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800be74:	693b      	ldr	r3, [r7, #16]
}
 800be76:	4618      	mov	r0, r3
 800be78:	3718      	adds	r7, #24
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800be7e:	b480      	push	{r7}
 800be80:	b085      	sub	sp, #20
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800be8c:	683b      	ldr	r3, [r7, #0]
 800be8e:	881a      	ldrh	r2, [r3, #0]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	b29b      	uxth	r3, r3
 800be96:	4413      	add	r3, r2
 800be98:	b29a      	uxth	r2, r3
 800be9a:	683b      	ldr	r3, [r7, #0]
 800be9c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	461a      	mov	r2, r3
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4413      	add	r3, r2
 800bea8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800beaa:	68fb      	ldr	r3, [r7, #12]
}
 800beac:	4618      	mov	r0, r3
 800beae:	3714      	adds	r7, #20
 800beb0:	46bd      	mov	sp, r7
 800beb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb6:	4770      	bx	lr

0800beb8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800beb8:	b480      	push	{r7}
 800beba:	b087      	sub	sp, #28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800beca:	697b      	ldr	r3, [r7, #20]
 800becc:	3301      	adds	r3, #1
 800bece:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bed6:	8a3b      	ldrh	r3, [r7, #16]
 800bed8:	021b      	lsls	r3, r3, #8
 800beda:	b21a      	sxth	r2, r3
 800bedc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	b21b      	sxth	r3, r3
 800bee4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bee6:	89fb      	ldrh	r3, [r7, #14]
}
 800bee8:	4618      	mov	r0, r3
 800beea:	371c      	adds	r7, #28
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr

0800bef4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800befe:	2300      	movs	r3, #0
 800bf00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bf0a:	2b40      	cmp	r3, #64	; 0x40
 800bf0c:	d005      	beq.n	800bf1a <USBD_StdDevReq+0x26>
 800bf0e:	2b40      	cmp	r3, #64	; 0x40
 800bf10:	d857      	bhi.n	800bfc2 <USBD_StdDevReq+0xce>
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d00f      	beq.n	800bf36 <USBD_StdDevReq+0x42>
 800bf16:	2b20      	cmp	r3, #32
 800bf18:	d153      	bne.n	800bfc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	32ae      	adds	r2, #174	; 0xae
 800bf24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	6839      	ldr	r1, [r7, #0]
 800bf2c:	6878      	ldr	r0, [r7, #4]
 800bf2e:	4798      	blx	r3
 800bf30:	4603      	mov	r3, r0
 800bf32:	73fb      	strb	r3, [r7, #15]
      break;
 800bf34:	e04a      	b.n	800bfcc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	785b      	ldrb	r3, [r3, #1]
 800bf3a:	2b09      	cmp	r3, #9
 800bf3c:	d83b      	bhi.n	800bfb6 <USBD_StdDevReq+0xc2>
 800bf3e:	a201      	add	r2, pc, #4	; (adr r2, 800bf44 <USBD_StdDevReq+0x50>)
 800bf40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf44:	0800bf99 	.word	0x0800bf99
 800bf48:	0800bfad 	.word	0x0800bfad
 800bf4c:	0800bfb7 	.word	0x0800bfb7
 800bf50:	0800bfa3 	.word	0x0800bfa3
 800bf54:	0800bfb7 	.word	0x0800bfb7
 800bf58:	0800bf77 	.word	0x0800bf77
 800bf5c:	0800bf6d 	.word	0x0800bf6d
 800bf60:	0800bfb7 	.word	0x0800bfb7
 800bf64:	0800bf8f 	.word	0x0800bf8f
 800bf68:	0800bf81 	.word	0x0800bf81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f000 fa3c 	bl	800c3ec <USBD_GetDescriptor>
          break;
 800bf74:	e024      	b.n	800bfc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bf76:	6839      	ldr	r1, [r7, #0]
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fba1 	bl	800c6c0 <USBD_SetAddress>
          break;
 800bf7e:	e01f      	b.n	800bfc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bf80:	6839      	ldr	r1, [r7, #0]
 800bf82:	6878      	ldr	r0, [r7, #4]
 800bf84:	f000 fbe0 	bl	800c748 <USBD_SetConfig>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	73fb      	strb	r3, [r7, #15]
          break;
 800bf8c:	e018      	b.n	800bfc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bf8e:	6839      	ldr	r1, [r7, #0]
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f000 fc83 	bl	800c89c <USBD_GetConfig>
          break;
 800bf96:	e013      	b.n	800bfc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bf98:	6839      	ldr	r1, [r7, #0]
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 fcb4 	bl	800c908 <USBD_GetStatus>
          break;
 800bfa0:	e00e      	b.n	800bfc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 fce3 	bl	800c970 <USBD_SetFeature>
          break;
 800bfaa:	e009      	b.n	800bfc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bfac:	6839      	ldr	r1, [r7, #0]
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f000 fd07 	bl	800c9c2 <USBD_ClrFeature>
          break;
 800bfb4:	e004      	b.n	800bfc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bfb6:	6839      	ldr	r1, [r7, #0]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fd5e 	bl	800ca7a <USBD_CtlError>
          break;
 800bfbe:	bf00      	nop
      }
      break;
 800bfc0:	e004      	b.n	800bfcc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fd58 	bl	800ca7a <USBD_CtlError>
      break;
 800bfca:	bf00      	nop
  }

  return ret;
 800bfcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3710      	adds	r7, #16
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop

0800bfd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b084      	sub	sp, #16
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	781b      	ldrb	r3, [r3, #0]
 800bfea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bfee:	2b40      	cmp	r3, #64	; 0x40
 800bff0:	d005      	beq.n	800bffe <USBD_StdItfReq+0x26>
 800bff2:	2b40      	cmp	r3, #64	; 0x40
 800bff4:	d852      	bhi.n	800c09c <USBD_StdItfReq+0xc4>
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d001      	beq.n	800bffe <USBD_StdItfReq+0x26>
 800bffa:	2b20      	cmp	r3, #32
 800bffc:	d14e      	bne.n	800c09c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c004:	b2db      	uxtb	r3, r3
 800c006:	3b01      	subs	r3, #1
 800c008:	2b02      	cmp	r3, #2
 800c00a:	d840      	bhi.n	800c08e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	889b      	ldrh	r3, [r3, #4]
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b01      	cmp	r3, #1
 800c014:	d836      	bhi.n	800c084 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	889b      	ldrh	r3, [r3, #4]
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	4619      	mov	r1, r3
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f7ff fed9 	bl	800bdd6 <USBD_CoreFindIF>
 800c024:	4603      	mov	r3, r0
 800c026:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c028:	7bbb      	ldrb	r3, [r7, #14]
 800c02a:	2bff      	cmp	r3, #255	; 0xff
 800c02c:	d01d      	beq.n	800c06a <USBD_StdItfReq+0x92>
 800c02e:	7bbb      	ldrb	r3, [r7, #14]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d11a      	bne.n	800c06a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c034:	7bba      	ldrb	r2, [r7, #14]
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	32ae      	adds	r2, #174	; 0xae
 800c03a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c03e:	689b      	ldr	r3, [r3, #8]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d00f      	beq.n	800c064 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c044:	7bba      	ldrb	r2, [r7, #14]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c04c:	7bba      	ldrb	r2, [r7, #14]
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	32ae      	adds	r2, #174	; 0xae
 800c052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	6839      	ldr	r1, [r7, #0]
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	4798      	blx	r3
 800c05e:	4603      	mov	r3, r0
 800c060:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c062:	e004      	b.n	800c06e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c064:	2303      	movs	r3, #3
 800c066:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c068:	e001      	b.n	800c06e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c06a:	2303      	movs	r3, #3
 800c06c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	88db      	ldrh	r3, [r3, #6]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d110      	bne.n	800c098 <USBD_StdItfReq+0xc0>
 800c076:	7bfb      	ldrb	r3, [r7, #15]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d10d      	bne.n	800c098 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 fdc7 	bl	800cc10 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c082:	e009      	b.n	800c098 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fcf7 	bl	800ca7a <USBD_CtlError>
          break;
 800c08c:	e004      	b.n	800c098 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c08e:	6839      	ldr	r1, [r7, #0]
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f000 fcf2 	bl	800ca7a <USBD_CtlError>
          break;
 800c096:	e000      	b.n	800c09a <USBD_StdItfReq+0xc2>
          break;
 800c098:	bf00      	nop
      }
      break;
 800c09a:	e004      	b.n	800c0a6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c09c:	6839      	ldr	r1, [r7, #0]
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 fceb 	bl	800ca7a <USBD_CtlError>
      break;
 800c0a4:	bf00      	nop
  }

  return ret;
 800c0a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3710      	adds	r7, #16
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b084      	sub	sp, #16
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	889b      	ldrh	r3, [r3, #4]
 800c0c2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0cc:	2b40      	cmp	r3, #64	; 0x40
 800c0ce:	d007      	beq.n	800c0e0 <USBD_StdEPReq+0x30>
 800c0d0:	2b40      	cmp	r3, #64	; 0x40
 800c0d2:	f200 817f 	bhi.w	800c3d4 <USBD_StdEPReq+0x324>
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d02a      	beq.n	800c130 <USBD_StdEPReq+0x80>
 800c0da:	2b20      	cmp	r3, #32
 800c0dc:	f040 817a 	bne.w	800c3d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c0e0:	7bbb      	ldrb	r3, [r7, #14]
 800c0e2:	4619      	mov	r1, r3
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f7ff fe83 	bl	800bdf0 <USBD_CoreFindEP>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0ee:	7b7b      	ldrb	r3, [r7, #13]
 800c0f0:	2bff      	cmp	r3, #255	; 0xff
 800c0f2:	f000 8174 	beq.w	800c3de <USBD_StdEPReq+0x32e>
 800c0f6:	7b7b      	ldrb	r3, [r7, #13]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	f040 8170 	bne.w	800c3de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c0fe:	7b7a      	ldrb	r2, [r7, #13]
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c106:	7b7a      	ldrb	r2, [r7, #13]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	32ae      	adds	r2, #174	; 0xae
 800c10c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	2b00      	cmp	r3, #0
 800c114:	f000 8163 	beq.w	800c3de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c118:	7b7a      	ldrb	r2, [r7, #13]
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	32ae      	adds	r2, #174	; 0xae
 800c11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	4798      	blx	r3
 800c12a:	4603      	mov	r3, r0
 800c12c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c12e:	e156      	b.n	800c3de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	785b      	ldrb	r3, [r3, #1]
 800c134:	2b03      	cmp	r3, #3
 800c136:	d008      	beq.n	800c14a <USBD_StdEPReq+0x9a>
 800c138:	2b03      	cmp	r3, #3
 800c13a:	f300 8145 	bgt.w	800c3c8 <USBD_StdEPReq+0x318>
 800c13e:	2b00      	cmp	r3, #0
 800c140:	f000 809b 	beq.w	800c27a <USBD_StdEPReq+0x1ca>
 800c144:	2b01      	cmp	r3, #1
 800c146:	d03c      	beq.n	800c1c2 <USBD_StdEPReq+0x112>
 800c148:	e13e      	b.n	800c3c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c150:	b2db      	uxtb	r3, r3
 800c152:	2b02      	cmp	r3, #2
 800c154:	d002      	beq.n	800c15c <USBD_StdEPReq+0xac>
 800c156:	2b03      	cmp	r3, #3
 800c158:	d016      	beq.n	800c188 <USBD_StdEPReq+0xd8>
 800c15a:	e02c      	b.n	800c1b6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c15c:	7bbb      	ldrb	r3, [r7, #14]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d00d      	beq.n	800c17e <USBD_StdEPReq+0xce>
 800c162:	7bbb      	ldrb	r3, [r7, #14]
 800c164:	2b80      	cmp	r3, #128	; 0x80
 800c166:	d00a      	beq.n	800c17e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c168:	7bbb      	ldrb	r3, [r7, #14]
 800c16a:	4619      	mov	r1, r3
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f001 f97b 	bl	800d468 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c172:	2180      	movs	r1, #128	; 0x80
 800c174:	6878      	ldr	r0, [r7, #4]
 800c176:	f001 f977 	bl	800d468 <USBD_LL_StallEP>
 800c17a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c17c:	e020      	b.n	800c1c0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fc7a 	bl	800ca7a <USBD_CtlError>
              break;
 800c186:	e01b      	b.n	800c1c0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	885b      	ldrh	r3, [r3, #2]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d10e      	bne.n	800c1ae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c190:	7bbb      	ldrb	r3, [r7, #14]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d00b      	beq.n	800c1ae <USBD_StdEPReq+0xfe>
 800c196:	7bbb      	ldrb	r3, [r7, #14]
 800c198:	2b80      	cmp	r3, #128	; 0x80
 800c19a:	d008      	beq.n	800c1ae <USBD_StdEPReq+0xfe>
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	88db      	ldrh	r3, [r3, #6]
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d104      	bne.n	800c1ae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1a4:	7bbb      	ldrb	r3, [r7, #14]
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f001 f95d 	bl	800d468 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 fd2e 	bl	800cc10 <USBD_CtlSendStatus>

              break;
 800c1b4:	e004      	b.n	800c1c0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c1b6:	6839      	ldr	r1, [r7, #0]
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 fc5e 	bl	800ca7a <USBD_CtlError>
              break;
 800c1be:	bf00      	nop
          }
          break;
 800c1c0:	e107      	b.n	800c3d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1c8:	b2db      	uxtb	r3, r3
 800c1ca:	2b02      	cmp	r3, #2
 800c1cc:	d002      	beq.n	800c1d4 <USBD_StdEPReq+0x124>
 800c1ce:	2b03      	cmp	r3, #3
 800c1d0:	d016      	beq.n	800c200 <USBD_StdEPReq+0x150>
 800c1d2:	e04b      	b.n	800c26c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c1d4:	7bbb      	ldrb	r3, [r7, #14]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d00d      	beq.n	800c1f6 <USBD_StdEPReq+0x146>
 800c1da:	7bbb      	ldrb	r3, [r7, #14]
 800c1dc:	2b80      	cmp	r3, #128	; 0x80
 800c1de:	d00a      	beq.n	800c1f6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c1e0:	7bbb      	ldrb	r3, [r7, #14]
 800c1e2:	4619      	mov	r1, r3
 800c1e4:	6878      	ldr	r0, [r7, #4]
 800c1e6:	f001 f93f 	bl	800d468 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c1ea:	2180      	movs	r1, #128	; 0x80
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f001 f93b 	bl	800d468 <USBD_LL_StallEP>
 800c1f2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c1f4:	e040      	b.n	800c278 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c1f6:	6839      	ldr	r1, [r7, #0]
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 fc3e 	bl	800ca7a <USBD_CtlError>
              break;
 800c1fe:	e03b      	b.n	800c278 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	885b      	ldrh	r3, [r3, #2]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d136      	bne.n	800c276 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c208:	7bbb      	ldrb	r3, [r7, #14]
 800c20a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d004      	beq.n	800c21c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c212:	7bbb      	ldrb	r3, [r7, #14]
 800c214:	4619      	mov	r1, r3
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f001 f945 	bl	800d4a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 fcf7 	bl	800cc10 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c222:	7bbb      	ldrb	r3, [r7, #14]
 800c224:	4619      	mov	r1, r3
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7ff fde2 	bl	800bdf0 <USBD_CoreFindEP>
 800c22c:	4603      	mov	r3, r0
 800c22e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c230:	7b7b      	ldrb	r3, [r7, #13]
 800c232:	2bff      	cmp	r3, #255	; 0xff
 800c234:	d01f      	beq.n	800c276 <USBD_StdEPReq+0x1c6>
 800c236:	7b7b      	ldrb	r3, [r7, #13]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d11c      	bne.n	800c276 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c23c:	7b7a      	ldrb	r2, [r7, #13]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c244:	7b7a      	ldrb	r2, [r7, #13]
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	32ae      	adds	r2, #174	; 0xae
 800c24a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c24e:	689b      	ldr	r3, [r3, #8]
 800c250:	2b00      	cmp	r3, #0
 800c252:	d010      	beq.n	800c276 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c254:	7b7a      	ldrb	r2, [r7, #13]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	32ae      	adds	r2, #174	; 0xae
 800c25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	6839      	ldr	r1, [r7, #0]
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	4798      	blx	r3
 800c266:	4603      	mov	r3, r0
 800c268:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c26a:	e004      	b.n	800c276 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c26c:	6839      	ldr	r1, [r7, #0]
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 fc03 	bl	800ca7a <USBD_CtlError>
              break;
 800c274:	e000      	b.n	800c278 <USBD_StdEPReq+0x1c8>
              break;
 800c276:	bf00      	nop
          }
          break;
 800c278:	e0ab      	b.n	800c3d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c280:	b2db      	uxtb	r3, r3
 800c282:	2b02      	cmp	r3, #2
 800c284:	d002      	beq.n	800c28c <USBD_StdEPReq+0x1dc>
 800c286:	2b03      	cmp	r3, #3
 800c288:	d032      	beq.n	800c2f0 <USBD_StdEPReq+0x240>
 800c28a:	e097      	b.n	800c3bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c28c:	7bbb      	ldrb	r3, [r7, #14]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d007      	beq.n	800c2a2 <USBD_StdEPReq+0x1f2>
 800c292:	7bbb      	ldrb	r3, [r7, #14]
 800c294:	2b80      	cmp	r3, #128	; 0x80
 800c296:	d004      	beq.n	800c2a2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c298:	6839      	ldr	r1, [r7, #0]
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 fbed 	bl	800ca7a <USBD_CtlError>
                break;
 800c2a0:	e091      	b.n	800c3c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	da0b      	bge.n	800c2c2 <USBD_StdEPReq+0x212>
 800c2aa:	7bbb      	ldrb	r3, [r7, #14]
 800c2ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2b0:	4613      	mov	r3, r2
 800c2b2:	009b      	lsls	r3, r3, #2
 800c2b4:	4413      	add	r3, r2
 800c2b6:	009b      	lsls	r3, r3, #2
 800c2b8:	3310      	adds	r3, #16
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	4413      	add	r3, r2
 800c2be:	3304      	adds	r3, #4
 800c2c0:	e00b      	b.n	800c2da <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c2c2:	7bbb      	ldrb	r3, [r7, #14]
 800c2c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c2c8:	4613      	mov	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	4413      	add	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c2d4:	687a      	ldr	r2, [r7, #4]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	3304      	adds	r3, #4
 800c2da:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c2dc:	68bb      	ldr	r3, [r7, #8]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	2202      	movs	r2, #2
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f000 fc37 	bl	800cb5c <USBD_CtlSendData>
              break;
 800c2ee:	e06a      	b.n	800c3c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c2f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	da11      	bge.n	800c31c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c2f8:	7bbb      	ldrb	r3, [r7, #14]
 800c2fa:	f003 020f 	and.w	r2, r3, #15
 800c2fe:	6879      	ldr	r1, [r7, #4]
 800c300:	4613      	mov	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	4413      	add	r3, r2
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	440b      	add	r3, r1
 800c30a:	3324      	adds	r3, #36	; 0x24
 800c30c:	881b      	ldrh	r3, [r3, #0]
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d117      	bne.n	800c342 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fbb0 	bl	800ca7a <USBD_CtlError>
                  break;
 800c31a:	e054      	b.n	800c3c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c31c:	7bbb      	ldrb	r3, [r7, #14]
 800c31e:	f003 020f 	and.w	r2, r3, #15
 800c322:	6879      	ldr	r1, [r7, #4]
 800c324:	4613      	mov	r3, r2
 800c326:	009b      	lsls	r3, r3, #2
 800c328:	4413      	add	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	440b      	add	r3, r1
 800c32e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c332:	881b      	ldrh	r3, [r3, #0]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d104      	bne.n	800c342 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c338:	6839      	ldr	r1, [r7, #0]
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 fb9d 	bl	800ca7a <USBD_CtlError>
                  break;
 800c340:	e041      	b.n	800c3c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c342:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c346:	2b00      	cmp	r3, #0
 800c348:	da0b      	bge.n	800c362 <USBD_StdEPReq+0x2b2>
 800c34a:	7bbb      	ldrb	r3, [r7, #14]
 800c34c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c350:	4613      	mov	r3, r2
 800c352:	009b      	lsls	r3, r3, #2
 800c354:	4413      	add	r3, r2
 800c356:	009b      	lsls	r3, r3, #2
 800c358:	3310      	adds	r3, #16
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	4413      	add	r3, r2
 800c35e:	3304      	adds	r3, #4
 800c360:	e00b      	b.n	800c37a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c362:	7bbb      	ldrb	r3, [r7, #14]
 800c364:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c368:	4613      	mov	r3, r2
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c374:	687a      	ldr	r2, [r7, #4]
 800c376:	4413      	add	r3, r2
 800c378:	3304      	adds	r3, #4
 800c37a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c37c:	7bbb      	ldrb	r3, [r7, #14]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d002      	beq.n	800c388 <USBD_StdEPReq+0x2d8>
 800c382:	7bbb      	ldrb	r3, [r7, #14]
 800c384:	2b80      	cmp	r3, #128	; 0x80
 800c386:	d103      	bne.n	800c390 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	2200      	movs	r2, #0
 800c38c:	601a      	str	r2, [r3, #0]
 800c38e:	e00e      	b.n	800c3ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c390:	7bbb      	ldrb	r3, [r7, #14]
 800c392:	4619      	mov	r1, r3
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	f001 f8a5 	bl	800d4e4 <USBD_LL_IsStallEP>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d003      	beq.n	800c3a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	601a      	str	r2, [r3, #0]
 800c3a6:	e002      	b.n	800c3ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c3ae:	68bb      	ldr	r3, [r7, #8]
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fbd1 	bl	800cb5c <USBD_CtlSendData>
              break;
 800c3ba:	e004      	b.n	800c3c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fb5b 	bl	800ca7a <USBD_CtlError>
              break;
 800c3c4:	bf00      	nop
          }
          break;
 800c3c6:	e004      	b.n	800c3d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c3c8:	6839      	ldr	r1, [r7, #0]
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f000 fb55 	bl	800ca7a <USBD_CtlError>
          break;
 800c3d0:	bf00      	nop
      }
      break;
 800c3d2:	e005      	b.n	800c3e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c3d4:	6839      	ldr	r1, [r7, #0]
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 fb4f 	bl	800ca7a <USBD_CtlError>
      break;
 800c3dc:	e000      	b.n	800c3e0 <USBD_StdEPReq+0x330>
      break;
 800c3de:	bf00      	nop
  }

  return ret;
 800c3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c3fe:	2300      	movs	r3, #0
 800c400:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	885b      	ldrh	r3, [r3, #2]
 800c406:	0a1b      	lsrs	r3, r3, #8
 800c408:	b29b      	uxth	r3, r3
 800c40a:	3b01      	subs	r3, #1
 800c40c:	2b06      	cmp	r3, #6
 800c40e:	f200 8128 	bhi.w	800c662 <USBD_GetDescriptor+0x276>
 800c412:	a201      	add	r2, pc, #4	; (adr r2, 800c418 <USBD_GetDescriptor+0x2c>)
 800c414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c418:	0800c435 	.word	0x0800c435
 800c41c:	0800c44d 	.word	0x0800c44d
 800c420:	0800c48d 	.word	0x0800c48d
 800c424:	0800c663 	.word	0x0800c663
 800c428:	0800c663 	.word	0x0800c663
 800c42c:	0800c603 	.word	0x0800c603
 800c430:	0800c62f 	.word	0x0800c62f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	7c12      	ldrb	r2, [r2, #16]
 800c440:	f107 0108 	add.w	r1, r7, #8
 800c444:	4610      	mov	r0, r2
 800c446:	4798      	blx	r3
 800c448:	60f8      	str	r0, [r7, #12]
      break;
 800c44a:	e112      	b.n	800c672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	7c1b      	ldrb	r3, [r3, #16]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d10d      	bne.n	800c470 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c45c:	f107 0208 	add.w	r2, r7, #8
 800c460:	4610      	mov	r0, r2
 800c462:	4798      	blx	r3
 800c464:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	3301      	adds	r3, #1
 800c46a:	2202      	movs	r2, #2
 800c46c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c46e:	e100      	b.n	800c672 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c478:	f107 0208 	add.w	r2, r7, #8
 800c47c:	4610      	mov	r0, r2
 800c47e:	4798      	blx	r3
 800c480:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	3301      	adds	r3, #1
 800c486:	2202      	movs	r2, #2
 800c488:	701a      	strb	r2, [r3, #0]
      break;
 800c48a:	e0f2      	b.n	800c672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	885b      	ldrh	r3, [r3, #2]
 800c490:	b2db      	uxtb	r3, r3
 800c492:	2b05      	cmp	r3, #5
 800c494:	f200 80ac 	bhi.w	800c5f0 <USBD_GetDescriptor+0x204>
 800c498:	a201      	add	r2, pc, #4	; (adr r2, 800c4a0 <USBD_GetDescriptor+0xb4>)
 800c49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c49e:	bf00      	nop
 800c4a0:	0800c4b9 	.word	0x0800c4b9
 800c4a4:	0800c4ed 	.word	0x0800c4ed
 800c4a8:	0800c521 	.word	0x0800c521
 800c4ac:	0800c555 	.word	0x0800c555
 800c4b0:	0800c589 	.word	0x0800c589
 800c4b4:	0800c5bd 	.word	0x0800c5bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4be:	685b      	ldr	r3, [r3, #4]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00b      	beq.n	800c4dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	7c12      	ldrb	r2, [r2, #16]
 800c4d0:	f107 0108 	add.w	r1, r7, #8
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	4798      	blx	r3
 800c4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c4da:	e091      	b.n	800c600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c4dc:	6839      	ldr	r1, [r7, #0]
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 facb 	bl	800ca7a <USBD_CtlError>
            err++;
 800c4e4:	7afb      	ldrb	r3, [r7, #11]
 800c4e6:	3301      	adds	r3, #1
 800c4e8:	72fb      	strb	r3, [r7, #11]
          break;
 800c4ea:	e089      	b.n	800c600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00b      	beq.n	800c510 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c4fe:	689b      	ldr	r3, [r3, #8]
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	7c12      	ldrb	r2, [r2, #16]
 800c504:	f107 0108 	add.w	r1, r7, #8
 800c508:	4610      	mov	r0, r2
 800c50a:	4798      	blx	r3
 800c50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c50e:	e077      	b.n	800c600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c510:	6839      	ldr	r1, [r7, #0]
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f000 fab1 	bl	800ca7a <USBD_CtlError>
            err++;
 800c518:	7afb      	ldrb	r3, [r7, #11]
 800c51a:	3301      	adds	r3, #1
 800c51c:	72fb      	strb	r3, [r7, #11]
          break;
 800c51e:	e06f      	b.n	800c600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c526:	68db      	ldr	r3, [r3, #12]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d00b      	beq.n	800c544 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c532:	68db      	ldr	r3, [r3, #12]
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	7c12      	ldrb	r2, [r2, #16]
 800c538:	f107 0108 	add.w	r1, r7, #8
 800c53c:	4610      	mov	r0, r2
 800c53e:	4798      	blx	r3
 800c540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c542:	e05d      	b.n	800c600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c544:	6839      	ldr	r1, [r7, #0]
 800c546:	6878      	ldr	r0, [r7, #4]
 800c548:	f000 fa97 	bl	800ca7a <USBD_CtlError>
            err++;
 800c54c:	7afb      	ldrb	r3, [r7, #11]
 800c54e:	3301      	adds	r3, #1
 800c550:	72fb      	strb	r3, [r7, #11]
          break;
 800c552:	e055      	b.n	800c600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c55a:	691b      	ldr	r3, [r3, #16]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00b      	beq.n	800c578 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c566:	691b      	ldr	r3, [r3, #16]
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	7c12      	ldrb	r2, [r2, #16]
 800c56c:	f107 0108 	add.w	r1, r7, #8
 800c570:	4610      	mov	r0, r2
 800c572:	4798      	blx	r3
 800c574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c576:	e043      	b.n	800c600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c578:	6839      	ldr	r1, [r7, #0]
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 fa7d 	bl	800ca7a <USBD_CtlError>
            err++;
 800c580:	7afb      	ldrb	r3, [r7, #11]
 800c582:	3301      	adds	r3, #1
 800c584:	72fb      	strb	r3, [r7, #11]
          break;
 800c586:	e03b      	b.n	800c600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c58e:	695b      	ldr	r3, [r3, #20]
 800c590:	2b00      	cmp	r3, #0
 800c592:	d00b      	beq.n	800c5ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c59a:	695b      	ldr	r3, [r3, #20]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	7c12      	ldrb	r2, [r2, #16]
 800c5a0:	f107 0108 	add.w	r1, r7, #8
 800c5a4:	4610      	mov	r0, r2
 800c5a6:	4798      	blx	r3
 800c5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5aa:	e029      	b.n	800c600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fa63 	bl	800ca7a <USBD_CtlError>
            err++;
 800c5b4:	7afb      	ldrb	r3, [r7, #11]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ba:	e021      	b.n	800c600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5c2:	699b      	ldr	r3, [r3, #24]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d00b      	beq.n	800c5e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	687a      	ldr	r2, [r7, #4]
 800c5d2:	7c12      	ldrb	r2, [r2, #16]
 800c5d4:	f107 0108 	add.w	r1, r7, #8
 800c5d8:	4610      	mov	r0, r2
 800c5da:	4798      	blx	r3
 800c5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c5de:	e00f      	b.n	800c600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 fa49 	bl	800ca7a <USBD_CtlError>
            err++;
 800c5e8:	7afb      	ldrb	r3, [r7, #11]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	72fb      	strb	r3, [r7, #11]
          break;
 800c5ee:	e007      	b.n	800c600 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c5f0:	6839      	ldr	r1, [r7, #0]
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fa41 	bl	800ca7a <USBD_CtlError>
          err++;
 800c5f8:	7afb      	ldrb	r3, [r7, #11]
 800c5fa:	3301      	adds	r3, #1
 800c5fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c5fe:	bf00      	nop
      }
      break;
 800c600:	e037      	b.n	800c672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	7c1b      	ldrb	r3, [r3, #16]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d109      	bne.n	800c61e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c612:	f107 0208 	add.w	r2, r7, #8
 800c616:	4610      	mov	r0, r2
 800c618:	4798      	blx	r3
 800c61a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c61c:	e029      	b.n	800c672 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c61e:	6839      	ldr	r1, [r7, #0]
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 fa2a 	bl	800ca7a <USBD_CtlError>
        err++;
 800c626:	7afb      	ldrb	r3, [r7, #11]
 800c628:	3301      	adds	r3, #1
 800c62a:	72fb      	strb	r3, [r7, #11]
      break;
 800c62c:	e021      	b.n	800c672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	7c1b      	ldrb	r3, [r3, #16]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d10d      	bne.n	800c652 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c63e:	f107 0208 	add.w	r2, r7, #8
 800c642:	4610      	mov	r0, r2
 800c644:	4798      	blx	r3
 800c646:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	3301      	adds	r3, #1
 800c64c:	2207      	movs	r2, #7
 800c64e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c650:	e00f      	b.n	800c672 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c652:	6839      	ldr	r1, [r7, #0]
 800c654:	6878      	ldr	r0, [r7, #4]
 800c656:	f000 fa10 	bl	800ca7a <USBD_CtlError>
        err++;
 800c65a:	7afb      	ldrb	r3, [r7, #11]
 800c65c:	3301      	adds	r3, #1
 800c65e:	72fb      	strb	r3, [r7, #11]
      break;
 800c660:	e007      	b.n	800c672 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c662:	6839      	ldr	r1, [r7, #0]
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f000 fa08 	bl	800ca7a <USBD_CtlError>
      err++;
 800c66a:	7afb      	ldrb	r3, [r7, #11]
 800c66c:	3301      	adds	r3, #1
 800c66e:	72fb      	strb	r3, [r7, #11]
      break;
 800c670:	bf00      	nop
  }

  if (err != 0U)
 800c672:	7afb      	ldrb	r3, [r7, #11]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d11e      	bne.n	800c6b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	88db      	ldrh	r3, [r3, #6]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d016      	beq.n	800c6ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c680:	893b      	ldrh	r3, [r7, #8]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d00e      	beq.n	800c6a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c686:	683b      	ldr	r3, [r7, #0]
 800c688:	88da      	ldrh	r2, [r3, #6]
 800c68a:	893b      	ldrh	r3, [r7, #8]
 800c68c:	4293      	cmp	r3, r2
 800c68e:	bf28      	it	cs
 800c690:	4613      	movcs	r3, r2
 800c692:	b29b      	uxth	r3, r3
 800c694:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c696:	893b      	ldrh	r3, [r7, #8]
 800c698:	461a      	mov	r2, r3
 800c69a:	68f9      	ldr	r1, [r7, #12]
 800c69c:	6878      	ldr	r0, [r7, #4]
 800c69e:	f000 fa5d 	bl	800cb5c <USBD_CtlSendData>
 800c6a2:	e009      	b.n	800c6b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c6a4:	6839      	ldr	r1, [r7, #0]
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f000 f9e7 	bl	800ca7a <USBD_CtlError>
 800c6ac:	e004      	b.n	800c6b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 faae 	bl	800cc10 <USBD_CtlSendStatus>
 800c6b4:	e000      	b.n	800c6b8 <USBD_GetDescriptor+0x2cc>
    return;
 800c6b6:	bf00      	nop
  }
}
 800c6b8:	3710      	adds	r7, #16
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd80      	pop	{r7, pc}
 800c6be:	bf00      	nop

0800c6c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c6ca:	683b      	ldr	r3, [r7, #0]
 800c6cc:	889b      	ldrh	r3, [r3, #4]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d131      	bne.n	800c736 <USBD_SetAddress+0x76>
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	88db      	ldrh	r3, [r3, #6]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d12d      	bne.n	800c736 <USBD_SetAddress+0x76>
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	885b      	ldrh	r3, [r3, #2]
 800c6de:	2b7f      	cmp	r3, #127	; 0x7f
 800c6e0:	d829      	bhi.n	800c736 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	885b      	ldrh	r3, [r3, #2]
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6f4:	b2db      	uxtb	r3, r3
 800c6f6:	2b03      	cmp	r3, #3
 800c6f8:	d104      	bne.n	800c704 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c6fa:	6839      	ldr	r1, [r7, #0]
 800c6fc:	6878      	ldr	r0, [r7, #4]
 800c6fe:	f000 f9bc 	bl	800ca7a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c702:	e01d      	b.n	800c740 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	7bfa      	ldrb	r2, [r7, #15]
 800c708:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c70c:	7bfb      	ldrb	r3, [r7, #15]
 800c70e:	4619      	mov	r1, r3
 800c710:	6878      	ldr	r0, [r7, #4]
 800c712:	f000 ff13 	bl	800d53c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 fa7a 	bl	800cc10 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d004      	beq.n	800c72c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2202      	movs	r2, #2
 800c726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c72a:	e009      	b.n	800c740 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c734:	e004      	b.n	800c740 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c736:	6839      	ldr	r1, [r7, #0]
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f000 f99e 	bl	800ca7a <USBD_CtlError>
  }
}
 800c73e:	bf00      	nop
 800c740:	bf00      	nop
 800c742:	3710      	adds	r7, #16
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c752:	2300      	movs	r3, #0
 800c754:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	885b      	ldrh	r3, [r3, #2]
 800c75a:	b2da      	uxtb	r2, r3
 800c75c:	4b4e      	ldr	r3, [pc, #312]	; (800c898 <USBD_SetConfig+0x150>)
 800c75e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c760:	4b4d      	ldr	r3, [pc, #308]	; (800c898 <USBD_SetConfig+0x150>)
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	2b01      	cmp	r3, #1
 800c766:	d905      	bls.n	800c774 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c768:	6839      	ldr	r1, [r7, #0]
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 f985 	bl	800ca7a <USBD_CtlError>
    return USBD_FAIL;
 800c770:	2303      	movs	r3, #3
 800c772:	e08c      	b.n	800c88e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c77a:	b2db      	uxtb	r3, r3
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d002      	beq.n	800c786 <USBD_SetConfig+0x3e>
 800c780:	2b03      	cmp	r3, #3
 800c782:	d029      	beq.n	800c7d8 <USBD_SetConfig+0x90>
 800c784:	e075      	b.n	800c872 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c786:	4b44      	ldr	r3, [pc, #272]	; (800c898 <USBD_SetConfig+0x150>)
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d020      	beq.n	800c7d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c78e:	4b42      	ldr	r3, [pc, #264]	; (800c898 <USBD_SetConfig+0x150>)
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	461a      	mov	r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c798:	4b3f      	ldr	r3, [pc, #252]	; (800c898 <USBD_SetConfig+0x150>)
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	4619      	mov	r1, r3
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f7fe ffe7 	bl	800b772 <USBD_SetClassConfig>
 800c7a4:	4603      	mov	r3, r0
 800c7a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c7a8:	7bfb      	ldrb	r3, [r7, #15]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d008      	beq.n	800c7c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c7ae:	6839      	ldr	r1, [r7, #0]
 800c7b0:	6878      	ldr	r0, [r7, #4]
 800c7b2:	f000 f962 	bl	800ca7a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2202      	movs	r2, #2
 800c7ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c7be:	e065      	b.n	800c88c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c7c0:	6878      	ldr	r0, [r7, #4]
 800c7c2:	f000 fa25 	bl	800cc10 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2203      	movs	r2, #3
 800c7ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c7ce:	e05d      	b.n	800c88c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 fa1d 	bl	800cc10 <USBD_CtlSendStatus>
      break;
 800c7d6:	e059      	b.n	800c88c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c7d8:	4b2f      	ldr	r3, [pc, #188]	; (800c898 <USBD_SetConfig+0x150>)
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d112      	bne.n	800c806 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2202      	movs	r2, #2
 800c7e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c7e8:	4b2b      	ldr	r3, [pc, #172]	; (800c898 <USBD_SetConfig+0x150>)
 800c7ea:	781b      	ldrb	r3, [r3, #0]
 800c7ec:	461a      	mov	r2, r3
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c7f2:	4b29      	ldr	r3, [pc, #164]	; (800c898 <USBD_SetConfig+0x150>)
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	4619      	mov	r1, r3
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f7fe ffd6 	bl	800b7aa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 fa06 	bl	800cc10 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c804:	e042      	b.n	800c88c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c806:	4b24      	ldr	r3, [pc, #144]	; (800c898 <USBD_SetConfig+0x150>)
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	461a      	mov	r2, r3
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	685b      	ldr	r3, [r3, #4]
 800c810:	429a      	cmp	r2, r3
 800c812:	d02a      	beq.n	800c86a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	4619      	mov	r1, r3
 800c81c:	6878      	ldr	r0, [r7, #4]
 800c81e:	f7fe ffc4 	bl	800b7aa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c822:	4b1d      	ldr	r3, [pc, #116]	; (800c898 <USBD_SetConfig+0x150>)
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	461a      	mov	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c82c:	4b1a      	ldr	r3, [pc, #104]	; (800c898 <USBD_SetConfig+0x150>)
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	4619      	mov	r1, r3
 800c832:	6878      	ldr	r0, [r7, #4]
 800c834:	f7fe ff9d 	bl	800b772 <USBD_SetClassConfig>
 800c838:	4603      	mov	r3, r0
 800c83a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c83c:	7bfb      	ldrb	r3, [r7, #15]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d00f      	beq.n	800c862 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c842:	6839      	ldr	r1, [r7, #0]
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 f918 	bl	800ca7a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7fe ffa9 	bl	800b7aa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2202      	movs	r2, #2
 800c85c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c860:	e014      	b.n	800c88c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f9d4 	bl	800cc10 <USBD_CtlSendStatus>
      break;
 800c868:	e010      	b.n	800c88c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f9d0 	bl	800cc10 <USBD_CtlSendStatus>
      break;
 800c870:	e00c      	b.n	800c88c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c872:	6839      	ldr	r1, [r7, #0]
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f000 f900 	bl	800ca7a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c87a:	4b07      	ldr	r3, [pc, #28]	; (800c898 <USBD_SetConfig+0x150>)
 800c87c:	781b      	ldrb	r3, [r3, #0]
 800c87e:	4619      	mov	r1, r3
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f7fe ff92 	bl	800b7aa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c886:	2303      	movs	r3, #3
 800c888:	73fb      	strb	r3, [r7, #15]
      break;
 800c88a:	bf00      	nop
  }

  return ret;
 800c88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3710      	adds	r7, #16
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
 800c896:	bf00      	nop
 800c898:	2000430c 	.word	0x2000430c

0800c89c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	88db      	ldrh	r3, [r3, #6]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d004      	beq.n	800c8b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c8ae:	6839      	ldr	r1, [r7, #0]
 800c8b0:	6878      	ldr	r0, [r7, #4]
 800c8b2:	f000 f8e2 	bl	800ca7a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c8b6:	e023      	b.n	800c900 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8be:	b2db      	uxtb	r3, r3
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	dc02      	bgt.n	800c8ca <USBD_GetConfig+0x2e>
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	dc03      	bgt.n	800c8d0 <USBD_GetConfig+0x34>
 800c8c8:	e015      	b.n	800c8f6 <USBD_GetConfig+0x5a>
 800c8ca:	2b03      	cmp	r3, #3
 800c8cc:	d00b      	beq.n	800c8e6 <USBD_GetConfig+0x4a>
 800c8ce:	e012      	b.n	800c8f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	3308      	adds	r3, #8
 800c8da:	2201      	movs	r2, #1
 800c8dc:	4619      	mov	r1, r3
 800c8de:	6878      	ldr	r0, [r7, #4]
 800c8e0:	f000 f93c 	bl	800cb5c <USBD_CtlSendData>
        break;
 800c8e4:	e00c      	b.n	800c900 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	3304      	adds	r3, #4
 800c8ea:	2201      	movs	r2, #1
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f000 f934 	bl	800cb5c <USBD_CtlSendData>
        break;
 800c8f4:	e004      	b.n	800c900 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c8f6:	6839      	ldr	r1, [r7, #0]
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f8be 	bl	800ca7a <USBD_CtlError>
        break;
 800c8fe:	bf00      	nop
}
 800c900:	bf00      	nop
 800c902:	3708      	adds	r7, #8
 800c904:	46bd      	mov	sp, r7
 800c906:	bd80      	pop	{r7, pc}

0800c908 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c918:	b2db      	uxtb	r3, r3
 800c91a:	3b01      	subs	r3, #1
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d81e      	bhi.n	800c95e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c920:	683b      	ldr	r3, [r7, #0]
 800c922:	88db      	ldrh	r3, [r3, #6]
 800c924:	2b02      	cmp	r3, #2
 800c926:	d004      	beq.n	800c932 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c928:	6839      	ldr	r1, [r7, #0]
 800c92a:	6878      	ldr	r0, [r7, #4]
 800c92c:	f000 f8a5 	bl	800ca7a <USBD_CtlError>
        break;
 800c930:	e01a      	b.n	800c968 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	2201      	movs	r2, #1
 800c936:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d005      	beq.n	800c94e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	68db      	ldr	r3, [r3, #12]
 800c946:	f043 0202 	orr.w	r2, r3, #2
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	330c      	adds	r3, #12
 800c952:	2202      	movs	r2, #2
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 f900 	bl	800cb5c <USBD_CtlSendData>
      break;
 800c95c:	e004      	b.n	800c968 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c95e:	6839      	ldr	r1, [r7, #0]
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 f88a 	bl	800ca7a <USBD_CtlError>
      break;
 800c966:	bf00      	nop
  }
}
 800c968:	bf00      	nop
 800c96a:	3708      	adds	r7, #8
 800c96c:	46bd      	mov	sp, r7
 800c96e:	bd80      	pop	{r7, pc}

0800c970 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	885b      	ldrh	r3, [r3, #2]
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d107      	bne.n	800c992 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2201      	movs	r2, #1
 800c986:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f000 f940 	bl	800cc10 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c990:	e013      	b.n	800c9ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	885b      	ldrh	r3, [r3, #2]
 800c996:	2b02      	cmp	r3, #2
 800c998:	d10b      	bne.n	800c9b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	889b      	ldrh	r3, [r3, #4]
 800c99e:	0a1b      	lsrs	r3, r3, #8
 800c9a0:	b29b      	uxth	r3, r3
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	f000 f930 	bl	800cc10 <USBD_CtlSendStatus>
}
 800c9b0:	e003      	b.n	800c9ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c9b2:	6839      	ldr	r1, [r7, #0]
 800c9b4:	6878      	ldr	r0, [r7, #4]
 800c9b6:	f000 f860 	bl	800ca7a <USBD_CtlError>
}
 800c9ba:	bf00      	nop
 800c9bc:	3708      	adds	r7, #8
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}

0800c9c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9c2:	b580      	push	{r7, lr}
 800c9c4:	b082      	sub	sp, #8
 800c9c6:	af00      	add	r7, sp, #0
 800c9c8:	6078      	str	r0, [r7, #4]
 800c9ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9d2:	b2db      	uxtb	r3, r3
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	2b02      	cmp	r3, #2
 800c9d8:	d80b      	bhi.n	800c9f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c9da:	683b      	ldr	r3, [r7, #0]
 800c9dc:	885b      	ldrh	r3, [r3, #2]
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d10c      	bne.n	800c9fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f000 f910 	bl	800cc10 <USBD_CtlSendStatus>
      }
      break;
 800c9f0:	e004      	b.n	800c9fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f840 	bl	800ca7a <USBD_CtlError>
      break;
 800c9fa:	e000      	b.n	800c9fe <USBD_ClrFeature+0x3c>
      break;
 800c9fc:	bf00      	nop
  }
}
 800c9fe:	bf00      	nop
 800ca00:	3708      	adds	r7, #8
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}

0800ca06 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ca06:	b580      	push	{r7, lr}
 800ca08:	b084      	sub	sp, #16
 800ca0a:	af00      	add	r7, sp, #0
 800ca0c:	6078      	str	r0, [r7, #4]
 800ca0e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	781a      	ldrb	r2, [r3, #0]
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	3301      	adds	r3, #1
 800ca20:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	781a      	ldrb	r2, [r3, #0]
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ca30:	68f8      	ldr	r0, [r7, #12]
 800ca32:	f7ff fa41 	bl	800beb8 <SWAPBYTE>
 800ca36:	4603      	mov	r3, r0
 800ca38:	461a      	mov	r2, r3
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	3301      	adds	r3, #1
 800ca42:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	3301      	adds	r3, #1
 800ca48:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ca4a:	68f8      	ldr	r0, [r7, #12]
 800ca4c:	f7ff fa34 	bl	800beb8 <SWAPBYTE>
 800ca50:	4603      	mov	r3, r0
 800ca52:	461a      	mov	r2, r3
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3301      	adds	r3, #1
 800ca62:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ca64:	68f8      	ldr	r0, [r7, #12]
 800ca66:	f7ff fa27 	bl	800beb8 <SWAPBYTE>
 800ca6a:	4603      	mov	r3, r0
 800ca6c:	461a      	mov	r2, r3
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	80da      	strh	r2, [r3, #6]
}
 800ca72:	bf00      	nop
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b082      	sub	sp, #8
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca84:	2180      	movs	r1, #128	; 0x80
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f000 fcee 	bl	800d468 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ca8c:	2100      	movs	r1, #0
 800ca8e:	6878      	ldr	r0, [r7, #4]
 800ca90:	f000 fcea 	bl	800d468 <USBD_LL_StallEP>
}
 800ca94:	bf00      	nop
 800ca96:	3708      	adds	r7, #8
 800ca98:	46bd      	mov	sp, r7
 800ca9a:	bd80      	pop	{r7, pc}

0800ca9c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b086      	sub	sp, #24
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800caa8:	2300      	movs	r3, #0
 800caaa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d036      	beq.n	800cb20 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800cab6:	6938      	ldr	r0, [r7, #16]
 800cab8:	f000 f836 	bl	800cb28 <USBD_GetLen>
 800cabc:	4603      	mov	r3, r0
 800cabe:	3301      	adds	r3, #1
 800cac0:	b29b      	uxth	r3, r3
 800cac2:	005b      	lsls	r3, r3, #1
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800caca:	7dfb      	ldrb	r3, [r7, #23]
 800cacc:	68ba      	ldr	r2, [r7, #8]
 800cace:	4413      	add	r3, r2
 800cad0:	687a      	ldr	r2, [r7, #4]
 800cad2:	7812      	ldrb	r2, [r2, #0]
 800cad4:	701a      	strb	r2, [r3, #0]
  idx++;
 800cad6:	7dfb      	ldrb	r3, [r7, #23]
 800cad8:	3301      	adds	r3, #1
 800cada:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cadc:	7dfb      	ldrb	r3, [r7, #23]
 800cade:	68ba      	ldr	r2, [r7, #8]
 800cae0:	4413      	add	r3, r2
 800cae2:	2203      	movs	r2, #3
 800cae4:	701a      	strb	r2, [r3, #0]
  idx++;
 800cae6:	7dfb      	ldrb	r3, [r7, #23]
 800cae8:	3301      	adds	r3, #1
 800caea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800caec:	e013      	b.n	800cb16 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800caee:	7dfb      	ldrb	r3, [r7, #23]
 800caf0:	68ba      	ldr	r2, [r7, #8]
 800caf2:	4413      	add	r3, r2
 800caf4:	693a      	ldr	r2, [r7, #16]
 800caf6:	7812      	ldrb	r2, [r2, #0]
 800caf8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cafa:	693b      	ldr	r3, [r7, #16]
 800cafc:	3301      	adds	r3, #1
 800cafe:	613b      	str	r3, [r7, #16]
    idx++;
 800cb00:	7dfb      	ldrb	r3, [r7, #23]
 800cb02:	3301      	adds	r3, #1
 800cb04:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cb06:	7dfb      	ldrb	r3, [r7, #23]
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	4413      	add	r3, r2
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	701a      	strb	r2, [r3, #0]
    idx++;
 800cb10:	7dfb      	ldrb	r3, [r7, #23]
 800cb12:	3301      	adds	r3, #1
 800cb14:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d1e7      	bne.n	800caee <USBD_GetString+0x52>
 800cb1e:	e000      	b.n	800cb22 <USBD_GetString+0x86>
    return;
 800cb20:	bf00      	nop
  }
}
 800cb22:	3718      	adds	r7, #24
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}

0800cb28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
 800cb2e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cb30:	2300      	movs	r3, #0
 800cb32:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cb38:	e005      	b.n	800cb46 <USBD_GetLen+0x1e>
  {
    len++;
 800cb3a:	7bfb      	ldrb	r3, [r7, #15]
 800cb3c:	3301      	adds	r3, #1
 800cb3e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cb40:	68bb      	ldr	r3, [r7, #8]
 800cb42:	3301      	adds	r3, #1
 800cb44:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	781b      	ldrb	r3, [r3, #0]
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d1f5      	bne.n	800cb3a <USBD_GetLen+0x12>
  }

  return len;
 800cb4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb50:	4618      	mov	r0, r3
 800cb52:	3714      	adds	r7, #20
 800cb54:	46bd      	mov	sp, r7
 800cb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5a:	4770      	bx	lr

0800cb5c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b084      	sub	sp, #16
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	60f8      	str	r0, [r7, #12]
 800cb64:	60b9      	str	r1, [r7, #8]
 800cb66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	2202      	movs	r2, #2
 800cb6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	687a      	ldr	r2, [r7, #4]
 800cb74:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	687a      	ldr	r2, [r7, #4]
 800cb7a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	68ba      	ldr	r2, [r7, #8]
 800cb80:	2100      	movs	r1, #0
 800cb82:	68f8      	ldr	r0, [r7, #12]
 800cb84:	f000 fcf9 	bl	800d57a <USBD_LL_Transmit>

  return USBD_OK;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3710      	adds	r7, #16
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	bd80      	pop	{r7, pc}

0800cb92 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cb92:	b580      	push	{r7, lr}
 800cb94:	b084      	sub	sp, #16
 800cb96:	af00      	add	r7, sp, #0
 800cb98:	60f8      	str	r0, [r7, #12]
 800cb9a:	60b9      	str	r1, [r7, #8]
 800cb9c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	68ba      	ldr	r2, [r7, #8]
 800cba2:	2100      	movs	r1, #0
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	f000 fce8 	bl	800d57a <USBD_LL_Transmit>

  return USBD_OK;
 800cbaa:	2300      	movs	r3, #0
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3710      	adds	r7, #16
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cbb4:	b580      	push	{r7, lr}
 800cbb6:	b084      	sub	sp, #16
 800cbb8:	af00      	add	r7, sp, #0
 800cbba:	60f8      	str	r0, [r7, #12]
 800cbbc:	60b9      	str	r1, [r7, #8]
 800cbbe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2203      	movs	r2, #3
 800cbc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	687a      	ldr	r2, [r7, #4]
 800cbcc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	687a      	ldr	r2, [r7, #4]
 800cbd4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	68ba      	ldr	r2, [r7, #8]
 800cbdc:	2100      	movs	r1, #0
 800cbde:	68f8      	ldr	r0, [r7, #12]
 800cbe0:	f000 fcec 	bl	800d5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cbe4:	2300      	movs	r3, #0
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3710      	adds	r7, #16
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b084      	sub	sp, #16
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	60f8      	str	r0, [r7, #12]
 800cbf6:	60b9      	str	r1, [r7, #8]
 800cbf8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	68ba      	ldr	r2, [r7, #8]
 800cbfe:	2100      	movs	r1, #0
 800cc00:	68f8      	ldr	r0, [r7, #12]
 800cc02:	f000 fcdb 	bl	800d5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3710      	adds	r7, #16
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	2204      	movs	r2, #4
 800cc1c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cc20:	2300      	movs	r3, #0
 800cc22:	2200      	movs	r2, #0
 800cc24:	2100      	movs	r1, #0
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 fca7 	bl	800d57a <USBD_LL_Transmit>

  return USBD_OK;
 800cc2c:	2300      	movs	r3, #0
}
 800cc2e:	4618      	mov	r0, r3
 800cc30:	3708      	adds	r7, #8
 800cc32:	46bd      	mov	sp, r7
 800cc34:	bd80      	pop	{r7, pc}

0800cc36 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cc36:	b580      	push	{r7, lr}
 800cc38:	b082      	sub	sp, #8
 800cc3a:	af00      	add	r7, sp, #0
 800cc3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2205      	movs	r2, #5
 800cc42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cc46:	2300      	movs	r3, #0
 800cc48:	2200      	movs	r2, #0
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f000 fcb5 	bl	800d5bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cc52:	2300      	movs	r3, #0
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	3708      	adds	r7, #8
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	bd80      	pop	{r7, pc}

0800cc5c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cc60:	2200      	movs	r2, #0
 800cc62:	4912      	ldr	r1, [pc, #72]	; (800ccac <MX_USB_DEVICE_Init+0x50>)
 800cc64:	4812      	ldr	r0, [pc, #72]	; (800ccb0 <MX_USB_DEVICE_Init+0x54>)
 800cc66:	f7fe fd07 	bl	800b678 <USBD_Init>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d001      	beq.n	800cc74 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cc70:	f7f4 fecc 	bl	8001a0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cc74:	490f      	ldr	r1, [pc, #60]	; (800ccb4 <MX_USB_DEVICE_Init+0x58>)
 800cc76:	480e      	ldr	r0, [pc, #56]	; (800ccb0 <MX_USB_DEVICE_Init+0x54>)
 800cc78:	f7fe fd2e 	bl	800b6d8 <USBD_RegisterClass>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d001      	beq.n	800cc86 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cc82:	f7f4 fec3 	bl	8001a0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cc86:	490c      	ldr	r1, [pc, #48]	; (800ccb8 <MX_USB_DEVICE_Init+0x5c>)
 800cc88:	4809      	ldr	r0, [pc, #36]	; (800ccb0 <MX_USB_DEVICE_Init+0x54>)
 800cc8a:	f7fe fc1f 	bl	800b4cc <USBD_CDC_RegisterInterface>
 800cc8e:	4603      	mov	r3, r0
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d001      	beq.n	800cc98 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cc94:	f7f4 feba 	bl	8001a0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc98:	4805      	ldr	r0, [pc, #20]	; (800ccb0 <MX_USB_DEVICE_Init+0x54>)
 800cc9a:	f7fe fd53 	bl	800b744 <USBD_Start>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d001      	beq.n	800cca8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cca4:	f7f4 feb2 	bl	8001a0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cca8:	bf00      	nop
 800ccaa:	bd80      	pop	{r7, pc}
 800ccac:	200000ac 	.word	0x200000ac
 800ccb0:	20004310 	.word	0x20004310
 800ccb4:	20000018 	.word	0x20000018
 800ccb8:	20000098 	.word	0x20000098

0800ccbc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	4905      	ldr	r1, [pc, #20]	; (800ccd8 <CDC_Init_FS+0x1c>)
 800ccc4:	4805      	ldr	r0, [pc, #20]	; (800ccdc <CDC_Init_FS+0x20>)
 800ccc6:	f7fe fc1b 	bl	800b500 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ccca:	4905      	ldr	r1, [pc, #20]	; (800cce0 <CDC_Init_FS+0x24>)
 800cccc:	4803      	ldr	r0, [pc, #12]	; (800ccdc <CDC_Init_FS+0x20>)
 800ccce:	f7fe fc39 	bl	800b544 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ccd2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	bd80      	pop	{r7, pc}
 800ccd8:	20004dec 	.word	0x20004dec
 800ccdc:	20004310 	.word	0x20004310
 800cce0:	200045ec 	.word	0x200045ec

0800cce4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cce4:	b480      	push	{r7}
 800cce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cce8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ccea:	4618      	mov	r0, r3
 800ccec:	46bd      	mov	sp, r7
 800ccee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf2:	4770      	bx	lr

0800ccf4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	6039      	str	r1, [r7, #0]
 800ccfe:	71fb      	strb	r3, [r7, #7]
 800cd00:	4613      	mov	r3, r2
 800cd02:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cd04:	79fb      	ldrb	r3, [r7, #7]
 800cd06:	2b23      	cmp	r3, #35	; 0x23
 800cd08:	d84a      	bhi.n	800cda0 <CDC_Control_FS+0xac>
 800cd0a:	a201      	add	r2, pc, #4	; (adr r2, 800cd10 <CDC_Control_FS+0x1c>)
 800cd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd10:	0800cda1 	.word	0x0800cda1
 800cd14:	0800cda1 	.word	0x0800cda1
 800cd18:	0800cda1 	.word	0x0800cda1
 800cd1c:	0800cda1 	.word	0x0800cda1
 800cd20:	0800cda1 	.word	0x0800cda1
 800cd24:	0800cda1 	.word	0x0800cda1
 800cd28:	0800cda1 	.word	0x0800cda1
 800cd2c:	0800cda1 	.word	0x0800cda1
 800cd30:	0800cda1 	.word	0x0800cda1
 800cd34:	0800cda1 	.word	0x0800cda1
 800cd38:	0800cda1 	.word	0x0800cda1
 800cd3c:	0800cda1 	.word	0x0800cda1
 800cd40:	0800cda1 	.word	0x0800cda1
 800cd44:	0800cda1 	.word	0x0800cda1
 800cd48:	0800cda1 	.word	0x0800cda1
 800cd4c:	0800cda1 	.word	0x0800cda1
 800cd50:	0800cda1 	.word	0x0800cda1
 800cd54:	0800cda1 	.word	0x0800cda1
 800cd58:	0800cda1 	.word	0x0800cda1
 800cd5c:	0800cda1 	.word	0x0800cda1
 800cd60:	0800cda1 	.word	0x0800cda1
 800cd64:	0800cda1 	.word	0x0800cda1
 800cd68:	0800cda1 	.word	0x0800cda1
 800cd6c:	0800cda1 	.word	0x0800cda1
 800cd70:	0800cda1 	.word	0x0800cda1
 800cd74:	0800cda1 	.word	0x0800cda1
 800cd78:	0800cda1 	.word	0x0800cda1
 800cd7c:	0800cda1 	.word	0x0800cda1
 800cd80:	0800cda1 	.word	0x0800cda1
 800cd84:	0800cda1 	.word	0x0800cda1
 800cd88:	0800cda1 	.word	0x0800cda1
 800cd8c:	0800cda1 	.word	0x0800cda1
 800cd90:	0800cda1 	.word	0x0800cda1
 800cd94:	0800cda1 	.word	0x0800cda1
 800cd98:	0800cda1 	.word	0x0800cda1
 800cd9c:	0800cda1 	.word	0x0800cda1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cda0:	bf00      	nop
  }

  return (USBD_OK);
 800cda2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	370c      	adds	r7, #12
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr

0800cdb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b082      	sub	sp, #8
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cdba:	6879      	ldr	r1, [r7, #4]
 800cdbc:	4805      	ldr	r0, [pc, #20]	; (800cdd4 <CDC_Receive_FS+0x24>)
 800cdbe:	f7fe fbc1 	bl	800b544 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cdc2:	4804      	ldr	r0, [pc, #16]	; (800cdd4 <CDC_Receive_FS+0x24>)
 800cdc4:	f7fe fc22 	bl	800b60c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cdc8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3708      	adds	r7, #8
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	20004310 	.word	0x20004310

0800cdd8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b084      	sub	sp, #16
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
 800cde0:	460b      	mov	r3, r1
 800cde2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cde4:	2300      	movs	r3, #0
 800cde6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cde8:	4b0d      	ldr	r3, [pc, #52]	; (800ce20 <CDC_Transmit_FS+0x48>)
 800cdea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cdee:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cdf0:	68bb      	ldr	r3, [r7, #8]
 800cdf2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d001      	beq.n	800cdfe <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cdfa:	2301      	movs	r3, #1
 800cdfc:	e00b      	b.n	800ce16 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cdfe:	887b      	ldrh	r3, [r7, #2]
 800ce00:	461a      	mov	r2, r3
 800ce02:	6879      	ldr	r1, [r7, #4]
 800ce04:	4806      	ldr	r0, [pc, #24]	; (800ce20 <CDC_Transmit_FS+0x48>)
 800ce06:	f7fe fb7b 	bl	800b500 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ce0a:	4805      	ldr	r0, [pc, #20]	; (800ce20 <CDC_Transmit_FS+0x48>)
 800ce0c:	f7fe fbb8 	bl	800b580 <USBD_CDC_TransmitPacket>
 800ce10:	4603      	mov	r3, r0
 800ce12:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3710      	adds	r7, #16
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20004310 	.word	0x20004310

0800ce24 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b087      	sub	sp, #28
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	60f8      	str	r0, [r7, #12]
 800ce2c:	60b9      	str	r1, [r7, #8]
 800ce2e:	4613      	mov	r3, r2
 800ce30:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ce32:	2300      	movs	r3, #0
 800ce34:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ce36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	371c      	adds	r7, #28
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr
	...

0800ce48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	b083      	sub	sp, #12
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	2212      	movs	r2, #18
 800ce58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ce5a:	4b03      	ldr	r3, [pc, #12]	; (800ce68 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	370c      	adds	r7, #12
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr
 800ce68:	200000c8 	.word	0x200000c8

0800ce6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce6c:	b480      	push	{r7}
 800ce6e:	b083      	sub	sp, #12
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	4603      	mov	r3, r0
 800ce74:	6039      	str	r1, [r7, #0]
 800ce76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	2204      	movs	r2, #4
 800ce7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ce7e:	4b03      	ldr	r3, [pc, #12]	; (800ce8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	370c      	adds	r7, #12
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr
 800ce8c:	200000dc 	.word	0x200000dc

0800ce90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b082      	sub	sp, #8
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	4603      	mov	r3, r0
 800ce98:	6039      	str	r1, [r7, #0]
 800ce9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce9c:	79fb      	ldrb	r3, [r7, #7]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d105      	bne.n	800ceae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cea2:	683a      	ldr	r2, [r7, #0]
 800cea4:	4907      	ldr	r1, [pc, #28]	; (800cec4 <USBD_FS_ProductStrDescriptor+0x34>)
 800cea6:	4808      	ldr	r0, [pc, #32]	; (800cec8 <USBD_FS_ProductStrDescriptor+0x38>)
 800cea8:	f7ff fdf8 	bl	800ca9c <USBD_GetString>
 800ceac:	e004      	b.n	800ceb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ceae:	683a      	ldr	r2, [r7, #0]
 800ceb0:	4904      	ldr	r1, [pc, #16]	; (800cec4 <USBD_FS_ProductStrDescriptor+0x34>)
 800ceb2:	4805      	ldr	r0, [pc, #20]	; (800cec8 <USBD_FS_ProductStrDescriptor+0x38>)
 800ceb4:	f7ff fdf2 	bl	800ca9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ceb8:	4b02      	ldr	r3, [pc, #8]	; (800cec4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3708      	adds	r7, #8
 800cebe:	46bd      	mov	sp, r7
 800cec0:	bd80      	pop	{r7, pc}
 800cec2:	bf00      	nop
 800cec4:	200055ec 	.word	0x200055ec
 800cec8:	0800f218 	.word	0x0800f218

0800cecc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	4603      	mov	r3, r0
 800ced4:	6039      	str	r1, [r7, #0]
 800ced6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	4904      	ldr	r1, [pc, #16]	; (800ceec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cedc:	4804      	ldr	r0, [pc, #16]	; (800cef0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cede:	f7ff fddd 	bl	800ca9c <USBD_GetString>
  return USBD_StrDesc;
 800cee2:	4b02      	ldr	r3, [pc, #8]	; (800ceec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3708      	adds	r7, #8
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}
 800ceec:	200055ec 	.word	0x200055ec
 800cef0:	0800f230 	.word	0x0800f230

0800cef4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b082      	sub	sp, #8
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	4603      	mov	r3, r0
 800cefc:	6039      	str	r1, [r7, #0]
 800cefe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	221a      	movs	r2, #26
 800cf04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800cf06:	f000 f843 	bl	800cf90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800cf0a:	4b02      	ldr	r3, [pc, #8]	; (800cf14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	3708      	adds	r7, #8
 800cf10:	46bd      	mov	sp, r7
 800cf12:	bd80      	pop	{r7, pc}
 800cf14:	200000e0 	.word	0x200000e0

0800cf18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b082      	sub	sp, #8
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	4603      	mov	r3, r0
 800cf20:	6039      	str	r1, [r7, #0]
 800cf22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cf24:	79fb      	ldrb	r3, [r7, #7]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d105      	bne.n	800cf36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf2a:	683a      	ldr	r2, [r7, #0]
 800cf2c:	4907      	ldr	r1, [pc, #28]	; (800cf4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf2e:	4808      	ldr	r0, [pc, #32]	; (800cf50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf30:	f7ff fdb4 	bl	800ca9c <USBD_GetString>
 800cf34:	e004      	b.n	800cf40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cf36:	683a      	ldr	r2, [r7, #0]
 800cf38:	4904      	ldr	r1, [pc, #16]	; (800cf4c <USBD_FS_ConfigStrDescriptor+0x34>)
 800cf3a:	4805      	ldr	r0, [pc, #20]	; (800cf50 <USBD_FS_ConfigStrDescriptor+0x38>)
 800cf3c:	f7ff fdae 	bl	800ca9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf40:	4b02      	ldr	r3, [pc, #8]	; (800cf4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3708      	adds	r7, #8
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	200055ec 	.word	0x200055ec
 800cf50:	0800f244 	.word	0x0800f244

0800cf54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf54:	b580      	push	{r7, lr}
 800cf56:	b082      	sub	sp, #8
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	4603      	mov	r3, r0
 800cf5c:	6039      	str	r1, [r7, #0]
 800cf5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cf60:	79fb      	ldrb	r3, [r7, #7]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d105      	bne.n	800cf72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf66:	683a      	ldr	r2, [r7, #0]
 800cf68:	4907      	ldr	r1, [pc, #28]	; (800cf88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf6a:	4808      	ldr	r0, [pc, #32]	; (800cf8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf6c:	f7ff fd96 	bl	800ca9c <USBD_GetString>
 800cf70:	e004      	b.n	800cf7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cf72:	683a      	ldr	r2, [r7, #0]
 800cf74:	4904      	ldr	r1, [pc, #16]	; (800cf88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cf76:	4805      	ldr	r0, [pc, #20]	; (800cf8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cf78:	f7ff fd90 	bl	800ca9c <USBD_GetString>
  }
  return USBD_StrDesc;
 800cf7c:	4b02      	ldr	r3, [pc, #8]	; (800cf88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3708      	adds	r7, #8
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
 800cf86:	bf00      	nop
 800cf88:	200055ec 	.word	0x200055ec
 800cf8c:	0800f250 	.word	0x0800f250

0800cf90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf96:	4b0f      	ldr	r3, [pc, #60]	; (800cfd4 <Get_SerialNum+0x44>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf9c:	4b0e      	ldr	r3, [pc, #56]	; (800cfd8 <Get_SerialNum+0x48>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cfa2:	4b0e      	ldr	r3, [pc, #56]	; (800cfdc <Get_SerialNum+0x4c>)
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	4413      	add	r3, r2
 800cfae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d009      	beq.n	800cfca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cfb6:	2208      	movs	r2, #8
 800cfb8:	4909      	ldr	r1, [pc, #36]	; (800cfe0 <Get_SerialNum+0x50>)
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f000 f814 	bl	800cfe8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cfc0:	2204      	movs	r2, #4
 800cfc2:	4908      	ldr	r1, [pc, #32]	; (800cfe4 <Get_SerialNum+0x54>)
 800cfc4:	68b8      	ldr	r0, [r7, #8]
 800cfc6:	f000 f80f 	bl	800cfe8 <IntToUnicode>
  }
}
 800cfca:	bf00      	nop
 800cfcc:	3710      	adds	r7, #16
 800cfce:	46bd      	mov	sp, r7
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	1fff7a10 	.word	0x1fff7a10
 800cfd8:	1fff7a14 	.word	0x1fff7a14
 800cfdc:	1fff7a18 	.word	0x1fff7a18
 800cfe0:	200000e2 	.word	0x200000e2
 800cfe4:	200000f2 	.word	0x200000f2

0800cfe8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b087      	sub	sp, #28
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	60f8      	str	r0, [r7, #12]
 800cff0:	60b9      	str	r1, [r7, #8]
 800cff2:	4613      	mov	r3, r2
 800cff4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cff6:	2300      	movs	r3, #0
 800cff8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cffa:	2300      	movs	r3, #0
 800cffc:	75fb      	strb	r3, [r7, #23]
 800cffe:	e027      	b.n	800d050 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	0f1b      	lsrs	r3, r3, #28
 800d004:	2b09      	cmp	r3, #9
 800d006:	d80b      	bhi.n	800d020 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	0f1b      	lsrs	r3, r3, #28
 800d00c:	b2da      	uxtb	r2, r3
 800d00e:	7dfb      	ldrb	r3, [r7, #23]
 800d010:	005b      	lsls	r3, r3, #1
 800d012:	4619      	mov	r1, r3
 800d014:	68bb      	ldr	r3, [r7, #8]
 800d016:	440b      	add	r3, r1
 800d018:	3230      	adds	r2, #48	; 0x30
 800d01a:	b2d2      	uxtb	r2, r2
 800d01c:	701a      	strb	r2, [r3, #0]
 800d01e:	e00a      	b.n	800d036 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	0f1b      	lsrs	r3, r3, #28
 800d024:	b2da      	uxtb	r2, r3
 800d026:	7dfb      	ldrb	r3, [r7, #23]
 800d028:	005b      	lsls	r3, r3, #1
 800d02a:	4619      	mov	r1, r3
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	440b      	add	r3, r1
 800d030:	3237      	adds	r2, #55	; 0x37
 800d032:	b2d2      	uxtb	r2, r2
 800d034:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	011b      	lsls	r3, r3, #4
 800d03a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d03c:	7dfb      	ldrb	r3, [r7, #23]
 800d03e:	005b      	lsls	r3, r3, #1
 800d040:	3301      	adds	r3, #1
 800d042:	68ba      	ldr	r2, [r7, #8]
 800d044:	4413      	add	r3, r2
 800d046:	2200      	movs	r2, #0
 800d048:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d04a:	7dfb      	ldrb	r3, [r7, #23]
 800d04c:	3301      	adds	r3, #1
 800d04e:	75fb      	strb	r3, [r7, #23]
 800d050:	7dfa      	ldrb	r2, [r7, #23]
 800d052:	79fb      	ldrb	r3, [r7, #7]
 800d054:	429a      	cmp	r2, r3
 800d056:	d3d3      	bcc.n	800d000 <IntToUnicode+0x18>
  }
}
 800d058:	bf00      	nop
 800d05a:	bf00      	nop
 800d05c:	371c      	adds	r7, #28
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
	...

0800d068 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b08a      	sub	sp, #40	; 0x28
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d070:	f107 0314 	add.w	r3, r7, #20
 800d074:	2200      	movs	r2, #0
 800d076:	601a      	str	r2, [r3, #0]
 800d078:	605a      	str	r2, [r3, #4]
 800d07a:	609a      	str	r2, [r3, #8]
 800d07c:	60da      	str	r2, [r3, #12]
 800d07e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d088:	d147      	bne.n	800d11a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d08a:	2300      	movs	r3, #0
 800d08c:	613b      	str	r3, [r7, #16]
 800d08e:	4b25      	ldr	r3, [pc, #148]	; (800d124 <HAL_PCD_MspInit+0xbc>)
 800d090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d092:	4a24      	ldr	r2, [pc, #144]	; (800d124 <HAL_PCD_MspInit+0xbc>)
 800d094:	f043 0301 	orr.w	r3, r3, #1
 800d098:	6313      	str	r3, [r2, #48]	; 0x30
 800d09a:	4b22      	ldr	r3, [pc, #136]	; (800d124 <HAL_PCD_MspInit+0xbc>)
 800d09c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d09e:	f003 0301 	and.w	r3, r3, #1
 800d0a2:	613b      	str	r3, [r7, #16]
 800d0a4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d0a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d0b4:	f107 0314 	add.w	r3, r7, #20
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	481b      	ldr	r0, [pc, #108]	; (800d128 <HAL_PCD_MspInit+0xc0>)
 800d0bc:	f7f7 faf6 	bl	80046ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d0c0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d0c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d0c6:	2302      	movs	r3, #2
 800d0c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d0d2:	230a      	movs	r3, #10
 800d0d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d0d6:	f107 0314 	add.w	r3, r7, #20
 800d0da:	4619      	mov	r1, r3
 800d0dc:	4812      	ldr	r0, [pc, #72]	; (800d128 <HAL_PCD_MspInit+0xc0>)
 800d0de:	f7f7 fae5 	bl	80046ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d0e2:	4b10      	ldr	r3, [pc, #64]	; (800d124 <HAL_PCD_MspInit+0xbc>)
 800d0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0e6:	4a0f      	ldr	r2, [pc, #60]	; (800d124 <HAL_PCD_MspInit+0xbc>)
 800d0e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d0ec:	6353      	str	r3, [r2, #52]	; 0x34
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	60fb      	str	r3, [r7, #12]
 800d0f2:	4b0c      	ldr	r3, [pc, #48]	; (800d124 <HAL_PCD_MspInit+0xbc>)
 800d0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0f6:	4a0b      	ldr	r2, [pc, #44]	; (800d124 <HAL_PCD_MspInit+0xbc>)
 800d0f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d0fc:	6453      	str	r3, [r2, #68]	; 0x44
 800d0fe:	4b09      	ldr	r3, [pc, #36]	; (800d124 <HAL_PCD_MspInit+0xbc>)
 800d100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d106:	60fb      	str	r3, [r7, #12]
 800d108:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d10a:	2200      	movs	r2, #0
 800d10c:	2100      	movs	r1, #0
 800d10e:	2043      	movs	r0, #67	; 0x43
 800d110:	f7f6 fc95 	bl	8003a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d114:	2043      	movs	r0, #67	; 0x43
 800d116:	f7f6 fcae 	bl	8003a76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d11a:	bf00      	nop
 800d11c:	3728      	adds	r7, #40	; 0x28
 800d11e:	46bd      	mov	sp, r7
 800d120:	bd80      	pop	{r7, pc}
 800d122:	bf00      	nop
 800d124:	40023800 	.word	0x40023800
 800d128:	40020000 	.word	0x40020000

0800d12c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b082      	sub	sp, #8
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d140:	4619      	mov	r1, r3
 800d142:	4610      	mov	r0, r2
 800d144:	f7fe fb4b 	bl	800b7de <USBD_LL_SetupStage>
}
 800d148:	bf00      	nop
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b082      	sub	sp, #8
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
 800d158:	460b      	mov	r3, r1
 800d15a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d162:	78fa      	ldrb	r2, [r7, #3]
 800d164:	6879      	ldr	r1, [r7, #4]
 800d166:	4613      	mov	r3, r2
 800d168:	00db      	lsls	r3, r3, #3
 800d16a:	4413      	add	r3, r2
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	440b      	add	r3, r1
 800d170:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d174:	681a      	ldr	r2, [r3, #0]
 800d176:	78fb      	ldrb	r3, [r7, #3]
 800d178:	4619      	mov	r1, r3
 800d17a:	f7fe fb85 	bl	800b888 <USBD_LL_DataOutStage>
}
 800d17e:	bf00      	nop
 800d180:	3708      	adds	r7, #8
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}

0800d186 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d186:	b580      	push	{r7, lr}
 800d188:	b082      	sub	sp, #8
 800d18a:	af00      	add	r7, sp, #0
 800d18c:	6078      	str	r0, [r7, #4]
 800d18e:	460b      	mov	r3, r1
 800d190:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d198:	78fa      	ldrb	r2, [r7, #3]
 800d19a:	6879      	ldr	r1, [r7, #4]
 800d19c:	4613      	mov	r3, r2
 800d19e:	00db      	lsls	r3, r3, #3
 800d1a0:	4413      	add	r3, r2
 800d1a2:	009b      	lsls	r3, r3, #2
 800d1a4:	440b      	add	r3, r1
 800d1a6:	334c      	adds	r3, #76	; 0x4c
 800d1a8:	681a      	ldr	r2, [r3, #0]
 800d1aa:	78fb      	ldrb	r3, [r7, #3]
 800d1ac:	4619      	mov	r1, r3
 800d1ae:	f7fe fc1e 	bl	800b9ee <USBD_LL_DataInStage>
}
 800d1b2:	bf00      	nop
 800d1b4:	3708      	adds	r7, #8
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b082      	sub	sp, #8
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f7fe fd52 	bl	800bc72 <USBD_LL_SOF>
}
 800d1ce:	bf00      	nop
 800d1d0:	3708      	adds	r7, #8
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b084      	sub	sp, #16
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	68db      	ldr	r3, [r3, #12]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d102      	bne.n	800d1f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	73fb      	strb	r3, [r7, #15]
 800d1ee:	e008      	b.n	800d202 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	2b02      	cmp	r3, #2
 800d1f6:	d102      	bne.n	800d1fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	73fb      	strb	r3, [r7, #15]
 800d1fc:	e001      	b.n	800d202 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d1fe:	f7f4 fc05 	bl	8001a0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d208:	7bfa      	ldrb	r2, [r7, #15]
 800d20a:	4611      	mov	r1, r2
 800d20c:	4618      	mov	r0, r3
 800d20e:	f7fe fcf2 	bl	800bbf6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d218:	4618      	mov	r0, r3
 800d21a:	f7fe fc9a 	bl	800bb52 <USBD_LL_Reset>
}
 800d21e:	bf00      	nop
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}
	...

0800d228 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b082      	sub	sp, #8
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d236:	4618      	mov	r0, r3
 800d238:	f7fe fced 	bl	800bc16 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	6812      	ldr	r2, [r2, #0]
 800d24a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d24e:	f043 0301 	orr.w	r3, r3, #1
 800d252:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	6a1b      	ldr	r3, [r3, #32]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d005      	beq.n	800d268 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d25c:	4b04      	ldr	r3, [pc, #16]	; (800d270 <HAL_PCD_SuspendCallback+0x48>)
 800d25e:	691b      	ldr	r3, [r3, #16]
 800d260:	4a03      	ldr	r2, [pc, #12]	; (800d270 <HAL_PCD_SuspendCallback+0x48>)
 800d262:	f043 0306 	orr.w	r3, r3, #6
 800d266:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d268:	bf00      	nop
 800d26a:	3708      	adds	r7, #8
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	e000ed00 	.word	0xe000ed00

0800d274 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b082      	sub	sp, #8
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d282:	4618      	mov	r0, r3
 800d284:	f7fe fcdd 	bl	800bc42 <USBD_LL_Resume>
}
 800d288:	bf00      	nop
 800d28a:	3708      	adds	r7, #8
 800d28c:	46bd      	mov	sp, r7
 800d28e:	bd80      	pop	{r7, pc}

0800d290 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d290:	b580      	push	{r7, lr}
 800d292:	b082      	sub	sp, #8
 800d294:	af00      	add	r7, sp, #0
 800d296:	6078      	str	r0, [r7, #4]
 800d298:	460b      	mov	r3, r1
 800d29a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2a2:	78fa      	ldrb	r2, [r7, #3]
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7fe fd35 	bl	800bd16 <USBD_LL_IsoOUTIncomplete>
}
 800d2ac:	bf00      	nop
 800d2ae:	3708      	adds	r7, #8
 800d2b0:	46bd      	mov	sp, r7
 800d2b2:	bd80      	pop	{r7, pc}

0800d2b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	460b      	mov	r3, r1
 800d2be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2c6:	78fa      	ldrb	r2, [r7, #3]
 800d2c8:	4611      	mov	r1, r2
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7fe fcf1 	bl	800bcb2 <USBD_LL_IsoINIncomplete>
}
 800d2d0:	bf00      	nop
 800d2d2:	3708      	adds	r7, #8
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b082      	sub	sp, #8
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fe fd47 	bl	800bd7a <USBD_LL_DevConnected>
}
 800d2ec:	bf00      	nop
 800d2ee:	3708      	adds	r7, #8
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b082      	sub	sp, #8
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d302:	4618      	mov	r0, r3
 800d304:	f7fe fd44 	bl	800bd90 <USBD_LL_DevDisconnected>
}
 800d308:	bf00      	nop
 800d30a:	3708      	adds	r7, #8
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}

0800d310 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b082      	sub	sp, #8
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d13c      	bne.n	800d39a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d320:	4a20      	ldr	r2, [pc, #128]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	4a1e      	ldr	r2, [pc, #120]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d32c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d330:	4b1c      	ldr	r3, [pc, #112]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d332:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d336:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d338:	4b1a      	ldr	r3, [pc, #104]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d33a:	2204      	movs	r2, #4
 800d33c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d33e:	4b19      	ldr	r3, [pc, #100]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d340:	2202      	movs	r2, #2
 800d342:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d344:	4b17      	ldr	r3, [pc, #92]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d346:	2200      	movs	r2, #0
 800d348:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d34a:	4b16      	ldr	r3, [pc, #88]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d34c:	2202      	movs	r2, #2
 800d34e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d350:	4b14      	ldr	r3, [pc, #80]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d352:	2200      	movs	r2, #0
 800d354:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d356:	4b13      	ldr	r3, [pc, #76]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d358:	2200      	movs	r2, #0
 800d35a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d35c:	4b11      	ldr	r3, [pc, #68]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d35e:	2200      	movs	r2, #0
 800d360:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d362:	4b10      	ldr	r3, [pc, #64]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d364:	2201      	movs	r2, #1
 800d366:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d368:	4b0e      	ldr	r3, [pc, #56]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d36a:	2200      	movs	r2, #0
 800d36c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d36e:	480d      	ldr	r0, [pc, #52]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d370:	f7f7 fcc8 	bl	8004d04 <HAL_PCD_Init>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d001      	beq.n	800d37e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d37a:	f7f4 fb47 	bl	8001a0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d37e:	2180      	movs	r1, #128	; 0x80
 800d380:	4808      	ldr	r0, [pc, #32]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d382:	f7f8 ff20 	bl	80061c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d386:	2240      	movs	r2, #64	; 0x40
 800d388:	2100      	movs	r1, #0
 800d38a:	4806      	ldr	r0, [pc, #24]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d38c:	f7f8 fed4 	bl	8006138 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d390:	2280      	movs	r2, #128	; 0x80
 800d392:	2101      	movs	r1, #1
 800d394:	4803      	ldr	r0, [pc, #12]	; (800d3a4 <USBD_LL_Init+0x94>)
 800d396:	f7f8 fecf 	bl	8006138 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d39a:	2300      	movs	r3, #0
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3708      	adds	r7, #8
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	bd80      	pop	{r7, pc}
 800d3a4:	200057ec 	.word	0x200057ec

0800d3a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3b0:	2300      	movs	r3, #0
 800d3b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7f7 fdbd 	bl	8004f3e <HAL_PCD_Start>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f000 f942 	bl	800d654 <USBD_Get_USB_Status>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
 800d3e6:	4608      	mov	r0, r1
 800d3e8:	4611      	mov	r1, r2
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	70fb      	strb	r3, [r7, #3]
 800d3f0:	460b      	mov	r3, r1
 800d3f2:	70bb      	strb	r3, [r7, #2]
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d406:	78bb      	ldrb	r3, [r7, #2]
 800d408:	883a      	ldrh	r2, [r7, #0]
 800d40a:	78f9      	ldrb	r1, [r7, #3]
 800d40c:	f7f8 fa8e 	bl	800592c <HAL_PCD_EP_Open>
 800d410:	4603      	mov	r3, r0
 800d412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d414:	7bfb      	ldrb	r3, [r7, #15]
 800d416:	4618      	mov	r0, r3
 800d418:	f000 f91c 	bl	800d654 <USBD_Get_USB_Status>
 800d41c:	4603      	mov	r3, r0
 800d41e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d420:	7bbb      	ldrb	r3, [r7, #14]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b084      	sub	sp, #16
 800d42e:	af00      	add	r7, sp, #0
 800d430:	6078      	str	r0, [r7, #4]
 800d432:	460b      	mov	r3, r1
 800d434:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d436:	2300      	movs	r3, #0
 800d438:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d43a:	2300      	movs	r3, #0
 800d43c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d444:	78fa      	ldrb	r2, [r7, #3]
 800d446:	4611      	mov	r1, r2
 800d448:	4618      	mov	r0, r3
 800d44a:	f7f8 fad7 	bl	80059fc <HAL_PCD_EP_Close>
 800d44e:	4603      	mov	r3, r0
 800d450:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d452:	7bfb      	ldrb	r3, [r7, #15]
 800d454:	4618      	mov	r0, r3
 800d456:	f000 f8fd 	bl	800d654 <USBD_Get_USB_Status>
 800d45a:	4603      	mov	r3, r0
 800d45c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d45e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d460:	4618      	mov	r0, r3
 800d462:	3710      	adds	r7, #16
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	460b      	mov	r3, r1
 800d472:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d474:	2300      	movs	r3, #0
 800d476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d478:	2300      	movs	r3, #0
 800d47a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d482:	78fa      	ldrb	r2, [r7, #3]
 800d484:	4611      	mov	r1, r2
 800d486:	4618      	mov	r0, r3
 800d488:	f7f8 fbaf 	bl	8005bea <HAL_PCD_EP_SetStall>
 800d48c:	4603      	mov	r3, r0
 800d48e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d490:	7bfb      	ldrb	r3, [r7, #15]
 800d492:	4618      	mov	r0, r3
 800d494:	f000 f8de 	bl	800d654 <USBD_Get_USB_Status>
 800d498:	4603      	mov	r3, r0
 800d49a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d49c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d49e:	4618      	mov	r0, r3
 800d4a0:	3710      	adds	r7, #16
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}

0800d4a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4a6:	b580      	push	{r7, lr}
 800d4a8:	b084      	sub	sp, #16
 800d4aa:	af00      	add	r7, sp, #0
 800d4ac:	6078      	str	r0, [r7, #4]
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4c0:	78fa      	ldrb	r2, [r7, #3]
 800d4c2:	4611      	mov	r1, r2
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	f7f8 fbf4 	bl	8005cb2 <HAL_PCD_EP_ClrStall>
 800d4ca:	4603      	mov	r3, r0
 800d4cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4ce:	7bfb      	ldrb	r3, [r7, #15]
 800d4d0:	4618      	mov	r0, r3
 800d4d2:	f000 f8bf 	bl	800d654 <USBD_Get_USB_Status>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4da:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d4f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d4f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	da0b      	bge.n	800d518 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d500:	78fb      	ldrb	r3, [r7, #3]
 800d502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d506:	68f9      	ldr	r1, [r7, #12]
 800d508:	4613      	mov	r3, r2
 800d50a:	00db      	lsls	r3, r3, #3
 800d50c:	4413      	add	r3, r2
 800d50e:	009b      	lsls	r3, r3, #2
 800d510:	440b      	add	r3, r1
 800d512:	333e      	adds	r3, #62	; 0x3e
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	e00b      	b.n	800d530 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d518:	78fb      	ldrb	r3, [r7, #3]
 800d51a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d51e:	68f9      	ldr	r1, [r7, #12]
 800d520:	4613      	mov	r3, r2
 800d522:	00db      	lsls	r3, r3, #3
 800d524:	4413      	add	r3, r2
 800d526:	009b      	lsls	r3, r3, #2
 800d528:	440b      	add	r3, r1
 800d52a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d52e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d530:	4618      	mov	r0, r3
 800d532:	3714      	adds	r7, #20
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	460b      	mov	r3, r1
 800d546:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d548:	2300      	movs	r3, #0
 800d54a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d54c:	2300      	movs	r3, #0
 800d54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d556:	78fa      	ldrb	r2, [r7, #3]
 800d558:	4611      	mov	r1, r2
 800d55a:	4618      	mov	r0, r3
 800d55c:	f7f8 f9c1 	bl	80058e2 <HAL_PCD_SetAddress>
 800d560:	4603      	mov	r3, r0
 800d562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d564:	7bfb      	ldrb	r3, [r7, #15]
 800d566:	4618      	mov	r0, r3
 800d568:	f000 f874 	bl	800d654 <USBD_Get_USB_Status>
 800d56c:	4603      	mov	r3, r0
 800d56e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d570:	7bbb      	ldrb	r3, [r7, #14]
}
 800d572:	4618      	mov	r0, r3
 800d574:	3710      	adds	r7, #16
 800d576:	46bd      	mov	sp, r7
 800d578:	bd80      	pop	{r7, pc}

0800d57a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d57a:	b580      	push	{r7, lr}
 800d57c:	b086      	sub	sp, #24
 800d57e:	af00      	add	r7, sp, #0
 800d580:	60f8      	str	r0, [r7, #12]
 800d582:	607a      	str	r2, [r7, #4]
 800d584:	603b      	str	r3, [r7, #0]
 800d586:	460b      	mov	r3, r1
 800d588:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d58a:	2300      	movs	r3, #0
 800d58c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d58e:	2300      	movs	r3, #0
 800d590:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d598:	7af9      	ldrb	r1, [r7, #11]
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	f7f8 fada 	bl	8005b56 <HAL_PCD_EP_Transmit>
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5a6:	7dfb      	ldrb	r3, [r7, #23]
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f000 f853 	bl	800d654 <USBD_Get_USB_Status>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5b4:	4618      	mov	r0, r3
 800d5b6:	3718      	adds	r7, #24
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	bd80      	pop	{r7, pc}

0800d5bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d5bc:	b580      	push	{r7, lr}
 800d5be:	b086      	sub	sp, #24
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	60f8      	str	r0, [r7, #12]
 800d5c4:	607a      	str	r2, [r7, #4]
 800d5c6:	603b      	str	r3, [r7, #0]
 800d5c8:	460b      	mov	r3, r1
 800d5ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d5da:	7af9      	ldrb	r1, [r7, #11]
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	f7f8 fa56 	bl	8005a90 <HAL_PCD_EP_Receive>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5e8:	7dfb      	ldrb	r3, [r7, #23]
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f000 f832 	bl	800d654 <USBD_Get_USB_Status>
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d5f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	3718      	adds	r7, #24
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}

0800d5fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5fe:	b580      	push	{r7, lr}
 800d600:	b082      	sub	sp, #8
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
 800d606:	460b      	mov	r3, r1
 800d608:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d610:	78fa      	ldrb	r2, [r7, #3]
 800d612:	4611      	mov	r1, r2
 800d614:	4618      	mov	r0, r3
 800d616:	f7f8 fa86 	bl	8005b26 <HAL_PCD_EP_GetRxCount>
 800d61a:	4603      	mov	r3, r0
}
 800d61c:	4618      	mov	r0, r3
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d62c:	4b03      	ldr	r3, [pc, #12]	; (800d63c <USBD_static_malloc+0x18>)
}
 800d62e:	4618      	mov	r0, r3
 800d630:	370c      	adds	r7, #12
 800d632:	46bd      	mov	sp, r7
 800d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d638:	4770      	bx	lr
 800d63a:	bf00      	nop
 800d63c:	20005cf8 	.word	0x20005cf8

0800d640 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]

}
 800d648:	bf00      	nop
 800d64a:	370c      	adds	r7, #12
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d654:	b480      	push	{r7}
 800d656:	b085      	sub	sp, #20
 800d658:	af00      	add	r7, sp, #0
 800d65a:	4603      	mov	r3, r0
 800d65c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d65e:	2300      	movs	r3, #0
 800d660:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d662:	79fb      	ldrb	r3, [r7, #7]
 800d664:	2b03      	cmp	r3, #3
 800d666:	d817      	bhi.n	800d698 <USBD_Get_USB_Status+0x44>
 800d668:	a201      	add	r2, pc, #4	; (adr r2, 800d670 <USBD_Get_USB_Status+0x1c>)
 800d66a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d66e:	bf00      	nop
 800d670:	0800d681 	.word	0x0800d681
 800d674:	0800d687 	.word	0x0800d687
 800d678:	0800d68d 	.word	0x0800d68d
 800d67c:	0800d693 	.word	0x0800d693
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d680:	2300      	movs	r3, #0
 800d682:	73fb      	strb	r3, [r7, #15]
    break;
 800d684:	e00b      	b.n	800d69e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d686:	2303      	movs	r3, #3
 800d688:	73fb      	strb	r3, [r7, #15]
    break;
 800d68a:	e008      	b.n	800d69e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d68c:	2301      	movs	r3, #1
 800d68e:	73fb      	strb	r3, [r7, #15]
    break;
 800d690:	e005      	b.n	800d69e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d692:	2303      	movs	r3, #3
 800d694:	73fb      	strb	r3, [r7, #15]
    break;
 800d696:	e002      	b.n	800d69e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d698:	2303      	movs	r3, #3
 800d69a:	73fb      	strb	r3, [r7, #15]
    break;
 800d69c:	bf00      	nop
  }
  return usb_status;
 800d69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3714      	adds	r7, #20
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <__errno>:
 800d6ac:	4b01      	ldr	r3, [pc, #4]	; (800d6b4 <__errno+0x8>)
 800d6ae:	6818      	ldr	r0, [r3, #0]
 800d6b0:	4770      	bx	lr
 800d6b2:	bf00      	nop
 800d6b4:	200000fc 	.word	0x200000fc

0800d6b8 <__libc_init_array>:
 800d6b8:	b570      	push	{r4, r5, r6, lr}
 800d6ba:	4d0d      	ldr	r5, [pc, #52]	; (800d6f0 <__libc_init_array+0x38>)
 800d6bc:	4c0d      	ldr	r4, [pc, #52]	; (800d6f4 <__libc_init_array+0x3c>)
 800d6be:	1b64      	subs	r4, r4, r5
 800d6c0:	10a4      	asrs	r4, r4, #2
 800d6c2:	2600      	movs	r6, #0
 800d6c4:	42a6      	cmp	r6, r4
 800d6c6:	d109      	bne.n	800d6dc <__libc_init_array+0x24>
 800d6c8:	4d0b      	ldr	r5, [pc, #44]	; (800d6f8 <__libc_init_array+0x40>)
 800d6ca:	4c0c      	ldr	r4, [pc, #48]	; (800d6fc <__libc_init_array+0x44>)
 800d6cc:	f001 fa10 	bl	800eaf0 <_init>
 800d6d0:	1b64      	subs	r4, r4, r5
 800d6d2:	10a4      	asrs	r4, r4, #2
 800d6d4:	2600      	movs	r6, #0
 800d6d6:	42a6      	cmp	r6, r4
 800d6d8:	d105      	bne.n	800d6e6 <__libc_init_array+0x2e>
 800d6da:	bd70      	pop	{r4, r5, r6, pc}
 800d6dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6e0:	4798      	blx	r3
 800d6e2:	3601      	adds	r6, #1
 800d6e4:	e7ee      	b.n	800d6c4 <__libc_init_array+0xc>
 800d6e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d6ea:	4798      	blx	r3
 800d6ec:	3601      	adds	r6, #1
 800d6ee:	e7f2      	b.n	800d6d6 <__libc_init_array+0x1e>
 800d6f0:	080100fc 	.word	0x080100fc
 800d6f4:	080100fc 	.word	0x080100fc
 800d6f8:	080100fc 	.word	0x080100fc
 800d6fc:	08010100 	.word	0x08010100

0800d700 <memcmp>:
 800d700:	b510      	push	{r4, lr}
 800d702:	3901      	subs	r1, #1
 800d704:	4402      	add	r2, r0
 800d706:	4290      	cmp	r0, r2
 800d708:	d101      	bne.n	800d70e <memcmp+0xe>
 800d70a:	2000      	movs	r0, #0
 800d70c:	e005      	b.n	800d71a <memcmp+0x1a>
 800d70e:	7803      	ldrb	r3, [r0, #0]
 800d710:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d714:	42a3      	cmp	r3, r4
 800d716:	d001      	beq.n	800d71c <memcmp+0x1c>
 800d718:	1b18      	subs	r0, r3, r4
 800d71a:	bd10      	pop	{r4, pc}
 800d71c:	3001      	adds	r0, #1
 800d71e:	e7f2      	b.n	800d706 <memcmp+0x6>

0800d720 <memcpy>:
 800d720:	440a      	add	r2, r1
 800d722:	4291      	cmp	r1, r2
 800d724:	f100 33ff 	add.w	r3, r0, #4294967295
 800d728:	d100      	bne.n	800d72c <memcpy+0xc>
 800d72a:	4770      	bx	lr
 800d72c:	b510      	push	{r4, lr}
 800d72e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d732:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d736:	4291      	cmp	r1, r2
 800d738:	d1f9      	bne.n	800d72e <memcpy+0xe>
 800d73a:	bd10      	pop	{r4, pc}

0800d73c <memset>:
 800d73c:	4402      	add	r2, r0
 800d73e:	4603      	mov	r3, r0
 800d740:	4293      	cmp	r3, r2
 800d742:	d100      	bne.n	800d746 <memset+0xa>
 800d744:	4770      	bx	lr
 800d746:	f803 1b01 	strb.w	r1, [r3], #1
 800d74a:	e7f9      	b.n	800d740 <memset+0x4>

0800d74c <iprintf>:
 800d74c:	b40f      	push	{r0, r1, r2, r3}
 800d74e:	4b0a      	ldr	r3, [pc, #40]	; (800d778 <iprintf+0x2c>)
 800d750:	b513      	push	{r0, r1, r4, lr}
 800d752:	681c      	ldr	r4, [r3, #0]
 800d754:	b124      	cbz	r4, 800d760 <iprintf+0x14>
 800d756:	69a3      	ldr	r3, [r4, #24]
 800d758:	b913      	cbnz	r3, 800d760 <iprintf+0x14>
 800d75a:	4620      	mov	r0, r4
 800d75c:	f000 fa7e 	bl	800dc5c <__sinit>
 800d760:	ab05      	add	r3, sp, #20
 800d762:	9a04      	ldr	r2, [sp, #16]
 800d764:	68a1      	ldr	r1, [r4, #8]
 800d766:	9301      	str	r3, [sp, #4]
 800d768:	4620      	mov	r0, r4
 800d76a:	f000 fde3 	bl	800e334 <_vfiprintf_r>
 800d76e:	b002      	add	sp, #8
 800d770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d774:	b004      	add	sp, #16
 800d776:	4770      	bx	lr
 800d778:	200000fc 	.word	0x200000fc

0800d77c <_puts_r>:
 800d77c:	b570      	push	{r4, r5, r6, lr}
 800d77e:	460e      	mov	r6, r1
 800d780:	4605      	mov	r5, r0
 800d782:	b118      	cbz	r0, 800d78c <_puts_r+0x10>
 800d784:	6983      	ldr	r3, [r0, #24]
 800d786:	b90b      	cbnz	r3, 800d78c <_puts_r+0x10>
 800d788:	f000 fa68 	bl	800dc5c <__sinit>
 800d78c:	69ab      	ldr	r3, [r5, #24]
 800d78e:	68ac      	ldr	r4, [r5, #8]
 800d790:	b913      	cbnz	r3, 800d798 <_puts_r+0x1c>
 800d792:	4628      	mov	r0, r5
 800d794:	f000 fa62 	bl	800dc5c <__sinit>
 800d798:	4b2c      	ldr	r3, [pc, #176]	; (800d84c <_puts_r+0xd0>)
 800d79a:	429c      	cmp	r4, r3
 800d79c:	d120      	bne.n	800d7e0 <_puts_r+0x64>
 800d79e:	686c      	ldr	r4, [r5, #4]
 800d7a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7a2:	07db      	lsls	r3, r3, #31
 800d7a4:	d405      	bmi.n	800d7b2 <_puts_r+0x36>
 800d7a6:	89a3      	ldrh	r3, [r4, #12]
 800d7a8:	0598      	lsls	r0, r3, #22
 800d7aa:	d402      	bmi.n	800d7b2 <_puts_r+0x36>
 800d7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7ae:	f000 faf3 	bl	800dd98 <__retarget_lock_acquire_recursive>
 800d7b2:	89a3      	ldrh	r3, [r4, #12]
 800d7b4:	0719      	lsls	r1, r3, #28
 800d7b6:	d51d      	bpl.n	800d7f4 <_puts_r+0x78>
 800d7b8:	6923      	ldr	r3, [r4, #16]
 800d7ba:	b1db      	cbz	r3, 800d7f4 <_puts_r+0x78>
 800d7bc:	3e01      	subs	r6, #1
 800d7be:	68a3      	ldr	r3, [r4, #8]
 800d7c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d7c4:	3b01      	subs	r3, #1
 800d7c6:	60a3      	str	r3, [r4, #8]
 800d7c8:	bb39      	cbnz	r1, 800d81a <_puts_r+0x9e>
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	da38      	bge.n	800d840 <_puts_r+0xc4>
 800d7ce:	4622      	mov	r2, r4
 800d7d0:	210a      	movs	r1, #10
 800d7d2:	4628      	mov	r0, r5
 800d7d4:	f000 f868 	bl	800d8a8 <__swbuf_r>
 800d7d8:	3001      	adds	r0, #1
 800d7da:	d011      	beq.n	800d800 <_puts_r+0x84>
 800d7dc:	250a      	movs	r5, #10
 800d7de:	e011      	b.n	800d804 <_puts_r+0x88>
 800d7e0:	4b1b      	ldr	r3, [pc, #108]	; (800d850 <_puts_r+0xd4>)
 800d7e2:	429c      	cmp	r4, r3
 800d7e4:	d101      	bne.n	800d7ea <_puts_r+0x6e>
 800d7e6:	68ac      	ldr	r4, [r5, #8]
 800d7e8:	e7da      	b.n	800d7a0 <_puts_r+0x24>
 800d7ea:	4b1a      	ldr	r3, [pc, #104]	; (800d854 <_puts_r+0xd8>)
 800d7ec:	429c      	cmp	r4, r3
 800d7ee:	bf08      	it	eq
 800d7f0:	68ec      	ldreq	r4, [r5, #12]
 800d7f2:	e7d5      	b.n	800d7a0 <_puts_r+0x24>
 800d7f4:	4621      	mov	r1, r4
 800d7f6:	4628      	mov	r0, r5
 800d7f8:	f000 f8a8 	bl	800d94c <__swsetup_r>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d0dd      	beq.n	800d7bc <_puts_r+0x40>
 800d800:	f04f 35ff 	mov.w	r5, #4294967295
 800d804:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d806:	07da      	lsls	r2, r3, #31
 800d808:	d405      	bmi.n	800d816 <_puts_r+0x9a>
 800d80a:	89a3      	ldrh	r3, [r4, #12]
 800d80c:	059b      	lsls	r3, r3, #22
 800d80e:	d402      	bmi.n	800d816 <_puts_r+0x9a>
 800d810:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d812:	f000 fac2 	bl	800dd9a <__retarget_lock_release_recursive>
 800d816:	4628      	mov	r0, r5
 800d818:	bd70      	pop	{r4, r5, r6, pc}
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	da04      	bge.n	800d828 <_puts_r+0xac>
 800d81e:	69a2      	ldr	r2, [r4, #24]
 800d820:	429a      	cmp	r2, r3
 800d822:	dc06      	bgt.n	800d832 <_puts_r+0xb6>
 800d824:	290a      	cmp	r1, #10
 800d826:	d004      	beq.n	800d832 <_puts_r+0xb6>
 800d828:	6823      	ldr	r3, [r4, #0]
 800d82a:	1c5a      	adds	r2, r3, #1
 800d82c:	6022      	str	r2, [r4, #0]
 800d82e:	7019      	strb	r1, [r3, #0]
 800d830:	e7c5      	b.n	800d7be <_puts_r+0x42>
 800d832:	4622      	mov	r2, r4
 800d834:	4628      	mov	r0, r5
 800d836:	f000 f837 	bl	800d8a8 <__swbuf_r>
 800d83a:	3001      	adds	r0, #1
 800d83c:	d1bf      	bne.n	800d7be <_puts_r+0x42>
 800d83e:	e7df      	b.n	800d800 <_puts_r+0x84>
 800d840:	6823      	ldr	r3, [r4, #0]
 800d842:	250a      	movs	r5, #10
 800d844:	1c5a      	adds	r2, r3, #1
 800d846:	6022      	str	r2, [r4, #0]
 800d848:	701d      	strb	r5, [r3, #0]
 800d84a:	e7db      	b.n	800d804 <_puts_r+0x88>
 800d84c:	08010080 	.word	0x08010080
 800d850:	080100a0 	.word	0x080100a0
 800d854:	08010060 	.word	0x08010060

0800d858 <puts>:
 800d858:	4b02      	ldr	r3, [pc, #8]	; (800d864 <puts+0xc>)
 800d85a:	4601      	mov	r1, r0
 800d85c:	6818      	ldr	r0, [r3, #0]
 800d85e:	f7ff bf8d 	b.w	800d77c <_puts_r>
 800d862:	bf00      	nop
 800d864:	200000fc 	.word	0x200000fc

0800d868 <siprintf>:
 800d868:	b40e      	push	{r1, r2, r3}
 800d86a:	b500      	push	{lr}
 800d86c:	b09c      	sub	sp, #112	; 0x70
 800d86e:	ab1d      	add	r3, sp, #116	; 0x74
 800d870:	9002      	str	r0, [sp, #8]
 800d872:	9006      	str	r0, [sp, #24]
 800d874:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d878:	4809      	ldr	r0, [pc, #36]	; (800d8a0 <siprintf+0x38>)
 800d87a:	9107      	str	r1, [sp, #28]
 800d87c:	9104      	str	r1, [sp, #16]
 800d87e:	4909      	ldr	r1, [pc, #36]	; (800d8a4 <siprintf+0x3c>)
 800d880:	f853 2b04 	ldr.w	r2, [r3], #4
 800d884:	9105      	str	r1, [sp, #20]
 800d886:	6800      	ldr	r0, [r0, #0]
 800d888:	9301      	str	r3, [sp, #4]
 800d88a:	a902      	add	r1, sp, #8
 800d88c:	f000 fc28 	bl	800e0e0 <_svfiprintf_r>
 800d890:	9b02      	ldr	r3, [sp, #8]
 800d892:	2200      	movs	r2, #0
 800d894:	701a      	strb	r2, [r3, #0]
 800d896:	b01c      	add	sp, #112	; 0x70
 800d898:	f85d eb04 	ldr.w	lr, [sp], #4
 800d89c:	b003      	add	sp, #12
 800d89e:	4770      	bx	lr
 800d8a0:	200000fc 	.word	0x200000fc
 800d8a4:	ffff0208 	.word	0xffff0208

0800d8a8 <__swbuf_r>:
 800d8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8aa:	460e      	mov	r6, r1
 800d8ac:	4614      	mov	r4, r2
 800d8ae:	4605      	mov	r5, r0
 800d8b0:	b118      	cbz	r0, 800d8ba <__swbuf_r+0x12>
 800d8b2:	6983      	ldr	r3, [r0, #24]
 800d8b4:	b90b      	cbnz	r3, 800d8ba <__swbuf_r+0x12>
 800d8b6:	f000 f9d1 	bl	800dc5c <__sinit>
 800d8ba:	4b21      	ldr	r3, [pc, #132]	; (800d940 <__swbuf_r+0x98>)
 800d8bc:	429c      	cmp	r4, r3
 800d8be:	d12b      	bne.n	800d918 <__swbuf_r+0x70>
 800d8c0:	686c      	ldr	r4, [r5, #4]
 800d8c2:	69a3      	ldr	r3, [r4, #24]
 800d8c4:	60a3      	str	r3, [r4, #8]
 800d8c6:	89a3      	ldrh	r3, [r4, #12]
 800d8c8:	071a      	lsls	r2, r3, #28
 800d8ca:	d52f      	bpl.n	800d92c <__swbuf_r+0x84>
 800d8cc:	6923      	ldr	r3, [r4, #16]
 800d8ce:	b36b      	cbz	r3, 800d92c <__swbuf_r+0x84>
 800d8d0:	6923      	ldr	r3, [r4, #16]
 800d8d2:	6820      	ldr	r0, [r4, #0]
 800d8d4:	1ac0      	subs	r0, r0, r3
 800d8d6:	6963      	ldr	r3, [r4, #20]
 800d8d8:	b2f6      	uxtb	r6, r6
 800d8da:	4283      	cmp	r3, r0
 800d8dc:	4637      	mov	r7, r6
 800d8de:	dc04      	bgt.n	800d8ea <__swbuf_r+0x42>
 800d8e0:	4621      	mov	r1, r4
 800d8e2:	4628      	mov	r0, r5
 800d8e4:	f000 f926 	bl	800db34 <_fflush_r>
 800d8e8:	bb30      	cbnz	r0, 800d938 <__swbuf_r+0x90>
 800d8ea:	68a3      	ldr	r3, [r4, #8]
 800d8ec:	3b01      	subs	r3, #1
 800d8ee:	60a3      	str	r3, [r4, #8]
 800d8f0:	6823      	ldr	r3, [r4, #0]
 800d8f2:	1c5a      	adds	r2, r3, #1
 800d8f4:	6022      	str	r2, [r4, #0]
 800d8f6:	701e      	strb	r6, [r3, #0]
 800d8f8:	6963      	ldr	r3, [r4, #20]
 800d8fa:	3001      	adds	r0, #1
 800d8fc:	4283      	cmp	r3, r0
 800d8fe:	d004      	beq.n	800d90a <__swbuf_r+0x62>
 800d900:	89a3      	ldrh	r3, [r4, #12]
 800d902:	07db      	lsls	r3, r3, #31
 800d904:	d506      	bpl.n	800d914 <__swbuf_r+0x6c>
 800d906:	2e0a      	cmp	r6, #10
 800d908:	d104      	bne.n	800d914 <__swbuf_r+0x6c>
 800d90a:	4621      	mov	r1, r4
 800d90c:	4628      	mov	r0, r5
 800d90e:	f000 f911 	bl	800db34 <_fflush_r>
 800d912:	b988      	cbnz	r0, 800d938 <__swbuf_r+0x90>
 800d914:	4638      	mov	r0, r7
 800d916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d918:	4b0a      	ldr	r3, [pc, #40]	; (800d944 <__swbuf_r+0x9c>)
 800d91a:	429c      	cmp	r4, r3
 800d91c:	d101      	bne.n	800d922 <__swbuf_r+0x7a>
 800d91e:	68ac      	ldr	r4, [r5, #8]
 800d920:	e7cf      	b.n	800d8c2 <__swbuf_r+0x1a>
 800d922:	4b09      	ldr	r3, [pc, #36]	; (800d948 <__swbuf_r+0xa0>)
 800d924:	429c      	cmp	r4, r3
 800d926:	bf08      	it	eq
 800d928:	68ec      	ldreq	r4, [r5, #12]
 800d92a:	e7ca      	b.n	800d8c2 <__swbuf_r+0x1a>
 800d92c:	4621      	mov	r1, r4
 800d92e:	4628      	mov	r0, r5
 800d930:	f000 f80c 	bl	800d94c <__swsetup_r>
 800d934:	2800      	cmp	r0, #0
 800d936:	d0cb      	beq.n	800d8d0 <__swbuf_r+0x28>
 800d938:	f04f 37ff 	mov.w	r7, #4294967295
 800d93c:	e7ea      	b.n	800d914 <__swbuf_r+0x6c>
 800d93e:	bf00      	nop
 800d940:	08010080 	.word	0x08010080
 800d944:	080100a0 	.word	0x080100a0
 800d948:	08010060 	.word	0x08010060

0800d94c <__swsetup_r>:
 800d94c:	4b32      	ldr	r3, [pc, #200]	; (800da18 <__swsetup_r+0xcc>)
 800d94e:	b570      	push	{r4, r5, r6, lr}
 800d950:	681d      	ldr	r5, [r3, #0]
 800d952:	4606      	mov	r6, r0
 800d954:	460c      	mov	r4, r1
 800d956:	b125      	cbz	r5, 800d962 <__swsetup_r+0x16>
 800d958:	69ab      	ldr	r3, [r5, #24]
 800d95a:	b913      	cbnz	r3, 800d962 <__swsetup_r+0x16>
 800d95c:	4628      	mov	r0, r5
 800d95e:	f000 f97d 	bl	800dc5c <__sinit>
 800d962:	4b2e      	ldr	r3, [pc, #184]	; (800da1c <__swsetup_r+0xd0>)
 800d964:	429c      	cmp	r4, r3
 800d966:	d10f      	bne.n	800d988 <__swsetup_r+0x3c>
 800d968:	686c      	ldr	r4, [r5, #4]
 800d96a:	89a3      	ldrh	r3, [r4, #12]
 800d96c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d970:	0719      	lsls	r1, r3, #28
 800d972:	d42c      	bmi.n	800d9ce <__swsetup_r+0x82>
 800d974:	06dd      	lsls	r5, r3, #27
 800d976:	d411      	bmi.n	800d99c <__swsetup_r+0x50>
 800d978:	2309      	movs	r3, #9
 800d97a:	6033      	str	r3, [r6, #0]
 800d97c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d980:	81a3      	strh	r3, [r4, #12]
 800d982:	f04f 30ff 	mov.w	r0, #4294967295
 800d986:	e03e      	b.n	800da06 <__swsetup_r+0xba>
 800d988:	4b25      	ldr	r3, [pc, #148]	; (800da20 <__swsetup_r+0xd4>)
 800d98a:	429c      	cmp	r4, r3
 800d98c:	d101      	bne.n	800d992 <__swsetup_r+0x46>
 800d98e:	68ac      	ldr	r4, [r5, #8]
 800d990:	e7eb      	b.n	800d96a <__swsetup_r+0x1e>
 800d992:	4b24      	ldr	r3, [pc, #144]	; (800da24 <__swsetup_r+0xd8>)
 800d994:	429c      	cmp	r4, r3
 800d996:	bf08      	it	eq
 800d998:	68ec      	ldreq	r4, [r5, #12]
 800d99a:	e7e6      	b.n	800d96a <__swsetup_r+0x1e>
 800d99c:	0758      	lsls	r0, r3, #29
 800d99e:	d512      	bpl.n	800d9c6 <__swsetup_r+0x7a>
 800d9a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9a2:	b141      	cbz	r1, 800d9b6 <__swsetup_r+0x6a>
 800d9a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9a8:	4299      	cmp	r1, r3
 800d9aa:	d002      	beq.n	800d9b2 <__swsetup_r+0x66>
 800d9ac:	4630      	mov	r0, r6
 800d9ae:	f000 fa5b 	bl	800de68 <_free_r>
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	6363      	str	r3, [r4, #52]	; 0x34
 800d9b6:	89a3      	ldrh	r3, [r4, #12]
 800d9b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d9bc:	81a3      	strh	r3, [r4, #12]
 800d9be:	2300      	movs	r3, #0
 800d9c0:	6063      	str	r3, [r4, #4]
 800d9c2:	6923      	ldr	r3, [r4, #16]
 800d9c4:	6023      	str	r3, [r4, #0]
 800d9c6:	89a3      	ldrh	r3, [r4, #12]
 800d9c8:	f043 0308 	orr.w	r3, r3, #8
 800d9cc:	81a3      	strh	r3, [r4, #12]
 800d9ce:	6923      	ldr	r3, [r4, #16]
 800d9d0:	b94b      	cbnz	r3, 800d9e6 <__swsetup_r+0x9a>
 800d9d2:	89a3      	ldrh	r3, [r4, #12]
 800d9d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d9d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9dc:	d003      	beq.n	800d9e6 <__swsetup_r+0x9a>
 800d9de:	4621      	mov	r1, r4
 800d9e0:	4630      	mov	r0, r6
 800d9e2:	f000 fa01 	bl	800dde8 <__smakebuf_r>
 800d9e6:	89a0      	ldrh	r0, [r4, #12]
 800d9e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d9ec:	f010 0301 	ands.w	r3, r0, #1
 800d9f0:	d00a      	beq.n	800da08 <__swsetup_r+0xbc>
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	60a3      	str	r3, [r4, #8]
 800d9f6:	6963      	ldr	r3, [r4, #20]
 800d9f8:	425b      	negs	r3, r3
 800d9fa:	61a3      	str	r3, [r4, #24]
 800d9fc:	6923      	ldr	r3, [r4, #16]
 800d9fe:	b943      	cbnz	r3, 800da12 <__swsetup_r+0xc6>
 800da00:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800da04:	d1ba      	bne.n	800d97c <__swsetup_r+0x30>
 800da06:	bd70      	pop	{r4, r5, r6, pc}
 800da08:	0781      	lsls	r1, r0, #30
 800da0a:	bf58      	it	pl
 800da0c:	6963      	ldrpl	r3, [r4, #20]
 800da0e:	60a3      	str	r3, [r4, #8]
 800da10:	e7f4      	b.n	800d9fc <__swsetup_r+0xb0>
 800da12:	2000      	movs	r0, #0
 800da14:	e7f7      	b.n	800da06 <__swsetup_r+0xba>
 800da16:	bf00      	nop
 800da18:	200000fc 	.word	0x200000fc
 800da1c:	08010080 	.word	0x08010080
 800da20:	080100a0 	.word	0x080100a0
 800da24:	08010060 	.word	0x08010060

0800da28 <__sflush_r>:
 800da28:	898a      	ldrh	r2, [r1, #12]
 800da2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da2e:	4605      	mov	r5, r0
 800da30:	0710      	lsls	r0, r2, #28
 800da32:	460c      	mov	r4, r1
 800da34:	d458      	bmi.n	800dae8 <__sflush_r+0xc0>
 800da36:	684b      	ldr	r3, [r1, #4]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	dc05      	bgt.n	800da48 <__sflush_r+0x20>
 800da3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da3e:	2b00      	cmp	r3, #0
 800da40:	dc02      	bgt.n	800da48 <__sflush_r+0x20>
 800da42:	2000      	movs	r0, #0
 800da44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da4a:	2e00      	cmp	r6, #0
 800da4c:	d0f9      	beq.n	800da42 <__sflush_r+0x1a>
 800da4e:	2300      	movs	r3, #0
 800da50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da54:	682f      	ldr	r7, [r5, #0]
 800da56:	602b      	str	r3, [r5, #0]
 800da58:	d032      	beq.n	800dac0 <__sflush_r+0x98>
 800da5a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da5c:	89a3      	ldrh	r3, [r4, #12]
 800da5e:	075a      	lsls	r2, r3, #29
 800da60:	d505      	bpl.n	800da6e <__sflush_r+0x46>
 800da62:	6863      	ldr	r3, [r4, #4]
 800da64:	1ac0      	subs	r0, r0, r3
 800da66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800da68:	b10b      	cbz	r3, 800da6e <__sflush_r+0x46>
 800da6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800da6c:	1ac0      	subs	r0, r0, r3
 800da6e:	2300      	movs	r3, #0
 800da70:	4602      	mov	r2, r0
 800da72:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da74:	6a21      	ldr	r1, [r4, #32]
 800da76:	4628      	mov	r0, r5
 800da78:	47b0      	blx	r6
 800da7a:	1c43      	adds	r3, r0, #1
 800da7c:	89a3      	ldrh	r3, [r4, #12]
 800da7e:	d106      	bne.n	800da8e <__sflush_r+0x66>
 800da80:	6829      	ldr	r1, [r5, #0]
 800da82:	291d      	cmp	r1, #29
 800da84:	d82c      	bhi.n	800dae0 <__sflush_r+0xb8>
 800da86:	4a2a      	ldr	r2, [pc, #168]	; (800db30 <__sflush_r+0x108>)
 800da88:	40ca      	lsrs	r2, r1
 800da8a:	07d6      	lsls	r6, r2, #31
 800da8c:	d528      	bpl.n	800dae0 <__sflush_r+0xb8>
 800da8e:	2200      	movs	r2, #0
 800da90:	6062      	str	r2, [r4, #4]
 800da92:	04d9      	lsls	r1, r3, #19
 800da94:	6922      	ldr	r2, [r4, #16]
 800da96:	6022      	str	r2, [r4, #0]
 800da98:	d504      	bpl.n	800daa4 <__sflush_r+0x7c>
 800da9a:	1c42      	adds	r2, r0, #1
 800da9c:	d101      	bne.n	800daa2 <__sflush_r+0x7a>
 800da9e:	682b      	ldr	r3, [r5, #0]
 800daa0:	b903      	cbnz	r3, 800daa4 <__sflush_r+0x7c>
 800daa2:	6560      	str	r0, [r4, #84]	; 0x54
 800daa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800daa6:	602f      	str	r7, [r5, #0]
 800daa8:	2900      	cmp	r1, #0
 800daaa:	d0ca      	beq.n	800da42 <__sflush_r+0x1a>
 800daac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dab0:	4299      	cmp	r1, r3
 800dab2:	d002      	beq.n	800daba <__sflush_r+0x92>
 800dab4:	4628      	mov	r0, r5
 800dab6:	f000 f9d7 	bl	800de68 <_free_r>
 800daba:	2000      	movs	r0, #0
 800dabc:	6360      	str	r0, [r4, #52]	; 0x34
 800dabe:	e7c1      	b.n	800da44 <__sflush_r+0x1c>
 800dac0:	6a21      	ldr	r1, [r4, #32]
 800dac2:	2301      	movs	r3, #1
 800dac4:	4628      	mov	r0, r5
 800dac6:	47b0      	blx	r6
 800dac8:	1c41      	adds	r1, r0, #1
 800daca:	d1c7      	bne.n	800da5c <__sflush_r+0x34>
 800dacc:	682b      	ldr	r3, [r5, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d0c4      	beq.n	800da5c <__sflush_r+0x34>
 800dad2:	2b1d      	cmp	r3, #29
 800dad4:	d001      	beq.n	800dada <__sflush_r+0xb2>
 800dad6:	2b16      	cmp	r3, #22
 800dad8:	d101      	bne.n	800dade <__sflush_r+0xb6>
 800dada:	602f      	str	r7, [r5, #0]
 800dadc:	e7b1      	b.n	800da42 <__sflush_r+0x1a>
 800dade:	89a3      	ldrh	r3, [r4, #12]
 800dae0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dae4:	81a3      	strh	r3, [r4, #12]
 800dae6:	e7ad      	b.n	800da44 <__sflush_r+0x1c>
 800dae8:	690f      	ldr	r7, [r1, #16]
 800daea:	2f00      	cmp	r7, #0
 800daec:	d0a9      	beq.n	800da42 <__sflush_r+0x1a>
 800daee:	0793      	lsls	r3, r2, #30
 800daf0:	680e      	ldr	r6, [r1, #0]
 800daf2:	bf08      	it	eq
 800daf4:	694b      	ldreq	r3, [r1, #20]
 800daf6:	600f      	str	r7, [r1, #0]
 800daf8:	bf18      	it	ne
 800dafa:	2300      	movne	r3, #0
 800dafc:	eba6 0807 	sub.w	r8, r6, r7
 800db00:	608b      	str	r3, [r1, #8]
 800db02:	f1b8 0f00 	cmp.w	r8, #0
 800db06:	dd9c      	ble.n	800da42 <__sflush_r+0x1a>
 800db08:	6a21      	ldr	r1, [r4, #32]
 800db0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db0c:	4643      	mov	r3, r8
 800db0e:	463a      	mov	r2, r7
 800db10:	4628      	mov	r0, r5
 800db12:	47b0      	blx	r6
 800db14:	2800      	cmp	r0, #0
 800db16:	dc06      	bgt.n	800db26 <__sflush_r+0xfe>
 800db18:	89a3      	ldrh	r3, [r4, #12]
 800db1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db1e:	81a3      	strh	r3, [r4, #12]
 800db20:	f04f 30ff 	mov.w	r0, #4294967295
 800db24:	e78e      	b.n	800da44 <__sflush_r+0x1c>
 800db26:	4407      	add	r7, r0
 800db28:	eba8 0800 	sub.w	r8, r8, r0
 800db2c:	e7e9      	b.n	800db02 <__sflush_r+0xda>
 800db2e:	bf00      	nop
 800db30:	20400001 	.word	0x20400001

0800db34 <_fflush_r>:
 800db34:	b538      	push	{r3, r4, r5, lr}
 800db36:	690b      	ldr	r3, [r1, #16]
 800db38:	4605      	mov	r5, r0
 800db3a:	460c      	mov	r4, r1
 800db3c:	b913      	cbnz	r3, 800db44 <_fflush_r+0x10>
 800db3e:	2500      	movs	r5, #0
 800db40:	4628      	mov	r0, r5
 800db42:	bd38      	pop	{r3, r4, r5, pc}
 800db44:	b118      	cbz	r0, 800db4e <_fflush_r+0x1a>
 800db46:	6983      	ldr	r3, [r0, #24]
 800db48:	b90b      	cbnz	r3, 800db4e <_fflush_r+0x1a>
 800db4a:	f000 f887 	bl	800dc5c <__sinit>
 800db4e:	4b14      	ldr	r3, [pc, #80]	; (800dba0 <_fflush_r+0x6c>)
 800db50:	429c      	cmp	r4, r3
 800db52:	d11b      	bne.n	800db8c <_fflush_r+0x58>
 800db54:	686c      	ldr	r4, [r5, #4]
 800db56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d0ef      	beq.n	800db3e <_fflush_r+0xa>
 800db5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db60:	07d0      	lsls	r0, r2, #31
 800db62:	d404      	bmi.n	800db6e <_fflush_r+0x3a>
 800db64:	0599      	lsls	r1, r3, #22
 800db66:	d402      	bmi.n	800db6e <_fflush_r+0x3a>
 800db68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db6a:	f000 f915 	bl	800dd98 <__retarget_lock_acquire_recursive>
 800db6e:	4628      	mov	r0, r5
 800db70:	4621      	mov	r1, r4
 800db72:	f7ff ff59 	bl	800da28 <__sflush_r>
 800db76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800db78:	07da      	lsls	r2, r3, #31
 800db7a:	4605      	mov	r5, r0
 800db7c:	d4e0      	bmi.n	800db40 <_fflush_r+0xc>
 800db7e:	89a3      	ldrh	r3, [r4, #12]
 800db80:	059b      	lsls	r3, r3, #22
 800db82:	d4dd      	bmi.n	800db40 <_fflush_r+0xc>
 800db84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800db86:	f000 f908 	bl	800dd9a <__retarget_lock_release_recursive>
 800db8a:	e7d9      	b.n	800db40 <_fflush_r+0xc>
 800db8c:	4b05      	ldr	r3, [pc, #20]	; (800dba4 <_fflush_r+0x70>)
 800db8e:	429c      	cmp	r4, r3
 800db90:	d101      	bne.n	800db96 <_fflush_r+0x62>
 800db92:	68ac      	ldr	r4, [r5, #8]
 800db94:	e7df      	b.n	800db56 <_fflush_r+0x22>
 800db96:	4b04      	ldr	r3, [pc, #16]	; (800dba8 <_fflush_r+0x74>)
 800db98:	429c      	cmp	r4, r3
 800db9a:	bf08      	it	eq
 800db9c:	68ec      	ldreq	r4, [r5, #12]
 800db9e:	e7da      	b.n	800db56 <_fflush_r+0x22>
 800dba0:	08010080 	.word	0x08010080
 800dba4:	080100a0 	.word	0x080100a0
 800dba8:	08010060 	.word	0x08010060

0800dbac <std>:
 800dbac:	2300      	movs	r3, #0
 800dbae:	b510      	push	{r4, lr}
 800dbb0:	4604      	mov	r4, r0
 800dbb2:	e9c0 3300 	strd	r3, r3, [r0]
 800dbb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dbba:	6083      	str	r3, [r0, #8]
 800dbbc:	8181      	strh	r1, [r0, #12]
 800dbbe:	6643      	str	r3, [r0, #100]	; 0x64
 800dbc0:	81c2      	strh	r2, [r0, #14]
 800dbc2:	6183      	str	r3, [r0, #24]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	2208      	movs	r2, #8
 800dbc8:	305c      	adds	r0, #92	; 0x5c
 800dbca:	f7ff fdb7 	bl	800d73c <memset>
 800dbce:	4b05      	ldr	r3, [pc, #20]	; (800dbe4 <std+0x38>)
 800dbd0:	6263      	str	r3, [r4, #36]	; 0x24
 800dbd2:	4b05      	ldr	r3, [pc, #20]	; (800dbe8 <std+0x3c>)
 800dbd4:	62a3      	str	r3, [r4, #40]	; 0x28
 800dbd6:	4b05      	ldr	r3, [pc, #20]	; (800dbec <std+0x40>)
 800dbd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dbda:	4b05      	ldr	r3, [pc, #20]	; (800dbf0 <std+0x44>)
 800dbdc:	6224      	str	r4, [r4, #32]
 800dbde:	6323      	str	r3, [r4, #48]	; 0x30
 800dbe0:	bd10      	pop	{r4, pc}
 800dbe2:	bf00      	nop
 800dbe4:	0800e8dd 	.word	0x0800e8dd
 800dbe8:	0800e8ff 	.word	0x0800e8ff
 800dbec:	0800e937 	.word	0x0800e937
 800dbf0:	0800e95b 	.word	0x0800e95b

0800dbf4 <_cleanup_r>:
 800dbf4:	4901      	ldr	r1, [pc, #4]	; (800dbfc <_cleanup_r+0x8>)
 800dbf6:	f000 b8af 	b.w	800dd58 <_fwalk_reent>
 800dbfa:	bf00      	nop
 800dbfc:	0800db35 	.word	0x0800db35

0800dc00 <__sfmoreglue>:
 800dc00:	b570      	push	{r4, r5, r6, lr}
 800dc02:	2268      	movs	r2, #104	; 0x68
 800dc04:	1e4d      	subs	r5, r1, #1
 800dc06:	4355      	muls	r5, r2
 800dc08:	460e      	mov	r6, r1
 800dc0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dc0e:	f000 f997 	bl	800df40 <_malloc_r>
 800dc12:	4604      	mov	r4, r0
 800dc14:	b140      	cbz	r0, 800dc28 <__sfmoreglue+0x28>
 800dc16:	2100      	movs	r1, #0
 800dc18:	e9c0 1600 	strd	r1, r6, [r0]
 800dc1c:	300c      	adds	r0, #12
 800dc1e:	60a0      	str	r0, [r4, #8]
 800dc20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800dc24:	f7ff fd8a 	bl	800d73c <memset>
 800dc28:	4620      	mov	r0, r4
 800dc2a:	bd70      	pop	{r4, r5, r6, pc}

0800dc2c <__sfp_lock_acquire>:
 800dc2c:	4801      	ldr	r0, [pc, #4]	; (800dc34 <__sfp_lock_acquire+0x8>)
 800dc2e:	f000 b8b3 	b.w	800dd98 <__retarget_lock_acquire_recursive>
 800dc32:	bf00      	nop
 800dc34:	20005f19 	.word	0x20005f19

0800dc38 <__sfp_lock_release>:
 800dc38:	4801      	ldr	r0, [pc, #4]	; (800dc40 <__sfp_lock_release+0x8>)
 800dc3a:	f000 b8ae 	b.w	800dd9a <__retarget_lock_release_recursive>
 800dc3e:	bf00      	nop
 800dc40:	20005f19 	.word	0x20005f19

0800dc44 <__sinit_lock_acquire>:
 800dc44:	4801      	ldr	r0, [pc, #4]	; (800dc4c <__sinit_lock_acquire+0x8>)
 800dc46:	f000 b8a7 	b.w	800dd98 <__retarget_lock_acquire_recursive>
 800dc4a:	bf00      	nop
 800dc4c:	20005f1a 	.word	0x20005f1a

0800dc50 <__sinit_lock_release>:
 800dc50:	4801      	ldr	r0, [pc, #4]	; (800dc58 <__sinit_lock_release+0x8>)
 800dc52:	f000 b8a2 	b.w	800dd9a <__retarget_lock_release_recursive>
 800dc56:	bf00      	nop
 800dc58:	20005f1a 	.word	0x20005f1a

0800dc5c <__sinit>:
 800dc5c:	b510      	push	{r4, lr}
 800dc5e:	4604      	mov	r4, r0
 800dc60:	f7ff fff0 	bl	800dc44 <__sinit_lock_acquire>
 800dc64:	69a3      	ldr	r3, [r4, #24]
 800dc66:	b11b      	cbz	r3, 800dc70 <__sinit+0x14>
 800dc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc6c:	f7ff bff0 	b.w	800dc50 <__sinit_lock_release>
 800dc70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800dc74:	6523      	str	r3, [r4, #80]	; 0x50
 800dc76:	4b13      	ldr	r3, [pc, #76]	; (800dcc4 <__sinit+0x68>)
 800dc78:	4a13      	ldr	r2, [pc, #76]	; (800dcc8 <__sinit+0x6c>)
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	62a2      	str	r2, [r4, #40]	; 0x28
 800dc7e:	42a3      	cmp	r3, r4
 800dc80:	bf04      	itt	eq
 800dc82:	2301      	moveq	r3, #1
 800dc84:	61a3      	streq	r3, [r4, #24]
 800dc86:	4620      	mov	r0, r4
 800dc88:	f000 f820 	bl	800dccc <__sfp>
 800dc8c:	6060      	str	r0, [r4, #4]
 800dc8e:	4620      	mov	r0, r4
 800dc90:	f000 f81c 	bl	800dccc <__sfp>
 800dc94:	60a0      	str	r0, [r4, #8]
 800dc96:	4620      	mov	r0, r4
 800dc98:	f000 f818 	bl	800dccc <__sfp>
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	60e0      	str	r0, [r4, #12]
 800dca0:	2104      	movs	r1, #4
 800dca2:	6860      	ldr	r0, [r4, #4]
 800dca4:	f7ff ff82 	bl	800dbac <std>
 800dca8:	68a0      	ldr	r0, [r4, #8]
 800dcaa:	2201      	movs	r2, #1
 800dcac:	2109      	movs	r1, #9
 800dcae:	f7ff ff7d 	bl	800dbac <std>
 800dcb2:	68e0      	ldr	r0, [r4, #12]
 800dcb4:	2202      	movs	r2, #2
 800dcb6:	2112      	movs	r1, #18
 800dcb8:	f7ff ff78 	bl	800dbac <std>
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	61a3      	str	r3, [r4, #24]
 800dcc0:	e7d2      	b.n	800dc68 <__sinit+0xc>
 800dcc2:	bf00      	nop
 800dcc4:	0801005c 	.word	0x0801005c
 800dcc8:	0800dbf5 	.word	0x0800dbf5

0800dccc <__sfp>:
 800dccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcce:	4607      	mov	r7, r0
 800dcd0:	f7ff ffac 	bl	800dc2c <__sfp_lock_acquire>
 800dcd4:	4b1e      	ldr	r3, [pc, #120]	; (800dd50 <__sfp+0x84>)
 800dcd6:	681e      	ldr	r6, [r3, #0]
 800dcd8:	69b3      	ldr	r3, [r6, #24]
 800dcda:	b913      	cbnz	r3, 800dce2 <__sfp+0x16>
 800dcdc:	4630      	mov	r0, r6
 800dcde:	f7ff ffbd 	bl	800dc5c <__sinit>
 800dce2:	3648      	adds	r6, #72	; 0x48
 800dce4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dce8:	3b01      	subs	r3, #1
 800dcea:	d503      	bpl.n	800dcf4 <__sfp+0x28>
 800dcec:	6833      	ldr	r3, [r6, #0]
 800dcee:	b30b      	cbz	r3, 800dd34 <__sfp+0x68>
 800dcf0:	6836      	ldr	r6, [r6, #0]
 800dcf2:	e7f7      	b.n	800dce4 <__sfp+0x18>
 800dcf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dcf8:	b9d5      	cbnz	r5, 800dd30 <__sfp+0x64>
 800dcfa:	4b16      	ldr	r3, [pc, #88]	; (800dd54 <__sfp+0x88>)
 800dcfc:	60e3      	str	r3, [r4, #12]
 800dcfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dd02:	6665      	str	r5, [r4, #100]	; 0x64
 800dd04:	f000 f847 	bl	800dd96 <__retarget_lock_init_recursive>
 800dd08:	f7ff ff96 	bl	800dc38 <__sfp_lock_release>
 800dd0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dd10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dd14:	6025      	str	r5, [r4, #0]
 800dd16:	61a5      	str	r5, [r4, #24]
 800dd18:	2208      	movs	r2, #8
 800dd1a:	4629      	mov	r1, r5
 800dd1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dd20:	f7ff fd0c 	bl	800d73c <memset>
 800dd24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dd28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd30:	3468      	adds	r4, #104	; 0x68
 800dd32:	e7d9      	b.n	800dce8 <__sfp+0x1c>
 800dd34:	2104      	movs	r1, #4
 800dd36:	4638      	mov	r0, r7
 800dd38:	f7ff ff62 	bl	800dc00 <__sfmoreglue>
 800dd3c:	4604      	mov	r4, r0
 800dd3e:	6030      	str	r0, [r6, #0]
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d1d5      	bne.n	800dcf0 <__sfp+0x24>
 800dd44:	f7ff ff78 	bl	800dc38 <__sfp_lock_release>
 800dd48:	230c      	movs	r3, #12
 800dd4a:	603b      	str	r3, [r7, #0]
 800dd4c:	e7ee      	b.n	800dd2c <__sfp+0x60>
 800dd4e:	bf00      	nop
 800dd50:	0801005c 	.word	0x0801005c
 800dd54:	ffff0001 	.word	0xffff0001

0800dd58 <_fwalk_reent>:
 800dd58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	4688      	mov	r8, r1
 800dd60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dd64:	2700      	movs	r7, #0
 800dd66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dd6a:	f1b9 0901 	subs.w	r9, r9, #1
 800dd6e:	d505      	bpl.n	800dd7c <_fwalk_reent+0x24>
 800dd70:	6824      	ldr	r4, [r4, #0]
 800dd72:	2c00      	cmp	r4, #0
 800dd74:	d1f7      	bne.n	800dd66 <_fwalk_reent+0xe>
 800dd76:	4638      	mov	r0, r7
 800dd78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd7c:	89ab      	ldrh	r3, [r5, #12]
 800dd7e:	2b01      	cmp	r3, #1
 800dd80:	d907      	bls.n	800dd92 <_fwalk_reent+0x3a>
 800dd82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dd86:	3301      	adds	r3, #1
 800dd88:	d003      	beq.n	800dd92 <_fwalk_reent+0x3a>
 800dd8a:	4629      	mov	r1, r5
 800dd8c:	4630      	mov	r0, r6
 800dd8e:	47c0      	blx	r8
 800dd90:	4307      	orrs	r7, r0
 800dd92:	3568      	adds	r5, #104	; 0x68
 800dd94:	e7e9      	b.n	800dd6a <_fwalk_reent+0x12>

0800dd96 <__retarget_lock_init_recursive>:
 800dd96:	4770      	bx	lr

0800dd98 <__retarget_lock_acquire_recursive>:
 800dd98:	4770      	bx	lr

0800dd9a <__retarget_lock_release_recursive>:
 800dd9a:	4770      	bx	lr

0800dd9c <__swhatbuf_r>:
 800dd9c:	b570      	push	{r4, r5, r6, lr}
 800dd9e:	460e      	mov	r6, r1
 800dda0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dda4:	2900      	cmp	r1, #0
 800dda6:	b096      	sub	sp, #88	; 0x58
 800dda8:	4614      	mov	r4, r2
 800ddaa:	461d      	mov	r5, r3
 800ddac:	da08      	bge.n	800ddc0 <__swhatbuf_r+0x24>
 800ddae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	602a      	str	r2, [r5, #0]
 800ddb6:	061a      	lsls	r2, r3, #24
 800ddb8:	d410      	bmi.n	800dddc <__swhatbuf_r+0x40>
 800ddba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ddbe:	e00e      	b.n	800ddde <__swhatbuf_r+0x42>
 800ddc0:	466a      	mov	r2, sp
 800ddc2:	f000 fdf1 	bl	800e9a8 <_fstat_r>
 800ddc6:	2800      	cmp	r0, #0
 800ddc8:	dbf1      	blt.n	800ddae <__swhatbuf_r+0x12>
 800ddca:	9a01      	ldr	r2, [sp, #4]
 800ddcc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ddd0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ddd4:	425a      	negs	r2, r3
 800ddd6:	415a      	adcs	r2, r3
 800ddd8:	602a      	str	r2, [r5, #0]
 800ddda:	e7ee      	b.n	800ddba <__swhatbuf_r+0x1e>
 800dddc:	2340      	movs	r3, #64	; 0x40
 800ddde:	2000      	movs	r0, #0
 800dde0:	6023      	str	r3, [r4, #0]
 800dde2:	b016      	add	sp, #88	; 0x58
 800dde4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dde8 <__smakebuf_r>:
 800dde8:	898b      	ldrh	r3, [r1, #12]
 800ddea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ddec:	079d      	lsls	r5, r3, #30
 800ddee:	4606      	mov	r6, r0
 800ddf0:	460c      	mov	r4, r1
 800ddf2:	d507      	bpl.n	800de04 <__smakebuf_r+0x1c>
 800ddf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ddf8:	6023      	str	r3, [r4, #0]
 800ddfa:	6123      	str	r3, [r4, #16]
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	6163      	str	r3, [r4, #20]
 800de00:	b002      	add	sp, #8
 800de02:	bd70      	pop	{r4, r5, r6, pc}
 800de04:	ab01      	add	r3, sp, #4
 800de06:	466a      	mov	r2, sp
 800de08:	f7ff ffc8 	bl	800dd9c <__swhatbuf_r>
 800de0c:	9900      	ldr	r1, [sp, #0]
 800de0e:	4605      	mov	r5, r0
 800de10:	4630      	mov	r0, r6
 800de12:	f000 f895 	bl	800df40 <_malloc_r>
 800de16:	b948      	cbnz	r0, 800de2c <__smakebuf_r+0x44>
 800de18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de1c:	059a      	lsls	r2, r3, #22
 800de1e:	d4ef      	bmi.n	800de00 <__smakebuf_r+0x18>
 800de20:	f023 0303 	bic.w	r3, r3, #3
 800de24:	f043 0302 	orr.w	r3, r3, #2
 800de28:	81a3      	strh	r3, [r4, #12]
 800de2a:	e7e3      	b.n	800ddf4 <__smakebuf_r+0xc>
 800de2c:	4b0d      	ldr	r3, [pc, #52]	; (800de64 <__smakebuf_r+0x7c>)
 800de2e:	62b3      	str	r3, [r6, #40]	; 0x28
 800de30:	89a3      	ldrh	r3, [r4, #12]
 800de32:	6020      	str	r0, [r4, #0]
 800de34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de38:	81a3      	strh	r3, [r4, #12]
 800de3a:	9b00      	ldr	r3, [sp, #0]
 800de3c:	6163      	str	r3, [r4, #20]
 800de3e:	9b01      	ldr	r3, [sp, #4]
 800de40:	6120      	str	r0, [r4, #16]
 800de42:	b15b      	cbz	r3, 800de5c <__smakebuf_r+0x74>
 800de44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de48:	4630      	mov	r0, r6
 800de4a:	f000 fdbf 	bl	800e9cc <_isatty_r>
 800de4e:	b128      	cbz	r0, 800de5c <__smakebuf_r+0x74>
 800de50:	89a3      	ldrh	r3, [r4, #12]
 800de52:	f023 0303 	bic.w	r3, r3, #3
 800de56:	f043 0301 	orr.w	r3, r3, #1
 800de5a:	81a3      	strh	r3, [r4, #12]
 800de5c:	89a0      	ldrh	r0, [r4, #12]
 800de5e:	4305      	orrs	r5, r0
 800de60:	81a5      	strh	r5, [r4, #12]
 800de62:	e7cd      	b.n	800de00 <__smakebuf_r+0x18>
 800de64:	0800dbf5 	.word	0x0800dbf5

0800de68 <_free_r>:
 800de68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de6a:	2900      	cmp	r1, #0
 800de6c:	d044      	beq.n	800def8 <_free_r+0x90>
 800de6e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de72:	9001      	str	r0, [sp, #4]
 800de74:	2b00      	cmp	r3, #0
 800de76:	f1a1 0404 	sub.w	r4, r1, #4
 800de7a:	bfb8      	it	lt
 800de7c:	18e4      	addlt	r4, r4, r3
 800de7e:	f000 fde1 	bl	800ea44 <__malloc_lock>
 800de82:	4a1e      	ldr	r2, [pc, #120]	; (800defc <_free_r+0x94>)
 800de84:	9801      	ldr	r0, [sp, #4]
 800de86:	6813      	ldr	r3, [r2, #0]
 800de88:	b933      	cbnz	r3, 800de98 <_free_r+0x30>
 800de8a:	6063      	str	r3, [r4, #4]
 800de8c:	6014      	str	r4, [r2, #0]
 800de8e:	b003      	add	sp, #12
 800de90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800de94:	f000 bddc 	b.w	800ea50 <__malloc_unlock>
 800de98:	42a3      	cmp	r3, r4
 800de9a:	d908      	bls.n	800deae <_free_r+0x46>
 800de9c:	6825      	ldr	r5, [r4, #0]
 800de9e:	1961      	adds	r1, r4, r5
 800dea0:	428b      	cmp	r3, r1
 800dea2:	bf01      	itttt	eq
 800dea4:	6819      	ldreq	r1, [r3, #0]
 800dea6:	685b      	ldreq	r3, [r3, #4]
 800dea8:	1949      	addeq	r1, r1, r5
 800deaa:	6021      	streq	r1, [r4, #0]
 800deac:	e7ed      	b.n	800de8a <_free_r+0x22>
 800deae:	461a      	mov	r2, r3
 800deb0:	685b      	ldr	r3, [r3, #4]
 800deb2:	b10b      	cbz	r3, 800deb8 <_free_r+0x50>
 800deb4:	42a3      	cmp	r3, r4
 800deb6:	d9fa      	bls.n	800deae <_free_r+0x46>
 800deb8:	6811      	ldr	r1, [r2, #0]
 800deba:	1855      	adds	r5, r2, r1
 800debc:	42a5      	cmp	r5, r4
 800debe:	d10b      	bne.n	800ded8 <_free_r+0x70>
 800dec0:	6824      	ldr	r4, [r4, #0]
 800dec2:	4421      	add	r1, r4
 800dec4:	1854      	adds	r4, r2, r1
 800dec6:	42a3      	cmp	r3, r4
 800dec8:	6011      	str	r1, [r2, #0]
 800deca:	d1e0      	bne.n	800de8e <_free_r+0x26>
 800decc:	681c      	ldr	r4, [r3, #0]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	6053      	str	r3, [r2, #4]
 800ded2:	4421      	add	r1, r4
 800ded4:	6011      	str	r1, [r2, #0]
 800ded6:	e7da      	b.n	800de8e <_free_r+0x26>
 800ded8:	d902      	bls.n	800dee0 <_free_r+0x78>
 800deda:	230c      	movs	r3, #12
 800dedc:	6003      	str	r3, [r0, #0]
 800dede:	e7d6      	b.n	800de8e <_free_r+0x26>
 800dee0:	6825      	ldr	r5, [r4, #0]
 800dee2:	1961      	adds	r1, r4, r5
 800dee4:	428b      	cmp	r3, r1
 800dee6:	bf04      	itt	eq
 800dee8:	6819      	ldreq	r1, [r3, #0]
 800deea:	685b      	ldreq	r3, [r3, #4]
 800deec:	6063      	str	r3, [r4, #4]
 800deee:	bf04      	itt	eq
 800def0:	1949      	addeq	r1, r1, r5
 800def2:	6021      	streq	r1, [r4, #0]
 800def4:	6054      	str	r4, [r2, #4]
 800def6:	e7ca      	b.n	800de8e <_free_r+0x26>
 800def8:	b003      	add	sp, #12
 800defa:	bd30      	pop	{r4, r5, pc}
 800defc:	20005f1c 	.word	0x20005f1c

0800df00 <sbrk_aligned>:
 800df00:	b570      	push	{r4, r5, r6, lr}
 800df02:	4e0e      	ldr	r6, [pc, #56]	; (800df3c <sbrk_aligned+0x3c>)
 800df04:	460c      	mov	r4, r1
 800df06:	6831      	ldr	r1, [r6, #0]
 800df08:	4605      	mov	r5, r0
 800df0a:	b911      	cbnz	r1, 800df12 <sbrk_aligned+0x12>
 800df0c:	f000 fcd6 	bl	800e8bc <_sbrk_r>
 800df10:	6030      	str	r0, [r6, #0]
 800df12:	4621      	mov	r1, r4
 800df14:	4628      	mov	r0, r5
 800df16:	f000 fcd1 	bl	800e8bc <_sbrk_r>
 800df1a:	1c43      	adds	r3, r0, #1
 800df1c:	d00a      	beq.n	800df34 <sbrk_aligned+0x34>
 800df1e:	1cc4      	adds	r4, r0, #3
 800df20:	f024 0403 	bic.w	r4, r4, #3
 800df24:	42a0      	cmp	r0, r4
 800df26:	d007      	beq.n	800df38 <sbrk_aligned+0x38>
 800df28:	1a21      	subs	r1, r4, r0
 800df2a:	4628      	mov	r0, r5
 800df2c:	f000 fcc6 	bl	800e8bc <_sbrk_r>
 800df30:	3001      	adds	r0, #1
 800df32:	d101      	bne.n	800df38 <sbrk_aligned+0x38>
 800df34:	f04f 34ff 	mov.w	r4, #4294967295
 800df38:	4620      	mov	r0, r4
 800df3a:	bd70      	pop	{r4, r5, r6, pc}
 800df3c:	20005f20 	.word	0x20005f20

0800df40 <_malloc_r>:
 800df40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df44:	1ccd      	adds	r5, r1, #3
 800df46:	f025 0503 	bic.w	r5, r5, #3
 800df4a:	3508      	adds	r5, #8
 800df4c:	2d0c      	cmp	r5, #12
 800df4e:	bf38      	it	cc
 800df50:	250c      	movcc	r5, #12
 800df52:	2d00      	cmp	r5, #0
 800df54:	4607      	mov	r7, r0
 800df56:	db01      	blt.n	800df5c <_malloc_r+0x1c>
 800df58:	42a9      	cmp	r1, r5
 800df5a:	d905      	bls.n	800df68 <_malloc_r+0x28>
 800df5c:	230c      	movs	r3, #12
 800df5e:	603b      	str	r3, [r7, #0]
 800df60:	2600      	movs	r6, #0
 800df62:	4630      	mov	r0, r6
 800df64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df68:	4e2e      	ldr	r6, [pc, #184]	; (800e024 <_malloc_r+0xe4>)
 800df6a:	f000 fd6b 	bl	800ea44 <__malloc_lock>
 800df6e:	6833      	ldr	r3, [r6, #0]
 800df70:	461c      	mov	r4, r3
 800df72:	bb34      	cbnz	r4, 800dfc2 <_malloc_r+0x82>
 800df74:	4629      	mov	r1, r5
 800df76:	4638      	mov	r0, r7
 800df78:	f7ff ffc2 	bl	800df00 <sbrk_aligned>
 800df7c:	1c43      	adds	r3, r0, #1
 800df7e:	4604      	mov	r4, r0
 800df80:	d14d      	bne.n	800e01e <_malloc_r+0xde>
 800df82:	6834      	ldr	r4, [r6, #0]
 800df84:	4626      	mov	r6, r4
 800df86:	2e00      	cmp	r6, #0
 800df88:	d140      	bne.n	800e00c <_malloc_r+0xcc>
 800df8a:	6823      	ldr	r3, [r4, #0]
 800df8c:	4631      	mov	r1, r6
 800df8e:	4638      	mov	r0, r7
 800df90:	eb04 0803 	add.w	r8, r4, r3
 800df94:	f000 fc92 	bl	800e8bc <_sbrk_r>
 800df98:	4580      	cmp	r8, r0
 800df9a:	d13a      	bne.n	800e012 <_malloc_r+0xd2>
 800df9c:	6821      	ldr	r1, [r4, #0]
 800df9e:	3503      	adds	r5, #3
 800dfa0:	1a6d      	subs	r5, r5, r1
 800dfa2:	f025 0503 	bic.w	r5, r5, #3
 800dfa6:	3508      	adds	r5, #8
 800dfa8:	2d0c      	cmp	r5, #12
 800dfaa:	bf38      	it	cc
 800dfac:	250c      	movcc	r5, #12
 800dfae:	4629      	mov	r1, r5
 800dfb0:	4638      	mov	r0, r7
 800dfb2:	f7ff ffa5 	bl	800df00 <sbrk_aligned>
 800dfb6:	3001      	adds	r0, #1
 800dfb8:	d02b      	beq.n	800e012 <_malloc_r+0xd2>
 800dfba:	6823      	ldr	r3, [r4, #0]
 800dfbc:	442b      	add	r3, r5
 800dfbe:	6023      	str	r3, [r4, #0]
 800dfc0:	e00e      	b.n	800dfe0 <_malloc_r+0xa0>
 800dfc2:	6822      	ldr	r2, [r4, #0]
 800dfc4:	1b52      	subs	r2, r2, r5
 800dfc6:	d41e      	bmi.n	800e006 <_malloc_r+0xc6>
 800dfc8:	2a0b      	cmp	r2, #11
 800dfca:	d916      	bls.n	800dffa <_malloc_r+0xba>
 800dfcc:	1961      	adds	r1, r4, r5
 800dfce:	42a3      	cmp	r3, r4
 800dfd0:	6025      	str	r5, [r4, #0]
 800dfd2:	bf18      	it	ne
 800dfd4:	6059      	strne	r1, [r3, #4]
 800dfd6:	6863      	ldr	r3, [r4, #4]
 800dfd8:	bf08      	it	eq
 800dfda:	6031      	streq	r1, [r6, #0]
 800dfdc:	5162      	str	r2, [r4, r5]
 800dfde:	604b      	str	r3, [r1, #4]
 800dfe0:	4638      	mov	r0, r7
 800dfe2:	f104 060b 	add.w	r6, r4, #11
 800dfe6:	f000 fd33 	bl	800ea50 <__malloc_unlock>
 800dfea:	f026 0607 	bic.w	r6, r6, #7
 800dfee:	1d23      	adds	r3, r4, #4
 800dff0:	1af2      	subs	r2, r6, r3
 800dff2:	d0b6      	beq.n	800df62 <_malloc_r+0x22>
 800dff4:	1b9b      	subs	r3, r3, r6
 800dff6:	50a3      	str	r3, [r4, r2]
 800dff8:	e7b3      	b.n	800df62 <_malloc_r+0x22>
 800dffa:	6862      	ldr	r2, [r4, #4]
 800dffc:	42a3      	cmp	r3, r4
 800dffe:	bf0c      	ite	eq
 800e000:	6032      	streq	r2, [r6, #0]
 800e002:	605a      	strne	r2, [r3, #4]
 800e004:	e7ec      	b.n	800dfe0 <_malloc_r+0xa0>
 800e006:	4623      	mov	r3, r4
 800e008:	6864      	ldr	r4, [r4, #4]
 800e00a:	e7b2      	b.n	800df72 <_malloc_r+0x32>
 800e00c:	4634      	mov	r4, r6
 800e00e:	6876      	ldr	r6, [r6, #4]
 800e010:	e7b9      	b.n	800df86 <_malloc_r+0x46>
 800e012:	230c      	movs	r3, #12
 800e014:	603b      	str	r3, [r7, #0]
 800e016:	4638      	mov	r0, r7
 800e018:	f000 fd1a 	bl	800ea50 <__malloc_unlock>
 800e01c:	e7a1      	b.n	800df62 <_malloc_r+0x22>
 800e01e:	6025      	str	r5, [r4, #0]
 800e020:	e7de      	b.n	800dfe0 <_malloc_r+0xa0>
 800e022:	bf00      	nop
 800e024:	20005f1c 	.word	0x20005f1c

0800e028 <__ssputs_r>:
 800e028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e02c:	688e      	ldr	r6, [r1, #8]
 800e02e:	429e      	cmp	r6, r3
 800e030:	4682      	mov	sl, r0
 800e032:	460c      	mov	r4, r1
 800e034:	4690      	mov	r8, r2
 800e036:	461f      	mov	r7, r3
 800e038:	d838      	bhi.n	800e0ac <__ssputs_r+0x84>
 800e03a:	898a      	ldrh	r2, [r1, #12]
 800e03c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e040:	d032      	beq.n	800e0a8 <__ssputs_r+0x80>
 800e042:	6825      	ldr	r5, [r4, #0]
 800e044:	6909      	ldr	r1, [r1, #16]
 800e046:	eba5 0901 	sub.w	r9, r5, r1
 800e04a:	6965      	ldr	r5, [r4, #20]
 800e04c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e050:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e054:	3301      	adds	r3, #1
 800e056:	444b      	add	r3, r9
 800e058:	106d      	asrs	r5, r5, #1
 800e05a:	429d      	cmp	r5, r3
 800e05c:	bf38      	it	cc
 800e05e:	461d      	movcc	r5, r3
 800e060:	0553      	lsls	r3, r2, #21
 800e062:	d531      	bpl.n	800e0c8 <__ssputs_r+0xa0>
 800e064:	4629      	mov	r1, r5
 800e066:	f7ff ff6b 	bl	800df40 <_malloc_r>
 800e06a:	4606      	mov	r6, r0
 800e06c:	b950      	cbnz	r0, 800e084 <__ssputs_r+0x5c>
 800e06e:	230c      	movs	r3, #12
 800e070:	f8ca 3000 	str.w	r3, [sl]
 800e074:	89a3      	ldrh	r3, [r4, #12]
 800e076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e07a:	81a3      	strh	r3, [r4, #12]
 800e07c:	f04f 30ff 	mov.w	r0, #4294967295
 800e080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e084:	6921      	ldr	r1, [r4, #16]
 800e086:	464a      	mov	r2, r9
 800e088:	f7ff fb4a 	bl	800d720 <memcpy>
 800e08c:	89a3      	ldrh	r3, [r4, #12]
 800e08e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e096:	81a3      	strh	r3, [r4, #12]
 800e098:	6126      	str	r6, [r4, #16]
 800e09a:	6165      	str	r5, [r4, #20]
 800e09c:	444e      	add	r6, r9
 800e09e:	eba5 0509 	sub.w	r5, r5, r9
 800e0a2:	6026      	str	r6, [r4, #0]
 800e0a4:	60a5      	str	r5, [r4, #8]
 800e0a6:	463e      	mov	r6, r7
 800e0a8:	42be      	cmp	r6, r7
 800e0aa:	d900      	bls.n	800e0ae <__ssputs_r+0x86>
 800e0ac:	463e      	mov	r6, r7
 800e0ae:	6820      	ldr	r0, [r4, #0]
 800e0b0:	4632      	mov	r2, r6
 800e0b2:	4641      	mov	r1, r8
 800e0b4:	f000 fcac 	bl	800ea10 <memmove>
 800e0b8:	68a3      	ldr	r3, [r4, #8]
 800e0ba:	1b9b      	subs	r3, r3, r6
 800e0bc:	60a3      	str	r3, [r4, #8]
 800e0be:	6823      	ldr	r3, [r4, #0]
 800e0c0:	4433      	add	r3, r6
 800e0c2:	6023      	str	r3, [r4, #0]
 800e0c4:	2000      	movs	r0, #0
 800e0c6:	e7db      	b.n	800e080 <__ssputs_r+0x58>
 800e0c8:	462a      	mov	r2, r5
 800e0ca:	f000 fcc7 	bl	800ea5c <_realloc_r>
 800e0ce:	4606      	mov	r6, r0
 800e0d0:	2800      	cmp	r0, #0
 800e0d2:	d1e1      	bne.n	800e098 <__ssputs_r+0x70>
 800e0d4:	6921      	ldr	r1, [r4, #16]
 800e0d6:	4650      	mov	r0, sl
 800e0d8:	f7ff fec6 	bl	800de68 <_free_r>
 800e0dc:	e7c7      	b.n	800e06e <__ssputs_r+0x46>
	...

0800e0e0 <_svfiprintf_r>:
 800e0e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0e4:	4698      	mov	r8, r3
 800e0e6:	898b      	ldrh	r3, [r1, #12]
 800e0e8:	061b      	lsls	r3, r3, #24
 800e0ea:	b09d      	sub	sp, #116	; 0x74
 800e0ec:	4607      	mov	r7, r0
 800e0ee:	460d      	mov	r5, r1
 800e0f0:	4614      	mov	r4, r2
 800e0f2:	d50e      	bpl.n	800e112 <_svfiprintf_r+0x32>
 800e0f4:	690b      	ldr	r3, [r1, #16]
 800e0f6:	b963      	cbnz	r3, 800e112 <_svfiprintf_r+0x32>
 800e0f8:	2140      	movs	r1, #64	; 0x40
 800e0fa:	f7ff ff21 	bl	800df40 <_malloc_r>
 800e0fe:	6028      	str	r0, [r5, #0]
 800e100:	6128      	str	r0, [r5, #16]
 800e102:	b920      	cbnz	r0, 800e10e <_svfiprintf_r+0x2e>
 800e104:	230c      	movs	r3, #12
 800e106:	603b      	str	r3, [r7, #0]
 800e108:	f04f 30ff 	mov.w	r0, #4294967295
 800e10c:	e0d1      	b.n	800e2b2 <_svfiprintf_r+0x1d2>
 800e10e:	2340      	movs	r3, #64	; 0x40
 800e110:	616b      	str	r3, [r5, #20]
 800e112:	2300      	movs	r3, #0
 800e114:	9309      	str	r3, [sp, #36]	; 0x24
 800e116:	2320      	movs	r3, #32
 800e118:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e11c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e120:	2330      	movs	r3, #48	; 0x30
 800e122:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e2cc <_svfiprintf_r+0x1ec>
 800e126:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e12a:	f04f 0901 	mov.w	r9, #1
 800e12e:	4623      	mov	r3, r4
 800e130:	469a      	mov	sl, r3
 800e132:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e136:	b10a      	cbz	r2, 800e13c <_svfiprintf_r+0x5c>
 800e138:	2a25      	cmp	r2, #37	; 0x25
 800e13a:	d1f9      	bne.n	800e130 <_svfiprintf_r+0x50>
 800e13c:	ebba 0b04 	subs.w	fp, sl, r4
 800e140:	d00b      	beq.n	800e15a <_svfiprintf_r+0x7a>
 800e142:	465b      	mov	r3, fp
 800e144:	4622      	mov	r2, r4
 800e146:	4629      	mov	r1, r5
 800e148:	4638      	mov	r0, r7
 800e14a:	f7ff ff6d 	bl	800e028 <__ssputs_r>
 800e14e:	3001      	adds	r0, #1
 800e150:	f000 80aa 	beq.w	800e2a8 <_svfiprintf_r+0x1c8>
 800e154:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e156:	445a      	add	r2, fp
 800e158:	9209      	str	r2, [sp, #36]	; 0x24
 800e15a:	f89a 3000 	ldrb.w	r3, [sl]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	f000 80a2 	beq.w	800e2a8 <_svfiprintf_r+0x1c8>
 800e164:	2300      	movs	r3, #0
 800e166:	f04f 32ff 	mov.w	r2, #4294967295
 800e16a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e16e:	f10a 0a01 	add.w	sl, sl, #1
 800e172:	9304      	str	r3, [sp, #16]
 800e174:	9307      	str	r3, [sp, #28]
 800e176:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e17a:	931a      	str	r3, [sp, #104]	; 0x68
 800e17c:	4654      	mov	r4, sl
 800e17e:	2205      	movs	r2, #5
 800e180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e184:	4851      	ldr	r0, [pc, #324]	; (800e2cc <_svfiprintf_r+0x1ec>)
 800e186:	f7f2 f823 	bl	80001d0 <memchr>
 800e18a:	9a04      	ldr	r2, [sp, #16]
 800e18c:	b9d8      	cbnz	r0, 800e1c6 <_svfiprintf_r+0xe6>
 800e18e:	06d0      	lsls	r0, r2, #27
 800e190:	bf44      	itt	mi
 800e192:	2320      	movmi	r3, #32
 800e194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e198:	0711      	lsls	r1, r2, #28
 800e19a:	bf44      	itt	mi
 800e19c:	232b      	movmi	r3, #43	; 0x2b
 800e19e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e1a2:	f89a 3000 	ldrb.w	r3, [sl]
 800e1a6:	2b2a      	cmp	r3, #42	; 0x2a
 800e1a8:	d015      	beq.n	800e1d6 <_svfiprintf_r+0xf6>
 800e1aa:	9a07      	ldr	r2, [sp, #28]
 800e1ac:	4654      	mov	r4, sl
 800e1ae:	2000      	movs	r0, #0
 800e1b0:	f04f 0c0a 	mov.w	ip, #10
 800e1b4:	4621      	mov	r1, r4
 800e1b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1ba:	3b30      	subs	r3, #48	; 0x30
 800e1bc:	2b09      	cmp	r3, #9
 800e1be:	d94e      	bls.n	800e25e <_svfiprintf_r+0x17e>
 800e1c0:	b1b0      	cbz	r0, 800e1f0 <_svfiprintf_r+0x110>
 800e1c2:	9207      	str	r2, [sp, #28]
 800e1c4:	e014      	b.n	800e1f0 <_svfiprintf_r+0x110>
 800e1c6:	eba0 0308 	sub.w	r3, r0, r8
 800e1ca:	fa09 f303 	lsl.w	r3, r9, r3
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	9304      	str	r3, [sp, #16]
 800e1d2:	46a2      	mov	sl, r4
 800e1d4:	e7d2      	b.n	800e17c <_svfiprintf_r+0x9c>
 800e1d6:	9b03      	ldr	r3, [sp, #12]
 800e1d8:	1d19      	adds	r1, r3, #4
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	9103      	str	r1, [sp, #12]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	bfbb      	ittet	lt
 800e1e2:	425b      	neglt	r3, r3
 800e1e4:	f042 0202 	orrlt.w	r2, r2, #2
 800e1e8:	9307      	strge	r3, [sp, #28]
 800e1ea:	9307      	strlt	r3, [sp, #28]
 800e1ec:	bfb8      	it	lt
 800e1ee:	9204      	strlt	r2, [sp, #16]
 800e1f0:	7823      	ldrb	r3, [r4, #0]
 800e1f2:	2b2e      	cmp	r3, #46	; 0x2e
 800e1f4:	d10c      	bne.n	800e210 <_svfiprintf_r+0x130>
 800e1f6:	7863      	ldrb	r3, [r4, #1]
 800e1f8:	2b2a      	cmp	r3, #42	; 0x2a
 800e1fa:	d135      	bne.n	800e268 <_svfiprintf_r+0x188>
 800e1fc:	9b03      	ldr	r3, [sp, #12]
 800e1fe:	1d1a      	adds	r2, r3, #4
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	9203      	str	r2, [sp, #12]
 800e204:	2b00      	cmp	r3, #0
 800e206:	bfb8      	it	lt
 800e208:	f04f 33ff 	movlt.w	r3, #4294967295
 800e20c:	3402      	adds	r4, #2
 800e20e:	9305      	str	r3, [sp, #20]
 800e210:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e2dc <_svfiprintf_r+0x1fc>
 800e214:	7821      	ldrb	r1, [r4, #0]
 800e216:	2203      	movs	r2, #3
 800e218:	4650      	mov	r0, sl
 800e21a:	f7f1 ffd9 	bl	80001d0 <memchr>
 800e21e:	b140      	cbz	r0, 800e232 <_svfiprintf_r+0x152>
 800e220:	2340      	movs	r3, #64	; 0x40
 800e222:	eba0 000a 	sub.w	r0, r0, sl
 800e226:	fa03 f000 	lsl.w	r0, r3, r0
 800e22a:	9b04      	ldr	r3, [sp, #16]
 800e22c:	4303      	orrs	r3, r0
 800e22e:	3401      	adds	r4, #1
 800e230:	9304      	str	r3, [sp, #16]
 800e232:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e236:	4826      	ldr	r0, [pc, #152]	; (800e2d0 <_svfiprintf_r+0x1f0>)
 800e238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e23c:	2206      	movs	r2, #6
 800e23e:	f7f1 ffc7 	bl	80001d0 <memchr>
 800e242:	2800      	cmp	r0, #0
 800e244:	d038      	beq.n	800e2b8 <_svfiprintf_r+0x1d8>
 800e246:	4b23      	ldr	r3, [pc, #140]	; (800e2d4 <_svfiprintf_r+0x1f4>)
 800e248:	bb1b      	cbnz	r3, 800e292 <_svfiprintf_r+0x1b2>
 800e24a:	9b03      	ldr	r3, [sp, #12]
 800e24c:	3307      	adds	r3, #7
 800e24e:	f023 0307 	bic.w	r3, r3, #7
 800e252:	3308      	adds	r3, #8
 800e254:	9303      	str	r3, [sp, #12]
 800e256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e258:	4433      	add	r3, r6
 800e25a:	9309      	str	r3, [sp, #36]	; 0x24
 800e25c:	e767      	b.n	800e12e <_svfiprintf_r+0x4e>
 800e25e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e262:	460c      	mov	r4, r1
 800e264:	2001      	movs	r0, #1
 800e266:	e7a5      	b.n	800e1b4 <_svfiprintf_r+0xd4>
 800e268:	2300      	movs	r3, #0
 800e26a:	3401      	adds	r4, #1
 800e26c:	9305      	str	r3, [sp, #20]
 800e26e:	4619      	mov	r1, r3
 800e270:	f04f 0c0a 	mov.w	ip, #10
 800e274:	4620      	mov	r0, r4
 800e276:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e27a:	3a30      	subs	r2, #48	; 0x30
 800e27c:	2a09      	cmp	r2, #9
 800e27e:	d903      	bls.n	800e288 <_svfiprintf_r+0x1a8>
 800e280:	2b00      	cmp	r3, #0
 800e282:	d0c5      	beq.n	800e210 <_svfiprintf_r+0x130>
 800e284:	9105      	str	r1, [sp, #20]
 800e286:	e7c3      	b.n	800e210 <_svfiprintf_r+0x130>
 800e288:	fb0c 2101 	mla	r1, ip, r1, r2
 800e28c:	4604      	mov	r4, r0
 800e28e:	2301      	movs	r3, #1
 800e290:	e7f0      	b.n	800e274 <_svfiprintf_r+0x194>
 800e292:	ab03      	add	r3, sp, #12
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	462a      	mov	r2, r5
 800e298:	4b0f      	ldr	r3, [pc, #60]	; (800e2d8 <_svfiprintf_r+0x1f8>)
 800e29a:	a904      	add	r1, sp, #16
 800e29c:	4638      	mov	r0, r7
 800e29e:	f3af 8000 	nop.w
 800e2a2:	1c42      	adds	r2, r0, #1
 800e2a4:	4606      	mov	r6, r0
 800e2a6:	d1d6      	bne.n	800e256 <_svfiprintf_r+0x176>
 800e2a8:	89ab      	ldrh	r3, [r5, #12]
 800e2aa:	065b      	lsls	r3, r3, #25
 800e2ac:	f53f af2c 	bmi.w	800e108 <_svfiprintf_r+0x28>
 800e2b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e2b2:	b01d      	add	sp, #116	; 0x74
 800e2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2b8:	ab03      	add	r3, sp, #12
 800e2ba:	9300      	str	r3, [sp, #0]
 800e2bc:	462a      	mov	r2, r5
 800e2be:	4b06      	ldr	r3, [pc, #24]	; (800e2d8 <_svfiprintf_r+0x1f8>)
 800e2c0:	a904      	add	r1, sp, #16
 800e2c2:	4638      	mov	r0, r7
 800e2c4:	f000 f9d4 	bl	800e670 <_printf_i>
 800e2c8:	e7eb      	b.n	800e2a2 <_svfiprintf_r+0x1c2>
 800e2ca:	bf00      	nop
 800e2cc:	080100c0 	.word	0x080100c0
 800e2d0:	080100ca 	.word	0x080100ca
 800e2d4:	00000000 	.word	0x00000000
 800e2d8:	0800e029 	.word	0x0800e029
 800e2dc:	080100c6 	.word	0x080100c6

0800e2e0 <__sfputc_r>:
 800e2e0:	6893      	ldr	r3, [r2, #8]
 800e2e2:	3b01      	subs	r3, #1
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	b410      	push	{r4}
 800e2e8:	6093      	str	r3, [r2, #8]
 800e2ea:	da08      	bge.n	800e2fe <__sfputc_r+0x1e>
 800e2ec:	6994      	ldr	r4, [r2, #24]
 800e2ee:	42a3      	cmp	r3, r4
 800e2f0:	db01      	blt.n	800e2f6 <__sfputc_r+0x16>
 800e2f2:	290a      	cmp	r1, #10
 800e2f4:	d103      	bne.n	800e2fe <__sfputc_r+0x1e>
 800e2f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2fa:	f7ff bad5 	b.w	800d8a8 <__swbuf_r>
 800e2fe:	6813      	ldr	r3, [r2, #0]
 800e300:	1c58      	adds	r0, r3, #1
 800e302:	6010      	str	r0, [r2, #0]
 800e304:	7019      	strb	r1, [r3, #0]
 800e306:	4608      	mov	r0, r1
 800e308:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e30c:	4770      	bx	lr

0800e30e <__sfputs_r>:
 800e30e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e310:	4606      	mov	r6, r0
 800e312:	460f      	mov	r7, r1
 800e314:	4614      	mov	r4, r2
 800e316:	18d5      	adds	r5, r2, r3
 800e318:	42ac      	cmp	r4, r5
 800e31a:	d101      	bne.n	800e320 <__sfputs_r+0x12>
 800e31c:	2000      	movs	r0, #0
 800e31e:	e007      	b.n	800e330 <__sfputs_r+0x22>
 800e320:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e324:	463a      	mov	r2, r7
 800e326:	4630      	mov	r0, r6
 800e328:	f7ff ffda 	bl	800e2e0 <__sfputc_r>
 800e32c:	1c43      	adds	r3, r0, #1
 800e32e:	d1f3      	bne.n	800e318 <__sfputs_r+0xa>
 800e330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e334 <_vfiprintf_r>:
 800e334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e338:	460d      	mov	r5, r1
 800e33a:	b09d      	sub	sp, #116	; 0x74
 800e33c:	4614      	mov	r4, r2
 800e33e:	4698      	mov	r8, r3
 800e340:	4606      	mov	r6, r0
 800e342:	b118      	cbz	r0, 800e34c <_vfiprintf_r+0x18>
 800e344:	6983      	ldr	r3, [r0, #24]
 800e346:	b90b      	cbnz	r3, 800e34c <_vfiprintf_r+0x18>
 800e348:	f7ff fc88 	bl	800dc5c <__sinit>
 800e34c:	4b89      	ldr	r3, [pc, #548]	; (800e574 <_vfiprintf_r+0x240>)
 800e34e:	429d      	cmp	r5, r3
 800e350:	d11b      	bne.n	800e38a <_vfiprintf_r+0x56>
 800e352:	6875      	ldr	r5, [r6, #4]
 800e354:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e356:	07d9      	lsls	r1, r3, #31
 800e358:	d405      	bmi.n	800e366 <_vfiprintf_r+0x32>
 800e35a:	89ab      	ldrh	r3, [r5, #12]
 800e35c:	059a      	lsls	r2, r3, #22
 800e35e:	d402      	bmi.n	800e366 <_vfiprintf_r+0x32>
 800e360:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e362:	f7ff fd19 	bl	800dd98 <__retarget_lock_acquire_recursive>
 800e366:	89ab      	ldrh	r3, [r5, #12]
 800e368:	071b      	lsls	r3, r3, #28
 800e36a:	d501      	bpl.n	800e370 <_vfiprintf_r+0x3c>
 800e36c:	692b      	ldr	r3, [r5, #16]
 800e36e:	b9eb      	cbnz	r3, 800e3ac <_vfiprintf_r+0x78>
 800e370:	4629      	mov	r1, r5
 800e372:	4630      	mov	r0, r6
 800e374:	f7ff faea 	bl	800d94c <__swsetup_r>
 800e378:	b1c0      	cbz	r0, 800e3ac <_vfiprintf_r+0x78>
 800e37a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e37c:	07dc      	lsls	r4, r3, #31
 800e37e:	d50e      	bpl.n	800e39e <_vfiprintf_r+0x6a>
 800e380:	f04f 30ff 	mov.w	r0, #4294967295
 800e384:	b01d      	add	sp, #116	; 0x74
 800e386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e38a:	4b7b      	ldr	r3, [pc, #492]	; (800e578 <_vfiprintf_r+0x244>)
 800e38c:	429d      	cmp	r5, r3
 800e38e:	d101      	bne.n	800e394 <_vfiprintf_r+0x60>
 800e390:	68b5      	ldr	r5, [r6, #8]
 800e392:	e7df      	b.n	800e354 <_vfiprintf_r+0x20>
 800e394:	4b79      	ldr	r3, [pc, #484]	; (800e57c <_vfiprintf_r+0x248>)
 800e396:	429d      	cmp	r5, r3
 800e398:	bf08      	it	eq
 800e39a:	68f5      	ldreq	r5, [r6, #12]
 800e39c:	e7da      	b.n	800e354 <_vfiprintf_r+0x20>
 800e39e:	89ab      	ldrh	r3, [r5, #12]
 800e3a0:	0598      	lsls	r0, r3, #22
 800e3a2:	d4ed      	bmi.n	800e380 <_vfiprintf_r+0x4c>
 800e3a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e3a6:	f7ff fcf8 	bl	800dd9a <__retarget_lock_release_recursive>
 800e3aa:	e7e9      	b.n	800e380 <_vfiprintf_r+0x4c>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b0:	2320      	movs	r3, #32
 800e3b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3ba:	2330      	movs	r3, #48	; 0x30
 800e3bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e580 <_vfiprintf_r+0x24c>
 800e3c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3c4:	f04f 0901 	mov.w	r9, #1
 800e3c8:	4623      	mov	r3, r4
 800e3ca:	469a      	mov	sl, r3
 800e3cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3d0:	b10a      	cbz	r2, 800e3d6 <_vfiprintf_r+0xa2>
 800e3d2:	2a25      	cmp	r2, #37	; 0x25
 800e3d4:	d1f9      	bne.n	800e3ca <_vfiprintf_r+0x96>
 800e3d6:	ebba 0b04 	subs.w	fp, sl, r4
 800e3da:	d00b      	beq.n	800e3f4 <_vfiprintf_r+0xc0>
 800e3dc:	465b      	mov	r3, fp
 800e3de:	4622      	mov	r2, r4
 800e3e0:	4629      	mov	r1, r5
 800e3e2:	4630      	mov	r0, r6
 800e3e4:	f7ff ff93 	bl	800e30e <__sfputs_r>
 800e3e8:	3001      	adds	r0, #1
 800e3ea:	f000 80aa 	beq.w	800e542 <_vfiprintf_r+0x20e>
 800e3ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e3f0:	445a      	add	r2, fp
 800e3f2:	9209      	str	r2, [sp, #36]	; 0x24
 800e3f4:	f89a 3000 	ldrb.w	r3, [sl]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	f000 80a2 	beq.w	800e542 <_vfiprintf_r+0x20e>
 800e3fe:	2300      	movs	r3, #0
 800e400:	f04f 32ff 	mov.w	r2, #4294967295
 800e404:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e408:	f10a 0a01 	add.w	sl, sl, #1
 800e40c:	9304      	str	r3, [sp, #16]
 800e40e:	9307      	str	r3, [sp, #28]
 800e410:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e414:	931a      	str	r3, [sp, #104]	; 0x68
 800e416:	4654      	mov	r4, sl
 800e418:	2205      	movs	r2, #5
 800e41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e41e:	4858      	ldr	r0, [pc, #352]	; (800e580 <_vfiprintf_r+0x24c>)
 800e420:	f7f1 fed6 	bl	80001d0 <memchr>
 800e424:	9a04      	ldr	r2, [sp, #16]
 800e426:	b9d8      	cbnz	r0, 800e460 <_vfiprintf_r+0x12c>
 800e428:	06d1      	lsls	r1, r2, #27
 800e42a:	bf44      	itt	mi
 800e42c:	2320      	movmi	r3, #32
 800e42e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e432:	0713      	lsls	r3, r2, #28
 800e434:	bf44      	itt	mi
 800e436:	232b      	movmi	r3, #43	; 0x2b
 800e438:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e43c:	f89a 3000 	ldrb.w	r3, [sl]
 800e440:	2b2a      	cmp	r3, #42	; 0x2a
 800e442:	d015      	beq.n	800e470 <_vfiprintf_r+0x13c>
 800e444:	9a07      	ldr	r2, [sp, #28]
 800e446:	4654      	mov	r4, sl
 800e448:	2000      	movs	r0, #0
 800e44a:	f04f 0c0a 	mov.w	ip, #10
 800e44e:	4621      	mov	r1, r4
 800e450:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e454:	3b30      	subs	r3, #48	; 0x30
 800e456:	2b09      	cmp	r3, #9
 800e458:	d94e      	bls.n	800e4f8 <_vfiprintf_r+0x1c4>
 800e45a:	b1b0      	cbz	r0, 800e48a <_vfiprintf_r+0x156>
 800e45c:	9207      	str	r2, [sp, #28]
 800e45e:	e014      	b.n	800e48a <_vfiprintf_r+0x156>
 800e460:	eba0 0308 	sub.w	r3, r0, r8
 800e464:	fa09 f303 	lsl.w	r3, r9, r3
 800e468:	4313      	orrs	r3, r2
 800e46a:	9304      	str	r3, [sp, #16]
 800e46c:	46a2      	mov	sl, r4
 800e46e:	e7d2      	b.n	800e416 <_vfiprintf_r+0xe2>
 800e470:	9b03      	ldr	r3, [sp, #12]
 800e472:	1d19      	adds	r1, r3, #4
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	9103      	str	r1, [sp, #12]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	bfbb      	ittet	lt
 800e47c:	425b      	neglt	r3, r3
 800e47e:	f042 0202 	orrlt.w	r2, r2, #2
 800e482:	9307      	strge	r3, [sp, #28]
 800e484:	9307      	strlt	r3, [sp, #28]
 800e486:	bfb8      	it	lt
 800e488:	9204      	strlt	r2, [sp, #16]
 800e48a:	7823      	ldrb	r3, [r4, #0]
 800e48c:	2b2e      	cmp	r3, #46	; 0x2e
 800e48e:	d10c      	bne.n	800e4aa <_vfiprintf_r+0x176>
 800e490:	7863      	ldrb	r3, [r4, #1]
 800e492:	2b2a      	cmp	r3, #42	; 0x2a
 800e494:	d135      	bne.n	800e502 <_vfiprintf_r+0x1ce>
 800e496:	9b03      	ldr	r3, [sp, #12]
 800e498:	1d1a      	adds	r2, r3, #4
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	9203      	str	r2, [sp, #12]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	bfb8      	it	lt
 800e4a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4a6:	3402      	adds	r4, #2
 800e4a8:	9305      	str	r3, [sp, #20]
 800e4aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e590 <_vfiprintf_r+0x25c>
 800e4ae:	7821      	ldrb	r1, [r4, #0]
 800e4b0:	2203      	movs	r2, #3
 800e4b2:	4650      	mov	r0, sl
 800e4b4:	f7f1 fe8c 	bl	80001d0 <memchr>
 800e4b8:	b140      	cbz	r0, 800e4cc <_vfiprintf_r+0x198>
 800e4ba:	2340      	movs	r3, #64	; 0x40
 800e4bc:	eba0 000a 	sub.w	r0, r0, sl
 800e4c0:	fa03 f000 	lsl.w	r0, r3, r0
 800e4c4:	9b04      	ldr	r3, [sp, #16]
 800e4c6:	4303      	orrs	r3, r0
 800e4c8:	3401      	adds	r4, #1
 800e4ca:	9304      	str	r3, [sp, #16]
 800e4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4d0:	482c      	ldr	r0, [pc, #176]	; (800e584 <_vfiprintf_r+0x250>)
 800e4d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e4d6:	2206      	movs	r2, #6
 800e4d8:	f7f1 fe7a 	bl	80001d0 <memchr>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	d03f      	beq.n	800e560 <_vfiprintf_r+0x22c>
 800e4e0:	4b29      	ldr	r3, [pc, #164]	; (800e588 <_vfiprintf_r+0x254>)
 800e4e2:	bb1b      	cbnz	r3, 800e52c <_vfiprintf_r+0x1f8>
 800e4e4:	9b03      	ldr	r3, [sp, #12]
 800e4e6:	3307      	adds	r3, #7
 800e4e8:	f023 0307 	bic.w	r3, r3, #7
 800e4ec:	3308      	adds	r3, #8
 800e4ee:	9303      	str	r3, [sp, #12]
 800e4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4f2:	443b      	add	r3, r7
 800e4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4f6:	e767      	b.n	800e3c8 <_vfiprintf_r+0x94>
 800e4f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4fc:	460c      	mov	r4, r1
 800e4fe:	2001      	movs	r0, #1
 800e500:	e7a5      	b.n	800e44e <_vfiprintf_r+0x11a>
 800e502:	2300      	movs	r3, #0
 800e504:	3401      	adds	r4, #1
 800e506:	9305      	str	r3, [sp, #20]
 800e508:	4619      	mov	r1, r3
 800e50a:	f04f 0c0a 	mov.w	ip, #10
 800e50e:	4620      	mov	r0, r4
 800e510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e514:	3a30      	subs	r2, #48	; 0x30
 800e516:	2a09      	cmp	r2, #9
 800e518:	d903      	bls.n	800e522 <_vfiprintf_r+0x1ee>
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	d0c5      	beq.n	800e4aa <_vfiprintf_r+0x176>
 800e51e:	9105      	str	r1, [sp, #20]
 800e520:	e7c3      	b.n	800e4aa <_vfiprintf_r+0x176>
 800e522:	fb0c 2101 	mla	r1, ip, r1, r2
 800e526:	4604      	mov	r4, r0
 800e528:	2301      	movs	r3, #1
 800e52a:	e7f0      	b.n	800e50e <_vfiprintf_r+0x1da>
 800e52c:	ab03      	add	r3, sp, #12
 800e52e:	9300      	str	r3, [sp, #0]
 800e530:	462a      	mov	r2, r5
 800e532:	4b16      	ldr	r3, [pc, #88]	; (800e58c <_vfiprintf_r+0x258>)
 800e534:	a904      	add	r1, sp, #16
 800e536:	4630      	mov	r0, r6
 800e538:	f3af 8000 	nop.w
 800e53c:	4607      	mov	r7, r0
 800e53e:	1c78      	adds	r0, r7, #1
 800e540:	d1d6      	bne.n	800e4f0 <_vfiprintf_r+0x1bc>
 800e542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e544:	07d9      	lsls	r1, r3, #31
 800e546:	d405      	bmi.n	800e554 <_vfiprintf_r+0x220>
 800e548:	89ab      	ldrh	r3, [r5, #12]
 800e54a:	059a      	lsls	r2, r3, #22
 800e54c:	d402      	bmi.n	800e554 <_vfiprintf_r+0x220>
 800e54e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e550:	f7ff fc23 	bl	800dd9a <__retarget_lock_release_recursive>
 800e554:	89ab      	ldrh	r3, [r5, #12]
 800e556:	065b      	lsls	r3, r3, #25
 800e558:	f53f af12 	bmi.w	800e380 <_vfiprintf_r+0x4c>
 800e55c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e55e:	e711      	b.n	800e384 <_vfiprintf_r+0x50>
 800e560:	ab03      	add	r3, sp, #12
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	462a      	mov	r2, r5
 800e566:	4b09      	ldr	r3, [pc, #36]	; (800e58c <_vfiprintf_r+0x258>)
 800e568:	a904      	add	r1, sp, #16
 800e56a:	4630      	mov	r0, r6
 800e56c:	f000 f880 	bl	800e670 <_printf_i>
 800e570:	e7e4      	b.n	800e53c <_vfiprintf_r+0x208>
 800e572:	bf00      	nop
 800e574:	08010080 	.word	0x08010080
 800e578:	080100a0 	.word	0x080100a0
 800e57c:	08010060 	.word	0x08010060
 800e580:	080100c0 	.word	0x080100c0
 800e584:	080100ca 	.word	0x080100ca
 800e588:	00000000 	.word	0x00000000
 800e58c:	0800e30f 	.word	0x0800e30f
 800e590:	080100c6 	.word	0x080100c6

0800e594 <_printf_common>:
 800e594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e598:	4616      	mov	r6, r2
 800e59a:	4699      	mov	r9, r3
 800e59c:	688a      	ldr	r2, [r1, #8]
 800e59e:	690b      	ldr	r3, [r1, #16]
 800e5a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5a4:	4293      	cmp	r3, r2
 800e5a6:	bfb8      	it	lt
 800e5a8:	4613      	movlt	r3, r2
 800e5aa:	6033      	str	r3, [r6, #0]
 800e5ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e5b0:	4607      	mov	r7, r0
 800e5b2:	460c      	mov	r4, r1
 800e5b4:	b10a      	cbz	r2, 800e5ba <_printf_common+0x26>
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	6033      	str	r3, [r6, #0]
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	0699      	lsls	r1, r3, #26
 800e5be:	bf42      	ittt	mi
 800e5c0:	6833      	ldrmi	r3, [r6, #0]
 800e5c2:	3302      	addmi	r3, #2
 800e5c4:	6033      	strmi	r3, [r6, #0]
 800e5c6:	6825      	ldr	r5, [r4, #0]
 800e5c8:	f015 0506 	ands.w	r5, r5, #6
 800e5cc:	d106      	bne.n	800e5dc <_printf_common+0x48>
 800e5ce:	f104 0a19 	add.w	sl, r4, #25
 800e5d2:	68e3      	ldr	r3, [r4, #12]
 800e5d4:	6832      	ldr	r2, [r6, #0]
 800e5d6:	1a9b      	subs	r3, r3, r2
 800e5d8:	42ab      	cmp	r3, r5
 800e5da:	dc26      	bgt.n	800e62a <_printf_common+0x96>
 800e5dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e5e0:	1e13      	subs	r3, r2, #0
 800e5e2:	6822      	ldr	r2, [r4, #0]
 800e5e4:	bf18      	it	ne
 800e5e6:	2301      	movne	r3, #1
 800e5e8:	0692      	lsls	r2, r2, #26
 800e5ea:	d42b      	bmi.n	800e644 <_printf_common+0xb0>
 800e5ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e5f0:	4649      	mov	r1, r9
 800e5f2:	4638      	mov	r0, r7
 800e5f4:	47c0      	blx	r8
 800e5f6:	3001      	adds	r0, #1
 800e5f8:	d01e      	beq.n	800e638 <_printf_common+0xa4>
 800e5fa:	6823      	ldr	r3, [r4, #0]
 800e5fc:	68e5      	ldr	r5, [r4, #12]
 800e5fe:	6832      	ldr	r2, [r6, #0]
 800e600:	f003 0306 	and.w	r3, r3, #6
 800e604:	2b04      	cmp	r3, #4
 800e606:	bf08      	it	eq
 800e608:	1aad      	subeq	r5, r5, r2
 800e60a:	68a3      	ldr	r3, [r4, #8]
 800e60c:	6922      	ldr	r2, [r4, #16]
 800e60e:	bf0c      	ite	eq
 800e610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e614:	2500      	movne	r5, #0
 800e616:	4293      	cmp	r3, r2
 800e618:	bfc4      	itt	gt
 800e61a:	1a9b      	subgt	r3, r3, r2
 800e61c:	18ed      	addgt	r5, r5, r3
 800e61e:	2600      	movs	r6, #0
 800e620:	341a      	adds	r4, #26
 800e622:	42b5      	cmp	r5, r6
 800e624:	d11a      	bne.n	800e65c <_printf_common+0xc8>
 800e626:	2000      	movs	r0, #0
 800e628:	e008      	b.n	800e63c <_printf_common+0xa8>
 800e62a:	2301      	movs	r3, #1
 800e62c:	4652      	mov	r2, sl
 800e62e:	4649      	mov	r1, r9
 800e630:	4638      	mov	r0, r7
 800e632:	47c0      	blx	r8
 800e634:	3001      	adds	r0, #1
 800e636:	d103      	bne.n	800e640 <_printf_common+0xac>
 800e638:	f04f 30ff 	mov.w	r0, #4294967295
 800e63c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e640:	3501      	adds	r5, #1
 800e642:	e7c6      	b.n	800e5d2 <_printf_common+0x3e>
 800e644:	18e1      	adds	r1, r4, r3
 800e646:	1c5a      	adds	r2, r3, #1
 800e648:	2030      	movs	r0, #48	; 0x30
 800e64a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e64e:	4422      	add	r2, r4
 800e650:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e658:	3302      	adds	r3, #2
 800e65a:	e7c7      	b.n	800e5ec <_printf_common+0x58>
 800e65c:	2301      	movs	r3, #1
 800e65e:	4622      	mov	r2, r4
 800e660:	4649      	mov	r1, r9
 800e662:	4638      	mov	r0, r7
 800e664:	47c0      	blx	r8
 800e666:	3001      	adds	r0, #1
 800e668:	d0e6      	beq.n	800e638 <_printf_common+0xa4>
 800e66a:	3601      	adds	r6, #1
 800e66c:	e7d9      	b.n	800e622 <_printf_common+0x8e>
	...

0800e670 <_printf_i>:
 800e670:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e674:	7e0f      	ldrb	r7, [r1, #24]
 800e676:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e678:	2f78      	cmp	r7, #120	; 0x78
 800e67a:	4691      	mov	r9, r2
 800e67c:	4680      	mov	r8, r0
 800e67e:	460c      	mov	r4, r1
 800e680:	469a      	mov	sl, r3
 800e682:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e686:	d807      	bhi.n	800e698 <_printf_i+0x28>
 800e688:	2f62      	cmp	r7, #98	; 0x62
 800e68a:	d80a      	bhi.n	800e6a2 <_printf_i+0x32>
 800e68c:	2f00      	cmp	r7, #0
 800e68e:	f000 80d8 	beq.w	800e842 <_printf_i+0x1d2>
 800e692:	2f58      	cmp	r7, #88	; 0x58
 800e694:	f000 80a3 	beq.w	800e7de <_printf_i+0x16e>
 800e698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e69c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e6a0:	e03a      	b.n	800e718 <_printf_i+0xa8>
 800e6a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e6a6:	2b15      	cmp	r3, #21
 800e6a8:	d8f6      	bhi.n	800e698 <_printf_i+0x28>
 800e6aa:	a101      	add	r1, pc, #4	; (adr r1, 800e6b0 <_printf_i+0x40>)
 800e6ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6b0:	0800e709 	.word	0x0800e709
 800e6b4:	0800e71d 	.word	0x0800e71d
 800e6b8:	0800e699 	.word	0x0800e699
 800e6bc:	0800e699 	.word	0x0800e699
 800e6c0:	0800e699 	.word	0x0800e699
 800e6c4:	0800e699 	.word	0x0800e699
 800e6c8:	0800e71d 	.word	0x0800e71d
 800e6cc:	0800e699 	.word	0x0800e699
 800e6d0:	0800e699 	.word	0x0800e699
 800e6d4:	0800e699 	.word	0x0800e699
 800e6d8:	0800e699 	.word	0x0800e699
 800e6dc:	0800e829 	.word	0x0800e829
 800e6e0:	0800e74d 	.word	0x0800e74d
 800e6e4:	0800e80b 	.word	0x0800e80b
 800e6e8:	0800e699 	.word	0x0800e699
 800e6ec:	0800e699 	.word	0x0800e699
 800e6f0:	0800e84b 	.word	0x0800e84b
 800e6f4:	0800e699 	.word	0x0800e699
 800e6f8:	0800e74d 	.word	0x0800e74d
 800e6fc:	0800e699 	.word	0x0800e699
 800e700:	0800e699 	.word	0x0800e699
 800e704:	0800e813 	.word	0x0800e813
 800e708:	682b      	ldr	r3, [r5, #0]
 800e70a:	1d1a      	adds	r2, r3, #4
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	602a      	str	r2, [r5, #0]
 800e710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e714:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e718:	2301      	movs	r3, #1
 800e71a:	e0a3      	b.n	800e864 <_printf_i+0x1f4>
 800e71c:	6820      	ldr	r0, [r4, #0]
 800e71e:	6829      	ldr	r1, [r5, #0]
 800e720:	0606      	lsls	r6, r0, #24
 800e722:	f101 0304 	add.w	r3, r1, #4
 800e726:	d50a      	bpl.n	800e73e <_printf_i+0xce>
 800e728:	680e      	ldr	r6, [r1, #0]
 800e72a:	602b      	str	r3, [r5, #0]
 800e72c:	2e00      	cmp	r6, #0
 800e72e:	da03      	bge.n	800e738 <_printf_i+0xc8>
 800e730:	232d      	movs	r3, #45	; 0x2d
 800e732:	4276      	negs	r6, r6
 800e734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e738:	485e      	ldr	r0, [pc, #376]	; (800e8b4 <_printf_i+0x244>)
 800e73a:	230a      	movs	r3, #10
 800e73c:	e019      	b.n	800e772 <_printf_i+0x102>
 800e73e:	680e      	ldr	r6, [r1, #0]
 800e740:	602b      	str	r3, [r5, #0]
 800e742:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e746:	bf18      	it	ne
 800e748:	b236      	sxthne	r6, r6
 800e74a:	e7ef      	b.n	800e72c <_printf_i+0xbc>
 800e74c:	682b      	ldr	r3, [r5, #0]
 800e74e:	6820      	ldr	r0, [r4, #0]
 800e750:	1d19      	adds	r1, r3, #4
 800e752:	6029      	str	r1, [r5, #0]
 800e754:	0601      	lsls	r1, r0, #24
 800e756:	d501      	bpl.n	800e75c <_printf_i+0xec>
 800e758:	681e      	ldr	r6, [r3, #0]
 800e75a:	e002      	b.n	800e762 <_printf_i+0xf2>
 800e75c:	0646      	lsls	r6, r0, #25
 800e75e:	d5fb      	bpl.n	800e758 <_printf_i+0xe8>
 800e760:	881e      	ldrh	r6, [r3, #0]
 800e762:	4854      	ldr	r0, [pc, #336]	; (800e8b4 <_printf_i+0x244>)
 800e764:	2f6f      	cmp	r7, #111	; 0x6f
 800e766:	bf0c      	ite	eq
 800e768:	2308      	moveq	r3, #8
 800e76a:	230a      	movne	r3, #10
 800e76c:	2100      	movs	r1, #0
 800e76e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e772:	6865      	ldr	r5, [r4, #4]
 800e774:	60a5      	str	r5, [r4, #8]
 800e776:	2d00      	cmp	r5, #0
 800e778:	bfa2      	ittt	ge
 800e77a:	6821      	ldrge	r1, [r4, #0]
 800e77c:	f021 0104 	bicge.w	r1, r1, #4
 800e780:	6021      	strge	r1, [r4, #0]
 800e782:	b90e      	cbnz	r6, 800e788 <_printf_i+0x118>
 800e784:	2d00      	cmp	r5, #0
 800e786:	d04d      	beq.n	800e824 <_printf_i+0x1b4>
 800e788:	4615      	mov	r5, r2
 800e78a:	fbb6 f1f3 	udiv	r1, r6, r3
 800e78e:	fb03 6711 	mls	r7, r3, r1, r6
 800e792:	5dc7      	ldrb	r7, [r0, r7]
 800e794:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e798:	4637      	mov	r7, r6
 800e79a:	42bb      	cmp	r3, r7
 800e79c:	460e      	mov	r6, r1
 800e79e:	d9f4      	bls.n	800e78a <_printf_i+0x11a>
 800e7a0:	2b08      	cmp	r3, #8
 800e7a2:	d10b      	bne.n	800e7bc <_printf_i+0x14c>
 800e7a4:	6823      	ldr	r3, [r4, #0]
 800e7a6:	07de      	lsls	r6, r3, #31
 800e7a8:	d508      	bpl.n	800e7bc <_printf_i+0x14c>
 800e7aa:	6923      	ldr	r3, [r4, #16]
 800e7ac:	6861      	ldr	r1, [r4, #4]
 800e7ae:	4299      	cmp	r1, r3
 800e7b0:	bfde      	ittt	le
 800e7b2:	2330      	movle	r3, #48	; 0x30
 800e7b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e7b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e7bc:	1b52      	subs	r2, r2, r5
 800e7be:	6122      	str	r2, [r4, #16]
 800e7c0:	f8cd a000 	str.w	sl, [sp]
 800e7c4:	464b      	mov	r3, r9
 800e7c6:	aa03      	add	r2, sp, #12
 800e7c8:	4621      	mov	r1, r4
 800e7ca:	4640      	mov	r0, r8
 800e7cc:	f7ff fee2 	bl	800e594 <_printf_common>
 800e7d0:	3001      	adds	r0, #1
 800e7d2:	d14c      	bne.n	800e86e <_printf_i+0x1fe>
 800e7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e7d8:	b004      	add	sp, #16
 800e7da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7de:	4835      	ldr	r0, [pc, #212]	; (800e8b4 <_printf_i+0x244>)
 800e7e0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e7e4:	6829      	ldr	r1, [r5, #0]
 800e7e6:	6823      	ldr	r3, [r4, #0]
 800e7e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e7ec:	6029      	str	r1, [r5, #0]
 800e7ee:	061d      	lsls	r5, r3, #24
 800e7f0:	d514      	bpl.n	800e81c <_printf_i+0x1ac>
 800e7f2:	07df      	lsls	r7, r3, #31
 800e7f4:	bf44      	itt	mi
 800e7f6:	f043 0320 	orrmi.w	r3, r3, #32
 800e7fa:	6023      	strmi	r3, [r4, #0]
 800e7fc:	b91e      	cbnz	r6, 800e806 <_printf_i+0x196>
 800e7fe:	6823      	ldr	r3, [r4, #0]
 800e800:	f023 0320 	bic.w	r3, r3, #32
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	2310      	movs	r3, #16
 800e808:	e7b0      	b.n	800e76c <_printf_i+0xfc>
 800e80a:	6823      	ldr	r3, [r4, #0]
 800e80c:	f043 0320 	orr.w	r3, r3, #32
 800e810:	6023      	str	r3, [r4, #0]
 800e812:	2378      	movs	r3, #120	; 0x78
 800e814:	4828      	ldr	r0, [pc, #160]	; (800e8b8 <_printf_i+0x248>)
 800e816:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e81a:	e7e3      	b.n	800e7e4 <_printf_i+0x174>
 800e81c:	0659      	lsls	r1, r3, #25
 800e81e:	bf48      	it	mi
 800e820:	b2b6      	uxthmi	r6, r6
 800e822:	e7e6      	b.n	800e7f2 <_printf_i+0x182>
 800e824:	4615      	mov	r5, r2
 800e826:	e7bb      	b.n	800e7a0 <_printf_i+0x130>
 800e828:	682b      	ldr	r3, [r5, #0]
 800e82a:	6826      	ldr	r6, [r4, #0]
 800e82c:	6961      	ldr	r1, [r4, #20]
 800e82e:	1d18      	adds	r0, r3, #4
 800e830:	6028      	str	r0, [r5, #0]
 800e832:	0635      	lsls	r5, r6, #24
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	d501      	bpl.n	800e83c <_printf_i+0x1cc>
 800e838:	6019      	str	r1, [r3, #0]
 800e83a:	e002      	b.n	800e842 <_printf_i+0x1d2>
 800e83c:	0670      	lsls	r0, r6, #25
 800e83e:	d5fb      	bpl.n	800e838 <_printf_i+0x1c8>
 800e840:	8019      	strh	r1, [r3, #0]
 800e842:	2300      	movs	r3, #0
 800e844:	6123      	str	r3, [r4, #16]
 800e846:	4615      	mov	r5, r2
 800e848:	e7ba      	b.n	800e7c0 <_printf_i+0x150>
 800e84a:	682b      	ldr	r3, [r5, #0]
 800e84c:	1d1a      	adds	r2, r3, #4
 800e84e:	602a      	str	r2, [r5, #0]
 800e850:	681d      	ldr	r5, [r3, #0]
 800e852:	6862      	ldr	r2, [r4, #4]
 800e854:	2100      	movs	r1, #0
 800e856:	4628      	mov	r0, r5
 800e858:	f7f1 fcba 	bl	80001d0 <memchr>
 800e85c:	b108      	cbz	r0, 800e862 <_printf_i+0x1f2>
 800e85e:	1b40      	subs	r0, r0, r5
 800e860:	6060      	str	r0, [r4, #4]
 800e862:	6863      	ldr	r3, [r4, #4]
 800e864:	6123      	str	r3, [r4, #16]
 800e866:	2300      	movs	r3, #0
 800e868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e86c:	e7a8      	b.n	800e7c0 <_printf_i+0x150>
 800e86e:	6923      	ldr	r3, [r4, #16]
 800e870:	462a      	mov	r2, r5
 800e872:	4649      	mov	r1, r9
 800e874:	4640      	mov	r0, r8
 800e876:	47d0      	blx	sl
 800e878:	3001      	adds	r0, #1
 800e87a:	d0ab      	beq.n	800e7d4 <_printf_i+0x164>
 800e87c:	6823      	ldr	r3, [r4, #0]
 800e87e:	079b      	lsls	r3, r3, #30
 800e880:	d413      	bmi.n	800e8aa <_printf_i+0x23a>
 800e882:	68e0      	ldr	r0, [r4, #12]
 800e884:	9b03      	ldr	r3, [sp, #12]
 800e886:	4298      	cmp	r0, r3
 800e888:	bfb8      	it	lt
 800e88a:	4618      	movlt	r0, r3
 800e88c:	e7a4      	b.n	800e7d8 <_printf_i+0x168>
 800e88e:	2301      	movs	r3, #1
 800e890:	4632      	mov	r2, r6
 800e892:	4649      	mov	r1, r9
 800e894:	4640      	mov	r0, r8
 800e896:	47d0      	blx	sl
 800e898:	3001      	adds	r0, #1
 800e89a:	d09b      	beq.n	800e7d4 <_printf_i+0x164>
 800e89c:	3501      	adds	r5, #1
 800e89e:	68e3      	ldr	r3, [r4, #12]
 800e8a0:	9903      	ldr	r1, [sp, #12]
 800e8a2:	1a5b      	subs	r3, r3, r1
 800e8a4:	42ab      	cmp	r3, r5
 800e8a6:	dcf2      	bgt.n	800e88e <_printf_i+0x21e>
 800e8a8:	e7eb      	b.n	800e882 <_printf_i+0x212>
 800e8aa:	2500      	movs	r5, #0
 800e8ac:	f104 0619 	add.w	r6, r4, #25
 800e8b0:	e7f5      	b.n	800e89e <_printf_i+0x22e>
 800e8b2:	bf00      	nop
 800e8b4:	080100d1 	.word	0x080100d1
 800e8b8:	080100e2 	.word	0x080100e2

0800e8bc <_sbrk_r>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4d06      	ldr	r5, [pc, #24]	; (800e8d8 <_sbrk_r+0x1c>)
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	4608      	mov	r0, r1
 800e8c6:	602b      	str	r3, [r5, #0]
 800e8c8:	f7f4 fd9e 	bl	8003408 <_sbrk>
 800e8cc:	1c43      	adds	r3, r0, #1
 800e8ce:	d102      	bne.n	800e8d6 <_sbrk_r+0x1a>
 800e8d0:	682b      	ldr	r3, [r5, #0]
 800e8d2:	b103      	cbz	r3, 800e8d6 <_sbrk_r+0x1a>
 800e8d4:	6023      	str	r3, [r4, #0]
 800e8d6:	bd38      	pop	{r3, r4, r5, pc}
 800e8d8:	20005f24 	.word	0x20005f24

0800e8dc <__sread>:
 800e8dc:	b510      	push	{r4, lr}
 800e8de:	460c      	mov	r4, r1
 800e8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e8e4:	f000 f8ea 	bl	800eabc <_read_r>
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	bfab      	itete	ge
 800e8ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e8ee:	89a3      	ldrhlt	r3, [r4, #12]
 800e8f0:	181b      	addge	r3, r3, r0
 800e8f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e8f6:	bfac      	ite	ge
 800e8f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e8fa:	81a3      	strhlt	r3, [r4, #12]
 800e8fc:	bd10      	pop	{r4, pc}

0800e8fe <__swrite>:
 800e8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e902:	461f      	mov	r7, r3
 800e904:	898b      	ldrh	r3, [r1, #12]
 800e906:	05db      	lsls	r3, r3, #23
 800e908:	4605      	mov	r5, r0
 800e90a:	460c      	mov	r4, r1
 800e90c:	4616      	mov	r6, r2
 800e90e:	d505      	bpl.n	800e91c <__swrite+0x1e>
 800e910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e914:	2302      	movs	r3, #2
 800e916:	2200      	movs	r2, #0
 800e918:	f000 f868 	bl	800e9ec <_lseek_r>
 800e91c:	89a3      	ldrh	r3, [r4, #12]
 800e91e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e926:	81a3      	strh	r3, [r4, #12]
 800e928:	4632      	mov	r2, r6
 800e92a:	463b      	mov	r3, r7
 800e92c:	4628      	mov	r0, r5
 800e92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e932:	f000 b817 	b.w	800e964 <_write_r>

0800e936 <__sseek>:
 800e936:	b510      	push	{r4, lr}
 800e938:	460c      	mov	r4, r1
 800e93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e93e:	f000 f855 	bl	800e9ec <_lseek_r>
 800e942:	1c43      	adds	r3, r0, #1
 800e944:	89a3      	ldrh	r3, [r4, #12]
 800e946:	bf15      	itete	ne
 800e948:	6560      	strne	r0, [r4, #84]	; 0x54
 800e94a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e94e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e952:	81a3      	strheq	r3, [r4, #12]
 800e954:	bf18      	it	ne
 800e956:	81a3      	strhne	r3, [r4, #12]
 800e958:	bd10      	pop	{r4, pc}

0800e95a <__sclose>:
 800e95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e95e:	f000 b813 	b.w	800e988 <_close_r>
	...

0800e964 <_write_r>:
 800e964:	b538      	push	{r3, r4, r5, lr}
 800e966:	4d07      	ldr	r5, [pc, #28]	; (800e984 <_write_r+0x20>)
 800e968:	4604      	mov	r4, r0
 800e96a:	4608      	mov	r0, r1
 800e96c:	4611      	mov	r1, r2
 800e96e:	2200      	movs	r2, #0
 800e970:	602a      	str	r2, [r5, #0]
 800e972:	461a      	mov	r2, r3
 800e974:	f7f2 faf6 	bl	8000f64 <_write>
 800e978:	1c43      	adds	r3, r0, #1
 800e97a:	d102      	bne.n	800e982 <_write_r+0x1e>
 800e97c:	682b      	ldr	r3, [r5, #0]
 800e97e:	b103      	cbz	r3, 800e982 <_write_r+0x1e>
 800e980:	6023      	str	r3, [r4, #0]
 800e982:	bd38      	pop	{r3, r4, r5, pc}
 800e984:	20005f24 	.word	0x20005f24

0800e988 <_close_r>:
 800e988:	b538      	push	{r3, r4, r5, lr}
 800e98a:	4d06      	ldr	r5, [pc, #24]	; (800e9a4 <_close_r+0x1c>)
 800e98c:	2300      	movs	r3, #0
 800e98e:	4604      	mov	r4, r0
 800e990:	4608      	mov	r0, r1
 800e992:	602b      	str	r3, [r5, #0]
 800e994:	f7f4 fd03 	bl	800339e <_close>
 800e998:	1c43      	adds	r3, r0, #1
 800e99a:	d102      	bne.n	800e9a2 <_close_r+0x1a>
 800e99c:	682b      	ldr	r3, [r5, #0]
 800e99e:	b103      	cbz	r3, 800e9a2 <_close_r+0x1a>
 800e9a0:	6023      	str	r3, [r4, #0]
 800e9a2:	bd38      	pop	{r3, r4, r5, pc}
 800e9a4:	20005f24 	.word	0x20005f24

0800e9a8 <_fstat_r>:
 800e9a8:	b538      	push	{r3, r4, r5, lr}
 800e9aa:	4d07      	ldr	r5, [pc, #28]	; (800e9c8 <_fstat_r+0x20>)
 800e9ac:	2300      	movs	r3, #0
 800e9ae:	4604      	mov	r4, r0
 800e9b0:	4608      	mov	r0, r1
 800e9b2:	4611      	mov	r1, r2
 800e9b4:	602b      	str	r3, [r5, #0]
 800e9b6:	f7f4 fcfe 	bl	80033b6 <_fstat>
 800e9ba:	1c43      	adds	r3, r0, #1
 800e9bc:	d102      	bne.n	800e9c4 <_fstat_r+0x1c>
 800e9be:	682b      	ldr	r3, [r5, #0]
 800e9c0:	b103      	cbz	r3, 800e9c4 <_fstat_r+0x1c>
 800e9c2:	6023      	str	r3, [r4, #0]
 800e9c4:	bd38      	pop	{r3, r4, r5, pc}
 800e9c6:	bf00      	nop
 800e9c8:	20005f24 	.word	0x20005f24

0800e9cc <_isatty_r>:
 800e9cc:	b538      	push	{r3, r4, r5, lr}
 800e9ce:	4d06      	ldr	r5, [pc, #24]	; (800e9e8 <_isatty_r+0x1c>)
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	4608      	mov	r0, r1
 800e9d6:	602b      	str	r3, [r5, #0]
 800e9d8:	f7f4 fcfd 	bl	80033d6 <_isatty>
 800e9dc:	1c43      	adds	r3, r0, #1
 800e9de:	d102      	bne.n	800e9e6 <_isatty_r+0x1a>
 800e9e0:	682b      	ldr	r3, [r5, #0]
 800e9e2:	b103      	cbz	r3, 800e9e6 <_isatty_r+0x1a>
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	bd38      	pop	{r3, r4, r5, pc}
 800e9e8:	20005f24 	.word	0x20005f24

0800e9ec <_lseek_r>:
 800e9ec:	b538      	push	{r3, r4, r5, lr}
 800e9ee:	4d07      	ldr	r5, [pc, #28]	; (800ea0c <_lseek_r+0x20>)
 800e9f0:	4604      	mov	r4, r0
 800e9f2:	4608      	mov	r0, r1
 800e9f4:	4611      	mov	r1, r2
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	602a      	str	r2, [r5, #0]
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	f7f4 fcf6 	bl	80033ec <_lseek>
 800ea00:	1c43      	adds	r3, r0, #1
 800ea02:	d102      	bne.n	800ea0a <_lseek_r+0x1e>
 800ea04:	682b      	ldr	r3, [r5, #0]
 800ea06:	b103      	cbz	r3, 800ea0a <_lseek_r+0x1e>
 800ea08:	6023      	str	r3, [r4, #0]
 800ea0a:	bd38      	pop	{r3, r4, r5, pc}
 800ea0c:	20005f24 	.word	0x20005f24

0800ea10 <memmove>:
 800ea10:	4288      	cmp	r0, r1
 800ea12:	b510      	push	{r4, lr}
 800ea14:	eb01 0402 	add.w	r4, r1, r2
 800ea18:	d902      	bls.n	800ea20 <memmove+0x10>
 800ea1a:	4284      	cmp	r4, r0
 800ea1c:	4623      	mov	r3, r4
 800ea1e:	d807      	bhi.n	800ea30 <memmove+0x20>
 800ea20:	1e43      	subs	r3, r0, #1
 800ea22:	42a1      	cmp	r1, r4
 800ea24:	d008      	beq.n	800ea38 <memmove+0x28>
 800ea26:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ea2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ea2e:	e7f8      	b.n	800ea22 <memmove+0x12>
 800ea30:	4402      	add	r2, r0
 800ea32:	4601      	mov	r1, r0
 800ea34:	428a      	cmp	r2, r1
 800ea36:	d100      	bne.n	800ea3a <memmove+0x2a>
 800ea38:	bd10      	pop	{r4, pc}
 800ea3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ea3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ea42:	e7f7      	b.n	800ea34 <memmove+0x24>

0800ea44 <__malloc_lock>:
 800ea44:	4801      	ldr	r0, [pc, #4]	; (800ea4c <__malloc_lock+0x8>)
 800ea46:	f7ff b9a7 	b.w	800dd98 <__retarget_lock_acquire_recursive>
 800ea4a:	bf00      	nop
 800ea4c:	20005f18 	.word	0x20005f18

0800ea50 <__malloc_unlock>:
 800ea50:	4801      	ldr	r0, [pc, #4]	; (800ea58 <__malloc_unlock+0x8>)
 800ea52:	f7ff b9a2 	b.w	800dd9a <__retarget_lock_release_recursive>
 800ea56:	bf00      	nop
 800ea58:	20005f18 	.word	0x20005f18

0800ea5c <_realloc_r>:
 800ea5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea60:	4680      	mov	r8, r0
 800ea62:	4614      	mov	r4, r2
 800ea64:	460e      	mov	r6, r1
 800ea66:	b921      	cbnz	r1, 800ea72 <_realloc_r+0x16>
 800ea68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	f7ff ba67 	b.w	800df40 <_malloc_r>
 800ea72:	b92a      	cbnz	r2, 800ea80 <_realloc_r+0x24>
 800ea74:	f7ff f9f8 	bl	800de68 <_free_r>
 800ea78:	4625      	mov	r5, r4
 800ea7a:	4628      	mov	r0, r5
 800ea7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea80:	f000 f82e 	bl	800eae0 <_malloc_usable_size_r>
 800ea84:	4284      	cmp	r4, r0
 800ea86:	4607      	mov	r7, r0
 800ea88:	d802      	bhi.n	800ea90 <_realloc_r+0x34>
 800ea8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea8e:	d812      	bhi.n	800eab6 <_realloc_r+0x5a>
 800ea90:	4621      	mov	r1, r4
 800ea92:	4640      	mov	r0, r8
 800ea94:	f7ff fa54 	bl	800df40 <_malloc_r>
 800ea98:	4605      	mov	r5, r0
 800ea9a:	2800      	cmp	r0, #0
 800ea9c:	d0ed      	beq.n	800ea7a <_realloc_r+0x1e>
 800ea9e:	42bc      	cmp	r4, r7
 800eaa0:	4622      	mov	r2, r4
 800eaa2:	4631      	mov	r1, r6
 800eaa4:	bf28      	it	cs
 800eaa6:	463a      	movcs	r2, r7
 800eaa8:	f7fe fe3a 	bl	800d720 <memcpy>
 800eaac:	4631      	mov	r1, r6
 800eaae:	4640      	mov	r0, r8
 800eab0:	f7ff f9da 	bl	800de68 <_free_r>
 800eab4:	e7e1      	b.n	800ea7a <_realloc_r+0x1e>
 800eab6:	4635      	mov	r5, r6
 800eab8:	e7df      	b.n	800ea7a <_realloc_r+0x1e>
	...

0800eabc <_read_r>:
 800eabc:	b538      	push	{r3, r4, r5, lr}
 800eabe:	4d07      	ldr	r5, [pc, #28]	; (800eadc <_read_r+0x20>)
 800eac0:	4604      	mov	r4, r0
 800eac2:	4608      	mov	r0, r1
 800eac4:	4611      	mov	r1, r2
 800eac6:	2200      	movs	r2, #0
 800eac8:	602a      	str	r2, [r5, #0]
 800eaca:	461a      	mov	r2, r3
 800eacc:	f7f4 fc4a 	bl	8003364 <_read>
 800ead0:	1c43      	adds	r3, r0, #1
 800ead2:	d102      	bne.n	800eada <_read_r+0x1e>
 800ead4:	682b      	ldr	r3, [r5, #0]
 800ead6:	b103      	cbz	r3, 800eada <_read_r+0x1e>
 800ead8:	6023      	str	r3, [r4, #0]
 800eada:	bd38      	pop	{r3, r4, r5, pc}
 800eadc:	20005f24 	.word	0x20005f24

0800eae0 <_malloc_usable_size_r>:
 800eae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eae4:	1f18      	subs	r0, r3, #4
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	bfbc      	itt	lt
 800eaea:	580b      	ldrlt	r3, [r1, r0]
 800eaec:	18c0      	addlt	r0, r0, r3
 800eaee:	4770      	bx	lr

0800eaf0 <_init>:
 800eaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaf2:	bf00      	nop
 800eaf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eaf6:	bc08      	pop	{r3}
 800eaf8:	469e      	mov	lr, r3
 800eafa:	4770      	bx	lr

0800eafc <_fini>:
 800eafc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eafe:	bf00      	nop
 800eb00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb02:	bc08      	pop	{r3}
 800eb04:	469e      	mov	lr, r3
 800eb06:	4770      	bx	lr
