
wells_washing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb80  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b80  0800ed10  0800ed10  0001ed10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010890  08010890  00030160  2**0
                  CONTENTS
  4 .ARM          00000008  08010890  08010890  00020890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010898  08010898  00030160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010898  08010898  00020898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801089c  0801089c  0002089c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  080108a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030160  2**0
                  CONTENTS
 10 .bss          00005fcc  20000160  20000160  00030160  2**2
                  ALLOC
 11 ._user_heap_stack 0000c004  2000612c  2000612c  00030160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021f9a  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005507  00000000  00000000  0005212a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da0  00000000  00000000  00057638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001b80  00000000  00000000  000593d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000287c3  00000000  00000000  0005af58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002c3b5  00000000  00000000  0008371b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d675c  00000000  00000000  000afad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018622c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008498  00000000  00000000  0018627c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ecf8 	.word	0x0800ecf8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	0800ecf8 	.word	0x0800ecf8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <is_data_init>:

_def_step step;


int is_data_init()
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
	if(system_data.flash_data.factory_code != FACTORY_CODE)
 8000578:	4b07      	ldr	r3, [pc, #28]	; (8000598 <is_data_init+0x24>)
 800057a:	f8b3 3fcc 	ldrh.w	r3, [r3, #4044]	; 0xfcc
 800057e:	f645 22ab 	movw	r2, #23211	; 0x5aab
 8000582:	4293      	cmp	r3, r2
 8000584:	d001      	beq.n	800058a <is_data_init+0x16>
	{
		return 0;
 8000586:	2300      	movs	r3, #0
 8000588:	e000      	b.n	800058c <is_data_init+0x18>
	}
	return 1;
 800058a:	2301      	movs	r3, #1
}
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	2000017c 	.word	0x2000017c

0800059c <dt_calculator_pg_stepnumber>:

void dt_calculator_pg_stepnumber(void){
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
	for(int i=0;i<10;i++)
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	e031      	b.n	800060c <dt_calculator_pg_stepnumber+0x70>
	{
		system_data.pg_stepnumber[i] =0;
 80005a8:	4a1d      	ldr	r2, [pc, #116]	; (8000620 <dt_calculator_pg_stepnumber+0x84>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	f503 63fd 	add.w	r3, r3, #2024	; 0x7e8
 80005b0:	2100      	movs	r1, #0
 80005b2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j=0;j<25;j++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	603b      	str	r3, [r7, #0]
 80005ba:	e01f      	b.n	80005fc <dt_calculator_pg_stepnumber+0x60>
		{
			if(system_data.flash_data.Program_para[i][j].type == STEP_TYPE_NONE )
 80005bc:	4918      	ldr	r1, [pc, #96]	; (8000620 <dt_calculator_pg_stepnumber+0x84>)
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	4613      	mov	r3, r2
 80005c2:	009b      	lsls	r3, r3, #2
 80005c4:	4413      	add	r3, r2
 80005c6:	009a      	lsls	r2, r3, #2
 80005c8:	4413      	add	r3, r2
 80005ca:	683a      	ldr	r2, [r7, #0]
 80005cc:	4413      	add	r3, r2
 80005ce:	011b      	lsls	r3, r3, #4
 80005d0:	440b      	add	r3, r1
 80005d2:	332c      	adds	r3, #44	; 0x2c
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d014      	beq.n	8000604 <dt_calculator_pg_stepnumber+0x68>
			{
				break;
			}
			system_data.pg_stepnumber[i]++;
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <dt_calculator_pg_stepnumber+0x84>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f503 63fd 	add.w	r3, r3, #2024	; 0x7e8
 80005e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005e6:	3301      	adds	r3, #1
 80005e8:	b299      	uxth	r1, r3
 80005ea:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <dt_calculator_pg_stepnumber+0x84>)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f503 63fd 	add.w	r3, r3, #2024	; 0x7e8
 80005f2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int j=0;j<25;j++)
 80005f6:	683b      	ldr	r3, [r7, #0]
 80005f8:	3301      	adds	r3, #1
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	2b18      	cmp	r3, #24
 8000600:	dddc      	ble.n	80005bc <dt_calculator_pg_stepnumber+0x20>
 8000602:	e000      	b.n	8000606 <dt_calculator_pg_stepnumber+0x6a>
				break;
 8000604:	bf00      	nop
	for(int i=0;i<10;i++)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	3301      	adds	r3, #1
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2b09      	cmp	r3, #9
 8000610:	ddca      	ble.n	80005a8 <dt_calculator_pg_stepnumber+0xc>
		}
	}
}
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	2000017c 	.word	0x2000017c

08000624 <is_step_differrent>:
//			system_data.pg_stepnumber[i]++;
//		}
	}
}

int is_step_differrent(uint8_t pg,uint8_t stepindex ,_def_step step){
 8000624:	b082      	sub	sp, #8
 8000626:	b580      	push	{r7, lr}
 8000628:	b082      	sub	sp, #8
 800062a:	af00      	add	r7, sp, #0
 800062c:	f107 0c10 	add.w	ip, r7, #16
 8000630:	e88c 000c 	stmia.w	ip, {r2, r3}
 8000634:	4603      	mov	r3, r0
 8000636:	71fb      	strb	r3, [r7, #7]
 8000638:	460b      	mov	r3, r1
 800063a:	71bb      	strb	r3, [r7, #6]
	return memcmp(&system_data.flash_data.Program_para[pg][stepindex], &step, sizeof(_def_step));
 800063c:	79fa      	ldrb	r2, [r7, #7]
 800063e:	79b9      	ldrb	r1, [r7, #6]
 8000640:	4613      	mov	r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	4413      	add	r3, r2
 8000646:	009a      	lsls	r2, r3, #2
 8000648:	4413      	add	r3, r2
 800064a:	440b      	add	r3, r1
 800064c:	011b      	lsls	r3, r3, #4
 800064e:	3328      	adds	r3, #40	; 0x28
 8000650:	4a08      	ldr	r2, [pc, #32]	; (8000674 <is_step_differrent+0x50>)
 8000652:	4413      	add	r3, r2
 8000654:	3304      	adds	r3, #4
 8000656:	2210      	movs	r2, #16
 8000658:	f107 0110 	add.w	r1, r7, #16
 800065c:	4618      	mov	r0, r3
 800065e:	f00d f953 	bl	800d908 <memcmp>
 8000662:	4603      	mov	r3, r0
}
 8000664:	4618      	mov	r0, r3
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800066e:	b002      	add	sp, #8
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	2000017c 	.word	0x2000017c

08000678 <dt_Modify_step>:

void dt_Modify_step(uint8_t pg,uint8_t stepindex ,_def_step step)
{
 8000678:	b082      	sub	sp, #8
 800067a:	b5b0      	push	{r4, r5, r7, lr}
 800067c:	b084      	sub	sp, #16
 800067e:	af02      	add	r7, sp, #8
 8000680:	f107 0418 	add.w	r4, r7, #24
 8000684:	e884 000c 	stmia.w	r4, {r2, r3}
 8000688:	4603      	mov	r3, r0
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	460b      	mov	r3, r1
 800068e:	71bb      	strb	r3, [r7, #6]
	if(is_step_differrent(pg,stepindex ,step))
 8000690:	79bd      	ldrb	r5, [r7, #6]
 8000692:	79fc      	ldrb	r4, [r7, #7]
 8000694:	466a      	mov	r2, sp
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800069e:	e882 0003 	stmia.w	r2, {r0, r1}
 80006a2:	f107 0318 	add.w	r3, r7, #24
 80006a6:	cb0c      	ldmia	r3, {r2, r3}
 80006a8:	4629      	mov	r1, r5
 80006aa:	4620      	mov	r0, r4
 80006ac:	f7ff ffba 	bl	8000624 <is_step_differrent>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d014      	beq.n	80006e0 <dt_Modify_step+0x68>
	{
		memcpy(&system_data.flash_data.Program_para[pg][stepindex],&step,sizeof(_def_step));
 80006b6:	79fa      	ldrb	r2, [r7, #7]
 80006b8:	79b9      	ldrb	r1, [r7, #6]
 80006ba:	4613      	mov	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4413      	add	r3, r2
 80006c0:	009a      	lsls	r2, r3, #2
 80006c2:	4413      	add	r3, r2
 80006c4:	440b      	add	r3, r1
 80006c6:	011b      	lsls	r3, r3, #4
 80006c8:	3328      	adds	r3, #40	; 0x28
 80006ca:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <dt_Modify_step+0x78>)
 80006cc:	4413      	add	r3, r2
 80006ce:	3304      	adds	r3, #4
 80006d0:	2210      	movs	r2, #16
 80006d2:	f107 0118 	add.w	r1, r7, #24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f00d f926 	bl	800d928 <memcpy>
		dt_store_system_data();
 80006dc:	f000 f834 	bl	8000748 <dt_store_system_data>
	}
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 80006ea:	b002      	add	sp, #8
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	2000017c 	.word	0x2000017c

080006f4 <dt_system_data_init>:

void dt_system_data_init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	read_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS);
 80006f8:	4a10      	ldr	r2, [pc, #64]	; (800073c <dt_system_data_init+0x48>)
 80006fa:	f44f 617d 	mov.w	r1, #4048	; 0xfd0
 80006fe:	4810      	ldr	r0, [pc, #64]	; (8000740 <dt_system_data_init+0x4c>)
 8000700:	f000 fc74 	bl	8000fec <read_flash>
	if(!is_data_init())
 8000704:	f7ff ff36 	bl	8000574 <is_data_init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d112      	bne.n	8000734 <dt_system_data_init+0x40>
	{
		memcpy(&system_data.flash_data,&flash_defaul,sizeof(_flash_data));
 800070e:	4a0c      	ldr	r2, [pc, #48]	; (8000740 <dt_system_data_init+0x4c>)
 8000710:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <dt_system_data_init+0x50>)
 8000712:	4610      	mov	r0, r2
 8000714:	4619      	mov	r1, r3
 8000716:	f44f 637d 	mov.w	r3, #4048	; 0xfd0
 800071a:	461a      	mov	r2, r3
 800071c:	f00d f904 	bl	800d928 <memcpy>
		if(write_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS) != HAL_OK)
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <dt_system_data_init+0x48>)
 8000722:	f44f 617d 	mov.w	r1, #4048	; 0xfd0
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <dt_system_data_init+0x4c>)
 8000728:	f000 fc22 	bl	8000f70 <write_flash>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d000      	beq.n	8000734 <dt_system_data_init+0x40>
		{
			//do when write flash fail
			__NOP();
 8000732:	bf00      	nop
		}
	}
	dt_calculator_pg_stepnumber();
 8000734:	f7ff ff32 	bl	800059c <dt_calculator_pg_stepnumber>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}
 800073c:	08060000 	.word	0x08060000
 8000740:	2000017c 	.word	0x2000017c
 8000744:	0800f808 	.word	0x0800f808

08000748 <dt_store_system_data>:

HAL_StatusTypeDef dt_store_system_data(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef res = write_flash((uint8_t *)&system_data.flash_data, sizeof(_flash_data), FLASH_START_ADDRESS);
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <dt_store_system_data+0x30>)
 8000750:	f44f 617d 	mov.w	r1, #4048	; 0xfd0
 8000754:	4809      	ldr	r0, [pc, #36]	; (800077c <dt_store_system_data+0x34>)
 8000756:	f000 fc0b 	bl	8000f70 <write_flash>
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
	if( res != HAL_OK){
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d004      	beq.n	800076e <dt_store_system_data+0x26>
		printf("wirte flash fail! error code : %d",res);
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <dt_store_system_data+0x38>)
 800076a:	f00d f8f3 	bl	800d954 <iprintf>
	}
	return res;
 800076e:	79fb      	ldrb	r3, [r7, #7]
}
 8000770:	4618      	mov	r0, r3
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08060000 	.word	0x08060000
 800077c:	2000017c 	.word	0x2000017c
 8000780:	0800ed10 	.word	0x0800ed10

08000784 <Dw_write>:
	memset(&s_log,0,sizeof(s_log));
}


static inline void Dw_write(uint8_t *data,uint16_t len)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	807b      	strh	r3, [r7, #2]
	uart_transmit_block(data, len, 1000);
 8000790:	887b      	ldrh	r3, [r7, #2]
 8000792:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000796:	4619      	mov	r1, r3
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f003 f97d 	bl	8003a98 <uart_transmit_block>
}
 800079e:	bf00      	nop
 80007a0:	3708      	adds	r7, #8
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <Dwin_Write_VP>:

	}
}

int Dwin_Write_VP(uint16_t Addr,uint16_t *data,uint16_t len)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b09c      	sub	sp, #112	; 0x70
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	6039      	str	r1, [r7, #0]
 80007b0:	80fb      	strh	r3, [r7, #6]
 80007b2:	4613      	mov	r3, r2
 80007b4:	80bb      	strh	r3, [r7, #4]
	uint8_t DwinBuf[100];
	DwinBuf[0]= 0x5A;
 80007b6:	235a      	movs	r3, #90	; 0x5a
 80007b8:	723b      	strb	r3, [r7, #8]
	DwinBuf[1]= 0xA5;
 80007ba:	23a5      	movs	r3, #165	; 0xa5
 80007bc:	727b      	strb	r3, [r7, #9]
	DwinBuf[2]= (len+1)*2 +1;  //
 80007be:	88bb      	ldrh	r3, [r7, #4]
 80007c0:	3301      	adds	r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	3301      	adds	r3, #1
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	72bb      	strb	r3, [r7, #10]
	DwinBuf[3]= 0x82;
 80007ce:	2382      	movs	r3, #130	; 0x82
 80007d0:	72fb      	strb	r3, [r7, #11]
	DwinBuf[4]= Addr>>8;
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	0a1b      	lsrs	r3, r3, #8
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	733b      	strb	r3, [r7, #12]
	DwinBuf[5]= Addr;
 80007dc:	88fb      	ldrh	r3, [r7, #6]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	737b      	strb	r3, [r7, #13]
	for(int i=0;i<len;i++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80007e6:	e01f      	b.n	8000828 <Dwin_Write_VP+0x82>
	{
		DwinBuf[6+i*2] = data[i]/256;
 80007e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007ea:	005b      	lsls	r3, r3, #1
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	4413      	add	r3, r2
 80007f0:	881b      	ldrh	r3, [r3, #0]
 80007f2:	0a1b      	lsrs	r3, r3, #8
 80007f4:	b29a      	uxth	r2, r3
 80007f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80007f8:	3303      	adds	r3, #3
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	b2d2      	uxtb	r2, r2
 80007fe:	3370      	adds	r3, #112	; 0x70
 8000800:	443b      	add	r3, r7
 8000802:	f803 2c68 	strb.w	r2, [r3, #-104]
		DwinBuf[6+i*2+1] = data[i];
 8000806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000808:	005b      	lsls	r3, r3, #1
 800080a:	683a      	ldr	r2, [r7, #0]
 800080c:	4413      	add	r3, r2
 800080e:	881a      	ldrh	r2, [r3, #0]
 8000810:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000812:	3303      	adds	r3, #3
 8000814:	005b      	lsls	r3, r3, #1
 8000816:	3301      	adds	r3, #1
 8000818:	b2d2      	uxtb	r2, r2
 800081a:	3370      	adds	r3, #112	; 0x70
 800081c:	443b      	add	r3, r7
 800081e:	f803 2c68 	strb.w	r2, [r3, #-104]
	for(int i=0;i<len;i++)
 8000822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000824:	3301      	adds	r3, #1
 8000826:	66fb      	str	r3, [r7, #108]	; 0x6c
 8000828:	88bb      	ldrh	r3, [r7, #4]
 800082a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800082c:	429a      	cmp	r2, r3
 800082e:	dbdb      	blt.n	80007e8 <Dwin_Write_VP+0x42>
	}
    len = (len+1)*2 +4;
 8000830:	88bb      	ldrh	r3, [r7, #4]
 8000832:	3303      	adds	r3, #3
 8000834:	b29b      	uxth	r3, r3
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	80bb      	strh	r3, [r7, #4]
    Dw_write(DwinBuf, len);
 800083a:	88ba      	ldrh	r2, [r7, #4]
 800083c:	f107 0308 	add.w	r3, r7, #8
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff9e 	bl	8000784 <Dw_write>
	return 1;
 8000848:	2301      	movs	r3, #1
}
 800084a:	4618      	mov	r0, r3
 800084c:	3770      	adds	r7, #112	; 0x70
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <Dwin_switch_page>:
    len = (len+1)*2 +4;
    Dw_write(DwinBuf, len);
	return 1;
}
void Dwin_switch_page(int page_index)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b084      	sub	sp, #16
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
	uint16_t Buf[2] = {0x5A01,00};
 800085a:	f645 2301 	movw	r3, #23041	; 0x5a01
 800085e:	81bb      	strh	r3, [r7, #12]
 8000860:	2300      	movs	r3, #0
 8000862:	81fb      	strh	r3, [r7, #14]
	Buf[1] = page_index;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	b29b      	uxth	r3, r3
 8000868:	81fb      	strh	r3, [r7, #14]
	Dwin_Write_VP(0X0084,Buf,2);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2202      	movs	r2, #2
 8000870:	4619      	mov	r1, r3
 8000872:	2084      	movs	r0, #132	; 0x84
 8000874:	f7ff ff97 	bl	80007a6 <Dwin_Write_VP>
}
 8000878:	bf00      	nop
 800087a:	3710      	adds	r7, #16
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <Dwin_switch_running_page>:
void Dwin_switch_running_page(uint8_t pg,uint8_t stepnumber)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	71bb      	strb	r3, [r7, #6]
	switch (system_data.flash_data.Program_para[pg][stepnumber].type) {
 8000890:	79fa      	ldrb	r2, [r7, #7]
 8000892:	79b9      	ldrb	r1, [r7, #6]
 8000894:	4815      	ldr	r0, [pc, #84]	; (80008ec <Dwin_switch_running_page+0x6c>)
 8000896:	4613      	mov	r3, r2
 8000898:	009b      	lsls	r3, r3, #2
 800089a:	4413      	add	r3, r2
 800089c:	009a      	lsls	r2, r3, #2
 800089e:	4413      	add	r3, r2
 80008a0:	440b      	add	r3, r1
 80008a2:	011b      	lsls	r3, r3, #4
 80008a4:	4403      	add	r3, r0
 80008a6:	332c      	adds	r3, #44	; 0x2c
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	2b03      	cmp	r3, #3
 80008ac:	d00e      	beq.n	80008cc <Dwin_switch_running_page+0x4c>
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	dc10      	bgt.n	80008d4 <Dwin_switch_running_page+0x54>
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d002      	beq.n	80008bc <Dwin_switch_running_page+0x3c>
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d004      	beq.n	80008c4 <Dwin_switch_running_page+0x44>
			break;
		case STEP_TYPE_DRYING:
			Dwin_switch_page(PAGE_RUNNING_STEP_DRYING);
			break;
		default:
			break;
 80008ba:	e00b      	b.n	80008d4 <Dwin_switch_running_page+0x54>
			Dwin_switch_page(PAGE_RUNNING_STEP_SHAKE);
 80008bc:	2009      	movs	r0, #9
 80008be:	f7ff ffc8 	bl	8000852 <Dwin_switch_page>
			break;
 80008c2:	e008      	b.n	80008d6 <Dwin_switch_running_page+0x56>
			Dwin_switch_page(PAGE_RUNNING_STEP_WASHING);
 80008c4:	200a      	movs	r0, #10
 80008c6:	f7ff ffc4 	bl	8000852 <Dwin_switch_page>
			break;
 80008ca:	e004      	b.n	80008d6 <Dwin_switch_running_page+0x56>
			Dwin_switch_page(PAGE_RUNNING_STEP_DRYING);
 80008cc:	200b      	movs	r0, #11
 80008ce:	f7ff ffc0 	bl	8000852 <Dwin_switch_page>
			break;
 80008d2:	e000      	b.n	80008d6 <Dwin_switch_running_page+0x56>
			break;
 80008d4:	bf00      	nop
	}
	dw_update_setup_page(pg,stepnumber);
 80008d6:	79ba      	ldrb	r2, [r7, #6]
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	4611      	mov	r1, r2
 80008dc:	4618      	mov	r0, r3
 80008de:	f000 f82b 	bl	8000938 <dw_update_setup_page>
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000017c 	.word	0x2000017c

080008f0 <Dwin_init>:

void Dwin_init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	Dwin_reset();
 80008f4:	f000 f80e 	bl	8000914 <Dwin_reset>
	HAL_Delay(1000);
 80008f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008fc:	f003 f97c 	bl	8003bf8 <HAL_Delay>
//	Dwin_switch_page(05);
	memset(&s_log,0,sizeof(s_log));
 8000900:	f240 2206 	movw	r2, #518	; 0x206
 8000904:	2100      	movs	r1, #0
 8000906:	4802      	ldr	r0, [pc, #8]	; (8000910 <Dwin_init+0x20>)
 8000908:	f00d f81c 	bl	800d944 <memset>
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}
 8000910:	20001174 	.word	0x20001174

08000914 <Dwin_reset>:


void Dwin_reset(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
	uint16_t Buf[2] = {0x55AA,0x5AA5};
 800091a:	4b06      	ldr	r3, [pc, #24]	; (8000934 <Dwin_reset+0x20>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	607b      	str	r3, [r7, #4]
	Dwin_Write_VP(0X0004,Buf,2);
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	2202      	movs	r2, #2
 8000924:	4619      	mov	r1, r3
 8000926:	2004      	movs	r0, #4
 8000928:	f7ff ff3d 	bl	80007a6 <Dwin_Write_VP>
}
 800092c:	bf00      	nop
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	0800ed40 	.word	0x0800ed40

08000938 <dw_update_setup_page>:

int dw_update_setup_page(uint8_t pg,uint8_t stepnumber){
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b08b      	sub	sp, #44	; 0x2c
 800093c:	af00      	add	r7, sp, #0
 800093e:	4603      	mov	r3, r0
 8000940:	460a      	mov	r2, r1
 8000942:	71fb      	strb	r3, [r7, #7]
 8000944:	4613      	mov	r3, r2
 8000946:	71bb      	strb	r3, [r7, #6]
	if((pg > NUM_MAX_WELL ) || (stepnumber >24)){
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	2b0f      	cmp	r3, #15
 800094c:	d802      	bhi.n	8000954 <dw_update_setup_page+0x1c>
 800094e:	79bb      	ldrb	r3, [r7, #6]
 8000950:	2b18      	cmp	r3, #24
 8000952:	d902      	bls.n	800095a <dw_update_setup_page+0x22>
			return -1;
 8000954:	f04f 33ff 	mov.w	r3, #4294967295
 8000958:	e058      	b.n	8000a0c <dw_update_setup_page+0xd4>
	}
	uint16_t data[12];

	data[0] = pg+1;
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	b29b      	uxth	r3, r3
 800095e:	3301      	adds	r3, #1
 8000960:	b29b      	uxth	r3, r3
 8000962:	81bb      	strh	r3, [r7, #12]
	data[1] = stepnumber+1;
 8000964:	79bb      	ldrb	r3, [r7, #6]
 8000966:	b29b      	uxth	r3, r3
 8000968:	3301      	adds	r3, #1
 800096a:	b29b      	uxth	r3, r3
 800096c:	81fb      	strh	r3, [r7, #14]
	data[2] = system_data.flash_data.Program_para[pg][stepnumber].type;
 800096e:	79fa      	ldrb	r2, [r7, #7]
 8000970:	79b9      	ldrb	r1, [r7, #6]
 8000972:	4828      	ldr	r0, [pc, #160]	; (8000a14 <dw_update_setup_page+0xdc>)
 8000974:	4613      	mov	r3, r2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	4413      	add	r3, r2
 800097a:	009a      	lsls	r2, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	440b      	add	r3, r1
 8000980:	011b      	lsls	r3, r3, #4
 8000982:	4403      	add	r3, r0
 8000984:	332c      	adds	r3, #44	; 0x2c
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	b29b      	uxth	r3, r3
 800098a:	823b      	strh	r3, [r7, #16]
	data[3] = system_data.flash_data.Program_para[pg][stepnumber].wells;
 800098c:	79fa      	ldrb	r2, [r7, #7]
 800098e:	79b9      	ldrb	r1, [r7, #6]
 8000990:	4820      	ldr	r0, [pc, #128]	; (8000a14 <dw_update_setup_page+0xdc>)
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	009a      	lsls	r2, r3, #2
 800099a:	4413      	add	r3, r2
 800099c:	440b      	add	r3, r1
 800099e:	011b      	lsls	r3, r3, #4
 80009a0:	4403      	add	r3, r0
 80009a2:	332d      	adds	r3, #45	; 0x2d
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	b29b      	uxth	r3, r3
 80009a8:	827b      	strh	r3, [r7, #18]
	if((data[3] == 0) || (data[3] > MAX_WELLS_NUM) )
 80009aa:	8a7b      	ldrh	r3, [r7, #18]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d002      	beq.n	80009b6 <dw_update_setup_page+0x7e>
 80009b0:	8a7b      	ldrh	r3, [r7, #18]
 80009b2:	2b0a      	cmp	r3, #10
 80009b4:	d901      	bls.n	80009ba <dw_update_setup_page+0x82>
		data[3] = 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	827b      	strh	r3, [r7, #18]
	for(int i=4;i<11;i++)
 80009ba:	2304      	movs	r3, #4
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
 80009be:	e019      	b.n	80009f4 <dw_update_setup_page+0xbc>
	{
		data[i] = system_data.flash_data.Program_para[pg][stepnumber].timing[i-4];
 80009c0:	79fa      	ldrb	r2, [r7, #7]
 80009c2:	79b8      	ldrb	r0, [r7, #6]
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	1f19      	subs	r1, r3, #4
 80009c8:	4c12      	ldr	r4, [pc, #72]	; (8000a14 <dw_update_setup_page+0xdc>)
 80009ca:	4613      	mov	r3, r2
 80009cc:	009b      	lsls	r3, r3, #2
 80009ce:	4413      	add	r3, r2
 80009d0:	009a      	lsls	r2, r3, #2
 80009d2:	4413      	add	r3, r2
 80009d4:	4403      	add	r3, r0
 80009d6:	00db      	lsls	r3, r3, #3
 80009d8:	440b      	add	r3, r1
 80009da:	3314      	adds	r3, #20
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	4423      	add	r3, r4
 80009e0:	88da      	ldrh	r2, [r3, #6]
 80009e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e4:	005b      	lsls	r3, r3, #1
 80009e6:	3328      	adds	r3, #40	; 0x28
 80009e8:	443b      	add	r3, r7
 80009ea:	f823 2c1c 	strh.w	r2, [r3, #-28]
	for(int i=4;i<11;i++)
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	3301      	adds	r3, #1
 80009f2:	627b      	str	r3, [r7, #36]	; 0x24
 80009f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f6:	2b0a      	cmp	r3, #10
 80009f8:	dde2      	ble.n	80009c0 <dw_update_setup_page+0x88>
	}
	Dwin_Write_VP(VP_SETUP_PARA,data,11);
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	220b      	movs	r2, #11
 8000a00:	4619      	mov	r1, r3
 8000a02:	f44f 5040 	mov.w	r0, #12288	; 0x3000
 8000a06:	f7ff fece 	bl	80007a6 <Dwin_Write_VP>
	return 1;
 8000a0a:	2301      	movs	r3, #1
}
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	372c      	adds	r7, #44	; 0x2c
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd90      	pop	{r4, r7, pc}
 8000a14:	2000017c 	.word	0x2000017c

08000a18 <show_user_page>:

void show_user_page(){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
	Dwin_switch_page(PAGE_SETUP_USER_CTL);
 8000a1c:	2003      	movs	r0, #3
 8000a1e:	f7ff ff18 	bl	8000852 <Dwin_switch_page>
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <show_setup_page>:
void show_setup_page(uint8_t pg,uint8_t stepnumber){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	460a      	mov	r2, r1
 8000a32:	71fb      	strb	r3, [r7, #7]
 8000a34:	4613      	mov	r3, r2
 8000a36:	71bb      	strb	r3, [r7, #6]
	if((pg > NUM_MAX_WELL ) || (stepnumber >24)){
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	d827      	bhi.n	8000a8e <show_setup_page+0x66>
 8000a3e:	79bb      	ldrb	r3, [r7, #6]
 8000a40:	2b18      	cmp	r3, #24
 8000a42:	d824      	bhi.n	8000a8e <show_setup_page+0x66>
		return;
	}
	switch(system_data.flash_data.Program_para[pg][stepnumber].type){
 8000a44:	79fa      	ldrb	r2, [r7, #7]
 8000a46:	79b9      	ldrb	r1, [r7, #6]
 8000a48:	4813      	ldr	r0, [pc, #76]	; (8000a98 <show_setup_page+0x70>)
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4413      	add	r3, r2
 8000a50:	009a      	lsls	r2, r3, #2
 8000a52:	4413      	add	r3, r2
 8000a54:	440b      	add	r3, r1
 8000a56:	011b      	lsls	r3, r3, #4
 8000a58:	4403      	add	r3, r0
 8000a5a:	332c      	adds	r3, #44	; 0x2c
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b02      	cmp	r3, #2
 8000a60:	d002      	beq.n	8000a68 <show_setup_page+0x40>
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d004      	beq.n	8000a70 <show_setup_page+0x48>
 8000a66:	e007      	b.n	8000a78 <show_setup_page+0x50>
		case (STEP_TYPE_WASHING):
				Dwin_switch_page(PAGE_SETUP_STEP_WASHING);
 8000a68:	2007      	movs	r0, #7
 8000a6a:	f7ff fef2 	bl	8000852 <Dwin_switch_page>
				break;
 8000a6e:	e007      	b.n	8000a80 <show_setup_page+0x58>
		case (STEP_TYPE_DRYING):
				Dwin_switch_page(PAGE_SETUP_STEP_DRYING);
 8000a70:	2008      	movs	r0, #8
 8000a72:	f7ff feee 	bl	8000852 <Dwin_switch_page>
				break;
 8000a76:	e003      	b.n	8000a80 <show_setup_page+0x58>
		default:
				Dwin_switch_page(PAGE_SETUP_STEP_SHAKE);
 8000a78:	2006      	movs	r0, #6
 8000a7a:	f7ff feea 	bl	8000852 <Dwin_switch_page>
			break;
 8000a7e:	bf00      	nop
	}
	dw_update_setup_page(pg,stepnumber);
 8000a80:	79ba      	ldrb	r2, [r7, #6]
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff56 	bl	8000938 <dw_update_setup_page>
 8000a8c:	e000      	b.n	8000a90 <show_setup_page+0x68>
		return;
 8000a8e:	bf00      	nop
}
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	2000017c 	.word	0x2000017c

08000a9c <dwin_update_step>:
//                 2F  FF      2F FF   30  00
//                                  8      10  11  12  13 14  15  16
//{5A}{A5}{18}{83}{3A}{00}{0A}{00}{00}{00}{01}{00}{01}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}{00}
void dwin_update_step(uint8_t *data){
 8000a9c:	b5b0      	push	{r4, r5, r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	6078      	str	r0, [r7, #4]
	_def_step step;
	uint8_t pg = data[8]; // 0x3000
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	7a1b      	ldrb	r3, [r3, #8]
 8000aa8:	76fb      	strb	r3, [r7, #27]
	uint8_t stepindex = data[10]; // 0x3001
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	7a9b      	ldrb	r3, [r3, #10]
 8000aae:	76bb      	strb	r3, [r7, #26]
	step.wells =data[14];
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	7b9b      	ldrb	r3, [r3, #14]
 8000ab4:	727b      	strb	r3, [r7, #9]
	if(step.wells> NUM_MAX_WELL)
 8000ab6:	7a7b      	ldrb	r3, [r7, #9]
 8000ab8:	2b0f      	cmp	r3, #15
 8000aba:	d846      	bhi.n	8000b4a <dwin_update_step+0xae>
			return;
	switch (step.wells) {
 8000abc:	7a7b      	ldrb	r3, [r7, #9]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d002      	beq.n	8000ac8 <dwin_update_step+0x2c>
 8000ac2:	2b0f      	cmp	r3, #15
 8000ac4:	d003      	beq.n	8000ace <dwin_update_step+0x32>
 8000ac6:	e005      	b.n	8000ad4 <dwin_update_step+0x38>
		case 1:
			step.type = STEP_TYPE_SHAKE;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	723b      	strb	r3, [r7, #8]
			break;
 8000acc:	e005      	b.n	8000ada <dwin_update_step+0x3e>
		case NUM_MAX_WELL:
			step.type = STEP_TYPE_DRYING;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	723b      	strb	r3, [r7, #8]
			break;
 8000ad2:	e002      	b.n	8000ada <dwin_update_step+0x3e>
		default:
			step.type = STEP_TYPE_WASHING;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	723b      	strb	r3, [r7, #8]
			break;
 8000ad8:	bf00      	nop
	}
	for(int i=0;i<7;i++){
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
 8000ade:	e01c      	b.n	8000b1a <dwin_update_step+0x7e>
		step.timing[i] = (uint16_t)data[15+i*2]*256 + data[16+i*2];
 8000ae0:	69fb      	ldr	r3, [r7, #28]
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	330f      	adds	r3, #15
 8000ae6:	461a      	mov	r2, r3
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4413      	add	r3, r2
 8000aec:	781b      	ldrb	r3, [r3, #0]
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	021b      	lsls	r3, r3, #8
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	69fb      	ldr	r3, [r7, #28]
 8000af6:	3308      	adds	r3, #8
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	440b      	add	r3, r1
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	4413      	add	r3, r2
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	69fb      	ldr	r3, [r7, #28]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	3320      	adds	r3, #32
 8000b0e:	443b      	add	r3, r7
 8000b10:	f823 2c16 	strh.w	r2, [r3, #-22]
	for(int i=0;i<7;i++){
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	3301      	adds	r3, #1
 8000b18:	61fb      	str	r3, [r7, #28]
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	2b06      	cmp	r3, #6
 8000b1e:	dddf      	ble.n	8000ae0 <dwin_update_step+0x44>
	}
	dt_Modify_step(pg-1, stepindex-1, step);
 8000b20:	7efb      	ldrb	r3, [r7, #27]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	b2dc      	uxtb	r4, r3
 8000b26:	7ebb      	ldrb	r3, [r7, #26]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	b2dd      	uxtb	r5, r3
 8000b2c:	466a      	mov	r2, sp
 8000b2e:	f107 0310 	add.w	r3, r7, #16
 8000b32:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000b36:	e882 0003 	stmia.w	r2, {r0, r1}
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	cb0c      	ldmia	r3, {r2, r3}
 8000b40:	4629      	mov	r1, r5
 8000b42:	4620      	mov	r0, r4
 8000b44:	f7ff fd98 	bl	8000678 <dt_Modify_step>
 8000b48:	e000      	b.n	8000b4c <dwin_update_step+0xb0>
			return;
 8000b4a:	bf00      	nop
}
 8000b4c:	3720      	adds	r7, #32
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000b54 <dwin_start_program>:

void dwin_start_program(uint8_t pg){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b09c      	sub	sp, #112	; 0x70
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]

//	s_log.s_size = sprintf(s_log.log,"\r\nIF I DIE");
//	Dwin_switch_page(PAGE_MANUAL_CONTROL);
//	s_log_clear();
	HAL_Delay(1);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f003 f84a 	bl	8003bf8 <HAL_Delay>
	char tmp[100];
	sprintf(tmp,"START PROGRAM %d",pg);
 8000b64:	79fa      	ldrb	r2, [r7, #7]
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	4907      	ldr	r1, [pc, #28]	; (8000b88 <dwin_start_program+0x34>)
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f00c ff7f 	bl	800da70 <siprintf>
	pg_start(pg-1, 0);
 8000b72:	79fb      	ldrb	r3, [r7, #7]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	b2db      	uxtb	r3, r3
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f001 fa78 	bl	8002070 <pg_start>

//	s_log_add_1_line(tmp);
//	Dwin_Write_VP_String(0x3800,s_log.log, s_log.s_size);
}
 8000b80:	bf00      	nop
 8000b82:	3770      	adds	r7, #112	; 0x70
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	0800ed44 	.word	0x0800ed44

08000b8c <dwin_change_target_well>:
void dwin_stop_program(void){


}
void dwin_change_target_well(uint8_t well){
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	4603      	mov	r3, r0
 8000b94:	71fb      	strb	r3, [r7, #7]
	if(well> NUM_MAX_WELL)
 8000b96:	79fb      	ldrb	r3, [r7, #7]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d812      	bhi.n	8000bc2 <dwin_change_target_well+0x36>
		return;
	uint8_t target_page = PAGE_SETUP_STEP_SHAKE;
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	73fb      	strb	r3, [r7, #15]
	switch (well) {
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d007      	beq.n	8000bb6 <dwin_change_target_well+0x2a>
 8000ba6:	2b0f      	cmp	r3, #15
 8000ba8:	d102      	bne.n	8000bb0 <dwin_change_target_well+0x24>
		case 1:
			break;
		case NUM_MAX_WELL:
			target_page = PAGE_SETUP_STEP_DRYING;
 8000baa:	2308      	movs	r3, #8
 8000bac:	73fb      	strb	r3, [r7, #15]
			break;
 8000bae:	e003      	b.n	8000bb8 <dwin_change_target_well+0x2c>
		default:
			target_page = PAGE_SETUP_STEP_WASHING;
 8000bb0:	2307      	movs	r3, #7
 8000bb2:	73fb      	strb	r3, [r7, #15]
			break;
 8000bb4:	e000      	b.n	8000bb8 <dwin_change_target_well+0x2c>
			break;
 8000bb6:	bf00      	nop
	}
	Dwin_switch_page(target_page);
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fe49 	bl	8000852 <Dwin_switch_page>
 8000bc0:	e000      	b.n	8000bc4 <dwin_change_target_well+0x38>
		return;
 8000bc2:	bf00      	nop
}
 8000bc4:	3710      	adds	r7, #16
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <dw_process_rx_buffer>:
static uint8_t current_pg_setup;
static uint8_t current_step_setup;
int dw_process_rx_buffer(uint8_t *data,uint16_t size){ //USART_CR2_TOEN
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	807b      	strh	r3, [r7, #2]

	if(size < 5){
 8000bd8:	887b      	ldrh	r3, [r7, #2]
 8000bda:	2b04      	cmp	r3, #4
 8000bdc:	d802      	bhi.n	8000be4 <dw_process_rx_buffer+0x18>
		return -1;
 8000bde:	f04f 33ff 	mov.w	r3, #4294967295
 8000be2:	e144      	b.n	8000e6e <dw_process_rx_buffer+0x2a2>
	}
	if(data[0] != 0x5A && data[1] != 0xA5 ){
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b5a      	cmp	r3, #90	; 0x5a
 8000bea:	d007      	beq.n	8000bfc <dw_process_rx_buffer+0x30>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	2ba5      	cmp	r3, #165	; 0xa5
 8000bf4:	d002      	beq.n	8000bfc <dw_process_rx_buffer+0x30>
		return -2;
 8000bf6:	f06f 0301 	mvn.w	r3, #1
 8000bfa:	e138      	b.n	8000e6e <dw_process_rx_buffer+0x2a2>
	}
	uint16_t code = data[4];
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3304      	adds	r3, #4
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	81fb      	strh	r3, [r7, #14]
	code = code*256+ data[5];
 8000c04:	89fb      	ldrh	r3, [r7, #14]
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3305      	adds	r3, #5
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	4413      	add	r3, r2
 8000c14:	81fb      	strh	r3, [r7, #14]
	uint16_t value;
	switch (code) {
 8000c16:	89fb      	ldrh	r3, [r7, #14]
 8000c18:	f244 0202 	movw	r2, #16386	; 0x4002
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	f000 8110 	beq.w	8000e42 <dw_process_rx_buffer+0x276>
 8000c22:	f244 0202 	movw	r2, #16386	; 0x4002
 8000c26:	4293      	cmp	r3, r2
 8000c28:	f300 811d 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c2c:	f244 0201 	movw	r2, #16385	; 0x4001
 8000c30:	4293      	cmp	r3, r2
 8000c32:	f000 8103 	beq.w	8000e3c <dw_process_rx_buffer+0x270>
 8000c36:	f244 0201 	movw	r2, #16385	; 0x4001
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	f300 8113 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c44:	f000 80f3 	beq.w	8000e2e <dw_process_rx_buffer+0x262>
 8000c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000c4c:	f300 810b 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c50:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 8000c54:	f000 8097 	beq.w	8000d86 <dw_process_rx_buffer+0x1ba>
 8000c58:	f5b3 5f68 	cmp.w	r3, #14848	; 0x3a00
 8000c5c:	f300 8103 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c60:	f243 1201 	movw	r2, #12545	; 0x3101
 8000c64:	4293      	cmp	r3, r2
 8000c66:	f000 8088 	beq.w	8000d7a <dw_process_rx_buffer+0x1ae>
 8000c6a:	f243 1201 	movw	r2, #12545	; 0x3101
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	f300 80f9 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c74:	f243 0203 	movw	r2, #12291	; 0x3003
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d057      	beq.n	8000d2c <dw_process_rx_buffer+0x160>
 8000c7c:	f243 0203 	movw	r2, #12291	; 0x3003
 8000c80:	4293      	cmp	r3, r2
 8000c82:	f300 80f0 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c86:	f243 0201 	movw	r2, #12289	; 0x3001
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d060      	beq.n	8000d50 <dw_process_rx_buffer+0x184>
 8000c8e:	f243 0201 	movw	r2, #12289	; 0x3001
 8000c92:	4293      	cmp	r3, r2
 8000c94:	f300 80e7 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000c98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000c9c:	d032      	beq.n	8000d04 <dw_process_rx_buffer+0x138>
 8000c9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8000ca2:	f300 80e0 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000ca6:	f242 5201 	movw	r2, #9473	; 0x2501
 8000caa:	4293      	cmp	r3, r2
 8000cac:	f000 80bb 	beq.w	8000e26 <dw_process_rx_buffer+0x25a>
 8000cb0:	f242 5201 	movw	r2, #9473	; 0x2501
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	f300 80d6 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000cba:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 8000cbe:	f000 80ae 	beq.w	8000e1e <dw_process_rx_buffer+0x252>
 8000cc2:	f5b3 5f14 	cmp.w	r3, #9472	; 0x2500
 8000cc6:	f300 80ce 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000cca:	f242 3205 	movw	r2, #8965	; 0x2305
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	f000 8081 	beq.w	8000dd6 <dw_process_rx_buffer+0x20a>
 8000cd4:	f242 3205 	movw	r2, #8965	; 0x2305
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	f300 80c4 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000cde:	f242 3204 	movw	r2, #8964	; 0x2304
 8000ce2:	4293      	cmp	r3, r2
 8000ce4:	f000 8089 	beq.w	8000dfa <dw_process_rx_buffer+0x22e>
 8000ce8:	f242 3204 	movw	r2, #8964	; 0x2304
 8000cec:	4293      	cmp	r3, r2
 8000cee:	f300 80ba 	bgt.w	8000e66 <dw_process_rx_buffer+0x29a>
 8000cf2:	f242 2204 	movw	r2, #8708	; 0x2204
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d05b      	beq.n	8000db2 <dw_process_rx_buffer+0x1e6>
 8000cfa:	f242 2205 	movw	r2, #8709	; 0x2205
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d045      	beq.n	8000d8e <dw_process_rx_buffer+0x1c2>
					show_user_page();
				}
				break;

		default:
			break;
 8000d02:	e0b0      	b.n	8000e66 <dw_process_rx_buffer+0x29a>
				current_pg_setup=value = data[8];
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3308      	adds	r3, #8
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	81bb      	strh	r3, [r7, #12]
 8000d0c:	89bb      	ldrh	r3, [r7, #12]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	4b59      	ldr	r3, [pc, #356]	; (8000e78 <dw_process_rx_buffer+0x2ac>)
 8000d12:	701a      	strb	r2, [r3, #0]
				current_step_setup =1;
 8000d14:	4b59      	ldr	r3, [pc, #356]	; (8000e7c <dw_process_rx_buffer+0x2b0>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
				show_setup_page(value-1,0);
 8000d1a:	89bb      	ldrh	r3, [r7, #12]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff fe7f 	bl	8000a28 <show_setup_page>
			break;
 8000d2a:	e09f      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				value = (uint16_t)data[7]*256+data[8];
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3307      	adds	r3, #7
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	b29b      	uxth	r3, r3
 8000d34:	021b      	lsls	r3, r3, #8
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3308      	adds	r3, #8
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	4413      	add	r3, r2
 8000d42:	81bb      	strh	r3, [r7, #12]
				dwin_change_target_well(value);
 8000d44:	89bb      	ldrh	r3, [r7, #12]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff1f 	bl	8000b8c <dwin_change_target_well>
				break;
 8000d4e:	e08d      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				current_step_setup = value = data[8];
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3308      	adds	r3, #8
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	81bb      	strh	r3, [r7, #12]
 8000d58:	89bb      	ldrh	r3, [r7, #12]
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b47      	ldr	r3, [pc, #284]	; (8000e7c <dw_process_rx_buffer+0x2b0>)
 8000d5e:	701a      	strb	r2, [r3, #0]
				show_setup_page(current_pg_setup-1,value-1);
 8000d60:	4b45      	ldr	r3, [pc, #276]	; (8000e78 <dw_process_rx_buffer+0x2ac>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	3b01      	subs	r3, #1
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	89bb      	ldrh	r3, [r7, #12]
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	4619      	mov	r1, r3
 8000d72:	4610      	mov	r0, r2
 8000d74:	f7ff fe58 	bl	8000a28 <show_setup_page>
			break;
 8000d78:	e078      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				dw_update_step_numbers();
 8000d7a:	f000 f885 	bl	8000e88 <dw_update_step_numbers>
				current_pg_setup =0;
 8000d7e:	4b3e      	ldr	r3, [pc, #248]	; (8000e78 <dw_process_rx_buffer+0x2ac>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	701a      	strb	r2, [r3, #0]
			break;
 8000d84:	e072      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				dwin_update_step(data);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fe88 	bl	8000a9c <dwin_update_step>
				break;
 8000d8c:	e06e      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				value = (uint16_t)data[7]*256+data[8];
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	3307      	adds	r3, #7
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	3308      	adds	r3, #8
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	4413      	add	r3, r2
 8000da4:	81bb      	strh	r3, [r7, #12]
				step_mt_move_foward(&x_motor, value);
 8000da6:	89bb      	ldrh	r3, [r7, #12]
 8000da8:	4619      	mov	r1, r3
 8000daa:	4835      	ldr	r0, [pc, #212]	; (8000e80 <dw_process_rx_buffer+0x2b4>)
 8000dac:	f000 ff34 	bl	8001c18 <step_mt_move_foward>
				break;
 8000db0:	e05c      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				value = (uint16_t)data[7]*256+data[8];
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3307      	adds	r3, #7
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	021b      	lsls	r3, r3, #8
 8000dbc:	b29a      	uxth	r2, r3
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	3308      	adds	r3, #8
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	4413      	add	r3, r2
 8000dc8:	81bb      	strh	r3, [r7, #12]
				step_mt_move_backward(&x_motor, value);
 8000dca:	89bb      	ldrh	r3, [r7, #12]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	482c      	ldr	r0, [pc, #176]	; (8000e80 <dw_process_rx_buffer+0x2b4>)
 8000dd0:	f000 ff3e 	bl	8001c50 <step_mt_move_backward>
				break;
 8000dd4:	e04a      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				value = (uint16_t)data[7]*256+data[8];
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3307      	adds	r3, #7
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3308      	adds	r3, #8
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	4413      	add	r3, r2
 8000dec:	81bb      	strh	r3, [r7, #12]
				step_mt_move_foward(&z_motor, value);
 8000dee:	89bb      	ldrh	r3, [r7, #12]
 8000df0:	4619      	mov	r1, r3
 8000df2:	4824      	ldr	r0, [pc, #144]	; (8000e84 <dw_process_rx_buffer+0x2b8>)
 8000df4:	f000 ff10 	bl	8001c18 <step_mt_move_foward>
				break;
 8000df8:	e038      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				value = (uint16_t)data[7]*256+data[8];
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	3307      	adds	r3, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	021b      	lsls	r3, r3, #8
 8000e04:	b29a      	uxth	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3308      	adds	r3, #8
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	4413      	add	r3, r2
 8000e10:	81bb      	strh	r3, [r7, #12]
				step_mt_move_backward(&z_motor, value);
 8000e12:	89bb      	ldrh	r3, [r7, #12]
 8000e14:	4619      	mov	r1, r3
 8000e16:	481b      	ldr	r0, [pc, #108]	; (8000e84 <dw_process_rx_buffer+0x2b8>)
 8000e18:	f000 ff1a 	bl	8001c50 <step_mt_move_backward>
				break;
 8000e1c:	e026      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				mt_move_to_home(&x_motor);
 8000e1e:	4818      	ldr	r0, [pc, #96]	; (8000e80 <dw_process_rx_buffer+0x2b4>)
 8000e20:	f000 fe59 	bl	8001ad6 <mt_move_to_home>
				break;
 8000e24:	e022      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				mt_move_to_home(&z_motor);
 8000e26:	4817      	ldr	r0, [pc, #92]	; (8000e84 <dw_process_rx_buffer+0x2b8>)
 8000e28:	f000 fe55 	bl	8001ad6 <mt_move_to_home>
				break;
 8000e2c:	e01e      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				dwin_start_program(data[8]);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	3308      	adds	r3, #8
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff fe8d 	bl	8000b54 <dwin_start_program>
				break;
 8000e3a:	e017      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				pg_stop();
 8000e3c:	f001 f944 	bl	80020c8 <pg_stop>
				break;
 8000e40:	e014      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				value = (uint16_t)data[7]*256+data[8];
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	3307      	adds	r3, #7
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	021b      	lsls	r3, r3, #8
 8000e4c:	b29a      	uxth	r2, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3308      	adds	r3, #8
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	81bb      	strh	r3, [r7, #12]
				if(value == 1)
 8000e5a:	89bb      	ldrh	r3, [r7, #12]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d104      	bne.n	8000e6a <dw_process_rx_buffer+0x29e>
					show_user_page();
 8000e60:	f7ff fdda 	bl	8000a18 <show_user_page>
				break;
 8000e64:	e001      	b.n	8000e6a <dw_process_rx_buffer+0x29e>
			break;
 8000e66:	bf00      	nop
 8000e68:	e000      	b.n	8000e6c <dw_process_rx_buffer+0x2a0>
				break;
 8000e6a:	bf00      	nop
	}
	return 1;
 8000e6c:	2301      	movs	r3, #1
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	2000137a 	.word	0x2000137a
 8000e7c:	2000137b 	.word	0x2000137b
 8000e80:	20002abc 	.word	0x20002abc
 8000e84:	20002aec 	.word	0x20002aec

08000e88 <dw_update_step_numbers>:

int dw_update_step_numbers(void){
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	dt_calculator_pg_stepnumber();
 8000e8c:	f7ff fb86 	bl	800059c <dt_calculator_pg_stepnumber>
	Dwin_Write_VP(VP_STEP_NUMBERS,system_data.pg_stepnumber,10);
 8000e90:	220a      	movs	r2, #10
 8000e92:	4904      	ldr	r1, [pc, #16]	; (8000ea4 <dw_update_step_numbers+0x1c>)
 8000e94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e98:	f7ff fc85 	bl	80007a6 <Dwin_Write_VP>
	return 1;
 8000e9c:	2301      	movs	r3, #1
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000114c 	.word	0x2000114c

08000ea8 <dw_update_steper_positon>:
float xxxx;
int dw_update_steper_positon(void){
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
	static uint32_t time_tmp =0;
	if( (HAL_GetTick() > time_tmp)&&((x_motor.old_pos != x_motor.current_pos) || (z_motor.old_pos != z_motor.current_pos)))
 8000eae:	f002 fe97 	bl	8003be0 <HAL_GetTick>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <dw_update_steper_positon+0xb8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d94b      	bls.n	8000f54 <dw_update_steper_positon+0xac>
 8000ebc:	4b29      	ldr	r3, [pc, #164]	; (8000f64 <dw_update_steper_positon+0xbc>)
 8000ebe:	685a      	ldr	r2, [r3, #4]
 8000ec0:	4b28      	ldr	r3, [pc, #160]	; (8000f64 <dw_update_steper_positon+0xbc>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d105      	bne.n	8000ed4 <dw_update_steper_positon+0x2c>
 8000ec8:	4b27      	ldr	r3, [pc, #156]	; (8000f68 <dw_update_steper_positon+0xc0>)
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <dw_update_steper_positon+0xc0>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d03f      	beq.n	8000f54 <dw_update_steper_positon+0xac>
	{
		time_tmp = HAL_GetTick() +50;
 8000ed4:	f002 fe84 	bl	8003be0 <HAL_GetTick>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	3332      	adds	r3, #50	; 0x32
 8000edc:	4a20      	ldr	r2, [pc, #128]	; (8000f60 <dw_update_steper_positon+0xb8>)
 8000ede:	6013      	str	r3, [r2, #0]
		x_motor.old_pos = x_motor.current_pos;
 8000ee0:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <dw_update_steper_positon+0xbc>)
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	4a1f      	ldr	r2, [pc, #124]	; (8000f64 <dw_update_steper_positon+0xbc>)
 8000ee6:	6053      	str	r3, [r2, #4]
		z_motor.old_pos = z_motor.current_pos;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <dw_update_steper_positon+0xc0>)
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	4a1e      	ldr	r2, [pc, #120]	; (8000f68 <dw_update_steper_positon+0xc0>)
 8000eee:	6053      	str	r3, [r2, #4]
		uint16_t data[4];
		float tmp = (float)x_motor.current_pos/PULSES_PER_MM;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <dw_update_steper_positon+0xbc>)
 8000ef2:	689b      	ldr	r3, [r3, #8]
 8000ef4:	ee07 3a90 	vmov	s15, r3
 8000ef8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000efc:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8000f00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f04:	edc7 7a00 	vstr	s15, [r7]
		uint16_t *p = (uint16_t *)&tmp;
 8000f08:	463b      	mov	r3, r7
 8000f0a:	60fb      	str	r3, [r7, #12]
		data[0] = p[1];
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	885b      	ldrh	r3, [r3, #2]
 8000f10:	80bb      	strh	r3, [r7, #4]
		data[1] = p[0];
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	881b      	ldrh	r3, [r3, #0]
 8000f16:	80fb      	strh	r3, [r7, #6]
		tmp = (float)z_motor.current_pos/PULSES_PER_MM;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <dw_update_steper_positon+0xc0>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	ee07 3a90 	vmov	s15, r3
 8000f20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f24:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
 8000f28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f2c:	edc7 7a00 	vstr	s15, [r7]
		xxxx= tmp;
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <dw_update_steper_positon+0xc4>)
 8000f34:	6013      	str	r3, [r2, #0]
		data[2] = p[1];
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	885b      	ldrh	r3, [r3, #2]
 8000f3a:	813b      	strh	r3, [r7, #8]
		data[3] = p[0];
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	881b      	ldrh	r3, [r3, #0]
 8000f40:	817b      	strh	r3, [r7, #10]
		Dwin_Write_VP(VP_X_STEP_MOTOR,data,4);
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2204      	movs	r2, #4
 8000f46:	4619      	mov	r1, r3
 8000f48:	f44f 5008 	mov.w	r0, #8704	; 0x2200
 8000f4c:	f7ff fc2b 	bl	80007a6 <Dwin_Write_VP>
		return 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	e000      	b.n	8000f56 <dw_update_steper_positon+0xae>
	}
	return 0;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20001380 	.word	0x20001380
 8000f64:	20002abc 	.word	0x20002abc
 8000f68:	20002aec 	.word	0x20002aec
 8000f6c:	2000137c 	.word	0x2000137c

08000f70 <write_flash>:
 * @param data Pointer to the data to be written
 * @param size Size of the data to be written, in bytes
 * @param address Memory address where the data will be written
 * @return HAL status
 */
HAL_StatusTypeDef write_flash(uint8_t* data, uint32_t size, uint32_t address) {
 8000f70:	b5b0      	push	{r4, r5, r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
    HAL_StatusTypeDef status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	75fb      	strb	r3, [r7, #23]
    // Unlock flash
    HAL_FLASH_Unlock();
 8000f80:	f003 fbc6 	bl	8004710 <HAL_FLASH_Unlock>

    // Erase sector
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 8000f84:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <write_flash+0x78>)
 8000f86:	22b3      	movs	r2, #179	; 0xb3
 8000f88:	60da      	str	r2, [r3, #12]
	FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	2007      	movs	r0, #7
 8000f8e:	f003 fd21 	bl	80049d4 <FLASH_Erase_Sector>

    if (status == HAL_OK) {
 8000f92:	7dfb      	ldrb	r3, [r7, #23]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d120      	bne.n	8000fda <write_flash+0x6a>
        // Write data
        for (uint32_t i = 0; i < size; i++) {
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
 8000f9c:	e017      	b.n	8000fce <write_flash+0x5e>
            status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, address + i, data[i]);
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	18d1      	adds	r1, r2, r3
 8000fa4:	68fa      	ldr	r2, [r7, #12]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2200      	movs	r2, #0
 8000fb0:	461c      	mov	r4, r3
 8000fb2:	4615      	mov	r5, r2
 8000fb4:	4622      	mov	r2, r4
 8000fb6:	462b      	mov	r3, r5
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f003 fb55 	bl	8004668 <HAL_FLASH_Program>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 8000fc2:	7dfb      	ldrb	r3, [r7, #23]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d107      	bne.n	8000fd8 <write_flash+0x68>
        for (uint32_t i = 0; i < size; i++) {
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	613b      	str	r3, [r7, #16]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d3e3      	bcc.n	8000f9e <write_flash+0x2e>
 8000fd6:	e000      	b.n	8000fda <write_flash+0x6a>
                break;
 8000fd8:	bf00      	nop
            }
        }
    }

    // Lock flash
    HAL_FLASH_Lock();
 8000fda:	f003 fbbb 	bl	8004754 <HAL_FLASH_Lock>

    return status;
 8000fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <read_flash>:
 * @brief Reads data from flash memory
 * @param data Pointer to the buffer where the data will be stored
 * @param size Size of the data to be read, in bytes
 * @param address Memory address where the data will be read from
 */
void read_flash(uint8_t* data, uint32_t size, uint32_t address) {
 8000fec:	b480      	push	{r7}
 8000fee:	b087      	sub	sp, #28
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
    for (uint32_t i = 0; i < size; i++) {
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
 8000ffc:	e00b      	b.n	8001016 <read_flash+0x2a>
        data[i] = *((uint8_t*)(address + i));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	4413      	add	r3, r2
 8001004:	4619      	mov	r1, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	4413      	add	r3, r2
 800100c:	780a      	ldrb	r2, [r1, #0]
 800100e:	701a      	strb	r2, [r3, #0]
    for (uint32_t i = 0; i < size; i++) {
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3301      	adds	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
 8001016:	697a      	ldr	r2, [r7, #20]
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	429a      	cmp	r2, r3
 800101c:	d3ef      	bcc.n	8000ffe <read_flash+0x12>
    }
}
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	371c      	adds	r7, #28
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <debug_process>:
_debug_frame debuglog[LOG_FRAME];
uint8_t debug_cnt = 0;
static uint8_t out_index = 0;
static uint8_t in_index = 0;
void debug_process()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0

	if(debug_cnt)
 8001030:	4b19      	ldr	r3, [pc, #100]	; (8001098 <debug_process+0x6c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d02c      	beq.n	8001092 <debug_process+0x66>
	{
		if(CDC_Transmit_FS(debuglog[out_index].data,debuglog[out_index].size)==USBD_OK)
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <debug_process+0x70>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	2365      	movs	r3, #101	; 0x65
 8001040:	fb02 f303 	mul.w	r3, r2, r3
 8001044:	4a16      	ldr	r2, [pc, #88]	; (80010a0 <debug_process+0x74>)
 8001046:	4413      	add	r3, r2
 8001048:	1c5a      	adds	r2, r3, #1
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <debug_process+0x70>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	4913      	ldr	r1, [pc, #76]	; (80010a0 <debug_process+0x74>)
 8001052:	2365      	movs	r3, #101	; 0x65
 8001054:	fb00 f303 	mul.w	r3, r0, r3
 8001058:	440b      	add	r3, r1
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4619      	mov	r1, r3
 8001060:	4610      	mov	r0, r2
 8001062:	f00b ffbd 	bl	800cfe0 <CDC_Transmit_FS>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d112      	bne.n	8001092 <debug_process+0x66>
		{
			out_index++;
 800106c:	4b0b      	ldr	r3, [pc, #44]	; (800109c <debug_process+0x70>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	3301      	adds	r3, #1
 8001072:	b2da      	uxtb	r2, r3
 8001074:	4b09      	ldr	r3, [pc, #36]	; (800109c <debug_process+0x70>)
 8001076:	701a      	strb	r2, [r3, #0]
			if(out_index == LOG_FRAME)
 8001078:	4b08      	ldr	r3, [pc, #32]	; (800109c <debug_process+0x70>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b32      	cmp	r3, #50	; 0x32
 800107e:	d102      	bne.n	8001086 <debug_process+0x5a>
				out_index =0;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <debug_process+0x70>)
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
			debug_cnt--;
 8001086:	4b04      	ldr	r3, [pc, #16]	; (8001098 <debug_process+0x6c>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	3b01      	subs	r3, #1
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b02      	ldr	r3, [pc, #8]	; (8001098 <debug_process+0x6c>)
 8001090:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20002ab6 	.word	0x20002ab6
 800109c:	20002ab7 	.word	0x20002ab7
 80010a0:	200016fc 	.word	0x200016fc

080010a4 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]

	debuglog[in_index].size = len;
 80010b0:	4b1c      	ldr	r3, [pc, #112]	; (8001124 <_write+0x80>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	b2d9      	uxtb	r1, r3
 80010ba:	4a1b      	ldr	r2, [pc, #108]	; (8001128 <_write+0x84>)
 80010bc:	2365      	movs	r3, #101	; 0x65
 80010be:	fb00 f303 	mul.w	r3, r0, r3
 80010c2:	4413      	add	r3, r2
 80010c4:	460a      	mov	r2, r1
 80010c6:	701a      	strb	r2, [r3, #0]
	memcpy(debuglog[in_index].data,ptr,len);
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <_write+0x80>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	461a      	mov	r2, r3
 80010ce:	2365      	movs	r3, #101	; 0x65
 80010d0:	fb02 f303 	mul.w	r3, r2, r3
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_write+0x84>)
 80010d6:	4413      	add	r3, r2
 80010d8:	3301      	adds	r3, #1
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	68b9      	ldr	r1, [r7, #8]
 80010de:	4618      	mov	r0, r3
 80010e0:	f00c fc22 	bl	800d928 <memcpy>
	debug_cnt++;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <_write+0x88>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <_write+0x88>)
 80010ee:	701a      	strb	r2, [r3, #0]
	if(debug_cnt>LOG_FRAME)
 80010f0:	4b0e      	ldr	r3, [pc, #56]	; (800112c <_write+0x88>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b32      	cmp	r3, #50	; 0x32
 80010f6:	d902      	bls.n	80010fe <_write+0x5a>
	{
		debug_cnt = LOG_FRAME;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <_write+0x88>)
 80010fa:	2232      	movs	r2, #50	; 0x32
 80010fc:	701a      	strb	r2, [r3, #0]
	}
	in_index++;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <_write+0x80>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <_write+0x80>)
 8001108:	701a      	strb	r2, [r3, #0]
	if(in_index == LOG_FRAME)
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <_write+0x80>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2b32      	cmp	r3, #50	; 0x32
 8001110:	d102      	bne.n	8001118 <_write+0x74>
		in_index =0;
 8001112:	4b04      	ldr	r3, [pc, #16]	; (8001124 <_write+0x80>)
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
	return len;
 8001118:	687b      	ldr	r3, [r7, #4]
}
 800111a:	4618      	mov	r0, r3
 800111c:	3710      	adds	r7, #16
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20002ab8 	.word	0x20002ab8
 8001128:	200016fc 	.word	0x200016fc
 800112c:	20002ab6 	.word	0x20002ab6

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f002 fcee 	bl	8003b14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001138:	f000 f85c 	bl	80011f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800113c:	f000 fb84 	bl	8001848 <MX_GPIO_Init>
  MX_DMA_Init();
 8001140:	f000 fb44 	bl	80017cc <MX_DMA_Init>
  MX_I2C1_Init();
 8001144:	f000 f8c0 	bl	80012c8 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001148:	f000 f8ec 	bl	8001324 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800114c:	f000 fb14 	bl	8001778 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001150:	f00b fe88 	bl	800ce64 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8001154:	f000 f91c 	bl	8001390 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001158:	f000 fa0a 	bl	8001570 <MX_TIM3_Init>
  MX_TIM8_Init();
 800115c:	f000 fad0 	bl	8001700 <MX_TIM8_Init>
  MX_TIM2_Init();
 8001160:	f000 f9b8 	bl	80014d4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8001164:	f000 fa7c 	bl	8001660 <MX_TIM5_Init>
//  HAL_FLASH_Unlock();
//  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
//  FLASH_Erase_Sector(FLASH_SECTOR_7, VOLTAGE_RANGE_3);
//  HAL_FLASH_Program(TYPEPROGRAM_WORD,0x08060000, 0x11223344);
//  HAL_FLASH_Lock();
  Dwin_init();
 8001168:	f7ff fbc2 	bl	80008f0 <Dwin_init>
  dt_system_data_init();
 800116c:	f7ff fac2 	bl	80006f4 <dt_system_data_init>
  uart_dma_start();
 8001170:	f002 fc30 	bl	80039d4 <uart_dma_start>
  dw_update_step_numbers();
 8001174:	f7ff fe88 	bl	8000e88 <dw_update_step_numbers>
//  HAL_TIM_Base_Start(&htim3);
  x_step_mt_int();
 8001178:	f000 fd2a 	bl	8001bd0 <x_step_mt_int>
  z_step_mt_int();
 800117c:	f000 febc 	bl	8001ef8 <z_step_mt_int>
  mt_move_to_home(&x_motor);
 8001180:	4818      	ldr	r0, [pc, #96]	; (80011e4 <main+0xb4>)
 8001182:	f000 fca8 	bl	8001ad6 <mt_move_to_home>
  mt_move_to_home(&z_motor);
 8001186:	4818      	ldr	r0, [pc, #96]	; (80011e8 <main+0xb8>)
 8001188:	f000 fca5 	bl	8001ad6 <mt_move_to_home>
  while(1){  // home Z
	  z_step_motor_process();
 800118c:	f000 ff02 	bl	8001f94 <z_step_motor_process>
	  dw_update_steper_positon();
 8001190:	f7ff fe8a 	bl	8000ea8 <dw_update_steper_positon>
	  if(z_motor.is_home)
 8001194:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <main+0xb8>)
 8001196:	7cdb      	ldrb	r3, [r3, #19]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d0f7      	beq.n	800118c <main+0x5c>
		  break;
  }
  while(1){  // home Z
	  x_step_motor_process();
 800119c:	f000 fde2 	bl	8001d64 <x_step_motor_process>
	  dw_update_steper_positon();
 80011a0:	f7ff fe82 	bl	8000ea8 <dw_update_steper_positon>
	  dw_update_steper_positon();
 80011a4:	f7ff fe80 	bl	8000ea8 <dw_update_steper_positon>
	  if(x_motor.is_home)
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <main+0xb4>)
 80011aa:	7cdb      	ldrb	r3, [r3, #19]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d100      	bne.n	80011b2 <main+0x82>
	  x_step_motor_process();
 80011b0:	e7f4      	b.n	800119c <main+0x6c>
		  break;
 80011b2:	bf00      	nop
 }
//  uint32_t ti;
  printf("code started \n");
 80011b4:	480d      	ldr	r0, [pc, #52]	; (80011ec <main+0xbc>)
 80011b6:	f00c fc53 	bl	800da60 <puts>
  HAL_Delay(100);
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f002 fd1c 	bl	8003bf8 <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  usercommand =1;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <main+0xc0>)
 80011c2:	2201      	movs	r2, #1
 80011c4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
	  debug_process();
 80011c6:	f7ff ff31 	bl	800102c <debug_process>
//			sprintf(tmp,"CURRENT_TIME :%d",cnt ++);
//			s_log_add_1_line(tmp);
//		   ti = HAL_GetTick() +500;
//	  }
//	  step_shake_process();
	  pg_process_loop();
 80011ca:	f001 f803 	bl	80021d4 <pg_process_loop>
	  uart_process();
 80011ce:	f002 fc19 	bl	8003a04 <uart_process>
	  x_step_motor_process();
 80011d2:	f000 fdc7 	bl	8001d64 <x_step_motor_process>
	  dw_update_steper_positon();
 80011d6:	f7ff fe67 	bl	8000ea8 <dw_update_steper_positon>
	  z_step_motor_process();
 80011da:	f000 fedb 	bl	8001f94 <z_step_motor_process>
	  dw_update_steper_positon();
 80011de:	f7ff fe63 	bl	8000ea8 <dw_update_steper_positon>
	  debug_process();
 80011e2:	e7f0      	b.n	80011c6 <main+0x96>
 80011e4:	20002abc 	.word	0x20002abc
 80011e8:	20002aec 	.word	0x20002aec
 80011ec:	0800ed58 	.word	0x0800ed58
 80011f0:	20002ab9 	.word	0x20002ab9

080011f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b094      	sub	sp, #80	; 0x50
 80011f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	2230      	movs	r2, #48	; 0x30
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f00c fb9e 	bl	800d944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001208:	f107 030c 	add.w	r3, r7, #12
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001218:	2300      	movs	r3, #0
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <SystemClock_Config+0xcc>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <SystemClock_Config+0xcc>)
 8001222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001226:	6413      	str	r3, [r2, #64]	; 0x40
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <SystemClock_Config+0xcc>)
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001234:	2300      	movs	r3, #0
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <SystemClock_Config+0xd0>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a21      	ldr	r2, [pc, #132]	; (80012c4 <SystemClock_Config+0xd0>)
 800123e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <SystemClock_Config+0xd0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800124c:	607b      	str	r3, [r7, #4]
 800124e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001250:	2301      	movs	r3, #1
 8001252:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125a:	2302      	movs	r3, #2
 800125c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001264:	2304      	movs	r3, #4
 8001266:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001268:	23a8      	movs	r3, #168	; 0xa8
 800126a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800126c:	2302      	movs	r3, #2
 800126e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001270:	2307      	movs	r3, #7
 8001272:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001274:	f107 0320 	add.w	r3, r7, #32
 8001278:	4618      	mov	r0, r3
 800127a:	f005 f983 	bl	8006584 <HAL_RCC_OscConfig>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001284:	f000 fc22 	bl	8001acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001288:	230f      	movs	r3, #15
 800128a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128c:	2302      	movs	r3, #2
 800128e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001294:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001298:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800129a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800129e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	2105      	movs	r1, #5
 80012a6:	4618      	mov	r0, r3
 80012a8:	f005 fbe4 	bl	8006a74 <HAL_RCC_ClockConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012b2:	f000 fc0b 	bl	8001acc <Error_Handler>
  }
}
 80012b6:	bf00      	nop
 80012b8:	3750      	adds	r7, #80	; 0x50
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012cc:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C1_Init+0x50>)
 80012ce:	4a13      	ldr	r2, [pc, #76]	; (800131c <MX_I2C1_Init+0x54>)
 80012d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_I2C1_Init+0x50>)
 80012d4:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_I2C1_Init+0x58>)
 80012d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d8:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C1_Init+0x50>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_I2C1_Init+0x50>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_I2C1_Init+0x50>)
 80012e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_I2C1_Init+0x50>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_I2C1_Init+0x50>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <MX_I2C1_Init+0x50>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_I2C1_Init+0x50>)
 8001300:	2200      	movs	r2, #0
 8001302:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_I2C1_Init+0x50>)
 8001306:	f003 fd7b 	bl	8004e00 <HAL_I2C_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001310:	f000 fbdc 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20001384 	.word	0x20001384
 800131c:	40005400 	.word	0x40005400
 8001320:	000186a0 	.word	0x000186a0

08001324 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_SPI1_Init+0x64>)
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <MX_SPI1_Init+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_SPI1_Init+0x64>)
 8001330:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001334:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001336:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_SPI1_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800133c:	4b12      	ldr	r3, [pc, #72]	; (8001388 <MX_SPI1_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_SPI1_Init+0x64>)
 8001344:	2200      	movs	r2, #0
 8001346:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_SPI1_Init+0x64>)
 800134a:	2200      	movs	r2, #0
 800134c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_SPI1_Init+0x64>)
 8001350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001354:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_SPI1_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_SPI1_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_SPI1_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_SPI1_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_SPI1_Init+0x64>)
 8001370:	220a      	movs	r2, #10
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_SPI1_Init+0x64>)
 8001376:	f005 fd9d 	bl	8006eb4 <HAL_SPI_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001380:	f000 fba4 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200013d8 	.word	0x200013d8
 800138c:	40013000 	.word	0x40013000

08001390 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b096      	sub	sp, #88	; 0x58
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]
 80013be:	615a      	str	r2, [r3, #20]
 80013c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2220      	movs	r2, #32
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f00c fabb 	bl	800d944 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013ce:	4b3f      	ldr	r3, [pc, #252]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013d0:	4a3f      	ldr	r2, [pc, #252]	; (80014d0 <MX_TIM1_Init+0x140>)
 80013d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40;
 80013d4:	4b3d      	ldr	r3, [pc, #244]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013d6:	2228      	movs	r2, #40	; 0x28
 80013d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b3c      	ldr	r3, [pc, #240]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80013e0:	4b3a      	ldr	r3, [pc, #232]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013e2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e8:	4b38      	ldr	r3, [pc, #224]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 199;
 80013ee:	4b37      	ldr	r3, [pc, #220]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013f0:	22c7      	movs	r2, #199	; 0xc7
 80013f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b35      	ldr	r3, [pc, #212]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013fa:	4834      	ldr	r0, [pc, #208]	; (80014cc <MX_TIM1_Init+0x13c>)
 80013fc:	f005 fde3 	bl	8006fc6 <HAL_TIM_Base_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001406:	f000 fb61 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001410:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001414:	4619      	mov	r1, r3
 8001416:	482d      	ldr	r0, [pc, #180]	; (80014cc <MX_TIM1_Init+0x13c>)
 8001418:	f006 f930 	bl	800767c <HAL_TIM_ConfigClockSource>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001422:	f000 fb53 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001426:	4829      	ldr	r0, [pc, #164]	; (80014cc <MX_TIM1_Init+0x13c>)
 8001428:	f005 fe84 	bl	8007134 <HAL_TIM_PWM_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001432:	f000 fb4b 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001436:	2340      	movs	r3, #64	; 0x40
 8001438:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143a:	2300      	movs	r3, #0
 800143c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800143e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001442:	4619      	mov	r1, r3
 8001444:	4821      	ldr	r0, [pc, #132]	; (80014cc <MX_TIM1_Init+0x13c>)
 8001446:	f006 fdc3 	bl	8007fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001450:	f000 fb3c 	bl	8001acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001454:	2360      	movs	r3, #96	; 0x60
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 499;
 8001458:	f240 13f3 	movw	r3, #499	; 0x1f3
 800145c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145e:	2300      	movs	r3, #0
 8001460:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001462:	2300      	movs	r3, #0
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001466:	2300      	movs	r3, #0
 8001468:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146a:	2300      	movs	r3, #0
 800146c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001476:	2200      	movs	r2, #0
 8001478:	4619      	mov	r1, r3
 800147a:	4814      	ldr	r0, [pc, #80]	; (80014cc <MX_TIM1_Init+0x13c>)
 800147c:	f006 f83c 	bl	80074f8 <HAL_TIM_PWM_ConfigChannel>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001486:	f000 fb21 	bl	8001acc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800149e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	4807      	ldr	r0, [pc, #28]	; (80014cc <MX_TIM1_Init+0x13c>)
 80014ae:	f006 fe0b 	bl	80080c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80014b8:	f000 fb08 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014bc:	4803      	ldr	r0, [pc, #12]	; (80014cc <MX_TIM1_Init+0x13c>)
 80014be:	f001 ffbb 	bl	8003438 <HAL_TIM_MspPostInit>

}
 80014c2:	bf00      	nop
 80014c4:	3758      	adds	r7, #88	; 0x58
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20001430 	.word	0x20001430
 80014d0:	40010000 	.word	0x40010000

080014d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014da:	f107 030c 	add.w	r3, r7, #12
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	; (800156c <MX_TIM2_Init+0x98>)
 80014f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <MX_TIM2_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b1a      	ldr	r3, [pc, #104]	; (800156c <MX_TIM2_Init+0x98>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <MX_TIM2_Init+0x98>)
 8001508:	f04f 32ff 	mov.w	r2, #4294967295
 800150c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b17      	ldr	r3, [pc, #92]	; (800156c <MX_TIM2_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <MX_TIM2_Init+0x98>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800151a:	4814      	ldr	r0, [pc, #80]	; (800156c <MX_TIM2_Init+0x98>)
 800151c:	f005 fd53 	bl	8006fc6 <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001526:	f000 fad1 	bl	8001acc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800152a:	2307      	movs	r3, #7
 800152c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	4619      	mov	r1, r3
 8001538:	480c      	ldr	r0, [pc, #48]	; (800156c <MX_TIM2_Init+0x98>)
 800153a:	f006 f966 	bl	800780a <HAL_TIM_SlaveConfigSynchro>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001544:	f000 fac2 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001548:	2300      	movs	r3, #0
 800154a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_TIM2_Init+0x98>)
 8001556:	f006 fd3b 	bl	8007fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001560:	f000 fab4 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20001478 	.word	0x20001478

08001570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08e      	sub	sp, #56	; 0x38
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	f107 0320 	add.w	r3, r7, #32
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
 800159c:	615a      	str	r2, [r3, #20]
 800159e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015a0:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015a2:	4a2e      	ldr	r2, [pc, #184]	; (800165c <MX_TIM3_Init+0xec>)
 80015a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40;
 80015a6:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015a8:	2228      	movs	r2, #40	; 0x28
 80015aa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80015b2:	4b29      	ldr	r3, [pc, #164]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015b8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ba:	4b27      	ldr	r3, [pc, #156]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015c6:	4824      	ldr	r0, [pc, #144]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015c8:	f005 fcfd 	bl	8006fc6 <HAL_TIM_Base_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015d2:	f000 fa7b 	bl	8001acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015e0:	4619      	mov	r1, r3
 80015e2:	481d      	ldr	r0, [pc, #116]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015e4:	f006 f84a 	bl	800767c <HAL_TIM_ConfigClockSource>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015ee:	f000 fa6d 	bl	8001acc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015f2:	4819      	ldr	r0, [pc, #100]	; (8001658 <MX_TIM3_Init+0xe8>)
 80015f4:	f005 fd9e 	bl	8007134 <HAL_TIM_PWM_Init>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015fe:	f000 fa65 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8001602:	2340      	movs	r3, #64	; 0x40
 8001604:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	4619      	mov	r1, r3
 8001610:	4811      	ldr	r0, [pc, #68]	; (8001658 <MX_TIM3_Init+0xe8>)
 8001612:	f006 fcdd 	bl	8007fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800161c:	f000 fa56 	bl	8001acc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001620:	2360      	movs	r3, #96	; 0x60
 8001622:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8001624:	f240 13f3 	movw	r3, #499	; 0x1f3
 8001628:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	2200      	movs	r2, #0
 8001636:	4619      	mov	r1, r3
 8001638:	4807      	ldr	r0, [pc, #28]	; (8001658 <MX_TIM3_Init+0xe8>)
 800163a:	f005 ff5d 	bl	80074f8 <HAL_TIM_PWM_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001644:	f000 fa42 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001648:	4803      	ldr	r0, [pc, #12]	; (8001658 <MX_TIM3_Init+0xe8>)
 800164a:	f001 fef5 	bl	8003438 <HAL_TIM_MspPostInit>

}
 800164e:	bf00      	nop
 8001650:	3738      	adds	r7, #56	; 0x38
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200014c0 	.word	0x200014c0
 800165c:	40000400 	.word	0x40000400

08001660 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800167e:	4b1e      	ldr	r3, [pc, #120]	; (80016f8 <MX_TIM5_Init+0x98>)
 8001680:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <MX_TIM5_Init+0x9c>)
 8001682:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001684:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_TIM5_Init+0x98>)
 8001686:	2200      	movs	r2, #0
 8001688:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168a:	4b1b      	ldr	r3, [pc, #108]	; (80016f8 <MX_TIM5_Init+0x98>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001690:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_TIM5_Init+0x98>)
 8001692:	f04f 32ff 	mov.w	r2, #4294967295
 8001696:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_TIM5_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800169e:	4b16      	ldr	r3, [pc, #88]	; (80016f8 <MX_TIM5_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016a4:	4814      	ldr	r0, [pc, #80]	; (80016f8 <MX_TIM5_Init+0x98>)
 80016a6:	f005 fc8e 	bl	8006fc6 <HAL_TIM_Base_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80016b0:	f000 fa0c 	bl	8001acc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80016b4:	2307      	movs	r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80016b8:	2310      	movs	r3, #16
 80016ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim5, &sSlaveConfig) != HAL_OK)
 80016bc:	f107 030c 	add.w	r3, r7, #12
 80016c0:	4619      	mov	r1, r3
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <MX_TIM5_Init+0x98>)
 80016c4:	f006 f8a1 	bl	800780a <HAL_TIM_SlaveConfigSynchro>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM5_Init+0x72>
  {
    Error_Handler();
 80016ce:	f000 f9fd 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	4619      	mov	r1, r3
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <MX_TIM5_Init+0x98>)
 80016e0:	f006 fc76 	bl	8007fd0 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM5_Init+0x8e>
  {
    Error_Handler();
 80016ea:	f000 f9ef 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	3720      	adds	r7, #32
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20001508 	.word	0x20001508
 80016fc:	40000c00 	.word	0x40000c00

08001700 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001706:	463b      	mov	r3, r7
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MX_TIM8_Init+0x70>)
 8001710:	4a18      	ldr	r2, [pc, #96]	; (8001774 <MX_TIM8_Init+0x74>)
 8001712:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <MX_TIM8_Init+0x70>)
 8001716:	2200      	movs	r2, #0
 8001718:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <MX_TIM8_Init+0x70>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001720:	4b13      	ldr	r3, [pc, #76]	; (8001770 <MX_TIM8_Init+0x70>)
 8001722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001726:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_TIM8_Init+0x70>)
 800172a:	2200      	movs	r2, #0
 800172c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_TIM8_Init+0x70>)
 8001730:	2200      	movs	r2, #0
 8001732:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001734:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_TIM8_Init+0x70>)
 8001736:	2200      	movs	r2, #0
 8001738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 800173a:	2108      	movs	r1, #8
 800173c:	480c      	ldr	r0, [pc, #48]	; (8001770 <MX_TIM8_Init+0x70>)
 800173e:	f005 fe8b 	bl	8007458 <HAL_TIM_OnePulse_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM8_Init+0x4c>
  {
    Error_Handler();
 8001748:	f000 f9c0 	bl	8001acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001754:	463b      	mov	r3, r7
 8001756:	4619      	mov	r1, r3
 8001758:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_TIM8_Init+0x70>)
 800175a:	f006 fc39 	bl	8007fd0 <HAL_TIMEx_MasterConfigSynchronization>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM8_Init+0x68>
  {
    Error_Handler();
 8001764:	f000 f9b2 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	3708      	adds	r7, #8
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20001550 	.word	0x20001550
 8001774:	40010400 	.word	0x40010400

08001778 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800177c:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 800177e:	4a12      	ldr	r2, [pc, #72]	; (80017c8 <MX_USART2_UART_Init+0x50>)
 8001780:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 8001784:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001788:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001790:	4b0c      	ldr	r3, [pc, #48]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001796:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 8001798:	2200      	movs	r2, #0
 800179a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800179c:	4b09      	ldr	r3, [pc, #36]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 800179e:	220c      	movs	r2, #12
 80017a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017a2:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017ae:	4805      	ldr	r0, [pc, #20]	; (80017c4 <MX_USART2_UART_Init+0x4c>)
 80017b0:	f006 fcdc 	bl	800816c <HAL_UART_Init>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017ba:	f000 f987 	bl	8001acc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200015f8 	.word	0x200015f8
 80017c8:	40004400 	.word	0x40004400

080017cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_DMA_Init+0x78>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <MX_DMA_Init+0x78>)
 80017dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_DMA_Init+0x78>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_DMA_Init+0x78>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <MX_DMA_Init+0x78>)
 80017f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_DMA_Init+0x78>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2010      	movs	r0, #16
 8001810:	f002 faf1 	bl	8003df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001814:	2010      	movs	r0, #16
 8001816:	f002 fb0a 	bl	8003e2e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2011      	movs	r0, #17
 8001820:	f002 fae9 	bl	8003df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001824:	2011      	movs	r0, #17
 8001826:	f002 fb02 	bl	8003e2e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2039      	movs	r0, #57	; 0x39
 8001830:	f002 fae1 	bl	8003df6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001834:	2039      	movs	r0, #57	; 0x39
 8001836:	f002 fafa 	bl	8003e2e <HAL_NVIC_EnableIRQ>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	4b94      	ldr	r3, [pc, #592]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a93      	ldr	r2, [pc, #588]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 8001868:	f043 0310 	orr.w	r3, r3, #16
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b91      	ldr	r3, [pc, #580]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	4b8d      	ldr	r3, [pc, #564]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a8c      	ldr	r2, [pc, #560]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b8a      	ldr	r3, [pc, #552]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b86      	ldr	r3, [pc, #536]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a85      	ldr	r2, [pc, #532]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b83      	ldr	r3, [pc, #524]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b7f      	ldr	r3, [pc, #508]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a7e      	ldr	r2, [pc, #504]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b7c      	ldr	r3, [pc, #496]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b78      	ldr	r3, [pc, #480]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a77      	ldr	r2, [pc, #476]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b75      	ldr	r3, [pc, #468]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b71      	ldr	r3, [pc, #452]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a70      	ldr	r2, [pc, #448]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b6e      	ldr	r3, [pc, #440]	; (8001ab4 <MX_GPIO_Init+0x26c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|X_MOTOR_DIR_Pin|X_MOTOR_EN_Pin, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	f640 4108 	movw	r1, #3080	; 0xc08
 800190c:	486a      	ldr	r0, [pc, #424]	; (8001ab8 <MX_GPIO_Init+0x270>)
 800190e:	f003 fa5d 	bl	8004dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001912:	2201      	movs	r2, #1
 8001914:	2101      	movs	r1, #1
 8001916:	4869      	ldr	r0, [pc, #420]	; (8001abc <MX_GPIO_Init+0x274>)
 8001918:	f003 fa58 	bl	8004dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|HEATER_Pin|PUMP2_Pin|PUMP1_Pin
 800191c:	2200      	movs	r2, #0
 800191e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001922:	4867      	ldr	r0, [pc, #412]	; (8001ac0 <MX_GPIO_Init+0x278>)
 8001924:	f003 fa52 	bl	8004dcc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Z_MOTOR_DIR_Pin|Z_MOTOR_EN_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800192e:	4863      	ldr	r0, [pc, #396]	; (8001abc <MX_GPIO_Init+0x274>)
 8001930:	f003 fa4c 	bl	8004dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin X_MOTOR_DIR_Pin X_MOTOR_EN_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|X_MOTOR_DIR_Pin|X_MOTOR_EN_Pin;
 8001934:	f640 4308 	movw	r3, #3080	; 0xc08
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800193a:	2301      	movs	r3, #1
 800193c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001946:	f107 031c 	add.w	r3, r7, #28
 800194a:	4619      	mov	r1, r3
 800194c:	485a      	ldr	r0, [pc, #360]	; (8001ab8 <MX_GPIO_Init+0x270>)
 800194e:	f003 f889 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin Z_MOTOR_DIR_Pin Z_MOTOR_EN_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|Z_MOTOR_DIR_Pin|Z_MOTOR_EN_Pin;
 8001952:	f240 1381 	movw	r3, #385	; 0x181
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001958:	2301      	movs	r3, #1
 800195a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001964:	f107 031c 	add.w	r3, r7, #28
 8001968:	4619      	mov	r1, r3
 800196a:	4854      	ldr	r0, [pc, #336]	; (8001abc <MX_GPIO_Init+0x274>)
 800196c:	f003 f87a 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001970:	2308      	movs	r3, #8
 8001972:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001980:	2305      	movs	r3, #5
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 031c 	add.w	r3, r7, #28
 8001988:	4619      	mov	r1, r3
 800198a:	484c      	ldr	r0, [pc, #304]	; (8001abc <MX_GPIO_Init+0x274>)
 800198c:	f003 f86a 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001990:	2301      	movs	r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001994:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4847      	ldr	r0, [pc, #284]	; (8001ac4 <MX_GPIO_Init+0x27c>)
 80019a6:	f003 f85d 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80019aa:	2310      	movs	r3, #16
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019ba:	2306      	movs	r3, #6
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80019be:	f107 031c 	add.w	r3, r7, #28
 80019c2:	4619      	mov	r1, r3
 80019c4:	483f      	ldr	r0, [pc, #252]	; (8001ac4 <MX_GPIO_Init+0x27c>)
 80019c6:	f003 f84d 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80019ca:	2304      	movs	r3, #4
 80019cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019ce:	2300      	movs	r3, #0
 80019d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	483a      	ldr	r0, [pc, #232]	; (8001ac8 <MX_GPIO_Init+0x280>)
 80019de:	f003 f841 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : X_HOME_SWITCH_Pin */
  GPIO_InitStruct.Pin = X_HOME_SWITCH_Pin;
 80019e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019ec:	2301      	movs	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(X_HOME_SWITCH_GPIO_Port, &GPIO_InitStruct);
 80019f0:	f107 031c 	add.w	r3, r7, #28
 80019f4:	4619      	mov	r1, r3
 80019f6:	4830      	ldr	r0, [pc, #192]	; (8001ab8 <MX_GPIO_Init+0x270>)
 80019f8:	f003 f834 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80019fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a0e:	2305      	movs	r3, #5
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	482b      	ldr	r0, [pc, #172]	; (8001ac8 <MX_GPIO_Init+0x280>)
 8001a1a:	f003 f823 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : WS_SOLUTION_EMPTY_Pin WS_SOLUTION_FULL_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = WS_SOLUTION_EMPTY_Pin|WS_SOLUTION_FULL_Pin|OTG_FS_OverCurrent_Pin;
 8001a1e:	f44f 6342 	mov.w	r3, #3104	; 0xc20
 8001a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	4619      	mov	r1, r3
 8001a32:	4823      	ldr	r0, [pc, #140]	; (8001ac0 <MX_GPIO_Init+0x278>)
 8001a34:	f003 f816 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin HEATER_Pin PUMP2_Pin PUMP1_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|HEATER_Pin|PUMP2_Pin|PUMP1_Pin
 8001a38:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001a3c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a42:	2300      	movs	r3, #0
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a46:	2300      	movs	r3, #0
 8001a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a4a:	f107 031c 	add.w	r3, r7, #28
 8001a4e:	4619      	mov	r1, r3
 8001a50:	481b      	ldr	r0, [pc, #108]	; (8001ac0 <MX_GPIO_Init+0x278>)
 8001a52:	f003 f807 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : Z_HOME_SWITCH_Pin */
  GPIO_InitStruct.Pin = Z_HOME_SWITCH_Pin;
 8001a56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a60:	2301      	movs	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Z_HOME_SWITCH_GPIO_Port, &GPIO_InitStruct);
 8001a64:	f107 031c 	add.w	r3, r7, #28
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <MX_GPIO_Init+0x274>)
 8001a6c:	f002 fffa 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_SCK_Pin|I2S3_SD_Pin;
 8001a70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a82:	2306      	movs	r3, #6
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a86:	f107 031c 	add.w	r3, r7, #28
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	480b      	ldr	r0, [pc, #44]	; (8001abc <MX_GPIO_Init+0x274>)
 8001a8e:	f002 ffe9 	bl	8004a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001a92:	2302      	movs	r3, #2
 8001a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a96:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 031c 	add.w	r3, r7, #28
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <MX_GPIO_Init+0x270>)
 8001aa8:	f002 ffdc 	bl	8004a64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aac:	bf00      	nop
 8001aae:	3730      	adds	r7, #48	; 0x30
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	40020800 	.word	0x40020800
 8001ac0:	40020c00 	.word	0x40020c00
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40020400 	.word	0x40020400

08001acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad0:	b672      	cpsid	i
}
 8001ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ad4:	e7fe      	b.n	8001ad4 <Error_Handler+0x8>

08001ad6 <mt_move_to_home>:
extern TIM_HandleTypeDef htim5;

_motor_typedef x_motor;


void mt_move_to_home(_motor_typedef *motor){
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
	if(motor->command == CMD_IDLE){
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	7d1b      	ldrb	r3, [r3, #20]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <mt_move_to_home+0x16>
		motor->command = CMD_REQUEST_HOME;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	751a      	strb	r2, [r3, #20]
	}
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <mt_set_target_position>:

void mt_set_target_position(_motor_typedef *motor,uint32_t new_position){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
	motor->next_pos = new_position;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	60da      	str	r2, [r3, #12]
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <x_mt_set_dir>:

void x_mt_set_dir(){
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
	if(x_motor.current_pos < x_motor.next_pos){
 8001b18:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <x_mt_set_dir+0x5c>)
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <x_mt_set_dir+0x5c>)
 8001b1e:	68db      	ldr	r3, [r3, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d211      	bcs.n	8001b48 <x_mt_set_dir+0x34>
		x_motor.current_dir = DIR_FORWARD;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <x_mt_set_dir+0x5c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_FORWARD);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b30:	4810      	ldr	r0, [pc, #64]	; (8001b74 <x_mt_set_dir+0x60>)
 8001b32:	f003 f94b 	bl	8004dcc <HAL_GPIO_WritePin>
		htim2.Instance->CR1 &= ~(1<<4);
 8001b36:	4b10      	ldr	r3, [pc, #64]	; (8001b78 <x_mt_set_dir+0x64>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <x_mt_set_dir+0x64>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0210 	bic.w	r2, r2, #16
 8001b44:	601a      	str	r2, [r3, #0]
		x_motor.current_dir = DIR_BACKWARD;
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_BACKWARD);
		htim2.Instance->CR1 |= (1<<4);
	}

}
 8001b46:	e010      	b.n	8001b6a <x_mt_set_dir+0x56>
		x_motor.current_dir = DIR_BACKWARD;
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <x_mt_set_dir+0x5c>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(X_MOTOR_DIR_GPIO_Port, X_MOTOR_DIR_Pin, DIR_BACKWARD);
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b54:	4807      	ldr	r0, [pc, #28]	; (8001b74 <x_mt_set_dir+0x60>)
 8001b56:	f003 f939 	bl	8004dcc <HAL_GPIO_WritePin>
		htim2.Instance->CR1 |= (1<<4);
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <x_mt_set_dir+0x64>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <x_mt_set_dir+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f042 0210 	orr.w	r2, r2, #16
 8001b68:	601a      	str	r2, [r3, #0]
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20002abc 	.word	0x20002abc
 8001b74:	40021000 	.word	0x40021000
 8001b78:	20001478 	.word	0x20001478

08001b7c <x_mt_start>:


void x_mt_start(){
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001b80:	2100      	movs	r1, #0
 8001b82:	4802      	ldr	r0, [pc, #8]	; (8001b8c <x_mt_start+0x10>)
 8001b84:	f005 fb30 	bl	80071e8 <HAL_TIM_PWM_Start>
}
 8001b88:	bf00      	nop
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20001430 	.word	0x20001430

08001b90 <x_mt_stop>:




void x_mt_stop()
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001b94:	2100      	movs	r1, #0
 8001b96:	4802      	ldr	r0, [pc, #8]	; (8001ba0 <x_mt_stop+0x10>)
 8001b98:	f005 fbee 	bl	8007378 <HAL_TIM_PWM_Stop>
}
 8001b9c:	bf00      	nop
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20001430 	.word	0x20001430

08001ba4 <x_set_current_position>:

void x_mt_move_to_pos(uint32_t pos){
	x_motor.next_pos = pos;
}

void x_set_current_position(uint32_t pos){
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	x_motor.current_pos = pos;
 8001bac:	4a06      	ldr	r2, [pc, #24]	; (8001bc8 <x_set_current_position+0x24>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6093      	str	r3, [r2, #8]
	htim2.Instance->CNT = pos;
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <x_set_current_position+0x28>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20002abc 	.word	0x20002abc
 8001bcc:	20001478 	.word	0x20001478

08001bd0 <x_step_mt_int>:


void x_step_mt_int(void){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
	x_motor.current_pos= x_motor.next_pos = htim2.Instance->CNT = 0;
 8001bd4:	4b0d      	ldr	r3, [pc, #52]	; (8001c0c <x_step_mt_int+0x3c>)
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	6253      	str	r3, [r2, #36]	; 0x24
 8001bdc:	4a0c      	ldr	r2, [pc, #48]	; (8001c10 <x_step_mt_int+0x40>)
 8001bde:	60d3      	str	r3, [r2, #12]
 8001be0:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <x_step_mt_int+0x40>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <x_step_mt_int+0x40>)
 8001be6:	6093      	str	r3, [r2, #8]
	x_motor.old_pos = x_motor.ud_time =0;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <x_step_mt_int+0x40>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <x_step_mt_int+0x40>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a07      	ldr	r2, [pc, #28]	; (8001c10 <x_step_mt_int+0x40>)
 8001bf4:	6053      	str	r3, [r2, #4]
	x_motor.home_achieve = 0;
 8001bf6:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <x_step_mt_int+0x40>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	749a      	strb	r2, [r3, #18]
	x_motor.set_current_position = x_set_current_position;
 8001bfc:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <x_step_mt_int+0x40>)
 8001bfe:	4a05      	ldr	r2, [pc, #20]	; (8001c14 <x_step_mt_int+0x44>)
 8001c00:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Start(&htim2);
 8001c02:	4802      	ldr	r0, [pc, #8]	; (8001c0c <x_step_mt_int+0x3c>)
 8001c04:	f005 fa2e 	bl	8007064 <HAL_TIM_Base_Start>
}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	20001478 	.word	0x20001478
 8001c10:	20002abc 	.word	0x20002abc
 8001c14:	08001ba5 	.word	0x08001ba5

08001c18 <step_mt_move_foward>:

void step_mt_move_foward(_motor_typedef *step,uint32_t numstep){
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
	step->next_pos +=numstep;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	441a      	add	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	60da      	str	r2, [r3, #12]
	if(step->next_pos > 2000000000)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <step_mt_move_foward+0x34>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d902      	bls.n	8001c3e <step_mt_move_foward+0x26>
	{
		step->next_pos =2000000000;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <step_mt_move_foward+0x34>)
 8001c3c:	60da      	str	r2, [r3, #12]
	}
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	77359400 	.word	0x77359400

08001c50 <step_mt_move_backward>:

void step_mt_move_backward(_motor_typedef *step,uint32_t numstep){
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
	step->next_pos -=numstep;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	1ad2      	subs	r2, r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	60da      	str	r2, [r3, #12]
	if(step->next_pos > 2000000000)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	4a06      	ldr	r2, [pc, #24]	; (8001c84 <step_mt_move_backward+0x34>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d902      	bls.n	8001c76 <step_mt_move_backward+0x26>
	{
		step->next_pos =0;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
	}
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	77359400 	.word	0x77359400

08001c88 <x_step_motor_home_position>:

void x_step_motor_home_position()
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(X_HOME_SWITCH_GPIO_Port, X_HOME_SWITCH_Pin) && (!x_motor.is_home))
 8001c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c90:	4811      	ldr	r0, [pc, #68]	; (8001cd8 <x_step_motor_home_position+0x50>)
 8001c92:	f003 f883 	bl	8004d9c <HAL_GPIO_ReadPin>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d112      	bne.n	8001cc2 <x_step_motor_home_position+0x3a>
 8001c9c:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <x_step_motor_home_position+0x54>)
 8001c9e:	7cdb      	ldrb	r3, [r3, #19]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10e      	bne.n	8001cc2 <x_step_motor_home_position+0x3a>
	{
		x_motor.home_achieve = 1;
 8001ca4:	4b0d      	ldr	r3, [pc, #52]	; (8001cdc <x_step_motor_home_position+0x54>)
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	749a      	strb	r2, [r3, #18]
		x_motor.is_home = 1;
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <x_step_motor_home_position+0x54>)
 8001cac:	2201      	movs	r2, #1
 8001cae:	74da      	strb	r2, [r3, #19]
		x_mt_stop();
 8001cb0:	f7ff ff6e 	bl	8001b90 <x_mt_stop>
		x_motor.current_dir = htim2.Instance->CNT =0;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <x_step_motor_home_position+0x58>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	625a      	str	r2, [r3, #36]	; 0x24
 8001cbc:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <x_step_motor_home_position+0x54>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	741a      	strb	r2, [r3, #16]
	}
	if(htim2.Instance->CNT)
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <x_step_motor_home_position+0x58>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d002      	beq.n	8001cd2 <x_step_motor_home_position+0x4a>
	{
		x_motor.is_home = 0;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <x_step_motor_home_position+0x54>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	74da      	strb	r2, [r3, #19]
	}
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	20002abc 	.word	0x20002abc
 8001ce0:	20001478 	.word	0x20001478

08001ce4 <home_process>:

void home_process(_motor_typedef *motor)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
	switch (motor->command) {
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	7d1b      	ldrb	r3, [r3, #20]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d029      	beq.n	8001d48 <home_process+0x64>
 8001cf4:	2b03      	cmp	r3, #3
 8001cf6:	dc2b      	bgt.n	8001d50 <home_process+0x6c>
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d002      	beq.n	8001d02 <home_process+0x1e>
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d01b      	beq.n	8001d38 <home_process+0x54>
			break;
		case CMD_HOME_FINSH:
			motor->command = CMD_IDLE;
			break;
		default:
			break;
 8001d00:	e026      	b.n	8001d50 <home_process+0x6c>
			if(motor->home_achieve && (motor->current_pos == 0))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7c9b      	ldrb	r3, [r3, #18]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <home_process+0x36>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d103      	bne.n	8001d1a <home_process+0x36>
				motor->command = CMD_HOME_FINSH;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2203      	movs	r2, #3
 8001d16:	751a      	strb	r2, [r3, #20]
				break;
 8001d18:	e01d      	b.n	8001d56 <home_process+0x72>
			if(!motor->home_achieve)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7c9b      	ldrb	r3, [r3, #18]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <home_process+0x46>
				motor->set_current_position(200000000);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	480e      	ldr	r0, [pc, #56]	; (8001d60 <home_process+0x7c>)
 8001d28:	4798      	blx	r3
			motor ->next_pos = 0;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
			motor->command = CMD_WAIT_HOME;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	751a      	strb	r2, [r3, #20]
			break;
 8001d36:	e00e      	b.n	8001d56 <home_process+0x72>
			if(motor->current_pos == 0)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d109      	bne.n	8001d54 <home_process+0x70>
				motor->command = CMD_HOME_FINSH;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2203      	movs	r2, #3
 8001d44:	751a      	strb	r2, [r3, #20]
			break;
 8001d46:	e005      	b.n	8001d54 <home_process+0x70>
			motor->command = CMD_IDLE;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	751a      	strb	r2, [r3, #20]
			break;
 8001d4e:	e002      	b.n	8001d56 <home_process+0x72>
			break;
 8001d50:	bf00      	nop
 8001d52:	e000      	b.n	8001d56 <home_process+0x72>
			break;
 8001d54:	bf00      	nop
	}
}
 8001d56:	bf00      	nop
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	0bebc200 	.word	0x0bebc200

08001d64 <x_step_motor_process>:
void x_step_motor_process(void){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	static uint32_t time_x_check_home = 0;
	x_motor.current_pos = htim2.Instance->CNT;
 8001d68:	4b32      	ldr	r3, [pc, #200]	; (8001e34 <x_step_motor_process+0xd0>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d6e:	4a32      	ldr	r2, [pc, #200]	; (8001e38 <x_step_motor_process+0xd4>)
 8001d70:	6093      	str	r3, [r2, #8]
	if(HAL_GetTick() > time_x_check_home){
 8001d72:	f001 ff35 	bl	8003be0 <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	4b30      	ldr	r3, [pc, #192]	; (8001e3c <x_step_motor_process+0xd8>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d901      	bls.n	8001d84 <x_step_motor_process+0x20>
		x_step_motor_home_position();
 8001d80:	f7ff ff82 	bl	8001c88 <x_step_motor_home_position>
	}
	home_process(&x_motor);
 8001d84:	482c      	ldr	r0, [pc, #176]	; (8001e38 <x_step_motor_process+0xd4>)
 8001d86:	f7ff ffad 	bl	8001ce4 <home_process>
	switch (x_motor.state) {
 8001d8a:	4b2b      	ldr	r3, [pc, #172]	; (8001e38 <x_step_motor_process+0xd4>)
 8001d8c:	7c5b      	ldrb	r3, [r3, #17]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d848      	bhi.n	8001e24 <x_step_motor_process+0xc0>
 8001d92:	a201      	add	r2, pc, #4	; (adr r2, 8001d98 <x_step_motor_process+0x34>)
 8001d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d98:	08001da9 	.word	0x08001da9
 8001d9c:	08001dc5 	.word	0x08001dc5
 8001da0:	08001de9 	.word	0x08001de9
 8001da4:	08001e19 	.word	0x08001e19
		case MT_STATE_IDLE:
			if(abs(x_motor.current_pos- x_motor.next_pos) > STEP_LOSS){
 8001da8:	4b23      	ldr	r3, [pc, #140]	; (8001e38 <x_step_motor_process+0xd4>)
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	4b22      	ldr	r3, [pc, #136]	; (8001e38 <x_step_motor_process+0xd4>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	bfb8      	it	lt
 8001db6:	425b      	neglt	r3, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	dd35      	ble.n	8001e28 <x_step_motor_process+0xc4>
				x_motor.state = MT_STATE_START;
 8001dbc:	4b1e      	ldr	r3, [pc, #120]	; (8001e38 <x_step_motor_process+0xd4>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	745a      	strb	r2, [r3, #17]
			}
			break;
 8001dc2:	e031      	b.n	8001e28 <x_step_motor_process+0xc4>
		case MT_STATE_START:
			x_mt_set_dir();
 8001dc4:	f7ff fea6 	bl	8001b14 <x_mt_set_dir>
			if(x_motor.is_home == 1)
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <x_step_motor_process+0xd4>)
 8001dca:	7cdb      	ldrb	r3, [r3, #19]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d105      	bne.n	8001ddc <x_step_motor_process+0x78>
			{
				time_x_check_home = HAL_GetTick()+100;
 8001dd0:	f001 ff06 	bl	8003be0 <HAL_GetTick>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	3364      	adds	r3, #100	; 0x64
 8001dd8:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <x_step_motor_process+0xd8>)
 8001dda:	6013      	str	r3, [r2, #0]
			}
			x_mt_start();
 8001ddc:	f7ff fece 	bl	8001b7c <x_mt_start>
			x_motor.state = MT_STATE_RUNING;
 8001de0:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <x_step_motor_process+0xd4>)
 8001de2:	2202      	movs	r2, #2
 8001de4:	745a      	strb	r2, [r3, #17]
			break;
 8001de6:	e022      	b.n	8001e2e <x_step_motor_process+0xca>
		case MT_STATE_RUNING:
			if(x_motor.current_dir == DIR_FORWARD){
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <x_step_motor_process+0xd4>)
 8001dea:	7c1b      	ldrb	r3, [r3, #16]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d109      	bne.n	8001e04 <x_step_motor_process+0xa0>
				if(x_motor.current_pos >= x_motor.next_pos){
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <x_step_motor_process+0xd4>)
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <x_step_motor_process+0xd4>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d317      	bcc.n	8001e2c <x_step_motor_process+0xc8>
					x_motor.state = MT_STATE_STTOP;
 8001dfc:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <x_step_motor_process+0xd4>)
 8001dfe:	2203      	movs	r2, #3
 8001e00:	745a      	strb	r2, [r3, #17]
				}
			}
//			if(abs(x_motor.current_pos- x_motor.next_pos) < STEP_LOSS){
//							x_motor.state = MT_STATE_STTOP;
//			}
			break;
 8001e02:	e013      	b.n	8001e2c <x_step_motor_process+0xc8>
				if(x_motor.current_pos <= x_motor.next_pos){
 8001e04:	4b0c      	ldr	r3, [pc, #48]	; (8001e38 <x_step_motor_process+0xd4>)
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	4b0b      	ldr	r3, [pc, #44]	; (8001e38 <x_step_motor_process+0xd4>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d80d      	bhi.n	8001e2c <x_step_motor_process+0xc8>
					x_motor.state = MT_STATE_STTOP;
 8001e10:	4b09      	ldr	r3, [pc, #36]	; (8001e38 <x_step_motor_process+0xd4>)
 8001e12:	2203      	movs	r2, #3
 8001e14:	745a      	strb	r2, [r3, #17]
			break;
 8001e16:	e009      	b.n	8001e2c <x_step_motor_process+0xc8>
		case MT_STATE_STTOP:
			x_mt_stop();
 8001e18:	f7ff feba 	bl	8001b90 <x_mt_stop>
			x_motor.state = MT_STATE_IDLE;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <x_step_motor_process+0xd4>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	745a      	strb	r2, [r3, #17]
			break;
 8001e22:	e004      	b.n	8001e2e <x_step_motor_process+0xca>
		default:
			break;
 8001e24:	bf00      	nop
 8001e26:	e002      	b.n	8001e2e <x_step_motor_process+0xca>
			break;
 8001e28:	bf00      	nop
 8001e2a:	e000      	b.n	8001e2e <x_step_motor_process+0xca>
			break;
 8001e2c:	bf00      	nop
	}
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20001478 	.word	0x20001478
 8001e38:	20002abc 	.word	0x20002abc
 8001e3c:	20002b1c 	.word	0x20002b1c

08001e40 <z_mt_set_dir>:

_motor_typedef z_motor;



void z_mt_set_dir(){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	if(z_motor.current_pos < z_motor.next_pos){
 8001e44:	4b14      	ldr	r3, [pc, #80]	; (8001e98 <z_mt_set_dir+0x58>)
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	4b13      	ldr	r3, [pc, #76]	; (8001e98 <z_mt_set_dir+0x58>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d210      	bcs.n	8001e72 <z_mt_set_dir+0x32>
		z_motor.current_dir = DIR_FORWARD;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <z_mt_set_dir+0x58>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_FORWARD);
 8001e56:	2200      	movs	r2, #0
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	4810      	ldr	r0, [pc, #64]	; (8001e9c <z_mt_set_dir+0x5c>)
 8001e5c:	f002 ffb6 	bl	8004dcc <HAL_GPIO_WritePin>
		htim5.Instance->CR1 &= ~(1<<4);
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <z_mt_set_dir+0x60>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <z_mt_set_dir+0x60>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0210 	bic.w	r2, r2, #16
 8001e6e:	601a      	str	r2, [r3, #0]
		z_motor.current_dir = DIR_BACKWARD;
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_BACKWARD);
		htim5.Instance->CR1 |= (1<<4);
	}

}
 8001e70:	e00f      	b.n	8001e92 <z_mt_set_dir+0x52>
		z_motor.current_dir = DIR_BACKWARD;
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <z_mt_set_dir+0x58>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	741a      	strb	r2, [r3, #16]
		HAL_GPIO_WritePin(Z_MOTOR_DIR_GPIO_Port, Z_MOTOR_DIR_Pin, DIR_BACKWARD);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	4807      	ldr	r0, [pc, #28]	; (8001e9c <z_mt_set_dir+0x5c>)
 8001e7e:	f002 ffa5 	bl	8004dcc <HAL_GPIO_WritePin>
		htim5.Instance->CR1 |= (1<<4);
 8001e82:	4b07      	ldr	r3, [pc, #28]	; (8001ea0 <z_mt_set_dir+0x60>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <z_mt_set_dir+0x60>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f042 0210 	orr.w	r2, r2, #16
 8001e90:	601a      	str	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20002aec 	.word	0x20002aec
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	20001508 	.word	0x20001508

08001ea4 <z_mt_start>:

void z_mt_start(){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ea8:	2100      	movs	r1, #0
 8001eaa:	4802      	ldr	r0, [pc, #8]	; (8001eb4 <z_mt_start+0x10>)
 8001eac:	f005 f99c 	bl	80071e8 <HAL_TIM_PWM_Start>
}
 8001eb0:	bf00      	nop
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	200014c0 	.word	0x200014c0

08001eb8 <z_mt_stop>:

void z_mt_stop()
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	4802      	ldr	r0, [pc, #8]	; (8001ec8 <z_mt_stop+0x10>)
 8001ec0:	f005 fa5a 	bl	8007378 <HAL_TIM_PWM_Stop>
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	200014c0 	.word	0x200014c0

08001ecc <z_set_current_position>:
	z_motor.current_pos = htim5.Instance->CNT;
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
	z_mt_set_dir(z_motor.current_pos,z_motor.next_pos);
}

void z_set_current_position(uint32_t pos){
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	z_motor.current_pos = pos;
 8001ed4:	4a06      	ldr	r2, [pc, #24]	; (8001ef0 <z_set_current_position+0x24>)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6093      	str	r3, [r2, #8]
	htim5.Instance->CNT = pos;
 8001eda:	4b06      	ldr	r3, [pc, #24]	; (8001ef4 <z_set_current_position+0x28>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	20002aec 	.word	0x20002aec
 8001ef4:	20001508 	.word	0x20001508

08001ef8 <z_step_mt_int>:
void z_step_mt_int(void){
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	af00      	add	r7, sp, #0
	z_motor.current_pos= z_motor.next_pos = htim5.Instance->CNT = 0;
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <z_step_mt_int+0x38>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	2300      	movs	r3, #0
 8001f02:	6253      	str	r3, [r2, #36]	; 0x24
 8001f04:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <z_step_mt_int+0x3c>)
 8001f06:	60d3      	str	r3, [r2, #12]
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <z_step_mt_int+0x3c>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <z_step_mt_int+0x3c>)
 8001f0e:	6093      	str	r3, [r2, #8]
	z_motor.old_pos = z_motor.ud_time =0;
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <z_step_mt_int+0x3c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <z_step_mt_int+0x3c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <z_step_mt_int+0x3c>)
 8001f1c:	6053      	str	r3, [r2, #4]
	z_motor.set_current_position = z_set_current_position;
 8001f1e:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <z_step_mt_int+0x3c>)
 8001f20:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <z_step_mt_int+0x40>)
 8001f22:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Start(&htim5);
 8001f24:	4802      	ldr	r0, [pc, #8]	; (8001f30 <z_step_mt_int+0x38>)
 8001f26:	f005 f89d 	bl	8007064 <HAL_TIM_Base_Start>
}
 8001f2a:	bf00      	nop
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20001508 	.word	0x20001508
 8001f34:	20002aec 	.word	0x20002aec
 8001f38:	08001ecd 	.word	0x08001ecd

08001f3c <z_step_motor_home_position>:


void z_step_motor_home_position()
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(Z_HOME_SWITCH_GPIO_Port, Z_HOME_SWITCH_Pin) && (!z_motor.is_home))
 8001f40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f44:	4810      	ldr	r0, [pc, #64]	; (8001f88 <z_step_motor_home_position+0x4c>)
 8001f46:	f002 ff29 	bl	8004d9c <HAL_GPIO_ReadPin>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d111      	bne.n	8001f74 <z_step_motor_home_position+0x38>
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <z_step_motor_home_position+0x50>)
 8001f52:	7cdb      	ldrb	r3, [r3, #19]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10d      	bne.n	8001f74 <z_step_motor_home_position+0x38>
	{
		z_motor.home_achieve = 1;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <z_step_motor_home_position+0x50>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	749a      	strb	r2, [r3, #18]
		z_motor.is_home = 1;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <z_step_motor_home_position+0x50>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	74da      	strb	r2, [r3, #19]
		z_mt_stop();
 8001f64:	f7ff ffa8 	bl	8001eb8 <z_mt_stop>
		z_motor.current_pos = htim5.Instance->CNT =0;
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <z_step_motor_home_position+0x54>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	6253      	str	r3, [r2, #36]	; 0x24
 8001f70:	4a06      	ldr	r2, [pc, #24]	; (8001f8c <z_step_motor_home_position+0x50>)
 8001f72:	6093      	str	r3, [r2, #8]
	}
	if(htim5.Instance->CNT)
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <z_step_motor_home_position+0x54>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <z_step_motor_home_position+0x48>
	{
		z_motor.is_home = 0;
 8001f7e:	4b03      	ldr	r3, [pc, #12]	; (8001f8c <z_step_motor_home_position+0x50>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	74da      	strb	r2, [r3, #19]
	}
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	20002aec 	.word	0x20002aec
 8001f90:	20001508 	.word	0x20001508

08001f94 <z_step_motor_process>:



void z_step_motor_process(void){
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
	static uint32_t time_z_check_home = 0;
	z_motor.current_pos = htim5.Instance->CNT;
 8001f98:	4b32      	ldr	r3, [pc, #200]	; (8002064 <z_step_motor_process+0xd0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9e:	4a32      	ldr	r2, [pc, #200]	; (8002068 <z_step_motor_process+0xd4>)
 8001fa0:	6093      	str	r3, [r2, #8]
	if(HAL_GetTick() > time_z_check_home){
 8001fa2:	f001 fe1d 	bl	8003be0 <HAL_GetTick>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	4b30      	ldr	r3, [pc, #192]	; (800206c <z_step_motor_process+0xd8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d901      	bls.n	8001fb4 <z_step_motor_process+0x20>
		z_step_motor_home_position();
 8001fb0:	f7ff ffc4 	bl	8001f3c <z_step_motor_home_position>
	}
	home_process(&z_motor);
 8001fb4:	482c      	ldr	r0, [pc, #176]	; (8002068 <z_step_motor_process+0xd4>)
 8001fb6:	f7ff fe95 	bl	8001ce4 <home_process>
//	if(znext!= z_motor.next_pos)
//	{
//		znext= z_motor.next_pos;
//		printf("z next: %lu\n",z_motor.next_pos);
//	}
	switch (z_motor.state) {
 8001fba:	4b2b      	ldr	r3, [pc, #172]	; (8002068 <z_step_motor_process+0xd4>)
 8001fbc:	7c5b      	ldrb	r3, [r3, #17]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d848      	bhi.n	8002054 <z_step_motor_process+0xc0>
 8001fc2:	a201      	add	r2, pc, #4	; (adr r2, 8001fc8 <z_step_motor_process+0x34>)
 8001fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc8:	08001fd9 	.word	0x08001fd9
 8001fcc:	08001ff5 	.word	0x08001ff5
 8001fd0:	08002019 	.word	0x08002019
 8001fd4:	08002049 	.word	0x08002049
		case MT_STATE_IDLE:
			if(abs(z_motor.current_pos- z_motor.next_pos) > STEP_LOSS){
 8001fd8:	4b23      	ldr	r3, [pc, #140]	; (8002068 <z_step_motor_process+0xd4>)
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	4b22      	ldr	r3, [pc, #136]	; (8002068 <z_step_motor_process+0xd4>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	bfb8      	it	lt
 8001fe6:	425b      	neglt	r3, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	dd35      	ble.n	8002058 <z_step_motor_process+0xc4>
				z_motor.state = MT_STATE_START;
 8001fec:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <z_step_motor_process+0xd4>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	745a      	strb	r2, [r3, #17]
			}
			break;
 8001ff2:	e031      	b.n	8002058 <z_step_motor_process+0xc4>
		case MT_STATE_START:
			z_mt_set_dir();
 8001ff4:	f7ff ff24 	bl	8001e40 <z_mt_set_dir>
			if(z_motor.is_home == 1)
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <z_step_motor_process+0xd4>)
 8001ffa:	7cdb      	ldrb	r3, [r3, #19]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <z_step_motor_process+0x78>
			{
				time_z_check_home = HAL_GetTick()+100;
 8002000:	f001 fdee 	bl	8003be0 <HAL_GetTick>
 8002004:	4603      	mov	r3, r0
 8002006:	3364      	adds	r3, #100	; 0x64
 8002008:	4a18      	ldr	r2, [pc, #96]	; (800206c <z_step_motor_process+0xd8>)
 800200a:	6013      	str	r3, [r2, #0]
			}
			z_mt_start();
 800200c:	f7ff ff4a 	bl	8001ea4 <z_mt_start>
			z_motor.state = MT_STATE_RUNING;
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <z_step_motor_process+0xd4>)
 8002012:	2202      	movs	r2, #2
 8002014:	745a      	strb	r2, [r3, #17]
			break;
 8002016:	e022      	b.n	800205e <z_step_motor_process+0xca>
		case MT_STATE_RUNING:
			if(z_motor.current_dir == DIR_FORWARD){
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <z_step_motor_process+0xd4>)
 800201a:	7c1b      	ldrb	r3, [r3, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d109      	bne.n	8002034 <z_step_motor_process+0xa0>
				if(z_motor.current_pos >= z_motor.next_pos){
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <z_step_motor_process+0xd4>)
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	4b10      	ldr	r3, [pc, #64]	; (8002068 <z_step_motor_process+0xd4>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d317      	bcc.n	800205c <z_step_motor_process+0xc8>
					z_motor.state = MT_STATE_STTOP;
 800202c:	4b0e      	ldr	r3, [pc, #56]	; (8002068 <z_step_motor_process+0xd4>)
 800202e:	2203      	movs	r2, #3
 8002030:	745a      	strb	r2, [r3, #17]
			} else {
				if(z_motor.current_pos <= z_motor.next_pos){
					z_motor.state = MT_STATE_STTOP;
				}
			}
			break;
 8002032:	e013      	b.n	800205c <z_step_motor_process+0xc8>
				if(z_motor.current_pos <= z_motor.next_pos){
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <z_step_motor_process+0xd4>)
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <z_step_motor_process+0xd4>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d80d      	bhi.n	800205c <z_step_motor_process+0xc8>
					z_motor.state = MT_STATE_STTOP;
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <z_step_motor_process+0xd4>)
 8002042:	2203      	movs	r2, #3
 8002044:	745a      	strb	r2, [r3, #17]
			break;
 8002046:	e009      	b.n	800205c <z_step_motor_process+0xc8>
		case MT_STATE_STTOP:
			z_mt_stop();
 8002048:	f7ff ff36 	bl	8001eb8 <z_mt_stop>
			z_motor.state = MT_STATE_IDLE;
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <z_step_motor_process+0xd4>)
 800204e:	2200      	movs	r2, #0
 8002050:	745a      	strb	r2, [r3, #17]
			break;
 8002052:	e004      	b.n	800205e <z_step_motor_process+0xca>
		default:
			break;
 8002054:	bf00      	nop
 8002056:	e002      	b.n	800205e <z_step_motor_process+0xca>
			break;
 8002058:	bf00      	nop
 800205a:	e000      	b.n	800205e <z_step_motor_process+0xca>
			break;
 800205c:	bf00      	nop
	}
}
 800205e:	bf00      	nop
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	20001508 	.word	0x20001508
 8002068:	20002aec 	.word	0x20002aec
 800206c:	20002b20 	.word	0x20002b20

08002070 <pg_start>:

_program_state pgstate = PG_STATE_IDLE;


int pg_start(uint8_t pg,uint8_t stepindex)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	460a      	mov	r2, r1
 800207a:	71fb      	strb	r3, [r7, #7]
 800207c:	4613      	mov	r3, r2
 800207e:	71bb      	strb	r3, [r7, #6]
	if(pgstate == PG_STATE_IDLE)
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <pg_start+0x44>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d110      	bne.n	80020aa <pg_start+0x3a>
	{
		LOGI("start step: %d of program : %d",stepindex,pg);
 8002088:	79ba      	ldrb	r2, [r7, #6]
 800208a:	79fb      	ldrb	r3, [r7, #7]
 800208c:	490a      	ldr	r1, [pc, #40]	; (80020b8 <pg_start+0x48>)
 800208e:	480b      	ldr	r0, [pc, #44]	; (80020bc <pg_start+0x4c>)
 8002090:	f00b fc60 	bl	800d954 <iprintf>
		running_pg = pg;
 8002094:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <pg_start+0x50>)
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	7013      	strb	r3, [r2, #0]
		running_step = stepindex;
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <pg_start+0x54>)
 800209c:	79bb      	ldrb	r3, [r7, #6]
 800209e:	7013      	strb	r3, [r2, #0]
		pgstate = PG_STATE_START;
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <pg_start+0x44>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
		return 1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e000      	b.n	80020ac <pg_start+0x3c>
	}
	return 0;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20002b26 	.word	0x20002b26
 80020b8:	0800ed68 	.word	0x0800ed68
 80020bc:	0800ed6c 	.word	0x0800ed6c
 80020c0:	20002b24 	.word	0x20002b24
 80020c4:	20002b25 	.word	0x20002b25

080020c8 <pg_stop>:
int pg_stop(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
	pgstate = PG_STATE_STOP;
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <pg_stop+0x18>)
 80020ce:	2203      	movs	r2, #3
 80020d0:	701a      	strb	r2, [r3, #0]
	return 1;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	20002b26 	.word	0x20002b26

080020e4 <start_step>:
_step_type start_step(){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
	Dwin_switch_running_page(running_pg,running_step);
 80020e8:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <start_step+0xcc>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	4a31      	ldr	r2, [pc, #196]	; (80021b4 <start_step+0xd0>)
 80020ee:	7812      	ldrb	r2, [r2, #0]
 80020f0:	4611      	mov	r1, r2
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe fbc4 	bl	8000880 <Dwin_switch_running_page>
	switch (system_data.flash_data.Program_para[running_pg][running_step].type) {
 80020f8:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <start_step+0xcc>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <start_step+0xd0>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	492c      	ldr	r1, [pc, #176]	; (80021b8 <start_step+0xd4>)
 8002106:	4613      	mov	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	009a      	lsls	r2, r3, #2
 800210e:	4413      	add	r3, r2
 8002110:	4403      	add	r3, r0
 8002112:	011b      	lsls	r3, r3, #4
 8002114:	440b      	add	r3, r1
 8002116:	332c      	adds	r3, #44	; 0x2c
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d830      	bhi.n	8002180 <start_step+0x9c>
 800211e:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <start_step+0x40>)
 8002120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002124:	08002135 	.word	0x08002135
 8002128:	08002145 	.word	0x08002145
 800212c:	08002159 	.word	0x08002159
 8002130:	0800216d 	.word	0x0800216d
		case STEP_TYPE_NONE:
			LOGI("step :%d  isn't active",running_step);
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <start_step+0xd0>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4920      	ldr	r1, [pc, #128]	; (80021bc <start_step+0xd8>)
 800213c:	4820      	ldr	r0, [pc, #128]	; (80021c0 <start_step+0xdc>)
 800213e:	f00b fc09 	bl	800d954 <iprintf>
			break;
 8002142:	e022      	b.n	800218a <start_step+0xa6>
		case STEP_TYPE_SHAKE:
			LOGI("Shaking step (%d)  is currently active",running_step);
 8002144:	4b1b      	ldr	r3, [pc, #108]	; (80021b4 <start_step+0xd0>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	491c      	ldr	r1, [pc, #112]	; (80021bc <start_step+0xd8>)
 800214c:	481d      	ldr	r0, [pc, #116]	; (80021c4 <start_step+0xe0>)
 800214e:	f00b fc01 	bl	800d954 <iprintf>
			step_shake_start();
 8002152:	f000 fab5 	bl	80026c0 <step_shake_start>
			break;
 8002156:	e018      	b.n	800218a <start_step+0xa6>
		case STEP_TYPE_WASHING:
			LOGI("Washing step (%d)  is currently active",running_step);
 8002158:	4b16      	ldr	r3, [pc, #88]	; (80021b4 <start_step+0xd0>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4917      	ldr	r1, [pc, #92]	; (80021bc <start_step+0xd8>)
 8002160:	4819      	ldr	r0, [pc, #100]	; (80021c8 <start_step+0xe4>)
 8002162:	f00b fbf7 	bl	800d954 <iprintf>
			step_washing_start();
 8002166:	f000 fd43 	bl	8002bf0 <step_washing_start>
			break;
 800216a:	e00e      	b.n	800218a <start_step+0xa6>
		case STEP_TYPE_DRYING:
			LOGI("Drying step (%d) is currently active",running_step);
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <start_step+0xd0>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4912      	ldr	r1, [pc, #72]	; (80021bc <start_step+0xd8>)
 8002174:	4815      	ldr	r0, [pc, #84]	; (80021cc <start_step+0xe8>)
 8002176:	f00b fbed 	bl	800d954 <iprintf>
			step_drying_start();
 800217a:	f000 f8eb 	bl	8002354 <step_drying_start>
			break;
 800217e:	e004      	b.n	800218a <start_step+0xa6>
		default:
			LOGI("Unknown step type");
 8002180:	490e      	ldr	r1, [pc, #56]	; (80021bc <start_step+0xd8>)
 8002182:	4813      	ldr	r0, [pc, #76]	; (80021d0 <start_step+0xec>)
 8002184:	f00b fbe6 	bl	800d954 <iprintf>
			// Code to handle unknown step type
			break;
 8002188:	bf00      	nop
	}
	return system_data.flash_data.Program_para[running_pg][running_step].type;
 800218a:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <start_step+0xcc>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <start_step+0xd0>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4618      	mov	r0, r3
 8002196:	4908      	ldr	r1, [pc, #32]	; (80021b8 <start_step+0xd4>)
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009a      	lsls	r2, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	4403      	add	r3, r0
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	440b      	add	r3, r1
 80021a8:	332c      	adds	r3, #44	; 0x2c
 80021aa:	781b      	ldrb	r3, [r3, #0]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20002b24 	.word	0x20002b24
 80021b4:	20002b25 	.word	0x20002b25
 80021b8:	2000017c 	.word	0x2000017c
 80021bc:	0800ed68 	.word	0x0800ed68
 80021c0:	0800ed94 	.word	0x0800ed94
 80021c4:	0800edb4 	.word	0x0800edb4
 80021c8:	0800ede4 	.word	0x0800ede4
 80021cc:	0800ee14 	.word	0x0800ee14
 80021d0:	0800ee40 	.word	0x0800ee40

080021d4 <pg_process_loop>:

void pg_process_loop(void) {
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
	switch (pgstate) {
 80021d8:	4b53      	ldr	r3, [pc, #332]	; (8002328 <pg_process_loop+0x154>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b04      	cmp	r3, #4
 80021de:	f200 80a0 	bhi.w	8002322 <pg_process_loop+0x14e>
 80021e2:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <pg_process_loop+0x14>)
 80021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e8:	08002323 	.word	0x08002323
 80021ec:	080021fd 	.word	0x080021fd
 80021f0:	0800222d 	.word	0x0800222d
 80021f4:	080022ef 	.word	0x080022ef
 80021f8:	08002307 	.word	0x08002307
		case PG_STATE_IDLE:
//			printf("Program is idle\n");
			// Code to handle the idle state
			break;
		case PG_STATE_START:
			if(running_step == MAX_STEP_NUM){
 80021fc:	4b4b      	ldr	r3, [pc, #300]	; (800232c <pg_process_loop+0x158>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b19      	cmp	r3, #25
 8002202:	d103      	bne.n	800220c <pg_process_loop+0x38>
				pgstate= PG_STATE_END;
 8002204:	4b48      	ldr	r3, [pc, #288]	; (8002328 <pg_process_loop+0x154>)
 8002206:	2204      	movs	r2, #4
 8002208:	701a      	strb	r2, [r3, #0]
				break;
 800220a:	e08b      	b.n	8002324 <pg_process_loop+0x150>
			}
			if(start_step()!= STEP_TYPE_NONE) {
 800220c:	f7ff ff6a 	bl	80020e4 <start_step>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <pg_process_loop+0x4a>
				pgstate= PG_STATE_RUNNING;
 8002216:	4b44      	ldr	r3, [pc, #272]	; (8002328 <pg_process_loop+0x154>)
 8002218:	2202      	movs	r2, #2
 800221a:	701a      	strb	r2, [r3, #0]
			}
			else {
				running_step++;
			}
			// Code to handle the start state
			break;
 800221c:	e082      	b.n	8002324 <pg_process_loop+0x150>
				running_step++;
 800221e:	4b43      	ldr	r3, [pc, #268]	; (800232c <pg_process_loop+0x158>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	3301      	adds	r3, #1
 8002224:	b2da      	uxtb	r2, r3
 8002226:	4b41      	ldr	r3, [pc, #260]	; (800232c <pg_process_loop+0x158>)
 8002228:	701a      	strb	r2, [r3, #0]
			break;
 800222a:	e07b      	b.n	8002324 <pg_process_loop+0x150>
		case PG_STATE_RUNNING:
			switch (system_data.flash_data.Program_para[running_pg][running_step].type) {
 800222c:	4b40      	ldr	r3, [pc, #256]	; (8002330 <pg_process_loop+0x15c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b3e      	ldr	r3, [pc, #248]	; (800232c <pg_process_loop+0x158>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	493e      	ldr	r1, [pc, #248]	; (8002334 <pg_process_loop+0x160>)
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	009a      	lsls	r2, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	4403      	add	r3, r0
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	440b      	add	r3, r1
 800224a:	332c      	adds	r3, #44	; 0x2c
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	2b03      	cmp	r3, #3
 8002250:	d032      	beq.n	80022b8 <pg_process_loop+0xe4>
 8002252:	2b03      	cmp	r3, #3
 8002254:	dc40      	bgt.n	80022d8 <pg_process_loop+0x104>
 8002256:	2b01      	cmp	r3, #1
 8002258:	d002      	beq.n	8002260 <pg_process_loop+0x8c>
 800225a:	2b02      	cmp	r3, #2
 800225c:	d016      	beq.n	800228c <pg_process_loop+0xb8>
 800225e:	e03b      	b.n	80022d8 <pg_process_loop+0x104>
				case STEP_TYPE_SHAKE:
					if(step_shake_process())
 8002260:	f000 faba 	bl	80027d8 <step_shake_process>
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d03b      	beq.n	80022e2 <pg_process_loop+0x10e>
					{
						LOGI("Shaking step (%d) finish",running_step);
 800226a:	4b30      	ldr	r3, [pc, #192]	; (800232c <pg_process_loop+0x158>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	461a      	mov	r2, r3
 8002270:	4931      	ldr	r1, [pc, #196]	; (8002338 <pg_process_loop+0x164>)
 8002272:	4832      	ldr	r0, [pc, #200]	; (800233c <pg_process_loop+0x168>)
 8002274:	f00b fb6e 	bl	800d954 <iprintf>
						running_step++;
 8002278:	4b2c      	ldr	r3, [pc, #176]	; (800232c <pg_process_loop+0x158>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	3301      	adds	r3, #1
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b2a      	ldr	r3, [pc, #168]	; (800232c <pg_process_loop+0x158>)
 8002282:	701a      	strb	r2, [r3, #0]
						pgstate = PG_STATE_START;
 8002284:	4b28      	ldr	r3, [pc, #160]	; (8002328 <pg_process_loop+0x154>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
					}
					break;
 800228a:	e02a      	b.n	80022e2 <pg_process_loop+0x10e>
				case STEP_TYPE_WASHING:
					if(step_washing_process())
 800228c:	f000 fd40 	bl	8002d10 <step_washing_process>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d027      	beq.n	80022e6 <pg_process_loop+0x112>
					{
						LOGI("washing step (%d) finish",running_step);
 8002296:	4b25      	ldr	r3, [pc, #148]	; (800232c <pg_process_loop+0x158>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	461a      	mov	r2, r3
 800229c:	4926      	ldr	r1, [pc, #152]	; (8002338 <pg_process_loop+0x164>)
 800229e:	4828      	ldr	r0, [pc, #160]	; (8002340 <pg_process_loop+0x16c>)
 80022a0:	f00b fb58 	bl	800d954 <iprintf>
						running_step++;
 80022a4:	4b21      	ldr	r3, [pc, #132]	; (800232c <pg_process_loop+0x158>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	3301      	adds	r3, #1
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	4b1f      	ldr	r3, [pc, #124]	; (800232c <pg_process_loop+0x158>)
 80022ae:	701a      	strb	r2, [r3, #0]
						pgstate = PG_STATE_START;
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <pg_process_loop+0x154>)
 80022b2:	2201      	movs	r2, #1
 80022b4:	701a      	strb	r2, [r3, #0]
					}
					break;
 80022b6:	e016      	b.n	80022e6 <pg_process_loop+0x112>
				case STEP_TYPE_DRYING:
					if(step_drying_process())
 80022b8:	f000 f8de 	bl	8002478 <step_drying_process>
 80022bc:	4603      	mov	r3, r0
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d013      	beq.n	80022ea <pg_process_loop+0x116>
					{
						LOGI("drying step (%d) finish",running_step);
 80022c2:	4b1a      	ldr	r3, [pc, #104]	; (800232c <pg_process_loop+0x158>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	491b      	ldr	r1, [pc, #108]	; (8002338 <pg_process_loop+0x164>)
 80022ca:	481e      	ldr	r0, [pc, #120]	; (8002344 <pg_process_loop+0x170>)
 80022cc:	f00b fb42 	bl	800d954 <iprintf>
//						running_step++;
						pgstate = PG_STATE_END;
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <pg_process_loop+0x154>)
 80022d2:	2204      	movs	r2, #4
 80022d4:	701a      	strb	r2, [r3, #0]
					}
					break;
 80022d6:	e008      	b.n	80022ea <pg_process_loop+0x116>
				default:
					LOGI("Unknown step type");
 80022d8:	4917      	ldr	r1, [pc, #92]	; (8002338 <pg_process_loop+0x164>)
 80022da:	481b      	ldr	r0, [pc, #108]	; (8002348 <pg_process_loop+0x174>)
 80022dc:	f00b fb3a 	bl	800d954 <iprintf>
					break;
 80022e0:	e004      	b.n	80022ec <pg_process_loop+0x118>
					break;
 80022e2:	bf00      	nop
 80022e4:	e01e      	b.n	8002324 <pg_process_loop+0x150>
					break;
 80022e6:	bf00      	nop
 80022e8:	e01c      	b.n	8002324 <pg_process_loop+0x150>
					break;
 80022ea:	bf00      	nop
			}
			break;
 80022ec:	e01a      	b.n	8002324 <pg_process_loop+0x150>
		case PG_STATE_STOP:
			x_mt_stop();
 80022ee:	f7ff fc4f 	bl	8001b90 <x_mt_stop>
			z_mt_stop();
 80022f2:	f7ff fde1 	bl	8001eb8 <z_mt_stop>
			LOGI("Program is stopping\n");
 80022f6:	4910      	ldr	r1, [pc, #64]	; (8002338 <pg_process_loop+0x164>)
 80022f8:	4814      	ldr	r0, [pc, #80]	; (800234c <pg_process_loop+0x178>)
 80022fa:	f00b fb2b 	bl	800d954 <iprintf>
			pgstate = PG_STATE_END;
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <pg_process_loop+0x154>)
 8002300:	2204      	movs	r2, #4
 8002302:	701a      	strb	r2, [r3, #0]
			break;
 8002304:	e00e      	b.n	8002324 <pg_process_loop+0x150>
		case PG_STATE_END:
//			printf("Program has ended\n");
			Dwin_switch_page(PAGE_RUNNING_END_PG);
 8002306:	200d      	movs	r0, #13
 8002308:	f7fe faa3 	bl	8000852 <Dwin_switch_page>
			LOGI("Program %d has ended",running_pg);
 800230c:	4b08      	ldr	r3, [pc, #32]	; (8002330 <pg_process_loop+0x15c>)
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	4909      	ldr	r1, [pc, #36]	; (8002338 <pg_process_loop+0x164>)
 8002314:	480e      	ldr	r0, [pc, #56]	; (8002350 <pg_process_loop+0x17c>)
 8002316:	f00b fb1d 	bl	800d954 <iprintf>
			pgstate = PG_STATE_IDLE;
 800231a:	4b03      	ldr	r3, [pc, #12]	; (8002328 <pg_process_loop+0x154>)
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
			// Code to handle the end state
			break;
 8002320:	e000      	b.n	8002324 <pg_process_loop+0x150>
		default:
//			printf("Unknown program state\n");
			// Code to handle unknown state
			break;
 8002322:	bf00      	nop
	}
}
 8002324:	bf00      	nop
 8002326:	bd80      	pop	{r7, pc}
 8002328:	20002b26 	.word	0x20002b26
 800232c:	20002b25 	.word	0x20002b25
 8002330:	20002b24 	.word	0x20002b24
 8002334:	2000017c 	.word	0x2000017c
 8002338:	0800ed68 	.word	0x0800ed68
 800233c:	0800ee5c 	.word	0x0800ee5c
 8002340:	0800ee7c 	.word	0x0800ee7c
 8002344:	0800ee9c 	.word	0x0800ee9c
 8002348:	0800ee40 	.word	0x0800ee40
 800234c:	0800eebc 	.word	0x0800eebc
 8002350:	0800eed8 	.word	0x0800eed8

08002354 <step_drying_start>:
extern uint8_t running_step;
_step_dy_state dy_state = DY_STATE_IDE;
_step_dy_state old_dy_state = DY_STATE_IDE;
_def_drying_step *drying_step;
int step_drying_start()
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
	if(dy_state == DY_STATE_IDE)
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <step_drying_start+0x54>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d120      	bne.n	80023a2 <step_drying_start+0x4e>
	{
		LOGI("--------------- drying step: %d of program : %d----------------",running_step,running_pg);
 8002360:	4b12      	ldr	r3, [pc, #72]	; (80023ac <step_drying_start+0x58>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	4b12      	ldr	r3, [pc, #72]	; (80023b0 <step_drying_start+0x5c>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	4912      	ldr	r1, [pc, #72]	; (80023b4 <step_drying_start+0x60>)
 800236c:	4812      	ldr	r0, [pc, #72]	; (80023b8 <step_drying_start+0x64>)
 800236e:	f00b faf1 	bl	800d954 <iprintf>
		drying_step = (_def_drying_step *)&system_data.flash_data.Program_para[running_pg][running_step];
 8002372:	4b0f      	ldr	r3, [pc, #60]	; (80023b0 <step_drying_start+0x5c>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <step_drying_start+0x58>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	4619      	mov	r1, r3
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	009a      	lsls	r2, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	440b      	add	r3, r1
 800238a:	011b      	lsls	r3, r3, #4
 800238c:	3328      	adds	r3, #40	; 0x28
 800238e:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <step_drying_start+0x68>)
 8002390:	4413      	add	r3, r2
 8002392:	3304      	adds	r3, #4
 8002394:	4a0a      	ldr	r2, [pc, #40]	; (80023c0 <step_drying_start+0x6c>)
 8002396:	6013      	str	r3, [r2, #0]
		dy_state = DY_STATE_START;
 8002398:	4b03      	ldr	r3, [pc, #12]	; (80023a8 <step_drying_start+0x54>)
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
		return 1;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <step_drying_start+0x50>
	}
	return 0;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	20002b2c 	.word	0x20002b2c
 80023ac:	20002b25 	.word	0x20002b25
 80023b0:	20002b24 	.word	0x20002b24
 80023b4:	0800eef4 	.word	0x0800eef4
 80023b8:	0800eefc 	.word	0x0800eefc
 80023bc:	2000017c 	.word	0x2000017c
 80023c0:	20002b30 	.word	0x20002b30

080023c4 <heater_on>:
void heater_on()
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
	LOG3("%u heater_on",HAL_GetTick());
 80023c8:	bf00      	nop
	HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, HEATER_ON_LEVEL);
 80023ca:	2201      	movs	r2, #1
 80023cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023d0:	4802      	ldr	r0, [pc, #8]	; (80023dc <heater_on+0x18>)
 80023d2:	f002 fcfb 	bl	8004dcc <HAL_GPIO_WritePin>
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40020c00 	.word	0x40020c00

080023e0 <heater_off>:
void heater_off()
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	LOG3("%u heater_off",HAL_GetTick());
 80023e4:	bf00      	nop
	HAL_GPIO_WritePin(HEATER_GPIO_Port, HEATER_Pin, HEATER_OFF_LEVEL);
 80023e6:	2200      	movs	r2, #0
 80023e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023ec:	4802      	ldr	r0, [pc, #8]	; (80023f8 <heater_off+0x18>)
 80023ee:	f002 fced 	bl	8004dcc <HAL_GPIO_WritePin>
}
 80023f2:	bf00      	nop
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40020c00 	.word	0x40020c00

080023fc <show_infor_drying_step>:
void show_infor_drying_step(_def_drying_step dr_step)
{
 80023fc:	b590      	push	{r4, r7, lr}
 80023fe:	b085      	sub	sp, #20
 8002400:	af00      	add	r7, sp, #0
 8002402:	463c      	mov	r4, r7
 8002404:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOGI("---------------INFOR_DRYING_STEP------------");
 8002408:	4913      	ldr	r1, [pc, #76]	; (8002458 <show_infor_drying_step+0x5c>)
 800240a:	4814      	ldr	r0, [pc, #80]	; (800245c <show_infor_drying_step+0x60>)
 800240c:	f00b faa2 	bl	800d954 <iprintf>
	LOGI("1:Move to Wells: %d",dr_step.wells);
 8002410:	787b      	ldrb	r3, [r7, #1]
 8002412:	461a      	mov	r2, r3
 8002414:	4910      	ldr	r1, [pc, #64]	; (8002458 <show_infor_drying_step+0x5c>)
 8002416:	4812      	ldr	r0, [pc, #72]	; (8002460 <show_infor_drying_step+0x64>)
 8002418:	f00b fa9c 	bl	800d954 <iprintf>
	LOGI("2:hearter on : %d",dr_step.heater_on);
 800241c:	887b      	ldrh	r3, [r7, #2]
 800241e:	461a      	mov	r2, r3
 8002420:	490d      	ldr	r1, [pc, #52]	; (8002458 <show_infor_drying_step+0x5c>)
 8002422:	4810      	ldr	r0, [pc, #64]	; (8002464 <show_infor_drying_step+0x68>)
 8002424:	f00b fa96 	bl	800d954 <iprintf>
	LOGI("3:move z to bottom");
 8002428:	490b      	ldr	r1, [pc, #44]	; (8002458 <show_infor_drying_step+0x5c>)
 800242a:	480f      	ldr	r0, [pc, #60]	; (8002468 <show_infor_drying_step+0x6c>)
 800242c:	f00b fa92 	bl	800d954 <iprintf>
	LOGI("4:wait1 : %ds",dr_step.wait1);
 8002430:	88bb      	ldrh	r3, [r7, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	4908      	ldr	r1, [pc, #32]	; (8002458 <show_infor_drying_step+0x5c>)
 8002436:	480d      	ldr	r0, [pc, #52]	; (800246c <show_infor_drying_step+0x70>)
 8002438:	f00b fa8c 	bl	800d954 <iprintf>
	LOGI("5:hearter off : %d",dr_step.heater_off);
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	461a      	mov	r2, r3
 8002440:	4905      	ldr	r1, [pc, #20]	; (8002458 <show_infor_drying_step+0x5c>)
 8002442:	480b      	ldr	r0, [pc, #44]	; (8002470 <show_infor_drying_step+0x74>)
 8002444:	f00b fa86 	bl	800d954 <iprintf>
	LOGI("------------------------------------------");
 8002448:	4903      	ldr	r1, [pc, #12]	; (8002458 <show_infor_drying_step+0x5c>)
 800244a:	480a      	ldr	r0, [pc, #40]	; (8002474 <show_infor_drying_step+0x78>)
 800244c:	f00b fa82 	bl	800d954 <iprintf>
}
 8002450:	bf00      	nop
 8002452:	3714      	adds	r7, #20
 8002454:	46bd      	mov	sp, r7
 8002456:	bd90      	pop	{r4, r7, pc}
 8002458:	0800eef4 	.word	0x0800eef4
 800245c:	0800ef44 	.word	0x0800ef44
 8002460:	0800ef78 	.word	0x0800ef78
 8002464:	0800ef94 	.word	0x0800ef94
 8002468:	0800efb0 	.word	0x0800efb0
 800246c:	0800efcc 	.word	0x0800efcc
 8002470:	0800efe4 	.word	0x0800efe4
 8002474:	0800f000 	.word	0x0800f000

08002478 <step_drying_process>:
int step_drying_process(void)
{
 8002478:	b598      	push	{r3, r4, r7, lr}
 800247a:	af00      	add	r7, sp, #0
	switch (dy_state) {
 800247c:	4b80      	ldr	r3, [pc, #512]	; (8002680 <step_drying_process+0x208>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	2b08      	cmp	r3, #8
 8002482:	f200 80f3 	bhi.w	800266c <step_drying_process+0x1f4>
 8002486:	a201      	add	r2, pc, #4	; (adr r2, 800248c <step_drying_process+0x14>)
 8002488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800248c:	0800266d 	.word	0x0800266d
 8002490:	080024b1 	.word	0x080024b1
 8002494:	0800250b 	.word	0x0800250b
 8002498:	08002549 	.word	0x08002549
 800249c:	080025ad 	.word	0x080025ad
 80024a0:	080025ed 	.word	0x080025ed
 80024a4:	08002621 	.word	0x08002621
 80024a8:	08002609 	.word	0x08002609
 80024ac:	08002669 	.word	0x08002669
	    case DY_STATE_IDE:
	        break;
	    case DY_STATE_START:
        	show_infor_drying_step(*drying_step);
 80024b0:	4b74      	ldr	r3, [pc, #464]	; (8002684 <step_drying_process+0x20c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	4610      	mov	r0, r2
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	4611      	mov	r1, r2
 80024bc:	689c      	ldr	r4, [r3, #8]
 80024be:	4622      	mov	r2, r4
 80024c0:	68dc      	ldr	r4, [r3, #12]
 80024c2:	4623      	mov	r3, r4
 80024c4:	f7ff ff9a 	bl	80023fc <show_infor_drying_step>
            LOGI("move x to %lu",system_data.flash_data.Well_position[drying_step->wells-1]);
 80024c8:	4b6e      	ldr	r3, [pc, #440]	; (8002684 <step_drying_process+0x20c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	785b      	ldrb	r3, [r3, #1]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	4a6d      	ldr	r2, [pc, #436]	; (8002688 <step_drying_process+0x210>)
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	461a      	mov	r2, r3
 80024da:	496c      	ldr	r1, [pc, #432]	; (800268c <step_drying_process+0x214>)
 80024dc:	486c      	ldr	r0, [pc, #432]	; (8002690 <step_drying_process+0x218>)
 80024de:	f00b fa39 	bl	800d954 <iprintf>
        	mt_set_target_position(&x_motor, system_data.flash_data.Well_position[drying_step->wells-1]); // m
 80024e2:	4b68      	ldr	r3, [pc, #416]	; (8002684 <step_drying_process+0x20c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	785b      	ldrb	r3, [r3, #1]
 80024e8:	3b01      	subs	r3, #1
 80024ea:	4a67      	ldr	r2, [pc, #412]	; (8002688 <step_drying_process+0x210>)
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	4413      	add	r3, r2
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	4619      	mov	r1, r3
 80024f4:	4867      	ldr	r0, [pc, #412]	; (8002694 <step_drying_process+0x21c>)
 80024f6:	f7ff faff 	bl	8001af8 <mt_set_target_position>
        	old_dy_state = dy_state;
 80024fa:	4b61      	ldr	r3, [pc, #388]	; (8002680 <step_drying_process+0x208>)
 80024fc:	781a      	ldrb	r2, [r3, #0]
 80024fe:	4b66      	ldr	r3, [pc, #408]	; (8002698 <step_drying_process+0x220>)
 8002500:	701a      	strb	r2, [r3, #0]
        	dy_state = DY_STATE_MOVE_WELLS; // Example transition to next state
 8002502:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <step_drying_process+0x208>)
 8002504:	2202      	movs	r2, #2
 8002506:	701a      	strb	r2, [r3, #0]
            break;
 8002508:	e0b7      	b.n	800267a <step_drying_process+0x202>
	    case DY_STATE_MOVE_WELLS:
        	if(Mt_get_current_prosition(x_motor) == system_data.flash_data.Well_position[drying_step->wells-1])
 800250a:	4b62      	ldr	r3, [pc, #392]	; (8002694 <step_drying_process+0x21c>)
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <step_drying_process+0x20c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	785b      	ldrb	r3, [r3, #1]
 8002514:	3b01      	subs	r3, #1
 8002516:	495c      	ldr	r1, [pc, #368]	; (8002688 <step_drying_process+0x210>)
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	429a      	cmp	r2, r3
 8002520:	f040 80a6 	bne.w	8002670 <step_drying_process+0x1f8>
			{
				LOGI("move x done, move z to bottom");
 8002524:	4959      	ldr	r1, [pc, #356]	; (800268c <step_drying_process+0x214>)
 8002526:	485d      	ldr	r0, [pc, #372]	; (800269c <step_drying_process+0x224>)
 8002528:	f00b fa14 	bl	800d954 <iprintf>
				old_dy_state = dy_state;
 800252c:	4b54      	ldr	r3, [pc, #336]	; (8002680 <step_drying_process+0x208>)
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	4b59      	ldr	r3, [pc, #356]	; (8002698 <step_drying_process+0x220>)
 8002532:	701a      	strb	r2, [r3, #0]
				mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 8002534:	4b54      	ldr	r3, [pc, #336]	; (8002688 <step_drying_process+0x210>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4619      	mov	r1, r3
 800253a:	4859      	ldr	r0, [pc, #356]	; (80026a0 <step_drying_process+0x228>)
 800253c:	f7ff fadc 	bl	8001af8 <mt_set_target_position>
				dy_state = DY_STATE_Z_BOTTOM;
 8002540:	4b4f      	ldr	r3, [pc, #316]	; (8002680 <step_drying_process+0x208>)
 8002542:	2203      	movs	r2, #3
 8002544:	701a      	strb	r2, [r3, #0]
			}
	        break;
 8002546:	e093      	b.n	8002670 <step_drying_process+0x1f8>
	    case DY_STATE_Z_BOTTOM:
	    	if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8002548:	4b55      	ldr	r3, [pc, #340]	; (80026a0 <step_drying_process+0x228>)
 800254a:	689a      	ldr	r2, [r3, #8]
 800254c:	4b4e      	ldr	r3, [pc, #312]	; (8002688 <step_drying_process+0x210>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	f040 808f 	bne.w	8002674 <step_drying_process+0x1fc>
			{
				LOGI("move z done");
 8002556:	494d      	ldr	r1, [pc, #308]	; (800268c <step_drying_process+0x214>)
 8002558:	4852      	ldr	r0, [pc, #328]	; (80026a4 <step_drying_process+0x22c>)
 800255a:	f00b f9fb 	bl	800d954 <iprintf>
				old_dy_state = dy_state;
 800255e:	4b48      	ldr	r3, [pc, #288]	; (8002680 <step_drying_process+0x208>)
 8002560:	781a      	ldrb	r2, [r3, #0]
 8002562:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <step_drying_process+0x220>)
 8002564:	701a      	strb	r2, [r3, #0]

				if(drying_step->heater_on)
 8002566:	4b47      	ldr	r3, [pc, #284]	; (8002684 <step_drying_process+0x20c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	885b      	ldrh	r3, [r3, #2]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <step_drying_process+0x100>
				{
					dy_state = DY_HEATER_ON; // Example transition to next state
 8002570:	4b43      	ldr	r3, [pc, #268]	; (8002680 <step_drying_process+0x208>)
 8002572:	2204      	movs	r2, #4
 8002574:	701a      	strb	r2, [r3, #0]
					LOGI("skip heater on, wait : %ds",drying_step->wait1);
			    	t_time = HAL_GetTick() +  (uint32_t)drying_step->wait1 * 1000;
			    	dy_state = DY_STATE_WAIT; // Example transition to next state
				}
			}
			break;
 8002576:	e07d      	b.n	8002674 <step_drying_process+0x1fc>
					LOGI("skip heater on, wait : %ds",drying_step->wait1);
 8002578:	4b42      	ldr	r3, [pc, #264]	; (8002684 <step_drying_process+0x20c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	889b      	ldrh	r3, [r3, #4]
 800257e:	461a      	mov	r2, r3
 8002580:	4942      	ldr	r1, [pc, #264]	; (800268c <step_drying_process+0x214>)
 8002582:	4849      	ldr	r0, [pc, #292]	; (80026a8 <step_drying_process+0x230>)
 8002584:	f00b f9e6 	bl	800d954 <iprintf>
			    	t_time = HAL_GetTick() +  (uint32_t)drying_step->wait1 * 1000;
 8002588:	f001 fb2a 	bl	8003be0 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	4b3d      	ldr	r3, [pc, #244]	; (8002684 <step_drying_process+0x20c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	889b      	ldrh	r3, [r3, #4]
 8002594:	4619      	mov	r1, r3
 8002596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259a:	fb01 f303 	mul.w	r3, r1, r3
 800259e:	4413      	add	r3, r2
 80025a0:	4a42      	ldr	r2, [pc, #264]	; (80026ac <step_drying_process+0x234>)
 80025a2:	6013      	str	r3, [r2, #0]
			    	dy_state = DY_STATE_WAIT; // Example transition to next state
 80025a4:	4b36      	ldr	r3, [pc, #216]	; (8002680 <step_drying_process+0x208>)
 80025a6:	2206      	movs	r2, #6
 80025a8:	701a      	strb	r2, [r3, #0]
			break;
 80025aa:	e063      	b.n	8002674 <step_drying_process+0x1fc>
	    case DY_HEATER_ON:
	    	heater_on();
 80025ac:	f7ff ff0a 	bl	80023c4 <heater_on>
	    	LOGI("heater on, wait : %ds",drying_step->wait1);
 80025b0:	4b34      	ldr	r3, [pc, #208]	; (8002684 <step_drying_process+0x20c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	889b      	ldrh	r3, [r3, #4]
 80025b6:	461a      	mov	r2, r3
 80025b8:	4934      	ldr	r1, [pc, #208]	; (800268c <step_drying_process+0x214>)
 80025ba:	483d      	ldr	r0, [pc, #244]	; (80026b0 <step_drying_process+0x238>)
 80025bc:	f00b f9ca 	bl	800d954 <iprintf>
	    	old_dy_state = dy_state;
 80025c0:	4b2f      	ldr	r3, [pc, #188]	; (8002680 <step_drying_process+0x208>)
 80025c2:	781a      	ldrb	r2, [r3, #0]
 80025c4:	4b34      	ldr	r3, [pc, #208]	; (8002698 <step_drying_process+0x220>)
 80025c6:	701a      	strb	r2, [r3, #0]
	    	t_time = HAL_GetTick() +  (uint32_t)drying_step->wait1 * 1000;
 80025c8:	f001 fb0a 	bl	8003be0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <step_drying_process+0x20c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	889b      	ldrh	r3, [r3, #4]
 80025d4:	4619      	mov	r1, r3
 80025d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025da:	fb01 f303 	mul.w	r3, r1, r3
 80025de:	4413      	add	r3, r2
 80025e0:	4a32      	ldr	r2, [pc, #200]	; (80026ac <step_drying_process+0x234>)
 80025e2:	6013      	str	r3, [r2, #0]
	    	dy_state = DY_STATE_WAIT; // Example transition to next state
 80025e4:	4b26      	ldr	r3, [pc, #152]	; (8002680 <step_drying_process+0x208>)
 80025e6:	2206      	movs	r2, #6
 80025e8:	701a      	strb	r2, [r3, #0]
	        break;
 80025ea:	e046      	b.n	800267a <step_drying_process+0x202>
	    case DY_HEATER_OFF:

	    	LOGI("heater off");
 80025ec:	4927      	ldr	r1, [pc, #156]	; (800268c <step_drying_process+0x214>)
 80025ee:	4831      	ldr	r0, [pc, #196]	; (80026b4 <step_drying_process+0x23c>)
 80025f0:	f00b f9b0 	bl	800d954 <iprintf>
	    	heater_off();
 80025f4:	f7ff fef4 	bl	80023e0 <heater_off>
	    	mt_set_target_position(&z_motor,0);
 80025f8:	2100      	movs	r1, #0
 80025fa:	4829      	ldr	r0, [pc, #164]	; (80026a0 <step_drying_process+0x228>)
 80025fc:	f7ff fa7c 	bl	8001af8 <mt_set_target_position>
	    	dy_state = DY_STATE_Z_TOP;
 8002600:	4b1f      	ldr	r3, [pc, #124]	; (8002680 <step_drying_process+0x208>)
 8002602:	2207      	movs	r2, #7
 8002604:	701a      	strb	r2, [r3, #0]
	        break;
 8002606:	e038      	b.n	800267a <step_drying_process+0x202>
	    case DY_STATE_Z_TOP:
        	if(Mt_get_current_prosition(z_motor) == 0){
 8002608:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <step_drying_process+0x228>)
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d133      	bne.n	8002678 <step_drying_process+0x200>
        		LOGI("ztop done");
 8002610:	491e      	ldr	r1, [pc, #120]	; (800268c <step_drying_process+0x214>)
 8002612:	4829      	ldr	r0, [pc, #164]	; (80026b8 <step_drying_process+0x240>)
 8002614:	f00b f99e 	bl	800d954 <iprintf>
        		dy_state = DY_STATE_Z_FINISH;
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <step_drying_process+0x208>)
 800261a:	2208      	movs	r2, #8
 800261c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800261e:	e02b      	b.n	8002678 <step_drying_process+0x200>
	    case DY_STATE_WAIT:
	        // code to execute when the state is DY_STATE_WAIT
	    	if(HAL_GetTick() > t_time)
 8002620:	f001 fade 	bl	8003be0 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <step_drying_process+0x234>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d918      	bls.n	8002660 <step_drying_process+0x1e8>
			{
				switch (old_dy_state) {
 800262e:	4b1a      	ldr	r3, [pc, #104]	; (8002698 <step_drying_process+0x220>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b04      	cmp	r3, #4
 8002634:	d116      	bne.n	8002664 <step_drying_process+0x1ec>
					case DY_HEATER_ON:
						if(drying_step->heater_off) {
 8002636:	4b13      	ldr	r3, [pc, #76]	; (8002684 <step_drying_process+0x20c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	88db      	ldrh	r3, [r3, #6]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <step_drying_process+0x1d0>
							dy_state = DY_HEATER_OFF; // Example transition to next state
 8002640:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <step_drying_process+0x208>)
 8002642:	2205      	movs	r2, #5
 8002644:	701a      	strb	r2, [r3, #0]
							LOGI("skip heater off");
							mt_set_target_position(&z_motor,0);
							dy_state = DY_STATE_Z_TOP;
							break;
						}
						break;
 8002646:	e00e      	b.n	8002666 <step_drying_process+0x1ee>
							LOGI("skip heater off");
 8002648:	4910      	ldr	r1, [pc, #64]	; (800268c <step_drying_process+0x214>)
 800264a:	481c      	ldr	r0, [pc, #112]	; (80026bc <step_drying_process+0x244>)
 800264c:	f00b f982 	bl	800d954 <iprintf>
							mt_set_target_position(&z_motor,0);
 8002650:	2100      	movs	r1, #0
 8002652:	4813      	ldr	r0, [pc, #76]	; (80026a0 <step_drying_process+0x228>)
 8002654:	f7ff fa50 	bl	8001af8 <mt_set_target_position>
							dy_state = DY_STATE_Z_TOP;
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <step_drying_process+0x208>)
 800265a:	2207      	movs	r2, #7
 800265c:	701a      	strb	r2, [r3, #0]
							break;
 800265e:	e002      	b.n	8002666 <step_drying_process+0x1ee>
				    default:
				        break;
				}
			}
 8002660:	bf00      	nop
 8002662:	e00a      	b.n	800267a <step_drying_process+0x202>
				        break;
 8002664:	bf00      	nop
	        break;
 8002666:	e008      	b.n	800267a <step_drying_process+0x202>
	    case DY_STATE_Z_FINISH:
	    	return 1;
 8002668:	2301      	movs	r3, #1
 800266a:	e007      	b.n	800267c <step_drying_process+0x204>
	        old_dy_state = DY_STATE_Z_FINISH;
	        break;
	    default:
	        break;
 800266c:	bf00      	nop
 800266e:	e004      	b.n	800267a <step_drying_process+0x202>
	        break;
 8002670:	bf00      	nop
 8002672:	e002      	b.n	800267a <step_drying_process+0x202>
			break;
 8002674:	bf00      	nop
 8002676:	e000      	b.n	800267a <step_drying_process+0x202>
			break;
 8002678:	bf00      	nop
	}
	return 0;
 800267a:	2300      	movs	r3, #0
}
 800267c:	4618      	mov	r0, r3
 800267e:	bd98      	pop	{r3, r4, r7, pc}
 8002680:	20002b2c 	.word	0x20002b2c
 8002684:	20002b30 	.word	0x20002b30
 8002688:	2000017c 	.word	0x2000017c
 800268c:	0800eef4 	.word	0x0800eef4
 8002690:	0800f034 	.word	0x0800f034
 8002694:	20002abc 	.word	0x20002abc
 8002698:	20002b2d 	.word	0x20002b2d
 800269c:	0800f04c 	.word	0x0800f04c
 80026a0:	20002aec 	.word	0x20002aec
 80026a4:	0800f074 	.word	0x0800f074
 80026a8:	0800f088 	.word	0x0800f088
 80026ac:	20002b28 	.word	0x20002b28
 80026b0:	0800f0ac 	.word	0x0800f0ac
 80026b4:	0800f0cc 	.word	0x0800f0cc
 80026b8:	0800f0e0 	.word	0x0800f0e0
 80026bc:	0800f0f4 	.word	0x0800f0f4

080026c0 <step_shake_start>:
extern uint8_t running_pg;
extern uint8_t running_step;
_def_shake_step *shake_step;
_step_shake_state shake_state = SHAKE_STATE_IDE;
int step_shake_start(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
	if(shake_state == SHAKE_STATE_IDE)
 80026c4:	4b13      	ldr	r3, [pc, #76]	; (8002714 <step_shake_start+0x54>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d120      	bne.n	800270e <step_shake_start+0x4e>
	{
		LOGI("start step: %d of program : %d",running_step,running_pg);
 80026cc:	4b12      	ldr	r3, [pc, #72]	; (8002718 <step_shake_start+0x58>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b12      	ldr	r3, [pc, #72]	; (800271c <step_shake_start+0x5c>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	4912      	ldr	r1, [pc, #72]	; (8002720 <step_shake_start+0x60>)
 80026d8:	4812      	ldr	r0, [pc, #72]	; (8002724 <step_shake_start+0x64>)
 80026da:	f00b f93b 	bl	800d954 <iprintf>
		shake_step = (_def_shake_step *)&system_data.flash_data.Program_para[running_pg][running_step];
 80026de:	4b0f      	ldr	r3, [pc, #60]	; (800271c <step_shake_start+0x5c>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <step_shake_start+0x58>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	4619      	mov	r1, r3
 80026ea:	4613      	mov	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4413      	add	r3, r2
 80026f0:	009a      	lsls	r2, r3, #2
 80026f2:	4413      	add	r3, r2
 80026f4:	440b      	add	r3, r1
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	3328      	adds	r3, #40	; 0x28
 80026fa:	4a0b      	ldr	r2, [pc, #44]	; (8002728 <step_shake_start+0x68>)
 80026fc:	4413      	add	r3, r2
 80026fe:	3304      	adds	r3, #4
 8002700:	4a0a      	ldr	r2, [pc, #40]	; (800272c <step_shake_start+0x6c>)
 8002702:	6013      	str	r3, [r2, #0]
		shake_state = SHAKE_STATE_START;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <step_shake_start+0x54>)
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
		return 1;
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <step_shake_start+0x50>
	}
	return 0;
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20002b3c 	.word	0x20002b3c
 8002718:	20002b25 	.word	0x20002b25
 800271c:	20002b24 	.word	0x20002b24
 8002720:	0800f10c 	.word	0x0800f10c
 8002724:	0800f114 	.word	0x0800f114
 8002728:	2000017c 	.word	0x2000017c
 800272c:	20002b38 	.word	0x20002b38

08002730 <show_infor_shake_step>:
//return 1 mean step done
void show_infor_shake_step(_def_shake_step shake_step)
{
 8002730:	b590      	push	{r4, r7, lr}
 8002732:	b085      	sub	sp, #20
 8002734:	af00      	add	r7, sp, #0
 8002736:	463c      	mov	r4, r7
 8002738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOGI("---------------INFOR_SHAKE_STEP------------");
 800273c:	491b      	ldr	r1, [pc, #108]	; (80027ac <show_infor_shake_step+0x7c>)
 800273e:	481c      	ldr	r0, [pc, #112]	; (80027b0 <show_infor_shake_step+0x80>)
 8002740:	f00b f908 	bl	800d954 <iprintf>
	LOGI("1:Move to Wells: %d",shake_step.wells);
 8002744:	787b      	ldrb	r3, [r7, #1]
 8002746:	461a      	mov	r2, r3
 8002748:	4918      	ldr	r1, [pc, #96]	; (80027ac <show_infor_shake_step+0x7c>)
 800274a:	481a      	ldr	r0, [pc, #104]	; (80027b4 <show_infor_shake_step+0x84>)
 800274c:	f00b f902 	bl	800d954 <iprintf>
	LOGI("2:wait1 : %ds",shake_step.wait1);
 8002750:	887b      	ldrh	r3, [r7, #2]
 8002752:	461a      	mov	r2, r3
 8002754:	4915      	ldr	r1, [pc, #84]	; (80027ac <show_infor_shake_step+0x7c>)
 8002756:	4818      	ldr	r0, [pc, #96]	; (80027b8 <show_infor_shake_step+0x88>)
 8002758:	f00b f8fc 	bl	800d954 <iprintf>
	LOGI("3:move z to bottom");
 800275c:	4913      	ldr	r1, [pc, #76]	; (80027ac <show_infor_shake_step+0x7c>)
 800275e:	4817      	ldr	r0, [pc, #92]	; (80027bc <show_infor_shake_step+0x8c>)
 8002760:	f00b f8f8 	bl	800d954 <iprintf>
	LOGI("4:wait2 : %ds",shake_step.wait2);
 8002764:	88bb      	ldrh	r3, [r7, #4]
 8002766:	461a      	mov	r2, r3
 8002768:	4910      	ldr	r1, [pc, #64]	; (80027ac <show_infor_shake_step+0x7c>)
 800276a:	4815      	ldr	r0, [pc, #84]	; (80027c0 <show_infor_shake_step+0x90>)
 800276c:	f00b f8f2 	bl	800d954 <iprintf>
	LOGI("5:shake on : %ds",shake_step.shake);
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	461a      	mov	r2, r3
 8002774:	490d      	ldr	r1, [pc, #52]	; (80027ac <show_infor_shake_step+0x7c>)
 8002776:	4813      	ldr	r0, [pc, #76]	; (80027c4 <show_infor_shake_step+0x94>)
 8002778:	f00b f8ec 	bl	800d954 <iprintf>
	LOGI("6:wait4 : %ds",shake_step.wait4);
 800277c:	893b      	ldrh	r3, [r7, #8]
 800277e:	461a      	mov	r2, r3
 8002780:	490a      	ldr	r1, [pc, #40]	; (80027ac <show_infor_shake_step+0x7c>)
 8002782:	4811      	ldr	r0, [pc, #68]	; (80027c8 <show_infor_shake_step+0x98>)
 8002784:	f00b f8e6 	bl	800d954 <iprintf>
	LOGI("7:move z to top");
 8002788:	4908      	ldr	r1, [pc, #32]	; (80027ac <show_infor_shake_step+0x7c>)
 800278a:	4810      	ldr	r0, [pc, #64]	; (80027cc <show_infor_shake_step+0x9c>)
 800278c:	f00b f8e2 	bl	800d954 <iprintf>
	LOGI("8:wait5 : %ds",shake_step.wait5);
 8002790:	897b      	ldrh	r3, [r7, #10]
 8002792:	461a      	mov	r2, r3
 8002794:	4905      	ldr	r1, [pc, #20]	; (80027ac <show_infor_shake_step+0x7c>)
 8002796:	480e      	ldr	r0, [pc, #56]	; (80027d0 <show_infor_shake_step+0xa0>)
 8002798:	f00b f8dc 	bl	800d954 <iprintf>
	LOGI("------------------------------------------");
 800279c:	4903      	ldr	r1, [pc, #12]	; (80027ac <show_infor_shake_step+0x7c>)
 800279e:	480d      	ldr	r0, [pc, #52]	; (80027d4 <show_infor_shake_step+0xa4>)
 80027a0:	f00b f8d8 	bl	800d954 <iprintf>
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd90      	pop	{r4, r7, pc}
 80027ac:	0800f10c 	.word	0x0800f10c
 80027b0:	0800f13c 	.word	0x0800f13c
 80027b4:	0800f170 	.word	0x0800f170
 80027b8:	0800f18c 	.word	0x0800f18c
 80027bc:	0800f1a4 	.word	0x0800f1a4
 80027c0:	0800f1c0 	.word	0x0800f1c0
 80027c4:	0800f1d8 	.word	0x0800f1d8
 80027c8:	0800f1f0 	.word	0x0800f1f0
 80027cc:	0800f208 	.word	0x0800f208
 80027d0:	0800f220 	.word	0x0800f220
 80027d4:	0800f238 	.word	0x0800f238

080027d8 <step_shake_process>:
int step_shake_process(void){
 80027d8:	b598      	push	{r3, r4, r7, lr}
 80027da:	af00      	add	r7, sp, #0
	static _step_shake_state old_state = SHAKE_STATE_IDE;

	switch (shake_state) {
 80027dc:	4b9d      	ldr	r3, [pc, #628]	; (8002a54 <step_shake_process+0x27c>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b07      	cmp	r3, #7
 80027e2:	f200 8184 	bhi.w	8002aee <step_shake_process+0x316>
 80027e6:	a201      	add	r2, pc, #4	; (adr r2, 80027ec <step_shake_process+0x14>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	08002aef 	.word	0x08002aef
 80027f0:	0800280d 	.word	0x0800280d
 80027f4:	08002867 	.word	0x08002867
 80027f8:	080028bd 	.word	0x080028bd
 80027fc:	08002983 	.word	0x08002983
 8002800:	080029cd 	.word	0x080029cd
 8002804:	08002a91 	.word	0x08002a91
 8002808:	08002ad5 	.word	0x08002ad5
//	                old_state = shake_state;
//	                shake_state = SHAKE_STATE_START;
	                break;
	            case SHAKE_STATE_START:
	                // handle SHAKE_STATE_START -> move x to well
	            	show_infor_shake_step(*shake_step);
 800280c:	4b92      	ldr	r3, [pc, #584]	; (8002a58 <step_shake_process+0x280>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	4610      	mov	r0, r2
 8002814:	685a      	ldr	r2, [r3, #4]
 8002816:	4611      	mov	r1, r2
 8002818:	689c      	ldr	r4, [r3, #8]
 800281a:	4622      	mov	r2, r4
 800281c:	68dc      	ldr	r4, [r3, #12]
 800281e:	4623      	mov	r3, r4
 8002820:	f7ff ff86 	bl	8002730 <show_infor_shake_step>

	            	LOGI("move x to %lu",system_data.flash_data.Well_position[shake_step->wells-1]);
 8002824:	4b8c      	ldr	r3, [pc, #560]	; (8002a58 <step_shake_process+0x280>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	785b      	ldrb	r3, [r3, #1]
 800282a:	3b01      	subs	r3, #1
 800282c:	4a8b      	ldr	r2, [pc, #556]	; (8002a5c <step_shake_process+0x284>)
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	461a      	mov	r2, r3
 8002836:	498a      	ldr	r1, [pc, #552]	; (8002a60 <step_shake_process+0x288>)
 8002838:	488a      	ldr	r0, [pc, #552]	; (8002a64 <step_shake_process+0x28c>)
 800283a:	f00b f88b 	bl	800d954 <iprintf>
	            	mt_set_target_position(&x_motor, system_data.flash_data.Well_position[shake_step->wells-1]);
 800283e:	4b86      	ldr	r3, [pc, #536]	; (8002a58 <step_shake_process+0x280>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	785b      	ldrb	r3, [r3, #1]
 8002844:	3b01      	subs	r3, #1
 8002846:	4a85      	ldr	r2, [pc, #532]	; (8002a5c <step_shake_process+0x284>)
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	4619      	mov	r1, r3
 8002850:	4885      	ldr	r0, [pc, #532]	; (8002a68 <step_shake_process+0x290>)
 8002852:	f7ff f951 	bl	8001af8 <mt_set_target_position>
	                old_state = shake_state;
 8002856:	4b7f      	ldr	r3, [pc, #508]	; (8002a54 <step_shake_process+0x27c>)
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	4b84      	ldr	r3, [pc, #528]	; (8002a6c <step_shake_process+0x294>)
 800285c:	701a      	strb	r2, [r3, #0]
	                shake_state = SHAKE_STATE_MOVE_WELLS;
 800285e:	4b7d      	ldr	r3, [pc, #500]	; (8002a54 <step_shake_process+0x27c>)
 8002860:	2202      	movs	r2, #2
 8002862:	701a      	strb	r2, [r3, #0]
	                break;
 8002864:	e14c      	b.n	8002b00 <step_shake_process+0x328>
	            case SHAKE_STATE_MOVE_WELLS:
	                // handle SHAKE_STATE_MOVE_WELLS
	            	if(Mt_get_current_prosition(x_motor) == system_data.flash_data.Well_position[shake_step->wells-1])
 8002866:	4b80      	ldr	r3, [pc, #512]	; (8002a68 <step_shake_process+0x290>)
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	4b7b      	ldr	r3, [pc, #492]	; (8002a58 <step_shake_process+0x280>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	785b      	ldrb	r3, [r3, #1]
 8002870:	3b01      	subs	r3, #1
 8002872:	497a      	ldr	r1, [pc, #488]	; (8002a5c <step_shake_process+0x284>)
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	440b      	add	r3, r1
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	429a      	cmp	r2, r3
 800287c:	f040 8139 	bne.w	8002af2 <step_shake_process+0x31a>
	            	{
	            		LOGI("move x done, wait %ds",shake_step->wait1);
 8002880:	4b75      	ldr	r3, [pc, #468]	; (8002a58 <step_shake_process+0x280>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	885b      	ldrh	r3, [r3, #2]
 8002886:	461a      	mov	r2, r3
 8002888:	4975      	ldr	r1, [pc, #468]	; (8002a60 <step_shake_process+0x288>)
 800288a:	4879      	ldr	r0, [pc, #484]	; (8002a70 <step_shake_process+0x298>)
 800288c:	f00b f862 	bl	800d954 <iprintf>
						old_state = shake_state;
 8002890:	4b70      	ldr	r3, [pc, #448]	; (8002a54 <step_shake_process+0x27c>)
 8002892:	781a      	ldrb	r2, [r3, #0]
 8002894:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <step_shake_process+0x294>)
 8002896:	701a      	strb	r2, [r3, #0]
						shake_state = SHAKE_STATE_WAIT;
 8002898:	4b6e      	ldr	r3, [pc, #440]	; (8002a54 <step_shake_process+0x27c>)
 800289a:	2203      	movs	r2, #3
 800289c:	701a      	strb	r2, [r3, #0]
						t_time = HAL_GetTick() +  (uint32_t)shake_step->wait1 * 1000;
 800289e:	f001 f99f 	bl	8003be0 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b6c      	ldr	r3, [pc, #432]	; (8002a58 <step_shake_process+0x280>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	885b      	ldrh	r3, [r3, #2]
 80028aa:	4619      	mov	r1, r3
 80028ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b0:	fb01 f303 	mul.w	r3, r1, r3
 80028b4:	4413      	add	r3, r2
 80028b6:	4a6f      	ldr	r2, [pc, #444]	; (8002a74 <step_shake_process+0x29c>)
 80028b8:	6013      	str	r3, [r2, #0]
	            	}
	                break;
 80028ba:	e11a      	b.n	8002af2 <step_shake_process+0x31a>
	            case SHAKE_STATE_WAIT:
	                // handle SHAKE_STATE_WAIT
	            	if(HAL_GetTick() > t_time)
 80028bc:	f001 f990 	bl	8003be0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4b6c      	ldr	r3, [pc, #432]	; (8002a74 <step_shake_process+0x29c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d957      	bls.n	800297a <step_shake_process+0x1a2>
	            	{
	            		switch (old_state) {
 80028ca:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <step_shake_process+0x294>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	3b02      	subs	r3, #2
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	d854      	bhi.n	800297e <step_shake_process+0x1a6>
 80028d4:	a201      	add	r2, pc, #4	; (adr r2, 80028dc <step_shake_process+0x104>)
 80028d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028da:	bf00      	nop
 80028dc:	080028f5 	.word	0x080028f5
 80028e0:	0800297f 	.word	0x0800297f
 80028e4:	08002917 	.word	0x08002917
 80028e8:	0800295b 	.word	0x0800295b
 80028ec:	08002973 	.word	0x08002973
 80028f0:	0800297f 	.word	0x0800297f
	            		    case SHAKE_STATE_MOVE_WELLS:
	            		    	LOGI("move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
 80028f4:	4b59      	ldr	r3, [pc, #356]	; (8002a5c <step_shake_process+0x284>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	4959      	ldr	r1, [pc, #356]	; (8002a60 <step_shake_process+0x288>)
 80028fc:	485e      	ldr	r0, [pc, #376]	; (8002a78 <step_shake_process+0x2a0>)
 80028fe:	f00b f829 	bl	800d954 <iprintf>
	            		    	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 8002902:	4b56      	ldr	r3, [pc, #344]	; (8002a5c <step_shake_process+0x284>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4619      	mov	r1, r3
 8002908:	485c      	ldr	r0, [pc, #368]	; (8002a7c <step_shake_process+0x2a4>)
 800290a:	f7ff f8f5 	bl	8001af8 <mt_set_target_position>
	            		    	shake_state = SHAKE_STATE_Z_BOTTOM;
 800290e:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <step_shake_process+0x27c>)
 8002910:	2204      	movs	r2, #4
 8002912:	701a      	strb	r2, [r3, #0]
	            		        break;
 8002914:	e034      	b.n	8002980 <step_shake_process+0x1a8>
	            		    case SHAKE_STATE_Z_BOTTOM:
	            		    	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 8002916:	4b51      	ldr	r3, [pc, #324]	; (8002a5c <step_shake_process+0x284>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800291e:	4619      	mov	r1, r3
 8002920:	4856      	ldr	r0, [pc, #344]	; (8002a7c <step_shake_process+0x2a4>)
 8002922:	f7ff f8e9 	bl	8001af8 <mt_set_target_position>
	            		    	t_time = HAL_GetTick() +  (uint32_t)shake_step->shake * 1000;
 8002926:	f001 f95b 	bl	8003be0 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	4b4a      	ldr	r3, [pc, #296]	; (8002a58 <step_shake_process+0x280>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	88db      	ldrh	r3, [r3, #6]
 8002932:	4619      	mov	r1, r3
 8002934:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002938:	fb01 f303 	mul.w	r3, r1, r3
 800293c:	4413      	add	r3, r2
 800293e:	4a4d      	ldr	r2, [pc, #308]	; (8002a74 <step_shake_process+0x29c>)
 8002940:	6013      	str	r3, [r2, #0]
	            		    	LOGI("start shake in %ds",shake_step->shake);
 8002942:	4b45      	ldr	r3, [pc, #276]	; (8002a58 <step_shake_process+0x280>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	88db      	ldrh	r3, [r3, #6]
 8002948:	461a      	mov	r2, r3
 800294a:	4945      	ldr	r1, [pc, #276]	; (8002a60 <step_shake_process+0x288>)
 800294c:	484c      	ldr	r0, [pc, #304]	; (8002a80 <step_shake_process+0x2a8>)
 800294e:	f00b f801 	bl	800d954 <iprintf>
	            		    	shake_state = SHAKE_STATE_SHAKE;
 8002952:	4b40      	ldr	r3, [pc, #256]	; (8002a54 <step_shake_process+0x27c>)
 8002954:	2205      	movs	r2, #5
 8002956:	701a      	strb	r2, [r3, #0]
	            		        break;
 8002958:	e012      	b.n	8002980 <step_shake_process+0x1a8>
	            		    case SHAKE_STATE_SHAKE:
	            		    	LOGI("move z to top");
 800295a:	4941      	ldr	r1, [pc, #260]	; (8002a60 <step_shake_process+0x288>)
 800295c:	4849      	ldr	r0, [pc, #292]	; (8002a84 <step_shake_process+0x2ac>)
 800295e:	f00a fff9 	bl	800d954 <iprintf>
	            		    	mt_set_target_position(&z_motor,0);
 8002962:	2100      	movs	r1, #0
 8002964:	4845      	ldr	r0, [pc, #276]	; (8002a7c <step_shake_process+0x2a4>)
 8002966:	f7ff f8c7 	bl	8001af8 <mt_set_target_position>
	            		    	shake_state = SHAKE_STATE_Z_TOP;
 800296a:	4b3a      	ldr	r3, [pc, #232]	; (8002a54 <step_shake_process+0x27c>)
 800296c:	2206      	movs	r2, #6
 800296e:	701a      	strb	r2, [r3, #0]
	            		        break;
 8002970:	e006      	b.n	8002980 <step_shake_process+0x1a8>
	            		    case SHAKE_STATE_Z_TOP:
	            		    	shake_state = SHAKE_STATE_Z_FINISH;
 8002972:	4b38      	ldr	r3, [pc, #224]	; (8002a54 <step_shake_process+0x27c>)
 8002974:	2207      	movs	r2, #7
 8002976:	701a      	strb	r2, [r3, #0]
	            		        break;
 8002978:	e002      	b.n	8002980 <step_shake_process+0x1a8>
	            		        break;
	            		    default:
	            		        // handle unknown state
	            		        break;
	            		}
	            	}
 800297a:	bf00      	nop
 800297c:	e0c0      	b.n	8002b00 <step_shake_process+0x328>
	            		        break;
 800297e:	bf00      	nop
	                break;
 8002980:	e0be      	b.n	8002b00 <step_shake_process+0x328>
	            case SHAKE_STATE_Z_BOTTOM:
	                // handle SHAKE_STATE_Z_BOTTOM
	            	if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8002982:	4b3e      	ldr	r3, [pc, #248]	; (8002a7c <step_shake_process+0x2a4>)
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	4b35      	ldr	r3, [pc, #212]	; (8002a5c <step_shake_process+0x284>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	f040 80b3 	bne.w	8002af6 <step_shake_process+0x31e>
					{
						old_state = shake_state;
 8002990:	4b30      	ldr	r3, [pc, #192]	; (8002a54 <step_shake_process+0x27c>)
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <step_shake_process+0x294>)
 8002996:	701a      	strb	r2, [r3, #0]
						shake_state = SHAKE_STATE_WAIT;
 8002998:	4b2e      	ldr	r3, [pc, #184]	; (8002a54 <step_shake_process+0x27c>)
 800299a:	2203      	movs	r2, #3
 800299c:	701a      	strb	r2, [r3, #0]
						LOGI("wait2 %d",shake_step->wait2);
 800299e:	4b2e      	ldr	r3, [pc, #184]	; (8002a58 <step_shake_process+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	889b      	ldrh	r3, [r3, #4]
 80029a4:	461a      	mov	r2, r3
 80029a6:	492e      	ldr	r1, [pc, #184]	; (8002a60 <step_shake_process+0x288>)
 80029a8:	4837      	ldr	r0, [pc, #220]	; (8002a88 <step_shake_process+0x2b0>)
 80029aa:	f00a ffd3 	bl	800d954 <iprintf>
						t_time = HAL_GetTick() +  (uint32_t)shake_step->wait2 * 1000;
 80029ae:	f001 f917 	bl	8003be0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <step_shake_process+0x280>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	889b      	ldrh	r3, [r3, #4]
 80029ba:	4619      	mov	r1, r3
 80029bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	4a2b      	ldr	r2, [pc, #172]	; (8002a74 <step_shake_process+0x29c>)
 80029c8:	6013      	str	r3, [r2, #0]
					}
//					break;
//	                old_state = shake_state;
//	                shake_state = SHAKE_STATE_SHAKE;
	                break;
 80029ca:	e094      	b.n	8002af6 <step_shake_process+0x31e>
	            case SHAKE_STATE_SHAKE:
	                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos - 1000)
 80029cc:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <step_shake_process+0x2a4>)
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	4b22      	ldr	r3, [pc, #136]	; (8002a5c <step_shake_process+0x284>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80029d8:	429a      	cmp	r2, r3
 80029da:	d105      	bne.n	80029e8 <step_shake_process+0x210>
	            	{
	                	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos);
 80029dc:	4b1f      	ldr	r3, [pc, #124]	; (8002a5c <step_shake_process+0x284>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4619      	mov	r1, r3
 80029e2:	4826      	ldr	r0, [pc, #152]	; (8002a7c <step_shake_process+0x2a4>)
 80029e4:	f7ff f888 	bl	8001af8 <mt_set_target_position>
	            	}
	                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <step_shake_process+0x2a4>)
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <step_shake_process+0x284>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	f040 8082 	bne.w	8002afa <step_shake_process+0x322>
					{
	                	if(HAL_GetTick() > t_time)
 80029f6:	f001 f8f3 	bl	8003be0 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	4b1d      	ldr	r3, [pc, #116]	; (8002a74 <step_shake_process+0x29c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d91d      	bls.n	8002a40 <step_shake_process+0x268>
	                	{
	                		LOGI("shake done, wait4 : %d",shake_step->wait4);
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <step_shake_process+0x280>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	891b      	ldrh	r3, [r3, #8]
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	4914      	ldr	r1, [pc, #80]	; (8002a60 <step_shake_process+0x288>)
 8002a0e:	481f      	ldr	r0, [pc, #124]	; (8002a8c <step_shake_process+0x2b4>)
 8002a10:	f00a ffa0 	bl	800d954 <iprintf>
	    	                old_state = shake_state;
 8002a14:	4b0f      	ldr	r3, [pc, #60]	; (8002a54 <step_shake_process+0x27c>)
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <step_shake_process+0x294>)
 8002a1a:	701a      	strb	r2, [r3, #0]
	    	                t_time = HAL_GetTick() +  (uint32_t)shake_step->wait4 * 1000;
 8002a1c:	f001 f8e0 	bl	8003be0 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <step_shake_process+0x280>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	891b      	ldrh	r3, [r3, #8]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	4a0f      	ldr	r2, [pc, #60]	; (8002a74 <step_shake_process+0x29c>)
 8002a36:	6013      	str	r3, [r2, #0]
	    	                shake_state = SHAKE_STATE_WAIT;
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <step_shake_process+0x27c>)
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	701a      	strb	r2, [r3, #0]
	                	else
	                	{
	                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
	                	}
					}
	                break;
 8002a3e:	e05c      	b.n	8002afa <step_shake_process+0x322>
	                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 8002a40:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <step_shake_process+0x284>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002a48:	4619      	mov	r1, r3
 8002a4a:	480c      	ldr	r0, [pc, #48]	; (8002a7c <step_shake_process+0x2a4>)
 8002a4c:	f7ff f854 	bl	8001af8 <mt_set_target_position>
	                break;
 8002a50:	e053      	b.n	8002afa <step_shake_process+0x322>
 8002a52:	bf00      	nop
 8002a54:	20002b3c 	.word	0x20002b3c
 8002a58:	20002b38 	.word	0x20002b38
 8002a5c:	2000017c 	.word	0x2000017c
 8002a60:	0800f10c 	.word	0x0800f10c
 8002a64:	0800f26c 	.word	0x0800f26c
 8002a68:	20002abc 	.word	0x20002abc
 8002a6c:	20002b3d 	.word	0x20002b3d
 8002a70:	0800f284 	.word	0x0800f284
 8002a74:	20002b34 	.word	0x20002b34
 8002a78:	0800f2a4 	.word	0x0800f2a4
 8002a7c:	20002aec 	.word	0x20002aec
 8002a80:	0800f2c0 	.word	0x0800f2c0
 8002a84:	0800f2dc 	.word	0x0800f2dc
 8002a88:	0800f2f4 	.word	0x0800f2f4
 8002a8c:	0800f304 	.word	0x0800f304
	            case SHAKE_STATE_Z_TOP:
	            	if(Mt_get_current_prosition(z_motor) == 0)
 8002a90:	4b1d      	ldr	r3, [pc, #116]	; (8002b08 <step_shake_process+0x330>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d132      	bne.n	8002afe <step_shake_process+0x326>
					{
	            		LOGI("all done wait5: %d",shake_step->wait5);
 8002a98:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <step_shake_process+0x334>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	895b      	ldrh	r3, [r3, #10]
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	491b      	ldr	r1, [pc, #108]	; (8002b10 <step_shake_process+0x338>)
 8002aa2:	481c      	ldr	r0, [pc, #112]	; (8002b14 <step_shake_process+0x33c>)
 8002aa4:	f00a ff56 	bl	800d954 <iprintf>
	            		old_state = shake_state;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <step_shake_process+0x340>)
 8002aaa:	781a      	ldrb	r2, [r3, #0]
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <step_shake_process+0x344>)
 8002aae:	701a      	strb	r2, [r3, #0]
						t_time = HAL_GetTick() +  (uint32_t)shake_step->wait5 * 1000;
 8002ab0:	f001 f896 	bl	8003be0 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	4b15      	ldr	r3, [pc, #84]	; (8002b0c <step_shake_process+0x334>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	895b      	ldrh	r3, [r3, #10]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac2:	fb01 f303 	mul.w	r3, r1, r3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	4a15      	ldr	r2, [pc, #84]	; (8002b20 <step_shake_process+0x348>)
 8002aca:	6013      	str	r3, [r2, #0]
						shake_state = SHAKE_STATE_WAIT;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <step_shake_process+0x340>)
 8002ace:	2203      	movs	r2, #3
 8002ad0:	701a      	strb	r2, [r3, #0]
					}
	                break;
 8002ad2:	e014      	b.n	8002afe <step_shake_process+0x326>
	            case SHAKE_STATE_Z_FINISH:
	                // handle SHAKE_STATE_Z_FINISH
	            	LOGI("step finish");
 8002ad4:	490e      	ldr	r1, [pc, #56]	; (8002b10 <step_shake_process+0x338>)
 8002ad6:	4813      	ldr	r0, [pc, #76]	; (8002b24 <step_shake_process+0x34c>)
 8002ad8:	f00a ff3c 	bl	800d954 <iprintf>
	                old_state = shake_state;
 8002adc:	4b0e      	ldr	r3, [pc, #56]	; (8002b18 <step_shake_process+0x340>)
 8002ade:	781a      	ldrb	r2, [r3, #0]
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	; (8002b1c <step_shake_process+0x344>)
 8002ae2:	701a      	strb	r2, [r3, #0]
	                shake_state = SHAKE_STATE_IDE;
 8002ae4:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <step_shake_process+0x340>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	701a      	strb	r2, [r3, #0]
	                return 1;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e009      	b.n	8002b02 <step_shake_process+0x32a>
	                break;
	            default:
	                // handle unknown state
//	                old_state = shake_state;
//	                shake_state = SHAKE_STATE_IDE;
	                break;
 8002aee:	bf00      	nop
 8002af0:	e006      	b.n	8002b00 <step_shake_process+0x328>
	                break;
 8002af2:	bf00      	nop
 8002af4:	e004      	b.n	8002b00 <step_shake_process+0x328>
	                break;
 8002af6:	bf00      	nop
 8002af8:	e002      	b.n	8002b00 <step_shake_process+0x328>
	                break;
 8002afa:	bf00      	nop
 8002afc:	e000      	b.n	8002b00 <step_shake_process+0x328>
	                break;
 8002afe:	bf00      	nop
	        }
	return 0;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd98      	pop	{r3, r4, r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20002aec 	.word	0x20002aec
 8002b0c:	20002b38 	.word	0x20002b38
 8002b10:	0800f10c 	.word	0x0800f10c
 8002b14:	0800f324 	.word	0x0800f324
 8002b18:	20002b3c 	.word	0x20002b3c
 8002b1c:	20002b3d 	.word	0x20002b3d
 8002b20:	20002b34 	.word	0x20002b34
 8002b24:	0800f340 	.word	0x0800f340

08002b28 <start_fill_washing_solution>:
extern uint8_t running_pg;
extern uint8_t running_step;
_step_ws_state ws_state = WS_STATE_IDE;
_step_ws_state old_ws_state = WS_STATE_IDE;
static uint32_t ws_time = 0;
void start_fill_washing_solution(){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
	LOGI("start fill washing solution");
 8002b2c:	4905      	ldr	r1, [pc, #20]	; (8002b44 <start_fill_washing_solution+0x1c>)
 8002b2e:	4806      	ldr	r0, [pc, #24]	; (8002b48 <start_fill_washing_solution+0x20>)
 8002b30:	f00a ff10 	bl	800d954 <iprintf>
	HAL_GPIO_WritePin(PUMP1_GPIO_Port, PUMP1_Pin, PUMP1_ON_LEVEL);
 8002b34:	2201      	movs	r2, #1
 8002b36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b3a:	4804      	ldr	r0, [pc, #16]	; (8002b4c <start_fill_washing_solution+0x24>)
 8002b3c:	f002 f946 	bl	8004dcc <HAL_GPIO_WritePin>
}
 8002b40:	bf00      	nop
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	0800f354 	.word	0x0800f354
 8002b48:	0800f35c 	.word	0x0800f35c
 8002b4c:	40020c00 	.word	0x40020c00

08002b50 <is_washing_solution_full>:
int is_washing_solution_full()
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(WS_SOLUTION_FULL_GPIO_Port, WS_SOLUTION_FULL_Pin) == WS_SOLUTION_FULL_LEVEL)
 8002b54:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b58:	4805      	ldr	r0, [pc, #20]	; (8002b70 <is_washing_solution_full+0x20>)
 8002b5a:	f002 f91f 	bl	8004d9c <HAL_GPIO_ReadPin>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <is_washing_solution_full+0x18>
		return 1;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <is_washing_solution_full+0x1a>
	return 0;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40020c00 	.word	0x40020c00

08002b74 <stop_fill_washing_solution>:
void stop_fill_washing_solution(){
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	LOGI("stop fill washing solution");
 8002b78:	4905      	ldr	r1, [pc, #20]	; (8002b90 <stop_fill_washing_solution+0x1c>)
 8002b7a:	4806      	ldr	r0, [pc, #24]	; (8002b94 <stop_fill_washing_solution+0x20>)
 8002b7c:	f00a feea 	bl	800d954 <iprintf>
	HAL_GPIO_WritePin(PUMP1_GPIO_Port, PUMP1_Pin, PUMP1_OFF_LEVEL);
 8002b80:	2200      	movs	r2, #0
 8002b82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b86:	4804      	ldr	r0, [pc, #16]	; (8002b98 <stop_fill_washing_solution+0x24>)
 8002b88:	f002 f920 	bl	8004dcc <HAL_GPIO_WritePin>
}
 8002b8c:	bf00      	nop
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	0800f354 	.word	0x0800f354
 8002b94:	0800f380 	.word	0x0800f380
 8002b98:	40020c00 	.word	0x40020c00

08002b9c <start_drain_washing_solution>:


void start_drain_washing_solution(){
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	LOGI("start drain fill solution ");
 8002ba0:	4902      	ldr	r1, [pc, #8]	; (8002bac <start_drain_washing_solution+0x10>)
 8002ba2:	4803      	ldr	r0, [pc, #12]	; (8002bb0 <start_drain_washing_solution+0x14>)
 8002ba4:	f00a fed6 	bl	800d954 <iprintf>
}
 8002ba8:	bf00      	nop
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	0800f354 	.word	0x0800f354
 8002bb0:	0800f3a4 	.word	0x0800f3a4

08002bb4 <is_washing_solution_empty>:
int is_washing_solution_empty()
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(WS_SOLUTION_EMPTY_GPIO_Port, WS_SOLUTION_EMPTY_Pin) == WS_SOLUTION_EMPTY_LEVEL)
 8002bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bbc:	4805      	ldr	r0, [pc, #20]	; (8002bd4 <is_washing_solution_empty+0x20>)
 8002bbe:	f002 f8ed 	bl	8004d9c <HAL_GPIO_ReadPin>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d101      	bne.n	8002bcc <is_washing_solution_empty+0x18>
			return 1;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e000      	b.n	8002bce <is_washing_solution_empty+0x1a>
	return 0;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40020c00 	.word	0x40020c00

08002bd8 <stop_drain_washing_solution>:
void stop_drain_washing_solution(){
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	af00      	add	r7, sp, #0
	LOGI("stop drain washing solution ");
 8002bdc:	4902      	ldr	r1, [pc, #8]	; (8002be8 <stop_drain_washing_solution+0x10>)
 8002bde:	4803      	ldr	r0, [pc, #12]	; (8002bec <stop_drain_washing_solution+0x14>)
 8002be0:	f00a feb8 	bl	800d954 <iprintf>
}
 8002be4:	bf00      	nop
 8002be6:	bd80      	pop	{r7, pc}
 8002be8:	0800f354 	.word	0x0800f354
 8002bec:	0800f3c8 	.word	0x0800f3c8

08002bf0 <step_washing_start>:
int step_washing_start()
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
	if(ws_state == WS_STATE_IDE)
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <step_washing_start+0x54>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d120      	bne.n	8002c3e <step_washing_start+0x4e>
	{
		LOGI("--------------- washing step: %d of program : %d----------------",running_step,running_pg);
 8002bfc:	4b12      	ldr	r3, [pc, #72]	; (8002c48 <step_washing_start+0x58>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	461a      	mov	r2, r3
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <step_washing_start+0x5c>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	4912      	ldr	r1, [pc, #72]	; (8002c50 <step_washing_start+0x60>)
 8002c08:	4812      	ldr	r0, [pc, #72]	; (8002c54 <step_washing_start+0x64>)
 8002c0a:	f00a fea3 	bl	800d954 <iprintf>
		washing_step = (_def_washing_step *)&system_data.flash_data.Program_para[running_pg][running_step];
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <step_washing_start+0x5c>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b0c      	ldr	r3, [pc, #48]	; (8002c48 <step_washing_start+0x58>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4413      	add	r3, r2
 8002c20:	009a      	lsls	r2, r3, #2
 8002c22:	4413      	add	r3, r2
 8002c24:	440b      	add	r3, r1
 8002c26:	011b      	lsls	r3, r3, #4
 8002c28:	3328      	adds	r3, #40	; 0x28
 8002c2a:	4a0b      	ldr	r2, [pc, #44]	; (8002c58 <step_washing_start+0x68>)
 8002c2c:	4413      	add	r3, r2
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4a0a      	ldr	r2, [pc, #40]	; (8002c5c <step_washing_start+0x6c>)
 8002c32:	6013      	str	r3, [r2, #0]
		ws_state = WS_STATE_START;
 8002c34:	4b03      	ldr	r3, [pc, #12]	; (8002c44 <step_washing_start+0x54>)
 8002c36:	2201      	movs	r2, #1
 8002c38:	701a      	strb	r2, [r3, #0]
		return 1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <step_washing_start+0x50>
	}
	return 0;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20002b44 	.word	0x20002b44
 8002c48:	20002b25 	.word	0x20002b25
 8002c4c:	20002b24 	.word	0x20002b24
 8002c50:	0800f354 	.word	0x0800f354
 8002c54:	0800f3ec 	.word	0x0800f3ec
 8002c58:	2000017c 	.word	0x2000017c
 8002c5c:	20002b40 	.word	0x20002b40

08002c60 <show_infor_washing_step>:

void show_infor_washing_step(_def_washing_step ws_step)
{
 8002c60:	b590      	push	{r4, r7, lr}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	463c      	mov	r4, r7
 8002c68:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LOGI("---------------INFOR_WASHING_STEP------------");
 8002c6c:	491d      	ldr	r1, [pc, #116]	; (8002ce4 <show_infor_washing_step+0x84>)
 8002c6e:	481e      	ldr	r0, [pc, #120]	; (8002ce8 <show_infor_washing_step+0x88>)
 8002c70:	f00a fe70 	bl	800d954 <iprintf>
	LOGI("1:Move to Wells: %d",ws_step.wells);
 8002c74:	787b      	ldrb	r3, [r7, #1]
 8002c76:	461a      	mov	r2, r3
 8002c78:	491a      	ldr	r1, [pc, #104]	; (8002ce4 <show_infor_washing_step+0x84>)
 8002c7a:	481c      	ldr	r0, [pc, #112]	; (8002cec <show_infor_washing_step+0x8c>)
 8002c7c:	f00a fe6a 	bl	800d954 <iprintf>
	LOGI("2:wait1 : %ds",ws_step.wait1);
 8002c80:	887b      	ldrh	r3, [r7, #2]
 8002c82:	461a      	mov	r2, r3
 8002c84:	4917      	ldr	r1, [pc, #92]	; (8002ce4 <show_infor_washing_step+0x84>)
 8002c86:	481a      	ldr	r0, [pc, #104]	; (8002cf0 <show_infor_washing_step+0x90>)
 8002c88:	f00a fe64 	bl	800d954 <iprintf>
	LOGI("3:fill washing solution: %d \n4:move z to bottom",ws_step.fill);
 8002c8c:	88bb      	ldrh	r3, [r7, #4]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	4914      	ldr	r1, [pc, #80]	; (8002ce4 <show_infor_washing_step+0x84>)
 8002c92:	4818      	ldr	r0, [pc, #96]	; (8002cf4 <show_infor_washing_step+0x94>)
 8002c94:	f00a fe5e 	bl	800d954 <iprintf>
	LOGI("5:wait2 : %ds",ws_step.wait2);
 8002c98:	88fb      	ldrh	r3, [r7, #6]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4911      	ldr	r1, [pc, #68]	; (8002ce4 <show_infor_washing_step+0x84>)
 8002c9e:	4816      	ldr	r0, [pc, #88]	; (8002cf8 <show_infor_washing_step+0x98>)
 8002ca0:	f00a fe58 	bl	800d954 <iprintf>
	LOGI("6:shake on : %ds",ws_step.shake);
 8002ca4:	893b      	ldrh	r3, [r7, #8]
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	490e      	ldr	r1, [pc, #56]	; (8002ce4 <show_infor_washing_step+0x84>)
 8002caa:	4814      	ldr	r0, [pc, #80]	; (8002cfc <show_infor_washing_step+0x9c>)
 8002cac:	f00a fe52 	bl	800d954 <iprintf>
	LOGI("7:wait4 : %ds",ws_step.wait4);
 8002cb0:	897b      	ldrh	r3, [r7, #10]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	490b      	ldr	r1, [pc, #44]	; (8002ce4 <show_infor_washing_step+0x84>)
 8002cb6:	4812      	ldr	r0, [pc, #72]	; (8002d00 <show_infor_washing_step+0xa0>)
 8002cb8:	f00a fe4c 	bl	800d954 <iprintf>
	LOGI("8:move z to top %d\n9:Drain washing solution",ws_step.drain);
 8002cbc:	89bb      	ldrh	r3, [r7, #12]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4908      	ldr	r1, [pc, #32]	; (8002ce4 <show_infor_washing_step+0x84>)
 8002cc2:	4810      	ldr	r0, [pc, #64]	; (8002d04 <show_infor_washing_step+0xa4>)
 8002cc4:	f00a fe46 	bl	800d954 <iprintf>
	LOGI("10:wait5 : %ds",ws_step.wait5);
 8002cc8:	89fb      	ldrh	r3, [r7, #14]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4905      	ldr	r1, [pc, #20]	; (8002ce4 <show_infor_washing_step+0x84>)
 8002cce:	480e      	ldr	r0, [pc, #56]	; (8002d08 <show_infor_washing_step+0xa8>)
 8002cd0:	f00a fe40 	bl	800d954 <iprintf>
	LOGI("-------------------------------------------");
 8002cd4:	4903      	ldr	r1, [pc, #12]	; (8002ce4 <show_infor_washing_step+0x84>)
 8002cd6:	480d      	ldr	r0, [pc, #52]	; (8002d0c <show_infor_washing_step+0xac>)
 8002cd8:	f00a fe3c 	bl	800d954 <iprintf>
}
 8002cdc:	bf00      	nop
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd90      	pop	{r4, r7, pc}
 8002ce4:	0800f354 	.word	0x0800f354
 8002ce8:	0800f434 	.word	0x0800f434
 8002cec:	0800f46c 	.word	0x0800f46c
 8002cf0:	0800f488 	.word	0x0800f488
 8002cf4:	0800f4a0 	.word	0x0800f4a0
 8002cf8:	0800f4d8 	.word	0x0800f4d8
 8002cfc:	0800f4f0 	.word	0x0800f4f0
 8002d00:	0800f508 	.word	0x0800f508
 8002d04:	0800f520 	.word	0x0800f520
 8002d08:	0800f554 	.word	0x0800f554
 8002d0c:	0800f56c 	.word	0x0800f56c

08002d10 <step_washing_process>:

int step_washing_process(void)
{
 8002d10:	b598      	push	{r3, r4, r7, lr}
 8002d12:	af00      	add	r7, sp, #0
	    switch(ws_state) {
 8002d14:	4ba6      	ldr	r3, [pc, #664]	; (8002fb0 <step_washing_process+0x2a0>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b09      	cmp	r3, #9
 8002d1a:	f200 81f0 	bhi.w	80030fe <step_washing_process+0x3ee>
 8002d1e:	a201      	add	r2, pc, #4	; (adr r2, 8002d24 <step_washing_process+0x14>)
 8002d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d24:	08002d4d 	.word	0x08002d4d
 8002d28:	08002d55 	.word	0x08002d55
 8002d2c:	08002da7 	.word	0x08002da7
 8002d30:	08002e2f 	.word	0x08002e2f
 8002d34:	08002dfd 	.word	0x08002dfd
 8002d38:	08002e79 	.word	0x08002e79
 8002d3c:	08002eff 	.word	0x08002eff
 8002d40:	08002f63 	.word	0x08002f63
 8002d44:	08002ff1 	.word	0x08002ff1
 8002d48:	080030ed 	.word	0x080030ed
	        case WS_STATE_IDE:
	            // Do something when in state WS_STATE_IDE
	            ws_state = WS_STATE_START; // Example transition to next state
 8002d4c:	4b98      	ldr	r3, [pc, #608]	; (8002fb0 <step_washing_process+0x2a0>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	701a      	strb	r2, [r3, #0]
	            break;
 8002d52:	e1e1      	b.n	8003118 <step_washing_process+0x408>
	        case WS_STATE_START:
	        	show_infor_washing_step(*washing_step);
 8002d54:	4b97      	ldr	r3, [pc, #604]	; (8002fb4 <step_washing_process+0x2a4>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	4610      	mov	r0, r2
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	4611      	mov	r1, r2
 8002d60:	689c      	ldr	r4, [r3, #8]
 8002d62:	4622      	mov	r2, r4
 8002d64:	68dc      	ldr	r4, [r3, #12]
 8002d66:	4623      	mov	r3, r4
 8002d68:	f7ff ff7a 	bl	8002c60 <show_infor_washing_step>
	            LOGI("move x to %lu",system_data.flash_data.Well_position[washing_step->wells-1]);
 8002d6c:	4b91      	ldr	r3, [pc, #580]	; (8002fb4 <step_washing_process+0x2a4>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	785b      	ldrb	r3, [r3, #1]
 8002d72:	3b01      	subs	r3, #1
 8002d74:	4a90      	ldr	r2, [pc, #576]	; (8002fb8 <step_washing_process+0x2a8>)
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	498f      	ldr	r1, [pc, #572]	; (8002fbc <step_washing_process+0x2ac>)
 8002d80:	488f      	ldr	r0, [pc, #572]	; (8002fc0 <step_washing_process+0x2b0>)
 8002d82:	f00a fde7 	bl	800d954 <iprintf>
            	mt_set_target_position(&x_motor, system_data.flash_data.Well_position[washing_step->wells-1]); // m
 8002d86:	4b8b      	ldr	r3, [pc, #556]	; (8002fb4 <step_washing_process+0x2a4>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	785b      	ldrb	r3, [r3, #1]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	4a8a      	ldr	r2, [pc, #552]	; (8002fb8 <step_washing_process+0x2a8>)
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	4619      	mov	r1, r3
 8002d98:	488a      	ldr	r0, [pc, #552]	; (8002fc4 <step_washing_process+0x2b4>)
 8002d9a:	f7fe fead 	bl	8001af8 <mt_set_target_position>
	            ws_state = WS_STATE_MOVE_WELLS; // Example transition to next state
 8002d9e:	4b84      	ldr	r3, [pc, #528]	; (8002fb0 <step_washing_process+0x2a0>)
 8002da0:	2202      	movs	r2, #2
 8002da2:	701a      	strb	r2, [r3, #0]
	            break;
 8002da4:	e1b8      	b.n	8003118 <step_washing_process+0x408>
	        case WS_STATE_MOVE_WELLS:
	        	if(Mt_get_current_prosition(x_motor) == system_data.flash_data.Well_position[washing_step->wells-1])
 8002da6:	4b87      	ldr	r3, [pc, #540]	; (8002fc4 <step_washing_process+0x2b4>)
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	4b82      	ldr	r3, [pc, #520]	; (8002fb4 <step_washing_process+0x2a4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	3b01      	subs	r3, #1
 8002db2:	4981      	ldr	r1, [pc, #516]	; (8002fb8 <step_washing_process+0x2a8>)
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	440b      	add	r3, r1
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	f040 81a1 	bne.w	8003102 <step_washing_process+0x3f2>
				{
					LOGI("move x done, wait1 %ds",washing_step->wait1);
 8002dc0:	4b7c      	ldr	r3, [pc, #496]	; (8002fb4 <step_washing_process+0x2a4>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	885b      	ldrh	r3, [r3, #2]
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	497c      	ldr	r1, [pc, #496]	; (8002fbc <step_washing_process+0x2ac>)
 8002dca:	487f      	ldr	r0, [pc, #508]	; (8002fc8 <step_washing_process+0x2b8>)
 8002dcc:	f00a fdc2 	bl	800d954 <iprintf>
					old_ws_state = ws_state;
 8002dd0:	4b77      	ldr	r3, [pc, #476]	; (8002fb0 <step_washing_process+0x2a0>)
 8002dd2:	781a      	ldrb	r2, [r3, #0]
 8002dd4:	4b7d      	ldr	r3, [pc, #500]	; (8002fcc <step_washing_process+0x2bc>)
 8002dd6:	701a      	strb	r2, [r3, #0]
					ws_state = WS_STATE_WAIT;
 8002dd8:	4b75      	ldr	r3, [pc, #468]	; (8002fb0 <step_washing_process+0x2a0>)
 8002dda:	2208      	movs	r2, #8
 8002ddc:	701a      	strb	r2, [r3, #0]
					ws_time = HAL_GetTick() +  (uint32_t)washing_step->wait1 * 1000;
 8002dde:	f000 feff 	bl	8003be0 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b73      	ldr	r3, [pc, #460]	; (8002fb4 <step_washing_process+0x2a4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	885b      	ldrh	r3, [r3, #2]
 8002dea:	4619      	mov	r1, r3
 8002dec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002df0:	fb01 f303 	mul.w	r3, r1, r3
 8002df4:	4413      	add	r3, r2
 8002df6:	4a76      	ldr	r2, [pc, #472]	; (8002fd0 <step_washing_process+0x2c0>)
 8002df8:	6013      	str	r3, [r2, #0]
				}
	            break;
 8002dfa:	e182      	b.n	8003102 <step_washing_process+0x3f2>
	        case WS_STATE_FILL_WS_SOLUTION:
	            if(is_washing_solution_full())
 8002dfc:	f7ff fea8 	bl	8002b50 <is_washing_solution_full>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f000 817f 	beq.w	8003106 <step_washing_process+0x3f6>
	            {
					LOGI("Fill done,move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
 8002e08:	4b6b      	ldr	r3, [pc, #428]	; (8002fb8 <step_washing_process+0x2a8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	496b      	ldr	r1, [pc, #428]	; (8002fbc <step_washing_process+0x2ac>)
 8002e10:	4870      	ldr	r0, [pc, #448]	; (8002fd4 <step_washing_process+0x2c4>)
 8002e12:	f00a fd9f 	bl	800d954 <iprintf>
					mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 8002e16:	4b68      	ldr	r3, [pc, #416]	; (8002fb8 <step_washing_process+0x2a8>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	486e      	ldr	r0, [pc, #440]	; (8002fd8 <step_washing_process+0x2c8>)
 8002e1e:	f7fe fe6b 	bl	8001af8 <mt_set_target_position>
					ws_state = WS_STATE_Z_BOTTOM;
 8002e22:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <step_washing_process+0x2a0>)
 8002e24:	2203      	movs	r2, #3
 8002e26:	701a      	strb	r2, [r3, #0]
	            	stop_fill_washing_solution();
 8002e28:	f7ff fea4 	bl	8002b74 <stop_fill_washing_solution>
	            }
	            break;
 8002e2c:	e16b      	b.n	8003106 <step_washing_process+0x3f6>
	        case WS_STATE_Z_BOTTOM:
            	if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8002e2e:	4b6a      	ldr	r3, [pc, #424]	; (8002fd8 <step_washing_process+0x2c8>)
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	4b61      	ldr	r3, [pc, #388]	; (8002fb8 <step_washing_process+0x2a8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	f040 8167 	bne.w	800310a <step_washing_process+0x3fa>
				{
            		LOGI("move z done, wait2 %ds",washing_step->wait2);
 8002e3c:	4b5d      	ldr	r3, [pc, #372]	; (8002fb4 <step_washing_process+0x2a4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	88db      	ldrh	r3, [r3, #6]
 8002e42:	461a      	mov	r2, r3
 8002e44:	495d      	ldr	r1, [pc, #372]	; (8002fbc <step_washing_process+0x2ac>)
 8002e46:	4865      	ldr	r0, [pc, #404]	; (8002fdc <step_washing_process+0x2cc>)
 8002e48:	f00a fd84 	bl	800d954 <iprintf>
					old_ws_state = ws_state;
 8002e4c:	4b58      	ldr	r3, [pc, #352]	; (8002fb0 <step_washing_process+0x2a0>)
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	4b5e      	ldr	r3, [pc, #376]	; (8002fcc <step_washing_process+0x2bc>)
 8002e52:	701a      	strb	r2, [r3, #0]
	            	ws_time = HAL_GetTick() +  (uint32_t)washing_step->wait2 * 1000;
 8002e54:	f000 fec4 	bl	8003be0 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b56      	ldr	r3, [pc, #344]	; (8002fb4 <step_washing_process+0x2a4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	88db      	ldrh	r3, [r3, #6]
 8002e60:	4619      	mov	r1, r3
 8002e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e66:	fb01 f303 	mul.w	r3, r1, r3
 8002e6a:	4413      	add	r3, r2
 8002e6c:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <step_washing_process+0x2c0>)
 8002e6e:	6013      	str	r3, [r2, #0]
		            ws_state = WS_STATE_WAIT; // Example transition to next state
 8002e70:	4b4f      	ldr	r3, [pc, #316]	; (8002fb0 <step_washing_process+0x2a0>)
 8002e72:	2208      	movs	r2, #8
 8002e74:	701a      	strb	r2, [r3, #0]

				}
	            break;
 8002e76:	e148      	b.n	800310a <step_washing_process+0x3fa>
	        case WS_STATE_SHAKE:
                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos - 1000)
 8002e78:	4b57      	ldr	r3, [pc, #348]	; (8002fd8 <step_washing_process+0x2c8>)
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	4b4e      	ldr	r3, [pc, #312]	; (8002fb8 <step_washing_process+0x2a8>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002e84:	429a      	cmp	r2, r3
 8002e86:	d105      	bne.n	8002e94 <step_washing_process+0x184>
            	{
                	mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos);
 8002e88:	4b4b      	ldr	r3, [pc, #300]	; (8002fb8 <step_washing_process+0x2a8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	4852      	ldr	r0, [pc, #328]	; (8002fd8 <step_washing_process+0x2c8>)
 8002e90:	f7fe fe32 	bl	8001af8 <mt_set_target_position>
            	}
                if(Mt_get_current_prosition(z_motor) == system_data.flash_data.Z_bottom_pos)
 8002e94:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <step_washing_process+0x2c8>)
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <step_washing_process+0x2a8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	f040 8136 	bne.w	800310e <step_washing_process+0x3fe>
				{
                	if(HAL_GetTick() > ws_time)
 8002ea2:	f000 fe9d 	bl	8003be0 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	4b49      	ldr	r3, [pc, #292]	; (8002fd0 <step_washing_process+0x2c0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d91d      	bls.n	8002eec <step_washing_process+0x1dc>
                	{
                		LOGI("shake done, wait4 : %d",washing_step->wait4);
 8002eb0:	4b40      	ldr	r3, [pc, #256]	; (8002fb4 <step_washing_process+0x2a4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	895b      	ldrh	r3, [r3, #10]
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	4940      	ldr	r1, [pc, #256]	; (8002fbc <step_washing_process+0x2ac>)
 8002eba:	4849      	ldr	r0, [pc, #292]	; (8002fe0 <step_washing_process+0x2d0>)
 8002ebc:	f00a fd4a 	bl	800d954 <iprintf>
                		old_ws_state = ws_state;
 8002ec0:	4b3b      	ldr	r3, [pc, #236]	; (8002fb0 <step_washing_process+0x2a0>)
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <step_washing_process+0x2bc>)
 8002ec6:	701a      	strb	r2, [r3, #0]
    	                ws_time = HAL_GetTick() +  (uint32_t)washing_step->wait4 * 1000;
 8002ec8:	f000 fe8a 	bl	8003be0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <step_washing_process+0x2a4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	895b      	ldrh	r3, [r3, #10]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eda:	fb01 f303 	mul.w	r3, r1, r3
 8002ede:	4413      	add	r3, r2
 8002ee0:	4a3b      	ldr	r2, [pc, #236]	; (8002fd0 <step_washing_process+0x2c0>)
 8002ee2:	6013      	str	r3, [r2, #0]
    	                ws_state = WS_STATE_WAIT;
 8002ee4:	4b32      	ldr	r3, [pc, #200]	; (8002fb0 <step_washing_process+0x2a0>)
 8002ee6:	2208      	movs	r2, #8
 8002ee8:	701a      	strb	r2, [r3, #0]
                	else
                	{
                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
                	}
				}
	            break;
 8002eea:	e110      	b.n	800310e <step_washing_process+0x3fe>
                		mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 8002eec:	4b32      	ldr	r3, [pc, #200]	; (8002fb8 <step_washing_process+0x2a8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4838      	ldr	r0, [pc, #224]	; (8002fd8 <step_washing_process+0x2c8>)
 8002ef8:	f7fe fdfe 	bl	8001af8 <mt_set_target_position>
	            break;
 8002efc:	e107      	b.n	800310e <step_washing_process+0x3fe>
	        case WS_STATE_Z_TOP:
            	if(Mt_get_current_prosition(z_motor) == 0){
 8002efe:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <step_washing_process+0x2c8>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	f040 8105 	bne.w	8003112 <step_washing_process+0x402>
            		LOGI("ztop done, start drain ws solution");
 8002f08:	492c      	ldr	r1, [pc, #176]	; (8002fbc <step_washing_process+0x2ac>)
 8002f0a:	4836      	ldr	r0, [pc, #216]	; (8002fe4 <step_washing_process+0x2d4>)
 8002f0c:	f00a fd22 	bl	800d954 <iprintf>
            		old_ws_state = ws_state;
 8002f10:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <step_washing_process+0x2a0>)
 8002f12:	781a      	ldrb	r2, [r3, #0]
 8002f14:	4b2d      	ldr	r3, [pc, #180]	; (8002fcc <step_washing_process+0x2bc>)
 8002f16:	701a      	strb	r2, [r3, #0]

//					ws_time = HAL_GetTick() +  (uint32_t)step_para.timing[4] * 1000;
            		if(washing_step->drain)
 8002f18:	4b26      	ldr	r3, [pc, #152]	; (8002fb4 <step_washing_process+0x2a4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	899b      	ldrh	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <step_washing_process+0x21e>
            		{
						start_drain_washing_solution();
 8002f22:	f7ff fe3b 	bl	8002b9c <start_drain_washing_solution>
						ws_state = WS_STATE_DRAIN_WS_SOLUTION;
 8002f26:	4b22      	ldr	r3, [pc, #136]	; (8002fb0 <step_washing_process+0x2a0>)
 8002f28:	2207      	movs	r2, #7
 8002f2a:	701a      	strb	r2, [r3, #0]
            			old_ws_state = ws_state;
						ws_time = HAL_GetTick() +  (uint32_t)washing_step->wait5 * 1000;
						ws_state = WS_STATE_WAIT; // Example transition to next state
            		}
				}
	            break;
 8002f2c:	e0f1      	b.n	8003112 <step_washing_process+0x402>
            			LOGI("skip drain fill solution ");
 8002f2e:	4923      	ldr	r1, [pc, #140]	; (8002fbc <step_washing_process+0x2ac>)
 8002f30:	482d      	ldr	r0, [pc, #180]	; (8002fe8 <step_washing_process+0x2d8>)
 8002f32:	f00a fd0f 	bl	800d954 <iprintf>
            			old_ws_state = ws_state;
 8002f36:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <step_washing_process+0x2a0>)
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	4b24      	ldr	r3, [pc, #144]	; (8002fcc <step_washing_process+0x2bc>)
 8002f3c:	701a      	strb	r2, [r3, #0]
						ws_time = HAL_GetTick() +  (uint32_t)washing_step->wait5 * 1000;
 8002f3e:	f000 fe4f 	bl	8003be0 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <step_washing_process+0x2a4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	89db      	ldrh	r3, [r3, #14]
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	4a1e      	ldr	r2, [pc, #120]	; (8002fd0 <step_washing_process+0x2c0>)
 8002f58:	6013      	str	r3, [r2, #0]
						ws_state = WS_STATE_WAIT; // Example transition to next state
 8002f5a:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <step_washing_process+0x2a0>)
 8002f5c:	2208      	movs	r2, #8
 8002f5e:	701a      	strb	r2, [r3, #0]
	            break;
 8002f60:	e0d7      	b.n	8003112 <step_washing_process+0x402>
	        case WS_STATE_DRAIN_WS_SOLUTION:
	            if(is_washing_solution_empty())
 8002f62:	f7ff fe27 	bl	8002bb4 <is_washing_solution_empty>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80d4 	beq.w	8003116 <step_washing_process+0x406>
	            {
	            	LOGI("solution empty,wait5 :%ds",washing_step->wait5);
 8002f6e:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <step_washing_process+0x2a4>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	89db      	ldrh	r3, [r3, #14]
 8002f74:	461a      	mov	r2, r3
 8002f76:	4911      	ldr	r1, [pc, #68]	; (8002fbc <step_washing_process+0x2ac>)
 8002f78:	481c      	ldr	r0, [pc, #112]	; (8002fec <step_washing_process+0x2dc>)
 8002f7a:	f00a fceb 	bl	800d954 <iprintf>
	            	stop_drain_washing_solution();
 8002f7e:	f7ff fe2b 	bl	8002bd8 <stop_drain_washing_solution>
	            	old_ws_state = ws_state;
 8002f82:	4b0b      	ldr	r3, [pc, #44]	; (8002fb0 <step_washing_process+0x2a0>)
 8002f84:	781a      	ldrb	r2, [r3, #0]
 8002f86:	4b11      	ldr	r3, [pc, #68]	; (8002fcc <step_washing_process+0x2bc>)
 8002f88:	701a      	strb	r2, [r3, #0]
	            	ws_time = HAL_GetTick() +  (uint32_t)washing_step->wait5 * 1000;
 8002f8a:	f000 fe29 	bl	8003be0 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	4b08      	ldr	r3, [pc, #32]	; (8002fb4 <step_washing_process+0x2a4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	89db      	ldrh	r3, [r3, #14]
 8002f96:	4619      	mov	r1, r3
 8002f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <step_washing_process+0x2c0>)
 8002fa4:	6013      	str	r3, [r2, #0]
	            	ws_state = WS_STATE_WAIT; // Example transition to next state isn't active
 8002fa6:	4b02      	ldr	r3, [pc, #8]	; (8002fb0 <step_washing_process+0x2a0>)
 8002fa8:	2208      	movs	r2, #8
 8002faa:	701a      	strb	r2, [r3, #0]
	            }
	            break;
 8002fac:	e0b3      	b.n	8003116 <step_washing_process+0x406>
 8002fae:	bf00      	nop
 8002fb0:	20002b44 	.word	0x20002b44
 8002fb4:	20002b40 	.word	0x20002b40
 8002fb8:	2000017c 	.word	0x2000017c
 8002fbc:	0800f354 	.word	0x0800f354
 8002fc0:	0800f5a0 	.word	0x0800f5a0
 8002fc4:	20002abc 	.word	0x20002abc
 8002fc8:	0800f5b8 	.word	0x0800f5b8
 8002fcc:	20002b45 	.word	0x20002b45
 8002fd0:	20002b48 	.word	0x20002b48
 8002fd4:	0800f5d8 	.word	0x0800f5d8
 8002fd8:	20002aec 	.word	0x20002aec
 8002fdc:	0800f600 	.word	0x0800f600
 8002fe0:	0800f620 	.word	0x0800f620
 8002fe4:	0800f640 	.word	0x0800f640
 8002fe8:	0800f66c 	.word	0x0800f66c
 8002fec:	0800f690 	.word	0x0800f690
	        case WS_STATE_WAIT:
	            if(HAL_GetTick() > ws_time)
 8002ff0:	f000 fdf6 	bl	8003be0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	4b4a      	ldr	r3, [pc, #296]	; (8003120 <step_washing_process+0x410>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d972      	bls.n	80030e4 <step_washing_process+0x3d4>
	            {
	            	switch (old_ws_state) {
 8002ffe:	4b49      	ldr	r3, [pc, #292]	; (8003124 <step_washing_process+0x414>)
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	3b02      	subs	r3, #2
 8003004:	2b05      	cmp	r3, #5
 8003006:	d86f      	bhi.n	80030e8 <step_washing_process+0x3d8>
 8003008:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <step_washing_process+0x300>)
 800300a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300e:	bf00      	nop
 8003010:	08003029 	.word	0x08003029
 8003014:	08003071 	.word	0x08003071
 8003018:	080030e9 	.word	0x080030e9
 800301c:	080030bd 	.word	0x080030bd
 8003020:	080030d5 	.word	0x080030d5
 8003024:	080030d5 	.word	0x080030d5
						case WS_STATE_MOVE_WELLS:
							LOGI("wait1 done");
 8003028:	493f      	ldr	r1, [pc, #252]	; (8003128 <step_washing_process+0x418>)
 800302a:	4840      	ldr	r0, [pc, #256]	; (800312c <step_washing_process+0x41c>)
 800302c:	f00a fc92 	bl	800d954 <iprintf>
							if(washing_step->fill)
 8003030:	4b3f      	ldr	r3, [pc, #252]	; (8003130 <step_washing_process+0x420>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	889b      	ldrh	r3, [r3, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d005      	beq.n	8003046 <step_washing_process+0x336>
							{
								ws_state = WS_STATE_FILL_WS_SOLUTION;
 800303a:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <step_washing_process+0x424>)
 800303c:	2204      	movs	r2, #4
 800303e:	701a      	strb	r2, [r3, #0]
								start_fill_washing_solution();
 8003040:	f7ff fd72 	bl	8002b28 <start_fill_washing_solution>
								LOGI("skip fill washing solution");
								LOGI("move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
								mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
								ws_state= WS_STATE_Z_BOTTOM;
							}
							break;
 8003044:	e051      	b.n	80030ea <step_washing_process+0x3da>
								LOGI("skip fill washing solution");
 8003046:	4938      	ldr	r1, [pc, #224]	; (8003128 <step_washing_process+0x418>)
 8003048:	483b      	ldr	r0, [pc, #236]	; (8003138 <step_washing_process+0x428>)
 800304a:	f00a fc83 	bl	800d954 <iprintf>
								LOGI("move z to bottom %lu",system_data.flash_data.Z_bottom_pos);
 800304e:	4b3b      	ldr	r3, [pc, #236]	; (800313c <step_washing_process+0x42c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	461a      	mov	r2, r3
 8003054:	4934      	ldr	r1, [pc, #208]	; (8003128 <step_washing_process+0x418>)
 8003056:	483a      	ldr	r0, [pc, #232]	; (8003140 <step_washing_process+0x430>)
 8003058:	f00a fc7c 	bl	800d954 <iprintf>
								mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos); //@TODO
 800305c:	4b37      	ldr	r3, [pc, #220]	; (800313c <step_washing_process+0x42c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4619      	mov	r1, r3
 8003062:	4838      	ldr	r0, [pc, #224]	; (8003144 <step_washing_process+0x434>)
 8003064:	f7fe fd48 	bl	8001af8 <mt_set_target_position>
								ws_state= WS_STATE_Z_BOTTOM;
 8003068:	4b32      	ldr	r3, [pc, #200]	; (8003134 <step_washing_process+0x424>)
 800306a:	2203      	movs	r2, #3
 800306c:	701a      	strb	r2, [r3, #0]
							break;
 800306e:	e03c      	b.n	80030ea <step_washing_process+0x3da>
						case WS_STATE_Z_BOTTOM:
							LOGI("wait2 done");
 8003070:	492d      	ldr	r1, [pc, #180]	; (8003128 <step_washing_process+0x418>)
 8003072:	4835      	ldr	r0, [pc, #212]	; (8003148 <step_washing_process+0x438>)
 8003074:	f00a fc6e 	bl	800d954 <iprintf>
							mt_set_target_position(&z_motor,system_data.flash_data.Z_bottom_pos-1000);
 8003078:	4b30      	ldr	r3, [pc, #192]	; (800313c <step_washing_process+0x42c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8003080:	4619      	mov	r1, r3
 8003082:	4830      	ldr	r0, [pc, #192]	; (8003144 <step_washing_process+0x434>)
 8003084:	f7fe fd38 	bl	8001af8 <mt_set_target_position>
							LOGI("start shake in %ds",washing_step->shake);
 8003088:	4b29      	ldr	r3, [pc, #164]	; (8003130 <step_washing_process+0x420>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	891b      	ldrh	r3, [r3, #8]
 800308e:	461a      	mov	r2, r3
 8003090:	4925      	ldr	r1, [pc, #148]	; (8003128 <step_washing_process+0x418>)
 8003092:	482e      	ldr	r0, [pc, #184]	; (800314c <step_washing_process+0x43c>)
 8003094:	f00a fc5e 	bl	800d954 <iprintf>
							ws_time = HAL_GetTick() +  (uint32_t)washing_step->shake * 1000;
 8003098:	f000 fda2 	bl	8003be0 <HAL_GetTick>
 800309c:	4602      	mov	r2, r0
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <step_washing_process+0x420>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	891b      	ldrh	r3, [r3, #8]
 80030a4:	4619      	mov	r1, r3
 80030a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	4a1b      	ldr	r2, [pc, #108]	; (8003120 <step_washing_process+0x410>)
 80030b2:	6013      	str	r3, [r2, #0]

							ws_state = WS_STATE_SHAKE;
 80030b4:	4b1f      	ldr	r3, [pc, #124]	; (8003134 <step_washing_process+0x424>)
 80030b6:	2205      	movs	r2, #5
 80030b8:	701a      	strb	r2, [r3, #0]
							break;
 80030ba:	e016      	b.n	80030ea <step_washing_process+0x3da>
						case WS_STATE_SHAKE:
							LOGI("wait4 done, move z to top");
 80030bc:	491a      	ldr	r1, [pc, #104]	; (8003128 <step_washing_process+0x418>)
 80030be:	4824      	ldr	r0, [pc, #144]	; (8003150 <step_washing_process+0x440>)
 80030c0:	f00a fc48 	bl	800d954 <iprintf>
							mt_set_target_position(&z_motor,0);
 80030c4:	2100      	movs	r1, #0
 80030c6:	481f      	ldr	r0, [pc, #124]	; (8003144 <step_washing_process+0x434>)
 80030c8:	f7fe fd16 	bl	8001af8 <mt_set_target_position>
							ws_state = WS_STATE_Z_TOP;
 80030cc:	4b19      	ldr	r3, [pc, #100]	; (8003134 <step_washing_process+0x424>)
 80030ce:	2206      	movs	r2, #6
 80030d0:	701a      	strb	r2, [r3, #0]
							break;
 80030d2:	e00a      	b.n	80030ea <step_washing_process+0x3da>
						case WS_STATE_Z_TOP:
						case WS_STATE_DRAIN_WS_SOLUTION:
							LOGI("wait5 done");
 80030d4:	4914      	ldr	r1, [pc, #80]	; (8003128 <step_washing_process+0x418>)
 80030d6:	481f      	ldr	r0, [pc, #124]	; (8003154 <step_washing_process+0x444>)
 80030d8:	f00a fc3c 	bl	800d954 <iprintf>
							ws_state = WS_STATE_Z_FINISH;
 80030dc:	4b15      	ldr	r3, [pc, #84]	; (8003134 <step_washing_process+0x424>)
 80030de:	2209      	movs	r2, #9
 80030e0:	701a      	strb	r2, [r3, #0]
							break;
 80030e2:	e002      	b.n	80030ea <step_washing_process+0x3da>
						default:
							break;
					}
	            }
 80030e4:	bf00      	nop
 80030e6:	e017      	b.n	8003118 <step_washing_process+0x408>
							break;
 80030e8:	bf00      	nop
	            break;
 80030ea:	e015      	b.n	8003118 <step_washing_process+0x408>
	        case WS_STATE_Z_FINISH:
	        	LOGI("-------------------------------washing step done----------------------");
 80030ec:	490e      	ldr	r1, [pc, #56]	; (8003128 <step_washing_process+0x418>)
 80030ee:	481a      	ldr	r0, [pc, #104]	; (8003158 <step_washing_process+0x448>)
 80030f0:	f00a fc30 	bl	800d954 <iprintf>
	            ws_state = WS_STATE_IDE;
 80030f4:	4b0f      	ldr	r3, [pc, #60]	; (8003134 <step_washing_process+0x424>)
 80030f6:	2200      	movs	r2, #0
 80030f8:	701a      	strb	r2, [r3, #0]
	        	return 1;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e00d      	b.n	800311a <step_washing_process+0x40a>
	            break;
	        default:
	            // Handle an invalid state
	            break;
 80030fe:	bf00      	nop
 8003100:	e00a      	b.n	8003118 <step_washing_process+0x408>
	            break;
 8003102:	bf00      	nop
 8003104:	e008      	b.n	8003118 <step_washing_process+0x408>
	            break;
 8003106:	bf00      	nop
 8003108:	e006      	b.n	8003118 <step_washing_process+0x408>
	            break;
 800310a:	bf00      	nop
 800310c:	e004      	b.n	8003118 <step_washing_process+0x408>
	            break;
 800310e:	bf00      	nop
 8003110:	e002      	b.n	8003118 <step_washing_process+0x408>
	            break;
 8003112:	bf00      	nop
 8003114:	e000      	b.n	8003118 <step_washing_process+0x408>
	            break;
 8003116:	bf00      	nop
	    }
	    return 0;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	bd98      	pop	{r3, r4, r7, pc}
 800311e:	bf00      	nop
 8003120:	20002b48 	.word	0x20002b48
 8003124:	20002b45 	.word	0x20002b45
 8003128:	0800f354 	.word	0x0800f354
 800312c:	0800f6b4 	.word	0x0800f6b4
 8003130:	20002b40 	.word	0x20002b40
 8003134:	20002b44 	.word	0x20002b44
 8003138:	0800f6c8 	.word	0x0800f6c8
 800313c:	2000017c 	.word	0x2000017c
 8003140:	0800f6ec 	.word	0x0800f6ec
 8003144:	20002aec 	.word	0x20002aec
 8003148:	0800f708 	.word	0x0800f708
 800314c:	0800f71c 	.word	0x0800f71c
 8003150:	0800f738 	.word	0x0800f738
 8003154:	0800f75c 	.word	0x0800f75c
 8003158:	0800f770 	.word	0x0800f770

0800315c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	607b      	str	r3, [r7, #4]
 8003166:	4b10      	ldr	r3, [pc, #64]	; (80031a8 <HAL_MspInit+0x4c>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	4a0f      	ldr	r2, [pc, #60]	; (80031a8 <HAL_MspInit+0x4c>)
 800316c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003170:	6453      	str	r3, [r2, #68]	; 0x44
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <HAL_MspInit+0x4c>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317a:	607b      	str	r3, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800317e:	2300      	movs	r3, #0
 8003180:	603b      	str	r3, [r7, #0]
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_MspInit+0x4c>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003186:	4a08      	ldr	r2, [pc, #32]	; (80031a8 <HAL_MspInit+0x4c>)
 8003188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318c:	6413      	str	r3, [r2, #64]	; 0x40
 800318e:	4b06      	ldr	r3, [pc, #24]	; (80031a8 <HAL_MspInit+0x4c>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003196:	603b      	str	r3, [r7, #0]
 8003198:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800319a:	2007      	movs	r0, #7
 800319c:	f000 fe20 	bl	8003de0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40023800 	.word	0x40023800

080031ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031b4:	f107 0314 	add.w	r3, r7, #20
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	609a      	str	r2, [r3, #8]
 80031c0:	60da      	str	r2, [r3, #12]
 80031c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a19      	ldr	r2, [pc, #100]	; (8003230 <HAL_I2C_MspInit+0x84>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d12c      	bne.n	8003228 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_I2C_MspInit+0x88>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	4a17      	ldr	r2, [pc, #92]	; (8003234 <HAL_I2C_MspInit+0x88>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	6313      	str	r3, [r2, #48]	; 0x30
 80031de:	4b15      	ldr	r3, [pc, #84]	; (8003234 <HAL_I2C_MspInit+0x88>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	613b      	str	r3, [r7, #16]
 80031e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80031ea:	f44f 7310 	mov.w	r3, #576	; 0x240
 80031ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031f0:	2312      	movs	r3, #18
 80031f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80031f4:	2301      	movs	r3, #1
 80031f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f8:	2300      	movs	r3, #0
 80031fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031fc:	2304      	movs	r3, #4
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003200:	f107 0314 	add.w	r3, r7, #20
 8003204:	4619      	mov	r1, r3
 8003206:	480c      	ldr	r0, [pc, #48]	; (8003238 <HAL_I2C_MspInit+0x8c>)
 8003208:	f001 fc2c 	bl	8004a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800320c:	2300      	movs	r3, #0
 800320e:	60fb      	str	r3, [r7, #12]
 8003210:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_I2C_MspInit+0x88>)
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	4a07      	ldr	r2, [pc, #28]	; (8003234 <HAL_I2C_MspInit+0x88>)
 8003216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800321a:	6413      	str	r3, [r2, #64]	; 0x40
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_I2C_MspInit+0x88>)
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003228:	bf00      	nop
 800322a:	3728      	adds	r7, #40	; 0x28
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40005400 	.word	0x40005400
 8003234:	40023800 	.word	0x40023800
 8003238:	40020400 	.word	0x40020400

0800323c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <HAL_SPI_MspInit+0x84>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d12b      	bne.n	80032b6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <HAL_SPI_MspInit+0x88>)
 8003264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003266:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <HAL_SPI_MspInit+0x88>)
 8003268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800326c:	6453      	str	r3, [r2, #68]	; 0x44
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <HAL_SPI_MspInit+0x88>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_SPI_MspInit+0x88>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	4a10      	ldr	r2, [pc, #64]	; (80032c4 <HAL_SPI_MspInit+0x88>)
 8003284:	f043 0301 	orr.w	r3, r3, #1
 8003288:	6313      	str	r3, [r2, #48]	; 0x30
 800328a:	4b0e      	ldr	r3, [pc, #56]	; (80032c4 <HAL_SPI_MspInit+0x88>)
 800328c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
 8003294:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003296:	23e0      	movs	r3, #224	; 0xe0
 8003298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	2300      	movs	r3, #0
 80032a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80032a6:	2305      	movs	r3, #5
 80032a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032aa:	f107 0314 	add.w	r3, r7, #20
 80032ae:	4619      	mov	r1, r3
 80032b0:	4805      	ldr	r0, [pc, #20]	; (80032c8 <HAL_SPI_MspInit+0x8c>)
 80032b2:	f001 fbd7 	bl	8004a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80032b6:	bf00      	nop
 80032b8:	3728      	adds	r7, #40	; 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40013000 	.word	0x40013000
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020000 	.word	0x40020000

080032cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a40      	ldr	r2, [pc, #256]	; (80033dc <HAL_TIM_Base_MspInit+0x110>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d13e      	bne.n	800335c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
 80032e2:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <HAL_TIM_Base_MspInit+0x114>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	4a3e      	ldr	r2, [pc, #248]	; (80033e0 <HAL_TIM_Base_MspInit+0x114>)
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	6453      	str	r3, [r2, #68]	; 0x44
 80032ee:	4b3c      	ldr	r3, [pc, #240]	; (80033e0 <HAL_TIM_Base_MspInit+0x114>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 80032fa:	4b3a      	ldr	r3, [pc, #232]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 80032fc:	4a3a      	ldr	r2, [pc, #232]	; (80033e8 <HAL_TIM_Base_MspInit+0x11c>)
 80032fe:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8003300:	4b38      	ldr	r3, [pc, #224]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 8003302:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8003306:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003308:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 800330a:	2200      	movs	r2, #0
 800330c:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800330e:	4b35      	ldr	r3, [pc, #212]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 8003310:	2200      	movs	r2, #0
 8003312:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003314:	4b33      	ldr	r3, [pc, #204]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 8003316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800331a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800331c:	4b31      	ldr	r3, [pc, #196]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 800331e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003322:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003324:	4b2f      	ldr	r3, [pc, #188]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 8003326:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800332a:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 800332c:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 800332e:	2200      	movs	r2, #0
 8003330:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003332:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 8003334:	2200      	movs	r2, #0
 8003336:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003338:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 800333a:	2200      	movs	r2, #0
 800333c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 800333e:	4829      	ldr	r0, [pc, #164]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 8003340:	f000 fd90 	bl	8003e64 <HAL_DMA_Init>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800334a:	f7fe fbbf 	bl	8001acc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a24      	ldr	r2, [pc, #144]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 8003352:	625a      	str	r2, [r3, #36]	; 0x24
 8003354:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <HAL_TIM_Base_MspInit+0x118>)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800335a:	e03a      	b.n	80033d2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003364:	d10e      	bne.n	8003384 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003366:	2300      	movs	r3, #0
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	4b1d      	ldr	r3, [pc, #116]	; (80033e0 <HAL_TIM_Base_MspInit+0x114>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	4a1c      	ldr	r2, [pc, #112]	; (80033e0 <HAL_TIM_Base_MspInit+0x114>)
 8003370:	f043 0301 	orr.w	r3, r3, #1
 8003374:	6413      	str	r3, [r2, #64]	; 0x40
 8003376:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_TIM_Base_MspInit+0x114>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	693b      	ldr	r3, [r7, #16]
}
 8003382:	e026      	b.n	80033d2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_TIM_Base_MspInit+0x120>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d10e      	bne.n	80033ac <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800338e:	2300      	movs	r3, #0
 8003390:	60fb      	str	r3, [r7, #12]
 8003392:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_TIM_Base_MspInit+0x114>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	4a12      	ldr	r2, [pc, #72]	; (80033e0 <HAL_TIM_Base_MspInit+0x114>)
 8003398:	f043 0302 	orr.w	r3, r3, #2
 800339c:	6413      	str	r3, [r2, #64]	; 0x40
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <HAL_TIM_Base_MspInit+0x114>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	68fb      	ldr	r3, [r7, #12]
}
 80033aa:	e012      	b.n	80033d2 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a0f      	ldr	r2, [pc, #60]	; (80033f0 <HAL_TIM_Base_MspInit+0x124>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d10d      	bne.n	80033d2 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80033b6:	2300      	movs	r3, #0
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_TIM_Base_MspInit+0x114>)
 80033bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033be:	4a08      	ldr	r2, [pc, #32]	; (80033e0 <HAL_TIM_Base_MspInit+0x114>)
 80033c0:	f043 0308 	orr.w	r3, r3, #8
 80033c4:	6413      	str	r3, [r2, #64]	; 0x40
 80033c6:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <HAL_TIM_Base_MspInit+0x114>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	f003 0308 	and.w	r3, r3, #8
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
}
 80033d2:	bf00      	nop
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40010000 	.word	0x40010000
 80033e0:	40023800 	.word	0x40023800
 80033e4:	20001598 	.word	0x20001598
 80033e8:	40026428 	.word	0x40026428
 80033ec:	40000400 	.word	0x40000400
 80033f0:	40000c00 	.word	0x40000c00

080033f4 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a0b      	ldr	r2, [pc, #44]	; (8003430 <HAL_TIM_OnePulse_MspInit+0x3c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10d      	bne.n	8003422 <HAL_TIM_OnePulse_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003406:	2300      	movs	r3, #0
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <HAL_TIM_OnePulse_MspInit+0x40>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	4a09      	ldr	r2, [pc, #36]	; (8003434 <HAL_TIM_OnePulse_MspInit+0x40>)
 8003410:	f043 0302 	orr.w	r3, r3, #2
 8003414:	6453      	str	r3, [r2, #68]	; 0x44
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <HAL_TIM_OnePulse_MspInit+0x40>)
 8003418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40010400 	.word	0x40010400
 8003434:	40023800 	.word	0x40023800

08003438 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	2200      	movs	r2, #0
 8003446:	601a      	str	r2, [r3, #0]
 8003448:	605a      	str	r2, [r3, #4]
 800344a:	609a      	str	r2, [r3, #8]
 800344c:	60da      	str	r2, [r3, #12]
 800344e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <HAL_TIM_MspPostInit+0xb0>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d11f      	bne.n	800349a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800345a:	2300      	movs	r3, #0
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	4b23      	ldr	r3, [pc, #140]	; (80034ec <HAL_TIM_MspPostInit+0xb4>)
 8003460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003462:	4a22      	ldr	r2, [pc, #136]	; (80034ec <HAL_TIM_MspPostInit+0xb4>)
 8003464:	f043 0310 	orr.w	r3, r3, #16
 8003468:	6313      	str	r3, [r2, #48]	; 0x30
 800346a:	4b20      	ldr	r3, [pc, #128]	; (80034ec <HAL_TIM_MspPostInit+0xb4>)
 800346c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	613b      	str	r3, [r7, #16]
 8003474:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003476:	f44f 7300 	mov.w	r3, #512	; 0x200
 800347a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347c:	2302      	movs	r3, #2
 800347e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003480:	2301      	movs	r3, #1
 8003482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003484:	2303      	movs	r3, #3
 8003486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003488:	2301      	movs	r3, #1
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	4619      	mov	r1, r3
 8003492:	4817      	ldr	r0, [pc, #92]	; (80034f0 <HAL_TIM_MspPostInit+0xb8>)
 8003494:	f001 fae6 	bl	8004a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003498:	e022      	b.n	80034e0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a15      	ldr	r2, [pc, #84]	; (80034f4 <HAL_TIM_MspPostInit+0xbc>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d11d      	bne.n	80034e0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	4b10      	ldr	r3, [pc, #64]	; (80034ec <HAL_TIM_MspPostInit+0xb4>)
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	4a0f      	ldr	r2, [pc, #60]	; (80034ec <HAL_TIM_MspPostInit+0xb4>)
 80034ae:	f043 0304 	orr.w	r3, r3, #4
 80034b2:	6313      	str	r3, [r2, #48]	; 0x30
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <HAL_TIM_MspPostInit+0xb4>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	60fb      	str	r3, [r7, #12]
 80034be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80034c0:	2340      	movs	r3, #64	; 0x40
 80034c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c4:	2302      	movs	r3, #2
 80034c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034c8:	2301      	movs	r3, #1
 80034ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034cc:	2300      	movs	r3, #0
 80034ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80034d0:	2302      	movs	r3, #2
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	4619      	mov	r1, r3
 80034da:	4807      	ldr	r0, [pc, #28]	; (80034f8 <HAL_TIM_MspPostInit+0xc0>)
 80034dc:	f001 fac2 	bl	8004a64 <HAL_GPIO_Init>
}
 80034e0:	bf00      	nop
 80034e2:	3728      	adds	r7, #40	; 0x28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40010000 	.word	0x40010000
 80034ec:	40023800 	.word	0x40023800
 80034f0:	40021000 	.word	0x40021000
 80034f4:	40000400 	.word	0x40000400
 80034f8:	40020800 	.word	0x40020800

080034fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b08a      	sub	sp, #40	; 0x28
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	f107 0314 	add.w	r3, r7, #20
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	60da      	str	r2, [r3, #12]
 8003512:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a4b      	ldr	r2, [pc, #300]	; (8003648 <HAL_UART_MspInit+0x14c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	f040 8090 	bne.w	8003640 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003520:	2300      	movs	r3, #0
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	4b49      	ldr	r3, [pc, #292]	; (800364c <HAL_UART_MspInit+0x150>)
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	4a48      	ldr	r2, [pc, #288]	; (800364c <HAL_UART_MspInit+0x150>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352e:	6413      	str	r3, [r2, #64]	; 0x40
 8003530:	4b46      	ldr	r3, [pc, #280]	; (800364c <HAL_UART_MspInit+0x150>)
 8003532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800353c:	2300      	movs	r3, #0
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	4b42      	ldr	r3, [pc, #264]	; (800364c <HAL_UART_MspInit+0x150>)
 8003542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003544:	4a41      	ldr	r2, [pc, #260]	; (800364c <HAL_UART_MspInit+0x150>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6313      	str	r3, [r2, #48]	; 0x30
 800354c:	4b3f      	ldr	r3, [pc, #252]	; (800364c <HAL_UART_MspInit+0x150>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003558:	230c      	movs	r3, #12
 800355a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800355c:	2302      	movs	r3, #2
 800355e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003560:	2301      	movs	r3, #1
 8003562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003564:	2303      	movs	r3, #3
 8003566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003568:	2307      	movs	r3, #7
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800356c:	f107 0314 	add.w	r3, r7, #20
 8003570:	4619      	mov	r1, r3
 8003572:	4837      	ldr	r0, [pc, #220]	; (8003650 <HAL_UART_MspInit+0x154>)
 8003574:	f001 fa76 	bl	8004a64 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003578:	4b36      	ldr	r3, [pc, #216]	; (8003654 <HAL_UART_MspInit+0x158>)
 800357a:	4a37      	ldr	r2, [pc, #220]	; (8003658 <HAL_UART_MspInit+0x15c>)
 800357c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800357e:	4b35      	ldr	r3, [pc, #212]	; (8003654 <HAL_UART_MspInit+0x158>)
 8003580:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003584:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003586:	4b33      	ldr	r3, [pc, #204]	; (8003654 <HAL_UART_MspInit+0x158>)
 8003588:	2240      	movs	r2, #64	; 0x40
 800358a:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800358c:	4b31      	ldr	r3, [pc, #196]	; (8003654 <HAL_UART_MspInit+0x158>)
 800358e:	2200      	movs	r2, #0
 8003590:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003592:	4b30      	ldr	r3, [pc, #192]	; (8003654 <HAL_UART_MspInit+0x158>)
 8003594:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003598:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800359a:	4b2e      	ldr	r3, [pc, #184]	; (8003654 <HAL_UART_MspInit+0x158>)
 800359c:	2200      	movs	r2, #0
 800359e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035a0:	4b2c      	ldr	r3, [pc, #176]	; (8003654 <HAL_UART_MspInit+0x158>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80035a6:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <HAL_UART_MspInit+0x158>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035ac:	4b29      	ldr	r3, [pc, #164]	; (8003654 <HAL_UART_MspInit+0x158>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035b2:	4b28      	ldr	r3, [pc, #160]	; (8003654 <HAL_UART_MspInit+0x158>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80035b8:	4826      	ldr	r0, [pc, #152]	; (8003654 <HAL_UART_MspInit+0x158>)
 80035ba:	f000 fc53 	bl	8003e64 <HAL_DMA_Init>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80035c4:	f7fe fa82 	bl	8001acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a22      	ldr	r2, [pc, #136]	; (8003654 <HAL_UART_MspInit+0x158>)
 80035cc:	635a      	str	r2, [r3, #52]	; 0x34
 80035ce:	4a21      	ldr	r2, [pc, #132]	; (8003654 <HAL_UART_MspInit+0x158>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80035d4:	4b21      	ldr	r3, [pc, #132]	; (800365c <HAL_UART_MspInit+0x160>)
 80035d6:	4a22      	ldr	r2, [pc, #136]	; (8003660 <HAL_UART_MspInit+0x164>)
 80035d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80035da:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_UART_MspInit+0x160>)
 80035dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035e0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80035e2:	4b1e      	ldr	r3, [pc, #120]	; (800365c <HAL_UART_MspInit+0x160>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80035e8:	4b1c      	ldr	r3, [pc, #112]	; (800365c <HAL_UART_MspInit+0x160>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035ee:	4b1b      	ldr	r3, [pc, #108]	; (800365c <HAL_UART_MspInit+0x160>)
 80035f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035f4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035f6:	4b19      	ldr	r3, [pc, #100]	; (800365c <HAL_UART_MspInit+0x160>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035fc:	4b17      	ldr	r3, [pc, #92]	; (800365c <HAL_UART_MspInit+0x160>)
 80035fe:	2200      	movs	r2, #0
 8003600:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003602:	4b16      	ldr	r3, [pc, #88]	; (800365c <HAL_UART_MspInit+0x160>)
 8003604:	2200      	movs	r2, #0
 8003606:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003608:	4b14      	ldr	r3, [pc, #80]	; (800365c <HAL_UART_MspInit+0x160>)
 800360a:	2200      	movs	r2, #0
 800360c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800360e:	4b13      	ldr	r3, [pc, #76]	; (800365c <HAL_UART_MspInit+0x160>)
 8003610:	2200      	movs	r2, #0
 8003612:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003614:	4811      	ldr	r0, [pc, #68]	; (800365c <HAL_UART_MspInit+0x160>)
 8003616:	f000 fc25 	bl	8003e64 <HAL_DMA_Init>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8003620:	f7fe fa54 	bl	8001acc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a0d      	ldr	r2, [pc, #52]	; (800365c <HAL_UART_MspInit+0x160>)
 8003628:	639a      	str	r2, [r3, #56]	; 0x38
 800362a:	4a0c      	ldr	r2, [pc, #48]	; (800365c <HAL_UART_MspInit+0x160>)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003630:	2200      	movs	r2, #0
 8003632:	2100      	movs	r1, #0
 8003634:	2026      	movs	r0, #38	; 0x26
 8003636:	f000 fbde 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800363a:	2026      	movs	r0, #38	; 0x26
 800363c:	f000 fbf7 	bl	8003e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003640:	bf00      	nop
 8003642:	3728      	adds	r7, #40	; 0x28
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40004400 	.word	0x40004400
 800364c:	40023800 	.word	0x40023800
 8003650:	40020000 	.word	0x40020000
 8003654:	2000163c 	.word	0x2000163c
 8003658:	400260a0 	.word	0x400260a0
 800365c:	2000169c 	.word	0x2000169c
 8003660:	40026088 	.word	0x40026088

08003664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003668:	e7fe      	b.n	8003668 <NMI_Handler+0x4>

0800366a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800366a:	b480      	push	{r7}
 800366c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800366e:	e7fe      	b.n	800366e <HardFault_Handler+0x4>

08003670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003674:	e7fe      	b.n	8003674 <MemManage_Handler+0x4>

08003676 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003676:	b480      	push	{r7}
 8003678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800367a:	e7fe      	b.n	800367a <BusFault_Handler+0x4>

0800367c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003680:	e7fe      	b.n	8003680 <UsageFault_Handler+0x4>

08003682 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003682:	b480      	push	{r7}
 8003684:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003686:	bf00      	nop
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003694:	bf00      	nop
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800369e:	b480      	push	{r7}
 80036a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80036b0:	f000 fa82 	bl	8003bb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80036b4:	bf00      	nop
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80036bc:	4802      	ldr	r0, [pc, #8]	; (80036c8 <DMA1_Stream5_IRQHandler+0x10>)
 80036be:	f000 fd69 	bl	8004194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	2000169c 	.word	0x2000169c

080036cc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80036d0:	4802      	ldr	r0, [pc, #8]	; (80036dc <DMA1_Stream6_IRQHandler+0x10>)
 80036d2:	f000 fd5f 	bl	8004194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	2000163c 	.word	0x2000163c

080036e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80036e4:	4802      	ldr	r0, [pc, #8]	; (80036f0 <USART2_IRQHandler+0x10>)
 80036e6:	f004 febd 	bl	8008464 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	200015f8 	.word	0x200015f8

080036f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 80036f8:	4802      	ldr	r0, [pc, #8]	; (8003704 <DMA2_Stream1_IRQHandler+0x10>)
 80036fa:	f000 fd4b 	bl	8004194 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20001598 	.word	0x20001598

08003708 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800370c:	4802      	ldr	r0, [pc, #8]	; (8003718 <OTG_FS_IRQHandler+0x10>)
 800370e:	f001 fe0b 	bl	8005328 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003712:	bf00      	nop
 8003714:	bd80      	pop	{r7, pc}
 8003716:	bf00      	nop
 8003718:	200059f0 	.word	0x200059f0

0800371c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003728:	2300      	movs	r3, #0
 800372a:	617b      	str	r3, [r7, #20]
 800372c:	e00a      	b.n	8003744 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800372e:	f3af 8000 	nop.w
 8003732:	4601      	mov	r1, r0
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	60ba      	str	r2, [r7, #8]
 800373a:	b2ca      	uxtb	r2, r1
 800373c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3301      	adds	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	dbf0      	blt.n	800372e <_read+0x12>
  }

  return len;
 800374c:	687b      	ldr	r3, [r7, #4]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800375e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003762:	4618      	mov	r0, r3
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
 8003776:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800377e:	605a      	str	r2, [r3, #4]
  return 0;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <_isatty>:

int _isatty(int file)
{
 800378e:	b480      	push	{r7}
 8003790:	b083      	sub	sp, #12
 8003792:	af00      	add	r7, sp, #0
 8003794:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003796:	2301      	movs	r3, #1
}
 8003798:	4618      	mov	r0, r3
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3714      	adds	r7, #20
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80037c8:	4a14      	ldr	r2, [pc, #80]	; (800381c <_sbrk+0x5c>)
 80037ca:	4b15      	ldr	r3, [pc, #84]	; (8003820 <_sbrk+0x60>)
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80037d4:	4b13      	ldr	r3, [pc, #76]	; (8003824 <_sbrk+0x64>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <_sbrk+0x64>)
 80037de:	4a12      	ldr	r2, [pc, #72]	; (8003828 <_sbrk+0x68>)
 80037e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037e2:	4b10      	ldr	r3, [pc, #64]	; (8003824 <_sbrk+0x64>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d207      	bcs.n	8003800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80037f0:	f00a f860 	bl	800d8b4 <__errno>
 80037f4:	4603      	mov	r3, r0
 80037f6:	220c      	movs	r2, #12
 80037f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	e009      	b.n	8003814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003800:	4b08      	ldr	r3, [pc, #32]	; (8003824 <_sbrk+0x64>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003806:	4b07      	ldr	r3, [pc, #28]	; (8003824 <_sbrk+0x64>)
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4413      	add	r3, r2
 800380e:	4a05      	ldr	r2, [pc, #20]	; (8003824 <_sbrk+0x64>)
 8003810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003812:	68fb      	ldr	r3, [r7, #12]
}
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20020000 	.word	0x20020000
 8003820:	00008000 	.word	0x00008000
 8003824:	20002b4c 	.word	0x20002b4c
 8003828:	20006130 	.word	0x20006130

0800382c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003830:	4b06      	ldr	r3, [pc, #24]	; (800384c <SystemInit+0x20>)
 8003832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003836:	4a05      	ldr	r2, [pc, #20]	; (800384c <SystemInit+0x20>)
 8003838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800383c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003840:	bf00      	nop
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <HAL_UART_TxCpltCallback>:
void uart_dma_stop(void);

_uart_frame tx[10];
static uint8_t tc=0,ti=0,to=0;
uint32_t uart_tc =0,uart_itc =0;
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
	uart_itc++;
 8003858:	4b1d      	ldr	r3, [pc, #116]	; (80038d0 <HAL_UART_TxCpltCallback+0x80>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3301      	adds	r3, #1
 800385e:	4a1c      	ldr	r2, [pc, #112]	; (80038d0 <HAL_UART_TxCpltCallback+0x80>)
 8003860:	6013      	str	r3, [r2, #0]
	if(tc)
 8003862:	4b1c      	ldr	r3, [pc, #112]	; (80038d4 <HAL_UART_TxCpltCallback+0x84>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d02d      	beq.n	80038c6 <HAL_UART_TxCpltCallback+0x76>
	{
		if(HAL_UART_Transmit_DMA(&huart2, tx[to].data, tx[to].size) == HAL_OK){
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <HAL_UART_TxCpltCallback+0x88>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	f240 235a 	movw	r3, #602	; 0x25a
 8003874:	fb02 f303 	mul.w	r3, r2, r3
 8003878:	4a18      	ldr	r2, [pc, #96]	; (80038dc <HAL_UART_TxCpltCallback+0x8c>)
 800387a:	4413      	add	r3, r2
 800387c:	1c99      	adds	r1, r3, #2
 800387e:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <HAL_UART_TxCpltCallback+0x88>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	4a15      	ldr	r2, [pc, #84]	; (80038dc <HAL_UART_TxCpltCallback+0x8c>)
 8003886:	f240 235a 	movw	r3, #602	; 0x25a
 800388a:	fb00 f303 	mul.w	r3, r0, r3
 800388e:	4413      	add	r3, r2
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	4812      	ldr	r0, [pc, #72]	; (80038e0 <HAL_UART_TxCpltCallback+0x90>)
 8003896:	f004 fcb7 	bl	8008208 <HAL_UART_Transmit_DMA>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d112      	bne.n	80038c6 <HAL_UART_TxCpltCallback+0x76>
				to++;
 80038a0:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <HAL_UART_TxCpltCallback+0x88>)
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	3301      	adds	r3, #1
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_UART_TxCpltCallback+0x88>)
 80038aa:	701a      	strb	r2, [r3, #0]
				tc--;
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <HAL_UART_TxCpltCallback+0x84>)
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b2da      	uxtb	r2, r3
 80038b4:	4b07      	ldr	r3, [pc, #28]	; (80038d4 <HAL_UART_TxCpltCallback+0x84>)
 80038b6:	701a      	strb	r2, [r3, #0]
				if(to ==TX_SIZE)
 80038b8:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <HAL_UART_TxCpltCallback+0x88>)
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	2b0a      	cmp	r3, #10
 80038be:	d102      	bne.n	80038c6 <HAL_UART_TxCpltCallback+0x76>
					to = 0;
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_UART_TxCpltCallback+0x88>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	701a      	strb	r2, [r3, #0]
		}
	}

}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	200044e8 	.word	0x200044e8
 80038d4:	200044e0 	.word	0x200044e0
 80038d8:	200044e2 	.word	0x200044e2
 80038dc:	20002d5c 	.word	0x20002d5c
 80038e0:	200015f8 	.word	0x200015f8

080038e4 <uart_transmit>:
void uart_transmit(uint8_t *data,uint8_t size)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	70fb      	strb	r3, [r7, #3]
	uart_tc++;
 80038f0:	4b32      	ldr	r3, [pc, #200]	; (80039bc <uart_transmit+0xd8>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3301      	adds	r3, #1
 80038f6:	4a31      	ldr	r2, [pc, #196]	; (80039bc <uart_transmit+0xd8>)
 80038f8:	6013      	str	r3, [r2, #0]
	tx[ti].size = size;
 80038fa:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <uart_transmit+0xdc>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	b299      	uxth	r1, r3
 8003904:	4a2f      	ldr	r2, [pc, #188]	; (80039c4 <uart_transmit+0xe0>)
 8003906:	f240 235a 	movw	r3, #602	; 0x25a
 800390a:	fb00 f303 	mul.w	r3, r0, r3
 800390e:	4413      	add	r3, r2
 8003910:	460a      	mov	r2, r1
 8003912:	801a      	strh	r2, [r3, #0]
	memcpy(tx[ti].data,data,size);
 8003914:	4b2a      	ldr	r3, [pc, #168]	; (80039c0 <uart_transmit+0xdc>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	461a      	mov	r2, r3
 800391a:	f240 235a 	movw	r3, #602	; 0x25a
 800391e:	fb02 f303 	mul.w	r3, r2, r3
 8003922:	4a28      	ldr	r2, [pc, #160]	; (80039c4 <uart_transmit+0xe0>)
 8003924:	4413      	add	r3, r2
 8003926:	3302      	adds	r3, #2
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	6879      	ldr	r1, [r7, #4]
 800392c:	4618      	mov	r0, r3
 800392e:	f009 fffb 	bl	800d928 <memcpy>
	ti++;
 8003932:	4b23      	ldr	r3, [pc, #140]	; (80039c0 <uart_transmit+0xdc>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	3301      	adds	r3, #1
 8003938:	b2da      	uxtb	r2, r3
 800393a:	4b21      	ldr	r3, [pc, #132]	; (80039c0 <uart_transmit+0xdc>)
 800393c:	701a      	strb	r2, [r3, #0]
	if(ti ==TX_SIZE)
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <uart_transmit+0xdc>)
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b0a      	cmp	r3, #10
 8003944:	d102      	bne.n	800394c <uart_transmit+0x68>
		ti = 0;
 8003946:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <uart_transmit+0xdc>)
 8003948:	2200      	movs	r2, #0
 800394a:	701a      	strb	r2, [r3, #0]
	tc++;
 800394c:	4b1e      	ldr	r3, [pc, #120]	; (80039c8 <uart_transmit+0xe4>)
 800394e:	781b      	ldrb	r3, [r3, #0]
 8003950:	3301      	adds	r3, #1
 8003952:	b2da      	uxtb	r2, r3
 8003954:	4b1c      	ldr	r3, [pc, #112]	; (80039c8 <uart_transmit+0xe4>)
 8003956:	701a      	strb	r2, [r3, #0]
	if(HAL_UART_Transmit_DMA(&huart2, tx[to].data, tx[to].size) == HAL_OK){
 8003958:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <uart_transmit+0xe8>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	f240 235a 	movw	r3, #602	; 0x25a
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	4a17      	ldr	r2, [pc, #92]	; (80039c4 <uart_transmit+0xe0>)
 8003968:	4413      	add	r3, r2
 800396a:	1c99      	adds	r1, r3, #2
 800396c:	4b17      	ldr	r3, [pc, #92]	; (80039cc <uart_transmit+0xe8>)
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	4618      	mov	r0, r3
 8003972:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <uart_transmit+0xe0>)
 8003974:	f240 235a 	movw	r3, #602	; 0x25a
 8003978:	fb00 f303 	mul.w	r3, r0, r3
 800397c:	4413      	add	r3, r2
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	461a      	mov	r2, r3
 8003982:	4813      	ldr	r0, [pc, #76]	; (80039d0 <uart_transmit+0xec>)
 8003984:	f004 fc40 	bl	8008208 <HAL_UART_Transmit_DMA>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d112      	bne.n	80039b4 <uart_transmit+0xd0>
		to++;
 800398e:	4b0f      	ldr	r3, [pc, #60]	; (80039cc <uart_transmit+0xe8>)
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	3301      	adds	r3, #1
 8003994:	b2da      	uxtb	r2, r3
 8003996:	4b0d      	ldr	r3, [pc, #52]	; (80039cc <uart_transmit+0xe8>)
 8003998:	701a      	strb	r2, [r3, #0]
		tc--;
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <uart_transmit+0xe4>)
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	3b01      	subs	r3, #1
 80039a0:	b2da      	uxtb	r2, r3
 80039a2:	4b09      	ldr	r3, [pc, #36]	; (80039c8 <uart_transmit+0xe4>)
 80039a4:	701a      	strb	r2, [r3, #0]
		if(to ==TX_SIZE)
 80039a6:	4b09      	ldr	r3, [pc, #36]	; (80039cc <uart_transmit+0xe8>)
 80039a8:	781b      	ldrb	r3, [r3, #0]
 80039aa:	2b0a      	cmp	r3, #10
 80039ac:	d102      	bne.n	80039b4 <uart_transmit+0xd0>
			to = 0;
 80039ae:	4b07      	ldr	r3, [pc, #28]	; (80039cc <uart_transmit+0xe8>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	701a      	strb	r2, [r3, #0]

	}
}
 80039b4:	bf00      	nop
 80039b6:	3708      	adds	r7, #8
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	200044e4 	.word	0x200044e4
 80039c0:	200044e1 	.word	0x200044e1
 80039c4:	20002d5c 	.word	0x20002d5c
 80039c8:	200044e0 	.word	0x200044e0
 80039cc:	200044e2 	.word	0x200044e2
 80039d0:	200015f8 	.word	0x200015f8

080039d4 <uart_dma_start>:


void uart_dma_start(void){
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&huart2, uart_rxbuf, UART_BUF_SIZE);
 80039d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039dc:	4902      	ldr	r1, [pc, #8]	; (80039e8 <uart_dma_start+0x14>)
 80039de:	4803      	ldr	r0, [pc, #12]	; (80039ec <uart_dma_start+0x18>)
 80039e0:	f004 fc90 	bl	8008304 <HAL_UART_Receive_DMA>
}
 80039e4:	bf00      	nop
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	20002b50 	.word	0x20002b50
 80039ec:	200015f8 	.word	0x200015f8

080039f0 <uart_dma_stop>:

void uart_dma_stop(void){
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
	HAL_UART_DMAStop(&huart2);			//stop DMA
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <uart_dma_stop+0x10>)
 80039f6:	f004 fcb5 	bl	8008364 <HAL_UART_DMAStop>
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200015f8 	.word	0x200015f8

08003a04 <uart_process>:

__weak int dw_process_rx_buffer(uint8_t *data,uint16_t size){
	return 0;
}

void uart_process(void){
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
	if(huart2.hdmarx->Instance->NDTR != UART_BUF_SIZE) {
 8003a08:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <uart_process+0x80>)
 8003a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a14:	d034      	beq.n	8003a80 <uart_process+0x7c>
	  if(huart2.hdmarx->Instance->NDTR != UART_Rx_recved) {
 8003a16:	4b1b      	ldr	r3, [pc, #108]	; (8003a84 <uart_process+0x80>)
 8003a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4a1a      	ldr	r2, [pc, #104]	; (8003a88 <uart_process+0x84>)
 8003a20:	8812      	ldrh	r2, [r2, #0]
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00d      	beq.n	8003a42 <uart_process+0x3e>
		  UART_Rx_recved = huart2.hdmarx->Instance->NDTR;
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <uart_process+0x80>)
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	4b15      	ldr	r3, [pc, #84]	; (8003a88 <uart_process+0x84>)
 8003a32:	801a      	strh	r2, [r3, #0]
		  UART_Rx_Time = HAL_GetTick() + 2;
 8003a34:	f000 f8d4 	bl	8003be0 <HAL_GetTick>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	3302      	adds	r3, #2
 8003a3c:	4a13      	ldr	r2, [pc, #76]	; (8003a8c <uart_process+0x88>)
 8003a3e:	6013      	str	r3, [r2, #0]
			  uart_dma_start();
//			  process_data_rx_uart();
		  }
	  }
	}
}
 8003a40:	e01e      	b.n	8003a80 <uart_process+0x7c>
		  if(HAL_GetTick()> UART_Rx_Time)  // timeoutframe
 8003a42:	f000 f8cd 	bl	8003be0 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <uart_process+0x88>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d917      	bls.n	8003a80 <uart_process+0x7c>
			  uart_dma_stop();
 8003a50:	f7ff ffce 	bl	80039f0 <uart_dma_stop>
			  uart_rx_cnt++;
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <uart_process+0x8c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4a0d      	ldr	r2, [pc, #52]	; (8003a90 <uart_process+0x8c>)
 8003a5c:	6013      	str	r3, [r2, #0]
			  UART_Rx_recved =0;
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <uart_process+0x84>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	801a      	strh	r2, [r3, #0]
			  dw_process_rx_buffer(uart_rxbuf, UART_BUF_SIZE - huart2.hdmarx->Instance->NDTR);
 8003a64:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <uart_process+0x80>)
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	4619      	mov	r1, r3
 8003a76:	4807      	ldr	r0, [pc, #28]	; (8003a94 <uart_process+0x90>)
 8003a78:	f7fd f8a8 	bl	8000bcc <dw_process_rx_buffer>
			  uart_dma_start();
 8003a7c:	f7ff ffaa 	bl	80039d4 <uart_dma_start>
}
 8003a80:	bf00      	nop
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	200015f8 	.word	0x200015f8
 8003a88:	20002d50 	.word	0x20002d50
 8003a8c:	20002d54 	.word	0x20002d54
 8003a90:	20002d58 	.word	0x20002d58
 8003a94:	20002b50 	.word	0x20002b50

08003a98 <uart_transmit_block>:

HAL_StatusTypeDef uart_transmit_block(uint8_t *data,uint16_t size,uint16_t timeout){
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	807b      	strh	r3, [r7, #2]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	803b      	strh	r3, [r7, #0]
	//return HAL_UART_Transmit(&huart2, data, size, timeout);
	uart_transmit(data,size);
 8003aa8:	887b      	ldrh	r3, [r7, #2]
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	4619      	mov	r1, r3
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff ff18 	bl	80038e4 <uart_transmit>
	return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ac4:	480d      	ldr	r0, [pc, #52]	; (8003afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003ac6:	490e      	ldr	r1, [pc, #56]	; (8003b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003ac8:	4a0e      	ldr	r2, [pc, #56]	; (8003b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003acc:	e002      	b.n	8003ad4 <LoopCopyDataInit>

08003ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ad2:	3304      	adds	r3, #4

08003ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ad8:	d3f9      	bcc.n	8003ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ada:	4a0b      	ldr	r2, [pc, #44]	; (8003b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003adc:	4c0b      	ldr	r4, [pc, #44]	; (8003b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ae0:	e001      	b.n	8003ae6 <LoopFillZerobss>

08003ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ae4:	3204      	adds	r2, #4

08003ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ae8:	d3fb      	bcc.n	8003ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003aea:	f7ff fe9f 	bl	800382c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003aee:	f009 fee7 	bl	800d8c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003af2:	f7fd fb1d 	bl	8001130 <main>
  bx  lr    
 8003af6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003af8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b00:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8003b04:	080108a0 	.word	0x080108a0
  ldr r2, =_sbss
 8003b08:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8003b0c:	2000612c 	.word	0x2000612c

08003b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b10:	e7fe      	b.n	8003b10 <ADC_IRQHandler>
	...

08003b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b18:	4b0e      	ldr	r3, [pc, #56]	; (8003b54 <HAL_Init+0x40>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a0d      	ldr	r2, [pc, #52]	; (8003b54 <HAL_Init+0x40>)
 8003b1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_Init+0x40>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <HAL_Init+0x40>)
 8003b2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_Init+0x40>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a07      	ldr	r2, [pc, #28]	; (8003b54 <HAL_Init+0x40>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b3c:	2003      	movs	r0, #3
 8003b3e:	f000 f94f 	bl	8003de0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b42:	2000      	movs	r0, #0
 8003b44:	f000 f808 	bl	8003b58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b48:	f7ff fb08 	bl	800315c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023c00 	.word	0x40023c00

08003b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b082      	sub	sp, #8
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b60:	4b12      	ldr	r3, [pc, #72]	; (8003bac <HAL_InitTick+0x54>)
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	4b12      	ldr	r3, [pc, #72]	; (8003bb0 <HAL_InitTick+0x58>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	4619      	mov	r1, r3
 8003b6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 f967 	bl	8003e4a <HAL_SYSTICK_Config>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d001      	beq.n	8003b86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e00e      	b.n	8003ba4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b0f      	cmp	r3, #15
 8003b8a:	d80a      	bhi.n	8003ba2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	f04f 30ff 	mov.w	r0, #4294967295
 8003b94:	f000 f92f 	bl	8003df6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b98:	4a06      	ldr	r2, [pc, #24]	; (8003bb4 <HAL_InitTick+0x5c>)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	e000      	b.n	8003ba4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000000 	.word	0x20000000
 8003bb0:	20000008 	.word	0x20000008
 8003bb4:	20000004 	.word	0x20000004

08003bb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <HAL_IncTick+0x20>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <HAL_IncTick+0x24>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	4a04      	ldr	r2, [pc, #16]	; (8003bdc <HAL_IncTick+0x24>)
 8003bca:	6013      	str	r3, [r2, #0]
}
 8003bcc:	bf00      	nop
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	20000008 	.word	0x20000008
 8003bdc:	200044ec 	.word	0x200044ec

08003be0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  return uwTick;
 8003be4:	4b03      	ldr	r3, [pc, #12]	; (8003bf4 <HAL_GetTick+0x14>)
 8003be6:	681b      	ldr	r3, [r3, #0]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr
 8003bf2:	bf00      	nop
 8003bf4:	200044ec 	.word	0x200044ec

08003bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c00:	f7ff ffee 	bl	8003be0 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c10:	d005      	beq.n	8003c1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c12:	4b0a      	ldr	r3, [pc, #40]	; (8003c3c <HAL_Delay+0x44>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	461a      	mov	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c1e:	bf00      	nop
 8003c20:	f7ff ffde 	bl	8003be0 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d8f7      	bhi.n	8003c20 <HAL_Delay+0x28>
  {
  }
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	20000008 	.word	0x20000008

08003c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c50:	4b0c      	ldr	r3, [pc, #48]	; (8003c84 <__NVIC_SetPriorityGrouping+0x44>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c56:	68ba      	ldr	r2, [r7, #8]
 8003c58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c72:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <__NVIC_SetPriorityGrouping+0x44>)
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	60d3      	str	r3, [r2, #12]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	e000ed00 	.word	0xe000ed00

08003c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c8c:	4b04      	ldr	r3, [pc, #16]	; (8003ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	0a1b      	lsrs	r3, r3, #8
 8003c92:	f003 0307 	and.w	r3, r3, #7
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr
 8003ca0:	e000ed00 	.word	0xe000ed00

08003ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	4603      	mov	r3, r0
 8003cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	db0b      	blt.n	8003cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cb6:	79fb      	ldrb	r3, [r7, #7]
 8003cb8:	f003 021f 	and.w	r2, r3, #31
 8003cbc:	4907      	ldr	r1, [pc, #28]	; (8003cdc <__NVIC_EnableIRQ+0x38>)
 8003cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cc2:	095b      	lsrs	r3, r3, #5
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	e000e100 	.word	0xe000e100

08003ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	6039      	str	r1, [r7, #0]
 8003cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	db0a      	blt.n	8003d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	490c      	ldr	r1, [pc, #48]	; (8003d2c <__NVIC_SetPriority+0x4c>)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	0112      	lsls	r2, r2, #4
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	440b      	add	r3, r1
 8003d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d08:	e00a      	b.n	8003d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	4908      	ldr	r1, [pc, #32]	; (8003d30 <__NVIC_SetPriority+0x50>)
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	3b04      	subs	r3, #4
 8003d18:	0112      	lsls	r2, r2, #4
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	440b      	add	r3, r1
 8003d1e:	761a      	strb	r2, [r3, #24]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	e000e100 	.word	0xe000e100
 8003d30:	e000ed00 	.word	0xe000ed00

08003d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b089      	sub	sp, #36	; 0x24
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f003 0307 	and.w	r3, r3, #7
 8003d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	f1c3 0307 	rsb	r3, r3, #7
 8003d4e:	2b04      	cmp	r3, #4
 8003d50:	bf28      	it	cs
 8003d52:	2304      	movcs	r3, #4
 8003d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	3304      	adds	r3, #4
 8003d5a:	2b06      	cmp	r3, #6
 8003d5c:	d902      	bls.n	8003d64 <NVIC_EncodePriority+0x30>
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3b03      	subs	r3, #3
 8003d62:	e000      	b.n	8003d66 <NVIC_EncodePriority+0x32>
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d68:	f04f 32ff 	mov.w	r2, #4294967295
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d72:	43da      	mvns	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	401a      	ands	r2, r3
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	fa01 f303 	lsl.w	r3, r1, r3
 8003d86:	43d9      	mvns	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d8c:	4313      	orrs	r3, r2
         );
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3724      	adds	r7, #36	; 0x24
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003dac:	d301      	bcc.n	8003db2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dae:	2301      	movs	r3, #1
 8003db0:	e00f      	b.n	8003dd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003db2:	4a0a      	ldr	r2, [pc, #40]	; (8003ddc <SysTick_Config+0x40>)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3b01      	subs	r3, #1
 8003db8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dba:	210f      	movs	r1, #15
 8003dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc0:	f7ff ff8e 	bl	8003ce0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <SysTick_Config+0x40>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dca:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <SysTick_Config+0x40>)
 8003dcc:	2207      	movs	r2, #7
 8003dce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3708      	adds	r7, #8
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	e000e010 	.word	0xe000e010

08003de0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b082      	sub	sp, #8
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f7ff ff29 	bl	8003c40 <__NVIC_SetPriorityGrouping>
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b086      	sub	sp, #24
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
 8003e02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e04:	2300      	movs	r3, #0
 8003e06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e08:	f7ff ff3e 	bl	8003c88 <__NVIC_GetPriorityGrouping>
 8003e0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	6978      	ldr	r0, [r7, #20]
 8003e14:	f7ff ff8e 	bl	8003d34 <NVIC_EncodePriority>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e1e:	4611      	mov	r1, r2
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7ff ff5d 	bl	8003ce0 <__NVIC_SetPriority>
}
 8003e26:	bf00      	nop
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}

08003e2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e2e:	b580      	push	{r7, lr}
 8003e30:	b082      	sub	sp, #8
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	4603      	mov	r3, r0
 8003e36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff ff31 	bl	8003ca4 <__NVIC_EnableIRQ>
}
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7ff ffa2 	bl	8003d9c <SysTick_Config>
 8003e58:	4603      	mov	r3, r0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3708      	adds	r7, #8
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
	...

08003e64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e70:	f7ff feb6 	bl	8003be0 <HAL_GetTick>
 8003e74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e099      	b.n	8003fb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0201 	bic.w	r2, r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ea0:	e00f      	b.n	8003ec2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ea2:	f7ff fe9d 	bl	8003be0 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b05      	cmp	r3, #5
 8003eae:	d908      	bls.n	8003ec2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2203      	movs	r2, #3
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e078      	b.n	8003fb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e8      	bne.n	8003ea2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	4b38      	ldr	r3, [pc, #224]	; (8003fbc <HAL_DMA_Init+0x158>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685a      	ldr	r2, [r3, #4]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003efa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	2b04      	cmp	r3, #4
 8003f1a:	d107      	bne.n	8003f2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	4313      	orrs	r3, r2
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	f023 0307 	bic.w	r3, r3, #7
 8003f42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d117      	bne.n	8003f86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	697a      	ldr	r2, [r7, #20]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d00e      	beq.n	8003f86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 fb01 	bl	8004570 <DMA_CheckFifoParam>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d008      	beq.n	8003f86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2240      	movs	r2, #64	; 0x40
 8003f78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003f82:	2301      	movs	r3, #1
 8003f84:	e016      	b.n	8003fb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	697a      	ldr	r2, [r7, #20]
 8003f8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 fab8 	bl	8004504 <DMA_CalcBaseAndBitshift>
 8003f94:	4603      	mov	r3, r0
 8003f96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f9c:	223f      	movs	r2, #63	; 0x3f
 8003f9e:	409a      	lsls	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3718      	adds	r7, #24
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	f010803f 	.word	0xf010803f

08003fc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
 8003fcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d101      	bne.n	8003fe6 <HAL_DMA_Start_IT+0x26>
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	e040      	b.n	8004068 <HAL_DMA_Start_IT+0xa8>
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d12f      	bne.n	800405a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	68b9      	ldr	r1, [r7, #8]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 fa4a 	bl	80044a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004018:	223f      	movs	r2, #63	; 0x3f
 800401a:	409a      	lsls	r2, r3
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0216 	orr.w	r2, r2, #22
 800402e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	d007      	beq.n	8004048 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f042 0208 	orr.w	r2, r2, #8
 8004046:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f042 0201 	orr.w	r2, r2, #1
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e005      	b.n	8004066 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2200      	movs	r2, #0
 800405e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004062:	2302      	movs	r3, #2
 8004064:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004066:	7dfb      	ldrb	r3, [r7, #23]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3718      	adds	r7, #24
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800407c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800407e:	f7ff fdaf 	bl	8003be0 <HAL_GetTick>
 8004082:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d008      	beq.n	80040a2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2280      	movs	r2, #128	; 0x80
 8004094:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e052      	b.n	8004148 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f022 0216 	bic.w	r2, r2, #22
 80040b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <HAL_DMA_Abort+0x62>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f022 0208 	bic.w	r2, r2, #8
 80040e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 0201 	bic.w	r2, r2, #1
 80040f0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80040f2:	e013      	b.n	800411c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80040f4:	f7ff fd74 	bl	8003be0 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b05      	cmp	r3, #5
 8004100:	d90c      	bls.n	800411c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2203      	movs	r2, #3
 800410c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e015      	b.n	8004148 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0301 	and.w	r3, r3, #1
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1e4      	bne.n	80040f4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412e:	223f      	movs	r2, #63	; 0x3f
 8004130:	409a      	lsls	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3710      	adds	r7, #16
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800415e:	b2db      	uxtb	r3, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d004      	beq.n	800416e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2280      	movs	r2, #128	; 0x80
 8004168:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e00c      	b.n	8004188 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2205      	movs	r2, #5
 8004172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0201 	bic.w	r2, r2, #1
 8004184:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041a0:	4b8e      	ldr	r3, [pc, #568]	; (80043dc <HAL_DMA_IRQHandler+0x248>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a8e      	ldr	r2, [pc, #568]	; (80043e0 <HAL_DMA_IRQHandler+0x24c>)
 80041a6:	fba2 2303 	umull	r2, r3, r2, r3
 80041aa:	0a9b      	lsrs	r3, r3, #10
 80041ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041be:	2208      	movs	r2, #8
 80041c0:	409a      	lsls	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	4013      	ands	r3, r2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d01a      	beq.n	8004200 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d013      	beq.n	8004200 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f022 0204 	bic.w	r2, r2, #4
 80041e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ec:	2208      	movs	r2, #8
 80041ee:	409a      	lsls	r2, r3
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041f8:	f043 0201 	orr.w	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004204:	2201      	movs	r2, #1
 8004206:	409a      	lsls	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d012      	beq.n	8004236 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004222:	2201      	movs	r2, #1
 8004224:	409a      	lsls	r2, r3
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422e:	f043 0202 	orr.w	r2, r3, #2
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423a:	2204      	movs	r2, #4
 800423c:	409a      	lsls	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4013      	ands	r3, r2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d012      	beq.n	800426c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00b      	beq.n	800426c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004258:	2204      	movs	r2, #4
 800425a:	409a      	lsls	r2, r3
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004264:	f043 0204 	orr.w	r2, r3, #4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004270:	2210      	movs	r2, #16
 8004272:	409a      	lsls	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4013      	ands	r3, r2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d043      	beq.n	8004304 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0308 	and.w	r3, r3, #8
 8004286:	2b00      	cmp	r3, #0
 8004288:	d03c      	beq.n	8004304 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	2210      	movs	r2, #16
 8004290:	409a      	lsls	r2, r3
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d018      	beq.n	80042d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d108      	bne.n	80042c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d024      	beq.n	8004304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	4798      	blx	r3
 80042c2:	e01f      	b.n	8004304 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01b      	beq.n	8004304 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	4798      	blx	r3
 80042d4:	e016      	b.n	8004304 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d107      	bne.n	80042f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0208 	bic.w	r2, r2, #8
 80042f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d003      	beq.n	8004304 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004308:	2220      	movs	r2, #32
 800430a:	409a      	lsls	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4013      	ands	r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	f000 808f 	beq.w	8004434 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 8087 	beq.w	8004434 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432a:	2220      	movs	r2, #32
 800432c:	409a      	lsls	r2, r3
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b05      	cmp	r3, #5
 800433c:	d136      	bne.n	80043ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0216 	bic.w	r2, r2, #22
 800434c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	695a      	ldr	r2, [r3, #20]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800435c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	2b00      	cmp	r3, #0
 8004364:	d103      	bne.n	800436e <HAL_DMA_IRQHandler+0x1da>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436a:	2b00      	cmp	r3, #0
 800436c:	d007      	beq.n	800437e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 0208 	bic.w	r2, r2, #8
 800437c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004382:	223f      	movs	r2, #63	; 0x3f
 8004384:	409a      	lsls	r2, r3
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d07e      	beq.n	80044a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
        }
        return;
 80043aa:	e079      	b.n	80044a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d01d      	beq.n	80043f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10d      	bne.n	80043e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d031      	beq.n	8004434 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	4798      	blx	r3
 80043d8:	e02c      	b.n	8004434 <HAL_DMA_IRQHandler+0x2a0>
 80043da:	bf00      	nop
 80043dc:	20000000 	.word	0x20000000
 80043e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d023      	beq.n	8004434 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	4798      	blx	r3
 80043f4:	e01e      	b.n	8004434 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10f      	bne.n	8004424 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0210 	bic.w	r2, r2, #16
 8004412:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d003      	beq.n	8004434 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004438:	2b00      	cmp	r3, #0
 800443a:	d032      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004440:	f003 0301 	and.w	r3, r3, #1
 8004444:	2b00      	cmp	r3, #0
 8004446:	d022      	beq.n	800448e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2205      	movs	r2, #5
 800444c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	3301      	adds	r3, #1
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	429a      	cmp	r2, r3
 800446a:	d307      	bcc.n	800447c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1f2      	bne.n	8004460 <HAL_DMA_IRQHandler+0x2cc>
 800447a:	e000      	b.n	800447e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800447c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d005      	beq.n	80044a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	4798      	blx	r3
 800449e:	e000      	b.n	80044a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044a0:	bf00      	nop
    }
  }
}
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}

080044a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80044c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d108      	bne.n	80044e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80044e6:	e007      	b.n	80044f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	60da      	str	r2, [r3, #12]
}
 80044f8:	bf00      	nop
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	3b10      	subs	r3, #16
 8004514:	4a14      	ldr	r2, [pc, #80]	; (8004568 <DMA_CalcBaseAndBitshift+0x64>)
 8004516:	fba2 2303 	umull	r2, r3, r2, r3
 800451a:	091b      	lsrs	r3, r3, #4
 800451c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800451e:	4a13      	ldr	r2, [pc, #76]	; (800456c <DMA_CalcBaseAndBitshift+0x68>)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	781b      	ldrb	r3, [r3, #0]
 8004526:	461a      	mov	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2b03      	cmp	r3, #3
 8004530:	d909      	bls.n	8004546 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800453a:	f023 0303 	bic.w	r3, r3, #3
 800453e:	1d1a      	adds	r2, r3, #4
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	659a      	str	r2, [r3, #88]	; 0x58
 8004544:	e007      	b.n	8004556 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800454e:	f023 0303 	bic.w	r3, r3, #3
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800455a:	4618      	mov	r0, r3
 800455c:	3714      	adds	r7, #20
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	aaaaaaab 	.word	0xaaaaaaab
 800456c:	080107f0 	.word	0x080107f0

08004570 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004578:	2300      	movs	r3, #0
 800457a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004580:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d11f      	bne.n	80045ca <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	2b03      	cmp	r3, #3
 800458e:	d856      	bhi.n	800463e <DMA_CheckFifoParam+0xce>
 8004590:	a201      	add	r2, pc, #4	; (adr r2, 8004598 <DMA_CheckFifoParam+0x28>)
 8004592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004596:	bf00      	nop
 8004598:	080045a9 	.word	0x080045a9
 800459c:	080045bb 	.word	0x080045bb
 80045a0:	080045a9 	.word	0x080045a9
 80045a4:	0800463f 	.word	0x0800463f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d046      	beq.n	8004642 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b8:	e043      	b.n	8004642 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80045c2:	d140      	bne.n	8004646 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c8:	e03d      	b.n	8004646 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045d2:	d121      	bne.n	8004618 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b03      	cmp	r3, #3
 80045d8:	d837      	bhi.n	800464a <DMA_CheckFifoParam+0xda>
 80045da:	a201      	add	r2, pc, #4	; (adr r2, 80045e0 <DMA_CheckFifoParam+0x70>)
 80045dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e0:	080045f1 	.word	0x080045f1
 80045e4:	080045f7 	.word	0x080045f7
 80045e8:	080045f1 	.word	0x080045f1
 80045ec:	08004609 	.word	0x08004609
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
      break;
 80045f4:	e030      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d025      	beq.n	800464e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004606:	e022      	b.n	800464e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004610:	d11f      	bne.n	8004652 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004616:	e01c      	b.n	8004652 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b02      	cmp	r3, #2
 800461c:	d903      	bls.n	8004626 <DMA_CheckFifoParam+0xb6>
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d003      	beq.n	800462c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004624:	e018      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	73fb      	strb	r3, [r7, #15]
      break;
 800462a:	e015      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004630:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00e      	beq.n	8004656 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      break;
 800463c:	e00b      	b.n	8004656 <DMA_CheckFifoParam+0xe6>
      break;
 800463e:	bf00      	nop
 8004640:	e00a      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      break;
 8004642:	bf00      	nop
 8004644:	e008      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      break;
 8004646:	bf00      	nop
 8004648:	e006      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      break;
 800464a:	bf00      	nop
 800464c:	e004      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      break;
 800464e:	bf00      	nop
 8004650:	e002      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      break;   
 8004652:	bf00      	nop
 8004654:	e000      	b.n	8004658 <DMA_CheckFifoParam+0xe8>
      break;
 8004656:	bf00      	nop
    }
  } 
  
  return status; 
 8004658:	7bfb      	ldrb	r3, [r7, #15]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3714      	adds	r7, #20
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop

08004668 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b086      	sub	sp, #24
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	60b9      	str	r1, [r7, #8]
 8004672:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800467a:	4b23      	ldr	r3, [pc, #140]	; (8004708 <HAL_FLASH_Program+0xa0>)
 800467c:	7e1b      	ldrb	r3, [r3, #24]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d101      	bne.n	8004686 <HAL_FLASH_Program+0x1e>
 8004682:	2302      	movs	r3, #2
 8004684:	e03b      	b.n	80046fe <HAL_FLASH_Program+0x96>
 8004686:	4b20      	ldr	r3, [pc, #128]	; (8004708 <HAL_FLASH_Program+0xa0>)
 8004688:	2201      	movs	r2, #1
 800468a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800468c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004690:	f000 f870 	bl	8004774 <FLASH_WaitForLastOperation>
 8004694:	4603      	mov	r3, r0
 8004696:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004698:	7dfb      	ldrb	r3, [r7, #23]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d12b      	bne.n	80046f6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d105      	bne.n	80046b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80046a4:	783b      	ldrb	r3, [r7, #0]
 80046a6:	4619      	mov	r1, r3
 80046a8:	68b8      	ldr	r0, [r7, #8]
 80046aa:	f000 f91b 	bl	80048e4 <FLASH_Program_Byte>
 80046ae:	e016      	b.n	80046de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d105      	bne.n	80046c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80046b6:	883b      	ldrh	r3, [r7, #0]
 80046b8:	4619      	mov	r1, r3
 80046ba:	68b8      	ldr	r0, [r7, #8]
 80046bc:	f000 f8ee 	bl	800489c <FLASH_Program_HalfWord>
 80046c0:	e00d      	b.n	80046de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d105      	bne.n	80046d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	68b8      	ldr	r0, [r7, #8]
 80046ce:	f000 f8c3 	bl	8004858 <FLASH_Program_Word>
 80046d2:	e004      	b.n	80046de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80046d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f000 f88b 	bl	80047f4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80046de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80046e2:	f000 f847 	bl	8004774 <FLASH_WaitForLastOperation>
 80046e6:	4603      	mov	r3, r0
 80046e8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80046ea:	4b08      	ldr	r3, [pc, #32]	; (800470c <HAL_FLASH_Program+0xa4>)
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	4a07      	ldr	r2, [pc, #28]	; (800470c <HAL_FLASH_Program+0xa4>)
 80046f0:	f023 0301 	bic.w	r3, r3, #1
 80046f4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80046f6:	4b04      	ldr	r3, [pc, #16]	; (8004708 <HAL_FLASH_Program+0xa0>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80046fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	200044f0 	.word	0x200044f0
 800470c:	40023c00 	.word	0x40023c00

08004710 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800471a:	4b0b      	ldr	r3, [pc, #44]	; (8004748 <HAL_FLASH_Unlock+0x38>)
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	da0b      	bge.n	800473a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004722:	4b09      	ldr	r3, [pc, #36]	; (8004748 <HAL_FLASH_Unlock+0x38>)
 8004724:	4a09      	ldr	r2, [pc, #36]	; (800474c <HAL_FLASH_Unlock+0x3c>)
 8004726:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004728:	4b07      	ldr	r3, [pc, #28]	; (8004748 <HAL_FLASH_Unlock+0x38>)
 800472a:	4a09      	ldr	r2, [pc, #36]	; (8004750 <HAL_FLASH_Unlock+0x40>)
 800472c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800472e:	4b06      	ldr	r3, [pc, #24]	; (8004748 <HAL_FLASH_Unlock+0x38>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	2b00      	cmp	r3, #0
 8004734:	da01      	bge.n	800473a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800473a:	79fb      	ldrb	r3, [r7, #7]
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	40023c00 	.word	0x40023c00
 800474c:	45670123 	.word	0x45670123
 8004750:	cdef89ab 	.word	0xcdef89ab

08004754 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004758:	4b05      	ldr	r3, [pc, #20]	; (8004770 <HAL_FLASH_Lock+0x1c>)
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	4a04      	ldr	r2, [pc, #16]	; (8004770 <HAL_FLASH_Lock+0x1c>)
 800475e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004762:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	40023c00 	.word	0x40023c00

08004774 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004780:	4b1a      	ldr	r3, [pc, #104]	; (80047ec <FLASH_WaitForLastOperation+0x78>)
 8004782:	2200      	movs	r2, #0
 8004784:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004786:	f7ff fa2b 	bl	8003be0 <HAL_GetTick>
 800478a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800478c:	e010      	b.n	80047b0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004794:	d00c      	beq.n	80047b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d007      	beq.n	80047ac <FLASH_WaitForLastOperation+0x38>
 800479c:	f7ff fa20 	bl	8003be0 <HAL_GetTick>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d201      	bcs.n	80047b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e019      	b.n	80047e4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80047b0:	4b0f      	ldr	r3, [pc, #60]	; (80047f0 <FLASH_WaitForLastOperation+0x7c>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e8      	bne.n	800478e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80047bc:	4b0c      	ldr	r3, [pc, #48]	; (80047f0 <FLASH_WaitForLastOperation+0x7c>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80047c8:	4b09      	ldr	r3, [pc, #36]	; (80047f0 <FLASH_WaitForLastOperation+0x7c>)
 80047ca:	2201      	movs	r2, #1
 80047cc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80047ce:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <FLASH_WaitForLastOperation+0x7c>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80047da:	f000 f8a5 	bl	8004928 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
  
}  
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	200044f0 	.word	0x200044f0
 80047f0:	40023c00 	.word	0x40023c00

080047f4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b085      	sub	sp, #20
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004800:	4b14      	ldr	r3, [pc, #80]	; (8004854 <FLASH_Program_DoubleWord+0x60>)
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	4a13      	ldr	r2, [pc, #76]	; (8004854 <FLASH_Program_DoubleWord+0x60>)
 8004806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800480a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800480c:	4b11      	ldr	r3, [pc, #68]	; (8004854 <FLASH_Program_DoubleWord+0x60>)
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	4a10      	ldr	r2, [pc, #64]	; (8004854 <FLASH_Program_DoubleWord+0x60>)
 8004812:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004816:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004818:	4b0e      	ldr	r3, [pc, #56]	; (8004854 <FLASH_Program_DoubleWord+0x60>)
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	4a0d      	ldr	r2, [pc, #52]	; (8004854 <FLASH_Program_DoubleWord+0x60>)
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800482a:	f3bf 8f6f 	isb	sy
}
 800482e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	000a      	movs	r2, r1
 800483e:	2300      	movs	r3, #0
 8004840:	68f9      	ldr	r1, [r7, #12]
 8004842:	3104      	adds	r1, #4
 8004844:	4613      	mov	r3, r2
 8004846:	600b      	str	r3, [r1, #0]
}
 8004848:	bf00      	nop
 800484a:	3714      	adds	r7, #20
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr
 8004854:	40023c00 	.word	0x40023c00

08004858 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004862:	4b0d      	ldr	r3, [pc, #52]	; (8004898 <FLASH_Program_Word+0x40>)
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	4a0c      	ldr	r2, [pc, #48]	; (8004898 <FLASH_Program_Word+0x40>)
 8004868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800486e:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <FLASH_Program_Word+0x40>)
 8004870:	691b      	ldr	r3, [r3, #16]
 8004872:	4a09      	ldr	r2, [pc, #36]	; (8004898 <FLASH_Program_Word+0x40>)
 8004874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004878:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800487a:	4b07      	ldr	r3, [pc, #28]	; (8004898 <FLASH_Program_Word+0x40>)
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	4a06      	ldr	r2, [pc, #24]	; (8004898 <FLASH_Program_Word+0x40>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	601a      	str	r2, [r3, #0]
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr
 8004898:	40023c00 	.word	0x40023c00

0800489c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048a8:	4b0d      	ldr	r3, [pc, #52]	; (80048e0 <FLASH_Program_HalfWord+0x44>)
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	4a0c      	ldr	r2, [pc, #48]	; (80048e0 <FLASH_Program_HalfWord+0x44>)
 80048ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80048b4:	4b0a      	ldr	r3, [pc, #40]	; (80048e0 <FLASH_Program_HalfWord+0x44>)
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	4a09      	ldr	r2, [pc, #36]	; (80048e0 <FLASH_Program_HalfWord+0x44>)
 80048ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80048c0:	4b07      	ldr	r3, [pc, #28]	; (80048e0 <FLASH_Program_HalfWord+0x44>)
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	4a06      	ldr	r2, [pc, #24]	; (80048e0 <FLASH_Program_HalfWord+0x44>)
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	887a      	ldrh	r2, [r7, #2]
 80048d0:	801a      	strh	r2, [r3, #0]
}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40023c00 	.word	0x40023c00

080048e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	460b      	mov	r3, r1
 80048ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <FLASH_Program_Byte+0x40>)
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	4a0b      	ldr	r2, [pc, #44]	; (8004924 <FLASH_Program_Byte+0x40>)
 80048f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80048fc:	4b09      	ldr	r3, [pc, #36]	; (8004924 <FLASH_Program_Byte+0x40>)
 80048fe:	4a09      	ldr	r2, [pc, #36]	; (8004924 <FLASH_Program_Byte+0x40>)
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004904:	4b07      	ldr	r3, [pc, #28]	; (8004924 <FLASH_Program_Byte+0x40>)
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	4a06      	ldr	r2, [pc, #24]	; (8004924 <FLASH_Program_Byte+0x40>)
 800490a:	f043 0301 	orr.w	r3, r3, #1
 800490e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	78fa      	ldrb	r2, [r7, #3]
 8004914:	701a      	strb	r2, [r3, #0]
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	40023c00 	.word	0x40023c00

08004928 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800492c:	4b27      	ldr	r3, [pc, #156]	; (80049cc <FLASH_SetErrorCode+0xa4>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <FLASH_SetErrorCode+0xa8>)
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f043 0310 	orr.w	r3, r3, #16
 8004940:	4a23      	ldr	r2, [pc, #140]	; (80049d0 <FLASH_SetErrorCode+0xa8>)
 8004942:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004944:	4b21      	ldr	r3, [pc, #132]	; (80049cc <FLASH_SetErrorCode+0xa4>)
 8004946:	2210      	movs	r2, #16
 8004948:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <FLASH_SetErrorCode+0xa4>)
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004956:	4b1e      	ldr	r3, [pc, #120]	; (80049d0 <FLASH_SetErrorCode+0xa8>)
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f043 0308 	orr.w	r3, r3, #8
 800495e:	4a1c      	ldr	r2, [pc, #112]	; (80049d0 <FLASH_SetErrorCode+0xa8>)
 8004960:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004962:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <FLASH_SetErrorCode+0xa4>)
 8004964:	2220      	movs	r2, #32
 8004966:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004968:	4b18      	ldr	r3, [pc, #96]	; (80049cc <FLASH_SetErrorCode+0xa4>)
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004970:	2b00      	cmp	r3, #0
 8004972:	d008      	beq.n	8004986 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004974:	4b16      	ldr	r3, [pc, #88]	; (80049d0 <FLASH_SetErrorCode+0xa8>)
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	f043 0304 	orr.w	r3, r3, #4
 800497c:	4a14      	ldr	r2, [pc, #80]	; (80049d0 <FLASH_SetErrorCode+0xa8>)
 800497e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004980:	4b12      	ldr	r3, [pc, #72]	; (80049cc <FLASH_SetErrorCode+0xa4>)
 8004982:	2240      	movs	r2, #64	; 0x40
 8004984:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004986:	4b11      	ldr	r3, [pc, #68]	; (80049cc <FLASH_SetErrorCode+0xa4>)
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004992:	4b0f      	ldr	r3, [pc, #60]	; (80049d0 <FLASH_SetErrorCode+0xa8>)
 8004994:	69db      	ldr	r3, [r3, #28]
 8004996:	f043 0302 	orr.w	r3, r3, #2
 800499a:	4a0d      	ldr	r2, [pc, #52]	; (80049d0 <FLASH_SetErrorCode+0xa8>)
 800499c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800499e:	4b0b      	ldr	r3, [pc, #44]	; (80049cc <FLASH_SetErrorCode+0xa4>)
 80049a0:	2280      	movs	r2, #128	; 0x80
 80049a2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80049a4:	4b09      	ldr	r3, [pc, #36]	; (80049cc <FLASH_SetErrorCode+0xa4>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	f003 0302 	and.w	r3, r3, #2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d008      	beq.n	80049c2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80049b0:	4b07      	ldr	r3, [pc, #28]	; (80049d0 <FLASH_SetErrorCode+0xa8>)
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	f043 0320 	orr.w	r3, r3, #32
 80049b8:	4a05      	ldr	r2, [pc, #20]	; (80049d0 <FLASH_SetErrorCode+0xa8>)
 80049ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80049bc:	4b03      	ldr	r3, [pc, #12]	; (80049cc <FLASH_SetErrorCode+0xa4>)
 80049be:	2202      	movs	r2, #2
 80049c0:	60da      	str	r2, [r3, #12]
  }
}
 80049c2:	bf00      	nop
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	40023c00 	.word	0x40023c00
 80049d0:	200044f0 	.word	0x200044f0

080049d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	e010      	b.n	8004a12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d103      	bne.n	80049fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80049f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e009      	b.n	8004a12 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80049fe:	78fb      	ldrb	r3, [r7, #3]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d103      	bne.n	8004a0c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	e002      	b.n	8004a12 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004a0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004a10:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a12:	4b13      	ldr	r3, [pc, #76]	; (8004a60 <FLASH_Erase_Sector+0x8c>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <FLASH_Erase_Sector+0x8c>)
 8004a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004a1e:	4b10      	ldr	r3, [pc, #64]	; (8004a60 <FLASH_Erase_Sector+0x8c>)
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	490f      	ldr	r1, [pc, #60]	; (8004a60 <FLASH_Erase_Sector+0x8c>)
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004a2a:	4b0d      	ldr	r3, [pc, #52]	; (8004a60 <FLASH_Erase_Sector+0x8c>)
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	4a0c      	ldr	r2, [pc, #48]	; (8004a60 <FLASH_Erase_Sector+0x8c>)
 8004a30:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a34:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004a36:	4b0a      	ldr	r3, [pc, #40]	; (8004a60 <FLASH_Erase_Sector+0x8c>)
 8004a38:	691a      	ldr	r2, [r3, #16]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	4a07      	ldr	r2, [pc, #28]	; (8004a60 <FLASH_Erase_Sector+0x8c>)
 8004a42:	f043 0302 	orr.w	r3, r3, #2
 8004a46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <FLASH_Erase_Sector+0x8c>)
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	4a04      	ldr	r2, [pc, #16]	; (8004a60 <FLASH_Erase_Sector+0x8c>)
 8004a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a52:	6113      	str	r3, [r2, #16]
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	40023c00 	.word	0x40023c00

08004a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b089      	sub	sp, #36	; 0x24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
 8004a7e:	e16b      	b.n	8004d58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004a80:	2201      	movs	r2, #1
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	fa02 f303 	lsl.w	r3, r2, r3
 8004a88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4013      	ands	r3, r2
 8004a92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	f040 815a 	bne.w	8004d52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d005      	beq.n	8004ab6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d130      	bne.n	8004b18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	005b      	lsls	r3, r3, #1
 8004ac0:	2203      	movs	r2, #3
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	4013      	ands	r3, r2
 8004acc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	68da      	ldr	r2, [r3, #12]
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004aec:	2201      	movs	r2, #1
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	fa02 f303 	lsl.w	r3, r2, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4013      	ands	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	091b      	lsrs	r3, r3, #4
 8004b02:	f003 0201 	and.w	r2, r3, #1
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	fa02 f303 	lsl.w	r3, r2, r3
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d017      	beq.n	8004b54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	2203      	movs	r2, #3
 8004b30:	fa02 f303 	lsl.w	r3, r2, r3
 8004b34:	43db      	mvns	r3, r3
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	4013      	ands	r3, r2
 8004b3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689a      	ldr	r2, [r3, #8]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	fa02 f303 	lsl.w	r3, r2, r3
 8004b48:	69ba      	ldr	r2, [r7, #24]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	69ba      	ldr	r2, [r7, #24]
 8004b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f003 0303 	and.w	r3, r3, #3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d123      	bne.n	8004ba8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	08da      	lsrs	r2, r3, #3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	3208      	adds	r2, #8
 8004b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	220f      	movs	r2, #15
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	43db      	mvns	r3, r3
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	4013      	ands	r3, r2
 8004b82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	691a      	ldr	r2, [r3, #16]
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	fa02 f303 	lsl.w	r3, r2, r3
 8004b94:	69ba      	ldr	r2, [r7, #24]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	08da      	lsrs	r2, r3, #3
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3208      	adds	r2, #8
 8004ba2:	69b9      	ldr	r1, [r7, #24]
 8004ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004bae:	69fb      	ldr	r3, [r7, #28]
 8004bb0:	005b      	lsls	r3, r3, #1
 8004bb2:	2203      	movs	r2, #3
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	43db      	mvns	r3, r3
 8004bba:	69ba      	ldr	r2, [r7, #24]
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f003 0203 	and.w	r2, r3, #3
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	005b      	lsls	r3, r3, #1
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	69ba      	ldr	r2, [r7, #24]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69ba      	ldr	r2, [r7, #24]
 8004bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	f000 80b4 	beq.w	8004d52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	4b60      	ldr	r3, [pc, #384]	; (8004d70 <HAL_GPIO_Init+0x30c>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	4a5f      	ldr	r2, [pc, #380]	; (8004d70 <HAL_GPIO_Init+0x30c>)
 8004bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfa:	4b5d      	ldr	r3, [pc, #372]	; (8004d70 <HAL_GPIO_Init+0x30c>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c06:	4a5b      	ldr	r2, [pc, #364]	; (8004d74 <HAL_GPIO_Init+0x310>)
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	089b      	lsrs	r3, r3, #2
 8004c0c:	3302      	adds	r3, #2
 8004c0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	f003 0303 	and.w	r3, r3, #3
 8004c1a:	009b      	lsls	r3, r3, #2
 8004c1c:	220f      	movs	r2, #15
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	43db      	mvns	r3, r3
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	4013      	ands	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a52      	ldr	r2, [pc, #328]	; (8004d78 <HAL_GPIO_Init+0x314>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d02b      	beq.n	8004c8a <HAL_GPIO_Init+0x226>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a51      	ldr	r2, [pc, #324]	; (8004d7c <HAL_GPIO_Init+0x318>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d025      	beq.n	8004c86 <HAL_GPIO_Init+0x222>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a50      	ldr	r2, [pc, #320]	; (8004d80 <HAL_GPIO_Init+0x31c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d01f      	beq.n	8004c82 <HAL_GPIO_Init+0x21e>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a4f      	ldr	r2, [pc, #316]	; (8004d84 <HAL_GPIO_Init+0x320>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d019      	beq.n	8004c7e <HAL_GPIO_Init+0x21a>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a4e      	ldr	r2, [pc, #312]	; (8004d88 <HAL_GPIO_Init+0x324>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d013      	beq.n	8004c7a <HAL_GPIO_Init+0x216>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a4d      	ldr	r2, [pc, #308]	; (8004d8c <HAL_GPIO_Init+0x328>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00d      	beq.n	8004c76 <HAL_GPIO_Init+0x212>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a4c      	ldr	r2, [pc, #304]	; (8004d90 <HAL_GPIO_Init+0x32c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d007      	beq.n	8004c72 <HAL_GPIO_Init+0x20e>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a4b      	ldr	r2, [pc, #300]	; (8004d94 <HAL_GPIO_Init+0x330>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d101      	bne.n	8004c6e <HAL_GPIO_Init+0x20a>
 8004c6a:	2307      	movs	r3, #7
 8004c6c:	e00e      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c6e:	2308      	movs	r3, #8
 8004c70:	e00c      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c72:	2306      	movs	r3, #6
 8004c74:	e00a      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c76:	2305      	movs	r3, #5
 8004c78:	e008      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	e006      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e004      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c82:	2302      	movs	r3, #2
 8004c84:	e002      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <HAL_GPIO_Init+0x228>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	f002 0203 	and.w	r2, r2, #3
 8004c92:	0092      	lsls	r2, r2, #2
 8004c94:	4093      	lsls	r3, r2
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004c9c:	4935      	ldr	r1, [pc, #212]	; (8004d74 <HAL_GPIO_Init+0x310>)
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	089b      	lsrs	r3, r3, #2
 8004ca2:	3302      	adds	r3, #2
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004caa:	4b3b      	ldr	r3, [pc, #236]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	43db      	mvns	r3, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d003      	beq.n	8004cce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004cce:	4a32      	ldr	r2, [pc, #200]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004cd4:	4b30      	ldr	r3, [pc, #192]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	43db      	mvns	r3, r3
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004cf8:	4a27      	ldr	r2, [pc, #156]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004cfe:	4b26      	ldr	r3, [pc, #152]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	43db      	mvns	r3, r3
 8004d08:	69ba      	ldr	r2, [r7, #24]
 8004d0a:	4013      	ands	r3, r2
 8004d0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d1a:	69ba      	ldr	r2, [r7, #24]
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d22:	4a1d      	ldr	r2, [pc, #116]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d28:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	43db      	mvns	r3, r3
 8004d32:	69ba      	ldr	r2, [r7, #24]
 8004d34:	4013      	ands	r3, r2
 8004d36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d003      	beq.n	8004d4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004d44:	69ba      	ldr	r2, [r7, #24]
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d4c:	4a12      	ldr	r2, [pc, #72]	; (8004d98 <HAL_GPIO_Init+0x334>)
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3301      	adds	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	f67f ae90 	bls.w	8004a80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	3724      	adds	r7, #36	; 0x24
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	40023800 	.word	0x40023800
 8004d74:	40013800 	.word	0x40013800
 8004d78:	40020000 	.word	0x40020000
 8004d7c:	40020400 	.word	0x40020400
 8004d80:	40020800 	.word	0x40020800
 8004d84:	40020c00 	.word	0x40020c00
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40021400 	.word	0x40021400
 8004d90:	40021800 	.word	0x40021800
 8004d94:	40021c00 	.word	0x40021c00
 8004d98:	40013c00 	.word	0x40013c00

08004d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	460b      	mov	r3, r1
 8004da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	887b      	ldrh	r3, [r7, #2]
 8004dae:	4013      	ands	r3, r2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e001      	b.n	8004dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	460b      	mov	r3, r1
 8004dd6:	807b      	strh	r3, [r7, #2]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ddc:	787b      	ldrb	r3, [r7, #1]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004de2:	887a      	ldrh	r2, [r7, #2]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004de8:	e003      	b.n	8004df2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dea:	887b      	ldrh	r3, [r7, #2]
 8004dec:	041a      	lsls	r2, r3, #16
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	619a      	str	r2, [r3, #24]
}
 8004df2:	bf00      	nop
 8004df4:	370c      	adds	r7, #12
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b084      	sub	sp, #16
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e12b      	b.n	800506a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d106      	bne.n	8004e2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f7fe f9c0 	bl	80031ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2224      	movs	r2, #36	; 0x24
 8004e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0201 	bic.w	r2, r2, #1
 8004e42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e64:	f001 fffe 	bl	8006e64 <HAL_RCC_GetPCLK1Freq>
 8004e68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	4a81      	ldr	r2, [pc, #516]	; (8005074 <HAL_I2C_Init+0x274>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d807      	bhi.n	8004e84 <HAL_I2C_Init+0x84>
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	4a80      	ldr	r2, [pc, #512]	; (8005078 <HAL_I2C_Init+0x278>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	bf94      	ite	ls
 8004e7c:	2301      	movls	r3, #1
 8004e7e:	2300      	movhi	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e006      	b.n	8004e92 <HAL_I2C_Init+0x92>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4a7d      	ldr	r2, [pc, #500]	; (800507c <HAL_I2C_Init+0x27c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	bf94      	ite	ls
 8004e8c:	2301      	movls	r3, #1
 8004e8e:	2300      	movhi	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e0e7      	b.n	800506a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a78      	ldr	r2, [pc, #480]	; (8005080 <HAL_I2C_Init+0x280>)
 8004e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea2:	0c9b      	lsrs	r3, r3, #18
 8004ea4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68ba      	ldr	r2, [r7, #8]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	4a6a      	ldr	r2, [pc, #424]	; (8005074 <HAL_I2C_Init+0x274>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d802      	bhi.n	8004ed4 <HAL_I2C_Init+0xd4>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	e009      	b.n	8004ee8 <HAL_I2C_Init+0xe8>
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004eda:	fb02 f303 	mul.w	r3, r2, r3
 8004ede:	4a69      	ldr	r2, [pc, #420]	; (8005084 <HAL_I2C_Init+0x284>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	099b      	lsrs	r3, r3, #6
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6812      	ldr	r2, [r2, #0]
 8004eec:	430b      	orrs	r3, r1
 8004eee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004efa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	495c      	ldr	r1, [pc, #368]	; (8005074 <HAL_I2C_Init+0x274>)
 8004f04:	428b      	cmp	r3, r1
 8004f06:	d819      	bhi.n	8004f3c <HAL_I2C_Init+0x13c>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	1e59      	subs	r1, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f16:	1c59      	adds	r1, r3, #1
 8004f18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004f1c:	400b      	ands	r3, r1
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <HAL_I2C_Init+0x138>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1e59      	subs	r1, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f30:	3301      	adds	r3, #1
 8004f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f36:	e051      	b.n	8004fdc <HAL_I2C_Init+0x1dc>
 8004f38:	2304      	movs	r3, #4
 8004f3a:	e04f      	b.n	8004fdc <HAL_I2C_Init+0x1dc>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d111      	bne.n	8004f68 <HAL_I2C_Init+0x168>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	1e58      	subs	r0, r3, #1
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6859      	ldr	r1, [r3, #4]
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	005b      	lsls	r3, r3, #1
 8004f50:	440b      	add	r3, r1
 8004f52:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f56:	3301      	adds	r3, #1
 8004f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf0c      	ite	eq
 8004f60:	2301      	moveq	r3, #1
 8004f62:	2300      	movne	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	e012      	b.n	8004f8e <HAL_I2C_Init+0x18e>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	1e58      	subs	r0, r3, #1
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6859      	ldr	r1, [r3, #4]
 8004f70:	460b      	mov	r3, r1
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	0099      	lsls	r1, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f7e:	3301      	adds	r3, #1
 8004f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	bf0c      	ite	eq
 8004f88:	2301      	moveq	r3, #1
 8004f8a:	2300      	movne	r3, #0
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <HAL_I2C_Init+0x196>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e022      	b.n	8004fdc <HAL_I2C_Init+0x1dc>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10e      	bne.n	8004fbc <HAL_I2C_Init+0x1bc>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	1e58      	subs	r0, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6859      	ldr	r1, [r3, #4]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	440b      	add	r3, r1
 8004fac:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fba:	e00f      	b.n	8004fdc <HAL_I2C_Init+0x1dc>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	1e58      	subs	r0, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	0099      	lsls	r1, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	6809      	ldr	r1, [r1, #0]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	69da      	ldr	r2, [r3, #28]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	430a      	orrs	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800500a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	6911      	ldr	r1, [r2, #16]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	68d2      	ldr	r2, [r2, #12]
 8005016:	4311      	orrs	r1, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	430b      	orrs	r3, r1
 800501e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	695a      	ldr	r2, [r3, #20]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	431a      	orrs	r2, r3
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	430a      	orrs	r2, r1
 800503a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	000186a0 	.word	0x000186a0
 8005078:	001e847f 	.word	0x001e847f
 800507c:	003d08ff 	.word	0x003d08ff
 8005080:	431bde83 	.word	0x431bde83
 8005084:	10624dd3 	.word	0x10624dd3

08005088 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508a:	b08f      	sub	sp, #60	; 0x3c
 800508c:	af0a      	add	r7, sp, #40	; 0x28
 800508e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e10f      	b.n	80052ba <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d106      	bne.n	80050ba <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f008 f8db 	bl	800d270 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2203      	movs	r2, #3
 80050be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d102      	bne.n	80050d4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4618      	mov	r0, r3
 80050da:	f004 fbc2 	bl	8009862 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	687e      	ldr	r6, [r7, #4]
 80050e6:	466d      	mov	r5, sp
 80050e8:	f106 0410 	add.w	r4, r6, #16
 80050ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80050fc:	1d33      	adds	r3, r6, #4
 80050fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005100:	6838      	ldr	r0, [r7, #0]
 8005102:	f004 fa99 	bl	8009638 <USB_CoreInit>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d005      	beq.n	8005118 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e0d0      	b.n	80052ba <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2100      	movs	r1, #0
 800511e:	4618      	mov	r0, r3
 8005120:	f004 fbb0 	bl	8009884 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005124:	2300      	movs	r3, #0
 8005126:	73fb      	strb	r3, [r7, #15]
 8005128:	e04a      	b.n	80051c0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800512a:	7bfa      	ldrb	r2, [r7, #15]
 800512c:	6879      	ldr	r1, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	440b      	add	r3, r1
 8005138:	333d      	adds	r3, #61	; 0x3d
 800513a:	2201      	movs	r2, #1
 800513c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800513e:	7bfa      	ldrb	r2, [r7, #15]
 8005140:	6879      	ldr	r1, [r7, #4]
 8005142:	4613      	mov	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	4413      	add	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	440b      	add	r3, r1
 800514c:	333c      	adds	r3, #60	; 0x3c
 800514e:	7bfa      	ldrb	r2, [r7, #15]
 8005150:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005152:	7bfa      	ldrb	r2, [r7, #15]
 8005154:	7bfb      	ldrb	r3, [r7, #15]
 8005156:	b298      	uxth	r0, r3
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	3344      	adds	r3, #68	; 0x44
 8005166:	4602      	mov	r2, r0
 8005168:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800516a:	7bfa      	ldrb	r2, [r7, #15]
 800516c:	6879      	ldr	r1, [r7, #4]
 800516e:	4613      	mov	r3, r2
 8005170:	00db      	lsls	r3, r3, #3
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	440b      	add	r3, r1
 8005178:	3340      	adds	r3, #64	; 0x40
 800517a:	2200      	movs	r2, #0
 800517c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800517e:	7bfa      	ldrb	r2, [r7, #15]
 8005180:	6879      	ldr	r1, [r7, #4]
 8005182:	4613      	mov	r3, r2
 8005184:	00db      	lsls	r3, r3, #3
 8005186:	4413      	add	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	440b      	add	r3, r1
 800518c:	3348      	adds	r3, #72	; 0x48
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005192:	7bfa      	ldrb	r2, [r7, #15]
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	4613      	mov	r3, r2
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	440b      	add	r3, r1
 80051a0:	334c      	adds	r3, #76	; 0x4c
 80051a2:	2200      	movs	r2, #0
 80051a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80051a6:	7bfa      	ldrb	r2, [r7, #15]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	4613      	mov	r3, r2
 80051ac:	00db      	lsls	r3, r3, #3
 80051ae:	4413      	add	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	440b      	add	r3, r1
 80051b4:	3354      	adds	r3, #84	; 0x54
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	3301      	adds	r3, #1
 80051be:	73fb      	strb	r3, [r7, #15]
 80051c0:	7bfa      	ldrb	r2, [r7, #15]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d3af      	bcc.n	800512a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]
 80051ce:	e044      	b.n	800525a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80051d0:	7bfa      	ldrb	r2, [r7, #15]
 80051d2:	6879      	ldr	r1, [r7, #4]
 80051d4:	4613      	mov	r3, r2
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	440b      	add	r3, r1
 80051de:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80051e2:	2200      	movs	r2, #0
 80051e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80051e6:	7bfa      	ldrb	r2, [r7, #15]
 80051e8:	6879      	ldr	r1, [r7, #4]
 80051ea:	4613      	mov	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	4413      	add	r3, r2
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	440b      	add	r3, r1
 80051f4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80051f8:	7bfa      	ldrb	r2, [r7, #15]
 80051fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051fc:	7bfa      	ldrb	r2, [r7, #15]
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005212:	7bfa      	ldrb	r2, [r7, #15]
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	4613      	mov	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	440b      	add	r3, r1
 8005220:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005228:	7bfa      	ldrb	r2, [r7, #15]
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800523a:	2200      	movs	r2, #0
 800523c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800523e:	7bfa      	ldrb	r2, [r7, #15]
 8005240:	6879      	ldr	r1, [r7, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4413      	add	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	440b      	add	r3, r1
 800524c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005254:	7bfb      	ldrb	r3, [r7, #15]
 8005256:	3301      	adds	r3, #1
 8005258:	73fb      	strb	r3, [r7, #15]
 800525a:	7bfa      	ldrb	r2, [r7, #15]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	429a      	cmp	r2, r3
 8005262:	d3b5      	bcc.n	80051d0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	603b      	str	r3, [r7, #0]
 800526a:	687e      	ldr	r6, [r7, #4]
 800526c:	466d      	mov	r5, sp
 800526e:	f106 0410 	add.w	r4, r6, #16
 8005272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800527a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800527e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005282:	1d33      	adds	r3, r6, #4
 8005284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005286:	6838      	ldr	r0, [r7, #0]
 8005288:	f004 fb48 	bl	800991c <USB_DevInit>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e00d      	b.n	80052ba <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f005 fc97 	bl	800abe6 <USB_DevDisconnect>

  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052c2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80052c2:	b580      	push	{r7, lr}
 80052c4:	b084      	sub	sp, #16
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_PCD_Start+0x1c>
 80052da:	2302      	movs	r3, #2
 80052dc:	e020      	b.n	8005320 <HAL_PCD_Start+0x5e>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d109      	bne.n	8005302 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d005      	beq.n	8005302 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f004 fa9a 	bl	8009840 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	f005 fc47 	bl	800aba4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2200      	movs	r2, #0
 800531a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	3710      	adds	r7, #16
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}

08005328 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005328:	b590      	push	{r4, r7, lr}
 800532a:	b08d      	sub	sp, #52	; 0x34
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	6a3b      	ldr	r3, [r7, #32]
 8005338:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4618      	mov	r0, r3
 8005340:	f005 fd05 	bl	800ad4e <USB_GetMode>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	f040 848a 	bne.w	8005c60 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4618      	mov	r0, r3
 8005352:	f005 fc69 	bl	800ac28 <USB_ReadInterrupts>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 8480 	beq.w	8005c5e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f005 fc56 	bl	800ac28 <USB_ReadInterrupts>
 800537c:	4603      	mov	r3, r0
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b02      	cmp	r3, #2
 8005384:	d107      	bne.n	8005396 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695a      	ldr	r2, [r3, #20]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f002 0202 	and.w	r2, r2, #2
 8005394:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f005 fc44 	bl	800ac28 <USB_ReadInterrupts>
 80053a0:	4603      	mov	r3, r0
 80053a2:	f003 0310 	and.w	r3, r3, #16
 80053a6:	2b10      	cmp	r3, #16
 80053a8:	d161      	bne.n	800546e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	699a      	ldr	r2, [r3, #24]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0210 	bic.w	r2, r2, #16
 80053b8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80053ba:	6a3b      	ldr	r3, [r7, #32]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	f003 020f 	and.w	r2, r3, #15
 80053c6:	4613      	mov	r3, r2
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	4413      	add	r3, r2
 80053d6:	3304      	adds	r3, #4
 80053d8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80053da:	69bb      	ldr	r3, [r7, #24]
 80053dc:	0c5b      	lsrs	r3, r3, #17
 80053de:	f003 030f 	and.w	r3, r3, #15
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d124      	bne.n	8005430 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d035      	beq.n	800545e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	091b      	lsrs	r3, r3, #4
 80053fa:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80053fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005400:	b29b      	uxth	r3, r3
 8005402:	461a      	mov	r2, r3
 8005404:	6a38      	ldr	r0, [r7, #32]
 8005406:	f005 fa7b 	bl	800a900 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	691a      	ldr	r2, [r3, #16]
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	091b      	lsrs	r3, r3, #4
 8005412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005416:	441a      	add	r2, r3
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	6a1a      	ldr	r2, [r3, #32]
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	091b      	lsrs	r3, r3, #4
 8005424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005428:	441a      	add	r2, r3
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	621a      	str	r2, [r3, #32]
 800542e:	e016      	b.n	800545e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	0c5b      	lsrs	r3, r3, #17
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	2b06      	cmp	r3, #6
 800543a:	d110      	bne.n	800545e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005442:	2208      	movs	r2, #8
 8005444:	4619      	mov	r1, r3
 8005446:	6a38      	ldr	r0, [r7, #32]
 8005448:	f005 fa5a 	bl	800a900 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	6a1a      	ldr	r2, [r3, #32]
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	091b      	lsrs	r3, r3, #4
 8005454:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005458:	441a      	add	r2, r3
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	699a      	ldr	r2, [r3, #24]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f042 0210 	orr.w	r2, r2, #16
 800546c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4618      	mov	r0, r3
 8005474:	f005 fbd8 	bl	800ac28 <USB_ReadInterrupts>
 8005478:	4603      	mov	r3, r0
 800547a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800547e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005482:	f040 80a7 	bne.w	80055d4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4618      	mov	r0, r3
 8005490:	f005 fbdd 	bl	800ac4e <USB_ReadDevAllOutEpInterrupt>
 8005494:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005496:	e099      	b.n	80055cc <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b00      	cmp	r3, #0
 80054a0:	f000 808e 	beq.w	80055c0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054aa:	b2d2      	uxtb	r2, r2
 80054ac:	4611      	mov	r1, r2
 80054ae:	4618      	mov	r0, r3
 80054b0:	f005 fc01 	bl	800acb6 <USB_ReadDevOutEPInterrupt>
 80054b4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00c      	beq.n	80054da <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80054c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054cc:	461a      	mov	r2, r3
 80054ce:	2301      	movs	r3, #1
 80054d0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80054d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fec3 	bl	8006260 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f003 0308 	and.w	r3, r3, #8
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00c      	beq.n	80054fe <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80054e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e6:	015a      	lsls	r2, r3, #5
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	4413      	add	r3, r2
 80054ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f0:	461a      	mov	r2, r3
 80054f2:	2308      	movs	r3, #8
 80054f4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80054f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 ff99 	bl	8006430 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	f003 0310 	and.w	r3, r3, #16
 8005504:	2b00      	cmp	r3, #0
 8005506:	d008      	beq.n	800551a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	4413      	add	r3, r2
 8005510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005514:	461a      	mov	r2, r3
 8005516:	2310      	movs	r3, #16
 8005518:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d030      	beq.n	8005586 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005524:	6a3b      	ldr	r3, [r7, #32]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552c:	2b80      	cmp	r3, #128	; 0x80
 800552e:	d109      	bne.n	8005544 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800553e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005542:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005546:	4613      	mov	r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	4413      	add	r3, r2
 8005556:	3304      	adds	r3, #4
 8005558:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	78db      	ldrb	r3, [r3, #3]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d108      	bne.n	8005574 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	2200      	movs	r2, #0
 8005566:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800556a:	b2db      	uxtb	r3, r3
 800556c:	4619      	mov	r1, r3
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f007 ff92 	bl	800d498 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005580:	461a      	mov	r2, r3
 8005582:	2302      	movs	r3, #2
 8005584:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b00      	cmp	r3, #0
 800558e:	d008      	beq.n	80055a2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	461a      	mov	r2, r3
 800559e:	2320      	movs	r3, #32
 80055a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d009      	beq.n	80055c0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80055ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	461a      	mov	r2, r3
 80055ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80055be:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	3301      	adds	r3, #1
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80055c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c8:	085b      	lsrs	r3, r3, #1
 80055ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f47f af62 	bne.w	8005498 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f005 fb25 	bl	800ac28 <USB_ReadInterrupts>
 80055de:	4603      	mov	r3, r0
 80055e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80055e8:	f040 80db 	bne.w	80057a2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f005 fb46 	bl	800ac82 <USB_ReadDevAllInEpInterrupt>
 80055f6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80055f8:	2300      	movs	r3, #0
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80055fc:	e0cd      	b.n	800579a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80c2 	beq.w	800578e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005610:	b2d2      	uxtb	r2, r2
 8005612:	4611      	mov	r1, r2
 8005614:	4618      	mov	r0, r3
 8005616:	f005 fb6c 	bl	800acf2 <USB_ReadDevInEPInterrupt>
 800561a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d057      	beq.n	80056d6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	f003 030f 	and.w	r3, r3, #15
 800562c:	2201      	movs	r2, #1
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	43db      	mvns	r3, r3
 8005640:	69f9      	ldr	r1, [r7, #28]
 8005642:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005646:	4013      	ands	r3, r2
 8005648:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005656:	461a      	mov	r2, r3
 8005658:	2301      	movs	r3, #1
 800565a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b01      	cmp	r3, #1
 8005662:	d132      	bne.n	80056ca <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	440b      	add	r3, r1
 8005672:	334c      	adds	r3, #76	; 0x4c
 8005674:	6819      	ldr	r1, [r3, #0]
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567a:	4613      	mov	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	4413      	add	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4403      	add	r3, r0
 8005684:	3348      	adds	r3, #72	; 0x48
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4419      	add	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800568e:	4613      	mov	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	4413      	add	r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4403      	add	r3, r0
 8005698:	334c      	adds	r3, #76	; 0x4c
 800569a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d113      	bne.n	80056ca <HAL_PCD_IRQHandler+0x3a2>
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a6:	4613      	mov	r3, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	4413      	add	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	3354      	adds	r3, #84	; 0x54
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d108      	bne.n	80056ca <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6818      	ldr	r0, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056c2:	461a      	mov	r2, r3
 80056c4:	2101      	movs	r1, #1
 80056c6:	f005 fb73 	bl	800adb0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	4619      	mov	r1, r3
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f007 fe5c 	bl	800d38e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d008      	beq.n	80056f2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	461a      	mov	r2, r3
 80056ee:	2308      	movs	r3, #8
 80056f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	f003 0310 	and.w	r3, r3, #16
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d008      	beq.n	800570e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	4413      	add	r3, r2
 8005704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005708:	461a      	mov	r2, r3
 800570a:	2310      	movs	r3, #16
 800570c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005714:	2b00      	cmp	r3, #0
 8005716:	d008      	beq.n	800572a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005724:	461a      	mov	r2, r3
 8005726:	2340      	movs	r3, #64	; 0x40
 8005728:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	f003 0302 	and.w	r3, r3, #2
 8005730:	2b00      	cmp	r3, #0
 8005732:	d023      	beq.n	800577c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005734:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005736:	6a38      	ldr	r0, [r7, #32]
 8005738:	f004 fa54 	bl	8009be4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800573c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573e:	4613      	mov	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	4413      	add	r3, r2
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	3338      	adds	r3, #56	; 0x38
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	4413      	add	r3, r2
 800574c:	3304      	adds	r3, #4
 800574e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	78db      	ldrb	r3, [r3, #3]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d108      	bne.n	800576a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2200      	movs	r2, #0
 800575c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	b2db      	uxtb	r3, r3
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f007 fea9 	bl	800d4bc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005776:	461a      	mov	r2, r3
 8005778:	2302      	movs	r3, #2
 800577a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005782:	2b00      	cmp	r3, #0
 8005784:	d003      	beq.n	800578e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005786:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fcdb 	bl	8006144 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	3301      	adds	r3, #1
 8005792:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	2b00      	cmp	r3, #0
 800579e:	f47f af2e 	bne.w	80055fe <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f005 fa3e 	bl	800ac28 <USB_ReadInterrupts>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057b6:	d122      	bne.n	80057fe <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	69fa      	ldr	r2, [r7, #28]
 80057c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057c6:	f023 0301 	bic.w	r3, r3, #1
 80057ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d108      	bne.n	80057e8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80057de:	2100      	movs	r1, #0
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 fec3 	bl	800656c <HAL_PCDEx_LPM_Callback>
 80057e6:	e002      	b.n	80057ee <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f007 fe47 	bl	800d47c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	695a      	ldr	r2, [r3, #20]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80057fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f005 fa10 	bl	800ac28 <USB_ReadInterrupts>
 8005808:	4603      	mov	r3, r0
 800580a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800580e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005812:	d112      	bne.n	800583a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	d102      	bne.n	800582a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f007 fe03 	bl	800d430 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695a      	ldr	r2, [r3, #20]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005838:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4618      	mov	r0, r3
 8005840:	f005 f9f2 	bl	800ac28 <USB_ReadInterrupts>
 8005844:	4603      	mov	r3, r0
 8005846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800584a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584e:	f040 80b7 	bne.w	80059c0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2110      	movs	r1, #16
 800586c:	4618      	mov	r0, r3
 800586e:	f004 f9b9 	bl	8009be4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005872:	2300      	movs	r3, #0
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005876:	e046      	b.n	8005906 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800587a:	015a      	lsls	r2, r3, #5
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	4413      	add	r3, r2
 8005880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005884:	461a      	mov	r2, r3
 8005886:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800588a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800588c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	69fa      	ldr	r2, [r7, #28]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80058ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	69fb      	ldr	r3, [r7, #28]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b8:	461a      	mov	r2, r3
 80058ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d0:	0151      	lsls	r1, r2, #5
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	440a      	add	r2, r1
 80058d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	69fa      	ldr	r2, [r7, #28]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005902:	3301      	adds	r3, #1
 8005904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800590c:	429a      	cmp	r2, r3
 800590e:	d3b3      	bcc.n	8005878 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	69fa      	ldr	r2, [r7, #28]
 800591a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800591e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005922:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005928:	2b00      	cmp	r3, #0
 800592a:	d016      	beq.n	800595a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005936:	69fa      	ldr	r2, [r7, #28]
 8005938:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800593c:	f043 030b 	orr.w	r3, r3, #11
 8005940:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005952:	f043 030b 	orr.w	r3, r3, #11
 8005956:	6453      	str	r3, [r2, #68]	; 0x44
 8005958:	e015      	b.n	8005986 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	69fa      	ldr	r2, [r7, #28]
 8005964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005968:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800596c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005970:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005978:	691b      	ldr	r3, [r3, #16]
 800597a:	69fa      	ldr	r2, [r7, #28]
 800597c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005980:	f043 030b 	orr.w	r3, r3, #11
 8005984:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	69fa      	ldr	r2, [r7, #28]
 8005990:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005994:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005998:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6818      	ldr	r0, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80059aa:	461a      	mov	r2, r3
 80059ac:	f005 fa00 	bl	800adb0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	695a      	ldr	r2, [r3, #20]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80059be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4618      	mov	r0, r3
 80059c6:	f005 f92f 	bl	800ac28 <USB_ReadInterrupts>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059d4:	d124      	bne.n	8005a20 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f005 f9c5 	bl	800ad6a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4618      	mov	r0, r3
 80059e6:	f004 f97a 	bl	8009cde <USB_GetDevSpeed>
 80059ea:	4603      	mov	r3, r0
 80059ec:	461a      	mov	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681c      	ldr	r4, [r3, #0]
 80059f6:	f001 fa29 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 80059fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	4620      	mov	r0, r4
 8005a06:	f003 fe79 	bl	80096fc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f007 fce7 	bl	800d3de <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005a1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f005 f8ff 	bl	800ac28 <USB_ReadInterrupts>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	f003 0308 	and.w	r3, r3, #8
 8005a30:	2b08      	cmp	r3, #8
 8005a32:	d10a      	bne.n	8005a4a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f007 fcc4 	bl	800d3c2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	695a      	ldr	r2, [r3, #20]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f002 0208 	and.w	r2, r2, #8
 8005a48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f005 f8ea 	bl	800ac28 <USB_ReadInterrupts>
 8005a54:	4603      	mov	r3, r0
 8005a56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a5a:	2b80      	cmp	r3, #128	; 0x80
 8005a5c:	d122      	bne.n	8005aa4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005a5e:	6a3b      	ldr	r3, [r7, #32]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a66:	6a3b      	ldr	r3, [r7, #32]
 8005a68:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a6e:	e014      	b.n	8005a9a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005a70:	6879      	ldr	r1, [r7, #4]
 8005a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a74:	4613      	mov	r3, r2
 8005a76:	00db      	lsls	r3, r3, #3
 8005a78:	4413      	add	r3, r2
 8005a7a:	009b      	lsls	r3, r3, #2
 8005a7c:	440b      	add	r3, r1
 8005a7e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d105      	bne.n	8005a94 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 fb27 	bl	80060e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	3301      	adds	r3, #1
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d3e5      	bcc.n	8005a70 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f005 f8bd 	bl	800ac28 <USB_ReadInterrupts>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ab8:	d13b      	bne.n	8005b32 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005aba:	2301      	movs	r3, #1
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
 8005abe:	e02b      	b.n	8005b18 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac2:	015a      	lsls	r2, r3, #5
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	4413      	add	r3, r2
 8005ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ad0:	6879      	ldr	r1, [r7, #4]
 8005ad2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	00db      	lsls	r3, r3, #3
 8005ad8:	4413      	add	r3, r2
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	440b      	add	r3, r1
 8005ade:	3340      	adds	r3, #64	; 0x40
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d115      	bne.n	8005b12 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005ae6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	da12      	bge.n	8005b12 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af0:	4613      	mov	r3, r2
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	440b      	add	r3, r1
 8005afa:	333f      	adds	r3, #63	; 0x3f
 8005afc:	2201      	movs	r2, #1
 8005afe:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fae8 	bl	80060e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	3301      	adds	r3, #1
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d3ce      	bcc.n	8005ac0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695a      	ldr	r2, [r3, #20]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f005 f876 	bl	800ac28 <USB_ReadInterrupts>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b42:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b46:	d155      	bne.n	8005bf4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b48:	2301      	movs	r3, #1
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b4c:	e045      	b.n	8005bda <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b5e:	6879      	ldr	r1, [r7, #4]
 8005b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b62:	4613      	mov	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d12e      	bne.n	8005bd4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b76:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	da2b      	bge.n	8005bd4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005b88:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d121      	bne.n	8005bd4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005b90:	6879      	ldr	r1, [r7, #4]
 8005b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b94:	4613      	mov	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	440b      	add	r3, r1
 8005b9e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bd0:	6053      	str	r3, [r2, #4]
            break;
 8005bd2:	e007      	b.n	8005be4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d3b4      	bcc.n	8005b4e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695a      	ldr	r2, [r3, #20]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005bf2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f005 f815 	bl	800ac28 <USB_ReadInterrupts>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c08:	d10a      	bne.n	8005c20 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f007 fc68 	bl	800d4e0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695a      	ldr	r2, [r3, #20]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f004 ffff 	bl	800ac28 <USB_ReadInterrupts>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d115      	bne.n	8005c60 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	f003 0304 	and.w	r3, r3, #4
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f007 fc58 	bl	800d4fc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6859      	ldr	r1, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	69ba      	ldr	r2, [r7, #24]
 8005c58:	430a      	orrs	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]
 8005c5c:	e000      	b.n	8005c60 <HAL_PCD_IRQHandler+0x938>
      return;
 8005c5e:	bf00      	nop
    }
  }
}
 8005c60:	3734      	adds	r7, #52	; 0x34
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd90      	pop	{r4, r7, pc}

08005c66 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_PCD_SetAddress+0x1a>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e013      	b.n	8005ca8 <HAL_PCD_SetAddress+0x42>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	78fa      	ldrb	r2, [r7, #3]
 8005c96:	4611      	mov	r1, r2
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f004 ff5d 	bl	800ab58 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3708      	adds	r7, #8
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	4608      	mov	r0, r1
 8005cba:	4611      	mov	r1, r2
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	70fb      	strb	r3, [r7, #3]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	803b      	strh	r3, [r7, #0]
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	da0f      	bge.n	8005cf6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cd6:	78fb      	ldrb	r3, [r7, #3]
 8005cd8:	f003 020f 	and.w	r2, r3, #15
 8005cdc:	4613      	mov	r3, r2
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	4413      	add	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	3338      	adds	r3, #56	; 0x38
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	4413      	add	r3, r2
 8005cea:	3304      	adds	r3, #4
 8005cec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	705a      	strb	r2, [r3, #1]
 8005cf4:	e00f      	b.n	8005d16 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	f003 020f 	and.w	r2, r3, #15
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	3304      	adds	r3, #4
 8005d0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d16:	78fb      	ldrb	r3, [r7, #3]
 8005d18:	f003 030f 	and.w	r3, r3, #15
 8005d1c:	b2da      	uxtb	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d22:	883a      	ldrh	r2, [r7, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	78ba      	ldrb	r2, [r7, #2]
 8005d2c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d004      	beq.n	8005d40 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d40:	78bb      	ldrb	r3, [r7, #2]
 8005d42:	2b02      	cmp	r3, #2
 8005d44:	d102      	bne.n	8005d4c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_PCD_EP_Open+0xaa>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e00e      	b.n	8005d78 <HAL_PCD_EP_Open+0xc8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f003 ffdd 	bl	8009d28 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005d76:	7afb      	ldrb	r3, [r7, #11]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b084      	sub	sp, #16
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	da0f      	bge.n	8005db4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d94:	78fb      	ldrb	r3, [r7, #3]
 8005d96:	f003 020f 	and.w	r2, r3, #15
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	3338      	adds	r3, #56	; 0x38
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4413      	add	r3, r2
 8005da8:	3304      	adds	r3, #4
 8005daa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	705a      	strb	r2, [r3, #1]
 8005db2:	e00f      	b.n	8005dd4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005db4:	78fb      	ldrb	r3, [r7, #3]
 8005db6:	f003 020f 	and.w	r2, r3, #15
 8005dba:	4613      	mov	r3, r2
 8005dbc:	00db      	lsls	r3, r3, #3
 8005dbe:	4413      	add	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	4413      	add	r3, r2
 8005dca:	3304      	adds	r3, #4
 8005dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005dd4:	78fb      	ldrb	r3, [r7, #3]
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_PCD_EP_Close+0x6e>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e00e      	b.n	8005e0c <HAL_PCD_EP_Close+0x8c>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f004 f81b 	bl	8009e38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3710      	adds	r7, #16
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	607a      	str	r2, [r7, #4]
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	460b      	mov	r3, r1
 8005e22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e24:	7afb      	ldrb	r3, [r7, #11]
 8005e26:	f003 020f 	and.w	r2, r3, #15
 8005e2a:	4613      	mov	r3, r2
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4413      	add	r3, r2
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4413      	add	r3, r2
 8005e3a:	3304      	adds	r3, #4
 8005e3c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	683a      	ldr	r2, [r7, #0]
 8005e48:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2200      	movs	r2, #0
 8005e54:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e56:	7afb      	ldrb	r3, [r7, #11]
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	b2da      	uxtb	r2, r3
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d102      	bne.n	8005e70 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e70:	7afb      	ldrb	r3, [r7, #11]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d109      	bne.n	8005e8e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	6979      	ldr	r1, [r7, #20]
 8005e88:	f004 fafa 	bl	800a480 <USB_EP0StartXfer>
 8005e8c:	e008      	b.n	8005ea0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	461a      	mov	r2, r3
 8005e9a:	6979      	ldr	r1, [r7, #20]
 8005e9c:	f004 f8a8 	bl	8009ff0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3718      	adds	r7, #24
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005eaa:	b480      	push	{r7}
 8005eac:	b083      	sub	sp, #12
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	460b      	mov	r3, r1
 8005eb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005eb6:	78fb      	ldrb	r3, [r7, #3]
 8005eb8:	f003 020f 	and.w	r2, r3, #15
 8005ebc:	6879      	ldr	r1, [r7, #4]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	00db      	lsls	r3, r3, #3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	440b      	add	r3, r1
 8005ec8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005ecc:	681b      	ldr	r3, [r3, #0]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b086      	sub	sp, #24
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005eea:	7afb      	ldrb	r3, [r7, #11]
 8005eec:	f003 020f 	and.w	r2, r3, #15
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	3338      	adds	r3, #56	; 0x38
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4413      	add	r3, r2
 8005efe:	3304      	adds	r3, #4
 8005f00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	2200      	movs	r2, #0
 8005f12:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2201      	movs	r2, #1
 8005f18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f1a:	7afb      	ldrb	r3, [r7, #11]
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d102      	bne.n	8005f34 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f34:	7afb      	ldrb	r3, [r7, #11]
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d109      	bne.n	8005f52 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6818      	ldr	r0, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6979      	ldr	r1, [r7, #20]
 8005f4c:	f004 fa98 	bl	800a480 <USB_EP0StartXfer>
 8005f50:	e008      	b.n	8005f64 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	691b      	ldr	r3, [r3, #16]
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	6979      	ldr	r1, [r7, #20]
 8005f60:	f004 f846 	bl	8009ff0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3718      	adds	r7, #24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f7a:	78fb      	ldrb	r3, [r7, #3]
 8005f7c:	f003 020f 	and.w	r2, r3, #15
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d901      	bls.n	8005f8c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e050      	b.n	800602e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f8c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	da0f      	bge.n	8005fb4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	f003 020f 	and.w	r2, r3, #15
 8005f9a:	4613      	mov	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	4413      	add	r3, r2
 8005fa0:	009b      	lsls	r3, r3, #2
 8005fa2:	3338      	adds	r3, #56	; 0x38
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	3304      	adds	r3, #4
 8005faa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	705a      	strb	r2, [r3, #1]
 8005fb2:	e00d      	b.n	8005fd0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005fb4:	78fa      	ldrb	r2, [r7, #3]
 8005fb6:	4613      	mov	r3, r2
 8005fb8:	00db      	lsls	r3, r3, #3
 8005fba:	4413      	add	r3, r2
 8005fbc:	009b      	lsls	r3, r3, #2
 8005fbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fd6:	78fb      	ldrb	r3, [r7, #3]
 8005fd8:	f003 030f 	and.w	r3, r3, #15
 8005fdc:	b2da      	uxtb	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d101      	bne.n	8005ff0 <HAL_PCD_EP_SetStall+0x82>
 8005fec:	2302      	movs	r3, #2
 8005fee:	e01e      	b.n	800602e <HAL_PCD_EP_SetStall+0xc0>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68f9      	ldr	r1, [r7, #12]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f004 fcd6 	bl	800a9b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	f003 030f 	and.w	r3, r3, #15
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	b2d9      	uxtb	r1, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800601e:	461a      	mov	r2, r3
 8006020:	f004 fec6 	bl	800adb0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	460b      	mov	r3, r1
 8006040:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006042:	78fb      	ldrb	r3, [r7, #3]
 8006044:	f003 020f 	and.w	r2, r3, #15
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	d901      	bls.n	8006054 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e042      	b.n	80060da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006058:	2b00      	cmp	r3, #0
 800605a:	da0f      	bge.n	800607c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	f003 020f 	and.w	r2, r3, #15
 8006062:	4613      	mov	r3, r2
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	3338      	adds	r3, #56	; 0x38
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	4413      	add	r3, r2
 8006070:	3304      	adds	r3, #4
 8006072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2201      	movs	r2, #1
 8006078:	705a      	strb	r2, [r3, #1]
 800607a:	e00f      	b.n	800609c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	f003 020f 	and.w	r2, r3, #15
 8006082:	4613      	mov	r3, r2
 8006084:	00db      	lsls	r3, r3, #3
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	4413      	add	r3, r2
 8006092:	3304      	adds	r3, #4
 8006094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060a2:	78fb      	ldrb	r3, [r7, #3]
 80060a4:	f003 030f 	and.w	r3, r3, #15
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d101      	bne.n	80060bc <HAL_PCD_EP_ClrStall+0x86>
 80060b8:	2302      	movs	r3, #2
 80060ba:	e00e      	b.n	80060da <HAL_PCD_EP_ClrStall+0xa4>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68f9      	ldr	r1, [r7, #12]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f004 fcde 	bl	800aa8c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3710      	adds	r7, #16
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b084      	sub	sp, #16
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	6078      	str	r0, [r7, #4]
 80060ea:	460b      	mov	r3, r1
 80060ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80060ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	da0c      	bge.n	8006110 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	f003 020f 	and.w	r2, r3, #15
 80060fc:	4613      	mov	r3, r2
 80060fe:	00db      	lsls	r3, r3, #3
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	3338      	adds	r3, #56	; 0x38
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	4413      	add	r3, r2
 800610a:	3304      	adds	r3, #4
 800610c:	60fb      	str	r3, [r7, #12]
 800610e:	e00c      	b.n	800612a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	f003 020f 	and.w	r2, r3, #15
 8006116:	4613      	mov	r3, r2
 8006118:	00db      	lsls	r3, r3, #3
 800611a:	4413      	add	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	4413      	add	r3, r2
 8006126:	3304      	adds	r3, #4
 8006128:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68f9      	ldr	r1, [r7, #12]
 8006130:	4618      	mov	r0, r3
 8006132:	f004 fafd 	bl	800a730 <USB_EPStopXfer>
 8006136:	4603      	mov	r3, r0
 8006138:	72fb      	strb	r3, [r7, #11]

  return ret;
 800613a:	7afb      	ldrb	r3, [r7, #11]
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08a      	sub	sp, #40	; 0x28
 8006148:	af02      	add	r7, sp, #8
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	4613      	mov	r3, r2
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4413      	add	r3, r2
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	3338      	adds	r3, #56	; 0x38
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	4413      	add	r3, r2
 8006168:	3304      	adds	r3, #4
 800616a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6a1a      	ldr	r2, [r3, #32]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	699b      	ldr	r3, [r3, #24]
 8006174:	429a      	cmp	r2, r3
 8006176:	d901      	bls.n	800617c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e06c      	b.n	8006256 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	699a      	ldr	r2, [r3, #24]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	69fa      	ldr	r2, [r7, #28]
 800618e:	429a      	cmp	r2, r3
 8006190:	d902      	bls.n	8006198 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	3303      	adds	r3, #3
 800619c:	089b      	lsrs	r3, r3, #2
 800619e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061a0:	e02b      	b.n	80061fa <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	699a      	ldr	r2, [r3, #24]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	69fa      	ldr	r2, [r7, #28]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d902      	bls.n	80061be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	3303      	adds	r3, #3
 80061c2:	089b      	lsrs	r3, r3, #2
 80061c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6919      	ldr	r1, [r3, #16]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	b2da      	uxtb	r2, r3
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061d6:	b2db      	uxtb	r3, r3
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	4603      	mov	r3, r0
 80061dc:	6978      	ldr	r0, [r7, #20]
 80061de:	f004 fb51 	bl	800a884 <USB_WritePacket>

    ep->xfer_buff  += len;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	691a      	ldr	r2, [r3, #16]
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	441a      	add	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6a1a      	ldr	r2, [r3, #32]
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	441a      	add	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	b29b      	uxth	r3, r3
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	429a      	cmp	r2, r3
 800620e:	d809      	bhi.n	8006224 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a1a      	ldr	r2, [r3, #32]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006218:	429a      	cmp	r2, r3
 800621a:	d203      	bcs.n	8006224 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1be      	bne.n	80061a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	699a      	ldr	r2, [r3, #24]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6a1b      	ldr	r3, [r3, #32]
 800622c:	429a      	cmp	r2, r3
 800622e:	d811      	bhi.n	8006254 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	f003 030f 	and.w	r3, r3, #15
 8006236:	2201      	movs	r2, #1
 8006238:	fa02 f303 	lsl.w	r3, r2, r3
 800623c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	43db      	mvns	r3, r3
 800624a:	6939      	ldr	r1, [r7, #16]
 800624c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006250:	4013      	ands	r3, r2
 8006252:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3720      	adds	r7, #32
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b088      	sub	sp, #32
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
 8006268:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	333c      	adds	r3, #60	; 0x3c
 8006278:	3304      	adds	r3, #4
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	015a      	lsls	r2, r3, #5
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	4413      	add	r3, r2
 8006286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	2b01      	cmp	r3, #1
 8006294:	d17b      	bne.n	800638e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	f003 0308 	and.w	r3, r3, #8
 800629c:	2b00      	cmp	r3, #0
 800629e:	d015      	beq.n	80062cc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	4a61      	ldr	r2, [pc, #388]	; (8006428 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	f240 80b9 	bls.w	800641c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	f000 80b3 	beq.w	800641c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	015a      	lsls	r2, r3, #5
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	4413      	add	r3, r2
 80062be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062c2:	461a      	mov	r2, r3
 80062c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c8:	6093      	str	r3, [r2, #8]
 80062ca:	e0a7      	b.n	800641c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	f003 0320 	and.w	r3, r3, #32
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062e2:	461a      	mov	r2, r3
 80062e4:	2320      	movs	r3, #32
 80062e6:	6093      	str	r3, [r2, #8]
 80062e8:	e098      	b.n	800641c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f040 8093 	bne.w	800641c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	4a4b      	ldr	r2, [pc, #300]	; (8006428 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d90f      	bls.n	800631e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00a      	beq.n	800631e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	015a      	lsls	r2, r3, #5
 800630c:	69bb      	ldr	r3, [r7, #24]
 800630e:	4413      	add	r3, r2
 8006310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006314:	461a      	mov	r2, r3
 8006316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631a:	6093      	str	r3, [r2, #8]
 800631c:	e07e      	b.n	800641c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800631e:	683a      	ldr	r2, [r7, #0]
 8006320:	4613      	mov	r3, r2
 8006322:	00db      	lsls	r3, r3, #3
 8006324:	4413      	add	r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	4413      	add	r3, r2
 8006330:	3304      	adds	r3, #4
 8006332:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	69da      	ldr	r2, [r3, #28]
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	0159      	lsls	r1, r3, #5
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	440b      	add	r3, r1
 8006340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800634a:	1ad2      	subs	r2, r2, r3
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d114      	bne.n	8006380 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d109      	bne.n	8006372 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006368:	461a      	mov	r2, r3
 800636a:	2101      	movs	r1, #1
 800636c:	f004 fd20 	bl	800adb0 <USB_EP0_OutStart>
 8006370:	e006      	b.n	8006380 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	691a      	ldr	r2, [r3, #16]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	441a      	add	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	b2db      	uxtb	r3, r3
 8006384:	4619      	mov	r1, r3
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f006 ffe6 	bl	800d358 <HAL_PCD_DataOutStageCallback>
 800638c:	e046      	b.n	800641c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	4a26      	ldr	r2, [pc, #152]	; (800642c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d124      	bne.n	80063e0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00a      	beq.n	80063b6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	015a      	lsls	r2, r3, #5
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	4413      	add	r3, r2
 80063a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063ac:	461a      	mov	r2, r3
 80063ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b2:	6093      	str	r3, [r2, #8]
 80063b4:	e032      	b.n	800641c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d008      	beq.n	80063d2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	015a      	lsls	r2, r3, #5
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	4413      	add	r3, r2
 80063c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063cc:	461a      	mov	r2, r3
 80063ce:	2320      	movs	r3, #32
 80063d0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f006 ffbd 	bl	800d358 <HAL_PCD_DataOutStageCallback>
 80063de:	e01d      	b.n	800641c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d114      	bne.n	8006410 <PCD_EP_OutXfrComplete_int+0x1b0>
 80063e6:	6879      	ldr	r1, [r7, #4]
 80063e8:	683a      	ldr	r2, [r7, #0]
 80063ea:	4613      	mov	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d108      	bne.n	8006410 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006408:	461a      	mov	r2, r3
 800640a:	2100      	movs	r1, #0
 800640c:	f004 fcd0 	bl	800adb0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	b2db      	uxtb	r3, r3
 8006414:	4619      	mov	r1, r3
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f006 ff9e 	bl	800d358 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3720      	adds	r7, #32
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	4f54300a 	.word	0x4f54300a
 800642c:	4f54310a 	.word	0x4f54310a

08006430 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	333c      	adds	r3, #60	; 0x3c
 8006448:	3304      	adds	r3, #4
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645a:	689b      	ldr	r3, [r3, #8]
 800645c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	4a15      	ldr	r2, [pc, #84]	; (80064b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d90e      	bls.n	8006484 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800646c:	2b00      	cmp	r3, #0
 800646e:	d009      	beq.n	8006484 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	461a      	mov	r2, r3
 800647e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006482:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f006 ff55 	bl	800d334 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4a0a      	ldr	r2, [pc, #40]	; (80064b8 <PCD_EP_OutSetupPacket_int+0x88>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d90c      	bls.n	80064ac <PCD_EP_OutSetupPacket_int+0x7c>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	2b01      	cmp	r3, #1
 8006498:	d108      	bne.n	80064ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6818      	ldr	r0, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064a4:	461a      	mov	r2, r3
 80064a6:	2101      	movs	r1, #1
 80064a8:	f004 fc82 	bl	800adb0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3718      	adds	r7, #24
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	4f54300a 	.word	0x4f54300a

080064bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80064bc:	b480      	push	{r7}
 80064be:	b085      	sub	sp, #20
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
 80064c4:	460b      	mov	r3, r1
 80064c6:	70fb      	strb	r3, [r7, #3]
 80064c8:	4613      	mov	r3, r2
 80064ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80064d4:	78fb      	ldrb	r3, [r7, #3]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d107      	bne.n	80064ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80064da:	883b      	ldrh	r3, [r7, #0]
 80064dc:	0419      	lsls	r1, r3, #16
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68ba      	ldr	r2, [r7, #8]
 80064e4:	430a      	orrs	r2, r1
 80064e6:	629a      	str	r2, [r3, #40]	; 0x28
 80064e8:	e028      	b.n	800653c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	0c1b      	lsrs	r3, r3, #16
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	4413      	add	r3, r2
 80064f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80064f8:	2300      	movs	r3, #0
 80064fa:	73fb      	strb	r3, [r7, #15]
 80064fc:	e00d      	b.n	800651a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	7bfb      	ldrb	r3, [r7, #15]
 8006504:	3340      	adds	r3, #64	; 0x40
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	0c1b      	lsrs	r3, r3, #16
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	4413      	add	r3, r2
 8006512:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006514:	7bfb      	ldrb	r3, [r7, #15]
 8006516:	3301      	adds	r3, #1
 8006518:	73fb      	strb	r3, [r7, #15]
 800651a:	7bfa      	ldrb	r2, [r7, #15]
 800651c:	78fb      	ldrb	r3, [r7, #3]
 800651e:	3b01      	subs	r3, #1
 8006520:	429a      	cmp	r2, r3
 8006522:	d3ec      	bcc.n	80064fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006524:	883b      	ldrh	r3, [r7, #0]
 8006526:	0418      	lsls	r0, r3, #16
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6819      	ldr	r1, [r3, #0]
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	3b01      	subs	r3, #1
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	4302      	orrs	r2, r0
 8006534:	3340      	adds	r3, #64	; 0x40
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	440b      	add	r3, r1
 800653a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800654a:	b480      	push	{r7}
 800654c:	b083      	sub	sp, #12
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	460b      	mov	r3, r1
 8006554:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	887a      	ldrh	r2, [r7, #2]
 800655c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e267      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d075      	beq.n	800668e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065a2:	4b88      	ldr	r3, [pc, #544]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f003 030c 	and.w	r3, r3, #12
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d00c      	beq.n	80065c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ae:	4b85      	ldr	r3, [pc, #532]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80065b6:	2b08      	cmp	r3, #8
 80065b8:	d112      	bne.n	80065e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065ba:	4b82      	ldr	r3, [pc, #520]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065c6:	d10b      	bne.n	80065e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065c8:	4b7e      	ldr	r3, [pc, #504]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d05b      	beq.n	800668c <HAL_RCC_OscConfig+0x108>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d157      	bne.n	800668c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e242      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e8:	d106      	bne.n	80065f8 <HAL_RCC_OscConfig+0x74>
 80065ea:	4b76      	ldr	r3, [pc, #472]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a75      	ldr	r2, [pc, #468]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 80065f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	e01d      	b.n	8006634 <HAL_RCC_OscConfig+0xb0>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006600:	d10c      	bne.n	800661c <HAL_RCC_OscConfig+0x98>
 8006602:	4b70      	ldr	r3, [pc, #448]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a6f      	ldr	r2, [pc, #444]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006608:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800660c:	6013      	str	r3, [r2, #0]
 800660e:	4b6d      	ldr	r3, [pc, #436]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4a6c      	ldr	r2, [pc, #432]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006618:	6013      	str	r3, [r2, #0]
 800661a:	e00b      	b.n	8006634 <HAL_RCC_OscConfig+0xb0>
 800661c:	4b69      	ldr	r3, [pc, #420]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a68      	ldr	r2, [pc, #416]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006626:	6013      	str	r3, [r2, #0]
 8006628:	4b66      	ldr	r3, [pc, #408]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a65      	ldr	r2, [pc, #404]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 800662e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006632:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d013      	beq.n	8006664 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663c:	f7fd fad0 	bl	8003be0 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006644:	f7fd facc 	bl	8003be0 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b64      	cmp	r3, #100	; 0x64
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e207      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006656:	4b5b      	ldr	r3, [pc, #364]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0f0      	beq.n	8006644 <HAL_RCC_OscConfig+0xc0>
 8006662:	e014      	b.n	800668e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006664:	f7fd fabc 	bl	8003be0 <HAL_GetTick>
 8006668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800666a:	e008      	b.n	800667e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800666c:	f7fd fab8 	bl	8003be0 <HAL_GetTick>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	1ad3      	subs	r3, r2, r3
 8006676:	2b64      	cmp	r3, #100	; 0x64
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e1f3      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800667e:	4b51      	ldr	r3, [pc, #324]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006686:	2b00      	cmp	r3, #0
 8006688:	d1f0      	bne.n	800666c <HAL_RCC_OscConfig+0xe8>
 800668a:	e000      	b.n	800668e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800668c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d063      	beq.n	8006762 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800669a:	4b4a      	ldr	r3, [pc, #296]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f003 030c 	and.w	r3, r3, #12
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00b      	beq.n	80066be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066a6:	4b47      	ldr	r3, [pc, #284]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80066ae:	2b08      	cmp	r3, #8
 80066b0:	d11c      	bne.n	80066ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066b2:	4b44      	ldr	r3, [pc, #272]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d116      	bne.n	80066ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066be:	4b41      	ldr	r3, [pc, #260]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d005      	beq.n	80066d6 <HAL_RCC_OscConfig+0x152>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68db      	ldr	r3, [r3, #12]
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d001      	beq.n	80066d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	e1c7      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066d6:	4b3b      	ldr	r3, [pc, #236]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4937      	ldr	r1, [pc, #220]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ea:	e03a      	b.n	8006762 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d020      	beq.n	8006736 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066f4:	4b34      	ldr	r3, [pc, #208]	; (80067c8 <HAL_RCC_OscConfig+0x244>)
 80066f6:	2201      	movs	r2, #1
 80066f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066fa:	f7fd fa71 	bl	8003be0 <HAL_GetTick>
 80066fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006700:	e008      	b.n	8006714 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006702:	f7fd fa6d 	bl	8003be0 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b02      	cmp	r3, #2
 800670e:	d901      	bls.n	8006714 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006710:	2303      	movs	r3, #3
 8006712:	e1a8      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006714:	4b2b      	ldr	r3, [pc, #172]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0302 	and.w	r3, r3, #2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d0f0      	beq.n	8006702 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006720:	4b28      	ldr	r3, [pc, #160]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	4925      	ldr	r1, [pc, #148]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006730:	4313      	orrs	r3, r2
 8006732:	600b      	str	r3, [r1, #0]
 8006734:	e015      	b.n	8006762 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006736:	4b24      	ldr	r3, [pc, #144]	; (80067c8 <HAL_RCC_OscConfig+0x244>)
 8006738:	2200      	movs	r2, #0
 800673a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800673c:	f7fd fa50 	bl	8003be0 <HAL_GetTick>
 8006740:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006742:	e008      	b.n	8006756 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006744:	f7fd fa4c 	bl	8003be0 <HAL_GetTick>
 8006748:	4602      	mov	r2, r0
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1ad3      	subs	r3, r2, r3
 800674e:	2b02      	cmp	r3, #2
 8006750:	d901      	bls.n	8006756 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006752:	2303      	movs	r3, #3
 8006754:	e187      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006756:	4b1b      	ldr	r3, [pc, #108]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0302 	and.w	r3, r3, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1f0      	bne.n	8006744 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0308 	and.w	r3, r3, #8
 800676a:	2b00      	cmp	r3, #0
 800676c:	d036      	beq.n	80067dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	695b      	ldr	r3, [r3, #20]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d016      	beq.n	80067a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006776:	4b15      	ldr	r3, [pc, #84]	; (80067cc <HAL_RCC_OscConfig+0x248>)
 8006778:	2201      	movs	r2, #1
 800677a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800677c:	f7fd fa30 	bl	8003be0 <HAL_GetTick>
 8006780:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006782:	e008      	b.n	8006796 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006784:	f7fd fa2c 	bl	8003be0 <HAL_GetTick>
 8006788:	4602      	mov	r2, r0
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	1ad3      	subs	r3, r2, r3
 800678e:	2b02      	cmp	r3, #2
 8006790:	d901      	bls.n	8006796 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006792:	2303      	movs	r3, #3
 8006794:	e167      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006796:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <HAL_RCC_OscConfig+0x240>)
 8006798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800679a:	f003 0302 	and.w	r3, r3, #2
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d0f0      	beq.n	8006784 <HAL_RCC_OscConfig+0x200>
 80067a2:	e01b      	b.n	80067dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067a4:	4b09      	ldr	r3, [pc, #36]	; (80067cc <HAL_RCC_OscConfig+0x248>)
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067aa:	f7fd fa19 	bl	8003be0 <HAL_GetTick>
 80067ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b0:	e00e      	b.n	80067d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80067b2:	f7fd fa15 	bl	8003be0 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d907      	bls.n	80067d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e150      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
 80067c4:	40023800 	.word	0x40023800
 80067c8:	42470000 	.word	0x42470000
 80067cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067d0:	4b88      	ldr	r3, [pc, #544]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 80067d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d1ea      	bne.n	80067b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f003 0304 	and.w	r3, r3, #4
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	f000 8097 	beq.w	8006918 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ea:	2300      	movs	r3, #0
 80067ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067ee:	4b81      	ldr	r3, [pc, #516]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10f      	bne.n	800681a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067fa:	2300      	movs	r3, #0
 80067fc:	60bb      	str	r3, [r7, #8]
 80067fe:	4b7d      	ldr	r3, [pc, #500]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006802:	4a7c      	ldr	r2, [pc, #496]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006808:	6413      	str	r3, [r2, #64]	; 0x40
 800680a:	4b7a      	ldr	r3, [pc, #488]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 800680c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800680e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006812:	60bb      	str	r3, [r7, #8]
 8006814:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006816:	2301      	movs	r3, #1
 8006818:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800681a:	4b77      	ldr	r3, [pc, #476]	; (80069f8 <HAL_RCC_OscConfig+0x474>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006822:	2b00      	cmp	r3, #0
 8006824:	d118      	bne.n	8006858 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006826:	4b74      	ldr	r3, [pc, #464]	; (80069f8 <HAL_RCC_OscConfig+0x474>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a73      	ldr	r2, [pc, #460]	; (80069f8 <HAL_RCC_OscConfig+0x474>)
 800682c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006830:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006832:	f7fd f9d5 	bl	8003be0 <HAL_GetTick>
 8006836:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800683a:	f7fd f9d1 	bl	8003be0 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e10c      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800684c:	4b6a      	ldr	r3, [pc, #424]	; (80069f8 <HAL_RCC_OscConfig+0x474>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d106      	bne.n	800686e <HAL_RCC_OscConfig+0x2ea>
 8006860:	4b64      	ldr	r3, [pc, #400]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006864:	4a63      	ldr	r2, [pc, #396]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	6713      	str	r3, [r2, #112]	; 0x70
 800686c:	e01c      	b.n	80068a8 <HAL_RCC_OscConfig+0x324>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	689b      	ldr	r3, [r3, #8]
 8006872:	2b05      	cmp	r3, #5
 8006874:	d10c      	bne.n	8006890 <HAL_RCC_OscConfig+0x30c>
 8006876:	4b5f      	ldr	r3, [pc, #380]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687a:	4a5e      	ldr	r2, [pc, #376]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 800687c:	f043 0304 	orr.w	r3, r3, #4
 8006880:	6713      	str	r3, [r2, #112]	; 0x70
 8006882:	4b5c      	ldr	r3, [pc, #368]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006886:	4a5b      	ldr	r2, [pc, #364]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006888:	f043 0301 	orr.w	r3, r3, #1
 800688c:	6713      	str	r3, [r2, #112]	; 0x70
 800688e:	e00b      	b.n	80068a8 <HAL_RCC_OscConfig+0x324>
 8006890:	4b58      	ldr	r3, [pc, #352]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006894:	4a57      	ldr	r2, [pc, #348]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006896:	f023 0301 	bic.w	r3, r3, #1
 800689a:	6713      	str	r3, [r2, #112]	; 0x70
 800689c:	4b55      	ldr	r3, [pc, #340]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 800689e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068a0:	4a54      	ldr	r2, [pc, #336]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 80068a2:	f023 0304 	bic.w	r3, r3, #4
 80068a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d015      	beq.n	80068dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b0:	f7fd f996 	bl	8003be0 <HAL_GetTick>
 80068b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b6:	e00a      	b.n	80068ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068b8:	f7fd f992 	bl	8003be0 <HAL_GetTick>
 80068bc:	4602      	mov	r2, r0
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	1ad3      	subs	r3, r2, r3
 80068c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e0cb      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068ce:	4b49      	ldr	r3, [pc, #292]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 80068d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0ee      	beq.n	80068b8 <HAL_RCC_OscConfig+0x334>
 80068da:	e014      	b.n	8006906 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068dc:	f7fd f980 	bl	8003be0 <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068e2:	e00a      	b.n	80068fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068e4:	f7fd f97c 	bl	8003be0 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e0b5      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068fa:	4b3e      	ldr	r3, [pc, #248]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1ee      	bne.n	80068e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006906:	7dfb      	ldrb	r3, [r7, #23]
 8006908:	2b01      	cmp	r3, #1
 800690a:	d105      	bne.n	8006918 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800690c:	4b39      	ldr	r3, [pc, #228]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 800690e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006910:	4a38      	ldr	r2, [pc, #224]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006916:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 80a1 	beq.w	8006a64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006922:	4b34      	ldr	r3, [pc, #208]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	f003 030c 	and.w	r3, r3, #12
 800692a:	2b08      	cmp	r3, #8
 800692c:	d05c      	beq.n	80069e8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	2b02      	cmp	r3, #2
 8006934:	d141      	bne.n	80069ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006936:	4b31      	ldr	r3, [pc, #196]	; (80069fc <HAL_RCC_OscConfig+0x478>)
 8006938:	2200      	movs	r2, #0
 800693a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800693c:	f7fd f950 	bl	8003be0 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006942:	e008      	b.n	8006956 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006944:	f7fd f94c 	bl	8003be0 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	2b02      	cmp	r3, #2
 8006950:	d901      	bls.n	8006956 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e087      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006956:	4b27      	ldr	r3, [pc, #156]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1f0      	bne.n	8006944 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	69da      	ldr	r2, [r3, #28]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	431a      	orrs	r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006970:	019b      	lsls	r3, r3, #6
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006978:	085b      	lsrs	r3, r3, #1
 800697a:	3b01      	subs	r3, #1
 800697c:	041b      	lsls	r3, r3, #16
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	061b      	lsls	r3, r3, #24
 8006986:	491b      	ldr	r1, [pc, #108]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 8006988:	4313      	orrs	r3, r2
 800698a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800698c:	4b1b      	ldr	r3, [pc, #108]	; (80069fc <HAL_RCC_OscConfig+0x478>)
 800698e:	2201      	movs	r2, #1
 8006990:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006992:	f7fd f925 	bl	8003be0 <HAL_GetTick>
 8006996:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006998:	e008      	b.n	80069ac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800699a:	f7fd f921 	bl	8003be0 <HAL_GetTick>
 800699e:	4602      	mov	r2, r0
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	1ad3      	subs	r3, r2, r3
 80069a4:	2b02      	cmp	r3, #2
 80069a6:	d901      	bls.n	80069ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069a8:	2303      	movs	r3, #3
 80069aa:	e05c      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069ac:	4b11      	ldr	r3, [pc, #68]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d0f0      	beq.n	800699a <HAL_RCC_OscConfig+0x416>
 80069b8:	e054      	b.n	8006a64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ba:	4b10      	ldr	r3, [pc, #64]	; (80069fc <HAL_RCC_OscConfig+0x478>)
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069c0:	f7fd f90e 	bl	8003be0 <HAL_GetTick>
 80069c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069c6:	e008      	b.n	80069da <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069c8:	f7fd f90a 	bl	8003be0 <HAL_GetTick>
 80069cc:	4602      	mov	r2, r0
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	1ad3      	subs	r3, r2, r3
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d901      	bls.n	80069da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e045      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069da:	4b06      	ldr	r3, [pc, #24]	; (80069f4 <HAL_RCC_OscConfig+0x470>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d1f0      	bne.n	80069c8 <HAL_RCC_OscConfig+0x444>
 80069e6:	e03d      	b.n	8006a64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d107      	bne.n	8006a00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	e038      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
 80069f4:	40023800 	.word	0x40023800
 80069f8:	40007000 	.word	0x40007000
 80069fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a00:	4b1b      	ldr	r3, [pc, #108]	; (8006a70 <HAL_RCC_OscConfig+0x4ec>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d028      	beq.n	8006a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d121      	bne.n	8006a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d11a      	bne.n	8006a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a30:	4013      	ands	r3, r2
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d111      	bne.n	8006a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a46:	085b      	lsrs	r3, r3, #1
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d107      	bne.n	8006a60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d001      	beq.n	8006a64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	e000      	b.n	8006a66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a64:	2300      	movs	r3, #0
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3718      	adds	r7, #24
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	40023800 	.word	0x40023800

08006a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d101      	bne.n	8006a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e0cc      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006a88:	4b68      	ldr	r3, [pc, #416]	; (8006c2c <HAL_RCC_ClockConfig+0x1b8>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0307 	and.w	r3, r3, #7
 8006a90:	683a      	ldr	r2, [r7, #0]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d90c      	bls.n	8006ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a96:	4b65      	ldr	r3, [pc, #404]	; (8006c2c <HAL_RCC_ClockConfig+0x1b8>)
 8006a98:	683a      	ldr	r2, [r7, #0]
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a9e:	4b63      	ldr	r3, [pc, #396]	; (8006c2c <HAL_RCC_ClockConfig+0x1b8>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d001      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006aac:	2301      	movs	r3, #1
 8006aae:	e0b8      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d020      	beq.n	8006afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ac8:	4b59      	ldr	r3, [pc, #356]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	4a58      	ldr	r2, [pc, #352]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f003 0308 	and.w	r3, r3, #8
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d005      	beq.n	8006aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ae0:	4b53      	ldr	r3, [pc, #332]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	4a52      	ldr	r2, [pc, #328]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006aec:	4b50      	ldr	r3, [pc, #320]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	494d      	ldr	r1, [pc, #308]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d044      	beq.n	8006b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d107      	bne.n	8006b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b12:	4b47      	ldr	r3, [pc, #284]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d119      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e07f      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d003      	beq.n	8006b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d107      	bne.n	8006b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b32:	4b3f      	ldr	r3, [pc, #252]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e06f      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b42:	4b3b      	ldr	r3, [pc, #236]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e067      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b52:	4b37      	ldr	r3, [pc, #220]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	f023 0203 	bic.w	r2, r3, #3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	4934      	ldr	r1, [pc, #208]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b64:	f7fd f83c 	bl	8003be0 <HAL_GetTick>
 8006b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b6a:	e00a      	b.n	8006b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b6c:	f7fd f838 	bl	8003be0 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d901      	bls.n	8006b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e04f      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b82:	4b2b      	ldr	r3, [pc, #172]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f003 020c 	and.w	r2, r3, #12
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d1eb      	bne.n	8006b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006b94:	4b25      	ldr	r3, [pc, #148]	; (8006c2c <HAL_RCC_ClockConfig+0x1b8>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d20c      	bcs.n	8006bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ba2:	4b22      	ldr	r3, [pc, #136]	; (8006c2c <HAL_RCC_ClockConfig+0x1b8>)
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	b2d2      	uxtb	r2, r2
 8006ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006baa:	4b20      	ldr	r3, [pc, #128]	; (8006c2c <HAL_RCC_ClockConfig+0x1b8>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d001      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e032      	b.n	8006c22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d008      	beq.n	8006bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bc8:	4b19      	ldr	r3, [pc, #100]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	4916      	ldr	r1, [pc, #88]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	f003 0308 	and.w	r3, r3, #8
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d009      	beq.n	8006bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006be6:	4b12      	ldr	r3, [pc, #72]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	490e      	ldr	r1, [pc, #56]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006bfa:	f000 f821 	bl	8006c40 <HAL_RCC_GetSysClockFreq>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	4b0b      	ldr	r3, [pc, #44]	; (8006c30 <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	091b      	lsrs	r3, r3, #4
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	490a      	ldr	r1, [pc, #40]	; (8006c34 <HAL_RCC_ClockConfig+0x1c0>)
 8006c0c:	5ccb      	ldrb	r3, [r1, r3]
 8006c0e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c12:	4a09      	ldr	r2, [pc, #36]	; (8006c38 <HAL_RCC_ClockConfig+0x1c4>)
 8006c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006c16:	4b09      	ldr	r3, [pc, #36]	; (8006c3c <HAL_RCC_ClockConfig+0x1c8>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fc ff9c 	bl	8003b58 <HAL_InitTick>

  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	40023c00 	.word	0x40023c00
 8006c30:	40023800 	.word	0x40023800
 8006c34:	080107d8 	.word	0x080107d8
 8006c38:	20000000 	.word	0x20000000
 8006c3c:	20000004 	.word	0x20000004

08006c40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c44:	b094      	sub	sp, #80	; 0x50
 8006c46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c50:	2300      	movs	r3, #0
 8006c52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c58:	4b79      	ldr	r3, [pc, #484]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f003 030c 	and.w	r3, r3, #12
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d00d      	beq.n	8006c80 <HAL_RCC_GetSysClockFreq+0x40>
 8006c64:	2b08      	cmp	r3, #8
 8006c66:	f200 80e1 	bhi.w	8006e2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d002      	beq.n	8006c74 <HAL_RCC_GetSysClockFreq+0x34>
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d003      	beq.n	8006c7a <HAL_RCC_GetSysClockFreq+0x3a>
 8006c72:	e0db      	b.n	8006e2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c74:	4b73      	ldr	r3, [pc, #460]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006c78:	e0db      	b.n	8006e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c7a:	4b73      	ldr	r3, [pc, #460]	; (8006e48 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c7e:	e0d8      	b.n	8006e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c80:	4b6f      	ldr	r3, [pc, #444]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c8a:	4b6d      	ldr	r3, [pc, #436]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d063      	beq.n	8006d5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c96:	4b6a      	ldr	r3, [pc, #424]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	099b      	lsrs	r3, r3, #6
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ca0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ca8:	633b      	str	r3, [r7, #48]	; 0x30
 8006caa:	2300      	movs	r3, #0
 8006cac:	637b      	str	r3, [r7, #52]	; 0x34
 8006cae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006cb2:	4622      	mov	r2, r4
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	f04f 0000 	mov.w	r0, #0
 8006cba:	f04f 0100 	mov.w	r1, #0
 8006cbe:	0159      	lsls	r1, r3, #5
 8006cc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cc4:	0150      	lsls	r0, r2, #5
 8006cc6:	4602      	mov	r2, r0
 8006cc8:	460b      	mov	r3, r1
 8006cca:	4621      	mov	r1, r4
 8006ccc:	1a51      	subs	r1, r2, r1
 8006cce:	6139      	str	r1, [r7, #16]
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	eb63 0301 	sbc.w	r3, r3, r1
 8006cd6:	617b      	str	r3, [r7, #20]
 8006cd8:	f04f 0200 	mov.w	r2, #0
 8006cdc:	f04f 0300 	mov.w	r3, #0
 8006ce0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ce4:	4659      	mov	r1, fp
 8006ce6:	018b      	lsls	r3, r1, #6
 8006ce8:	4651      	mov	r1, sl
 8006cea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cee:	4651      	mov	r1, sl
 8006cf0:	018a      	lsls	r2, r1, #6
 8006cf2:	4651      	mov	r1, sl
 8006cf4:	ebb2 0801 	subs.w	r8, r2, r1
 8006cf8:	4659      	mov	r1, fp
 8006cfa:	eb63 0901 	sbc.w	r9, r3, r1
 8006cfe:	f04f 0200 	mov.w	r2, #0
 8006d02:	f04f 0300 	mov.w	r3, #0
 8006d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d12:	4690      	mov	r8, r2
 8006d14:	4699      	mov	r9, r3
 8006d16:	4623      	mov	r3, r4
 8006d18:	eb18 0303 	adds.w	r3, r8, r3
 8006d1c:	60bb      	str	r3, [r7, #8]
 8006d1e:	462b      	mov	r3, r5
 8006d20:	eb49 0303 	adc.w	r3, r9, r3
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	f04f 0200 	mov.w	r2, #0
 8006d2a:	f04f 0300 	mov.w	r3, #0
 8006d2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d32:	4629      	mov	r1, r5
 8006d34:	024b      	lsls	r3, r1, #9
 8006d36:	4621      	mov	r1, r4
 8006d38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	024a      	lsls	r2, r1, #9
 8006d40:	4610      	mov	r0, r2
 8006d42:	4619      	mov	r1, r3
 8006d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d46:	2200      	movs	r2, #0
 8006d48:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d50:	f7f9 fa8e 	bl	8000270 <__aeabi_uldivmod>
 8006d54:	4602      	mov	r2, r0
 8006d56:	460b      	mov	r3, r1
 8006d58:	4613      	mov	r3, r2
 8006d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d5c:	e058      	b.n	8006e10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d5e:	4b38      	ldr	r3, [pc, #224]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	099b      	lsrs	r3, r3, #6
 8006d64:	2200      	movs	r2, #0
 8006d66:	4618      	mov	r0, r3
 8006d68:	4611      	mov	r1, r2
 8006d6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d6e:	623b      	str	r3, [r7, #32]
 8006d70:	2300      	movs	r3, #0
 8006d72:	627b      	str	r3, [r7, #36]	; 0x24
 8006d74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d78:	4642      	mov	r2, r8
 8006d7a:	464b      	mov	r3, r9
 8006d7c:	f04f 0000 	mov.w	r0, #0
 8006d80:	f04f 0100 	mov.w	r1, #0
 8006d84:	0159      	lsls	r1, r3, #5
 8006d86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d8a:	0150      	lsls	r0, r2, #5
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	460b      	mov	r3, r1
 8006d90:	4641      	mov	r1, r8
 8006d92:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d96:	4649      	mov	r1, r9
 8006d98:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d9c:	f04f 0200 	mov.w	r2, #0
 8006da0:	f04f 0300 	mov.w	r3, #0
 8006da4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006da8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006dac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006db0:	ebb2 040a 	subs.w	r4, r2, sl
 8006db4:	eb63 050b 	sbc.w	r5, r3, fp
 8006db8:	f04f 0200 	mov.w	r2, #0
 8006dbc:	f04f 0300 	mov.w	r3, #0
 8006dc0:	00eb      	lsls	r3, r5, #3
 8006dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dc6:	00e2      	lsls	r2, r4, #3
 8006dc8:	4614      	mov	r4, r2
 8006dca:	461d      	mov	r5, r3
 8006dcc:	4643      	mov	r3, r8
 8006dce:	18e3      	adds	r3, r4, r3
 8006dd0:	603b      	str	r3, [r7, #0]
 8006dd2:	464b      	mov	r3, r9
 8006dd4:	eb45 0303 	adc.w	r3, r5, r3
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	f04f 0200 	mov.w	r2, #0
 8006dde:	f04f 0300 	mov.w	r3, #0
 8006de2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006de6:	4629      	mov	r1, r5
 8006de8:	028b      	lsls	r3, r1, #10
 8006dea:	4621      	mov	r1, r4
 8006dec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006df0:	4621      	mov	r1, r4
 8006df2:	028a      	lsls	r2, r1, #10
 8006df4:	4610      	mov	r0, r2
 8006df6:	4619      	mov	r1, r3
 8006df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	61fa      	str	r2, [r7, #28]
 8006e00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e04:	f7f9 fa34 	bl	8000270 <__aeabi_uldivmod>
 8006e08:	4602      	mov	r2, r0
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e10:	4b0b      	ldr	r3, [pc, #44]	; (8006e40 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	0c1b      	lsrs	r3, r3, #16
 8006e16:	f003 0303 	and.w	r3, r3, #3
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	005b      	lsls	r3, r3, #1
 8006e1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006e20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e2a:	e002      	b.n	8006e32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e2c:	4b05      	ldr	r3, [pc, #20]	; (8006e44 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3750      	adds	r7, #80	; 0x50
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e3e:	bf00      	nop
 8006e40:	40023800 	.word	0x40023800
 8006e44:	00f42400 	.word	0x00f42400
 8006e48:	007a1200 	.word	0x007a1200

08006e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e50:	4b03      	ldr	r3, [pc, #12]	; (8006e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e52:	681b      	ldr	r3, [r3, #0]
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	20000000 	.word	0x20000000

08006e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e68:	f7ff fff0 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	0a9b      	lsrs	r3, r3, #10
 8006e74:	f003 0307 	and.w	r3, r3, #7
 8006e78:	4903      	ldr	r1, [pc, #12]	; (8006e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e7a:	5ccb      	ldrb	r3, [r1, r3]
 8006e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	40023800 	.word	0x40023800
 8006e88:	080107e8 	.word	0x080107e8

08006e8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006e90:	f7ff ffdc 	bl	8006e4c <HAL_RCC_GetHCLKFreq>
 8006e94:	4602      	mov	r2, r0
 8006e96:	4b05      	ldr	r3, [pc, #20]	; (8006eac <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e98:	689b      	ldr	r3, [r3, #8]
 8006e9a:	0b5b      	lsrs	r3, r3, #13
 8006e9c:	f003 0307 	and.w	r3, r3, #7
 8006ea0:	4903      	ldr	r1, [pc, #12]	; (8006eb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ea2:	5ccb      	ldrb	r3, [r1, r3]
 8006ea4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	080107e8 	.word	0x080107e8

08006eb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d101      	bne.n	8006ec6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e07b      	b.n	8006fbe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d108      	bne.n	8006ee0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed6:	d009      	beq.n	8006eec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	61da      	str	r2, [r3, #28]
 8006ede:	e005      	b.n	8006eec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d106      	bne.n	8006f0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f7fc f998 	bl	800323c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f22:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f3e:	431a      	orrs	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	691b      	ldr	r3, [r3, #16]
 8006f44:	f003 0302 	and.w	r3, r3, #2
 8006f48:	431a      	orrs	r2, r3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f5c:	431a      	orrs	r2, r3
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	69db      	ldr	r3, [r3, #28]
 8006f62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f66:	431a      	orrs	r2, r3
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f70:	ea42 0103 	orr.w	r1, r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f78:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	430a      	orrs	r2, r1
 8006f82:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	0c1b      	lsrs	r3, r3, #16
 8006f8a:	f003 0104 	and.w	r1, r3, #4
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f92:	f003 0210 	and.w	r2, r3, #16
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	430a      	orrs	r2, r1
 8006f9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	69da      	ldr	r2, [r3, #28]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006fac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b082      	sub	sp, #8
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d101      	bne.n	8006fd8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e041      	b.n	800705c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d106      	bne.n	8006ff2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7fc f96d 	bl	80032cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2202      	movs	r2, #2
 8006ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	3304      	adds	r3, #4
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f000 fc43 	bl	8007890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2201      	movs	r2, #1
 800701e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2201      	movs	r2, #1
 8007026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800705a:	2300      	movs	r3, #0
}
 800705c:	4618      	mov	r0, r3
 800705e:	3708      	adds	r7, #8
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b085      	sub	sp, #20
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007072:	b2db      	uxtb	r3, r3
 8007074:	2b01      	cmp	r3, #1
 8007076:	d001      	beq.n	800707c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	e046      	b.n	800710a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a23      	ldr	r2, [pc, #140]	; (8007118 <HAL_TIM_Base_Start+0xb4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d022      	beq.n	80070d4 <HAL_TIM_Base_Start+0x70>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007096:	d01d      	beq.n	80070d4 <HAL_TIM_Base_Start+0x70>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a1f      	ldr	r2, [pc, #124]	; (800711c <HAL_TIM_Base_Start+0xb8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d018      	beq.n	80070d4 <HAL_TIM_Base_Start+0x70>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <HAL_TIM_Base_Start+0xbc>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d013      	beq.n	80070d4 <HAL_TIM_Base_Start+0x70>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a1c      	ldr	r2, [pc, #112]	; (8007124 <HAL_TIM_Base_Start+0xc0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00e      	beq.n	80070d4 <HAL_TIM_Base_Start+0x70>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a1b      	ldr	r2, [pc, #108]	; (8007128 <HAL_TIM_Base_Start+0xc4>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d009      	beq.n	80070d4 <HAL_TIM_Base_Start+0x70>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a19      	ldr	r2, [pc, #100]	; (800712c <HAL_TIM_Base_Start+0xc8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d004      	beq.n	80070d4 <HAL_TIM_Base_Start+0x70>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a18      	ldr	r2, [pc, #96]	; (8007130 <HAL_TIM_Base_Start+0xcc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d111      	bne.n	80070f8 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f003 0307 	and.w	r3, r3, #7
 80070de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2b06      	cmp	r3, #6
 80070e4:	d010      	beq.n	8007108 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f042 0201 	orr.w	r2, r2, #1
 80070f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f6:	e007      	b.n	8007108 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f042 0201 	orr.w	r2, r2, #1
 8007106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	40010000 	.word	0x40010000
 800711c:	40000400 	.word	0x40000400
 8007120:	40000800 	.word	0x40000800
 8007124:	40000c00 	.word	0x40000c00
 8007128:	40010400 	.word	0x40010400
 800712c:	40014000 	.word	0x40014000
 8007130:	40001800 	.word	0x40001800

08007134 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e041      	b.n	80071ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 f839 	bl	80071d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3304      	adds	r3, #4
 8007170:	4619      	mov	r1, r3
 8007172:	4610      	mov	r0, r2
 8007174:	f000 fb8c 	bl	8007890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2201      	movs	r2, #1
 800719c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2201      	movs	r2, #1
 80071a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2201      	movs	r2, #1
 80071ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071d2:	b480      	push	{r7}
 80071d4:	b083      	sub	sp, #12
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071da:	bf00      	nop
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
	...

080071e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b084      	sub	sp, #16
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d109      	bne.n	800720c <HAL_TIM_PWM_Start+0x24>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	2b01      	cmp	r3, #1
 8007202:	bf14      	ite	ne
 8007204:	2301      	movne	r3, #1
 8007206:	2300      	moveq	r3, #0
 8007208:	b2db      	uxtb	r3, r3
 800720a:	e022      	b.n	8007252 <HAL_TIM_PWM_Start+0x6a>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b04      	cmp	r3, #4
 8007210:	d109      	bne.n	8007226 <HAL_TIM_PWM_Start+0x3e>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007218:	b2db      	uxtb	r3, r3
 800721a:	2b01      	cmp	r3, #1
 800721c:	bf14      	ite	ne
 800721e:	2301      	movne	r3, #1
 8007220:	2300      	moveq	r3, #0
 8007222:	b2db      	uxtb	r3, r3
 8007224:	e015      	b.n	8007252 <HAL_TIM_PWM_Start+0x6a>
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b08      	cmp	r3, #8
 800722a:	d109      	bne.n	8007240 <HAL_TIM_PWM_Start+0x58>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007232:	b2db      	uxtb	r3, r3
 8007234:	2b01      	cmp	r3, #1
 8007236:	bf14      	ite	ne
 8007238:	2301      	movne	r3, #1
 800723a:	2300      	moveq	r3, #0
 800723c:	b2db      	uxtb	r3, r3
 800723e:	e008      	b.n	8007252 <HAL_TIM_PWM_Start+0x6a>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007246:	b2db      	uxtb	r3, r3
 8007248:	2b01      	cmp	r3, #1
 800724a:	bf14      	ite	ne
 800724c:	2301      	movne	r3, #1
 800724e:	2300      	moveq	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e07c      	b.n	8007354 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d104      	bne.n	800726a <HAL_TIM_PWM_Start+0x82>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007268:	e013      	b.n	8007292 <HAL_TIM_PWM_Start+0xaa>
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	2b04      	cmp	r3, #4
 800726e:	d104      	bne.n	800727a <HAL_TIM_PWM_Start+0x92>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2202      	movs	r2, #2
 8007274:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007278:	e00b      	b.n	8007292 <HAL_TIM_PWM_Start+0xaa>
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b08      	cmp	r3, #8
 800727e:	d104      	bne.n	800728a <HAL_TIM_PWM_Start+0xa2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2202      	movs	r2, #2
 8007284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007288:	e003      	b.n	8007292 <HAL_TIM_PWM_Start+0xaa>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2202      	movs	r2, #2
 800728e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2201      	movs	r2, #1
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	4618      	mov	r0, r3
 800729c:	f000 fe73 	bl	8007f86 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a2d      	ldr	r2, [pc, #180]	; (800735c <HAL_TIM_PWM_Start+0x174>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <HAL_TIM_PWM_Start+0xcc>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a2c      	ldr	r2, [pc, #176]	; (8007360 <HAL_TIM_PWM_Start+0x178>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d101      	bne.n	80072b8 <HAL_TIM_PWM_Start+0xd0>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <HAL_TIM_PWM_Start+0xd2>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d007      	beq.n	80072ce <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a22      	ldr	r2, [pc, #136]	; (800735c <HAL_TIM_PWM_Start+0x174>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d022      	beq.n	800731e <HAL_TIM_PWM_Start+0x136>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072e0:	d01d      	beq.n	800731e <HAL_TIM_PWM_Start+0x136>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a1f      	ldr	r2, [pc, #124]	; (8007364 <HAL_TIM_PWM_Start+0x17c>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d018      	beq.n	800731e <HAL_TIM_PWM_Start+0x136>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a1d      	ldr	r2, [pc, #116]	; (8007368 <HAL_TIM_PWM_Start+0x180>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d013      	beq.n	800731e <HAL_TIM_PWM_Start+0x136>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a1c      	ldr	r2, [pc, #112]	; (800736c <HAL_TIM_PWM_Start+0x184>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d00e      	beq.n	800731e <HAL_TIM_PWM_Start+0x136>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a16      	ldr	r2, [pc, #88]	; (8007360 <HAL_TIM_PWM_Start+0x178>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d009      	beq.n	800731e <HAL_TIM_PWM_Start+0x136>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a18      	ldr	r2, [pc, #96]	; (8007370 <HAL_TIM_PWM_Start+0x188>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d004      	beq.n	800731e <HAL_TIM_PWM_Start+0x136>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a16      	ldr	r2, [pc, #88]	; (8007374 <HAL_TIM_PWM_Start+0x18c>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d111      	bne.n	8007342 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f003 0307 	and.w	r3, r3, #7
 8007328:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b06      	cmp	r3, #6
 800732e:	d010      	beq.n	8007352 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0201 	orr.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007340:	e007      	b.n	8007352 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0201 	orr.w	r2, r2, #1
 8007350:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	40010000 	.word	0x40010000
 8007360:	40010400 	.word	0x40010400
 8007364:	40000400 	.word	0x40000400
 8007368:	40000800 	.word	0x40000800
 800736c:	40000c00 	.word	0x40000c00
 8007370:	40014000 	.word	0x40014000
 8007374:	40001800 	.word	0x40001800

08007378 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2200      	movs	r2, #0
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f000 fdfb 	bl	8007f86 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a2e      	ldr	r2, [pc, #184]	; (8007450 <HAL_TIM_PWM_Stop+0xd8>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d004      	beq.n	80073a4 <HAL_TIM_PWM_Stop+0x2c>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a2d      	ldr	r2, [pc, #180]	; (8007454 <HAL_TIM_PWM_Stop+0xdc>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d101      	bne.n	80073a8 <HAL_TIM_PWM_Stop+0x30>
 80073a4:	2301      	movs	r3, #1
 80073a6:	e000      	b.n	80073aa <HAL_TIM_PWM_Stop+0x32>
 80073a8:	2300      	movs	r3, #0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d017      	beq.n	80073de <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	6a1a      	ldr	r2, [r3, #32]
 80073b4:	f241 1311 	movw	r3, #4369	; 0x1111
 80073b8:	4013      	ands	r3, r2
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d10f      	bne.n	80073de <HAL_TIM_PWM_Stop+0x66>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6a1a      	ldr	r2, [r3, #32]
 80073c4:	f240 4344 	movw	r3, #1092	; 0x444
 80073c8:	4013      	ands	r3, r2
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d107      	bne.n	80073de <HAL_TIM_PWM_Stop+0x66>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80073dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6a1a      	ldr	r2, [r3, #32]
 80073e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80073e8:	4013      	ands	r3, r2
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10f      	bne.n	800740e <HAL_TIM_PWM_Stop+0x96>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6a1a      	ldr	r2, [r3, #32]
 80073f4:	f240 4344 	movw	r3, #1092	; 0x444
 80073f8:	4013      	ands	r3, r2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d107      	bne.n	800740e <HAL_TIM_PWM_Stop+0x96>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	f022 0201 	bic.w	r2, r2, #1
 800740c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d104      	bne.n	800741e <HAL_TIM_PWM_Stop+0xa6>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800741c:	e013      	b.n	8007446 <HAL_TIM_PWM_Stop+0xce>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b04      	cmp	r3, #4
 8007422:	d104      	bne.n	800742e <HAL_TIM_PWM_Stop+0xb6>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800742c:	e00b      	b.n	8007446 <HAL_TIM_PWM_Stop+0xce>
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	2b08      	cmp	r3, #8
 8007432:	d104      	bne.n	800743e <HAL_TIM_PWM_Stop+0xc6>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800743c:	e003      	b.n	8007446 <HAL_TIM_PWM_Stop+0xce>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8007446:	2300      	movs	r3, #0
}
 8007448:	4618      	mov	r0, r3
 800744a:	3708      	adds	r7, #8
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	40010000 	.word	0x40010000
 8007454:	40010400 	.word	0x40010400

08007458 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	e041      	b.n	80074f0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d106      	bne.n	8007486 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8007480:	6878      	ldr	r0, [r7, #4]
 8007482:	f7fb ffb7 	bl	80033f4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2202      	movs	r2, #2
 800748a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	3304      	adds	r3, #4
 8007496:	4619      	mov	r1, r3
 8007498:	4610      	mov	r0, r2
 800749a:	f000 f9f9 	bl	8007890 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0208 	bic.w	r2, r2, #8
 80074ac:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	6819      	ldr	r1, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	683a      	ldr	r2, [r7, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2201      	movs	r2, #1
 80074e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	60f8      	str	r0, [r7, #12]
 8007500:	60b9      	str	r1, [r7, #8]
 8007502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800750e:	2b01      	cmp	r3, #1
 8007510:	d101      	bne.n	8007516 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007512:	2302      	movs	r3, #2
 8007514:	e0ae      	b.n	8007674 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b0c      	cmp	r3, #12
 8007522:	f200 809f 	bhi.w	8007664 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	08007561 	.word	0x08007561
 8007530:	08007665 	.word	0x08007665
 8007534:	08007665 	.word	0x08007665
 8007538:	08007665 	.word	0x08007665
 800753c:	080075a1 	.word	0x080075a1
 8007540:	08007665 	.word	0x08007665
 8007544:	08007665 	.word	0x08007665
 8007548:	08007665 	.word	0x08007665
 800754c:	080075e3 	.word	0x080075e3
 8007550:	08007665 	.word	0x08007665
 8007554:	08007665 	.word	0x08007665
 8007558:	08007665 	.word	0x08007665
 800755c:	08007623 	.word	0x08007623
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68b9      	ldr	r1, [r7, #8]
 8007566:	4618      	mov	r0, r3
 8007568:	f000 fa32 	bl	80079d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	699a      	ldr	r2, [r3, #24]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f042 0208 	orr.w	r2, r2, #8
 800757a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	699a      	ldr	r2, [r3, #24]
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0204 	bic.w	r2, r2, #4
 800758a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	6999      	ldr	r1, [r3, #24]
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	691a      	ldr	r2, [r3, #16]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	430a      	orrs	r2, r1
 800759c:	619a      	str	r2, [r3, #24]
      break;
 800759e:	e064      	b.n	800766a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68b9      	ldr	r1, [r7, #8]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f000 fa82 	bl	8007ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	699a      	ldr	r2, [r3, #24]
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699a      	ldr	r2, [r3, #24]
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	6999      	ldr	r1, [r3, #24]
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	021a      	lsls	r2, r3, #8
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	619a      	str	r2, [r3, #24]
      break;
 80075e0:	e043      	b.n	800766a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	68b9      	ldr	r1, [r7, #8]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fad7 	bl	8007b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f042 0208 	orr.w	r2, r2, #8
 80075fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	69da      	ldr	r2, [r3, #28]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0204 	bic.w	r2, r2, #4
 800760c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	69d9      	ldr	r1, [r3, #28]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	430a      	orrs	r2, r1
 800761e:	61da      	str	r2, [r3, #28]
      break;
 8007620:	e023      	b.n	800766a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	68b9      	ldr	r1, [r7, #8]
 8007628:	4618      	mov	r0, r3
 800762a:	f000 fb2b 	bl	8007c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	69da      	ldr	r2, [r3, #28]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800763c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69da      	ldr	r2, [r3, #28]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800764c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69d9      	ldr	r1, [r3, #28]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	691b      	ldr	r3, [r3, #16]
 8007658:	021a      	lsls	r2, r3, #8
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	430a      	orrs	r2, r1
 8007660:	61da      	str	r2, [r3, #28]
      break;
 8007662:	e002      	b.n	800766a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007664:	2301      	movs	r3, #1
 8007666:	75fb      	strb	r3, [r7, #23]
      break;
 8007668:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007672:	7dfb      	ldrb	r3, [r7, #23]
}
 8007674:	4618      	mov	r0, r3
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007690:	2b01      	cmp	r3, #1
 8007692:	d101      	bne.n	8007698 <HAL_TIM_ConfigClockSource+0x1c>
 8007694:	2302      	movs	r3, #2
 8007696:	e0b4      	b.n	8007802 <HAL_TIM_ConfigClockSource+0x186>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2201      	movs	r2, #1
 800769c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	68ba      	ldr	r2, [r7, #8]
 80076c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d0:	d03e      	beq.n	8007750 <HAL_TIM_ConfigClockSource+0xd4>
 80076d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d6:	f200 8087 	bhi.w	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 80076da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076de:	f000 8086 	beq.w	80077ee <HAL_TIM_ConfigClockSource+0x172>
 80076e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076e6:	d87f      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 80076e8:	2b70      	cmp	r3, #112	; 0x70
 80076ea:	d01a      	beq.n	8007722 <HAL_TIM_ConfigClockSource+0xa6>
 80076ec:	2b70      	cmp	r3, #112	; 0x70
 80076ee:	d87b      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f0:	2b60      	cmp	r3, #96	; 0x60
 80076f2:	d050      	beq.n	8007796 <HAL_TIM_ConfigClockSource+0x11a>
 80076f4:	2b60      	cmp	r3, #96	; 0x60
 80076f6:	d877      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 80076f8:	2b50      	cmp	r3, #80	; 0x50
 80076fa:	d03c      	beq.n	8007776 <HAL_TIM_ConfigClockSource+0xfa>
 80076fc:	2b50      	cmp	r3, #80	; 0x50
 80076fe:	d873      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007700:	2b40      	cmp	r3, #64	; 0x40
 8007702:	d058      	beq.n	80077b6 <HAL_TIM_ConfigClockSource+0x13a>
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	d86f      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007708:	2b30      	cmp	r3, #48	; 0x30
 800770a:	d064      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x15a>
 800770c:	2b30      	cmp	r3, #48	; 0x30
 800770e:	d86b      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007710:	2b20      	cmp	r3, #32
 8007712:	d060      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007714:	2b20      	cmp	r3, #32
 8007716:	d867      	bhi.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
 8007718:	2b00      	cmp	r3, #0
 800771a:	d05c      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x15a>
 800771c:	2b10      	cmp	r3, #16
 800771e:	d05a      	beq.n	80077d6 <HAL_TIM_ConfigClockSource+0x15a>
 8007720:	e062      	b.n	80077e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6899      	ldr	r1, [r3, #8]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f000 fc08 	bl	8007f46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007744:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	609a      	str	r2, [r3, #8]
      break;
 800774e:	e04f      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6818      	ldr	r0, [r3, #0]
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	6899      	ldr	r1, [r3, #8]
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	68db      	ldr	r3, [r3, #12]
 8007760:	f000 fbf1 	bl	8007f46 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689a      	ldr	r2, [r3, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007772:	609a      	str	r2, [r3, #8]
      break;
 8007774:	e03c      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6818      	ldr	r0, [r3, #0]
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	6859      	ldr	r1, [r3, #4]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	461a      	mov	r2, r3
 8007784:	f000 fb65 	bl	8007e52 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2150      	movs	r1, #80	; 0x50
 800778e:	4618      	mov	r0, r3
 8007790:	f000 fbbe 	bl	8007f10 <TIM_ITRx_SetConfig>
      break;
 8007794:	e02c      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	6859      	ldr	r1, [r3, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	461a      	mov	r2, r3
 80077a4:	f000 fb84 	bl	8007eb0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	2160      	movs	r1, #96	; 0x60
 80077ae:	4618      	mov	r0, r3
 80077b0:	f000 fbae 	bl	8007f10 <TIM_ITRx_SetConfig>
      break;
 80077b4:	e01c      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6818      	ldr	r0, [r3, #0]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	6859      	ldr	r1, [r3, #4]
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	461a      	mov	r2, r3
 80077c4:	f000 fb45 	bl	8007e52 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	2140      	movs	r1, #64	; 0x40
 80077ce:	4618      	mov	r0, r3
 80077d0:	f000 fb9e 	bl	8007f10 <TIM_ITRx_SetConfig>
      break;
 80077d4:	e00c      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4619      	mov	r1, r3
 80077e0:	4610      	mov	r0, r2
 80077e2:	f000 fb95 	bl	8007f10 <TIM_ITRx_SetConfig>
      break;
 80077e6:	e003      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80077e8:	2301      	movs	r3, #1
 80077ea:	73fb      	strb	r3, [r7, #15]
      break;
 80077ec:	e000      	b.n	80077f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80077ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007800:	7bfb      	ldrb	r3, [r7, #15]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}

0800780a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800780a:	b580      	push	{r7, lr}
 800780c:	b082      	sub	sp, #8
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
 8007812:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <HAL_TIM_SlaveConfigSynchro+0x18>
 800781e:	2302      	movs	r3, #2
 8007820:	e031      	b.n	8007886 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2201      	movs	r2, #1
 8007826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007832:	6839      	ldr	r1, [r7, #0]
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fa7b 	bl	8007d30 <TIM_SlaveTimer_SetConfig>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2200      	movs	r2, #0
 800784c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e018      	b.n	8007886 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68da      	ldr	r2, [r3, #12]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007862:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	68da      	ldr	r2, [r3, #12]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007872:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2201      	movs	r2, #1
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007890:	b480      	push	{r7}
 8007892:	b085      	sub	sp, #20
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a40      	ldr	r2, [pc, #256]	; (80079a4 <TIM_Base_SetConfig+0x114>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d013      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078ae:	d00f      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4a3d      	ldr	r2, [pc, #244]	; (80079a8 <TIM_Base_SetConfig+0x118>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d00b      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	4a3c      	ldr	r2, [pc, #240]	; (80079ac <TIM_Base_SetConfig+0x11c>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d007      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	4a3b      	ldr	r2, [pc, #236]	; (80079b0 <TIM_Base_SetConfig+0x120>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d003      	beq.n	80078d0 <TIM_Base_SetConfig+0x40>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	4a3a      	ldr	r2, [pc, #232]	; (80079b4 <TIM_Base_SetConfig+0x124>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d108      	bne.n	80078e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2f      	ldr	r2, [pc, #188]	; (80079a4 <TIM_Base_SetConfig+0x114>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d02b      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078f0:	d027      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2c      	ldr	r2, [pc, #176]	; (80079a8 <TIM_Base_SetConfig+0x118>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d023      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a2b      	ldr	r2, [pc, #172]	; (80079ac <TIM_Base_SetConfig+0x11c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d01f      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a2a      	ldr	r2, [pc, #168]	; (80079b0 <TIM_Base_SetConfig+0x120>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d01b      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a29      	ldr	r2, [pc, #164]	; (80079b4 <TIM_Base_SetConfig+0x124>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d017      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a28      	ldr	r2, [pc, #160]	; (80079b8 <TIM_Base_SetConfig+0x128>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d013      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a27      	ldr	r2, [pc, #156]	; (80079bc <TIM_Base_SetConfig+0x12c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d00f      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a26      	ldr	r2, [pc, #152]	; (80079c0 <TIM_Base_SetConfig+0x130>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00b      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	4a25      	ldr	r2, [pc, #148]	; (80079c4 <TIM_Base_SetConfig+0x134>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d007      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	4a24      	ldr	r2, [pc, #144]	; (80079c8 <TIM_Base_SetConfig+0x138>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d003      	beq.n	8007942 <TIM_Base_SetConfig+0xb2>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a23      	ldr	r2, [pc, #140]	; (80079cc <TIM_Base_SetConfig+0x13c>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d108      	bne.n	8007954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	4313      	orrs	r3, r2
 8007952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	695b      	ldr	r3, [r3, #20]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	68fa      	ldr	r2, [r7, #12]
 8007966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	689a      	ldr	r2, [r3, #8]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4a0a      	ldr	r2, [pc, #40]	; (80079a4 <TIM_Base_SetConfig+0x114>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d003      	beq.n	8007988 <TIM_Base_SetConfig+0xf8>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	4a0c      	ldr	r2, [pc, #48]	; (80079b4 <TIM_Base_SetConfig+0x124>)
 8007984:	4293      	cmp	r3, r2
 8007986:	d103      	bne.n	8007990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	691a      	ldr	r2, [r3, #16]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	615a      	str	r2, [r3, #20]
}
 8007996:	bf00      	nop
 8007998:	3714      	adds	r7, #20
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	40010000 	.word	0x40010000
 80079a8:	40000400 	.word	0x40000400
 80079ac:	40000800 	.word	0x40000800
 80079b0:	40000c00 	.word	0x40000c00
 80079b4:	40010400 	.word	0x40010400
 80079b8:	40014000 	.word	0x40014000
 80079bc:	40014400 	.word	0x40014400
 80079c0:	40014800 	.word	0x40014800
 80079c4:	40001800 	.word	0x40001800
 80079c8:	40001c00 	.word	0x40001c00
 80079cc:	40002000 	.word	0x40002000

080079d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b087      	sub	sp, #28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
 80079d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a1b      	ldr	r3, [r3, #32]
 80079de:	f023 0201 	bic.w	r2, r3, #1
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a1b      	ldr	r3, [r3, #32]
 80079ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	f023 0303 	bic.w	r3, r3, #3
 8007a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	f023 0302 	bic.w	r3, r3, #2
 8007a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	4313      	orrs	r3, r2
 8007a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	4a20      	ldr	r2, [pc, #128]	; (8007aa8 <TIM_OC1_SetConfig+0xd8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d003      	beq.n	8007a34 <TIM_OC1_SetConfig+0x64>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	4a1f      	ldr	r2, [pc, #124]	; (8007aac <TIM_OC1_SetConfig+0xdc>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d10c      	bne.n	8007a4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	f023 0308 	bic.w	r3, r3, #8
 8007a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	68db      	ldr	r3, [r3, #12]
 8007a40:	697a      	ldr	r2, [r7, #20]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f023 0304 	bic.w	r3, r3, #4
 8007a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	4a15      	ldr	r2, [pc, #84]	; (8007aa8 <TIM_OC1_SetConfig+0xd8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d003      	beq.n	8007a5e <TIM_OC1_SetConfig+0x8e>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	4a14      	ldr	r2, [pc, #80]	; (8007aac <TIM_OC1_SetConfig+0xdc>)
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	d111      	bne.n	8007a82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	693a      	ldr	r2, [r7, #16]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	699b      	ldr	r3, [r3, #24]
 8007a7c:	693a      	ldr	r2, [r7, #16]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	621a      	str	r2, [r3, #32]
}
 8007a9c:	bf00      	nop
 8007a9e:	371c      	adds	r7, #28
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa6:	4770      	bx	lr
 8007aa8:	40010000 	.word	0x40010000
 8007aac:	40010400 	.word	0x40010400

08007ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6a1b      	ldr	r3, [r3, #32]
 8007abe:	f023 0210 	bic.w	r2, r3, #16
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6a1b      	ldr	r3, [r3, #32]
 8007aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	699b      	ldr	r3, [r3, #24]
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	021b      	lsls	r3, r3, #8
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	f023 0320 	bic.w	r3, r3, #32
 8007afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	689b      	ldr	r3, [r3, #8]
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	4313      	orrs	r3, r2
 8007b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a22      	ldr	r2, [pc, #136]	; (8007b94 <TIM_OC2_SetConfig+0xe4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d003      	beq.n	8007b18 <TIM_OC2_SetConfig+0x68>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	4a21      	ldr	r2, [pc, #132]	; (8007b98 <TIM_OC2_SetConfig+0xe8>)
 8007b14:	4293      	cmp	r3, r2
 8007b16:	d10d      	bne.n	8007b34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	68db      	ldr	r3, [r3, #12]
 8007b24:	011b      	lsls	r3, r3, #4
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b2c:	697b      	ldr	r3, [r7, #20]
 8007b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a17      	ldr	r2, [pc, #92]	; (8007b94 <TIM_OC2_SetConfig+0xe4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d003      	beq.n	8007b44 <TIM_OC2_SetConfig+0x94>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a16      	ldr	r2, [pc, #88]	; (8007b98 <TIM_OC2_SetConfig+0xe8>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d113      	bne.n	8007b6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007b52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	695b      	ldr	r3, [r3, #20]
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	693a      	ldr	r2, [r7, #16]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	693a      	ldr	r2, [r7, #16]
 8007b68:	4313      	orrs	r3, r2
 8007b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	685a      	ldr	r2, [r3, #4]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	621a      	str	r2, [r3, #32]
}
 8007b86:	bf00      	nop
 8007b88:	371c      	adds	r7, #28
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	40010000 	.word	0x40010000
 8007b98:	40010400 	.word	0x40010400

08007b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b087      	sub	sp, #28
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6a1b      	ldr	r3, [r3, #32]
 8007baa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685b      	ldr	r3, [r3, #4]
 8007bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	69db      	ldr	r3, [r3, #28]
 8007bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	f023 0303 	bic.w	r3, r3, #3
 8007bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	689b      	ldr	r3, [r3, #8]
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	697a      	ldr	r2, [r7, #20]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a21      	ldr	r2, [pc, #132]	; (8007c7c <TIM_OC3_SetConfig+0xe0>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d003      	beq.n	8007c02 <TIM_OC3_SetConfig+0x66>
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a20      	ldr	r2, [pc, #128]	; (8007c80 <TIM_OC3_SetConfig+0xe4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d10d      	bne.n	8007c1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c02:	697b      	ldr	r3, [r7, #20]
 8007c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	021b      	lsls	r3, r3, #8
 8007c10:	697a      	ldr	r2, [r7, #20]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a16      	ldr	r2, [pc, #88]	; (8007c7c <TIM_OC3_SetConfig+0xe0>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d003      	beq.n	8007c2e <TIM_OC3_SetConfig+0x92>
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	4a15      	ldr	r2, [pc, #84]	; (8007c80 <TIM_OC3_SetConfig+0xe4>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d113      	bne.n	8007c56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	011b      	lsls	r3, r3, #4
 8007c44:	693a      	ldr	r2, [r7, #16]
 8007c46:	4313      	orrs	r3, r2
 8007c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	699b      	ldr	r3, [r3, #24]
 8007c4e:	011b      	lsls	r3, r3, #4
 8007c50:	693a      	ldr	r2, [r7, #16]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	693a      	ldr	r2, [r7, #16]
 8007c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68fa      	ldr	r2, [r7, #12]
 8007c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	697a      	ldr	r2, [r7, #20]
 8007c6e:	621a      	str	r2, [r3, #32]
}
 8007c70:	bf00      	nop
 8007c72:	371c      	adds	r7, #28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	40010000 	.word	0x40010000
 8007c80:	40010400 	.word	0x40010400

08007c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	021b      	lsls	r3, r3, #8
 8007cc2:	68fa      	ldr	r2, [r7, #12]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	031b      	lsls	r3, r3, #12
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	4a12      	ldr	r2, [pc, #72]	; (8007d28 <TIM_OC4_SetConfig+0xa4>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d003      	beq.n	8007cec <TIM_OC4_SetConfig+0x68>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	4a11      	ldr	r2, [pc, #68]	; (8007d2c <TIM_OC4_SetConfig+0xa8>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d109      	bne.n	8007d00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	019b      	lsls	r3, r3, #6
 8007cfa:	697a      	ldr	r2, [r7, #20]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	697a      	ldr	r2, [r7, #20]
 8007d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	68fa      	ldr	r2, [r7, #12]
 8007d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	685a      	ldr	r2, [r3, #4]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	693a      	ldr	r2, [r7, #16]
 8007d18:	621a      	str	r2, [r3, #32]
}
 8007d1a:	bf00      	nop
 8007d1c:	371c      	adds	r7, #28
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40010400 	.word	0x40010400

08007d30 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d4c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	693a      	ldr	r2, [r7, #16]
 8007d54:	4313      	orrs	r3, r2
 8007d56:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007d58:	693b      	ldr	r3, [r7, #16]
 8007d5a:	f023 0307 	bic.w	r3, r3, #7
 8007d5e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	693a      	ldr	r2, [r7, #16]
 8007d70:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	2b70      	cmp	r3, #112	; 0x70
 8007d78:	d01a      	beq.n	8007db0 <TIM_SlaveTimer_SetConfig+0x80>
 8007d7a:	2b70      	cmp	r3, #112	; 0x70
 8007d7c:	d860      	bhi.n	8007e40 <TIM_SlaveTimer_SetConfig+0x110>
 8007d7e:	2b60      	cmp	r3, #96	; 0x60
 8007d80:	d054      	beq.n	8007e2c <TIM_SlaveTimer_SetConfig+0xfc>
 8007d82:	2b60      	cmp	r3, #96	; 0x60
 8007d84:	d85c      	bhi.n	8007e40 <TIM_SlaveTimer_SetConfig+0x110>
 8007d86:	2b50      	cmp	r3, #80	; 0x50
 8007d88:	d046      	beq.n	8007e18 <TIM_SlaveTimer_SetConfig+0xe8>
 8007d8a:	2b50      	cmp	r3, #80	; 0x50
 8007d8c:	d858      	bhi.n	8007e40 <TIM_SlaveTimer_SetConfig+0x110>
 8007d8e:	2b40      	cmp	r3, #64	; 0x40
 8007d90:	d019      	beq.n	8007dc6 <TIM_SlaveTimer_SetConfig+0x96>
 8007d92:	2b40      	cmp	r3, #64	; 0x40
 8007d94:	d854      	bhi.n	8007e40 <TIM_SlaveTimer_SetConfig+0x110>
 8007d96:	2b30      	cmp	r3, #48	; 0x30
 8007d98:	d055      	beq.n	8007e46 <TIM_SlaveTimer_SetConfig+0x116>
 8007d9a:	2b30      	cmp	r3, #48	; 0x30
 8007d9c:	d850      	bhi.n	8007e40 <TIM_SlaveTimer_SetConfig+0x110>
 8007d9e:	2b20      	cmp	r3, #32
 8007da0:	d051      	beq.n	8007e46 <TIM_SlaveTimer_SetConfig+0x116>
 8007da2:	2b20      	cmp	r3, #32
 8007da4:	d84c      	bhi.n	8007e40 <TIM_SlaveTimer_SetConfig+0x110>
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d04d      	beq.n	8007e46 <TIM_SlaveTimer_SetConfig+0x116>
 8007daa:	2b10      	cmp	r3, #16
 8007dac:	d04b      	beq.n	8007e46 <TIM_SlaveTimer_SetConfig+0x116>
 8007dae:	e047      	b.n	8007e40 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6818      	ldr	r0, [r3, #0]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	68d9      	ldr	r1, [r3, #12]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	f000 f8c1 	bl	8007f46 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007dc4:	e040      	b.n	8007e48 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b05      	cmp	r3, #5
 8007dcc:	d101      	bne.n	8007dd2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	e03b      	b.n	8007e4a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
 8007dd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6a1a      	ldr	r2, [r3, #32]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f022 0201 	bic.w	r2, r2, #1
 8007de8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007df8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	011b      	lsls	r3, r3, #4
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68fa      	ldr	r2, [r7, #12]
 8007e14:	621a      	str	r2, [r3, #32]
      break;
 8007e16:	e017      	b.n	8007e48 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	6899      	ldr	r1, [r3, #8]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	461a      	mov	r2, r3
 8007e26:	f000 f814 	bl	8007e52 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007e2a:	e00d      	b.n	8007e48 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	6899      	ldr	r1, [r3, #8]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	f000 f839 	bl	8007eb0 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007e3e:	e003      	b.n	8007e48 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007e40:	2301      	movs	r3, #1
 8007e42:	75fb      	strb	r3, [r7, #23]
      break;
 8007e44:	e000      	b.n	8007e48 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007e46:	bf00      	nop
  }

  return status;
 8007e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	3718      	adds	r7, #24
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b087      	sub	sp, #28
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	60f8      	str	r0, [r7, #12]
 8007e5a:	60b9      	str	r1, [r7, #8]
 8007e5c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	f023 0201 	bic.w	r2, r3, #1
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	699b      	ldr	r3, [r3, #24]
 8007e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e7c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	011b      	lsls	r3, r3, #4
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	4313      	orrs	r3, r2
 8007e86:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	f023 030a 	bic.w	r3, r3, #10
 8007e8e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	697a      	ldr	r2, [r7, #20]
 8007ea2:	621a      	str	r2, [r3, #32]
}
 8007ea4:	bf00      	nop
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b087      	sub	sp, #28
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	60f8      	str	r0, [r7, #12]
 8007eb8:	60b9      	str	r1, [r7, #8]
 8007eba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	f023 0210 	bic.w	r2, r3, #16
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	699b      	ldr	r3, [r3, #24]
 8007ecc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	6a1b      	ldr	r3, [r3, #32]
 8007ed2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007eda:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	031b      	lsls	r3, r3, #12
 8007ee0:	697a      	ldr	r2, [r7, #20]
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007eec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007eee:	68bb      	ldr	r3, [r7, #8]
 8007ef0:	011b      	lsls	r3, r3, #4
 8007ef2:	693a      	ldr	r2, [r7, #16]
 8007ef4:	4313      	orrs	r3, r2
 8007ef6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	621a      	str	r2, [r3, #32]
}
 8007f04:	bf00      	nop
 8007f06:	371c      	adds	r7, #28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b085      	sub	sp, #20
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f28:	683a      	ldr	r2, [r7, #0]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	f043 0307 	orr.w	r3, r3, #7
 8007f32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68fa      	ldr	r2, [r7, #12]
 8007f38:	609a      	str	r2, [r3, #8]
}
 8007f3a:	bf00      	nop
 8007f3c:	3714      	adds	r7, #20
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b087      	sub	sp, #28
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	60f8      	str	r0, [r7, #12]
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	607a      	str	r2, [r7, #4]
 8007f52:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f60:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	021a      	lsls	r2, r3, #8
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	697a      	ldr	r2, [r7, #20]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	697a      	ldr	r2, [r7, #20]
 8007f78:	609a      	str	r2, [r3, #8]
}
 8007f7a:	bf00      	nop
 8007f7c:	371c      	adds	r7, #28
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f84:	4770      	bx	lr

08007f86 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007f86:	b480      	push	{r7}
 8007f88:	b087      	sub	sp, #28
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	60f8      	str	r0, [r7, #12]
 8007f8e:	60b9      	str	r1, [r7, #8]
 8007f90:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	f003 031f 	and.w	r3, r3, #31
 8007f98:	2201      	movs	r2, #1
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	6a1a      	ldr	r2, [r3, #32]
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	43db      	mvns	r3, r3
 8007fa8:	401a      	ands	r2, r3
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6a1a      	ldr	r2, [r3, #32]
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f003 031f 	and.w	r3, r3, #31
 8007fb8:	6879      	ldr	r1, [r7, #4]
 8007fba:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	621a      	str	r2, [r3, #32]
}
 8007fc4:	bf00      	nop
 8007fc6:	371c      	adds	r7, #28
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d101      	bne.n	8007fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	e05a      	b.n	800809e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2201      	movs	r2, #1
 8007fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800800e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	4313      	orrs	r3, r2
 8008018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68fa      	ldr	r2, [r7, #12]
 8008020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a21      	ldr	r2, [pc, #132]	; (80080ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008028:	4293      	cmp	r3, r2
 800802a:	d022      	beq.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008034:	d01d      	beq.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4a1d      	ldr	r2, [pc, #116]	; (80080b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800803c:	4293      	cmp	r3, r2
 800803e:	d018      	beq.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a1b      	ldr	r2, [pc, #108]	; (80080b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d013      	beq.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a1a      	ldr	r2, [pc, #104]	; (80080b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d00e      	beq.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a18      	ldr	r2, [pc, #96]	; (80080bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d009      	beq.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a17      	ldr	r2, [pc, #92]	; (80080c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d004      	beq.n	8008072 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a15      	ldr	r2, [pc, #84]	; (80080c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d10c      	bne.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008078:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	4313      	orrs	r3, r2
 8008082:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800809c:	2300      	movs	r3, #0
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	40010000 	.word	0x40010000
 80080b0:	40000400 	.word	0x40000400
 80080b4:	40000800 	.word	0x40000800
 80080b8:	40000c00 	.word	0x40000c00
 80080bc:	40010400 	.word	0x40010400
 80080c0:	40014000 	.word	0x40014000
 80080c4:	40001800 	.word	0x40001800

080080c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d101      	bne.n	80080e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80080e0:	2302      	movs	r3, #2
 80080e2:	e03d      	b.n	8008160 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	4313      	orrs	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	4313      	orrs	r3, r2
 8008114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4313      	orrs	r3, r2
 8008122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	4313      	orrs	r3, r2
 8008130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	4313      	orrs	r3, r2
 800813e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	69db      	ldr	r3, [r3, #28]
 800814a:	4313      	orrs	r3, r2
 800814c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800815e:	2300      	movs	r3, #0
}
 8008160:	4618      	mov	r0, r3
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d101      	bne.n	800817e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800817a:	2301      	movs	r3, #1
 800817c:	e03f      	b.n	80081fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008184:	b2db      	uxtb	r3, r3
 8008186:	2b00      	cmp	r3, #0
 8008188:	d106      	bne.n	8008198 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7fb f9b2 	bl	80034fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2224      	movs	r2, #36	; 0x24
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	68da      	ldr	r2, [r3, #12]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80081ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 ffcd 	bl	8009150 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	695a      	ldr	r2, [r3, #20]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	68da      	ldr	r2, [r3, #12]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2220      	movs	r2, #32
 80081f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2220      	movs	r2, #32
 80081f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
	...

08008208 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08c      	sub	sp, #48	; 0x30
 800820c:	af00      	add	r7, sp, #0
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	4613      	mov	r3, r2
 8008214:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b20      	cmp	r3, #32
 8008220:	d165      	bne.n	80082ee <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008222:	68bb      	ldr	r3, [r7, #8]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <HAL_UART_Transmit_DMA+0x26>
 8008228:	88fb      	ldrh	r3, [r7, #6]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d101      	bne.n	8008232 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	e05e      	b.n	80082f0 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008238:	2b01      	cmp	r3, #1
 800823a:	d101      	bne.n	8008240 <HAL_UART_Transmit_DMA+0x38>
 800823c:	2302      	movs	r3, #2
 800823e:	e057      	b.n	80082f0 <HAL_UART_Transmit_DMA+0xe8>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2201      	movs	r2, #1
 8008244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	88fa      	ldrh	r2, [r7, #6]
 8008252:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	88fa      	ldrh	r2, [r7, #6]
 8008258:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	2200      	movs	r2, #0
 800825e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2221      	movs	r2, #33	; 0x21
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800826c:	4a22      	ldr	r2, [pc, #136]	; (80082f8 <HAL_UART_Transmit_DMA+0xf0>)
 800826e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008274:	4a21      	ldr	r2, [pc, #132]	; (80082fc <HAL_UART_Transmit_DMA+0xf4>)
 8008276:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800827c:	4a20      	ldr	r2, [pc, #128]	; (8008300 <HAL_UART_Transmit_DMA+0xf8>)
 800827e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008284:	2200      	movs	r2, #0
 8008286:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008288:	f107 0308 	add.w	r3, r7, #8
 800828c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008294:	6819      	ldr	r1, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	3304      	adds	r3, #4
 800829c:	461a      	mov	r2, r3
 800829e:	88fb      	ldrh	r3, [r7, #6]
 80082a0:	f7fb fe8e 	bl	8003fc0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80082ac:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3314      	adds	r3, #20
 80082bc:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	617b      	str	r3, [r7, #20]
   return(result);
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3314      	adds	r3, #20
 80082d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80082d6:	627a      	str	r2, [r7, #36]	; 0x24
 80082d8:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6a39      	ldr	r1, [r7, #32]
 80082dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e5      	bne.n	80082b6 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	e000      	b.n	80082f0 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 80082ee:	2302      	movs	r3, #2
  }
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3730      	adds	r7, #48	; 0x30
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	080089e9 	.word	0x080089e9
 80082fc:	08008a83 	.word	0x08008a83
 8008300:	08008bfb 	.word	0x08008bfb

08008304 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b084      	sub	sp, #16
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	4613      	mov	r3, r2
 8008310:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008318:	b2db      	uxtb	r3, r3
 800831a:	2b20      	cmp	r3, #32
 800831c:	d11d      	bne.n	800835a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <HAL_UART_Receive_DMA+0x26>
 8008324:	88fb      	ldrh	r3, [r7, #6]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d101      	bne.n	800832e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800832a:	2301      	movs	r3, #1
 800832c:	e016      	b.n	800835c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008334:	2b01      	cmp	r3, #1
 8008336:	d101      	bne.n	800833c <HAL_UART_Receive_DMA+0x38>
 8008338:	2302      	movs	r3, #2
 800833a:	e00f      	b.n	800835c <HAL_UART_Receive_DMA+0x58>
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	2201      	movs	r2, #1
 8008340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2200      	movs	r2, #0
 8008348:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800834a:	88fb      	ldrh	r3, [r7, #6]
 800834c:	461a      	mov	r2, r3
 800834e:	68b9      	ldr	r1, [r7, #8]
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	f000 fc9d 	bl	8008c90 <UART_Start_Receive_DMA>
 8008356:	4603      	mov	r3, r0
 8008358:	e000      	b.n	800835c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800835a:	2302      	movs	r3, #2
  }
}
 800835c:	4618      	mov	r0, r3
 800835e:	3710      	adds	r7, #16
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b090      	sub	sp, #64	; 0x40
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800836c:	2300      	movs	r3, #0
 800836e:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800837a:	2b80      	cmp	r3, #128	; 0x80
 800837c:	bf0c      	ite	eq
 800837e:	2301      	moveq	r3, #1
 8008380:	2300      	movne	r3, #0
 8008382:	b2db      	uxtb	r3, r3
 8008384:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838c:	b2db      	uxtb	r3, r3
 800838e:	2b21      	cmp	r3, #33	; 0x21
 8008390:	d128      	bne.n	80083e4 <HAL_UART_DMAStop+0x80>
 8008392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008394:	2b00      	cmp	r3, #0
 8008396:	d025      	beq.n	80083e4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	3314      	adds	r3, #20
 800839e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	e853 3f00 	ldrex	r3, [r3]
 80083a6:	623b      	str	r3, [r7, #32]
   return(result);
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	3314      	adds	r3, #20
 80083b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083b8:	633a      	str	r2, [r7, #48]	; 0x30
 80083ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083c0:	e841 2300 	strex	r3, r2, [r1]
 80083c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d1e5      	bne.n	8008398 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d004      	beq.n	80083de <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083d8:	4618      	mov	r0, r3
 80083da:	f7fb fe49 	bl	8004070 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f000 fcf4 	bl	8008dcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ee:	2b40      	cmp	r3, #64	; 0x40
 80083f0:	bf0c      	ite	eq
 80083f2:	2301      	moveq	r3, #1
 80083f4:	2300      	movne	r3, #0
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008400:	b2db      	uxtb	r3, r3
 8008402:	2b22      	cmp	r3, #34	; 0x22
 8008404:	d128      	bne.n	8008458 <HAL_UART_DMAStop+0xf4>
 8008406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008408:	2b00      	cmp	r3, #0
 800840a:	d025      	beq.n	8008458 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3314      	adds	r3, #20
 8008412:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008414:	693b      	ldr	r3, [r7, #16]
 8008416:	e853 3f00 	ldrex	r3, [r3]
 800841a:	60fb      	str	r3, [r7, #12]
   return(result);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008422:	637b      	str	r3, [r7, #52]	; 0x34
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3314      	adds	r3, #20
 800842a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800842c:	61fa      	str	r2, [r7, #28]
 800842e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008430:	69b9      	ldr	r1, [r7, #24]
 8008432:	69fa      	ldr	r2, [r7, #28]
 8008434:	e841 2300 	strex	r3, r2, [r1]
 8008438:	617b      	str	r3, [r7, #20]
   return(result);
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d1e5      	bne.n	800840c <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	2b00      	cmp	r3, #0
 8008446:	d004      	beq.n	8008452 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	4618      	mov	r0, r3
 800844e:	f7fb fe0f 	bl	8004070 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fce2 	bl	8008e1c <UART_EndRxTransfer>
  }

  return HAL_OK;
 8008458:	2300      	movs	r3, #0
}
 800845a:	4618      	mov	r0, r3
 800845c:	3740      	adds	r7, #64	; 0x40
 800845e:	46bd      	mov	sp, r7
 8008460:	bd80      	pop	{r7, pc}
	...

08008464 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b0ba      	sub	sp, #232	; 0xe8
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	695b      	ldr	r3, [r3, #20]
 8008486:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800848a:	2300      	movs	r3, #0
 800848c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008490:	2300      	movs	r3, #0
 8008492:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800849a:	f003 030f 	and.w	r3, r3, #15
 800849e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80084a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10f      	bne.n	80084ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80084aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ae:	f003 0320 	and.w	r3, r3, #32
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d009      	beq.n	80084ca <HAL_UART_IRQHandler+0x66>
 80084b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ba:	f003 0320 	and.w	r3, r3, #32
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d003      	beq.n	80084ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fd89 	bl	8008fda <UART_Receive_IT>
      return;
 80084c8:	e256      	b.n	8008978 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80084ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	f000 80de 	beq.w	8008690 <HAL_UART_IRQHandler+0x22c>
 80084d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084d8:	f003 0301 	and.w	r3, r3, #1
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d106      	bne.n	80084ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80084e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f000 80d1 	beq.w	8008690 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80084ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00b      	beq.n	8008512 <HAL_UART_IRQHandler+0xae>
 80084fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008502:	2b00      	cmp	r3, #0
 8008504:	d005      	beq.n	8008512 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	f043 0201 	orr.w	r2, r3, #1
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008516:	f003 0304 	and.w	r3, r3, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00b      	beq.n	8008536 <HAL_UART_IRQHandler+0xd2>
 800851e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d005      	beq.n	8008536 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	f043 0202 	orr.w	r2, r3, #2
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853a:	f003 0302 	and.w	r3, r3, #2
 800853e:	2b00      	cmp	r3, #0
 8008540:	d00b      	beq.n	800855a <HAL_UART_IRQHandler+0xf6>
 8008542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008546:	f003 0301 	and.w	r3, r3, #1
 800854a:	2b00      	cmp	r3, #0
 800854c:	d005      	beq.n	800855a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008552:	f043 0204 	orr.w	r2, r3, #4
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800855a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800855e:	f003 0308 	and.w	r3, r3, #8
 8008562:	2b00      	cmp	r3, #0
 8008564:	d011      	beq.n	800858a <HAL_UART_IRQHandler+0x126>
 8008566:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800856a:	f003 0320 	and.w	r3, r3, #32
 800856e:	2b00      	cmp	r3, #0
 8008570:	d105      	bne.n	800857e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008576:	f003 0301 	and.w	r3, r3, #1
 800857a:	2b00      	cmp	r3, #0
 800857c:	d005      	beq.n	800858a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	f043 0208 	orr.w	r2, r3, #8
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	2b00      	cmp	r3, #0
 8008590:	f000 81ed 	beq.w	800896e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008598:	f003 0320 	and.w	r3, r3, #32
 800859c:	2b00      	cmp	r3, #0
 800859e:	d008      	beq.n	80085b2 <HAL_UART_IRQHandler+0x14e>
 80085a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085a4:	f003 0320 	and.w	r3, r3, #32
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d002      	beq.n	80085b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f000 fd14 	bl	8008fda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085bc:	2b40      	cmp	r3, #64	; 0x40
 80085be:	bf0c      	ite	eq
 80085c0:	2301      	moveq	r3, #1
 80085c2:	2300      	movne	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f003 0308 	and.w	r3, r3, #8
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d103      	bne.n	80085de <HAL_UART_IRQHandler+0x17a>
 80085d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d04f      	beq.n	800867e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fc1c 	bl	8008e1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695b      	ldr	r3, [r3, #20]
 80085ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085ee:	2b40      	cmp	r3, #64	; 0x40
 80085f0:	d141      	bne.n	8008676 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	3314      	adds	r3, #20
 80085f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008600:	e853 3f00 	ldrex	r3, [r3]
 8008604:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008608:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800860c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008610:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3314      	adds	r3, #20
 800861a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800861e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008626:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800862a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800862e:	e841 2300 	strex	r3, r2, [r1]
 8008632:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008636:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d1d9      	bne.n	80085f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	2b00      	cmp	r3, #0
 8008644:	d013      	beq.n	800866e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	4a7d      	ldr	r2, [pc, #500]	; (8008840 <HAL_UART_IRQHandler+0x3dc>)
 800864c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	4618      	mov	r0, r3
 8008654:	f7fb fd7c 	bl	8004150 <HAL_DMA_Abort_IT>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d016      	beq.n	800868c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008668:	4610      	mov	r0, r2
 800866a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800866c:	e00e      	b.n	800868c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f9a4 	bl	80089bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008674:	e00a      	b.n	800868c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f9a0 	bl	80089bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800867c:	e006      	b.n	800868c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f99c 	bl	80089bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800868a:	e170      	b.n	800896e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800868c:	bf00      	nop
    return;
 800868e:	e16e      	b.n	800896e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008694:	2b01      	cmp	r3, #1
 8008696:	f040 814a 	bne.w	800892e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800869a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800869e:	f003 0310 	and.w	r3, r3, #16
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	f000 8143 	beq.w	800892e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80086a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086ac:	f003 0310 	and.w	r3, r3, #16
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	f000 813c 	beq.w	800892e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086b6:	2300      	movs	r3, #0
 80086b8:	60bb      	str	r3, [r7, #8]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	60bb      	str	r3, [r7, #8]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	60bb      	str	r3, [r7, #8]
 80086ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	695b      	ldr	r3, [r3, #20]
 80086d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086d6:	2b40      	cmp	r3, #64	; 0x40
 80086d8:	f040 80b4 	bne.w	8008844 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 8140 	beq.w	8008972 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086fa:	429a      	cmp	r2, r3
 80086fc:	f080 8139 	bcs.w	8008972 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008706:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	69db      	ldr	r3, [r3, #28]
 800870e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008712:	f000 8088 	beq.w	8008826 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	330c      	adds	r3, #12
 800871c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008720:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800872c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008730:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	330c      	adds	r3, #12
 800873e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008742:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008746:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800874e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800875a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800875e:	2b00      	cmp	r3, #0
 8008760:	d1d9      	bne.n	8008716 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	3314      	adds	r3, #20
 8008768:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800876c:	e853 3f00 	ldrex	r3, [r3]
 8008770:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008774:	f023 0301 	bic.w	r3, r3, #1
 8008778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3314      	adds	r3, #20
 8008782:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008786:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800878a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800878e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e1      	bne.n	8008762 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	3314      	adds	r3, #20
 80087a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80087a8:	e853 3f00 	ldrex	r3, [r3]
 80087ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80087ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80087b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	3314      	adds	r3, #20
 80087be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80087c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80087c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80087ca:	e841 2300 	strex	r3, r2, [r1]
 80087ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80087d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d1e3      	bne.n	800879e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2220      	movs	r2, #32
 80087da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	330c      	adds	r3, #12
 80087ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087ee:	e853 3f00 	ldrex	r3, [r3]
 80087f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80087f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80087f6:	f023 0310 	bic.w	r3, r3, #16
 80087fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	330c      	adds	r3, #12
 8008804:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008808:	65ba      	str	r2, [r7, #88]	; 0x58
 800880a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800880c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800880e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008810:	e841 2300 	strex	r3, r2, [r1]
 8008814:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008816:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008818:	2b00      	cmp	r3, #0
 800881a:	d1e3      	bne.n	80087e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008820:	4618      	mov	r0, r3
 8008822:	f7fb fc25 	bl	8004070 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800882e:	b29b      	uxth	r3, r3
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	b29b      	uxth	r3, r3
 8008834:	4619      	mov	r1, r3
 8008836:	6878      	ldr	r0, [r7, #4]
 8008838:	f000 f8ca 	bl	80089d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800883c:	e099      	b.n	8008972 <HAL_UART_IRQHandler+0x50e>
 800883e:	bf00      	nop
 8008840:	08008ee3 	.word	0x08008ee3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800884c:	b29b      	uxth	r3, r3
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008858:	b29b      	uxth	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	f000 808b 	beq.w	8008976 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008860:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008864:	2b00      	cmp	r3, #0
 8008866:	f000 8086 	beq.w	8008976 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	330c      	adds	r3, #12
 8008870:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008874:	e853 3f00 	ldrex	r3, [r3]
 8008878:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800887a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800887c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008880:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	330c      	adds	r3, #12
 800888a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800888e:	647a      	str	r2, [r7, #68]	; 0x44
 8008890:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008892:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008894:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008896:	e841 2300 	strex	r3, r2, [r1]
 800889a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800889c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d1e3      	bne.n	800886a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	3314      	adds	r3, #20
 80088a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	e853 3f00 	ldrex	r3, [r3]
 80088b0:	623b      	str	r3, [r7, #32]
   return(result);
 80088b2:	6a3b      	ldr	r3, [r7, #32]
 80088b4:	f023 0301 	bic.w	r3, r3, #1
 80088b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3314      	adds	r3, #20
 80088c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80088c6:	633a      	str	r2, [r7, #48]	; 0x30
 80088c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80088cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088ce:	e841 2300 	strex	r3, r2, [r1]
 80088d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80088d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d1e3      	bne.n	80088a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2220      	movs	r2, #32
 80088de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	330c      	adds	r3, #12
 80088ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	e853 3f00 	ldrex	r3, [r3]
 80088f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f023 0310 	bic.w	r3, r3, #16
 80088fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	330c      	adds	r3, #12
 8008908:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800890c:	61fa      	str	r2, [r7, #28]
 800890e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008910:	69b9      	ldr	r1, [r7, #24]
 8008912:	69fa      	ldr	r2, [r7, #28]
 8008914:	e841 2300 	strex	r3, r2, [r1]
 8008918:	617b      	str	r3, [r7, #20]
   return(result);
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1e3      	bne.n	80088e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f852 	bl	80089d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800892c:	e023      	b.n	8008976 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800892e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008936:	2b00      	cmp	r3, #0
 8008938:	d009      	beq.n	800894e <HAL_UART_IRQHandler+0x4ea>
 800893a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800893e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008946:	6878      	ldr	r0, [r7, #4]
 8008948:	f000 fadf 	bl	8008f0a <UART_Transmit_IT>
    return;
 800894c:	e014      	b.n	8008978 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800894e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00e      	beq.n	8008978 <HAL_UART_IRQHandler+0x514>
 800895a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800895e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008962:	2b00      	cmp	r3, #0
 8008964:	d008      	beq.n	8008978 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 fb1f 	bl	8008faa <UART_EndTransmit_IT>
    return;
 800896c:	e004      	b.n	8008978 <HAL_UART_IRQHandler+0x514>
    return;
 800896e:	bf00      	nop
 8008970:	e002      	b.n	8008978 <HAL_UART_IRQHandler+0x514>
      return;
 8008972:	bf00      	nop
 8008974:	e000      	b.n	8008978 <HAL_UART_IRQHandler+0x514>
      return;
 8008976:	bf00      	nop
  }
}
 8008978:	37e8      	adds	r7, #232	; 0xe8
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
 800897e:	bf00      	nop

08008980 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008988:	bf00      	nop
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800899c:	bf00      	nop
 800899e:	370c      	adds	r7, #12
 80089a0:	46bd      	mov	sp, r7
 80089a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a6:	4770      	bx	lr

080089a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80089b0:	bf00      	nop
 80089b2:	370c      	adds	r7, #12
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b090      	sub	sp, #64	; 0x40
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d137      	bne.n	8008a74 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a06:	2200      	movs	r2, #0
 8008a08:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3314      	adds	r3, #20
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	e853 3f00 	ldrex	r3, [r3]
 8008a18:	623b      	str	r3, [r7, #32]
   return(result);
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a20:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3314      	adds	r3, #20
 8008a28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a2a:	633a      	str	r2, [r7, #48]	; 0x30
 8008a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a32:	e841 2300 	strex	r3, r2, [r1]
 8008a36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1e5      	bne.n	8008a0a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	330c      	adds	r3, #12
 8008a44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a54:	637b      	str	r3, [r7, #52]	; 0x34
 8008a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	330c      	adds	r3, #12
 8008a5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a5e:	61fa      	str	r2, [r7, #28]
 8008a60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	69b9      	ldr	r1, [r7, #24]
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	617b      	str	r3, [r7, #20]
   return(result);
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e5      	bne.n	8008a3e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a72:	e002      	b.n	8008a7a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008a74:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008a76:	f7fa feeb 	bl	8003850 <HAL_UART_TxCpltCallback>
}
 8008a7a:	bf00      	nop
 8008a7c:	3740      	adds	r7, #64	; 0x40
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}

08008a82 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a82:	b580      	push	{r7, lr}
 8008a84:	b084      	sub	sp, #16
 8008a86:	af00      	add	r7, sp, #0
 8008a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a8e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008a90:	68f8      	ldr	r0, [r7, #12]
 8008a92:	f7ff ff75 	bl	8008980 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a96:	bf00      	nop
 8008a98:	3710      	adds	r7, #16
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}

08008a9e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b09c      	sub	sp, #112	; 0x70
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aaa:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d172      	bne.n	8008ba0 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8008aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008abc:	2200      	movs	r2, #0
 8008abe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ac0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	330c      	adds	r3, #12
 8008ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ad6:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ad8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	330c      	adds	r3, #12
 8008ade:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008ae0:	65ba      	str	r2, [r7, #88]	; 0x58
 8008ae2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008ae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008ae8:	e841 2300 	strex	r3, r2, [r1]
 8008aec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d1e5      	bne.n	8008ac0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	3314      	adds	r3, #20
 8008afa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b06:	f023 0301 	bic.w	r3, r3, #1
 8008b0a:	667b      	str	r3, [r7, #100]	; 0x64
 8008b0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3314      	adds	r3, #20
 8008b12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008b14:	647a      	str	r2, [r7, #68]	; 0x44
 8008b16:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008b1c:	e841 2300 	strex	r3, r2, [r1]
 8008b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e5      	bne.n	8008af4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3314      	adds	r3, #20
 8008b2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	623b      	str	r3, [r7, #32]
   return(result);
 8008b38:	6a3b      	ldr	r3, [r7, #32]
 8008b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b3e:	663b      	str	r3, [r7, #96]	; 0x60
 8008b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3314      	adds	r3, #20
 8008b46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b48:	633a      	str	r2, [r7, #48]	; 0x30
 8008b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e5      	bne.n	8008b28 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b5e:	2220      	movs	r2, #32
 8008b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d119      	bne.n	8008ba0 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	330c      	adds	r3, #12
 8008b72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	e853 3f00 	ldrex	r3, [r3]
 8008b7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f023 0310 	bic.w	r3, r3, #16
 8008b82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	330c      	adds	r3, #12
 8008b8a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b8c:	61fa      	str	r2, [r7, #28]
 8008b8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b90:	69b9      	ldr	r1, [r7, #24]
 8008b92:	69fa      	ldr	r2, [r7, #28]
 8008b94:	e841 2300 	strex	r3, r2, [r1]
 8008b98:	617b      	str	r3, [r7, #20]
   return(result);
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e5      	bne.n	8008b6c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d106      	bne.n	8008bb6 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ba8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008baa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bac:	4619      	mov	r1, r3
 8008bae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008bb0:	f7ff ff0e 	bl	80089d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bb4:	e002      	b.n	8008bbc <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8008bb6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008bb8:	f7ff feec 	bl	8008994 <HAL_UART_RxCpltCallback>
}
 8008bbc:	bf00      	nop
 8008bbe:	3770      	adds	r7, #112	; 0x70
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d108      	bne.n	8008bec <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008bde:	085b      	lsrs	r3, r3, #1
 8008be0:	b29b      	uxth	r3, r3
 8008be2:	4619      	mov	r1, r3
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f7ff fef3 	bl	80089d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008bea:	e002      	b.n	8008bf2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f7ff fedb 	bl	80089a8 <HAL_UART_RxHalfCpltCallback>
}
 8008bf2:	bf00      	nop
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c0a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	695b      	ldr	r3, [r3, #20]
 8008c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c16:	2b80      	cmp	r3, #128	; 0x80
 8008c18:	bf0c      	ite	eq
 8008c1a:	2301      	moveq	r3, #1
 8008c1c:	2300      	movne	r3, #0
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	2b21      	cmp	r3, #33	; 0x21
 8008c2c:	d108      	bne.n	8008c40 <UART_DMAError+0x46>
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d005      	beq.n	8008c40 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	2200      	movs	r2, #0
 8008c38:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008c3a:	68b8      	ldr	r0, [r7, #8]
 8008c3c:	f000 f8c6 	bl	8008dcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	695b      	ldr	r3, [r3, #20]
 8008c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c4a:	2b40      	cmp	r3, #64	; 0x40
 8008c4c:	bf0c      	ite	eq
 8008c4e:	2301      	moveq	r3, #1
 8008c50:	2300      	movne	r3, #0
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	2b22      	cmp	r3, #34	; 0x22
 8008c60:	d108      	bne.n	8008c74 <UART_DMAError+0x7a>
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d005      	beq.n	8008c74 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008c6e:	68b8      	ldr	r0, [r7, #8]
 8008c70:	f000 f8d4 	bl	8008e1c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c78:	f043 0210 	orr.w	r2, r3, #16
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c80:	68b8      	ldr	r0, [r7, #8]
 8008c82:	f7ff fe9b 	bl	80089bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c86:	bf00      	nop
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
	...

08008c90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b098      	sub	sp, #96	; 0x60
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	88fa      	ldrh	r2, [r7, #6]
 8008ca8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2200      	movs	r2, #0
 8008cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2222      	movs	r2, #34	; 0x22
 8008cb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cbc:	4a40      	ldr	r2, [pc, #256]	; (8008dc0 <UART_Start_Receive_DMA+0x130>)
 8008cbe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cc4:	4a3f      	ldr	r2, [pc, #252]	; (8008dc4 <UART_Start_Receive_DMA+0x134>)
 8008cc6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ccc:	4a3e      	ldr	r2, [pc, #248]	; (8008dc8 <UART_Start_Receive_DMA+0x138>)
 8008cce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008cd8:	f107 0308 	add.w	r3, r7, #8
 8008cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	88fb      	ldrh	r3, [r7, #6]
 8008cf0:	f7fb f966 	bl	8003fc0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	613b      	str	r3, [r7, #16]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	613b      	str	r3, [r7, #16]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	613b      	str	r3, [r7, #16]
 8008d08:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d019      	beq.n	8008d4e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	330c      	adds	r3, #12
 8008d20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d24:	e853 3f00 	ldrex	r3, [r3]
 8008d28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d30:	65bb      	str	r3, [r7, #88]	; 0x58
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	330c      	adds	r3, #12
 8008d38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d3a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008d3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008d40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d42:	e841 2300 	strex	r3, r2, [r1]
 8008d46:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d1e5      	bne.n	8008d1a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3314      	adds	r3, #20
 8008d54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d58:	e853 3f00 	ldrex	r3, [r3]
 8008d5c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d60:	f043 0301 	orr.w	r3, r3, #1
 8008d64:	657b      	str	r3, [r7, #84]	; 0x54
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3314      	adds	r3, #20
 8008d6c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d6e:	63ba      	str	r2, [r7, #56]	; 0x38
 8008d70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008d74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d76:	e841 2300 	strex	r3, r2, [r1]
 8008d7a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1e5      	bne.n	8008d4e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	3314      	adds	r3, #20
 8008d88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	e853 3f00 	ldrex	r3, [r3]
 8008d90:	617b      	str	r3, [r7, #20]
   return(result);
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d98:	653b      	str	r3, [r7, #80]	; 0x50
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	3314      	adds	r3, #20
 8008da0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008da2:	627a      	str	r2, [r7, #36]	; 0x24
 8008da4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da6:	6a39      	ldr	r1, [r7, #32]
 8008da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008daa:	e841 2300 	strex	r3, r2, [r1]
 8008dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d1e5      	bne.n	8008d82 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3760      	adds	r7, #96	; 0x60
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	08008a9f 	.word	0x08008a9f
 8008dc4:	08008bc5 	.word	0x08008bc5
 8008dc8:	08008bfb 	.word	0x08008bfb

08008dcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b089      	sub	sp, #36	; 0x24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	330c      	adds	r3, #12
 8008dda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008dea:	61fb      	str	r3, [r7, #28]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	330c      	adds	r3, #12
 8008df2:	69fa      	ldr	r2, [r7, #28]
 8008df4:	61ba      	str	r2, [r7, #24]
 8008df6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	6979      	ldr	r1, [r7, #20]
 8008dfa:	69ba      	ldr	r2, [r7, #24]
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	613b      	str	r3, [r7, #16]
   return(result);
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e5      	bne.n	8008dd4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2220      	movs	r2, #32
 8008e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008e10:	bf00      	nop
 8008e12:	3724      	adds	r7, #36	; 0x24
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b095      	sub	sp, #84	; 0x54
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	330c      	adds	r3, #12
 8008e2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e2e:	e853 3f00 	ldrex	r3, [r3]
 8008e32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	330c      	adds	r3, #12
 8008e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e44:	643a      	str	r2, [r7, #64]	; 0x40
 8008e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e4c:	e841 2300 	strex	r3, r2, [r1]
 8008e50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d1e5      	bne.n	8008e24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	3314      	adds	r3, #20
 8008e5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e60:	6a3b      	ldr	r3, [r7, #32]
 8008e62:	e853 3f00 	ldrex	r3, [r3]
 8008e66:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e68:	69fb      	ldr	r3, [r7, #28]
 8008e6a:	f023 0301 	bic.w	r3, r3, #1
 8008e6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	3314      	adds	r3, #20
 8008e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e80:	e841 2300 	strex	r3, r2, [r1]
 8008e84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1e5      	bne.n	8008e58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d119      	bne.n	8008ec8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	330c      	adds	r3, #12
 8008e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	e853 3f00 	ldrex	r3, [r3]
 8008ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	f023 0310 	bic.w	r3, r3, #16
 8008eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	330c      	adds	r3, #12
 8008eb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eb4:	61ba      	str	r2, [r7, #24]
 8008eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb8:	6979      	ldr	r1, [r7, #20]
 8008eba:	69ba      	ldr	r2, [r7, #24]
 8008ebc:	e841 2300 	strex	r3, r2, [r1]
 8008ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d1e5      	bne.n	8008e94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2220      	movs	r2, #32
 8008ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008ed6:	bf00      	nop
 8008ed8:	3754      	adds	r7, #84	; 0x54
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr

08008ee2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ee2:	b580      	push	{r7, lr}
 8008ee4:	b084      	sub	sp, #16
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008efc:	68f8      	ldr	r0, [r7, #12]
 8008efe:	f7ff fd5d 	bl	80089bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f02:	bf00      	nop
 8008f04:	3710      	adds	r7, #16
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bd80      	pop	{r7, pc}

08008f0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b085      	sub	sp, #20
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b21      	cmp	r3, #33	; 0x21
 8008f1c:	d13e      	bne.n	8008f9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	689b      	ldr	r3, [r3, #8]
 8008f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f26:	d114      	bne.n	8008f52 <UART_Transmit_IT+0x48>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	691b      	ldr	r3, [r3, #16]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d110      	bne.n	8008f52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a1b      	ldr	r3, [r3, #32]
 8008f34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	881b      	ldrh	r3, [r3, #0]
 8008f3a:	461a      	mov	r2, r3
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6a1b      	ldr	r3, [r3, #32]
 8008f4a:	1c9a      	adds	r2, r3, #2
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	621a      	str	r2, [r3, #32]
 8008f50:	e008      	b.n	8008f64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a1b      	ldr	r3, [r3, #32]
 8008f56:	1c59      	adds	r1, r3, #1
 8008f58:	687a      	ldr	r2, [r7, #4]
 8008f5a:	6211      	str	r1, [r2, #32]
 8008f5c:	781a      	ldrb	r2, [r3, #0]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	3b01      	subs	r3, #1
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	4619      	mov	r1, r3
 8008f72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d10f      	bne.n	8008f98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	68da      	ldr	r2, [r3, #12]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	e000      	b.n	8008f9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008f9c:	2302      	movs	r3, #2
  }
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b082      	sub	sp, #8
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68da      	ldr	r2, [r3, #12]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008fc0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2220      	movs	r2, #32
 8008fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7fa fc40 	bl	8003850 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b08c      	sub	sp, #48	; 0x30
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b22      	cmp	r3, #34	; 0x22
 8008fec:	f040 80ab 	bne.w	8009146 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ff8:	d117      	bne.n	800902a <UART_Receive_IT+0x50>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	691b      	ldr	r3, [r3, #16]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d113      	bne.n	800902a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009002:	2300      	movs	r3, #0
 8009004:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800900a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	685b      	ldr	r3, [r3, #4]
 8009012:	b29b      	uxth	r3, r3
 8009014:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009018:	b29a      	uxth	r2, r3
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009022:	1c9a      	adds	r2, r3, #2
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	629a      	str	r2, [r3, #40]	; 0x28
 8009028:	e026      	b.n	8009078 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009030:	2300      	movs	r3, #0
 8009032:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689b      	ldr	r3, [r3, #8]
 8009038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800903c:	d007      	beq.n	800904e <UART_Receive_IT+0x74>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	689b      	ldr	r3, [r3, #8]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d10a      	bne.n	800905c <UART_Receive_IT+0x82>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d106      	bne.n	800905c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	b2da      	uxtb	r2, r3
 8009056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009058:	701a      	strb	r2, [r3, #0]
 800905a:	e008      	b.n	800906e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	b2db      	uxtb	r3, r3
 8009064:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009068:	b2da      	uxtb	r2, r3
 800906a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800906c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009072:	1c5a      	adds	r2, r3, #1
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800907c:	b29b      	uxth	r3, r3
 800907e:	3b01      	subs	r3, #1
 8009080:	b29b      	uxth	r3, r3
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	4619      	mov	r1, r3
 8009086:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009088:	2b00      	cmp	r3, #0
 800908a:	d15a      	bne.n	8009142 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	68da      	ldr	r2, [r3, #12]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f022 0220 	bic.w	r2, r2, #32
 800909a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	68da      	ldr	r2, [r3, #12]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	695a      	ldr	r2, [r3, #20]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f022 0201 	bic.w	r2, r2, #1
 80090ba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2220      	movs	r2, #32
 80090c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d135      	bne.n	8009138 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	330c      	adds	r3, #12
 80090d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	e853 3f00 	ldrex	r3, [r3]
 80090e0:	613b      	str	r3, [r7, #16]
   return(result);
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	f023 0310 	bic.w	r3, r3, #16
 80090e8:	627b      	str	r3, [r7, #36]	; 0x24
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	330c      	adds	r3, #12
 80090f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090f2:	623a      	str	r2, [r7, #32]
 80090f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f6:	69f9      	ldr	r1, [r7, #28]
 80090f8:	6a3a      	ldr	r2, [r7, #32]
 80090fa:	e841 2300 	strex	r3, r2, [r1]
 80090fe:	61bb      	str	r3, [r7, #24]
   return(result);
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d1e5      	bne.n	80090d2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0310 	and.w	r3, r3, #16
 8009110:	2b10      	cmp	r3, #16
 8009112:	d10a      	bne.n	800912a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009114:	2300      	movs	r3, #0
 8009116:	60fb      	str	r3, [r7, #12]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	685b      	ldr	r3, [r3, #4]
 8009126:	60fb      	str	r3, [r7, #12]
 8009128:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800912e:	4619      	mov	r1, r3
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff fc4d 	bl	80089d0 <HAL_UARTEx_RxEventCallback>
 8009136:	e002      	b.n	800913e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff fc2b 	bl	8008994 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800913e:	2300      	movs	r3, #0
 8009140:	e002      	b.n	8009148 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	e000      	b.n	8009148 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009146:	2302      	movs	r3, #2
  }
}
 8009148:	4618      	mov	r0, r3
 800914a:	3730      	adds	r7, #48	; 0x30
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}

08009150 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009150:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009154:	b0c0      	sub	sp, #256	; 0x100
 8009156:	af00      	add	r7, sp, #0
 8009158:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800915c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800916c:	68d9      	ldr	r1, [r3, #12]
 800916e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	ea40 0301 	orr.w	r3, r0, r1
 8009178:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800917a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	431a      	orrs	r2, r3
 8009188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800918c:	695b      	ldr	r3, [r3, #20]
 800918e:	431a      	orrs	r2, r3
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	4313      	orrs	r3, r2
 8009198:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800919c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091a8:	f021 010c 	bic.w	r1, r1, #12
 80091ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b0:	681a      	ldr	r2, [r3, #0]
 80091b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80091b6:	430b      	orrs	r3, r1
 80091b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80091ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	695b      	ldr	r3, [r3, #20]
 80091c2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80091c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ca:	6999      	ldr	r1, [r3, #24]
 80091cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	ea40 0301 	orr.w	r3, r0, r1
 80091d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80091d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091dc:	681a      	ldr	r2, [r3, #0]
 80091de:	4b8f      	ldr	r3, [pc, #572]	; (800941c <UART_SetConfig+0x2cc>)
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d005      	beq.n	80091f0 <UART_SetConfig+0xa0>
 80091e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	4b8d      	ldr	r3, [pc, #564]	; (8009420 <UART_SetConfig+0x2d0>)
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d104      	bne.n	80091fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80091f0:	f7fd fe4c 	bl	8006e8c <HAL_RCC_GetPCLK2Freq>
 80091f4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80091f8:	e003      	b.n	8009202 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80091fa:	f7fd fe33 	bl	8006e64 <HAL_RCC_GetPCLK1Freq>
 80091fe:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009202:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009206:	69db      	ldr	r3, [r3, #28]
 8009208:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800920c:	f040 810c 	bne.w	8009428 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009210:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009214:	2200      	movs	r2, #0
 8009216:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800921a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800921e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009222:	4622      	mov	r2, r4
 8009224:	462b      	mov	r3, r5
 8009226:	1891      	adds	r1, r2, r2
 8009228:	65b9      	str	r1, [r7, #88]	; 0x58
 800922a:	415b      	adcs	r3, r3
 800922c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800922e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009232:	4621      	mov	r1, r4
 8009234:	eb12 0801 	adds.w	r8, r2, r1
 8009238:	4629      	mov	r1, r5
 800923a:	eb43 0901 	adc.w	r9, r3, r1
 800923e:	f04f 0200 	mov.w	r2, #0
 8009242:	f04f 0300 	mov.w	r3, #0
 8009246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800924a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800924e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009252:	4690      	mov	r8, r2
 8009254:	4699      	mov	r9, r3
 8009256:	4623      	mov	r3, r4
 8009258:	eb18 0303 	adds.w	r3, r8, r3
 800925c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009260:	462b      	mov	r3, r5
 8009262:	eb49 0303 	adc.w	r3, r9, r3
 8009266:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800926a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926e:	685b      	ldr	r3, [r3, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009276:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800927a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800927e:	460b      	mov	r3, r1
 8009280:	18db      	adds	r3, r3, r3
 8009282:	653b      	str	r3, [r7, #80]	; 0x50
 8009284:	4613      	mov	r3, r2
 8009286:	eb42 0303 	adc.w	r3, r2, r3
 800928a:	657b      	str	r3, [r7, #84]	; 0x54
 800928c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009290:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009294:	f7f6 ffec 	bl	8000270 <__aeabi_uldivmod>
 8009298:	4602      	mov	r2, r0
 800929a:	460b      	mov	r3, r1
 800929c:	4b61      	ldr	r3, [pc, #388]	; (8009424 <UART_SetConfig+0x2d4>)
 800929e:	fba3 2302 	umull	r2, r3, r3, r2
 80092a2:	095b      	lsrs	r3, r3, #5
 80092a4:	011c      	lsls	r4, r3, #4
 80092a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092aa:	2200      	movs	r2, #0
 80092ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80092b0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80092b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80092b8:	4642      	mov	r2, r8
 80092ba:	464b      	mov	r3, r9
 80092bc:	1891      	adds	r1, r2, r2
 80092be:	64b9      	str	r1, [r7, #72]	; 0x48
 80092c0:	415b      	adcs	r3, r3
 80092c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80092c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80092c8:	4641      	mov	r1, r8
 80092ca:	eb12 0a01 	adds.w	sl, r2, r1
 80092ce:	4649      	mov	r1, r9
 80092d0:	eb43 0b01 	adc.w	fp, r3, r1
 80092d4:	f04f 0200 	mov.w	r2, #0
 80092d8:	f04f 0300 	mov.w	r3, #0
 80092dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092e8:	4692      	mov	sl, r2
 80092ea:	469b      	mov	fp, r3
 80092ec:	4643      	mov	r3, r8
 80092ee:	eb1a 0303 	adds.w	r3, sl, r3
 80092f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80092f6:	464b      	mov	r3, r9
 80092f8:	eb4b 0303 	adc.w	r3, fp, r3
 80092fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	2200      	movs	r2, #0
 8009308:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800930c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009310:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009314:	460b      	mov	r3, r1
 8009316:	18db      	adds	r3, r3, r3
 8009318:	643b      	str	r3, [r7, #64]	; 0x40
 800931a:	4613      	mov	r3, r2
 800931c:	eb42 0303 	adc.w	r3, r2, r3
 8009320:	647b      	str	r3, [r7, #68]	; 0x44
 8009322:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009326:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800932a:	f7f6 ffa1 	bl	8000270 <__aeabi_uldivmod>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	4611      	mov	r1, r2
 8009334:	4b3b      	ldr	r3, [pc, #236]	; (8009424 <UART_SetConfig+0x2d4>)
 8009336:	fba3 2301 	umull	r2, r3, r3, r1
 800933a:	095b      	lsrs	r3, r3, #5
 800933c:	2264      	movs	r2, #100	; 0x64
 800933e:	fb02 f303 	mul.w	r3, r2, r3
 8009342:	1acb      	subs	r3, r1, r3
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800934a:	4b36      	ldr	r3, [pc, #216]	; (8009424 <UART_SetConfig+0x2d4>)
 800934c:	fba3 2302 	umull	r2, r3, r3, r2
 8009350:	095b      	lsrs	r3, r3, #5
 8009352:	005b      	lsls	r3, r3, #1
 8009354:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009358:	441c      	add	r4, r3
 800935a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800935e:	2200      	movs	r2, #0
 8009360:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009364:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009368:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800936c:	4642      	mov	r2, r8
 800936e:	464b      	mov	r3, r9
 8009370:	1891      	adds	r1, r2, r2
 8009372:	63b9      	str	r1, [r7, #56]	; 0x38
 8009374:	415b      	adcs	r3, r3
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009378:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800937c:	4641      	mov	r1, r8
 800937e:	1851      	adds	r1, r2, r1
 8009380:	6339      	str	r1, [r7, #48]	; 0x30
 8009382:	4649      	mov	r1, r9
 8009384:	414b      	adcs	r3, r1
 8009386:	637b      	str	r3, [r7, #52]	; 0x34
 8009388:	f04f 0200 	mov.w	r2, #0
 800938c:	f04f 0300 	mov.w	r3, #0
 8009390:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009394:	4659      	mov	r1, fp
 8009396:	00cb      	lsls	r3, r1, #3
 8009398:	4651      	mov	r1, sl
 800939a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800939e:	4651      	mov	r1, sl
 80093a0:	00ca      	lsls	r2, r1, #3
 80093a2:	4610      	mov	r0, r2
 80093a4:	4619      	mov	r1, r3
 80093a6:	4603      	mov	r3, r0
 80093a8:	4642      	mov	r2, r8
 80093aa:	189b      	adds	r3, r3, r2
 80093ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093b0:	464b      	mov	r3, r9
 80093b2:	460a      	mov	r2, r1
 80093b4:	eb42 0303 	adc.w	r3, r2, r3
 80093b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80093c8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80093cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80093d0:	460b      	mov	r3, r1
 80093d2:	18db      	adds	r3, r3, r3
 80093d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80093d6:	4613      	mov	r3, r2
 80093d8:	eb42 0303 	adc.w	r3, r2, r3
 80093dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80093e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80093e6:	f7f6 ff43 	bl	8000270 <__aeabi_uldivmod>
 80093ea:	4602      	mov	r2, r0
 80093ec:	460b      	mov	r3, r1
 80093ee:	4b0d      	ldr	r3, [pc, #52]	; (8009424 <UART_SetConfig+0x2d4>)
 80093f0:	fba3 1302 	umull	r1, r3, r3, r2
 80093f4:	095b      	lsrs	r3, r3, #5
 80093f6:	2164      	movs	r1, #100	; 0x64
 80093f8:	fb01 f303 	mul.w	r3, r1, r3
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	00db      	lsls	r3, r3, #3
 8009400:	3332      	adds	r3, #50	; 0x32
 8009402:	4a08      	ldr	r2, [pc, #32]	; (8009424 <UART_SetConfig+0x2d4>)
 8009404:	fba2 2303 	umull	r2, r3, r2, r3
 8009408:	095b      	lsrs	r3, r3, #5
 800940a:	f003 0207 	and.w	r2, r3, #7
 800940e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4422      	add	r2, r4
 8009416:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009418:	e105      	b.n	8009626 <UART_SetConfig+0x4d6>
 800941a:	bf00      	nop
 800941c:	40011000 	.word	0x40011000
 8009420:	40011400 	.word	0x40011400
 8009424:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009428:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800942c:	2200      	movs	r2, #0
 800942e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009432:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009436:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800943a:	4642      	mov	r2, r8
 800943c:	464b      	mov	r3, r9
 800943e:	1891      	adds	r1, r2, r2
 8009440:	6239      	str	r1, [r7, #32]
 8009442:	415b      	adcs	r3, r3
 8009444:	627b      	str	r3, [r7, #36]	; 0x24
 8009446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800944a:	4641      	mov	r1, r8
 800944c:	1854      	adds	r4, r2, r1
 800944e:	4649      	mov	r1, r9
 8009450:	eb43 0501 	adc.w	r5, r3, r1
 8009454:	f04f 0200 	mov.w	r2, #0
 8009458:	f04f 0300 	mov.w	r3, #0
 800945c:	00eb      	lsls	r3, r5, #3
 800945e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009462:	00e2      	lsls	r2, r4, #3
 8009464:	4614      	mov	r4, r2
 8009466:	461d      	mov	r5, r3
 8009468:	4643      	mov	r3, r8
 800946a:	18e3      	adds	r3, r4, r3
 800946c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009470:	464b      	mov	r3, r9
 8009472:	eb45 0303 	adc.w	r3, r5, r3
 8009476:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800947a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800947e:	685b      	ldr	r3, [r3, #4]
 8009480:	2200      	movs	r2, #0
 8009482:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009486:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800948a:	f04f 0200 	mov.w	r2, #0
 800948e:	f04f 0300 	mov.w	r3, #0
 8009492:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009496:	4629      	mov	r1, r5
 8009498:	008b      	lsls	r3, r1, #2
 800949a:	4621      	mov	r1, r4
 800949c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094a0:	4621      	mov	r1, r4
 80094a2:	008a      	lsls	r2, r1, #2
 80094a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094a8:	f7f6 fee2 	bl	8000270 <__aeabi_uldivmod>
 80094ac:	4602      	mov	r2, r0
 80094ae:	460b      	mov	r3, r1
 80094b0:	4b60      	ldr	r3, [pc, #384]	; (8009634 <UART_SetConfig+0x4e4>)
 80094b2:	fba3 2302 	umull	r2, r3, r3, r2
 80094b6:	095b      	lsrs	r3, r3, #5
 80094b8:	011c      	lsls	r4, r3, #4
 80094ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80094be:	2200      	movs	r2, #0
 80094c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80094c4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80094c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80094cc:	4642      	mov	r2, r8
 80094ce:	464b      	mov	r3, r9
 80094d0:	1891      	adds	r1, r2, r2
 80094d2:	61b9      	str	r1, [r7, #24]
 80094d4:	415b      	adcs	r3, r3
 80094d6:	61fb      	str	r3, [r7, #28]
 80094d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094dc:	4641      	mov	r1, r8
 80094de:	1851      	adds	r1, r2, r1
 80094e0:	6139      	str	r1, [r7, #16]
 80094e2:	4649      	mov	r1, r9
 80094e4:	414b      	adcs	r3, r1
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	f04f 0200 	mov.w	r2, #0
 80094ec:	f04f 0300 	mov.w	r3, #0
 80094f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094f4:	4659      	mov	r1, fp
 80094f6:	00cb      	lsls	r3, r1, #3
 80094f8:	4651      	mov	r1, sl
 80094fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80094fe:	4651      	mov	r1, sl
 8009500:	00ca      	lsls	r2, r1, #3
 8009502:	4610      	mov	r0, r2
 8009504:	4619      	mov	r1, r3
 8009506:	4603      	mov	r3, r0
 8009508:	4642      	mov	r2, r8
 800950a:	189b      	adds	r3, r3, r2
 800950c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009510:	464b      	mov	r3, r9
 8009512:	460a      	mov	r2, r1
 8009514:	eb42 0303 	adc.w	r3, r2, r3
 8009518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800951c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	67bb      	str	r3, [r7, #120]	; 0x78
 8009526:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009528:	f04f 0200 	mov.w	r2, #0
 800952c:	f04f 0300 	mov.w	r3, #0
 8009530:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009534:	4649      	mov	r1, r9
 8009536:	008b      	lsls	r3, r1, #2
 8009538:	4641      	mov	r1, r8
 800953a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800953e:	4641      	mov	r1, r8
 8009540:	008a      	lsls	r2, r1, #2
 8009542:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009546:	f7f6 fe93 	bl	8000270 <__aeabi_uldivmod>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	4b39      	ldr	r3, [pc, #228]	; (8009634 <UART_SetConfig+0x4e4>)
 8009550:	fba3 1302 	umull	r1, r3, r3, r2
 8009554:	095b      	lsrs	r3, r3, #5
 8009556:	2164      	movs	r1, #100	; 0x64
 8009558:	fb01 f303 	mul.w	r3, r1, r3
 800955c:	1ad3      	subs	r3, r2, r3
 800955e:	011b      	lsls	r3, r3, #4
 8009560:	3332      	adds	r3, #50	; 0x32
 8009562:	4a34      	ldr	r2, [pc, #208]	; (8009634 <UART_SetConfig+0x4e4>)
 8009564:	fba2 2303 	umull	r2, r3, r2, r3
 8009568:	095b      	lsrs	r3, r3, #5
 800956a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800956e:	441c      	add	r4, r3
 8009570:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009574:	2200      	movs	r2, #0
 8009576:	673b      	str	r3, [r7, #112]	; 0x70
 8009578:	677a      	str	r2, [r7, #116]	; 0x74
 800957a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800957e:	4642      	mov	r2, r8
 8009580:	464b      	mov	r3, r9
 8009582:	1891      	adds	r1, r2, r2
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	415b      	adcs	r3, r3
 8009588:	60fb      	str	r3, [r7, #12]
 800958a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800958e:	4641      	mov	r1, r8
 8009590:	1851      	adds	r1, r2, r1
 8009592:	6039      	str	r1, [r7, #0]
 8009594:	4649      	mov	r1, r9
 8009596:	414b      	adcs	r3, r1
 8009598:	607b      	str	r3, [r7, #4]
 800959a:	f04f 0200 	mov.w	r2, #0
 800959e:	f04f 0300 	mov.w	r3, #0
 80095a2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095a6:	4659      	mov	r1, fp
 80095a8:	00cb      	lsls	r3, r1, #3
 80095aa:	4651      	mov	r1, sl
 80095ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095b0:	4651      	mov	r1, sl
 80095b2:	00ca      	lsls	r2, r1, #3
 80095b4:	4610      	mov	r0, r2
 80095b6:	4619      	mov	r1, r3
 80095b8:	4603      	mov	r3, r0
 80095ba:	4642      	mov	r2, r8
 80095bc:	189b      	adds	r3, r3, r2
 80095be:	66bb      	str	r3, [r7, #104]	; 0x68
 80095c0:	464b      	mov	r3, r9
 80095c2:	460a      	mov	r2, r1
 80095c4:	eb42 0303 	adc.w	r3, r2, r3
 80095c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80095ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ce:	685b      	ldr	r3, [r3, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	663b      	str	r3, [r7, #96]	; 0x60
 80095d4:	667a      	str	r2, [r7, #100]	; 0x64
 80095d6:	f04f 0200 	mov.w	r2, #0
 80095da:	f04f 0300 	mov.w	r3, #0
 80095de:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80095e2:	4649      	mov	r1, r9
 80095e4:	008b      	lsls	r3, r1, #2
 80095e6:	4641      	mov	r1, r8
 80095e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80095ec:	4641      	mov	r1, r8
 80095ee:	008a      	lsls	r2, r1, #2
 80095f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80095f4:	f7f6 fe3c 	bl	8000270 <__aeabi_uldivmod>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4b0d      	ldr	r3, [pc, #52]	; (8009634 <UART_SetConfig+0x4e4>)
 80095fe:	fba3 1302 	umull	r1, r3, r3, r2
 8009602:	095b      	lsrs	r3, r3, #5
 8009604:	2164      	movs	r1, #100	; 0x64
 8009606:	fb01 f303 	mul.w	r3, r1, r3
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	011b      	lsls	r3, r3, #4
 800960e:	3332      	adds	r3, #50	; 0x32
 8009610:	4a08      	ldr	r2, [pc, #32]	; (8009634 <UART_SetConfig+0x4e4>)
 8009612:	fba2 2303 	umull	r2, r3, r2, r3
 8009616:	095b      	lsrs	r3, r3, #5
 8009618:	f003 020f 	and.w	r2, r3, #15
 800961c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	4422      	add	r2, r4
 8009624:	609a      	str	r2, [r3, #8]
}
 8009626:	bf00      	nop
 8009628:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800962c:	46bd      	mov	sp, r7
 800962e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009632:	bf00      	nop
 8009634:	51eb851f 	.word	0x51eb851f

08009638 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009638:	b084      	sub	sp, #16
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	f107 001c 	add.w	r0, r7, #28
 8009646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800964a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800964c:	2b01      	cmp	r3, #1
 800964e:	d122      	bne.n	8009696 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8009664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800967a:	2b01      	cmp	r3, #1
 800967c:	d105      	bne.n	800968a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 fbee 	bl	800ae6c <USB_CoreReset>
 8009690:	4603      	mov	r3, r0
 8009692:	73fb      	strb	r3, [r7, #15]
 8009694:	e01a      	b.n	80096cc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f001 fbe2 	bl	800ae6c <USB_CoreReset>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80096ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d106      	bne.n	80096c0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	639a      	str	r2, [r3, #56]	; 0x38
 80096be:	e005      	b.n	80096cc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80096cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ce:	2b01      	cmp	r3, #1
 80096d0:	d10b      	bne.n	80096ea <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	f043 0206 	orr.w	r2, r3, #6
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	689b      	ldr	r3, [r3, #8]
 80096e2:	f043 0220 	orr.w	r2, r3, #32
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096f6:	b004      	add	sp, #16
 80096f8:	4770      	bx	lr
	...

080096fc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b087      	sub	sp, #28
 8009700:	af00      	add	r7, sp, #0
 8009702:	60f8      	str	r0, [r7, #12]
 8009704:	60b9      	str	r1, [r7, #8]
 8009706:	4613      	mov	r3, r2
 8009708:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800970a:	79fb      	ldrb	r3, [r7, #7]
 800970c:	2b02      	cmp	r3, #2
 800970e:	d165      	bne.n	80097dc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	4a41      	ldr	r2, [pc, #260]	; (8009818 <USB_SetTurnaroundTime+0x11c>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d906      	bls.n	8009726 <USB_SetTurnaroundTime+0x2a>
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	4a40      	ldr	r2, [pc, #256]	; (800981c <USB_SetTurnaroundTime+0x120>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d202      	bcs.n	8009726 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009720:	230f      	movs	r3, #15
 8009722:	617b      	str	r3, [r7, #20]
 8009724:	e062      	b.n	80097ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	4a3c      	ldr	r2, [pc, #240]	; (800981c <USB_SetTurnaroundTime+0x120>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d306      	bcc.n	800973c <USB_SetTurnaroundTime+0x40>
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	4a3b      	ldr	r2, [pc, #236]	; (8009820 <USB_SetTurnaroundTime+0x124>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d202      	bcs.n	800973c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009736:	230e      	movs	r3, #14
 8009738:	617b      	str	r3, [r7, #20]
 800973a:	e057      	b.n	80097ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	4a38      	ldr	r2, [pc, #224]	; (8009820 <USB_SetTurnaroundTime+0x124>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d306      	bcc.n	8009752 <USB_SetTurnaroundTime+0x56>
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	4a37      	ldr	r2, [pc, #220]	; (8009824 <USB_SetTurnaroundTime+0x128>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d202      	bcs.n	8009752 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800974c:	230d      	movs	r3, #13
 800974e:	617b      	str	r3, [r7, #20]
 8009750:	e04c      	b.n	80097ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	4a33      	ldr	r2, [pc, #204]	; (8009824 <USB_SetTurnaroundTime+0x128>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d306      	bcc.n	8009768 <USB_SetTurnaroundTime+0x6c>
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	4a32      	ldr	r2, [pc, #200]	; (8009828 <USB_SetTurnaroundTime+0x12c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d802      	bhi.n	8009768 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009762:	230c      	movs	r3, #12
 8009764:	617b      	str	r3, [r7, #20]
 8009766:	e041      	b.n	80097ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	4a2f      	ldr	r2, [pc, #188]	; (8009828 <USB_SetTurnaroundTime+0x12c>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d906      	bls.n	800977e <USB_SetTurnaroundTime+0x82>
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	4a2e      	ldr	r2, [pc, #184]	; (800982c <USB_SetTurnaroundTime+0x130>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d802      	bhi.n	800977e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009778:	230b      	movs	r3, #11
 800977a:	617b      	str	r3, [r7, #20]
 800977c:	e036      	b.n	80097ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	4a2a      	ldr	r2, [pc, #168]	; (800982c <USB_SetTurnaroundTime+0x130>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d906      	bls.n	8009794 <USB_SetTurnaroundTime+0x98>
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	4a29      	ldr	r2, [pc, #164]	; (8009830 <USB_SetTurnaroundTime+0x134>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d802      	bhi.n	8009794 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800978e:	230a      	movs	r3, #10
 8009790:	617b      	str	r3, [r7, #20]
 8009792:	e02b      	b.n	80097ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	4a26      	ldr	r2, [pc, #152]	; (8009830 <USB_SetTurnaroundTime+0x134>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d906      	bls.n	80097aa <USB_SetTurnaroundTime+0xae>
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	4a25      	ldr	r2, [pc, #148]	; (8009834 <USB_SetTurnaroundTime+0x138>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d202      	bcs.n	80097aa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80097a4:	2309      	movs	r3, #9
 80097a6:	617b      	str	r3, [r7, #20]
 80097a8:	e020      	b.n	80097ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	4a21      	ldr	r2, [pc, #132]	; (8009834 <USB_SetTurnaroundTime+0x138>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d306      	bcc.n	80097c0 <USB_SetTurnaroundTime+0xc4>
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	4a20      	ldr	r2, [pc, #128]	; (8009838 <USB_SetTurnaroundTime+0x13c>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d802      	bhi.n	80097c0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80097ba:	2308      	movs	r3, #8
 80097bc:	617b      	str	r3, [r7, #20]
 80097be:	e015      	b.n	80097ec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	4a1d      	ldr	r2, [pc, #116]	; (8009838 <USB_SetTurnaroundTime+0x13c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d906      	bls.n	80097d6 <USB_SetTurnaroundTime+0xda>
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	4a1c      	ldr	r2, [pc, #112]	; (800983c <USB_SetTurnaroundTime+0x140>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d202      	bcs.n	80097d6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80097d0:	2307      	movs	r3, #7
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	e00a      	b.n	80097ec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80097d6:	2306      	movs	r3, #6
 80097d8:	617b      	str	r3, [r7, #20]
 80097da:	e007      	b.n	80097ec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80097dc:	79fb      	ldrb	r3, [r7, #7]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d102      	bne.n	80097e8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80097e2:	2309      	movs	r3, #9
 80097e4:	617b      	str	r3, [r7, #20]
 80097e6:	e001      	b.n	80097ec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80097e8:	2309      	movs	r3, #9
 80097ea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	68db      	ldr	r3, [r3, #12]
 80097f0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	68da      	ldr	r2, [r3, #12]
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	029b      	lsls	r3, r3, #10
 8009800:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009804:	431a      	orrs	r2, r3
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	371c      	adds	r7, #28
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr
 8009818:	00d8acbf 	.word	0x00d8acbf
 800981c:	00e4e1c0 	.word	0x00e4e1c0
 8009820:	00f42400 	.word	0x00f42400
 8009824:	01067380 	.word	0x01067380
 8009828:	011a499f 	.word	0x011a499f
 800982c:	01312cff 	.word	0x01312cff
 8009830:	014ca43f 	.word	0x014ca43f
 8009834:	016e3600 	.word	0x016e3600
 8009838:	01a6ab1f 	.word	0x01a6ab1f
 800983c:	01e84800 	.word	0x01e84800

08009840 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	f043 0201 	orr.w	r2, r3, #1
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009854:	2300      	movs	r3, #0
}
 8009856:	4618      	mov	r0, r3
 8009858:	370c      	adds	r7, #12
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr

08009862 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009862:	b480      	push	{r7}
 8009864:	b083      	sub	sp, #12
 8009866:	af00      	add	r7, sp, #0
 8009868:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	689b      	ldr	r3, [r3, #8]
 800986e:	f023 0201 	bic.w	r2, r3, #1
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009876:	2300      	movs	r3, #0
}
 8009878:	4618      	mov	r0, r3
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b084      	sub	sp, #16
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	460b      	mov	r3, r1
 800988e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009890:	2300      	movs	r3, #0
 8009892:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80098a0:	78fb      	ldrb	r3, [r7, #3]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d115      	bne.n	80098d2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	68db      	ldr	r3, [r3, #12]
 80098aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098b2:	2001      	movs	r0, #1
 80098b4:	f7fa f9a0 	bl	8003bf8 <HAL_Delay>
      ms++;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	3301      	adds	r3, #1
 80098bc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f001 fa45 	bl	800ad4e <USB_GetMode>
 80098c4:	4603      	mov	r3, r0
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d01e      	beq.n	8009908 <USB_SetCurrentMode+0x84>
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2b31      	cmp	r3, #49	; 0x31
 80098ce:	d9f0      	bls.n	80098b2 <USB_SetCurrentMode+0x2e>
 80098d0:	e01a      	b.n	8009908 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80098d2:	78fb      	ldrb	r3, [r7, #3]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d115      	bne.n	8009904 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80098e4:	2001      	movs	r0, #1
 80098e6:	f7fa f987 	bl	8003bf8 <HAL_Delay>
      ms++;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	3301      	adds	r3, #1
 80098ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f001 fa2c 	bl	800ad4e <USB_GetMode>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d005      	beq.n	8009908 <USB_SetCurrentMode+0x84>
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2b31      	cmp	r3, #49	; 0x31
 8009900:	d9f0      	bls.n	80098e4 <USB_SetCurrentMode+0x60>
 8009902:	e001      	b.n	8009908 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e005      	b.n	8009914 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b32      	cmp	r3, #50	; 0x32
 800990c:	d101      	bne.n	8009912 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	e000      	b.n	8009914 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009912:	2300      	movs	r3, #0
}
 8009914:	4618      	mov	r0, r3
 8009916:	3710      	adds	r7, #16
 8009918:	46bd      	mov	sp, r7
 800991a:	bd80      	pop	{r7, pc}

0800991c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800991c:	b084      	sub	sp, #16
 800991e:	b580      	push	{r7, lr}
 8009920:	b086      	sub	sp, #24
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800992a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800992e:	2300      	movs	r3, #0
 8009930:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009936:	2300      	movs	r3, #0
 8009938:	613b      	str	r3, [r7, #16]
 800993a:	e009      	b.n	8009950 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	3340      	adds	r3, #64	; 0x40
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	4413      	add	r3, r2
 8009946:	2200      	movs	r2, #0
 8009948:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	3301      	adds	r3, #1
 800994e:	613b      	str	r3, [r7, #16]
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	2b0e      	cmp	r3, #14
 8009954:	d9f2      	bls.n	800993c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d11c      	bne.n	8009996 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800996a:	f043 0302 	orr.w	r3, r3, #2
 800996e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009974:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009980:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800998c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	639a      	str	r2, [r3, #56]	; 0x38
 8009994:	e00b      	b.n	80099ae <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800999a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80099b4:	461a      	mov	r2, r3
 80099b6:	2300      	movs	r3, #0
 80099b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099c0:	4619      	mov	r1, r3
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099c8:	461a      	mov	r2, r3
 80099ca:	680b      	ldr	r3, [r1, #0]
 80099cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80099ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d10c      	bne.n	80099ee <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d104      	bne.n	80099e4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80099da:	2100      	movs	r1, #0
 80099dc:	6878      	ldr	r0, [r7, #4]
 80099de:	f000 f965 	bl	8009cac <USB_SetDevSpeed>
 80099e2:	e008      	b.n	80099f6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80099e4:	2101      	movs	r1, #1
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f960 	bl	8009cac <USB_SetDevSpeed>
 80099ec:	e003      	b.n	80099f6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80099ee:	2103      	movs	r1, #3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f95b 	bl	8009cac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80099f6:	2110      	movs	r1, #16
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f8f3 	bl	8009be4 <USB_FlushTxFifo>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8009a04:	2301      	movs	r3, #1
 8009a06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f000 f91f 	bl	8009c4c <USB_FlushRxFifo>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a1e:	461a      	mov	r2, r3
 8009a20:	2300      	movs	r3, #0
 8009a22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a36:	461a      	mov	r2, r3
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	613b      	str	r3, [r7, #16]
 8009a40:	e043      	b.n	8009aca <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a58:	d118      	bne.n	8009a8c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10a      	bne.n	8009a76 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	015a      	lsls	r2, r3, #5
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4413      	add	r3, r2
 8009a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009a72:	6013      	str	r3, [r2, #0]
 8009a74:	e013      	b.n	8009a9e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	015a      	lsls	r2, r3, #5
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a82:	461a      	mov	r2, r3
 8009a84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a88:	6013      	str	r3, [r2, #0]
 8009a8a:	e008      	b.n	8009a9e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009a8c:	693b      	ldr	r3, [r7, #16]
 8009a8e:	015a      	lsls	r2, r3, #5
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4413      	add	r3, r2
 8009a94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a98:	461a      	mov	r2, r3
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	015a      	lsls	r2, r3, #5
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aaa:	461a      	mov	r2, r3
 8009aac:	2300      	movs	r3, #0
 8009aae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009abc:	461a      	mov	r2, r3
 8009abe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009ac2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	3301      	adds	r3, #1
 8009ac8:	613b      	str	r3, [r7, #16]
 8009aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009acc:	693a      	ldr	r2, [r7, #16]
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d3b7      	bcc.n	8009a42 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	613b      	str	r3, [r7, #16]
 8009ad6:	e043      	b.n	8009b60 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009ad8:	693b      	ldr	r3, [r7, #16]
 8009ada:	015a      	lsls	r2, r3, #5
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	4413      	add	r3, r2
 8009ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009aea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009aee:	d118      	bne.n	8009b22 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10a      	bne.n	8009b0c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	015a      	lsls	r2, r3, #5
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	4413      	add	r3, r2
 8009afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b02:	461a      	mov	r2, r3
 8009b04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b08:	6013      	str	r3, [r2, #0]
 8009b0a:	e013      	b.n	8009b34 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	015a      	lsls	r2, r3, #5
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	4413      	add	r3, r2
 8009b14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b18:	461a      	mov	r2, r3
 8009b1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b1e:	6013      	str	r3, [r2, #0]
 8009b20:	e008      	b.n	8009b34 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b2e:	461a      	mov	r2, r3
 8009b30:	2300      	movs	r3, #0
 8009b32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	015a      	lsls	r2, r3, #5
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	4413      	add	r3, r2
 8009b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b40:	461a      	mov	r2, r3
 8009b42:	2300      	movs	r3, #0
 8009b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b52:	461a      	mov	r2, r3
 8009b54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009b58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b5a:	693b      	ldr	r3, [r7, #16]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	613b      	str	r3, [r7, #16]
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d3b7      	bcc.n	8009ad8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009b76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009b88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d105      	bne.n	8009b9c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	699b      	ldr	r3, [r3, #24]
 8009b94:	f043 0210 	orr.w	r2, r3, #16
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	699a      	ldr	r2, [r3, #24]
 8009ba0:	4b0f      	ldr	r3, [pc, #60]	; (8009be0 <USB_DevInit+0x2c4>)
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009ba8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d005      	beq.n	8009bba <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	699b      	ldr	r3, [r3, #24]
 8009bb2:	f043 0208 	orr.w	r2, r3, #8
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d107      	bne.n	8009bd0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bc8:	f043 0304 	orr.w	r3, r3, #4
 8009bcc:	687a      	ldr	r2, [r7, #4]
 8009bce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3718      	adds	r7, #24
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bdc:	b004      	add	sp, #16
 8009bde:	4770      	bx	lr
 8009be0:	803c3800 	.word	0x803c3800

08009be4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009be4:	b480      	push	{r7}
 8009be6:	b085      	sub	sp, #20
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	4a13      	ldr	r2, [pc, #76]	; (8009c48 <USB_FlushTxFifo+0x64>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d901      	bls.n	8009c04 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009c00:	2303      	movs	r3, #3
 8009c02:	e01b      	b.n	8009c3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	691b      	ldr	r3, [r3, #16]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	daf2      	bge.n	8009bf2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	019b      	lsls	r3, r3, #6
 8009c14:	f043 0220 	orr.w	r2, r3, #32
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	4a08      	ldr	r2, [pc, #32]	; (8009c48 <USB_FlushTxFifo+0x64>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d901      	bls.n	8009c2e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009c2a:	2303      	movs	r3, #3
 8009c2c:	e006      	b.n	8009c3c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	f003 0320 	and.w	r3, r3, #32
 8009c36:	2b20      	cmp	r3, #32
 8009c38:	d0f0      	beq.n	8009c1c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009c3a:	2300      	movs	r3, #0
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3714      	adds	r7, #20
 8009c40:	46bd      	mov	sp, r7
 8009c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c46:	4770      	bx	lr
 8009c48:	00030d40 	.word	0x00030d40

08009c4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b085      	sub	sp, #20
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c54:	2300      	movs	r3, #0
 8009c56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	4a11      	ldr	r2, [pc, #68]	; (8009ca8 <USB_FlushRxFifo+0x5c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d901      	bls.n	8009c6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e018      	b.n	8009c9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	daf2      	bge.n	8009c58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009c72:	2300      	movs	r3, #0
 8009c74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2210      	movs	r2, #16
 8009c7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	3301      	adds	r3, #1
 8009c80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	4a08      	ldr	r2, [pc, #32]	; (8009ca8 <USB_FlushRxFifo+0x5c>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d901      	bls.n	8009c8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009c8a:	2303      	movs	r3, #3
 8009c8c:	e006      	b.n	8009c9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	f003 0310 	and.w	r3, r3, #16
 8009c96:	2b10      	cmp	r3, #16
 8009c98:	d0f0      	beq.n	8009c7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009c9a:	2300      	movs	r3, #0
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3714      	adds	r7, #20
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	00030d40 	.word	0x00030d40

08009cac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009cac:	b480      	push	{r7}
 8009cae:	b085      	sub	sp, #20
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	460b      	mov	r3, r1
 8009cb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cc2:	681a      	ldr	r2, [r3, #0]
 8009cc4:	78fb      	ldrb	r3, [r7, #3]
 8009cc6:	68f9      	ldr	r1, [r7, #12]
 8009cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009cd0:	2300      	movs	r3, #0
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3714      	adds	r7, #20
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b087      	sub	sp, #28
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	f003 0306 	and.w	r3, r3, #6
 8009cf6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d102      	bne.n	8009d04 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	75fb      	strb	r3, [r7, #23]
 8009d02:	e00a      	b.n	8009d1a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2b02      	cmp	r3, #2
 8009d08:	d002      	beq.n	8009d10 <USB_GetDevSpeed+0x32>
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2b06      	cmp	r3, #6
 8009d0e:	d102      	bne.n	8009d16 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009d10:	2302      	movs	r3, #2
 8009d12:	75fb      	strb	r3, [r7, #23]
 8009d14:	e001      	b.n	8009d1a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009d16:	230f      	movs	r3, #15
 8009d18:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	371c      	adds	r7, #28
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	785b      	ldrb	r3, [r3, #1]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d13a      	bne.n	8009dba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009d4a:	69da      	ldr	r2, [r3, #28]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	f003 030f 	and.w	r3, r3, #15
 8009d54:	2101      	movs	r1, #1
 8009d56:	fa01 f303 	lsl.w	r3, r1, r3
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	68f9      	ldr	r1, [r7, #12]
 8009d5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009d62:	4313      	orrs	r3, r2
 8009d64:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	015a      	lsls	r2, r3, #5
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d155      	bne.n	8009e28 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	015a      	lsls	r2, r3, #5
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	4413      	add	r3, r2
 8009d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	791b      	ldrb	r3, [r3, #4]
 8009d96:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009d98:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	059b      	lsls	r3, r3, #22
 8009d9e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009da0:	4313      	orrs	r3, r2
 8009da2:	68ba      	ldr	r2, [r7, #8]
 8009da4:	0151      	lsls	r1, r2, #5
 8009da6:	68fa      	ldr	r2, [r7, #12]
 8009da8:	440a      	add	r2, r1
 8009daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009db2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009db6:	6013      	str	r3, [r2, #0]
 8009db8:	e036      	b.n	8009e28 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dc0:	69da      	ldr	r2, [r3, #28]
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	f003 030f 	and.w	r3, r3, #15
 8009dca:	2101      	movs	r1, #1
 8009dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd0:	041b      	lsls	r3, r3, #16
 8009dd2:	68f9      	ldr	r1, [r7, #12]
 8009dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d11a      	bne.n	8009e28 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	015a      	lsls	r2, r3, #5
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	4413      	add	r3, r2
 8009dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dfe:	681a      	ldr	r2, [r3, #0]
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	68db      	ldr	r3, [r3, #12]
 8009e04:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	791b      	ldrb	r3, [r3, #4]
 8009e0c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009e0e:	430b      	orrs	r3, r1
 8009e10:	4313      	orrs	r3, r2
 8009e12:	68ba      	ldr	r2, [r7, #8]
 8009e14:	0151      	lsls	r1, r2, #5
 8009e16:	68fa      	ldr	r2, [r7, #12]
 8009e18:	440a      	add	r2, r1
 8009e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e26:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3714      	adds	r7, #20
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e34:	4770      	bx	lr
	...

08009e38 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	785b      	ldrb	r3, [r3, #1]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d161      	bne.n	8009f18 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	015a      	lsls	r2, r3, #5
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009e66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009e6a:	d11f      	bne.n	8009eac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	015a      	lsls	r2, r3, #5
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	4413      	add	r3, r2
 8009e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	68ba      	ldr	r2, [r7, #8]
 8009e7c:	0151      	lsls	r1, r2, #5
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	440a      	add	r2, r1
 8009e82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009e8a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	015a      	lsls	r2, r3, #5
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	4413      	add	r3, r2
 8009e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	0151      	lsls	r1, r2, #5
 8009e9e:	68fa      	ldr	r2, [r7, #12]
 8009ea0:	440a      	add	r2, r1
 8009ea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ea6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009eaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009eb2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	f003 030f 	and.w	r3, r3, #15
 8009ebc:	2101      	movs	r1, #1
 8009ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	43db      	mvns	r3, r3
 8009ec6:	68f9      	ldr	r1, [r7, #12]
 8009ec8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ecc:	4013      	ands	r3, r2
 8009ece:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed6:	69da      	ldr	r2, [r3, #28]
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	f003 030f 	and.w	r3, r3, #15
 8009ee0:	2101      	movs	r1, #1
 8009ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	43db      	mvns	r3, r3
 8009eea:	68f9      	ldr	r1, [r7, #12]
 8009eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	0159      	lsls	r1, r3, #5
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	440b      	add	r3, r1
 8009f0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f0e:	4619      	mov	r1, r3
 8009f10:	4b35      	ldr	r3, [pc, #212]	; (8009fe8 <USB_DeactivateEndpoint+0x1b0>)
 8009f12:	4013      	ands	r3, r2
 8009f14:	600b      	str	r3, [r1, #0]
 8009f16:	e060      	b.n	8009fda <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	015a      	lsls	r2, r3, #5
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	4413      	add	r3, r2
 8009f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f2e:	d11f      	bne.n	8009f70 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	015a      	lsls	r2, r3, #5
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	4413      	add	r3, r2
 8009f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	68ba      	ldr	r2, [r7, #8]
 8009f40:	0151      	lsls	r1, r2, #5
 8009f42:	68fa      	ldr	r2, [r7, #12]
 8009f44:	440a      	add	r2, r1
 8009f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f4e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	0151      	lsls	r1, r2, #5
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	440a      	add	r2, r1
 8009f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009f6e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	f003 030f 	and.w	r3, r3, #15
 8009f80:	2101      	movs	r1, #1
 8009f82:	fa01 f303 	lsl.w	r3, r1, r3
 8009f86:	041b      	lsls	r3, r3, #16
 8009f88:	43db      	mvns	r3, r3
 8009f8a:	68f9      	ldr	r1, [r7, #12]
 8009f8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009f90:	4013      	ands	r3, r2
 8009f92:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9a:	69da      	ldr	r2, [r3, #28]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	781b      	ldrb	r3, [r3, #0]
 8009fa0:	f003 030f 	and.w	r3, r3, #15
 8009fa4:	2101      	movs	r1, #1
 8009fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8009faa:	041b      	lsls	r3, r3, #16
 8009fac:	43db      	mvns	r3, r3
 8009fae:	68f9      	ldr	r1, [r7, #12]
 8009fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	015a      	lsls	r2, r3, #5
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	4413      	add	r3, r2
 8009fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	0159      	lsls	r1, r3, #5
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	440b      	add	r3, r1
 8009fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	4b05      	ldr	r3, [pc, #20]	; (8009fec <USB_DeactivateEndpoint+0x1b4>)
 8009fd6:	4013      	ands	r3, r2
 8009fd8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009fda:	2300      	movs	r3, #0
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3714      	adds	r7, #20
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe6:	4770      	bx	lr
 8009fe8:	ec337800 	.word	0xec337800
 8009fec:	eff37800 	.word	0xeff37800

08009ff0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b08a      	sub	sp, #40	; 0x28
 8009ff4:	af02      	add	r7, sp, #8
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	60b9      	str	r1, [r7, #8]
 8009ffa:	4613      	mov	r3, r2
 8009ffc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	785b      	ldrb	r3, [r3, #1]
 800a00c:	2b01      	cmp	r3, #1
 800a00e:	f040 815c 	bne.w	800a2ca <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d132      	bne.n	800a080 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	015a      	lsls	r2, r3, #5
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	4413      	add	r3, r2
 800a022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	69ba      	ldr	r2, [r7, #24]
 800a02a:	0151      	lsls	r1, r2, #5
 800a02c:	69fa      	ldr	r2, [r7, #28]
 800a02e:	440a      	add	r2, r1
 800a030:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a034:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a038:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a03c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a03e:	69bb      	ldr	r3, [r7, #24]
 800a040:	015a      	lsls	r2, r3, #5
 800a042:	69fb      	ldr	r3, [r7, #28]
 800a044:	4413      	add	r3, r2
 800a046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a04a:	691b      	ldr	r3, [r3, #16]
 800a04c:	69ba      	ldr	r2, [r7, #24]
 800a04e:	0151      	lsls	r1, r2, #5
 800a050:	69fa      	ldr	r2, [r7, #28]
 800a052:	440a      	add	r2, r1
 800a054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a058:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a05c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	015a      	lsls	r2, r3, #5
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	4413      	add	r3, r2
 800a066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	69ba      	ldr	r2, [r7, #24]
 800a06e:	0151      	lsls	r1, r2, #5
 800a070:	69fa      	ldr	r2, [r7, #28]
 800a072:	440a      	add	r2, r1
 800a074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a078:	0cdb      	lsrs	r3, r3, #19
 800a07a:	04db      	lsls	r3, r3, #19
 800a07c:	6113      	str	r3, [r2, #16]
 800a07e:	e074      	b.n	800a16a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a080:	69bb      	ldr	r3, [r7, #24]
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	69fb      	ldr	r3, [r7, #28]
 800a086:	4413      	add	r3, r2
 800a088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a08c:	691b      	ldr	r3, [r3, #16]
 800a08e:	69ba      	ldr	r2, [r7, #24]
 800a090:	0151      	lsls	r1, r2, #5
 800a092:	69fa      	ldr	r2, [r7, #28]
 800a094:	440a      	add	r2, r1
 800a096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a09a:	0cdb      	lsrs	r3, r3, #19
 800a09c:	04db      	lsls	r3, r3, #19
 800a09e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	015a      	lsls	r2, r3, #5
 800a0a4:	69fb      	ldr	r3, [r7, #28]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0ac:	691b      	ldr	r3, [r3, #16]
 800a0ae:	69ba      	ldr	r2, [r7, #24]
 800a0b0:	0151      	lsls	r1, r2, #5
 800a0b2:	69fa      	ldr	r2, [r7, #28]
 800a0b4:	440a      	add	r2, r1
 800a0b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a0ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a0be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a0c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	015a      	lsls	r2, r3, #5
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	4413      	add	r3, r2
 800a0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	6999      	ldr	r1, [r3, #24]
 800a0d6:	68bb      	ldr	r3, [r7, #8]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	440b      	add	r3, r1
 800a0dc:	1e59      	subs	r1, r3, #1
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a0e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a0e8:	4b9d      	ldr	r3, [pc, #628]	; (800a360 <USB_EPStartXfer+0x370>)
 800a0ea:	400b      	ands	r3, r1
 800a0ec:	69b9      	ldr	r1, [r7, #24]
 800a0ee:	0148      	lsls	r0, r1, #5
 800a0f0:	69f9      	ldr	r1, [r7, #28]
 800a0f2:	4401      	add	r1, r0
 800a0f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a0fc:	69bb      	ldr	r3, [r7, #24]
 800a0fe:	015a      	lsls	r2, r3, #5
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	4413      	add	r3, r2
 800a104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a108:	691a      	ldr	r2, [r3, #16]
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a112:	69b9      	ldr	r1, [r7, #24]
 800a114:	0148      	lsls	r0, r1, #5
 800a116:	69f9      	ldr	r1, [r7, #28]
 800a118:	4401      	add	r1, r0
 800a11a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a11e:	4313      	orrs	r3, r2
 800a120:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	791b      	ldrb	r3, [r3, #4]
 800a126:	2b01      	cmp	r3, #1
 800a128:	d11f      	bne.n	800a16a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	015a      	lsls	r2, r3, #5
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	4413      	add	r3, r2
 800a132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	69ba      	ldr	r2, [r7, #24]
 800a13a:	0151      	lsls	r1, r2, #5
 800a13c:	69fa      	ldr	r2, [r7, #28]
 800a13e:	440a      	add	r2, r1
 800a140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a144:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a148:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a14a:	69bb      	ldr	r3, [r7, #24]
 800a14c:	015a      	lsls	r2, r3, #5
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	4413      	add	r3, r2
 800a152:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a156:	691b      	ldr	r3, [r3, #16]
 800a158:	69ba      	ldr	r2, [r7, #24]
 800a15a:	0151      	lsls	r1, r2, #5
 800a15c:	69fa      	ldr	r2, [r7, #28]
 800a15e:	440a      	add	r2, r1
 800a160:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a164:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a168:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a16a:	79fb      	ldrb	r3, [r7, #7]
 800a16c:	2b01      	cmp	r3, #1
 800a16e:	d14b      	bne.n	800a208 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a170:	68bb      	ldr	r3, [r7, #8]
 800a172:	695b      	ldr	r3, [r3, #20]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d009      	beq.n	800a18c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a184:	461a      	mov	r2, r3
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	791b      	ldrb	r3, [r3, #4]
 800a190:	2b01      	cmp	r3, #1
 800a192:	d128      	bne.n	800a1e6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d110      	bne.n	800a1c6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	015a      	lsls	r2, r3, #5
 800a1a8:	69fb      	ldr	r3, [r7, #28]
 800a1aa:	4413      	add	r3, r2
 800a1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	69ba      	ldr	r2, [r7, #24]
 800a1b4:	0151      	lsls	r1, r2, #5
 800a1b6:	69fa      	ldr	r2, [r7, #28]
 800a1b8:	440a      	add	r2, r1
 800a1ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a1c2:	6013      	str	r3, [r2, #0]
 800a1c4:	e00f      	b.n	800a1e6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a1c6:	69bb      	ldr	r3, [r7, #24]
 800a1c8:	015a      	lsls	r2, r3, #5
 800a1ca:	69fb      	ldr	r3, [r7, #28]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	69ba      	ldr	r2, [r7, #24]
 800a1d6:	0151      	lsls	r1, r2, #5
 800a1d8:	69fa      	ldr	r2, [r7, #28]
 800a1da:	440a      	add	r2, r1
 800a1dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a1e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a1e4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	69ba      	ldr	r2, [r7, #24]
 800a1f6:	0151      	lsls	r1, r2, #5
 800a1f8:	69fa      	ldr	r2, [r7, #28]
 800a1fa:	440a      	add	r2, r1
 800a1fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a200:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a204:	6013      	str	r3, [r2, #0]
 800a206:	e133      	b.n	800a470 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a208:	69bb      	ldr	r3, [r7, #24]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	69fb      	ldr	r3, [r7, #28]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	69ba      	ldr	r2, [r7, #24]
 800a218:	0151      	lsls	r1, r2, #5
 800a21a:	69fa      	ldr	r2, [r7, #28]
 800a21c:	440a      	add	r2, r1
 800a21e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a222:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a226:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	791b      	ldrb	r3, [r3, #4]
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d015      	beq.n	800a25c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	699b      	ldr	r3, [r3, #24]
 800a234:	2b00      	cmp	r3, #0
 800a236:	f000 811b 	beq.w	800a470 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	781b      	ldrb	r3, [r3, #0]
 800a246:	f003 030f 	and.w	r3, r3, #15
 800a24a:	2101      	movs	r1, #1
 800a24c:	fa01 f303 	lsl.w	r3, r1, r3
 800a250:	69f9      	ldr	r1, [r7, #28]
 800a252:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a256:	4313      	orrs	r3, r2
 800a258:	634b      	str	r3, [r1, #52]	; 0x34
 800a25a:	e109      	b.n	800a470 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d110      	bne.n	800a28e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	69fb      	ldr	r3, [r7, #28]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	69ba      	ldr	r2, [r7, #24]
 800a27c:	0151      	lsls	r1, r2, #5
 800a27e:	69fa      	ldr	r2, [r7, #28]
 800a280:	440a      	add	r2, r1
 800a282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a286:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a28a:	6013      	str	r3, [r2, #0]
 800a28c:	e00f      	b.n	800a2ae <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	015a      	lsls	r2, r3, #5
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	4413      	add	r3, r2
 800a296:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	69ba      	ldr	r2, [r7, #24]
 800a29e:	0151      	lsls	r1, r2, #5
 800a2a0:	69fa      	ldr	r2, [r7, #28]
 800a2a2:	440a      	add	r2, r1
 800a2a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2ac:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	6919      	ldr	r1, [r3, #16]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	781a      	ldrb	r2, [r3, #0]
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	b298      	uxth	r0, r3
 800a2bc:	79fb      	ldrb	r3, [r7, #7]
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	68f8      	ldr	r0, [r7, #12]
 800a2c4:	f000 fade 	bl	800a884 <USB_WritePacket>
 800a2c8:	e0d2      	b.n	800a470 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	015a      	lsls	r2, r3, #5
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	69ba      	ldr	r2, [r7, #24]
 800a2da:	0151      	lsls	r1, r2, #5
 800a2dc:	69fa      	ldr	r2, [r7, #28]
 800a2de:	440a      	add	r2, r1
 800a2e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2e4:	0cdb      	lsrs	r3, r3, #19
 800a2e6:	04db      	lsls	r3, r3, #19
 800a2e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a2ea:	69bb      	ldr	r3, [r7, #24]
 800a2ec:	015a      	lsls	r2, r3, #5
 800a2ee:	69fb      	ldr	r3, [r7, #28]
 800a2f0:	4413      	add	r3, r2
 800a2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2f6:	691b      	ldr	r3, [r3, #16]
 800a2f8:	69ba      	ldr	r2, [r7, #24]
 800a2fa:	0151      	lsls	r1, r2, #5
 800a2fc:	69fa      	ldr	r2, [r7, #28]
 800a2fe:	440a      	add	r2, r1
 800a300:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a304:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a308:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a30c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d126      	bne.n	800a364 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	015a      	lsls	r2, r3, #5
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	4413      	add	r3, r2
 800a31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a322:	691a      	ldr	r2, [r3, #16]
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a32c:	69b9      	ldr	r1, [r7, #24]
 800a32e:	0148      	lsls	r0, r1, #5
 800a330:	69f9      	ldr	r1, [r7, #28]
 800a332:	4401      	add	r1, r0
 800a334:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a338:	4313      	orrs	r3, r2
 800a33a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	015a      	lsls	r2, r3, #5
 800a340:	69fb      	ldr	r3, [r7, #28]
 800a342:	4413      	add	r3, r2
 800a344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a348:	691b      	ldr	r3, [r3, #16]
 800a34a:	69ba      	ldr	r2, [r7, #24]
 800a34c:	0151      	lsls	r1, r2, #5
 800a34e:	69fa      	ldr	r2, [r7, #28]
 800a350:	440a      	add	r2, r1
 800a352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a35a:	6113      	str	r3, [r2, #16]
 800a35c:	e03a      	b.n	800a3d4 <USB_EPStartXfer+0x3e4>
 800a35e:	bf00      	nop
 800a360:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a364:	68bb      	ldr	r3, [r7, #8]
 800a366:	699a      	ldr	r2, [r3, #24]
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	68db      	ldr	r3, [r3, #12]
 800a36c:	4413      	add	r3, r2
 800a36e:	1e5a      	subs	r2, r3, #1
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	fbb2 f3f3 	udiv	r3, r2, r3
 800a378:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	8afa      	ldrh	r2, [r7, #22]
 800a380:	fb03 f202 	mul.w	r2, r3, r2
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a388:	69bb      	ldr	r3, [r7, #24]
 800a38a:	015a      	lsls	r2, r3, #5
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	4413      	add	r3, r2
 800a390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a394:	691a      	ldr	r2, [r3, #16]
 800a396:	8afb      	ldrh	r3, [r7, #22]
 800a398:	04d9      	lsls	r1, r3, #19
 800a39a:	4b38      	ldr	r3, [pc, #224]	; (800a47c <USB_EPStartXfer+0x48c>)
 800a39c:	400b      	ands	r3, r1
 800a39e:	69b9      	ldr	r1, [r7, #24]
 800a3a0:	0148      	lsls	r0, r1, #5
 800a3a2:	69f9      	ldr	r1, [r7, #28]
 800a3a4:	4401      	add	r1, r0
 800a3a6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a3ae:	69bb      	ldr	r3, [r7, #24]
 800a3b0:	015a      	lsls	r2, r3, #5
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3ba:	691a      	ldr	r2, [r3, #16]
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	69db      	ldr	r3, [r3, #28]
 800a3c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3c4:	69b9      	ldr	r1, [r7, #24]
 800a3c6:	0148      	lsls	r0, r1, #5
 800a3c8:	69f9      	ldr	r1, [r7, #28]
 800a3ca:	4401      	add	r1, r0
 800a3cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a3d4:	79fb      	ldrb	r3, [r7, #7]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	d10d      	bne.n	800a3f6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	691b      	ldr	r3, [r3, #16]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d009      	beq.n	800a3f6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	6919      	ldr	r1, [r3, #16]
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	015a      	lsls	r2, r3, #5
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	4413      	add	r3, r2
 800a3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f2:	460a      	mov	r2, r1
 800a3f4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	791b      	ldrb	r3, [r3, #4]
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d128      	bne.n	800a450 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d110      	bne.n	800a430 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	69ba      	ldr	r2, [r7, #24]
 800a41e:	0151      	lsls	r1, r2, #5
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	440a      	add	r2, r1
 800a424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a428:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a42c:	6013      	str	r3, [r2, #0]
 800a42e:	e00f      	b.n	800a450 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	015a      	lsls	r2, r3, #5
 800a434:	69fb      	ldr	r3, [r7, #28]
 800a436:	4413      	add	r3, r2
 800a438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	69ba      	ldr	r2, [r7, #24]
 800a440:	0151      	lsls	r1, r2, #5
 800a442:	69fa      	ldr	r2, [r7, #28]
 800a444:	440a      	add	r2, r1
 800a446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a44a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a44e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	015a      	lsls	r2, r3, #5
 800a454:	69fb      	ldr	r3, [r7, #28]
 800a456:	4413      	add	r3, r2
 800a458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	69ba      	ldr	r2, [r7, #24]
 800a460:	0151      	lsls	r1, r2, #5
 800a462:	69fa      	ldr	r2, [r7, #28]
 800a464:	440a      	add	r2, r1
 800a466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a46a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a46e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a470:	2300      	movs	r3, #0
}
 800a472:	4618      	mov	r0, r3
 800a474:	3720      	adds	r7, #32
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}
 800a47a:	bf00      	nop
 800a47c:	1ff80000 	.word	0x1ff80000

0800a480 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a480:	b480      	push	{r7}
 800a482:	b087      	sub	sp, #28
 800a484:	af00      	add	r7, sp, #0
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	4613      	mov	r3, r2
 800a48c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a492:	68bb      	ldr	r3, [r7, #8]
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	785b      	ldrb	r3, [r3, #1]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	f040 80ce 	bne.w	800a63e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d132      	bne.n	800a510 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	015a      	lsls	r2, r3, #5
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4b6:	691b      	ldr	r3, [r3, #16]
 800a4b8:	693a      	ldr	r2, [r7, #16]
 800a4ba:	0151      	lsls	r1, r2, #5
 800a4bc:	697a      	ldr	r2, [r7, #20]
 800a4be:	440a      	add	r2, r1
 800a4c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a4c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a4cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a4ce:	693b      	ldr	r3, [r7, #16]
 800a4d0:	015a      	lsls	r2, r3, #5
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4da:	691b      	ldr	r3, [r3, #16]
 800a4dc:	693a      	ldr	r2, [r7, #16]
 800a4de:	0151      	lsls	r1, r2, #5
 800a4e0:	697a      	ldr	r2, [r7, #20]
 800a4e2:	440a      	add	r2, r1
 800a4e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a4e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a4ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	015a      	lsls	r2, r3, #5
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	0151      	lsls	r1, r2, #5
 800a500:	697a      	ldr	r2, [r7, #20]
 800a502:	440a      	add	r2, r1
 800a504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a508:	0cdb      	lsrs	r3, r3, #19
 800a50a:	04db      	lsls	r3, r3, #19
 800a50c:	6113      	str	r3, [r2, #16]
 800a50e:	e04e      	b.n	800a5ae <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	015a      	lsls	r2, r3, #5
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	4413      	add	r3, r2
 800a518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	693a      	ldr	r2, [r7, #16]
 800a520:	0151      	lsls	r1, r2, #5
 800a522:	697a      	ldr	r2, [r7, #20]
 800a524:	440a      	add	r2, r1
 800a526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a52a:	0cdb      	lsrs	r3, r3, #19
 800a52c:	04db      	lsls	r3, r3, #19
 800a52e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	015a      	lsls	r2, r3, #5
 800a534:	697b      	ldr	r3, [r7, #20]
 800a536:	4413      	add	r3, r2
 800a538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a53c:	691b      	ldr	r3, [r3, #16]
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	0151      	lsls	r1, r2, #5
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	440a      	add	r2, r1
 800a546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a54a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a54e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a552:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	699a      	ldr	r2, [r3, #24]
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	68db      	ldr	r3, [r3, #12]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d903      	bls.n	800a568 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a560:	68bb      	ldr	r3, [r7, #8]
 800a562:	68da      	ldr	r2, [r3, #12]
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	697b      	ldr	r3, [r7, #20]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a574:	691b      	ldr	r3, [r3, #16]
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	0151      	lsls	r1, r2, #5
 800a57a:	697a      	ldr	r2, [r7, #20]
 800a57c:	440a      	add	r2, r1
 800a57e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a582:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a586:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	015a      	lsls	r2, r3, #5
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	4413      	add	r3, r2
 800a590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a594:	691a      	ldr	r2, [r3, #16]
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a59e:	6939      	ldr	r1, [r7, #16]
 800a5a0:	0148      	lsls	r0, r1, #5
 800a5a2:	6979      	ldr	r1, [r7, #20]
 800a5a4:	4401      	add	r1, r0
 800a5a6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a5ae:	79fb      	ldrb	r3, [r7, #7]
 800a5b0:	2b01      	cmp	r3, #1
 800a5b2:	d11e      	bne.n	800a5f2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	695b      	ldr	r3, [r3, #20]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d009      	beq.n	800a5d0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a5bc:	693b      	ldr	r3, [r7, #16]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	695b      	ldr	r3, [r3, #20]
 800a5ce:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	015a      	lsls	r2, r3, #5
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	693a      	ldr	r2, [r7, #16]
 800a5e0:	0151      	lsls	r1, r2, #5
 800a5e2:	697a      	ldr	r2, [r7, #20]
 800a5e4:	440a      	add	r2, r1
 800a5e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a5ee:	6013      	str	r3, [r2, #0]
 800a5f0:	e097      	b.n	800a722 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	015a      	lsls	r2, r3, #5
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	693a      	ldr	r2, [r7, #16]
 800a602:	0151      	lsls	r1, r2, #5
 800a604:	697a      	ldr	r2, [r7, #20]
 800a606:	440a      	add	r2, r1
 800a608:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a60c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a610:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	699b      	ldr	r3, [r3, #24]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f000 8083 	beq.w	800a722 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a622:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	f003 030f 	and.w	r3, r3, #15
 800a62c:	2101      	movs	r1, #1
 800a62e:	fa01 f303 	lsl.w	r3, r1, r3
 800a632:	6979      	ldr	r1, [r7, #20]
 800a634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a638:	4313      	orrs	r3, r2
 800a63a:	634b      	str	r3, [r1, #52]	; 0x34
 800a63c:	e071      	b.n	800a722 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	015a      	lsls	r2, r3, #5
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	4413      	add	r3, r2
 800a646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a64a:	691b      	ldr	r3, [r3, #16]
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	0151      	lsls	r1, r2, #5
 800a650:	697a      	ldr	r2, [r7, #20]
 800a652:	440a      	add	r2, r1
 800a654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a658:	0cdb      	lsrs	r3, r3, #19
 800a65a:	04db      	lsls	r3, r3, #19
 800a65c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	015a      	lsls	r2, r3, #5
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	4413      	add	r3, r2
 800a666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a66a:	691b      	ldr	r3, [r3, #16]
 800a66c:	693a      	ldr	r2, [r7, #16]
 800a66e:	0151      	lsls	r1, r2, #5
 800a670:	697a      	ldr	r2, [r7, #20]
 800a672:	440a      	add	r2, r1
 800a674:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a678:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a67c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a680:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	699b      	ldr	r3, [r3, #24]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d003      	beq.n	800a692 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	68da      	ldr	r2, [r3, #12]
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	68da      	ldr	r2, [r3, #12]
 800a696:	68bb      	ldr	r3, [r7, #8]
 800a698:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a69a:	693b      	ldr	r3, [r7, #16]
 800a69c:	015a      	lsls	r2, r3, #5
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6a6:	691b      	ldr	r3, [r3, #16]
 800a6a8:	693a      	ldr	r2, [r7, #16]
 800a6aa:	0151      	lsls	r1, r2, #5
 800a6ac:	697a      	ldr	r2, [r7, #20]
 800a6ae:	440a      	add	r2, r1
 800a6b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a6ba:	693b      	ldr	r3, [r7, #16]
 800a6bc:	015a      	lsls	r2, r3, #5
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6c6:	691a      	ldr	r2, [r3, #16]
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	69db      	ldr	r3, [r3, #28]
 800a6cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6d0:	6939      	ldr	r1, [r7, #16]
 800a6d2:	0148      	lsls	r0, r1, #5
 800a6d4:	6979      	ldr	r1, [r7, #20]
 800a6d6:	4401      	add	r1, r0
 800a6d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a6e0:	79fb      	ldrb	r3, [r7, #7]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d10d      	bne.n	800a702 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	691b      	ldr	r3, [r3, #16]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d009      	beq.n	800a702 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	6919      	ldr	r1, [r3, #16]
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	015a      	lsls	r2, r3, #5
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	4413      	add	r3, r2
 800a6fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6fe:	460a      	mov	r2, r1
 800a700:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	015a      	lsls	r2, r3, #5
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	4413      	add	r3, r2
 800a70a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	693a      	ldr	r2, [r7, #16]
 800a712:	0151      	lsls	r1, r2, #5
 800a714:	697a      	ldr	r2, [r7, #20]
 800a716:	440a      	add	r2, r1
 800a718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a71c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a720:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	371c      	adds	r7, #28
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a730:	b480      	push	{r7}
 800a732:	b087      	sub	sp, #28
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a73a:	2300      	movs	r3, #0
 800a73c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	785b      	ldrb	r3, [r3, #1]
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d14a      	bne.n	800a7e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a74e:	683b      	ldr	r3, [r7, #0]
 800a750:	781b      	ldrb	r3, [r3, #0]
 800a752:	015a      	lsls	r2, r3, #5
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	4413      	add	r3, r2
 800a758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a762:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a766:	f040 8086 	bne.w	800a876 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a76a:	683b      	ldr	r3, [r7, #0]
 800a76c:	781b      	ldrb	r3, [r3, #0]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	683a      	ldr	r2, [r7, #0]
 800a77c:	7812      	ldrb	r2, [r2, #0]
 800a77e:	0151      	lsls	r1, r2, #5
 800a780:	693a      	ldr	r2, [r7, #16]
 800a782:	440a      	add	r2, r1
 800a784:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a788:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a78c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	781b      	ldrb	r3, [r3, #0]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	693b      	ldr	r3, [r7, #16]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	683a      	ldr	r2, [r7, #0]
 800a7a0:	7812      	ldrb	r2, [r2, #0]
 800a7a2:	0151      	lsls	r1, r2, #5
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	440a      	add	r2, r1
 800a7a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a7ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a7b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f242 7210 	movw	r2, #10000	; 0x2710
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d902      	bls.n	800a7c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	75fb      	strb	r3, [r7, #23]
          break;
 800a7c6:	e056      	b.n	800a876 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	015a      	lsls	r2, r3, #5
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7e0:	d0e7      	beq.n	800a7b2 <USB_EPStopXfer+0x82>
 800a7e2:	e048      	b.n	800a876 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	781b      	ldrb	r3, [r3, #0]
 800a7e8:	015a      	lsls	r2, r3, #5
 800a7ea:	693b      	ldr	r3, [r7, #16]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a7f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a7fc:	d13b      	bne.n	800a876 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	015a      	lsls	r2, r3, #5
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	4413      	add	r3, r2
 800a808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	683a      	ldr	r2, [r7, #0]
 800a810:	7812      	ldrb	r2, [r2, #0]
 800a812:	0151      	lsls	r1, r2, #5
 800a814:	693a      	ldr	r2, [r7, #16]
 800a816:	440a      	add	r2, r1
 800a818:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a81c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a820:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	015a      	lsls	r2, r3, #5
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	4413      	add	r3, r2
 800a82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	683a      	ldr	r2, [r7, #0]
 800a834:	7812      	ldrb	r2, [r2, #0]
 800a836:	0151      	lsls	r1, r2, #5
 800a838:	693a      	ldr	r2, [r7, #16]
 800a83a:	440a      	add	r2, r1
 800a83c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a840:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a844:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	3301      	adds	r3, #1
 800a84a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f242 7210 	movw	r2, #10000	; 0x2710
 800a852:	4293      	cmp	r3, r2
 800a854:	d902      	bls.n	800a85c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a856:	2301      	movs	r3, #1
 800a858:	75fb      	strb	r3, [r7, #23]
          break;
 800a85a:	e00c      	b.n	800a876 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	781b      	ldrb	r3, [r3, #0]
 800a860:	015a      	lsls	r2, r3, #5
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	4413      	add	r3, r2
 800a866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a870:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a874:	d0e7      	beq.n	800a846 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a876:	7dfb      	ldrb	r3, [r7, #23]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	371c      	adds	r7, #28
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a884:	b480      	push	{r7}
 800a886:	b089      	sub	sp, #36	; 0x24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	60b9      	str	r1, [r7, #8]
 800a88e:	4611      	mov	r1, r2
 800a890:	461a      	mov	r2, r3
 800a892:	460b      	mov	r3, r1
 800a894:	71fb      	strb	r3, [r7, #7]
 800a896:	4613      	mov	r3, r2
 800a898:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a8a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d123      	bne.n	800a8f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a8aa:	88bb      	ldrh	r3, [r7, #4]
 800a8ac:	3303      	adds	r3, #3
 800a8ae:	089b      	lsrs	r3, r3, #2
 800a8b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	61bb      	str	r3, [r7, #24]
 800a8b6:	e018      	b.n	800a8ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a8b8:	79fb      	ldrb	r3, [r7, #7]
 800a8ba:	031a      	lsls	r2, r3, #12
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	4413      	add	r3, r2
 800a8c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a8c4:	461a      	mov	r2, r3
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	3301      	adds	r3, #1
 800a8d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8d2:	69fb      	ldr	r3, [r7, #28]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a8e4:	69bb      	ldr	r3, [r7, #24]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	61bb      	str	r3, [r7, #24]
 800a8ea:	69ba      	ldr	r2, [r7, #24]
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	429a      	cmp	r2, r3
 800a8f0:	d3e2      	bcc.n	800a8b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3724      	adds	r7, #36	; 0x24
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr

0800a900 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a900:	b480      	push	{r7}
 800a902:	b08b      	sub	sp, #44	; 0x2c
 800a904:	af00      	add	r7, sp, #0
 800a906:	60f8      	str	r0, [r7, #12]
 800a908:	60b9      	str	r1, [r7, #8]
 800a90a:	4613      	mov	r3, r2
 800a90c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a916:	88fb      	ldrh	r3, [r7, #6]
 800a918:	089b      	lsrs	r3, r3, #2
 800a91a:	b29b      	uxth	r3, r3
 800a91c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a91e:	88fb      	ldrh	r3, [r7, #6]
 800a920:	f003 0303 	and.w	r3, r3, #3
 800a924:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a926:	2300      	movs	r3, #0
 800a928:	623b      	str	r3, [r7, #32]
 800a92a:	e014      	b.n	800a956 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a92c:	69bb      	ldr	r3, [r7, #24]
 800a92e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a936:	601a      	str	r2, [r3, #0]
    pDest++;
 800a938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a93a:	3301      	adds	r3, #1
 800a93c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	3301      	adds	r3, #1
 800a942:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a946:	3301      	adds	r3, #1
 800a948:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800a94a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a94c:	3301      	adds	r3, #1
 800a94e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	3301      	adds	r3, #1
 800a954:	623b      	str	r3, [r7, #32]
 800a956:	6a3a      	ldr	r2, [r7, #32]
 800a958:	697b      	ldr	r3, [r7, #20]
 800a95a:	429a      	cmp	r2, r3
 800a95c:	d3e6      	bcc.n	800a92c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a95e:	8bfb      	ldrh	r3, [r7, #30]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d01e      	beq.n	800a9a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a964:	2300      	movs	r3, #0
 800a966:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a968:	69bb      	ldr	r3, [r7, #24]
 800a96a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a96e:	461a      	mov	r2, r3
 800a970:	f107 0310 	add.w	r3, r7, #16
 800a974:	6812      	ldr	r2, [r2, #0]
 800a976:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	b2db      	uxtb	r3, r3
 800a97e:	00db      	lsls	r3, r3, #3
 800a980:	fa22 f303 	lsr.w	r3, r2, r3
 800a984:	b2da      	uxtb	r2, r3
 800a986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a988:	701a      	strb	r2, [r3, #0]
      i++;
 800a98a:	6a3b      	ldr	r3, [r7, #32]
 800a98c:	3301      	adds	r3, #1
 800a98e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a992:	3301      	adds	r3, #1
 800a994:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800a996:	8bfb      	ldrh	r3, [r7, #30]
 800a998:	3b01      	subs	r3, #1
 800a99a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a99c:	8bfb      	ldrh	r3, [r7, #30]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d1ea      	bne.n	800a978 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a9a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	372c      	adds	r7, #44	; 0x2c
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b085      	sub	sp, #20
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	6078      	str	r0, [r7, #4]
 800a9b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	781b      	ldrb	r3, [r3, #0]
 800a9c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	785b      	ldrb	r3, [r3, #1]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d12c      	bne.n	800aa26 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	015a      	lsls	r2, r3, #5
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	db12      	blt.n	800aa04 <USB_EPSetStall+0x54>
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d00f      	beq.n	800aa04 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	68ba      	ldr	r2, [r7, #8]
 800a9f4:	0151      	lsls	r1, r2, #5
 800a9f6:	68fa      	ldr	r2, [r7, #12]
 800a9f8:	440a      	add	r2, r1
 800a9fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa02:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	015a      	lsls	r2, r3, #5
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	4413      	add	r3, r2
 800aa0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68ba      	ldr	r2, [r7, #8]
 800aa14:	0151      	lsls	r1, r2, #5
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	440a      	add	r2, r1
 800aa1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa22:	6013      	str	r3, [r2, #0]
 800aa24:	e02b      	b.n	800aa7e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aa26:	68bb      	ldr	r3, [r7, #8]
 800aa28:	015a      	lsls	r2, r3, #5
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	4413      	add	r3, r2
 800aa2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	db12      	blt.n	800aa5e <USB_EPSetStall+0xae>
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d00f      	beq.n	800aa5e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	015a      	lsls	r2, r3, #5
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4413      	add	r3, r2
 800aa46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	68ba      	ldr	r2, [r7, #8]
 800aa4e:	0151      	lsls	r1, r2, #5
 800aa50:	68fa      	ldr	r2, [r7, #12]
 800aa52:	440a      	add	r2, r1
 800aa54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa58:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aa5c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	015a      	lsls	r2, r3, #5
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	4413      	add	r3, r2
 800aa66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	0151      	lsls	r1, r2, #5
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	440a      	add	r2, r1
 800aa74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa7c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800aa7e:	2300      	movs	r3, #0
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3714      	adds	r7, #20
 800aa84:	46bd      	mov	sp, r7
 800aa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8a:	4770      	bx	lr

0800aa8c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b085      	sub	sp, #20
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aaa0:	683b      	ldr	r3, [r7, #0]
 800aaa2:	785b      	ldrb	r3, [r3, #1]
 800aaa4:	2b01      	cmp	r3, #1
 800aaa6:	d128      	bne.n	800aafa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	015a      	lsls	r2, r3, #5
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	68ba      	ldr	r2, [r7, #8]
 800aab8:	0151      	lsls	r1, r2, #5
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	440a      	add	r2, r1
 800aabe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aac2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800aac6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	791b      	ldrb	r3, [r3, #4]
 800aacc:	2b03      	cmp	r3, #3
 800aace:	d003      	beq.n	800aad8 <USB_EPClearStall+0x4c>
 800aad0:	683b      	ldr	r3, [r7, #0]
 800aad2:	791b      	ldrb	r3, [r3, #4]
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d138      	bne.n	800ab4a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	015a      	lsls	r2, r3, #5
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	68ba      	ldr	r2, [r7, #8]
 800aae8:	0151      	lsls	r1, r2, #5
 800aaea:	68fa      	ldr	r2, [r7, #12]
 800aaec:	440a      	add	r2, r1
 800aaee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aaf6:	6013      	str	r3, [r2, #0]
 800aaf8:	e027      	b.n	800ab4a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	015a      	lsls	r2, r3, #5
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	4413      	add	r3, r2
 800ab02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	68ba      	ldr	r2, [r7, #8]
 800ab0a:	0151      	lsls	r1, r2, #5
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	440a      	add	r2, r1
 800ab10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ab18:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	791b      	ldrb	r3, [r3, #4]
 800ab1e:	2b03      	cmp	r3, #3
 800ab20:	d003      	beq.n	800ab2a <USB_EPClearStall+0x9e>
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	791b      	ldrb	r3, [r3, #4]
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d10f      	bne.n	800ab4a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	015a      	lsls	r2, r3, #5
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4413      	add	r3, r2
 800ab32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68ba      	ldr	r2, [r7, #8]
 800ab3a:	0151      	lsls	r1, r2, #5
 800ab3c:	68fa      	ldr	r2, [r7, #12]
 800ab3e:	440a      	add	r2, r1
 800ab40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab48:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3714      	adds	r7, #20
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	68fa      	ldr	r2, [r7, #12]
 800ab72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab76:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ab7a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab82:	681a      	ldr	r2, [r3, #0]
 800ab84:	78fb      	ldrb	r3, [r7, #3]
 800ab86:	011b      	lsls	r3, r3, #4
 800ab88:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ab8c:	68f9      	ldr	r1, [r7, #12]
 800ab8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab92:	4313      	orrs	r3, r2
 800ab94:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3714      	adds	r7, #20
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800aba4:	b480      	push	{r7}
 800aba6:	b085      	sub	sp, #20
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800abbe:	f023 0303 	bic.w	r3, r3, #3
 800abc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800abd2:	f023 0302 	bic.w	r3, r3, #2
 800abd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3714      	adds	r7, #20
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800abe6:	b480      	push	{r7}
 800abe8:	b085      	sub	sp, #20
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ac00:	f023 0303 	bic.w	r3, r3, #3
 800ac04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac14:	f043 0302 	orr.w	r3, r3, #2
 800ac18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3714      	adds	r7, #20
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b085      	sub	sp, #20
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	699b      	ldr	r3, [r3, #24]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ac40:	68fb      	ldr	r3, [r7, #12]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr

0800ac4e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac4e:	b480      	push	{r7}
 800ac50:	b085      	sub	sp, #20
 800ac52:	af00      	add	r7, sp, #0
 800ac54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac60:	699b      	ldr	r3, [r3, #24]
 800ac62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	68ba      	ldr	r2, [r7, #8]
 800ac6e:	4013      	ands	r3, r2
 800ac70:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	0c1b      	lsrs	r3, r3, #16
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3714      	adds	r7, #20
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac80:	4770      	bx	lr

0800ac82 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ac82:	b480      	push	{r7}
 800ac84:	b085      	sub	sp, #20
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac94:	699b      	ldr	r3, [r3, #24]
 800ac96:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9e:	69db      	ldr	r3, [r3, #28]
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	4013      	ands	r3, r2
 800aca4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	b29b      	uxth	r3, r3
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b085      	sub	sp, #20
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
 800acbe:	460b      	mov	r3, r1
 800acc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800acc6:	78fb      	ldrb	r3, [r7, #3]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acdc:	695b      	ldr	r3, [r3, #20]
 800acde:	68ba      	ldr	r2, [r7, #8]
 800ace0:	4013      	ands	r3, r2
 800ace2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ace4:	68bb      	ldr	r3, [r7, #8]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3714      	adds	r7, #20
 800acea:	46bd      	mov	sp, r7
 800acec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf0:	4770      	bx	lr

0800acf2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800acf2:	b480      	push	{r7}
 800acf4:	b087      	sub	sp, #28
 800acf6:	af00      	add	r7, sp, #0
 800acf8:	6078      	str	r0, [r7, #4]
 800acfa:	460b      	mov	r3, r1
 800acfc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad14:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ad16:	78fb      	ldrb	r3, [r7, #3]
 800ad18:	f003 030f 	and.w	r3, r3, #15
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	fa22 f303 	lsr.w	r3, r2, r3
 800ad22:	01db      	lsls	r3, r3, #7
 800ad24:	b2db      	uxtb	r3, r3
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	4313      	orrs	r3, r2
 800ad2a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ad2c:	78fb      	ldrb	r3, [r7, #3]
 800ad2e:	015a      	lsls	r2, r3, #5
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	4413      	add	r3, r2
 800ad34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	693a      	ldr	r2, [r7, #16]
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ad40:	68bb      	ldr	r3, [r7, #8]
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	371c      	adds	r7, #28
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr

0800ad4e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ad4e:	b480      	push	{r7}
 800ad50:	b083      	sub	sp, #12
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	695b      	ldr	r3, [r3, #20]
 800ad5a:	f003 0301 	and.w	r3, r3, #1
}
 800ad5e:	4618      	mov	r0, r3
 800ad60:	370c      	adds	r7, #12
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr

0800ad6a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b085      	sub	sp, #20
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	68fa      	ldr	r2, [r7, #12]
 800ad80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad84:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800ad88:	f023 0307 	bic.w	r3, r3, #7
 800ad8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	68fa      	ldr	r2, [r7, #12]
 800ad98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ada0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ada2:	2300      	movs	r3, #0
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3714      	adds	r7, #20
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800adb0:	b480      	push	{r7}
 800adb2:	b087      	sub	sp, #28
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	60f8      	str	r0, [r7, #12]
 800adb8:	460b      	mov	r3, r1
 800adba:	607a      	str	r2, [r7, #4]
 800adbc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	333c      	adds	r3, #60	; 0x3c
 800adc6:	3304      	adds	r3, #4
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	4a26      	ldr	r2, [pc, #152]	; (800ae68 <USB_EP0_OutStart+0xb8>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d90a      	bls.n	800adea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800add4:	697b      	ldr	r3, [r7, #20]
 800add6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ade0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ade4:	d101      	bne.n	800adea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ade6:	2300      	movs	r3, #0
 800ade8:	e037      	b.n	800ae5a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800adea:	697b      	ldr	r3, [r7, #20]
 800adec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf0:	461a      	mov	r2, r3
 800adf2:	2300      	movs	r3, #0
 800adf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adfc:	691b      	ldr	r3, [r3, #16]
 800adfe:	697a      	ldr	r2, [r7, #20]
 800ae00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae10:	691b      	ldr	r3, [r3, #16]
 800ae12:	697a      	ldr	r2, [r7, #20]
 800ae14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae18:	f043 0318 	orr.w	r3, r3, #24
 800ae1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ae30:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ae32:	7afb      	ldrb	r3, [r7, #11]
 800ae34:	2b01      	cmp	r3, #1
 800ae36:	d10f      	bne.n	800ae58 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae3e:	461a      	mov	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	697a      	ldr	r2, [r7, #20]
 800ae4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ae56:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae58:	2300      	movs	r3, #0
}
 800ae5a:	4618      	mov	r0, r3
 800ae5c:	371c      	adds	r7, #28
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr
 800ae66:	bf00      	nop
 800ae68:	4f54300a 	.word	0x4f54300a

0800ae6c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b085      	sub	sp, #20
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	4a13      	ldr	r2, [pc, #76]	; (800aed0 <USB_CoreReset+0x64>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d901      	bls.n	800ae8a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ae86:	2303      	movs	r3, #3
 800ae88:	e01b      	b.n	800aec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	daf2      	bge.n	800ae78 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ae92:	2300      	movs	r3, #0
 800ae94:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	f043 0201 	orr.w	r2, r3, #1
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	3301      	adds	r3, #1
 800aea6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4a09      	ldr	r2, [pc, #36]	; (800aed0 <USB_CoreReset+0x64>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d901      	bls.n	800aeb4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aeb0:	2303      	movs	r3, #3
 800aeb2:	e006      	b.n	800aec2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	691b      	ldr	r3, [r3, #16]
 800aeb8:	f003 0301 	and.w	r3, r3, #1
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	d0f0      	beq.n	800aea2 <USB_CoreReset+0x36>

  return HAL_OK;
 800aec0:	2300      	movs	r3, #0
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3714      	adds	r7, #20
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	00030d40 	.word	0x00030d40

0800aed4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aee0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800aee4:	f002 fca2 	bl	800d82c <USBD_static_malloc>
 800aee8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d109      	bne.n	800af04 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	32b0      	adds	r2, #176	; 0xb0
 800aefa:	2100      	movs	r1, #0
 800aefc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800af00:	2302      	movs	r3, #2
 800af02:	e0d4      	b.n	800b0ae <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800af04:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800af08:	2100      	movs	r1, #0
 800af0a:	68f8      	ldr	r0, [r7, #12]
 800af0c:	f002 fd1a 	bl	800d944 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	32b0      	adds	r2, #176	; 0xb0
 800af1a:	68f9      	ldr	r1, [r7, #12]
 800af1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	32b0      	adds	r2, #176	; 0xb0
 800af2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	7c1b      	ldrb	r3, [r3, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d138      	bne.n	800afae <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800af3c:	4b5e      	ldr	r3, [pc, #376]	; (800b0b8 <USBD_CDC_Init+0x1e4>)
 800af3e:	7819      	ldrb	r1, [r3, #0]
 800af40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af44:	2202      	movs	r2, #2
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f002 fb4d 	bl	800d5e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800af4c:	4b5a      	ldr	r3, [pc, #360]	; (800b0b8 <USBD_CDC_Init+0x1e4>)
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	f003 020f 	and.w	r2, r3, #15
 800af54:	6879      	ldr	r1, [r7, #4]
 800af56:	4613      	mov	r3, r2
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	4413      	add	r3, r2
 800af5c:	009b      	lsls	r3, r3, #2
 800af5e:	440b      	add	r3, r1
 800af60:	3324      	adds	r3, #36	; 0x24
 800af62:	2201      	movs	r2, #1
 800af64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800af66:	4b55      	ldr	r3, [pc, #340]	; (800b0bc <USBD_CDC_Init+0x1e8>)
 800af68:	7819      	ldrb	r1, [r3, #0]
 800af6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af6e:	2202      	movs	r2, #2
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f002 fb38 	bl	800d5e6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800af76:	4b51      	ldr	r3, [pc, #324]	; (800b0bc <USBD_CDC_Init+0x1e8>)
 800af78:	781b      	ldrb	r3, [r3, #0]
 800af7a:	f003 020f 	and.w	r2, r3, #15
 800af7e:	6879      	ldr	r1, [r7, #4]
 800af80:	4613      	mov	r3, r2
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	440b      	add	r3, r1
 800af8a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800af8e:	2201      	movs	r2, #1
 800af90:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800af92:	4b4b      	ldr	r3, [pc, #300]	; (800b0c0 <USBD_CDC_Init+0x1ec>)
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	f003 020f 	and.w	r2, r3, #15
 800af9a:	6879      	ldr	r1, [r7, #4]
 800af9c:	4613      	mov	r3, r2
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	4413      	add	r3, r2
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	440b      	add	r3, r1
 800afa6:	3326      	adds	r3, #38	; 0x26
 800afa8:	2210      	movs	r2, #16
 800afaa:	801a      	strh	r2, [r3, #0]
 800afac:	e035      	b.n	800b01a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800afae:	4b42      	ldr	r3, [pc, #264]	; (800b0b8 <USBD_CDC_Init+0x1e4>)
 800afb0:	7819      	ldrb	r1, [r3, #0]
 800afb2:	2340      	movs	r3, #64	; 0x40
 800afb4:	2202      	movs	r2, #2
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f002 fb15 	bl	800d5e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800afbc:	4b3e      	ldr	r3, [pc, #248]	; (800b0b8 <USBD_CDC_Init+0x1e4>)
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	f003 020f 	and.w	r2, r3, #15
 800afc4:	6879      	ldr	r1, [r7, #4]
 800afc6:	4613      	mov	r3, r2
 800afc8:	009b      	lsls	r3, r3, #2
 800afca:	4413      	add	r3, r2
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	440b      	add	r3, r1
 800afd0:	3324      	adds	r3, #36	; 0x24
 800afd2:	2201      	movs	r2, #1
 800afd4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800afd6:	4b39      	ldr	r3, [pc, #228]	; (800b0bc <USBD_CDC_Init+0x1e8>)
 800afd8:	7819      	ldrb	r1, [r3, #0]
 800afda:	2340      	movs	r3, #64	; 0x40
 800afdc:	2202      	movs	r2, #2
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f002 fb01 	bl	800d5e6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800afe4:	4b35      	ldr	r3, [pc, #212]	; (800b0bc <USBD_CDC_Init+0x1e8>)
 800afe6:	781b      	ldrb	r3, [r3, #0]
 800afe8:	f003 020f 	and.w	r2, r3, #15
 800afec:	6879      	ldr	r1, [r7, #4]
 800afee:	4613      	mov	r3, r2
 800aff0:	009b      	lsls	r3, r3, #2
 800aff2:	4413      	add	r3, r2
 800aff4:	009b      	lsls	r3, r3, #2
 800aff6:	440b      	add	r3, r1
 800aff8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800affc:	2201      	movs	r2, #1
 800affe:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b000:	4b2f      	ldr	r3, [pc, #188]	; (800b0c0 <USBD_CDC_Init+0x1ec>)
 800b002:	781b      	ldrb	r3, [r3, #0]
 800b004:	f003 020f 	and.w	r2, r3, #15
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	4613      	mov	r3, r2
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	4413      	add	r3, r2
 800b010:	009b      	lsls	r3, r3, #2
 800b012:	440b      	add	r3, r1
 800b014:	3326      	adds	r3, #38	; 0x26
 800b016:	2210      	movs	r2, #16
 800b018:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b01a:	4b29      	ldr	r3, [pc, #164]	; (800b0c0 <USBD_CDC_Init+0x1ec>)
 800b01c:	7819      	ldrb	r1, [r3, #0]
 800b01e:	2308      	movs	r3, #8
 800b020:	2203      	movs	r2, #3
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f002 fadf 	bl	800d5e6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b028:	4b25      	ldr	r3, [pc, #148]	; (800b0c0 <USBD_CDC_Init+0x1ec>)
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	f003 020f 	and.w	r2, r3, #15
 800b030:	6879      	ldr	r1, [r7, #4]
 800b032:	4613      	mov	r3, r2
 800b034:	009b      	lsls	r3, r3, #2
 800b036:	4413      	add	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	440b      	add	r3, r1
 800b03c:	3324      	adds	r3, #36	; 0x24
 800b03e:	2201      	movs	r2, #1
 800b040:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b050:	687a      	ldr	r2, [r7, #4]
 800b052:	33b0      	adds	r3, #176	; 0xb0
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	4413      	add	r3, r2
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	2200      	movs	r2, #0
 800b062:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	2200      	movs	r2, #0
 800b06a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b074:	2b00      	cmp	r3, #0
 800b076:	d101      	bne.n	800b07c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800b078:	2302      	movs	r3, #2
 800b07a:	e018      	b.n	800b0ae <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	7c1b      	ldrb	r3, [r3, #16]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d10a      	bne.n	800b09a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b084:	4b0d      	ldr	r3, [pc, #52]	; (800b0bc <USBD_CDC_Init+0x1e8>)
 800b086:	7819      	ldrb	r1, [r3, #0]
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b08e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f002 fb96 	bl	800d7c4 <USBD_LL_PrepareReceive>
 800b098:	e008      	b.n	800b0ac <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b09a:	4b08      	ldr	r3, [pc, #32]	; (800b0bc <USBD_CDC_Init+0x1e8>)
 800b09c:	7819      	ldrb	r1, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b0a4:	2340      	movs	r3, #64	; 0x40
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f002 fb8c 	bl	800d7c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	20000093 	.word	0x20000093
 800b0bc:	20000094 	.word	0x20000094
 800b0c0:	20000095 	.word	0x20000095

0800b0c4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	6078      	str	r0, [r7, #4]
 800b0cc:	460b      	mov	r3, r1
 800b0ce:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b0d0:	4b3a      	ldr	r3, [pc, #232]	; (800b1bc <USBD_CDC_DeInit+0xf8>)
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f002 faab 	bl	800d632 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b0dc:	4b37      	ldr	r3, [pc, #220]	; (800b1bc <USBD_CDC_DeInit+0xf8>)
 800b0de:	781b      	ldrb	r3, [r3, #0]
 800b0e0:	f003 020f 	and.w	r2, r3, #15
 800b0e4:	6879      	ldr	r1, [r7, #4]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	009b      	lsls	r3, r3, #2
 800b0ea:	4413      	add	r3, r2
 800b0ec:	009b      	lsls	r3, r3, #2
 800b0ee:	440b      	add	r3, r1
 800b0f0:	3324      	adds	r3, #36	; 0x24
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b0f6:	4b32      	ldr	r3, [pc, #200]	; (800b1c0 <USBD_CDC_DeInit+0xfc>)
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f002 fa98 	bl	800d632 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b102:	4b2f      	ldr	r3, [pc, #188]	; (800b1c0 <USBD_CDC_DeInit+0xfc>)
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	f003 020f 	and.w	r2, r3, #15
 800b10a:	6879      	ldr	r1, [r7, #4]
 800b10c:	4613      	mov	r3, r2
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	4413      	add	r3, r2
 800b112:	009b      	lsls	r3, r3, #2
 800b114:	440b      	add	r3, r1
 800b116:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b11a:	2200      	movs	r2, #0
 800b11c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b11e:	4b29      	ldr	r3, [pc, #164]	; (800b1c4 <USBD_CDC_DeInit+0x100>)
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	4619      	mov	r1, r3
 800b124:	6878      	ldr	r0, [r7, #4]
 800b126:	f002 fa84 	bl	800d632 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b12a:	4b26      	ldr	r3, [pc, #152]	; (800b1c4 <USBD_CDC_DeInit+0x100>)
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	f003 020f 	and.w	r2, r3, #15
 800b132:	6879      	ldr	r1, [r7, #4]
 800b134:	4613      	mov	r3, r2
 800b136:	009b      	lsls	r3, r3, #2
 800b138:	4413      	add	r3, r2
 800b13a:	009b      	lsls	r3, r3, #2
 800b13c:	440b      	add	r3, r1
 800b13e:	3324      	adds	r3, #36	; 0x24
 800b140:	2200      	movs	r2, #0
 800b142:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b144:	4b1f      	ldr	r3, [pc, #124]	; (800b1c4 <USBD_CDC_DeInit+0x100>)
 800b146:	781b      	ldrb	r3, [r3, #0]
 800b148:	f003 020f 	and.w	r2, r3, #15
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	4613      	mov	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4413      	add	r3, r2
 800b154:	009b      	lsls	r3, r3, #2
 800b156:	440b      	add	r3, r1
 800b158:	3326      	adds	r3, #38	; 0x26
 800b15a:	2200      	movs	r2, #0
 800b15c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	32b0      	adds	r2, #176	; 0xb0
 800b168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d01f      	beq.n	800b1b0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	33b0      	adds	r3, #176	; 0xb0
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	32b0      	adds	r2, #176	; 0xb0
 800b18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b192:	4618      	mov	r0, r3
 800b194:	f002 fb58 	bl	800d848 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	32b0      	adds	r2, #176	; 0xb0
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b1b0:	2300      	movs	r3, #0
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3708      	adds	r7, #8
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	20000093 	.word	0x20000093
 800b1c0:	20000094 	.word	0x20000094
 800b1c4:	20000095 	.word	0x20000095

0800b1c8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	32b0      	adds	r2, #176	; 0xb0
 800b1dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1e0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b1f4:	2303      	movs	r3, #3
 800b1f6:	e0bf      	b.n	800b378 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	781b      	ldrb	r3, [r3, #0]
 800b1fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b200:	2b00      	cmp	r3, #0
 800b202:	d050      	beq.n	800b2a6 <USBD_CDC_Setup+0xde>
 800b204:	2b20      	cmp	r3, #32
 800b206:	f040 80af 	bne.w	800b368 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b20a:	683b      	ldr	r3, [r7, #0]
 800b20c:	88db      	ldrh	r3, [r3, #6]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d03a      	beq.n	800b288 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	b25b      	sxtb	r3, r3
 800b218:	2b00      	cmp	r3, #0
 800b21a:	da1b      	bge.n	800b254 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b222:	687a      	ldr	r2, [r7, #4]
 800b224:	33b0      	adds	r3, #176	; 0xb0
 800b226:	009b      	lsls	r3, r3, #2
 800b228:	4413      	add	r3, r2
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b232:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b234:	683a      	ldr	r2, [r7, #0]
 800b236:	88d2      	ldrh	r2, [r2, #6]
 800b238:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b23a:	683b      	ldr	r3, [r7, #0]
 800b23c:	88db      	ldrh	r3, [r3, #6]
 800b23e:	2b07      	cmp	r3, #7
 800b240:	bf28      	it	cs
 800b242:	2307      	movcs	r3, #7
 800b244:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	89fa      	ldrh	r2, [r7, #14]
 800b24a:	4619      	mov	r1, r3
 800b24c:	6878      	ldr	r0, [r7, #4]
 800b24e:	f001 fd89 	bl	800cd64 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b252:	e090      	b.n	800b376 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	785a      	ldrb	r2, [r3, #1]
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	88db      	ldrh	r3, [r3, #6]
 800b262:	2b3f      	cmp	r3, #63	; 0x3f
 800b264:	d803      	bhi.n	800b26e <USBD_CDC_Setup+0xa6>
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	88db      	ldrh	r3, [r3, #6]
 800b26a:	b2da      	uxtb	r2, r3
 800b26c:	e000      	b.n	800b270 <USBD_CDC_Setup+0xa8>
 800b26e:	2240      	movs	r2, #64	; 0x40
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b276:	6939      	ldr	r1, [r7, #16]
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b27e:	461a      	mov	r2, r3
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f001 fd9b 	bl	800cdbc <USBD_CtlPrepareRx>
      break;
 800b286:	e076      	b.n	800b376 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	33b0      	adds	r3, #176	; 0xb0
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	4413      	add	r3, r2
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	683a      	ldr	r2, [r7, #0]
 800b29c:	7850      	ldrb	r0, [r2, #1]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	6839      	ldr	r1, [r7, #0]
 800b2a2:	4798      	blx	r3
      break;
 800b2a4:	e067      	b.n	800b376 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	785b      	ldrb	r3, [r3, #1]
 800b2aa:	2b0b      	cmp	r3, #11
 800b2ac:	d851      	bhi.n	800b352 <USBD_CDC_Setup+0x18a>
 800b2ae:	a201      	add	r2, pc, #4	; (adr r2, 800b2b4 <USBD_CDC_Setup+0xec>)
 800b2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b4:	0800b2e5 	.word	0x0800b2e5
 800b2b8:	0800b361 	.word	0x0800b361
 800b2bc:	0800b353 	.word	0x0800b353
 800b2c0:	0800b353 	.word	0x0800b353
 800b2c4:	0800b353 	.word	0x0800b353
 800b2c8:	0800b353 	.word	0x0800b353
 800b2cc:	0800b353 	.word	0x0800b353
 800b2d0:	0800b353 	.word	0x0800b353
 800b2d4:	0800b353 	.word	0x0800b353
 800b2d8:	0800b353 	.word	0x0800b353
 800b2dc:	0800b30f 	.word	0x0800b30f
 800b2e0:	0800b339 	.word	0x0800b339
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	2b03      	cmp	r3, #3
 800b2ee:	d107      	bne.n	800b300 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800b2f0:	f107 030a 	add.w	r3, r7, #10
 800b2f4:	2202      	movs	r2, #2
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f001 fd33 	bl	800cd64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b2fe:	e032      	b.n	800b366 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b300:	6839      	ldr	r1, [r7, #0]
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f001 fcbd 	bl	800cc82 <USBD_CtlError>
            ret = USBD_FAIL;
 800b308:	2303      	movs	r3, #3
 800b30a:	75fb      	strb	r3, [r7, #23]
          break;
 800b30c:	e02b      	b.n	800b366 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b03      	cmp	r3, #3
 800b318:	d107      	bne.n	800b32a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800b31a:	f107 030d 	add.w	r3, r7, #13
 800b31e:	2201      	movs	r2, #1
 800b320:	4619      	mov	r1, r3
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f001 fd1e 	bl	800cd64 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b328:	e01d      	b.n	800b366 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800b32a:	6839      	ldr	r1, [r7, #0]
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f001 fca8 	bl	800cc82 <USBD_CtlError>
            ret = USBD_FAIL;
 800b332:	2303      	movs	r3, #3
 800b334:	75fb      	strb	r3, [r7, #23]
          break;
 800b336:	e016      	b.n	800b366 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b33e:	b2db      	uxtb	r3, r3
 800b340:	2b03      	cmp	r3, #3
 800b342:	d00f      	beq.n	800b364 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800b344:	6839      	ldr	r1, [r7, #0]
 800b346:	6878      	ldr	r0, [r7, #4]
 800b348:	f001 fc9b 	bl	800cc82 <USBD_CtlError>
            ret = USBD_FAIL;
 800b34c:	2303      	movs	r3, #3
 800b34e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b350:	e008      	b.n	800b364 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f001 fc94 	bl	800cc82 <USBD_CtlError>
          ret = USBD_FAIL;
 800b35a:	2303      	movs	r3, #3
 800b35c:	75fb      	strb	r3, [r7, #23]
          break;
 800b35e:	e002      	b.n	800b366 <USBD_CDC_Setup+0x19e>
          break;
 800b360:	bf00      	nop
 800b362:	e008      	b.n	800b376 <USBD_CDC_Setup+0x1ae>
          break;
 800b364:	bf00      	nop
      }
      break;
 800b366:	e006      	b.n	800b376 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800b368:	6839      	ldr	r1, [r7, #0]
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 fc89 	bl	800cc82 <USBD_CtlError>
      ret = USBD_FAIL;
 800b370:	2303      	movs	r3, #3
 800b372:	75fb      	strb	r3, [r7, #23]
      break;
 800b374:	bf00      	nop
  }

  return (uint8_t)ret;
 800b376:	7dfb      	ldrb	r3, [r7, #23]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	3718      	adds	r7, #24
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b084      	sub	sp, #16
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
 800b388:	460b      	mov	r3, r1
 800b38a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b392:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	32b0      	adds	r2, #176	; 0xb0
 800b39e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d101      	bne.n	800b3aa <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	e065      	b.n	800b476 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	32b0      	adds	r2, #176	; 0xb0
 800b3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b3ba:	78fb      	ldrb	r3, [r7, #3]
 800b3bc:	f003 020f 	and.w	r2, r3, #15
 800b3c0:	6879      	ldr	r1, [r7, #4]
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	440b      	add	r3, r1
 800b3cc:	3318      	adds	r3, #24
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d02f      	beq.n	800b434 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b3d4:	78fb      	ldrb	r3, [r7, #3]
 800b3d6:	f003 020f 	and.w	r2, r3, #15
 800b3da:	6879      	ldr	r1, [r7, #4]
 800b3dc:	4613      	mov	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	440b      	add	r3, r1
 800b3e6:	3318      	adds	r3, #24
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	78fb      	ldrb	r3, [r7, #3]
 800b3ec:	f003 010f 	and.w	r1, r3, #15
 800b3f0:	68f8      	ldr	r0, [r7, #12]
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	00db      	lsls	r3, r3, #3
 800b3f6:	440b      	add	r3, r1
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4403      	add	r3, r0
 800b3fc:	3348      	adds	r3, #72	; 0x48
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	fbb2 f1f3 	udiv	r1, r2, r3
 800b404:	fb01 f303 	mul.w	r3, r1, r3
 800b408:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d112      	bne.n	800b434 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b40e:	78fb      	ldrb	r3, [r7, #3]
 800b410:	f003 020f 	and.w	r2, r3, #15
 800b414:	6879      	ldr	r1, [r7, #4]
 800b416:	4613      	mov	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	4413      	add	r3, r2
 800b41c:	009b      	lsls	r3, r3, #2
 800b41e:	440b      	add	r3, r1
 800b420:	3318      	adds	r3, #24
 800b422:	2200      	movs	r2, #0
 800b424:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b426:	78f9      	ldrb	r1, [r7, #3]
 800b428:	2300      	movs	r3, #0
 800b42a:	2200      	movs	r2, #0
 800b42c:	6878      	ldr	r0, [r7, #4]
 800b42e:	f002 f9a8 	bl	800d782 <USBD_LL_Transmit>
 800b432:	e01f      	b.n	800b474 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	2200      	movs	r2, #0
 800b438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	33b0      	adds	r3, #176	; 0xb0
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	691b      	ldr	r3, [r3, #16]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d010      	beq.n	800b474 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b458:	687a      	ldr	r2, [r7, #4]
 800b45a:	33b0      	adds	r3, #176	; 0xb0
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	4413      	add	r3, r2
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	691b      	ldr	r3, [r3, #16]
 800b464:	68ba      	ldr	r2, [r7, #8]
 800b466:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b470:	78fa      	ldrb	r2, [r7, #3]
 800b472:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b474:	2300      	movs	r3, #0
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}

0800b47e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b47e:	b580      	push	{r7, lr}
 800b480:	b084      	sub	sp, #16
 800b482:	af00      	add	r7, sp, #0
 800b484:	6078      	str	r0, [r7, #4]
 800b486:	460b      	mov	r3, r1
 800b488:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	32b0      	adds	r2, #176	; 0xb0
 800b494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b498:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	32b0      	adds	r2, #176	; 0xb0
 800b4a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d101      	bne.n	800b4b0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b4ac:	2303      	movs	r3, #3
 800b4ae:	e01a      	b.n	800b4e6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b4b0:	78fb      	ldrb	r3, [r7, #3]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f002 f9a6 	bl	800d806 <USBD_LL_GetRxDataSize>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b4c8:	687a      	ldr	r2, [r7, #4]
 800b4ca:	33b0      	adds	r3, #176	; 0xb0
 800b4cc:	009b      	lsls	r3, r3, #2
 800b4ce:	4413      	add	r3, r2
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	68db      	ldr	r3, [r3, #12]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b4da:	68fa      	ldr	r2, [r7, #12]
 800b4dc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3710      	adds	r7, #16
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}

0800b4ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b4ee:	b580      	push	{r7, lr}
 800b4f0:	b084      	sub	sp, #16
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	32b0      	adds	r2, #176	; 0xb0
 800b500:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b504:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d101      	bne.n	800b510 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b50c:	2303      	movs	r3, #3
 800b50e:	e025      	b.n	800b55c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	33b0      	adds	r3, #176	; 0xb0
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	4413      	add	r3, r2
 800b51e:	685b      	ldr	r3, [r3, #4]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d01a      	beq.n	800b55a <USBD_CDC_EP0_RxReady+0x6c>
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b52a:	2bff      	cmp	r3, #255	; 0xff
 800b52c:	d015      	beq.n	800b55a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	33b0      	adds	r3, #176	; 0xb0
 800b538:	009b      	lsls	r3, r3, #2
 800b53a:	4413      	add	r3, r2
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	68fa      	ldr	r2, [r7, #12]
 800b542:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800b546:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b54e:	b292      	uxth	r2, r2
 800b550:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	22ff      	movs	r2, #255	; 0xff
 800b556:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b086      	sub	sp, #24
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b56c:	2182      	movs	r1, #130	; 0x82
 800b56e:	4818      	ldr	r0, [pc, #96]	; (800b5d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b570:	f000 fd4f 	bl	800c012 <USBD_GetEpDesc>
 800b574:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b576:	2101      	movs	r1, #1
 800b578:	4815      	ldr	r0, [pc, #84]	; (800b5d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b57a:	f000 fd4a 	bl	800c012 <USBD_GetEpDesc>
 800b57e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b580:	2181      	movs	r1, #129	; 0x81
 800b582:	4813      	ldr	r0, [pc, #76]	; (800b5d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b584:	f000 fd45 	bl	800c012 <USBD_GetEpDesc>
 800b588:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b58a:	697b      	ldr	r3, [r7, #20]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d002      	beq.n	800b596 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b590:	697b      	ldr	r3, [r7, #20]
 800b592:	2210      	movs	r2, #16
 800b594:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d006      	beq.n	800b5aa <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b59c:	693b      	ldr	r3, [r7, #16]
 800b59e:	2200      	movs	r2, #0
 800b5a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5a4:	711a      	strb	r2, [r3, #4]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d006      	beq.n	800b5be <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5b8:	711a      	strb	r2, [r3, #4]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	2243      	movs	r2, #67	; 0x43
 800b5c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b5c4:	4b02      	ldr	r3, [pc, #8]	; (800b5d0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3718      	adds	r7, #24
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	20000050 	.word	0x20000050

0800b5d4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b5dc:	2182      	movs	r1, #130	; 0x82
 800b5de:	4818      	ldr	r0, [pc, #96]	; (800b640 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b5e0:	f000 fd17 	bl	800c012 <USBD_GetEpDesc>
 800b5e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	4815      	ldr	r0, [pc, #84]	; (800b640 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b5ea:	f000 fd12 	bl	800c012 <USBD_GetEpDesc>
 800b5ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b5f0:	2181      	movs	r1, #129	; 0x81
 800b5f2:	4813      	ldr	r0, [pc, #76]	; (800b640 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b5f4:	f000 fd0d 	bl	800c012 <USBD_GetEpDesc>
 800b5f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d002      	beq.n	800b606 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b600:	697b      	ldr	r3, [r7, #20]
 800b602:	2210      	movs	r2, #16
 800b604:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d006      	beq.n	800b61a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b60c:	693b      	ldr	r3, [r7, #16]
 800b60e:	2200      	movs	r2, #0
 800b610:	711a      	strb	r2, [r3, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	f042 0202 	orr.w	r2, r2, #2
 800b618:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d006      	beq.n	800b62e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	711a      	strb	r2, [r3, #4]
 800b626:	2200      	movs	r2, #0
 800b628:	f042 0202 	orr.w	r2, r2, #2
 800b62c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2243      	movs	r2, #67	; 0x43
 800b632:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b634:	4b02      	ldr	r3, [pc, #8]	; (800b640 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b636:	4618      	mov	r0, r3
 800b638:	3718      	adds	r7, #24
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	20000050 	.word	0x20000050

0800b644 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b64c:	2182      	movs	r1, #130	; 0x82
 800b64e:	4818      	ldr	r0, [pc, #96]	; (800b6b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b650:	f000 fcdf 	bl	800c012 <USBD_GetEpDesc>
 800b654:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b656:	2101      	movs	r1, #1
 800b658:	4815      	ldr	r0, [pc, #84]	; (800b6b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b65a:	f000 fcda 	bl	800c012 <USBD_GetEpDesc>
 800b65e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b660:	2181      	movs	r1, #129	; 0x81
 800b662:	4813      	ldr	r0, [pc, #76]	; (800b6b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b664:	f000 fcd5 	bl	800c012 <USBD_GetEpDesc>
 800b668:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2210      	movs	r2, #16
 800b674:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b676:	693b      	ldr	r3, [r7, #16]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d006      	beq.n	800b68a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	2200      	movs	r2, #0
 800b680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b684:	711a      	strb	r2, [r3, #4]
 800b686:	2200      	movs	r2, #0
 800b688:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d006      	beq.n	800b69e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	2200      	movs	r2, #0
 800b694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b698:	711a      	strb	r2, [r3, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2243      	movs	r2, #67	; 0x43
 800b6a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b6a4:	4b02      	ldr	r3, [pc, #8]	; (800b6b0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3718      	adds	r7, #24
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	20000050 	.word	0x20000050

0800b6b4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b6b4:	b480      	push	{r7}
 800b6b6:	b083      	sub	sp, #12
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	220a      	movs	r2, #10
 800b6c0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b6c2:	4b03      	ldr	r3, [pc, #12]	; (800b6d0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	370c      	adds	r7, #12
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ce:	4770      	bx	lr
 800b6d0:	2000000c 	.word	0x2000000c

0800b6d4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	b083      	sub	sp, #12
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d101      	bne.n	800b6e8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	e009      	b.n	800b6fc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b6ee:	687a      	ldr	r2, [r7, #4]
 800b6f0:	33b0      	adds	r3, #176	; 0xb0
 800b6f2:	009b      	lsls	r3, r3, #2
 800b6f4:	4413      	add	r3, r2
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b6fa:	2300      	movs	r3, #0
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b708:	b480      	push	{r7}
 800b70a:	b087      	sub	sp, #28
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	60f8      	str	r0, [r7, #12]
 800b710:	60b9      	str	r1, [r7, #8]
 800b712:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	32b0      	adds	r2, #176	; 0xb0
 800b71e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b722:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d101      	bne.n	800b72e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b72a:	2303      	movs	r3, #3
 800b72c:	e008      	b.n	800b740 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b72e:	697b      	ldr	r3, [r7, #20]
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b736:	697b      	ldr	r3, [r7, #20]
 800b738:	687a      	ldr	r2, [r7, #4]
 800b73a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	371c      	adds	r7, #28
 800b744:	46bd      	mov	sp, r7
 800b746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74a:	4770      	bx	lr

0800b74c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
 800b754:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	32b0      	adds	r2, #176	; 0xb0
 800b760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b764:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b76c:	2303      	movs	r3, #3
 800b76e:	e004      	b.n	800b77a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	683a      	ldr	r2, [r7, #0]
 800b774:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b778:	2300      	movs	r3, #0
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3714      	adds	r7, #20
 800b77e:	46bd      	mov	sp, r7
 800b780:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b784:	4770      	bx	lr
	...

0800b788 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	32b0      	adds	r2, #176	; 0xb0
 800b79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b79e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	32b0      	adds	r2, #176	; 0xb0
 800b7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d101      	bne.n	800b7ba <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b7b6:	2303      	movs	r3, #3
 800b7b8:	e025      	b.n	800b806 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d11f      	bne.n	800b804 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b7c4:	68bb      	ldr	r3, [r7, #8]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b7cc:	4b10      	ldr	r3, [pc, #64]	; (800b810 <USBD_CDC_TransmitPacket+0x88>)
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	f003 020f 	and.w	r2, r3, #15
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800b7da:	6878      	ldr	r0, [r7, #4]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	009b      	lsls	r3, r3, #2
 800b7e4:	4403      	add	r3, r0
 800b7e6:	3318      	adds	r3, #24
 800b7e8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b7ea:	4b09      	ldr	r3, [pc, #36]	; (800b810 <USBD_CDC_TransmitPacket+0x88>)
 800b7ec:	7819      	ldrb	r1, [r3, #0]
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800b7f4:	68bb      	ldr	r3, [r7, #8]
 800b7f6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f001 ffc1 	bl	800d782 <USBD_LL_Transmit>

    ret = USBD_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b804:	7bfb      	ldrb	r3, [r7, #15]
}
 800b806:	4618      	mov	r0, r3
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
 800b80e:	bf00      	nop
 800b810:	20000093 	.word	0x20000093

0800b814 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	32b0      	adds	r2, #176	; 0xb0
 800b826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b82a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	32b0      	adds	r2, #176	; 0xb0
 800b836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d101      	bne.n	800b842 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b83e:	2303      	movs	r3, #3
 800b840:	e018      	b.n	800b874 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	7c1b      	ldrb	r3, [r3, #16]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10a      	bne.n	800b860 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b84a:	4b0c      	ldr	r3, [pc, #48]	; (800b87c <USBD_CDC_ReceivePacket+0x68>)
 800b84c:	7819      	ldrb	r1, [r3, #0]
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b854:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f001 ffb3 	bl	800d7c4 <USBD_LL_PrepareReceive>
 800b85e:	e008      	b.n	800b872 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b860:	4b06      	ldr	r3, [pc, #24]	; (800b87c <USBD_CDC_ReceivePacket+0x68>)
 800b862:	7819      	ldrb	r1, [r3, #0]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b86a:	2340      	movs	r3, #64	; 0x40
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f001 ffa9 	bl	800d7c4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b872:	2300      	movs	r3, #0
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}
 800b87c:	20000094 	.word	0x20000094

0800b880 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	4613      	mov	r3, r2
 800b88c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d101      	bne.n	800b898 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b894:	2303      	movs	r3, #3
 800b896:	e01f      	b.n	800b8d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b8b0:	68bb      	ldr	r3, [r7, #8]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d003      	beq.n	800b8be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	79fa      	ldrb	r2, [r7, #7]
 800b8ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f001 fe23 	bl	800d518 <USBD_LL_Init>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b8d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d101      	bne.n	800b8f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b8f4:	2303      	movs	r3, #3
 800b8f6:	e025      	b.n	800b944 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	683a      	ldr	r2, [r7, #0]
 800b8fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	32ae      	adds	r2, #174	; 0xae
 800b90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b90e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b910:	2b00      	cmp	r3, #0
 800b912:	d00f      	beq.n	800b934 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	32ae      	adds	r2, #174	; 0xae
 800b91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b924:	f107 020e 	add.w	r2, r7, #14
 800b928:	4610      	mov	r0, r2
 800b92a:	4798      	blx	r3
 800b92c:	4602      	mov	r2, r0
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b93a:	1c5a      	adds	r2, r3, #1
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3710      	adds	r7, #16
 800b948:	46bd      	mov	sp, r7
 800b94a:	bd80      	pop	{r7, pc}

0800b94c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b082      	sub	sp, #8
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f001 fe2b 	bl	800d5b0 <USBD_LL_Start>
 800b95a:	4603      	mov	r3, r0
}
 800b95c:	4618      	mov	r0, r3
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}

0800b964 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b964:	b480      	push	{r7}
 800b966:	b083      	sub	sp, #12
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b96c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b96e:	4618      	mov	r0, r3
 800b970:	370c      	adds	r7, #12
 800b972:	46bd      	mov	sp, r7
 800b974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b084      	sub	sp, #16
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	460b      	mov	r3, r1
 800b984:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b986:	2300      	movs	r3, #0
 800b988:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b990:	2b00      	cmp	r3, #0
 800b992:	d009      	beq.n	800b9a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	78fa      	ldrb	r2, [r7, #3]
 800b99e:	4611      	mov	r1, r2
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	4798      	blx	r3
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b9a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3710      	adds	r7, #16
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9b2:	b580      	push	{r7, lr}
 800b9b4:	b084      	sub	sp, #16
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9c8:	685b      	ldr	r3, [r3, #4]
 800b9ca:	78fa      	ldrb	r2, [r7, #3]
 800b9cc:	4611      	mov	r1, r2
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	4798      	blx	r3
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d001      	beq.n	800b9dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b9d8:	2303      	movs	r3, #3
 800b9da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3710      	adds	r7, #16
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}

0800b9e6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b084      	sub	sp, #16
 800b9ea:	af00      	add	r7, sp, #0
 800b9ec:	6078      	str	r0, [r7, #4]
 800b9ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b9f6:	6839      	ldr	r1, [r7, #0]
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f001 f908 	bl	800cc0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2201      	movs	r2, #1
 800ba02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba1a:	f003 031f 	and.w	r3, r3, #31
 800ba1e:	2b02      	cmp	r3, #2
 800ba20:	d01a      	beq.n	800ba58 <USBD_LL_SetupStage+0x72>
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d822      	bhi.n	800ba6c <USBD_LL_SetupStage+0x86>
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d002      	beq.n	800ba30 <USBD_LL_SetupStage+0x4a>
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d00a      	beq.n	800ba44 <USBD_LL_SetupStage+0x5e>
 800ba2e:	e01d      	b.n	800ba6c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba36:	4619      	mov	r1, r3
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 fb5f 	bl	800c0fc <USBD_StdDevReq>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	73fb      	strb	r3, [r7, #15]
      break;
 800ba42:	e020      	b.n	800ba86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f000 fbc7 	bl	800c1e0 <USBD_StdItfReq>
 800ba52:	4603      	mov	r3, r0
 800ba54:	73fb      	strb	r3, [r7, #15]
      break;
 800ba56:	e016      	b.n	800ba86 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 fc29 	bl	800c2b8 <USBD_StdEPReq>
 800ba66:	4603      	mov	r3, r0
 800ba68:	73fb      	strb	r3, [r7, #15]
      break;
 800ba6a:	e00c      	b.n	800ba86 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ba72:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ba76:	b2db      	uxtb	r3, r3
 800ba78:	4619      	mov	r1, r3
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	f001 fdf8 	bl	800d670 <USBD_LL_StallEP>
 800ba80:	4603      	mov	r3, r0
 800ba82:	73fb      	strb	r3, [r7, #15]
      break;
 800ba84:	bf00      	nop
  }

  return ret;
 800ba86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	3710      	adds	r7, #16
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	bd80      	pop	{r7, pc}

0800ba90 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b086      	sub	sp, #24
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	60f8      	str	r0, [r7, #12]
 800ba98:	460b      	mov	r3, r1
 800ba9a:	607a      	str	r2, [r7, #4]
 800ba9c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba9e:	2300      	movs	r3, #0
 800baa0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800baa2:	7afb      	ldrb	r3, [r7, #11]
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d16e      	bne.n	800bb86 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800baae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	f040 8098 	bne.w	800bbec <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	689a      	ldr	r2, [r3, #8]
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d913      	bls.n	800baf0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800bac8:	693b      	ldr	r3, [r7, #16]
 800baca:	689a      	ldr	r2, [r3, #8]
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	1ad2      	subs	r2, r2, r3
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800bad6:	693b      	ldr	r3, [r7, #16]
 800bad8:	68da      	ldr	r2, [r3, #12]
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	4293      	cmp	r3, r2
 800bae0:	bf28      	it	cs
 800bae2:	4613      	movcs	r3, r2
 800bae4:	461a      	mov	r2, r3
 800bae6:	6879      	ldr	r1, [r7, #4]
 800bae8:	68f8      	ldr	r0, [r7, #12]
 800baea:	f001 f984 	bl	800cdf6 <USBD_CtlContinueRx>
 800baee:	e07d      	b.n	800bbec <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800baf6:	f003 031f 	and.w	r3, r3, #31
 800bafa:	2b02      	cmp	r3, #2
 800bafc:	d014      	beq.n	800bb28 <USBD_LL_DataOutStage+0x98>
 800bafe:	2b02      	cmp	r3, #2
 800bb00:	d81d      	bhi.n	800bb3e <USBD_LL_DataOutStage+0xae>
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d002      	beq.n	800bb0c <USBD_LL_DataOutStage+0x7c>
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d003      	beq.n	800bb12 <USBD_LL_DataOutStage+0x82>
 800bb0a:	e018      	b.n	800bb3e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	75bb      	strb	r3, [r7, #22]
            break;
 800bb10:	e018      	b.n	800bb44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	4619      	mov	r1, r3
 800bb1c:	68f8      	ldr	r0, [r7, #12]
 800bb1e:	f000 fa5e 	bl	800bfde <USBD_CoreFindIF>
 800bb22:	4603      	mov	r3, r0
 800bb24:	75bb      	strb	r3, [r7, #22]
            break;
 800bb26:	e00d      	b.n	800bb44 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	4619      	mov	r1, r3
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f000 fa60 	bl	800bff8 <USBD_CoreFindEP>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	75bb      	strb	r3, [r7, #22]
            break;
 800bb3c:	e002      	b.n	800bb44 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800bb3e:	2300      	movs	r3, #0
 800bb40:	75bb      	strb	r3, [r7, #22]
            break;
 800bb42:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800bb44:	7dbb      	ldrb	r3, [r7, #22]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d119      	bne.n	800bb7e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b03      	cmp	r3, #3
 800bb54:	d113      	bne.n	800bb7e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800bb56:	7dba      	ldrb	r2, [r7, #22]
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	32ae      	adds	r2, #174	; 0xae
 800bb5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d00b      	beq.n	800bb7e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800bb66:	7dba      	ldrb	r2, [r7, #22]
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800bb6e:	7dba      	ldrb	r2, [r7, #22]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	32ae      	adds	r2, #174	; 0xae
 800bb74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	68f8      	ldr	r0, [r7, #12]
 800bb7c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800bb7e:	68f8      	ldr	r0, [r7, #12]
 800bb80:	f001 f94a 	bl	800ce18 <USBD_CtlSendStatus>
 800bb84:	e032      	b.n	800bbec <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800bb86:	7afb      	ldrb	r3, [r7, #11]
 800bb88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	4619      	mov	r1, r3
 800bb90:	68f8      	ldr	r0, [r7, #12]
 800bb92:	f000 fa31 	bl	800bff8 <USBD_CoreFindEP>
 800bb96:	4603      	mov	r3, r0
 800bb98:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb9a:	7dbb      	ldrb	r3, [r7, #22]
 800bb9c:	2bff      	cmp	r3, #255	; 0xff
 800bb9e:	d025      	beq.n	800bbec <USBD_LL_DataOutStage+0x15c>
 800bba0:	7dbb      	ldrb	r3, [r7, #22]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d122      	bne.n	800bbec <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bbac:	b2db      	uxtb	r3, r3
 800bbae:	2b03      	cmp	r3, #3
 800bbb0:	d117      	bne.n	800bbe2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800bbb2:	7dba      	ldrb	r2, [r7, #22]
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	32ae      	adds	r2, #174	; 0xae
 800bbb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbc:	699b      	ldr	r3, [r3, #24]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d00f      	beq.n	800bbe2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800bbc2:	7dba      	ldrb	r2, [r7, #22]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800bbca:	7dba      	ldrb	r2, [r7, #22]
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	32ae      	adds	r2, #174	; 0xae
 800bbd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd4:	699b      	ldr	r3, [r3, #24]
 800bbd6:	7afa      	ldrb	r2, [r7, #11]
 800bbd8:	4611      	mov	r1, r2
 800bbda:	68f8      	ldr	r0, [r7, #12]
 800bbdc:	4798      	blx	r3
 800bbde:	4603      	mov	r3, r0
 800bbe0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800bbe2:	7dfb      	ldrb	r3, [r7, #23]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d001      	beq.n	800bbec <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800bbe8:	7dfb      	ldrb	r3, [r7, #23]
 800bbea:	e000      	b.n	800bbee <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3718      	adds	r7, #24
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b086      	sub	sp, #24
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	60f8      	str	r0, [r7, #12]
 800bbfe:	460b      	mov	r3, r1
 800bc00:	607a      	str	r2, [r7, #4]
 800bc02:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800bc04:	7afb      	ldrb	r3, [r7, #11]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d16f      	bne.n	800bcea <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	3314      	adds	r3, #20
 800bc0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bc16:	2b02      	cmp	r3, #2
 800bc18:	d15a      	bne.n	800bcd0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800bc1a:	693b      	ldr	r3, [r7, #16]
 800bc1c:	689a      	ldr	r2, [r3, #8]
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d914      	bls.n	800bc50 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	689a      	ldr	r2, [r3, #8]
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	1ad2      	subs	r2, r2, r3
 800bc30:	693b      	ldr	r3, [r7, #16]
 800bc32:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800bc34:	693b      	ldr	r3, [r7, #16]
 800bc36:	689b      	ldr	r3, [r3, #8]
 800bc38:	461a      	mov	r2, r3
 800bc3a:	6879      	ldr	r1, [r7, #4]
 800bc3c:	68f8      	ldr	r0, [r7, #12]
 800bc3e:	f001 f8ac 	bl	800cd9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc42:	2300      	movs	r3, #0
 800bc44:	2200      	movs	r2, #0
 800bc46:	2100      	movs	r1, #0
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f001 fdbb 	bl	800d7c4 <USBD_LL_PrepareReceive>
 800bc4e:	e03f      	b.n	800bcd0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800bc50:	693b      	ldr	r3, [r7, #16]
 800bc52:	68da      	ldr	r2, [r3, #12]
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	689b      	ldr	r3, [r3, #8]
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d11c      	bne.n	800bc96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800bc5c:	693b      	ldr	r3, [r7, #16]
 800bc5e:	685a      	ldr	r2, [r3, #4]
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d316      	bcc.n	800bc96 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800bc68:	693b      	ldr	r3, [r7, #16]
 800bc6a:	685a      	ldr	r2, [r3, #4]
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d20f      	bcs.n	800bc96 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bc76:	2200      	movs	r2, #0
 800bc78:	2100      	movs	r1, #0
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f001 f88d 	bl	800cd9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	2200      	movs	r2, #0
 800bc84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bc88:	2300      	movs	r3, #0
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	68f8      	ldr	r0, [r7, #12]
 800bc90:	f001 fd98 	bl	800d7c4 <USBD_LL_PrepareReceive>
 800bc94:	e01c      	b.n	800bcd0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bc9c:	b2db      	uxtb	r3, r3
 800bc9e:	2b03      	cmp	r3, #3
 800bca0:	d10f      	bne.n	800bcc2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bca8:	68db      	ldr	r3, [r3, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d009      	beq.n	800bcc2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bcbc:	68db      	ldr	r3, [r3, #12]
 800bcbe:	68f8      	ldr	r0, [r7, #12]
 800bcc0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800bcc2:	2180      	movs	r1, #128	; 0x80
 800bcc4:	68f8      	ldr	r0, [r7, #12]
 800bcc6:	f001 fcd3 	bl	800d670 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800bcca:	68f8      	ldr	r0, [r7, #12]
 800bccc:	f001 f8b7 	bl	800ce3e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d03a      	beq.n	800bd50 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f7ff fe42 	bl	800b964 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2200      	movs	r2, #0
 800bce4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bce8:	e032      	b.n	800bd50 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800bcea:	7afb      	ldrb	r3, [r7, #11]
 800bcec:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800bcf0:	b2db      	uxtb	r3, r3
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	68f8      	ldr	r0, [r7, #12]
 800bcf6:	f000 f97f 	bl	800bff8 <USBD_CoreFindEP>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bcfe:	7dfb      	ldrb	r3, [r7, #23]
 800bd00:	2bff      	cmp	r3, #255	; 0xff
 800bd02:	d025      	beq.n	800bd50 <USBD_LL_DataInStage+0x15a>
 800bd04:	7dfb      	ldrb	r3, [r7, #23]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d122      	bne.n	800bd50 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	2b03      	cmp	r3, #3
 800bd14:	d11c      	bne.n	800bd50 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800bd16:	7dfa      	ldrb	r2, [r7, #23]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	32ae      	adds	r2, #174	; 0xae
 800bd1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d014      	beq.n	800bd50 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800bd26:	7dfa      	ldrb	r2, [r7, #23]
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800bd2e:	7dfa      	ldrb	r2, [r7, #23]
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	32ae      	adds	r2, #174	; 0xae
 800bd34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	7afa      	ldrb	r2, [r7, #11]
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	68f8      	ldr	r0, [r7, #12]
 800bd40:	4798      	blx	r3
 800bd42:	4603      	mov	r3, r0
 800bd44:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800bd46:	7dbb      	ldrb	r3, [r7, #22]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d001      	beq.n	800bd50 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800bd4c:	7dbb      	ldrb	r3, [r7, #22]
 800bd4e:	e000      	b.n	800bd52 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800bd50:	2300      	movs	r3, #0
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3718      	adds	r7, #24
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}

0800bd5a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bd5a:	b580      	push	{r7, lr}
 800bd5c:	b084      	sub	sp, #16
 800bd5e:	af00      	add	r7, sp, #0
 800bd60:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd62:	2300      	movs	r3, #0
 800bd64:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	2201      	movs	r2, #1
 800bd6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2200      	movs	r2, #0
 800bd7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2200      	movs	r2, #0
 800bd80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d014      	beq.n	800bdc0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd9c:	685b      	ldr	r3, [r3, #4]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d00e      	beq.n	800bdc0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bda8:	685b      	ldr	r3, [r3, #4]
 800bdaa:	687a      	ldr	r2, [r7, #4]
 800bdac:	6852      	ldr	r2, [r2, #4]
 800bdae:	b2d2      	uxtb	r2, r2
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	4798      	blx	r3
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d001      	beq.n	800bdc0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bdc0:	2340      	movs	r3, #64	; 0x40
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f001 fc0d 	bl	800d5e6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2201      	movs	r2, #1
 800bdd0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2240      	movs	r2, #64	; 0x40
 800bdd8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bddc:	2340      	movs	r3, #64	; 0x40
 800bdde:	2200      	movs	r2, #0
 800bde0:	2180      	movs	r1, #128	; 0x80
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f001 fbff 	bl	800d5e6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	2201      	movs	r2, #1
 800bdec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2240      	movs	r2, #64	; 0x40
 800bdf2:	621a      	str	r2, [r3, #32]

  return ret;
 800bdf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3710      	adds	r7, #16
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}

0800bdfe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bdfe:	b480      	push	{r7}
 800be00:	b083      	sub	sp, #12
 800be02:	af00      	add	r7, sp, #0
 800be04:	6078      	str	r0, [r7, #4]
 800be06:	460b      	mov	r3, r1
 800be08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	78fa      	ldrb	r2, [r7, #3]
 800be0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	370c      	adds	r7, #12
 800be16:	46bd      	mov	sp, r7
 800be18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1c:	4770      	bx	lr

0800be1e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800be1e:	b480      	push	{r7}
 800be20:	b083      	sub	sp, #12
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be2c:	b2da      	uxtb	r2, r3
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2204      	movs	r2, #4
 800be38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	370c      	adds	r7, #12
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800be4a:	b480      	push	{r7}
 800be4c:	b083      	sub	sp, #12
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be58:	b2db      	uxtb	r3, r3
 800be5a:	2b04      	cmp	r3, #4
 800be5c:	d106      	bne.n	800be6c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800be64:	b2da      	uxtb	r2, r3
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800be6c:	2300      	movs	r3, #0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	370c      	adds	r7, #12
 800be72:	46bd      	mov	sp, r7
 800be74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be78:	4770      	bx	lr

0800be7a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b082      	sub	sp, #8
 800be7e:	af00      	add	r7, sp, #0
 800be80:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b03      	cmp	r3, #3
 800be8c:	d110      	bne.n	800beb0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00b      	beq.n	800beb0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800be9e:	69db      	ldr	r3, [r3, #28]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d005      	beq.n	800beb0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800beaa:	69db      	ldr	r3, [r3, #28]
 800beac:	6878      	ldr	r0, [r7, #4]
 800beae:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800beb0:	2300      	movs	r3, #0
}
 800beb2:	4618      	mov	r0, r3
 800beb4:	3708      	adds	r7, #8
 800beb6:	46bd      	mov	sp, r7
 800beb8:	bd80      	pop	{r7, pc}

0800beba <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800beba:	b580      	push	{r7, lr}
 800bebc:	b082      	sub	sp, #8
 800bebe:	af00      	add	r7, sp, #0
 800bec0:	6078      	str	r0, [r7, #4]
 800bec2:	460b      	mov	r3, r1
 800bec4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	32ae      	adds	r2, #174	; 0xae
 800bed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d101      	bne.n	800bedc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bed8:	2303      	movs	r3, #3
 800beda:	e01c      	b.n	800bf16 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	d115      	bne.n	800bf14 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	32ae      	adds	r2, #174	; 0xae
 800bef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef6:	6a1b      	ldr	r3, [r3, #32]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d00b      	beq.n	800bf14 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	32ae      	adds	r2, #174	; 0xae
 800bf06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf0a:	6a1b      	ldr	r3, [r3, #32]
 800bf0c:	78fa      	ldrb	r2, [r7, #3]
 800bf0e:	4611      	mov	r1, r2
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3708      	adds	r7, #8
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}

0800bf1e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bf1e:	b580      	push	{r7, lr}
 800bf20:	b082      	sub	sp, #8
 800bf22:	af00      	add	r7, sp, #0
 800bf24:	6078      	str	r0, [r7, #4]
 800bf26:	460b      	mov	r3, r1
 800bf28:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	32ae      	adds	r2, #174	; 0xae
 800bf34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d101      	bne.n	800bf40 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bf3c:	2303      	movs	r3, #3
 800bf3e:	e01c      	b.n	800bf7a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf46:	b2db      	uxtb	r3, r3
 800bf48:	2b03      	cmp	r3, #3
 800bf4a:	d115      	bne.n	800bf78 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	32ae      	adds	r2, #174	; 0xae
 800bf56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d00b      	beq.n	800bf78 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	32ae      	adds	r2, #174	; 0xae
 800bf6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf70:	78fa      	ldrb	r2, [r7, #3]
 800bf72:	4611      	mov	r1, r2
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3708      	adds	r7, #8
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}

0800bf82 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bf82:	b480      	push	{r7}
 800bf84:	b083      	sub	sp, #12
 800bf86:	af00      	add	r7, sp, #0
 800bf88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bf8a:	2300      	movs	r3, #0
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	2201      	movs	r2, #1
 800bfa8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d00e      	beq.n	800bfd4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	6852      	ldr	r2, [r2, #4]
 800bfc2:	b2d2      	uxtb	r2, r2
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	4798      	blx	r3
 800bfca:	4603      	mov	r3, r0
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d001      	beq.n	800bfd4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bfd0:	2303      	movs	r3, #3
 800bfd2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bfd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b083      	sub	sp, #12
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bfea:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bfec:	4618      	mov	r0, r3
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff6:	4770      	bx	lr

0800bff8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bff8:	b480      	push	{r7}
 800bffa:	b083      	sub	sp, #12
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	460b      	mov	r3, r1
 800c002:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c004:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c006:	4618      	mov	r0, r3
 800c008:	370c      	adds	r7, #12
 800c00a:	46bd      	mov	sp, r7
 800c00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c010:	4770      	bx	lr

0800c012 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c012:	b580      	push	{r7, lr}
 800c014:	b086      	sub	sp, #24
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	460b      	mov	r3, r1
 800c01c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c026:	2300      	movs	r3, #0
 800c028:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	885b      	ldrh	r3, [r3, #2]
 800c02e:	b29a      	uxth	r2, r3
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	781b      	ldrb	r3, [r3, #0]
 800c034:	b29b      	uxth	r3, r3
 800c036:	429a      	cmp	r2, r3
 800c038:	d920      	bls.n	800c07c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	781b      	ldrb	r3, [r3, #0]
 800c03e:	b29b      	uxth	r3, r3
 800c040:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c042:	e013      	b.n	800c06c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c044:	f107 030a 	add.w	r3, r7, #10
 800c048:	4619      	mov	r1, r3
 800c04a:	6978      	ldr	r0, [r7, #20]
 800c04c:	f000 f81b 	bl	800c086 <USBD_GetNextDesc>
 800c050:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	785b      	ldrb	r3, [r3, #1]
 800c056:	2b05      	cmp	r3, #5
 800c058:	d108      	bne.n	800c06c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c05a:	697b      	ldr	r3, [r7, #20]
 800c05c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c05e:	693b      	ldr	r3, [r7, #16]
 800c060:	789b      	ldrb	r3, [r3, #2]
 800c062:	78fa      	ldrb	r2, [r7, #3]
 800c064:	429a      	cmp	r2, r3
 800c066:	d008      	beq.n	800c07a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c068:	2300      	movs	r3, #0
 800c06a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	885b      	ldrh	r3, [r3, #2]
 800c070:	b29a      	uxth	r2, r3
 800c072:	897b      	ldrh	r3, [r7, #10]
 800c074:	429a      	cmp	r2, r3
 800c076:	d8e5      	bhi.n	800c044 <USBD_GetEpDesc+0x32>
 800c078:	e000      	b.n	800c07c <USBD_GetEpDesc+0x6a>
          break;
 800c07a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c07c:	693b      	ldr	r3, [r7, #16]
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}

0800c086 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c086:	b480      	push	{r7}
 800c088:	b085      	sub	sp, #20
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
 800c08e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	881a      	ldrh	r2, [r3, #0]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	781b      	ldrb	r3, [r3, #0]
 800c09c:	b29b      	uxth	r3, r3
 800c09e:	4413      	add	r3, r2
 800c0a0:	b29a      	uxth	r2, r3
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	461a      	mov	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c0b2:	68fb      	ldr	r3, [r7, #12]
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3714      	adds	r7, #20
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b087      	sub	sp, #28
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c0d8:	697b      	ldr	r3, [r7, #20]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c0de:	8a3b      	ldrh	r3, [r7, #16]
 800c0e0:	021b      	lsls	r3, r3, #8
 800c0e2:	b21a      	sxth	r2, r3
 800c0e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	b21b      	sxth	r3, r3
 800c0ec:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c0ee:	89fb      	ldrh	r3, [r7, #14]
}
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	371c      	adds	r7, #28
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fa:	4770      	bx	lr

0800c0fc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	781b      	ldrb	r3, [r3, #0]
 800c10e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c112:	2b40      	cmp	r3, #64	; 0x40
 800c114:	d005      	beq.n	800c122 <USBD_StdDevReq+0x26>
 800c116:	2b40      	cmp	r3, #64	; 0x40
 800c118:	d857      	bhi.n	800c1ca <USBD_StdDevReq+0xce>
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d00f      	beq.n	800c13e <USBD_StdDevReq+0x42>
 800c11e:	2b20      	cmp	r3, #32
 800c120:	d153      	bne.n	800c1ca <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	32ae      	adds	r2, #174	; 0xae
 800c12c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	6839      	ldr	r1, [r7, #0]
 800c134:	6878      	ldr	r0, [r7, #4]
 800c136:	4798      	blx	r3
 800c138:	4603      	mov	r3, r0
 800c13a:	73fb      	strb	r3, [r7, #15]
      break;
 800c13c:	e04a      	b.n	800c1d4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	785b      	ldrb	r3, [r3, #1]
 800c142:	2b09      	cmp	r3, #9
 800c144:	d83b      	bhi.n	800c1be <USBD_StdDevReq+0xc2>
 800c146:	a201      	add	r2, pc, #4	; (adr r2, 800c14c <USBD_StdDevReq+0x50>)
 800c148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14c:	0800c1a1 	.word	0x0800c1a1
 800c150:	0800c1b5 	.word	0x0800c1b5
 800c154:	0800c1bf 	.word	0x0800c1bf
 800c158:	0800c1ab 	.word	0x0800c1ab
 800c15c:	0800c1bf 	.word	0x0800c1bf
 800c160:	0800c17f 	.word	0x0800c17f
 800c164:	0800c175 	.word	0x0800c175
 800c168:	0800c1bf 	.word	0x0800c1bf
 800c16c:	0800c197 	.word	0x0800c197
 800c170:	0800c189 	.word	0x0800c189
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 fa3c 	bl	800c5f4 <USBD_GetDescriptor>
          break;
 800c17c:	e024      	b.n	800c1c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fba1 	bl	800c8c8 <USBD_SetAddress>
          break;
 800c186:	e01f      	b.n	800c1c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fbe0 	bl	800c950 <USBD_SetConfig>
 800c190:	4603      	mov	r3, r0
 800c192:	73fb      	strb	r3, [r7, #15]
          break;
 800c194:	e018      	b.n	800c1c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c196:	6839      	ldr	r1, [r7, #0]
 800c198:	6878      	ldr	r0, [r7, #4]
 800c19a:	f000 fc83 	bl	800caa4 <USBD_GetConfig>
          break;
 800c19e:	e013      	b.n	800c1c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c1a0:	6839      	ldr	r1, [r7, #0]
 800c1a2:	6878      	ldr	r0, [r7, #4]
 800c1a4:	f000 fcb4 	bl	800cb10 <USBD_GetStatus>
          break;
 800c1a8:	e00e      	b.n	800c1c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c1aa:	6839      	ldr	r1, [r7, #0]
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f000 fce3 	bl	800cb78 <USBD_SetFeature>
          break;
 800c1b2:	e009      	b.n	800c1c8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c1b4:	6839      	ldr	r1, [r7, #0]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	f000 fd07 	bl	800cbca <USBD_ClrFeature>
          break;
 800c1bc:	e004      	b.n	800c1c8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c1be:	6839      	ldr	r1, [r7, #0]
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f000 fd5e 	bl	800cc82 <USBD_CtlError>
          break;
 800c1c6:	bf00      	nop
      }
      break;
 800c1c8:	e004      	b.n	800c1d4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c1ca:	6839      	ldr	r1, [r7, #0]
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 fd58 	bl	800cc82 <USBD_CtlError>
      break;
 800c1d2:	bf00      	nop
  }

  return ret;
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop

0800c1e0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b084      	sub	sp, #16
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1f6:	2b40      	cmp	r3, #64	; 0x40
 800c1f8:	d005      	beq.n	800c206 <USBD_StdItfReq+0x26>
 800c1fa:	2b40      	cmp	r3, #64	; 0x40
 800c1fc:	d852      	bhi.n	800c2a4 <USBD_StdItfReq+0xc4>
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d001      	beq.n	800c206 <USBD_StdItfReq+0x26>
 800c202:	2b20      	cmp	r3, #32
 800c204:	d14e      	bne.n	800c2a4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c20c:	b2db      	uxtb	r3, r3
 800c20e:	3b01      	subs	r3, #1
 800c210:	2b02      	cmp	r3, #2
 800c212:	d840      	bhi.n	800c296 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c214:	683b      	ldr	r3, [r7, #0]
 800c216:	889b      	ldrh	r3, [r3, #4]
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d836      	bhi.n	800c28c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	889b      	ldrh	r3, [r3, #4]
 800c222:	b2db      	uxtb	r3, r3
 800c224:	4619      	mov	r1, r3
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f7ff fed9 	bl	800bfde <USBD_CoreFindIF>
 800c22c:	4603      	mov	r3, r0
 800c22e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c230:	7bbb      	ldrb	r3, [r7, #14]
 800c232:	2bff      	cmp	r3, #255	; 0xff
 800c234:	d01d      	beq.n	800c272 <USBD_StdItfReq+0x92>
 800c236:	7bbb      	ldrb	r3, [r7, #14]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d11a      	bne.n	800c272 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c23c:	7bba      	ldrb	r2, [r7, #14]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	32ae      	adds	r2, #174	; 0xae
 800c242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d00f      	beq.n	800c26c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c24c:	7bba      	ldrb	r2, [r7, #14]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c254:	7bba      	ldrb	r2, [r7, #14]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	32ae      	adds	r2, #174	; 0xae
 800c25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c25e:	689b      	ldr	r3, [r3, #8]
 800c260:	6839      	ldr	r1, [r7, #0]
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	4798      	blx	r3
 800c266:	4603      	mov	r3, r0
 800c268:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c26a:	e004      	b.n	800c276 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c26c:	2303      	movs	r3, #3
 800c26e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c270:	e001      	b.n	800c276 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c272:	2303      	movs	r3, #3
 800c274:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	88db      	ldrh	r3, [r3, #6]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d110      	bne.n	800c2a0 <USBD_StdItfReq+0xc0>
 800c27e:	7bfb      	ldrb	r3, [r7, #15]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d10d      	bne.n	800c2a0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fdc7 	bl	800ce18 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c28a:	e009      	b.n	800c2a0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c28c:	6839      	ldr	r1, [r7, #0]
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 fcf7 	bl	800cc82 <USBD_CtlError>
          break;
 800c294:	e004      	b.n	800c2a0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c296:	6839      	ldr	r1, [r7, #0]
 800c298:	6878      	ldr	r0, [r7, #4]
 800c29a:	f000 fcf2 	bl	800cc82 <USBD_CtlError>
          break;
 800c29e:	e000      	b.n	800c2a2 <USBD_StdItfReq+0xc2>
          break;
 800c2a0:	bf00      	nop
      }
      break;
 800c2a2:	e004      	b.n	800c2ae <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c2a4:	6839      	ldr	r1, [r7, #0]
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f000 fceb 	bl	800cc82 <USBD_CtlError>
      break;
 800c2ac:	bf00      	nop
  }

  return ret;
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3710      	adds	r7, #16
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	889b      	ldrh	r3, [r3, #4]
 800c2ca:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	781b      	ldrb	r3, [r3, #0]
 800c2d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2d4:	2b40      	cmp	r3, #64	; 0x40
 800c2d6:	d007      	beq.n	800c2e8 <USBD_StdEPReq+0x30>
 800c2d8:	2b40      	cmp	r3, #64	; 0x40
 800c2da:	f200 817f 	bhi.w	800c5dc <USBD_StdEPReq+0x324>
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d02a      	beq.n	800c338 <USBD_StdEPReq+0x80>
 800c2e2:	2b20      	cmp	r3, #32
 800c2e4:	f040 817a 	bne.w	800c5dc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800c2e8:	7bbb      	ldrb	r3, [r7, #14]
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f7ff fe83 	bl	800bff8 <USBD_CoreFindEP>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2f6:	7b7b      	ldrb	r3, [r7, #13]
 800c2f8:	2bff      	cmp	r3, #255	; 0xff
 800c2fa:	f000 8174 	beq.w	800c5e6 <USBD_StdEPReq+0x32e>
 800c2fe:	7b7b      	ldrb	r3, [r7, #13]
 800c300:	2b00      	cmp	r3, #0
 800c302:	f040 8170 	bne.w	800c5e6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800c306:	7b7a      	ldrb	r2, [r7, #13]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800c30e:	7b7a      	ldrb	r2, [r7, #13]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	32ae      	adds	r2, #174	; 0xae
 800c314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	f000 8163 	beq.w	800c5e6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800c320:	7b7a      	ldrb	r2, [r7, #13]
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	32ae      	adds	r2, #174	; 0xae
 800c326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c32a:	689b      	ldr	r3, [r3, #8]
 800c32c:	6839      	ldr	r1, [r7, #0]
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	4798      	blx	r3
 800c332:	4603      	mov	r3, r0
 800c334:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c336:	e156      	b.n	800c5e6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	785b      	ldrb	r3, [r3, #1]
 800c33c:	2b03      	cmp	r3, #3
 800c33e:	d008      	beq.n	800c352 <USBD_StdEPReq+0x9a>
 800c340:	2b03      	cmp	r3, #3
 800c342:	f300 8145 	bgt.w	800c5d0 <USBD_StdEPReq+0x318>
 800c346:	2b00      	cmp	r3, #0
 800c348:	f000 809b 	beq.w	800c482 <USBD_StdEPReq+0x1ca>
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d03c      	beq.n	800c3ca <USBD_StdEPReq+0x112>
 800c350:	e13e      	b.n	800c5d0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c358:	b2db      	uxtb	r3, r3
 800c35a:	2b02      	cmp	r3, #2
 800c35c:	d002      	beq.n	800c364 <USBD_StdEPReq+0xac>
 800c35e:	2b03      	cmp	r3, #3
 800c360:	d016      	beq.n	800c390 <USBD_StdEPReq+0xd8>
 800c362:	e02c      	b.n	800c3be <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c364:	7bbb      	ldrb	r3, [r7, #14]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d00d      	beq.n	800c386 <USBD_StdEPReq+0xce>
 800c36a:	7bbb      	ldrb	r3, [r7, #14]
 800c36c:	2b80      	cmp	r3, #128	; 0x80
 800c36e:	d00a      	beq.n	800c386 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c370:	7bbb      	ldrb	r3, [r7, #14]
 800c372:	4619      	mov	r1, r3
 800c374:	6878      	ldr	r0, [r7, #4]
 800c376:	f001 f97b 	bl	800d670 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c37a:	2180      	movs	r1, #128	; 0x80
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f001 f977 	bl	800d670 <USBD_LL_StallEP>
 800c382:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c384:	e020      	b.n	800c3c8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800c386:	6839      	ldr	r1, [r7, #0]
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f000 fc7a 	bl	800cc82 <USBD_CtlError>
              break;
 800c38e:	e01b      	b.n	800c3c8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	885b      	ldrh	r3, [r3, #2]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d10e      	bne.n	800c3b6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c398:	7bbb      	ldrb	r3, [r7, #14]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d00b      	beq.n	800c3b6 <USBD_StdEPReq+0xfe>
 800c39e:	7bbb      	ldrb	r3, [r7, #14]
 800c3a0:	2b80      	cmp	r3, #128	; 0x80
 800c3a2:	d008      	beq.n	800c3b6 <USBD_StdEPReq+0xfe>
 800c3a4:	683b      	ldr	r3, [r7, #0]
 800c3a6:	88db      	ldrh	r3, [r3, #6]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d104      	bne.n	800c3b6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3ac:	7bbb      	ldrb	r3, [r7, #14]
 800c3ae:	4619      	mov	r1, r3
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	f001 f95d 	bl	800d670 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 fd2e 	bl	800ce18 <USBD_CtlSendStatus>

              break;
 800c3bc:	e004      	b.n	800c3c8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c3be:	6839      	ldr	r1, [r7, #0]
 800c3c0:	6878      	ldr	r0, [r7, #4]
 800c3c2:	f000 fc5e 	bl	800cc82 <USBD_CtlError>
              break;
 800c3c6:	bf00      	nop
          }
          break;
 800c3c8:	e107      	b.n	800c5da <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b02      	cmp	r3, #2
 800c3d4:	d002      	beq.n	800c3dc <USBD_StdEPReq+0x124>
 800c3d6:	2b03      	cmp	r3, #3
 800c3d8:	d016      	beq.n	800c408 <USBD_StdEPReq+0x150>
 800c3da:	e04b      	b.n	800c474 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3dc:	7bbb      	ldrb	r3, [r7, #14]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d00d      	beq.n	800c3fe <USBD_StdEPReq+0x146>
 800c3e2:	7bbb      	ldrb	r3, [r7, #14]
 800c3e4:	2b80      	cmp	r3, #128	; 0x80
 800c3e6:	d00a      	beq.n	800c3fe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c3e8:	7bbb      	ldrb	r3, [r7, #14]
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f001 f93f 	bl	800d670 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3f2:	2180      	movs	r1, #128	; 0x80
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f001 f93b 	bl	800d670 <USBD_LL_StallEP>
 800c3fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c3fc:	e040      	b.n	800c480 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c3fe:	6839      	ldr	r1, [r7, #0]
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f000 fc3e 	bl	800cc82 <USBD_CtlError>
              break;
 800c406:	e03b      	b.n	800c480 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	885b      	ldrh	r3, [r3, #2]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d136      	bne.n	800c47e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c410:	7bbb      	ldrb	r3, [r7, #14]
 800c412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c416:	2b00      	cmp	r3, #0
 800c418:	d004      	beq.n	800c424 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c41a:	7bbb      	ldrb	r3, [r7, #14]
 800c41c:	4619      	mov	r1, r3
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f001 f945 	bl	800d6ae <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c424:	6878      	ldr	r0, [r7, #4]
 800c426:	f000 fcf7 	bl	800ce18 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c42a:	7bbb      	ldrb	r3, [r7, #14]
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f7ff fde2 	bl	800bff8 <USBD_CoreFindEP>
 800c434:	4603      	mov	r3, r0
 800c436:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c438:	7b7b      	ldrb	r3, [r7, #13]
 800c43a:	2bff      	cmp	r3, #255	; 0xff
 800c43c:	d01f      	beq.n	800c47e <USBD_StdEPReq+0x1c6>
 800c43e:	7b7b      	ldrb	r3, [r7, #13]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d11c      	bne.n	800c47e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c444:	7b7a      	ldrb	r2, [r7, #13]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c44c:	7b7a      	ldrb	r2, [r7, #13]
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	32ae      	adds	r2, #174	; 0xae
 800c452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c456:	689b      	ldr	r3, [r3, #8]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d010      	beq.n	800c47e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c45c:	7b7a      	ldrb	r2, [r7, #13]
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	32ae      	adds	r2, #174	; 0xae
 800c462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c466:	689b      	ldr	r3, [r3, #8]
 800c468:	6839      	ldr	r1, [r7, #0]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	4798      	blx	r3
 800c46e:	4603      	mov	r3, r0
 800c470:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c472:	e004      	b.n	800c47e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c474:	6839      	ldr	r1, [r7, #0]
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f000 fc03 	bl	800cc82 <USBD_CtlError>
              break;
 800c47c:	e000      	b.n	800c480 <USBD_StdEPReq+0x1c8>
              break;
 800c47e:	bf00      	nop
          }
          break;
 800c480:	e0ab      	b.n	800c5da <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c488:	b2db      	uxtb	r3, r3
 800c48a:	2b02      	cmp	r3, #2
 800c48c:	d002      	beq.n	800c494 <USBD_StdEPReq+0x1dc>
 800c48e:	2b03      	cmp	r3, #3
 800c490:	d032      	beq.n	800c4f8 <USBD_StdEPReq+0x240>
 800c492:	e097      	b.n	800c5c4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c494:	7bbb      	ldrb	r3, [r7, #14]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d007      	beq.n	800c4aa <USBD_StdEPReq+0x1f2>
 800c49a:	7bbb      	ldrb	r3, [r7, #14]
 800c49c:	2b80      	cmp	r3, #128	; 0x80
 800c49e:	d004      	beq.n	800c4aa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c4a0:	6839      	ldr	r1, [r7, #0]
 800c4a2:	6878      	ldr	r0, [r7, #4]
 800c4a4:	f000 fbed 	bl	800cc82 <USBD_CtlError>
                break;
 800c4a8:	e091      	b.n	800c5ce <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	da0b      	bge.n	800c4ca <USBD_StdEPReq+0x212>
 800c4b2:	7bbb      	ldrb	r3, [r7, #14]
 800c4b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c4b8:	4613      	mov	r3, r2
 800c4ba:	009b      	lsls	r3, r3, #2
 800c4bc:	4413      	add	r3, r2
 800c4be:	009b      	lsls	r3, r3, #2
 800c4c0:	3310      	adds	r3, #16
 800c4c2:	687a      	ldr	r2, [r7, #4]
 800c4c4:	4413      	add	r3, r2
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	e00b      	b.n	800c4e2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c4ca:	7bbb      	ldrb	r3, [r7, #14]
 800c4cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4d0:	4613      	mov	r3, r2
 800c4d2:	009b      	lsls	r3, r3, #2
 800c4d4:	4413      	add	r3, r2
 800c4d6:	009b      	lsls	r3, r3, #2
 800c4d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c4dc:	687a      	ldr	r2, [r7, #4]
 800c4de:	4413      	add	r3, r2
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	2202      	movs	r2, #2
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f000 fc37 	bl	800cd64 <USBD_CtlSendData>
              break;
 800c4f6:	e06a      	b.n	800c5ce <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c4f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	da11      	bge.n	800c524 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c500:	7bbb      	ldrb	r3, [r7, #14]
 800c502:	f003 020f 	and.w	r2, r3, #15
 800c506:	6879      	ldr	r1, [r7, #4]
 800c508:	4613      	mov	r3, r2
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	009b      	lsls	r3, r3, #2
 800c510:	440b      	add	r3, r1
 800c512:	3324      	adds	r3, #36	; 0x24
 800c514:	881b      	ldrh	r3, [r3, #0]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d117      	bne.n	800c54a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c51a:	6839      	ldr	r1, [r7, #0]
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	f000 fbb0 	bl	800cc82 <USBD_CtlError>
                  break;
 800c522:	e054      	b.n	800c5ce <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c524:	7bbb      	ldrb	r3, [r7, #14]
 800c526:	f003 020f 	and.w	r2, r3, #15
 800c52a:	6879      	ldr	r1, [r7, #4]
 800c52c:	4613      	mov	r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	4413      	add	r3, r2
 800c532:	009b      	lsls	r3, r3, #2
 800c534:	440b      	add	r3, r1
 800c536:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c53a:	881b      	ldrh	r3, [r3, #0]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d104      	bne.n	800c54a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c540:	6839      	ldr	r1, [r7, #0]
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 fb9d 	bl	800cc82 <USBD_CtlError>
                  break;
 800c548:	e041      	b.n	800c5ce <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c54a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	da0b      	bge.n	800c56a <USBD_StdEPReq+0x2b2>
 800c552:	7bbb      	ldrb	r3, [r7, #14]
 800c554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c558:	4613      	mov	r3, r2
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	3310      	adds	r3, #16
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	4413      	add	r3, r2
 800c566:	3304      	adds	r3, #4
 800c568:	e00b      	b.n	800c582 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c56a:	7bbb      	ldrb	r3, [r7, #14]
 800c56c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c570:	4613      	mov	r3, r2
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	4413      	add	r3, r2
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c57c:	687a      	ldr	r2, [r7, #4]
 800c57e:	4413      	add	r3, r2
 800c580:	3304      	adds	r3, #4
 800c582:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c584:	7bbb      	ldrb	r3, [r7, #14]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d002      	beq.n	800c590 <USBD_StdEPReq+0x2d8>
 800c58a:	7bbb      	ldrb	r3, [r7, #14]
 800c58c:	2b80      	cmp	r3, #128	; 0x80
 800c58e:	d103      	bne.n	800c598 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	2200      	movs	r2, #0
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	e00e      	b.n	800c5b6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c598:	7bbb      	ldrb	r3, [r7, #14]
 800c59a:	4619      	mov	r1, r3
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f001 f8a5 	bl	800d6ec <USBD_LL_IsStallEP>
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d003      	beq.n	800c5b0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	2201      	movs	r2, #1
 800c5ac:	601a      	str	r2, [r3, #0]
 800c5ae:	e002      	b.n	800c5b6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	2202      	movs	r2, #2
 800c5ba:	4619      	mov	r1, r3
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fbd1 	bl	800cd64 <USBD_CtlSendData>
              break;
 800c5c2:	e004      	b.n	800c5ce <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c5c4:	6839      	ldr	r1, [r7, #0]
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f000 fb5b 	bl	800cc82 <USBD_CtlError>
              break;
 800c5cc:	bf00      	nop
          }
          break;
 800c5ce:	e004      	b.n	800c5da <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6878      	ldr	r0, [r7, #4]
 800c5d4:	f000 fb55 	bl	800cc82 <USBD_CtlError>
          break;
 800c5d8:	bf00      	nop
      }
      break;
 800c5da:	e005      	b.n	800c5e8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c5dc:	6839      	ldr	r1, [r7, #0]
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fb4f 	bl	800cc82 <USBD_CtlError>
      break;
 800c5e4:	e000      	b.n	800c5e8 <USBD_StdEPReq+0x330>
      break;
 800c5e6:	bf00      	nop
  }

  return ret;
 800c5e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
	...

0800c5f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5fe:	2300      	movs	r3, #0
 800c600:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c602:	2300      	movs	r3, #0
 800c604:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c606:	2300      	movs	r3, #0
 800c608:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	885b      	ldrh	r3, [r3, #2]
 800c60e:	0a1b      	lsrs	r3, r3, #8
 800c610:	b29b      	uxth	r3, r3
 800c612:	3b01      	subs	r3, #1
 800c614:	2b06      	cmp	r3, #6
 800c616:	f200 8128 	bhi.w	800c86a <USBD_GetDescriptor+0x276>
 800c61a:	a201      	add	r2, pc, #4	; (adr r2, 800c620 <USBD_GetDescriptor+0x2c>)
 800c61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c620:	0800c63d 	.word	0x0800c63d
 800c624:	0800c655 	.word	0x0800c655
 800c628:	0800c695 	.word	0x0800c695
 800c62c:	0800c86b 	.word	0x0800c86b
 800c630:	0800c86b 	.word	0x0800c86b
 800c634:	0800c80b 	.word	0x0800c80b
 800c638:	0800c837 	.word	0x0800c837
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	7c12      	ldrb	r2, [r2, #16]
 800c648:	f107 0108 	add.w	r1, r7, #8
 800c64c:	4610      	mov	r0, r2
 800c64e:	4798      	blx	r3
 800c650:	60f8      	str	r0, [r7, #12]
      break;
 800c652:	e112      	b.n	800c87a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	7c1b      	ldrb	r3, [r3, #16]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d10d      	bne.n	800c678 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c664:	f107 0208 	add.w	r2, r7, #8
 800c668:	4610      	mov	r0, r2
 800c66a:	4798      	blx	r3
 800c66c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	3301      	adds	r3, #1
 800c672:	2202      	movs	r2, #2
 800c674:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c676:	e100      	b.n	800c87a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c67e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c680:	f107 0208 	add.w	r2, r7, #8
 800c684:	4610      	mov	r0, r2
 800c686:	4798      	blx	r3
 800c688:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	3301      	adds	r3, #1
 800c68e:	2202      	movs	r2, #2
 800c690:	701a      	strb	r2, [r3, #0]
      break;
 800c692:	e0f2      	b.n	800c87a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	885b      	ldrh	r3, [r3, #2]
 800c698:	b2db      	uxtb	r3, r3
 800c69a:	2b05      	cmp	r3, #5
 800c69c:	f200 80ac 	bhi.w	800c7f8 <USBD_GetDescriptor+0x204>
 800c6a0:	a201      	add	r2, pc, #4	; (adr r2, 800c6a8 <USBD_GetDescriptor+0xb4>)
 800c6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a6:	bf00      	nop
 800c6a8:	0800c6c1 	.word	0x0800c6c1
 800c6ac:	0800c6f5 	.word	0x0800c6f5
 800c6b0:	0800c729 	.word	0x0800c729
 800c6b4:	0800c75d 	.word	0x0800c75d
 800c6b8:	0800c791 	.word	0x0800c791
 800c6bc:	0800c7c5 	.word	0x0800c7c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00b      	beq.n	800c6e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6d2:	685b      	ldr	r3, [r3, #4]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	7c12      	ldrb	r2, [r2, #16]
 800c6d8:	f107 0108 	add.w	r1, r7, #8
 800c6dc:	4610      	mov	r0, r2
 800c6de:	4798      	blx	r3
 800c6e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6e2:	e091      	b.n	800c808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6e4:	6839      	ldr	r1, [r7, #0]
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 facb 	bl	800cc82 <USBD_CtlError>
            err++;
 800c6ec:	7afb      	ldrb	r3, [r7, #11]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c6f2:	e089      	b.n	800c808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00b      	beq.n	800c718 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c706:	689b      	ldr	r3, [r3, #8]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	7c12      	ldrb	r2, [r2, #16]
 800c70c:	f107 0108 	add.w	r1, r7, #8
 800c710:	4610      	mov	r0, r2
 800c712:	4798      	blx	r3
 800c714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c716:	e077      	b.n	800c808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c718:	6839      	ldr	r1, [r7, #0]
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fab1 	bl	800cc82 <USBD_CtlError>
            err++;
 800c720:	7afb      	ldrb	r3, [r7, #11]
 800c722:	3301      	adds	r3, #1
 800c724:	72fb      	strb	r3, [r7, #11]
          break;
 800c726:	e06f      	b.n	800c808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00b      	beq.n	800c74c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c73a:	68db      	ldr	r3, [r3, #12]
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	7c12      	ldrb	r2, [r2, #16]
 800c740:	f107 0108 	add.w	r1, r7, #8
 800c744:	4610      	mov	r0, r2
 800c746:	4798      	blx	r3
 800c748:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c74a:	e05d      	b.n	800c808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c74c:	6839      	ldr	r1, [r7, #0]
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f000 fa97 	bl	800cc82 <USBD_CtlError>
            err++;
 800c754:	7afb      	ldrb	r3, [r7, #11]
 800c756:	3301      	adds	r3, #1
 800c758:	72fb      	strb	r3, [r7, #11]
          break;
 800c75a:	e055      	b.n	800c808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c762:	691b      	ldr	r3, [r3, #16]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d00b      	beq.n	800c780 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c76e:	691b      	ldr	r3, [r3, #16]
 800c770:	687a      	ldr	r2, [r7, #4]
 800c772:	7c12      	ldrb	r2, [r2, #16]
 800c774:	f107 0108 	add.w	r1, r7, #8
 800c778:	4610      	mov	r0, r2
 800c77a:	4798      	blx	r3
 800c77c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c77e:	e043      	b.n	800c808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c780:	6839      	ldr	r1, [r7, #0]
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 fa7d 	bl	800cc82 <USBD_CtlError>
            err++;
 800c788:	7afb      	ldrb	r3, [r7, #11]
 800c78a:	3301      	adds	r3, #1
 800c78c:	72fb      	strb	r3, [r7, #11]
          break;
 800c78e:	e03b      	b.n	800c808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c796:	695b      	ldr	r3, [r3, #20]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d00b      	beq.n	800c7b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7a2:	695b      	ldr	r3, [r3, #20]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	7c12      	ldrb	r2, [r2, #16]
 800c7a8:	f107 0108 	add.w	r1, r7, #8
 800c7ac:	4610      	mov	r0, r2
 800c7ae:	4798      	blx	r3
 800c7b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7b2:	e029      	b.n	800c808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7b4:	6839      	ldr	r1, [r7, #0]
 800c7b6:	6878      	ldr	r0, [r7, #4]
 800c7b8:	f000 fa63 	bl	800cc82 <USBD_CtlError>
            err++;
 800c7bc:	7afb      	ldrb	r3, [r7, #11]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	72fb      	strb	r3, [r7, #11]
          break;
 800c7c2:	e021      	b.n	800c808 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7ca:	699b      	ldr	r3, [r3, #24]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00b      	beq.n	800c7e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	7c12      	ldrb	r2, [r2, #16]
 800c7dc:	f107 0108 	add.w	r1, r7, #8
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	4798      	blx	r3
 800c7e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c7e6:	e00f      	b.n	800c808 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c7e8:	6839      	ldr	r1, [r7, #0]
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	f000 fa49 	bl	800cc82 <USBD_CtlError>
            err++;
 800c7f0:	7afb      	ldrb	r3, [r7, #11]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	72fb      	strb	r3, [r7, #11]
          break;
 800c7f6:	e007      	b.n	800c808 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c7f8:	6839      	ldr	r1, [r7, #0]
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fa41 	bl	800cc82 <USBD_CtlError>
          err++;
 800c800:	7afb      	ldrb	r3, [r7, #11]
 800c802:	3301      	adds	r3, #1
 800c804:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c806:	bf00      	nop
      }
      break;
 800c808:	e037      	b.n	800c87a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	7c1b      	ldrb	r3, [r3, #16]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d109      	bne.n	800c826 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c81a:	f107 0208 	add.w	r2, r7, #8
 800c81e:	4610      	mov	r0, r2
 800c820:	4798      	blx	r3
 800c822:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c824:	e029      	b.n	800c87a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c826:	6839      	ldr	r1, [r7, #0]
 800c828:	6878      	ldr	r0, [r7, #4]
 800c82a:	f000 fa2a 	bl	800cc82 <USBD_CtlError>
        err++;
 800c82e:	7afb      	ldrb	r3, [r7, #11]
 800c830:	3301      	adds	r3, #1
 800c832:	72fb      	strb	r3, [r7, #11]
      break;
 800c834:	e021      	b.n	800c87a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	7c1b      	ldrb	r3, [r3, #16]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d10d      	bne.n	800c85a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c846:	f107 0208 	add.w	r2, r7, #8
 800c84a:	4610      	mov	r0, r2
 800c84c:	4798      	blx	r3
 800c84e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	3301      	adds	r3, #1
 800c854:	2207      	movs	r2, #7
 800c856:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c858:	e00f      	b.n	800c87a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c85a:	6839      	ldr	r1, [r7, #0]
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f000 fa10 	bl	800cc82 <USBD_CtlError>
        err++;
 800c862:	7afb      	ldrb	r3, [r7, #11]
 800c864:	3301      	adds	r3, #1
 800c866:	72fb      	strb	r3, [r7, #11]
      break;
 800c868:	e007      	b.n	800c87a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 fa08 	bl	800cc82 <USBD_CtlError>
      err++;
 800c872:	7afb      	ldrb	r3, [r7, #11]
 800c874:	3301      	adds	r3, #1
 800c876:	72fb      	strb	r3, [r7, #11]
      break;
 800c878:	bf00      	nop
  }

  if (err != 0U)
 800c87a:	7afb      	ldrb	r3, [r7, #11]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d11e      	bne.n	800c8be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	88db      	ldrh	r3, [r3, #6]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d016      	beq.n	800c8b6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c888:	893b      	ldrh	r3, [r7, #8]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d00e      	beq.n	800c8ac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c88e:	683b      	ldr	r3, [r7, #0]
 800c890:	88da      	ldrh	r2, [r3, #6]
 800c892:	893b      	ldrh	r3, [r7, #8]
 800c894:	4293      	cmp	r3, r2
 800c896:	bf28      	it	cs
 800c898:	4613      	movcs	r3, r2
 800c89a:	b29b      	uxth	r3, r3
 800c89c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c89e:	893b      	ldrh	r3, [r7, #8]
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	68f9      	ldr	r1, [r7, #12]
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f000 fa5d 	bl	800cd64 <USBD_CtlSendData>
 800c8aa:	e009      	b.n	800c8c0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c8ac:	6839      	ldr	r1, [r7, #0]
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f9e7 	bl	800cc82 <USBD_CtlError>
 800c8b4:	e004      	b.n	800c8c0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f000 faae 	bl	800ce18 <USBD_CtlSendStatus>
 800c8bc:	e000      	b.n	800c8c0 <USBD_GetDescriptor+0x2cc>
    return;
 800c8be:	bf00      	nop
  }
}
 800c8c0:	3710      	adds	r7, #16
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop

0800c8c8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b084      	sub	sp, #16
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
 800c8d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	889b      	ldrh	r3, [r3, #4]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d131      	bne.n	800c93e <USBD_SetAddress+0x76>
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	88db      	ldrh	r3, [r3, #6]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d12d      	bne.n	800c93e <USBD_SetAddress+0x76>
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	885b      	ldrh	r3, [r3, #2]
 800c8e6:	2b7f      	cmp	r3, #127	; 0x7f
 800c8e8:	d829      	bhi.n	800c93e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	885b      	ldrh	r3, [r3, #2]
 800c8ee:	b2db      	uxtb	r3, r3
 800c8f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8fc:	b2db      	uxtb	r3, r3
 800c8fe:	2b03      	cmp	r3, #3
 800c900:	d104      	bne.n	800c90c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c902:	6839      	ldr	r1, [r7, #0]
 800c904:	6878      	ldr	r0, [r7, #4]
 800c906:	f000 f9bc 	bl	800cc82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c90a:	e01d      	b.n	800c948 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	7bfa      	ldrb	r2, [r7, #15]
 800c910:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c914:	7bfb      	ldrb	r3, [r7, #15]
 800c916:	4619      	mov	r1, r3
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f000 ff13 	bl	800d744 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f000 fa7a 	bl	800ce18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c924:	7bfb      	ldrb	r3, [r7, #15]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d004      	beq.n	800c934 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	2202      	movs	r2, #2
 800c92e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c932:	e009      	b.n	800c948 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2201      	movs	r2, #1
 800c938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c93c:	e004      	b.n	800c948 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c93e:	6839      	ldr	r1, [r7, #0]
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f99e 	bl	800cc82 <USBD_CtlError>
  }
}
 800c946:	bf00      	nop
 800c948:	bf00      	nop
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c95a:	2300      	movs	r3, #0
 800c95c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	885b      	ldrh	r3, [r3, #2]
 800c962:	b2da      	uxtb	r2, r3
 800c964:	4b4e      	ldr	r3, [pc, #312]	; (800caa0 <USBD_SetConfig+0x150>)
 800c966:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c968:	4b4d      	ldr	r3, [pc, #308]	; (800caa0 <USBD_SetConfig+0x150>)
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d905      	bls.n	800c97c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c970:	6839      	ldr	r1, [r7, #0]
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	f000 f985 	bl	800cc82 <USBD_CtlError>
    return USBD_FAIL;
 800c978:	2303      	movs	r3, #3
 800c97a:	e08c      	b.n	800ca96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c982:	b2db      	uxtb	r3, r3
 800c984:	2b02      	cmp	r3, #2
 800c986:	d002      	beq.n	800c98e <USBD_SetConfig+0x3e>
 800c988:	2b03      	cmp	r3, #3
 800c98a:	d029      	beq.n	800c9e0 <USBD_SetConfig+0x90>
 800c98c:	e075      	b.n	800ca7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c98e:	4b44      	ldr	r3, [pc, #272]	; (800caa0 <USBD_SetConfig+0x150>)
 800c990:	781b      	ldrb	r3, [r3, #0]
 800c992:	2b00      	cmp	r3, #0
 800c994:	d020      	beq.n	800c9d8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c996:	4b42      	ldr	r3, [pc, #264]	; (800caa0 <USBD_SetConfig+0x150>)
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	461a      	mov	r2, r3
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c9a0:	4b3f      	ldr	r3, [pc, #252]	; (800caa0 <USBD_SetConfig+0x150>)
 800c9a2:	781b      	ldrb	r3, [r3, #0]
 800c9a4:	4619      	mov	r1, r3
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7fe ffe7 	bl	800b97a <USBD_SetClassConfig>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c9b0:	7bfb      	ldrb	r3, [r7, #15]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d008      	beq.n	800c9c8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c9b6:	6839      	ldr	r1, [r7, #0]
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f000 f962 	bl	800cc82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2202      	movs	r2, #2
 800c9c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c9c6:	e065      	b.n	800ca94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f000 fa25 	bl	800ce18 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	2203      	movs	r2, #3
 800c9d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c9d6:	e05d      	b.n	800ca94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f000 fa1d 	bl	800ce18 <USBD_CtlSendStatus>
      break;
 800c9de:	e059      	b.n	800ca94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c9e0:	4b2f      	ldr	r3, [pc, #188]	; (800caa0 <USBD_SetConfig+0x150>)
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d112      	bne.n	800ca0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2202      	movs	r2, #2
 800c9ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c9f0:	4b2b      	ldr	r3, [pc, #172]	; (800caa0 <USBD_SetConfig+0x150>)
 800c9f2:	781b      	ldrb	r3, [r3, #0]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c9fa:	4b29      	ldr	r3, [pc, #164]	; (800caa0 <USBD_SetConfig+0x150>)
 800c9fc:	781b      	ldrb	r3, [r3, #0]
 800c9fe:	4619      	mov	r1, r3
 800ca00:	6878      	ldr	r0, [r7, #4]
 800ca02:	f7fe ffd6 	bl	800b9b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fa06 	bl	800ce18 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ca0c:	e042      	b.n	800ca94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ca0e:	4b24      	ldr	r3, [pc, #144]	; (800caa0 <USBD_SetConfig+0x150>)
 800ca10:	781b      	ldrb	r3, [r3, #0]
 800ca12:	461a      	mov	r2, r3
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d02a      	beq.n	800ca72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	b2db      	uxtb	r3, r3
 800ca22:	4619      	mov	r1, r3
 800ca24:	6878      	ldr	r0, [r7, #4]
 800ca26:	f7fe ffc4 	bl	800b9b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ca2a:	4b1d      	ldr	r3, [pc, #116]	; (800caa0 <USBD_SetConfig+0x150>)
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ca34:	4b1a      	ldr	r3, [pc, #104]	; (800caa0 <USBD_SetConfig+0x150>)
 800ca36:	781b      	ldrb	r3, [r3, #0]
 800ca38:	4619      	mov	r1, r3
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f7fe ff9d 	bl	800b97a <USBD_SetClassConfig>
 800ca40:	4603      	mov	r3, r0
 800ca42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ca44:	7bfb      	ldrb	r3, [r7, #15]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d00f      	beq.n	800ca6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ca4a:	6839      	ldr	r1, [r7, #0]
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 f918 	bl	800cc82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	b2db      	uxtb	r3, r3
 800ca58:	4619      	mov	r1, r3
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7fe ffa9 	bl	800b9b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2202      	movs	r2, #2
 800ca64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ca68:	e014      	b.n	800ca94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ca6a:	6878      	ldr	r0, [r7, #4]
 800ca6c:	f000 f9d4 	bl	800ce18 <USBD_CtlSendStatus>
      break;
 800ca70:	e010      	b.n	800ca94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f000 f9d0 	bl	800ce18 <USBD_CtlSendStatus>
      break;
 800ca78:	e00c      	b.n	800ca94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ca7a:	6839      	ldr	r1, [r7, #0]
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f900 	bl	800cc82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ca82:	4b07      	ldr	r3, [pc, #28]	; (800caa0 <USBD_SetConfig+0x150>)
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f7fe ff92 	bl	800b9b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ca8e:	2303      	movs	r3, #3
 800ca90:	73fb      	strb	r3, [r7, #15]
      break;
 800ca92:	bf00      	nop
  }

  return ret;
 800ca94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}
 800ca9e:	bf00      	nop
 800caa0:	20004510 	.word	0x20004510

0800caa4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800caa4:	b580      	push	{r7, lr}
 800caa6:	b082      	sub	sp, #8
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
 800caac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	88db      	ldrh	r3, [r3, #6]
 800cab2:	2b01      	cmp	r3, #1
 800cab4:	d004      	beq.n	800cac0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800cab6:	6839      	ldr	r1, [r7, #0]
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f000 f8e2 	bl	800cc82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800cabe:	e023      	b.n	800cb08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	2b02      	cmp	r3, #2
 800caca:	dc02      	bgt.n	800cad2 <USBD_GetConfig+0x2e>
 800cacc:	2b00      	cmp	r3, #0
 800cace:	dc03      	bgt.n	800cad8 <USBD_GetConfig+0x34>
 800cad0:	e015      	b.n	800cafe <USBD_GetConfig+0x5a>
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d00b      	beq.n	800caee <USBD_GetConfig+0x4a>
 800cad6:	e012      	b.n	800cafe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2200      	movs	r2, #0
 800cadc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	3308      	adds	r3, #8
 800cae2:	2201      	movs	r2, #1
 800cae4:	4619      	mov	r1, r3
 800cae6:	6878      	ldr	r0, [r7, #4]
 800cae8:	f000 f93c 	bl	800cd64 <USBD_CtlSendData>
        break;
 800caec:	e00c      	b.n	800cb08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3304      	adds	r3, #4
 800caf2:	2201      	movs	r2, #1
 800caf4:	4619      	mov	r1, r3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f000 f934 	bl	800cd64 <USBD_CtlSendData>
        break;
 800cafc:	e004      	b.n	800cb08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800cafe:	6839      	ldr	r1, [r7, #0]
 800cb00:	6878      	ldr	r0, [r7, #4]
 800cb02:	f000 f8be 	bl	800cc82 <USBD_CtlError>
        break;
 800cb06:	bf00      	nop
}
 800cb08:	bf00      	nop
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}

0800cb10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb10:	b580      	push	{r7, lr}
 800cb12:	b082      	sub	sp, #8
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
 800cb18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb20:	b2db      	uxtb	r3, r3
 800cb22:	3b01      	subs	r3, #1
 800cb24:	2b02      	cmp	r3, #2
 800cb26:	d81e      	bhi.n	800cb66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	88db      	ldrh	r3, [r3, #6]
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	d004      	beq.n	800cb3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800cb30:	6839      	ldr	r1, [r7, #0]
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f000 f8a5 	bl	800cc82 <USBD_CtlError>
        break;
 800cb38:	e01a      	b.n	800cb70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2201      	movs	r2, #1
 800cb3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d005      	beq.n	800cb56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	f043 0202 	orr.w	r2, r3, #2
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	330c      	adds	r3, #12
 800cb5a:	2202      	movs	r2, #2
 800cb5c:	4619      	mov	r1, r3
 800cb5e:	6878      	ldr	r0, [r7, #4]
 800cb60:	f000 f900 	bl	800cd64 <USBD_CtlSendData>
      break;
 800cb64:	e004      	b.n	800cb70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800cb66:	6839      	ldr	r1, [r7, #0]
 800cb68:	6878      	ldr	r0, [r7, #4]
 800cb6a:	f000 f88a 	bl	800cc82 <USBD_CtlError>
      break;
 800cb6e:	bf00      	nop
  }
}
 800cb70:	bf00      	nop
 800cb72:	3708      	adds	r7, #8
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	885b      	ldrh	r3, [r3, #2]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d107      	bne.n	800cb9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800cb92:	6878      	ldr	r0, [r7, #4]
 800cb94:	f000 f940 	bl	800ce18 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800cb98:	e013      	b.n	800cbc2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	885b      	ldrh	r3, [r3, #2]
 800cb9e:	2b02      	cmp	r3, #2
 800cba0:	d10b      	bne.n	800cbba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	889b      	ldrh	r3, [r3, #4]
 800cba6:	0a1b      	lsrs	r3, r3, #8
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	b2da      	uxtb	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f930 	bl	800ce18 <USBD_CtlSendStatus>
}
 800cbb8:	e003      	b.n	800cbc2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 f860 	bl	800cc82 <USBD_CtlError>
}
 800cbc2:	bf00      	nop
 800cbc4:	3708      	adds	r7, #8
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b082      	sub	sp, #8
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
 800cbd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	3b01      	subs	r3, #1
 800cbde:	2b02      	cmp	r3, #2
 800cbe0:	d80b      	bhi.n	800cbfa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	885b      	ldrh	r3, [r3, #2]
 800cbe6:	2b01      	cmp	r3, #1
 800cbe8:	d10c      	bne.n	800cc04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	2200      	movs	r2, #0
 800cbee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 f910 	bl	800ce18 <USBD_CtlSendStatus>
      }
      break;
 800cbf8:	e004      	b.n	800cc04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800cbfa:	6839      	ldr	r1, [r7, #0]
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f000 f840 	bl	800cc82 <USBD_CtlError>
      break;
 800cc02:	e000      	b.n	800cc06 <USBD_ClrFeature+0x3c>
      break;
 800cc04:	bf00      	nop
  }
}
 800cc06:	bf00      	nop
 800cc08:	3708      	adds	r7, #8
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b084      	sub	sp, #16
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	781a      	ldrb	r2, [r3, #0]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	3301      	adds	r3, #1
 800cc28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	781a      	ldrb	r2, [r3, #0]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	3301      	adds	r3, #1
 800cc36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	f7ff fa41 	bl	800c0c0 <SWAPBYTE>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	461a      	mov	r2, r3
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	3301      	adds	r3, #1
 800cc4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	3301      	adds	r3, #1
 800cc50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800cc52:	68f8      	ldr	r0, [r7, #12]
 800cc54:	f7ff fa34 	bl	800c0c0 <SWAPBYTE>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	3301      	adds	r3, #1
 800cc64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	3301      	adds	r3, #1
 800cc6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800cc6c:	68f8      	ldr	r0, [r7, #12]
 800cc6e:	f7ff fa27 	bl	800c0c0 <SWAPBYTE>
 800cc72:	4603      	mov	r3, r0
 800cc74:	461a      	mov	r2, r3
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	80da      	strh	r2, [r3, #6]
}
 800cc7a:	bf00      	nop
 800cc7c:	3710      	adds	r7, #16
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	bd80      	pop	{r7, pc}

0800cc82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc82:	b580      	push	{r7, lr}
 800cc84:	b082      	sub	sp, #8
 800cc86:	af00      	add	r7, sp, #0
 800cc88:	6078      	str	r0, [r7, #4]
 800cc8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc8c:	2180      	movs	r1, #128	; 0x80
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f000 fcee 	bl	800d670 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800cc94:	2100      	movs	r1, #0
 800cc96:	6878      	ldr	r0, [r7, #4]
 800cc98:	f000 fcea 	bl	800d670 <USBD_LL_StallEP>
}
 800cc9c:	bf00      	nop
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d036      	beq.n	800cd28 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ccbe:	6938      	ldr	r0, [r7, #16]
 800ccc0:	f000 f836 	bl	800cd30 <USBD_GetLen>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	b29b      	uxth	r3, r3
 800ccca:	005b      	lsls	r3, r3, #1
 800cccc:	b29a      	uxth	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ccd2:	7dfb      	ldrb	r3, [r7, #23]
 800ccd4:	68ba      	ldr	r2, [r7, #8]
 800ccd6:	4413      	add	r3, r2
 800ccd8:	687a      	ldr	r2, [r7, #4]
 800ccda:	7812      	ldrb	r2, [r2, #0]
 800ccdc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccde:	7dfb      	ldrb	r3, [r7, #23]
 800cce0:	3301      	adds	r3, #1
 800cce2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800cce4:	7dfb      	ldrb	r3, [r7, #23]
 800cce6:	68ba      	ldr	r2, [r7, #8]
 800cce8:	4413      	add	r3, r2
 800ccea:	2203      	movs	r2, #3
 800ccec:	701a      	strb	r2, [r3, #0]
  idx++;
 800ccee:	7dfb      	ldrb	r3, [r7, #23]
 800ccf0:	3301      	adds	r3, #1
 800ccf2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ccf4:	e013      	b.n	800cd1e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ccf6:	7dfb      	ldrb	r3, [r7, #23]
 800ccf8:	68ba      	ldr	r2, [r7, #8]
 800ccfa:	4413      	add	r3, r2
 800ccfc:	693a      	ldr	r2, [r7, #16]
 800ccfe:	7812      	ldrb	r2, [r2, #0]
 800cd00:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800cd02:	693b      	ldr	r3, [r7, #16]
 800cd04:	3301      	adds	r3, #1
 800cd06:	613b      	str	r3, [r7, #16]
    idx++;
 800cd08:	7dfb      	ldrb	r3, [r7, #23]
 800cd0a:	3301      	adds	r3, #1
 800cd0c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800cd0e:	7dfb      	ldrb	r3, [r7, #23]
 800cd10:	68ba      	ldr	r2, [r7, #8]
 800cd12:	4413      	add	r3, r2
 800cd14:	2200      	movs	r2, #0
 800cd16:	701a      	strb	r2, [r3, #0]
    idx++;
 800cd18:	7dfb      	ldrb	r3, [r7, #23]
 800cd1a:	3301      	adds	r3, #1
 800cd1c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	2b00      	cmp	r3, #0
 800cd24:	d1e7      	bne.n	800ccf6 <USBD_GetString+0x52>
 800cd26:	e000      	b.n	800cd2a <USBD_GetString+0x86>
    return;
 800cd28:	bf00      	nop
  }
}
 800cd2a:	3718      	adds	r7, #24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd80      	pop	{r7, pc}

0800cd30 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cd30:	b480      	push	{r7}
 800cd32:	b085      	sub	sp, #20
 800cd34:	af00      	add	r7, sp, #0
 800cd36:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800cd40:	e005      	b.n	800cd4e <USBD_GetLen+0x1e>
  {
    len++;
 800cd42:	7bfb      	ldrb	r3, [r7, #15]
 800cd44:	3301      	adds	r3, #1
 800cd46:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800cd48:	68bb      	ldr	r3, [r7, #8]
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d1f5      	bne.n	800cd42 <USBD_GetLen+0x12>
  }

  return len;
 800cd56:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3714      	adds	r7, #20
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr

0800cd64 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b084      	sub	sp, #16
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60f8      	str	r0, [r7, #12]
 800cd6c:	60b9      	str	r1, [r7, #8]
 800cd6e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	2202      	movs	r2, #2
 800cd74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	687a      	ldr	r2, [r7, #4]
 800cd7c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	68ba      	ldr	r2, [r7, #8]
 800cd88:	2100      	movs	r1, #0
 800cd8a:	68f8      	ldr	r0, [r7, #12]
 800cd8c:	f000 fcf9 	bl	800d782 <USBD_LL_Transmit>

  return USBD_OK;
 800cd90:	2300      	movs	r3, #0
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b084      	sub	sp, #16
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	60f8      	str	r0, [r7, #12]
 800cda2:	60b9      	str	r1, [r7, #8]
 800cda4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	68ba      	ldr	r2, [r7, #8]
 800cdaa:	2100      	movs	r1, #0
 800cdac:	68f8      	ldr	r0, [r7, #12]
 800cdae:	f000 fce8 	bl	800d782 <USBD_LL_Transmit>

  return USBD_OK;
 800cdb2:	2300      	movs	r3, #0
}
 800cdb4:	4618      	mov	r0, r3
 800cdb6:	3710      	adds	r7, #16
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}

0800cdbc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800cdbc:	b580      	push	{r7, lr}
 800cdbe:	b084      	sub	sp, #16
 800cdc0:	af00      	add	r7, sp, #0
 800cdc2:	60f8      	str	r0, [r7, #12]
 800cdc4:	60b9      	str	r1, [r7, #8]
 800cdc6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	2203      	movs	r2, #3
 800cdcc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	687a      	ldr	r2, [r7, #4]
 800cddc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	68ba      	ldr	r2, [r7, #8]
 800cde4:	2100      	movs	r1, #0
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f000 fcec 	bl	800d7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cdec:	2300      	movs	r3, #0
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3710      	adds	r7, #16
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}

0800cdf6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b084      	sub	sp, #16
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	60f8      	str	r0, [r7, #12]
 800cdfe:	60b9      	str	r1, [r7, #8]
 800ce00:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	68ba      	ldr	r2, [r7, #8]
 800ce06:	2100      	movs	r1, #0
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f000 fcdb 	bl	800d7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce0e:	2300      	movs	r3, #0
}
 800ce10:	4618      	mov	r0, r3
 800ce12:	3710      	adds	r7, #16
 800ce14:	46bd      	mov	sp, r7
 800ce16:	bd80      	pop	{r7, pc}

0800ce18 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b082      	sub	sp, #8
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2204      	movs	r2, #4
 800ce24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ce28:	2300      	movs	r3, #0
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	2100      	movs	r1, #0
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	f000 fca7 	bl	800d782 <USBD_LL_Transmit>

  return USBD_OK;
 800ce34:	2300      	movs	r3, #0
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}

0800ce3e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ce3e:	b580      	push	{r7, lr}
 800ce40:	b082      	sub	sp, #8
 800ce42:	af00      	add	r7, sp, #0
 800ce44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2205      	movs	r2, #5
 800ce4a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ce4e:	2300      	movs	r3, #0
 800ce50:	2200      	movs	r2, #0
 800ce52:	2100      	movs	r1, #0
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 fcb5 	bl	800d7c4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ce5a:	2300      	movs	r3, #0
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ce68:	2200      	movs	r2, #0
 800ce6a:	4912      	ldr	r1, [pc, #72]	; (800ceb4 <MX_USB_DEVICE_Init+0x50>)
 800ce6c:	4812      	ldr	r0, [pc, #72]	; (800ceb8 <MX_USB_DEVICE_Init+0x54>)
 800ce6e:	f7fe fd07 	bl	800b880 <USBD_Init>
 800ce72:	4603      	mov	r3, r0
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d001      	beq.n	800ce7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ce78:	f7f4 fe28 	bl	8001acc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ce7c:	490f      	ldr	r1, [pc, #60]	; (800cebc <MX_USB_DEVICE_Init+0x58>)
 800ce7e:	480e      	ldr	r0, [pc, #56]	; (800ceb8 <MX_USB_DEVICE_Init+0x54>)
 800ce80:	f7fe fd2e 	bl	800b8e0 <USBD_RegisterClass>
 800ce84:	4603      	mov	r3, r0
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d001      	beq.n	800ce8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ce8a:	f7f4 fe1f 	bl	8001acc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ce8e:	490c      	ldr	r1, [pc, #48]	; (800cec0 <MX_USB_DEVICE_Init+0x5c>)
 800ce90:	4809      	ldr	r0, [pc, #36]	; (800ceb8 <MX_USB_DEVICE_Init+0x54>)
 800ce92:	f7fe fc1f 	bl	800b6d4 <USBD_CDC_RegisterInterface>
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d001      	beq.n	800cea0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ce9c:	f7f4 fe16 	bl	8001acc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cea0:	4805      	ldr	r0, [pc, #20]	; (800ceb8 <MX_USB_DEVICE_Init+0x54>)
 800cea2:	f7fe fd53 	bl	800b94c <USBD_Start>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d001      	beq.n	800ceb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ceac:	f7f4 fe0e 	bl	8001acc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ceb0:	bf00      	nop
 800ceb2:	bd80      	pop	{r7, pc}
 800ceb4:	200000ac 	.word	0x200000ac
 800ceb8:	20004514 	.word	0x20004514
 800cebc:	20000018 	.word	0x20000018
 800cec0:	20000098 	.word	0x20000098

0800cec4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cec8:	2200      	movs	r2, #0
 800ceca:	4905      	ldr	r1, [pc, #20]	; (800cee0 <CDC_Init_FS+0x1c>)
 800cecc:	4805      	ldr	r0, [pc, #20]	; (800cee4 <CDC_Init_FS+0x20>)
 800cece:	f7fe fc1b 	bl	800b708 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ced2:	4905      	ldr	r1, [pc, #20]	; (800cee8 <CDC_Init_FS+0x24>)
 800ced4:	4803      	ldr	r0, [pc, #12]	; (800cee4 <CDC_Init_FS+0x20>)
 800ced6:	f7fe fc39 	bl	800b74c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ceda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cedc:	4618      	mov	r0, r3
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	20004ff0 	.word	0x20004ff0
 800cee4:	20004514 	.word	0x20004514
 800cee8:	200047f0 	.word	0x200047f0

0800ceec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ceec:	b480      	push	{r7}
 800ceee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cef0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	4603      	mov	r3, r0
 800cf04:	6039      	str	r1, [r7, #0]
 800cf06:	71fb      	strb	r3, [r7, #7]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cf0c:	79fb      	ldrb	r3, [r7, #7]
 800cf0e:	2b23      	cmp	r3, #35	; 0x23
 800cf10:	d84a      	bhi.n	800cfa8 <CDC_Control_FS+0xac>
 800cf12:	a201      	add	r2, pc, #4	; (adr r2, 800cf18 <CDC_Control_FS+0x1c>)
 800cf14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf18:	0800cfa9 	.word	0x0800cfa9
 800cf1c:	0800cfa9 	.word	0x0800cfa9
 800cf20:	0800cfa9 	.word	0x0800cfa9
 800cf24:	0800cfa9 	.word	0x0800cfa9
 800cf28:	0800cfa9 	.word	0x0800cfa9
 800cf2c:	0800cfa9 	.word	0x0800cfa9
 800cf30:	0800cfa9 	.word	0x0800cfa9
 800cf34:	0800cfa9 	.word	0x0800cfa9
 800cf38:	0800cfa9 	.word	0x0800cfa9
 800cf3c:	0800cfa9 	.word	0x0800cfa9
 800cf40:	0800cfa9 	.word	0x0800cfa9
 800cf44:	0800cfa9 	.word	0x0800cfa9
 800cf48:	0800cfa9 	.word	0x0800cfa9
 800cf4c:	0800cfa9 	.word	0x0800cfa9
 800cf50:	0800cfa9 	.word	0x0800cfa9
 800cf54:	0800cfa9 	.word	0x0800cfa9
 800cf58:	0800cfa9 	.word	0x0800cfa9
 800cf5c:	0800cfa9 	.word	0x0800cfa9
 800cf60:	0800cfa9 	.word	0x0800cfa9
 800cf64:	0800cfa9 	.word	0x0800cfa9
 800cf68:	0800cfa9 	.word	0x0800cfa9
 800cf6c:	0800cfa9 	.word	0x0800cfa9
 800cf70:	0800cfa9 	.word	0x0800cfa9
 800cf74:	0800cfa9 	.word	0x0800cfa9
 800cf78:	0800cfa9 	.word	0x0800cfa9
 800cf7c:	0800cfa9 	.word	0x0800cfa9
 800cf80:	0800cfa9 	.word	0x0800cfa9
 800cf84:	0800cfa9 	.word	0x0800cfa9
 800cf88:	0800cfa9 	.word	0x0800cfa9
 800cf8c:	0800cfa9 	.word	0x0800cfa9
 800cf90:	0800cfa9 	.word	0x0800cfa9
 800cf94:	0800cfa9 	.word	0x0800cfa9
 800cf98:	0800cfa9 	.word	0x0800cfa9
 800cf9c:	0800cfa9 	.word	0x0800cfa9
 800cfa0:	0800cfa9 	.word	0x0800cfa9
 800cfa4:	0800cfa9 	.word	0x0800cfa9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cfa8:	bf00      	nop
  }

  return (USBD_OK);
 800cfaa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	370c      	adds	r7, #12
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b082      	sub	sp, #8
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cfc2:	6879      	ldr	r1, [r7, #4]
 800cfc4:	4805      	ldr	r0, [pc, #20]	; (800cfdc <CDC_Receive_FS+0x24>)
 800cfc6:	f7fe fbc1 	bl	800b74c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cfca:	4804      	ldr	r0, [pc, #16]	; (800cfdc <CDC_Receive_FS+0x24>)
 800cfcc:	f7fe fc22 	bl	800b814 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cfd0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3708      	adds	r7, #8
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	20004514 	.word	0x20004514

0800cfe0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b084      	sub	sp, #16
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	460b      	mov	r3, r1
 800cfea:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cfec:	2300      	movs	r3, #0
 800cfee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cff0:	4b0d      	ldr	r3, [pc, #52]	; (800d028 <CDC_Transmit_FS+0x48>)
 800cff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cff6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cff8:	68bb      	ldr	r3, [r7, #8]
 800cffa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d001      	beq.n	800d006 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d002:	2301      	movs	r3, #1
 800d004:	e00b      	b.n	800d01e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d006:	887b      	ldrh	r3, [r7, #2]
 800d008:	461a      	mov	r2, r3
 800d00a:	6879      	ldr	r1, [r7, #4]
 800d00c:	4806      	ldr	r0, [pc, #24]	; (800d028 <CDC_Transmit_FS+0x48>)
 800d00e:	f7fe fb7b 	bl	800b708 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d012:	4805      	ldr	r0, [pc, #20]	; (800d028 <CDC_Transmit_FS+0x48>)
 800d014:	f7fe fbb8 	bl	800b788 <USBD_CDC_TransmitPacket>
 800d018:	4603      	mov	r3, r0
 800d01a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d01c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}
 800d026:	bf00      	nop
 800d028:	20004514 	.word	0x20004514

0800d02c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b087      	sub	sp, #28
 800d030:	af00      	add	r7, sp, #0
 800d032:	60f8      	str	r0, [r7, #12]
 800d034:	60b9      	str	r1, [r7, #8]
 800d036:	4613      	mov	r3, r2
 800d038:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d03a:	2300      	movs	r3, #0
 800d03c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d03e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d042:	4618      	mov	r0, r3
 800d044:	371c      	adds	r7, #28
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr
	...

0800d050 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	4603      	mov	r3, r0
 800d058:	6039      	str	r1, [r7, #0]
 800d05a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800d05c:	683b      	ldr	r3, [r7, #0]
 800d05e:	2212      	movs	r2, #18
 800d060:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800d062:	4b03      	ldr	r3, [pc, #12]	; (800d070 <USBD_FS_DeviceDescriptor+0x20>)
}
 800d064:	4618      	mov	r0, r3
 800d066:	370c      	adds	r7, #12
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr
 800d070:	200000c8 	.word	0x200000c8

0800d074 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d074:	b480      	push	{r7}
 800d076:	b083      	sub	sp, #12
 800d078:	af00      	add	r7, sp, #0
 800d07a:	4603      	mov	r3, r0
 800d07c:	6039      	str	r1, [r7, #0]
 800d07e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	2204      	movs	r2, #4
 800d084:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d086:	4b03      	ldr	r3, [pc, #12]	; (800d094 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800d088:	4618      	mov	r0, r3
 800d08a:	370c      	adds	r7, #12
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr
 800d094:	200000dc 	.word	0x200000dc

0800d098 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b082      	sub	sp, #8
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	4603      	mov	r3, r0
 800d0a0:	6039      	str	r1, [r7, #0]
 800d0a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d0a4:	79fb      	ldrb	r3, [r7, #7]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d105      	bne.n	800d0b6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0aa:	683a      	ldr	r2, [r7, #0]
 800d0ac:	4907      	ldr	r1, [pc, #28]	; (800d0cc <USBD_FS_ProductStrDescriptor+0x34>)
 800d0ae:	4808      	ldr	r0, [pc, #32]	; (800d0d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d0b0:	f7ff fdf8 	bl	800cca4 <USBD_GetString>
 800d0b4:	e004      	b.n	800d0c0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800d0b6:	683a      	ldr	r2, [r7, #0]
 800d0b8:	4904      	ldr	r1, [pc, #16]	; (800d0cc <USBD_FS_ProductStrDescriptor+0x34>)
 800d0ba:	4805      	ldr	r0, [pc, #20]	; (800d0d0 <USBD_FS_ProductStrDescriptor+0x38>)
 800d0bc:	f7ff fdf2 	bl	800cca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d0c0:	4b02      	ldr	r3, [pc, #8]	; (800d0cc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3708      	adds	r7, #8
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
 800d0ca:	bf00      	nop
 800d0cc:	200057f0 	.word	0x200057f0
 800d0d0:	0800f7c0 	.word	0x0800f7c0

0800d0d4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b082      	sub	sp, #8
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	4603      	mov	r3, r0
 800d0dc:	6039      	str	r1, [r7, #0]
 800d0de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d0e0:	683a      	ldr	r2, [r7, #0]
 800d0e2:	4904      	ldr	r1, [pc, #16]	; (800d0f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800d0e4:	4804      	ldr	r0, [pc, #16]	; (800d0f8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800d0e6:	f7ff fddd 	bl	800cca4 <USBD_GetString>
  return USBD_StrDesc;
 800d0ea:	4b02      	ldr	r3, [pc, #8]	; (800d0f4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3708      	adds	r7, #8
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	bd80      	pop	{r7, pc}
 800d0f4:	200057f0 	.word	0x200057f0
 800d0f8:	0800f7d8 	.word	0x0800f7d8

0800d0fc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d0fc:	b580      	push	{r7, lr}
 800d0fe:	b082      	sub	sp, #8
 800d100:	af00      	add	r7, sp, #0
 800d102:	4603      	mov	r3, r0
 800d104:	6039      	str	r1, [r7, #0]
 800d106:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	221a      	movs	r2, #26
 800d10c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d10e:	f000 f843 	bl	800d198 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d112:	4b02      	ldr	r3, [pc, #8]	; (800d11c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d114:	4618      	mov	r0, r3
 800d116:	3708      	adds	r7, #8
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}
 800d11c:	200000e0 	.word	0x200000e0

0800d120 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b082      	sub	sp, #8
 800d124:	af00      	add	r7, sp, #0
 800d126:	4603      	mov	r3, r0
 800d128:	6039      	str	r1, [r7, #0]
 800d12a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d12c:	79fb      	ldrb	r3, [r7, #7]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d105      	bne.n	800d13e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d132:	683a      	ldr	r2, [r7, #0]
 800d134:	4907      	ldr	r1, [pc, #28]	; (800d154 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d136:	4808      	ldr	r0, [pc, #32]	; (800d158 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d138:	f7ff fdb4 	bl	800cca4 <USBD_GetString>
 800d13c:	e004      	b.n	800d148 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d13e:	683a      	ldr	r2, [r7, #0]
 800d140:	4904      	ldr	r1, [pc, #16]	; (800d154 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d142:	4805      	ldr	r0, [pc, #20]	; (800d158 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d144:	f7ff fdae 	bl	800cca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d148:	4b02      	ldr	r3, [pc, #8]	; (800d154 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d14a:	4618      	mov	r0, r3
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}
 800d152:	bf00      	nop
 800d154:	200057f0 	.word	0x200057f0
 800d158:	0800f7ec 	.word	0x0800f7ec

0800d15c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	4603      	mov	r3, r0
 800d164:	6039      	str	r1, [r7, #0]
 800d166:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d168:	79fb      	ldrb	r3, [r7, #7]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d105      	bne.n	800d17a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	4907      	ldr	r1, [pc, #28]	; (800d190 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d172:	4808      	ldr	r0, [pc, #32]	; (800d194 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d174:	f7ff fd96 	bl	800cca4 <USBD_GetString>
 800d178:	e004      	b.n	800d184 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d17a:	683a      	ldr	r2, [r7, #0]
 800d17c:	4904      	ldr	r1, [pc, #16]	; (800d190 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d17e:	4805      	ldr	r0, [pc, #20]	; (800d194 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d180:	f7ff fd90 	bl	800cca4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d184:	4b02      	ldr	r3, [pc, #8]	; (800d190 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d186:	4618      	mov	r0, r3
 800d188:	3708      	adds	r7, #8
 800d18a:	46bd      	mov	sp, r7
 800d18c:	bd80      	pop	{r7, pc}
 800d18e:	bf00      	nop
 800d190:	200057f0 	.word	0x200057f0
 800d194:	0800f7f8 	.word	0x0800f7f8

0800d198 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d19e:	4b0f      	ldr	r3, [pc, #60]	; (800d1dc <Get_SerialNum+0x44>)
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d1a4:	4b0e      	ldr	r3, [pc, #56]	; (800d1e0 <Get_SerialNum+0x48>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d1aa:	4b0e      	ldr	r3, [pc, #56]	; (800d1e4 <Get_SerialNum+0x4c>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d1b0:	68fa      	ldr	r2, [r7, #12]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d009      	beq.n	800d1d2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d1be:	2208      	movs	r2, #8
 800d1c0:	4909      	ldr	r1, [pc, #36]	; (800d1e8 <Get_SerialNum+0x50>)
 800d1c2:	68f8      	ldr	r0, [r7, #12]
 800d1c4:	f000 f814 	bl	800d1f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d1c8:	2204      	movs	r2, #4
 800d1ca:	4908      	ldr	r1, [pc, #32]	; (800d1ec <Get_SerialNum+0x54>)
 800d1cc:	68b8      	ldr	r0, [r7, #8]
 800d1ce:	f000 f80f 	bl	800d1f0 <IntToUnicode>
  }
}
 800d1d2:	bf00      	nop
 800d1d4:	3710      	adds	r7, #16
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	1fff7a10 	.word	0x1fff7a10
 800d1e0:	1fff7a14 	.word	0x1fff7a14
 800d1e4:	1fff7a18 	.word	0x1fff7a18
 800d1e8:	200000e2 	.word	0x200000e2
 800d1ec:	200000f2 	.word	0x200000f2

0800d1f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b087      	sub	sp, #28
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d1fe:	2300      	movs	r3, #0
 800d200:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d202:	2300      	movs	r3, #0
 800d204:	75fb      	strb	r3, [r7, #23]
 800d206:	e027      	b.n	800d258 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	0f1b      	lsrs	r3, r3, #28
 800d20c:	2b09      	cmp	r3, #9
 800d20e:	d80b      	bhi.n	800d228 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	0f1b      	lsrs	r3, r3, #28
 800d214:	b2da      	uxtb	r2, r3
 800d216:	7dfb      	ldrb	r3, [r7, #23]
 800d218:	005b      	lsls	r3, r3, #1
 800d21a:	4619      	mov	r1, r3
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	440b      	add	r3, r1
 800d220:	3230      	adds	r2, #48	; 0x30
 800d222:	b2d2      	uxtb	r2, r2
 800d224:	701a      	strb	r2, [r3, #0]
 800d226:	e00a      	b.n	800d23e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	0f1b      	lsrs	r3, r3, #28
 800d22c:	b2da      	uxtb	r2, r3
 800d22e:	7dfb      	ldrb	r3, [r7, #23]
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	4619      	mov	r1, r3
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	440b      	add	r3, r1
 800d238:	3237      	adds	r2, #55	; 0x37
 800d23a:	b2d2      	uxtb	r2, r2
 800d23c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	011b      	lsls	r3, r3, #4
 800d242:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d244:	7dfb      	ldrb	r3, [r7, #23]
 800d246:	005b      	lsls	r3, r3, #1
 800d248:	3301      	adds	r3, #1
 800d24a:	68ba      	ldr	r2, [r7, #8]
 800d24c:	4413      	add	r3, r2
 800d24e:	2200      	movs	r2, #0
 800d250:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d252:	7dfb      	ldrb	r3, [r7, #23]
 800d254:	3301      	adds	r3, #1
 800d256:	75fb      	strb	r3, [r7, #23]
 800d258:	7dfa      	ldrb	r2, [r7, #23]
 800d25a:	79fb      	ldrb	r3, [r7, #7]
 800d25c:	429a      	cmp	r2, r3
 800d25e:	d3d3      	bcc.n	800d208 <IntToUnicode+0x18>
  }
}
 800d260:	bf00      	nop
 800d262:	bf00      	nop
 800d264:	371c      	adds	r7, #28
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr
	...

0800d270 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08a      	sub	sp, #40	; 0x28
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d278:	f107 0314 	add.w	r3, r7, #20
 800d27c:	2200      	movs	r2, #0
 800d27e:	601a      	str	r2, [r3, #0]
 800d280:	605a      	str	r2, [r3, #4]
 800d282:	609a      	str	r2, [r3, #8]
 800d284:	60da      	str	r2, [r3, #12]
 800d286:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d290:	d147      	bne.n	800d322 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d292:	2300      	movs	r3, #0
 800d294:	613b      	str	r3, [r7, #16]
 800d296:	4b25      	ldr	r3, [pc, #148]	; (800d32c <HAL_PCD_MspInit+0xbc>)
 800d298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d29a:	4a24      	ldr	r2, [pc, #144]	; (800d32c <HAL_PCD_MspInit+0xbc>)
 800d29c:	f043 0301 	orr.w	r3, r3, #1
 800d2a0:	6313      	str	r3, [r2, #48]	; 0x30
 800d2a2:	4b22      	ldr	r3, [pc, #136]	; (800d32c <HAL_PCD_MspInit+0xbc>)
 800d2a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a6:	f003 0301 	and.w	r3, r3, #1
 800d2aa:	613b      	str	r3, [r7, #16]
 800d2ac:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800d2ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800d2bc:	f107 0314 	add.w	r3, r7, #20
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	481b      	ldr	r0, [pc, #108]	; (800d330 <HAL_PCD_MspInit+0xc0>)
 800d2c4:	f7f7 fbce 	bl	8004a64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800d2c8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800d2cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2ce:	2302      	movs	r3, #2
 800d2d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d2da:	230a      	movs	r3, #10
 800d2dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d2de:	f107 0314 	add.w	r3, r7, #20
 800d2e2:	4619      	mov	r1, r3
 800d2e4:	4812      	ldr	r0, [pc, #72]	; (800d330 <HAL_PCD_MspInit+0xc0>)
 800d2e6:	f7f7 fbbd 	bl	8004a64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d2ea:	4b10      	ldr	r3, [pc, #64]	; (800d32c <HAL_PCD_MspInit+0xbc>)
 800d2ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2ee:	4a0f      	ldr	r2, [pc, #60]	; (800d32c <HAL_PCD_MspInit+0xbc>)
 800d2f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2f4:	6353      	str	r3, [r2, #52]	; 0x34
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	60fb      	str	r3, [r7, #12]
 800d2fa:	4b0c      	ldr	r3, [pc, #48]	; (800d32c <HAL_PCD_MspInit+0xbc>)
 800d2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2fe:	4a0b      	ldr	r2, [pc, #44]	; (800d32c <HAL_PCD_MspInit+0xbc>)
 800d300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d304:	6453      	str	r3, [r2, #68]	; 0x44
 800d306:	4b09      	ldr	r3, [pc, #36]	; (800d32c <HAL_PCD_MspInit+0xbc>)
 800d308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d30a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d30e:	60fb      	str	r3, [r7, #12]
 800d310:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d312:	2200      	movs	r2, #0
 800d314:	2100      	movs	r1, #0
 800d316:	2043      	movs	r0, #67	; 0x43
 800d318:	f7f6 fd6d 	bl	8003df6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d31c:	2043      	movs	r0, #67	; 0x43
 800d31e:	f7f6 fd86 	bl	8003e2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d322:	bf00      	nop
 800d324:	3728      	adds	r7, #40	; 0x28
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}
 800d32a:	bf00      	nop
 800d32c:	40023800 	.word	0x40023800
 800d330:	40020000 	.word	0x40020000

0800d334 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d334:	b580      	push	{r7, lr}
 800d336:	b082      	sub	sp, #8
 800d338:	af00      	add	r7, sp, #0
 800d33a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800d348:	4619      	mov	r1, r3
 800d34a:	4610      	mov	r0, r2
 800d34c:	f7fe fb4b 	bl	800b9e6 <USBD_LL_SetupStage>
}
 800d350:	bf00      	nop
 800d352:	3708      	adds	r7, #8
 800d354:	46bd      	mov	sp, r7
 800d356:	bd80      	pop	{r7, pc}

0800d358 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d358:	b580      	push	{r7, lr}
 800d35a:	b082      	sub	sp, #8
 800d35c:	af00      	add	r7, sp, #0
 800d35e:	6078      	str	r0, [r7, #4]
 800d360:	460b      	mov	r3, r1
 800d362:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d36a:	78fa      	ldrb	r2, [r7, #3]
 800d36c:	6879      	ldr	r1, [r7, #4]
 800d36e:	4613      	mov	r3, r2
 800d370:	00db      	lsls	r3, r3, #3
 800d372:	4413      	add	r3, r2
 800d374:	009b      	lsls	r3, r3, #2
 800d376:	440b      	add	r3, r1
 800d378:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800d37c:	681a      	ldr	r2, [r3, #0]
 800d37e:	78fb      	ldrb	r3, [r7, #3]
 800d380:	4619      	mov	r1, r3
 800d382:	f7fe fb85 	bl	800ba90 <USBD_LL_DataOutStage>
}
 800d386:	bf00      	nop
 800d388:	3708      	adds	r7, #8
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}

0800d38e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d38e:	b580      	push	{r7, lr}
 800d390:	b082      	sub	sp, #8
 800d392:	af00      	add	r7, sp, #0
 800d394:	6078      	str	r0, [r7, #4]
 800d396:	460b      	mov	r3, r1
 800d398:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800d3a0:	78fa      	ldrb	r2, [r7, #3]
 800d3a2:	6879      	ldr	r1, [r7, #4]
 800d3a4:	4613      	mov	r3, r2
 800d3a6:	00db      	lsls	r3, r3, #3
 800d3a8:	4413      	add	r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	440b      	add	r3, r1
 800d3ae:	334c      	adds	r3, #76	; 0x4c
 800d3b0:	681a      	ldr	r2, [r3, #0]
 800d3b2:	78fb      	ldrb	r3, [r7, #3]
 800d3b4:	4619      	mov	r1, r3
 800d3b6:	f7fe fc1e 	bl	800bbf6 <USBD_LL_DataInStage>
}
 800d3ba:	bf00      	nop
 800d3bc:	3708      	adds	r7, #8
 800d3be:	46bd      	mov	sp, r7
 800d3c0:	bd80      	pop	{r7, pc}

0800d3c2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3c2:	b580      	push	{r7, lr}
 800d3c4:	b082      	sub	sp, #8
 800d3c6:	af00      	add	r7, sp, #0
 800d3c8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7fe fd52 	bl	800be7a <USBD_LL_SOF>
}
 800d3d6:	bf00      	nop
 800d3d8:	3708      	adds	r7, #8
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}

0800d3de <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3de:	b580      	push	{r7, lr}
 800d3e0:	b084      	sub	sp, #16
 800d3e2:	af00      	add	r7, sp, #0
 800d3e4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d102      	bne.n	800d3f8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	73fb      	strb	r3, [r7, #15]
 800d3f6:	e008      	b.n	800d40a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	68db      	ldr	r3, [r3, #12]
 800d3fc:	2b02      	cmp	r3, #2
 800d3fe:	d102      	bne.n	800d406 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d400:	2301      	movs	r3, #1
 800d402:	73fb      	strb	r3, [r7, #15]
 800d404:	e001      	b.n	800d40a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d406:	f7f4 fb61 	bl	8001acc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d410:	7bfa      	ldrb	r2, [r7, #15]
 800d412:	4611      	mov	r1, r2
 800d414:	4618      	mov	r0, r3
 800d416:	f7fe fcf2 	bl	800bdfe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d420:	4618      	mov	r0, r3
 800d422:	f7fe fc9a 	bl	800bd5a <USBD_LL_Reset>
}
 800d426:	bf00      	nop
 800d428:	3710      	adds	r7, #16
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
	...

0800d430 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d43e:	4618      	mov	r0, r3
 800d440:	f7fe fced 	bl	800be1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	6812      	ldr	r2, [r2, #0]
 800d452:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d456:	f043 0301 	orr.w	r3, r3, #1
 800d45a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	6a1b      	ldr	r3, [r3, #32]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d005      	beq.n	800d470 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d464:	4b04      	ldr	r3, [pc, #16]	; (800d478 <HAL_PCD_SuspendCallback+0x48>)
 800d466:	691b      	ldr	r3, [r3, #16]
 800d468:	4a03      	ldr	r2, [pc, #12]	; (800d478 <HAL_PCD_SuspendCallback+0x48>)
 800d46a:	f043 0306 	orr.w	r3, r3, #6
 800d46e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d470:	bf00      	nop
 800d472:	3708      	adds	r7, #8
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}
 800d478:	e000ed00 	.word	0xe000ed00

0800d47c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d48a:	4618      	mov	r0, r3
 800d48c:	f7fe fcdd 	bl	800be4a <USBD_LL_Resume>
}
 800d490:	bf00      	nop
 800d492:	3708      	adds	r7, #8
 800d494:	46bd      	mov	sp, r7
 800d496:	bd80      	pop	{r7, pc}

0800d498 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	460b      	mov	r3, r1
 800d4a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d4aa:	78fa      	ldrb	r2, [r7, #3]
 800d4ac:	4611      	mov	r1, r2
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	f7fe fd35 	bl	800bf1e <USBD_LL_IsoOUTIncomplete>
}
 800d4b4:	bf00      	nop
 800d4b6:	3708      	adds	r7, #8
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	bd80      	pop	{r7, pc}

0800d4bc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
 800d4c4:	460b      	mov	r3, r1
 800d4c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d4ce:	78fa      	ldrb	r2, [r7, #3]
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	f7fe fcf1 	bl	800beba <USBD_LL_IsoINIncomplete>
}
 800d4d8:	bf00      	nop
 800d4da:	3708      	adds	r7, #8
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}

0800d4e0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f7fe fd47 	bl	800bf82 <USBD_LL_DevConnected>
}
 800d4f4:	bf00      	nop
 800d4f6:	3708      	adds	r7, #8
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	bd80      	pop	{r7, pc}

0800d4fc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d4fc:	b580      	push	{r7, lr}
 800d4fe:	b082      	sub	sp, #8
 800d500:	af00      	add	r7, sp, #0
 800d502:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800d50a:	4618      	mov	r0, r3
 800d50c:	f7fe fd44 	bl	800bf98 <USBD_LL_DevDisconnected>
}
 800d510:	bf00      	nop
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b082      	sub	sp, #8
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d13c      	bne.n	800d5a2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d528:	4a20      	ldr	r2, [pc, #128]	; (800d5ac <USBD_LL_Init+0x94>)
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	4a1e      	ldr	r2, [pc, #120]	; (800d5ac <USBD_LL_Init+0x94>)
 800d534:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d538:	4b1c      	ldr	r3, [pc, #112]	; (800d5ac <USBD_LL_Init+0x94>)
 800d53a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d53e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d540:	4b1a      	ldr	r3, [pc, #104]	; (800d5ac <USBD_LL_Init+0x94>)
 800d542:	2204      	movs	r2, #4
 800d544:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d546:	4b19      	ldr	r3, [pc, #100]	; (800d5ac <USBD_LL_Init+0x94>)
 800d548:	2202      	movs	r2, #2
 800d54a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d54c:	4b17      	ldr	r3, [pc, #92]	; (800d5ac <USBD_LL_Init+0x94>)
 800d54e:	2200      	movs	r2, #0
 800d550:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d552:	4b16      	ldr	r3, [pc, #88]	; (800d5ac <USBD_LL_Init+0x94>)
 800d554:	2202      	movs	r2, #2
 800d556:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d558:	4b14      	ldr	r3, [pc, #80]	; (800d5ac <USBD_LL_Init+0x94>)
 800d55a:	2200      	movs	r2, #0
 800d55c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d55e:	4b13      	ldr	r3, [pc, #76]	; (800d5ac <USBD_LL_Init+0x94>)
 800d560:	2200      	movs	r2, #0
 800d562:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d564:	4b11      	ldr	r3, [pc, #68]	; (800d5ac <USBD_LL_Init+0x94>)
 800d566:	2200      	movs	r2, #0
 800d568:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800d56a:	4b10      	ldr	r3, [pc, #64]	; (800d5ac <USBD_LL_Init+0x94>)
 800d56c:	2201      	movs	r2, #1
 800d56e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d570:	4b0e      	ldr	r3, [pc, #56]	; (800d5ac <USBD_LL_Init+0x94>)
 800d572:	2200      	movs	r2, #0
 800d574:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d576:	480d      	ldr	r0, [pc, #52]	; (800d5ac <USBD_LL_Init+0x94>)
 800d578:	f7f7 fd86 	bl	8005088 <HAL_PCD_Init>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d001      	beq.n	800d586 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d582:	f7f4 faa3 	bl	8001acc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d586:	2180      	movs	r1, #128	; 0x80
 800d588:	4808      	ldr	r0, [pc, #32]	; (800d5ac <USBD_LL_Init+0x94>)
 800d58a:	f7f8 ffde 	bl	800654a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d58e:	2240      	movs	r2, #64	; 0x40
 800d590:	2100      	movs	r1, #0
 800d592:	4806      	ldr	r0, [pc, #24]	; (800d5ac <USBD_LL_Init+0x94>)
 800d594:	f7f8 ff92 	bl	80064bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d598:	2280      	movs	r2, #128	; 0x80
 800d59a:	2101      	movs	r1, #1
 800d59c:	4803      	ldr	r0, [pc, #12]	; (800d5ac <USBD_LL_Init+0x94>)
 800d59e:	f7f8 ff8d 	bl	80064bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d5a2:	2300      	movs	r3, #0
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3708      	adds	r7, #8
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}
 800d5ac:	200059f0 	.word	0x200059f0

0800d5b0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b084      	sub	sp, #16
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5bc:	2300      	movs	r3, #0
 800d5be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	f7f7 fe7b 	bl	80052c2 <HAL_PCD_Start>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d5d0:	7bfb      	ldrb	r3, [r7, #15]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f000 f942 	bl	800d85c <USBD_Get_USB_Status>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d5dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b084      	sub	sp, #16
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	4608      	mov	r0, r1
 800d5f0:	4611      	mov	r1, r2
 800d5f2:	461a      	mov	r2, r3
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	70fb      	strb	r3, [r7, #3]
 800d5f8:	460b      	mov	r3, r1
 800d5fa:	70bb      	strb	r3, [r7, #2]
 800d5fc:	4613      	mov	r3, r2
 800d5fe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d600:	2300      	movs	r3, #0
 800d602:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d604:	2300      	movs	r3, #0
 800d606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d60e:	78bb      	ldrb	r3, [r7, #2]
 800d610:	883a      	ldrh	r2, [r7, #0]
 800d612:	78f9      	ldrb	r1, [r7, #3]
 800d614:	f7f8 fb4c 	bl	8005cb0 <HAL_PCD_EP_Open>
 800d618:	4603      	mov	r3, r0
 800d61a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d61c:	7bfb      	ldrb	r3, [r7, #15]
 800d61e:	4618      	mov	r0, r3
 800d620:	f000 f91c 	bl	800d85c <USBD_Get_USB_Status>
 800d624:	4603      	mov	r3, r0
 800d626:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d628:	7bbb      	ldrb	r3, [r7, #14]
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3710      	adds	r7, #16
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d632:	b580      	push	{r7, lr}
 800d634:	b084      	sub	sp, #16
 800d636:	af00      	add	r7, sp, #0
 800d638:	6078      	str	r0, [r7, #4]
 800d63a:	460b      	mov	r3, r1
 800d63c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d642:	2300      	movs	r3, #0
 800d644:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d64c:	78fa      	ldrb	r2, [r7, #3]
 800d64e:	4611      	mov	r1, r2
 800d650:	4618      	mov	r0, r3
 800d652:	f7f8 fb95 	bl	8005d80 <HAL_PCD_EP_Close>
 800d656:	4603      	mov	r3, r0
 800d658:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d65a:	7bfb      	ldrb	r3, [r7, #15]
 800d65c:	4618      	mov	r0, r3
 800d65e:	f000 f8fd 	bl	800d85c <USBD_Get_USB_Status>
 800d662:	4603      	mov	r3, r0
 800d664:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d666:	7bbb      	ldrb	r3, [r7, #14]
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	460b      	mov	r3, r1
 800d67a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d67c:	2300      	movs	r3, #0
 800d67e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d680:	2300      	movs	r3, #0
 800d682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d68a:	78fa      	ldrb	r2, [r7, #3]
 800d68c:	4611      	mov	r1, r2
 800d68e:	4618      	mov	r0, r3
 800d690:	f7f8 fc6d 	bl	8005f6e <HAL_PCD_EP_SetStall>
 800d694:	4603      	mov	r3, r0
 800d696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d698:	7bfb      	ldrb	r3, [r7, #15]
 800d69a:	4618      	mov	r0, r3
 800d69c:	f000 f8de 	bl	800d85c <USBD_Get_USB_Status>
 800d6a0:	4603      	mov	r3, r0
 800d6a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b084      	sub	sp, #16
 800d6b2:	af00      	add	r7, sp, #0
 800d6b4:	6078      	str	r0, [r7, #4]
 800d6b6:	460b      	mov	r3, r1
 800d6b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d6c8:	78fa      	ldrb	r2, [r7, #3]
 800d6ca:	4611      	mov	r1, r2
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	f7f8 fcb2 	bl	8006036 <HAL_PCD_EP_ClrStall>
 800d6d2:	4603      	mov	r3, r0
 800d6d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d6d6:	7bfb      	ldrb	r3, [r7, #15]
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f000 f8bf 	bl	800d85c <USBD_Get_USB_Status>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d6e2:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3710      	adds	r7, #16
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	460b      	mov	r3, r1
 800d6f6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d6fe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d700:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d704:	2b00      	cmp	r3, #0
 800d706:	da0b      	bge.n	800d720 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d708:	78fb      	ldrb	r3, [r7, #3]
 800d70a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d70e:	68f9      	ldr	r1, [r7, #12]
 800d710:	4613      	mov	r3, r2
 800d712:	00db      	lsls	r3, r3, #3
 800d714:	4413      	add	r3, r2
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	440b      	add	r3, r1
 800d71a:	333e      	adds	r3, #62	; 0x3e
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	e00b      	b.n	800d738 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d720:	78fb      	ldrb	r3, [r7, #3]
 800d722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d726:	68f9      	ldr	r1, [r7, #12]
 800d728:	4613      	mov	r3, r2
 800d72a:	00db      	lsls	r3, r3, #3
 800d72c:	4413      	add	r3, r2
 800d72e:	009b      	lsls	r3, r3, #2
 800d730:	440b      	add	r3, r1
 800d732:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800d736:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3714      	adds	r7, #20
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	b084      	sub	sp, #16
 800d748:	af00      	add	r7, sp, #0
 800d74a:	6078      	str	r0, [r7, #4]
 800d74c:	460b      	mov	r3, r1
 800d74e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d750:	2300      	movs	r3, #0
 800d752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d754:	2300      	movs	r3, #0
 800d756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d75e:	78fa      	ldrb	r2, [r7, #3]
 800d760:	4611      	mov	r1, r2
 800d762:	4618      	mov	r0, r3
 800d764:	f7f8 fa7f 	bl	8005c66 <HAL_PCD_SetAddress>
 800d768:	4603      	mov	r3, r0
 800d76a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d76c:	7bfb      	ldrb	r3, [r7, #15]
 800d76e:	4618      	mov	r0, r3
 800d770:	f000 f874 	bl	800d85c <USBD_Get_USB_Status>
 800d774:	4603      	mov	r3, r0
 800d776:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d778:	7bbb      	ldrb	r3, [r7, #14]
}
 800d77a:	4618      	mov	r0, r3
 800d77c:	3710      	adds	r7, #16
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}

0800d782 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d782:	b580      	push	{r7, lr}
 800d784:	b086      	sub	sp, #24
 800d786:	af00      	add	r7, sp, #0
 800d788:	60f8      	str	r0, [r7, #12]
 800d78a:	607a      	str	r2, [r7, #4]
 800d78c:	603b      	str	r3, [r7, #0]
 800d78e:	460b      	mov	r3, r1
 800d790:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d792:	2300      	movs	r3, #0
 800d794:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d796:	2300      	movs	r3, #0
 800d798:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d7a0:	7af9      	ldrb	r1, [r7, #11]
 800d7a2:	683b      	ldr	r3, [r7, #0]
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	f7f8 fb98 	bl	8005eda <HAL_PCD_EP_Transmit>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7ae:	7dfb      	ldrb	r3, [r7, #23]
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f000 f853 	bl	800d85c <USBD_Get_USB_Status>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7ba:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3718      	adds	r7, #24
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	60f8      	str	r0, [r7, #12]
 800d7cc:	607a      	str	r2, [r7, #4]
 800d7ce:	603b      	str	r3, [r7, #0]
 800d7d0:	460b      	mov	r3, r1
 800d7d2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800d7e2:	7af9      	ldrb	r1, [r7, #11]
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	f7f8 fb14 	bl	8005e14 <HAL_PCD_EP_Receive>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d7f0:	7dfb      	ldrb	r3, [r7, #23]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f000 f832 	bl	800d85c <USBD_Get_USB_Status>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d7fc:	7dbb      	ldrb	r3, [r7, #22]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3718      	adds	r7, #24
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b082      	sub	sp, #8
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	6078      	str	r0, [r7, #4]
 800d80e:	460b      	mov	r3, r1
 800d810:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d818:	78fa      	ldrb	r2, [r7, #3]
 800d81a:	4611      	mov	r1, r2
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7f8 fb44 	bl	8005eaa <HAL_PCD_EP_GetRxCount>
 800d822:	4603      	mov	r3, r0
}
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}

0800d82c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d82c:	b480      	push	{r7}
 800d82e:	b083      	sub	sp, #12
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d834:	4b03      	ldr	r3, [pc, #12]	; (800d844 <USBD_static_malloc+0x18>)
}
 800d836:	4618      	mov	r0, r3
 800d838:	370c      	adds	r7, #12
 800d83a:	46bd      	mov	sp, r7
 800d83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d840:	4770      	bx	lr
 800d842:	bf00      	nop
 800d844:	20005efc 	.word	0x20005efc

0800d848 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d848:	b480      	push	{r7}
 800d84a:	b083      	sub	sp, #12
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	6078      	str	r0, [r7, #4]

}
 800d850:	bf00      	nop
 800d852:	370c      	adds	r7, #12
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d85c:	b480      	push	{r7}
 800d85e:	b085      	sub	sp, #20
 800d860:	af00      	add	r7, sp, #0
 800d862:	4603      	mov	r3, r0
 800d864:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d866:	2300      	movs	r3, #0
 800d868:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d86a:	79fb      	ldrb	r3, [r7, #7]
 800d86c:	2b03      	cmp	r3, #3
 800d86e:	d817      	bhi.n	800d8a0 <USBD_Get_USB_Status+0x44>
 800d870:	a201      	add	r2, pc, #4	; (adr r2, 800d878 <USBD_Get_USB_Status+0x1c>)
 800d872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d876:	bf00      	nop
 800d878:	0800d889 	.word	0x0800d889
 800d87c:	0800d88f 	.word	0x0800d88f
 800d880:	0800d895 	.word	0x0800d895
 800d884:	0800d89b 	.word	0x0800d89b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d888:	2300      	movs	r3, #0
 800d88a:	73fb      	strb	r3, [r7, #15]
    break;
 800d88c:	e00b      	b.n	800d8a6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d88e:	2303      	movs	r3, #3
 800d890:	73fb      	strb	r3, [r7, #15]
    break;
 800d892:	e008      	b.n	800d8a6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d894:	2301      	movs	r3, #1
 800d896:	73fb      	strb	r3, [r7, #15]
    break;
 800d898:	e005      	b.n	800d8a6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d89a:	2303      	movs	r3, #3
 800d89c:	73fb      	strb	r3, [r7, #15]
    break;
 800d89e:	e002      	b.n	800d8a6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d8a4:	bf00      	nop
  }
  return usb_status;
 800d8a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3714      	adds	r7, #20
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <__errno>:
 800d8b4:	4b01      	ldr	r3, [pc, #4]	; (800d8bc <__errno+0x8>)
 800d8b6:	6818      	ldr	r0, [r3, #0]
 800d8b8:	4770      	bx	lr
 800d8ba:	bf00      	nop
 800d8bc:	200000fc 	.word	0x200000fc

0800d8c0 <__libc_init_array>:
 800d8c0:	b570      	push	{r4, r5, r6, lr}
 800d8c2:	4d0d      	ldr	r5, [pc, #52]	; (800d8f8 <__libc_init_array+0x38>)
 800d8c4:	4c0d      	ldr	r4, [pc, #52]	; (800d8fc <__libc_init_array+0x3c>)
 800d8c6:	1b64      	subs	r4, r4, r5
 800d8c8:	10a4      	asrs	r4, r4, #2
 800d8ca:	2600      	movs	r6, #0
 800d8cc:	42a6      	cmp	r6, r4
 800d8ce:	d109      	bne.n	800d8e4 <__libc_init_array+0x24>
 800d8d0:	4d0b      	ldr	r5, [pc, #44]	; (800d900 <__libc_init_array+0x40>)
 800d8d2:	4c0c      	ldr	r4, [pc, #48]	; (800d904 <__libc_init_array+0x44>)
 800d8d4:	f001 fa10 	bl	800ecf8 <_init>
 800d8d8:	1b64      	subs	r4, r4, r5
 800d8da:	10a4      	asrs	r4, r4, #2
 800d8dc:	2600      	movs	r6, #0
 800d8de:	42a6      	cmp	r6, r4
 800d8e0:	d105      	bne.n	800d8ee <__libc_init_array+0x2e>
 800d8e2:	bd70      	pop	{r4, r5, r6, pc}
 800d8e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8e8:	4798      	blx	r3
 800d8ea:	3601      	adds	r6, #1
 800d8ec:	e7ee      	b.n	800d8cc <__libc_init_array+0xc>
 800d8ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800d8f2:	4798      	blx	r3
 800d8f4:	3601      	adds	r6, #1
 800d8f6:	e7f2      	b.n	800d8de <__libc_init_array+0x1e>
 800d8f8:	08010898 	.word	0x08010898
 800d8fc:	08010898 	.word	0x08010898
 800d900:	08010898 	.word	0x08010898
 800d904:	0801089c 	.word	0x0801089c

0800d908 <memcmp>:
 800d908:	b510      	push	{r4, lr}
 800d90a:	3901      	subs	r1, #1
 800d90c:	4402      	add	r2, r0
 800d90e:	4290      	cmp	r0, r2
 800d910:	d101      	bne.n	800d916 <memcmp+0xe>
 800d912:	2000      	movs	r0, #0
 800d914:	e005      	b.n	800d922 <memcmp+0x1a>
 800d916:	7803      	ldrb	r3, [r0, #0]
 800d918:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d91c:	42a3      	cmp	r3, r4
 800d91e:	d001      	beq.n	800d924 <memcmp+0x1c>
 800d920:	1b18      	subs	r0, r3, r4
 800d922:	bd10      	pop	{r4, pc}
 800d924:	3001      	adds	r0, #1
 800d926:	e7f2      	b.n	800d90e <memcmp+0x6>

0800d928 <memcpy>:
 800d928:	440a      	add	r2, r1
 800d92a:	4291      	cmp	r1, r2
 800d92c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d930:	d100      	bne.n	800d934 <memcpy+0xc>
 800d932:	4770      	bx	lr
 800d934:	b510      	push	{r4, lr}
 800d936:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d93a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d93e:	4291      	cmp	r1, r2
 800d940:	d1f9      	bne.n	800d936 <memcpy+0xe>
 800d942:	bd10      	pop	{r4, pc}

0800d944 <memset>:
 800d944:	4402      	add	r2, r0
 800d946:	4603      	mov	r3, r0
 800d948:	4293      	cmp	r3, r2
 800d94a:	d100      	bne.n	800d94e <memset+0xa>
 800d94c:	4770      	bx	lr
 800d94e:	f803 1b01 	strb.w	r1, [r3], #1
 800d952:	e7f9      	b.n	800d948 <memset+0x4>

0800d954 <iprintf>:
 800d954:	b40f      	push	{r0, r1, r2, r3}
 800d956:	4b0a      	ldr	r3, [pc, #40]	; (800d980 <iprintf+0x2c>)
 800d958:	b513      	push	{r0, r1, r4, lr}
 800d95a:	681c      	ldr	r4, [r3, #0]
 800d95c:	b124      	cbz	r4, 800d968 <iprintf+0x14>
 800d95e:	69a3      	ldr	r3, [r4, #24]
 800d960:	b913      	cbnz	r3, 800d968 <iprintf+0x14>
 800d962:	4620      	mov	r0, r4
 800d964:	f000 fa7e 	bl	800de64 <__sinit>
 800d968:	ab05      	add	r3, sp, #20
 800d96a:	9a04      	ldr	r2, [sp, #16]
 800d96c:	68a1      	ldr	r1, [r4, #8]
 800d96e:	9301      	str	r3, [sp, #4]
 800d970:	4620      	mov	r0, r4
 800d972:	f000 fde3 	bl	800e53c <_vfiprintf_r>
 800d976:	b002      	add	sp, #8
 800d978:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d97c:	b004      	add	sp, #16
 800d97e:	4770      	bx	lr
 800d980:	200000fc 	.word	0x200000fc

0800d984 <_puts_r>:
 800d984:	b570      	push	{r4, r5, r6, lr}
 800d986:	460e      	mov	r6, r1
 800d988:	4605      	mov	r5, r0
 800d98a:	b118      	cbz	r0, 800d994 <_puts_r+0x10>
 800d98c:	6983      	ldr	r3, [r0, #24]
 800d98e:	b90b      	cbnz	r3, 800d994 <_puts_r+0x10>
 800d990:	f000 fa68 	bl	800de64 <__sinit>
 800d994:	69ab      	ldr	r3, [r5, #24]
 800d996:	68ac      	ldr	r4, [r5, #8]
 800d998:	b913      	cbnz	r3, 800d9a0 <_puts_r+0x1c>
 800d99a:	4628      	mov	r0, r5
 800d99c:	f000 fa62 	bl	800de64 <__sinit>
 800d9a0:	4b2c      	ldr	r3, [pc, #176]	; (800da54 <_puts_r+0xd0>)
 800d9a2:	429c      	cmp	r4, r3
 800d9a4:	d120      	bne.n	800d9e8 <_puts_r+0x64>
 800d9a6:	686c      	ldr	r4, [r5, #4]
 800d9a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9aa:	07db      	lsls	r3, r3, #31
 800d9ac:	d405      	bmi.n	800d9ba <_puts_r+0x36>
 800d9ae:	89a3      	ldrh	r3, [r4, #12]
 800d9b0:	0598      	lsls	r0, r3, #22
 800d9b2:	d402      	bmi.n	800d9ba <_puts_r+0x36>
 800d9b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9b6:	f000 faf3 	bl	800dfa0 <__retarget_lock_acquire_recursive>
 800d9ba:	89a3      	ldrh	r3, [r4, #12]
 800d9bc:	0719      	lsls	r1, r3, #28
 800d9be:	d51d      	bpl.n	800d9fc <_puts_r+0x78>
 800d9c0:	6923      	ldr	r3, [r4, #16]
 800d9c2:	b1db      	cbz	r3, 800d9fc <_puts_r+0x78>
 800d9c4:	3e01      	subs	r6, #1
 800d9c6:	68a3      	ldr	r3, [r4, #8]
 800d9c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d9cc:	3b01      	subs	r3, #1
 800d9ce:	60a3      	str	r3, [r4, #8]
 800d9d0:	bb39      	cbnz	r1, 800da22 <_puts_r+0x9e>
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	da38      	bge.n	800da48 <_puts_r+0xc4>
 800d9d6:	4622      	mov	r2, r4
 800d9d8:	210a      	movs	r1, #10
 800d9da:	4628      	mov	r0, r5
 800d9dc:	f000 f868 	bl	800dab0 <__swbuf_r>
 800d9e0:	3001      	adds	r0, #1
 800d9e2:	d011      	beq.n	800da08 <_puts_r+0x84>
 800d9e4:	250a      	movs	r5, #10
 800d9e6:	e011      	b.n	800da0c <_puts_r+0x88>
 800d9e8:	4b1b      	ldr	r3, [pc, #108]	; (800da58 <_puts_r+0xd4>)
 800d9ea:	429c      	cmp	r4, r3
 800d9ec:	d101      	bne.n	800d9f2 <_puts_r+0x6e>
 800d9ee:	68ac      	ldr	r4, [r5, #8]
 800d9f0:	e7da      	b.n	800d9a8 <_puts_r+0x24>
 800d9f2:	4b1a      	ldr	r3, [pc, #104]	; (800da5c <_puts_r+0xd8>)
 800d9f4:	429c      	cmp	r4, r3
 800d9f6:	bf08      	it	eq
 800d9f8:	68ec      	ldreq	r4, [r5, #12]
 800d9fa:	e7d5      	b.n	800d9a8 <_puts_r+0x24>
 800d9fc:	4621      	mov	r1, r4
 800d9fe:	4628      	mov	r0, r5
 800da00:	f000 f8a8 	bl	800db54 <__swsetup_r>
 800da04:	2800      	cmp	r0, #0
 800da06:	d0dd      	beq.n	800d9c4 <_puts_r+0x40>
 800da08:	f04f 35ff 	mov.w	r5, #4294967295
 800da0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da0e:	07da      	lsls	r2, r3, #31
 800da10:	d405      	bmi.n	800da1e <_puts_r+0x9a>
 800da12:	89a3      	ldrh	r3, [r4, #12]
 800da14:	059b      	lsls	r3, r3, #22
 800da16:	d402      	bmi.n	800da1e <_puts_r+0x9a>
 800da18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da1a:	f000 fac2 	bl	800dfa2 <__retarget_lock_release_recursive>
 800da1e:	4628      	mov	r0, r5
 800da20:	bd70      	pop	{r4, r5, r6, pc}
 800da22:	2b00      	cmp	r3, #0
 800da24:	da04      	bge.n	800da30 <_puts_r+0xac>
 800da26:	69a2      	ldr	r2, [r4, #24]
 800da28:	429a      	cmp	r2, r3
 800da2a:	dc06      	bgt.n	800da3a <_puts_r+0xb6>
 800da2c:	290a      	cmp	r1, #10
 800da2e:	d004      	beq.n	800da3a <_puts_r+0xb6>
 800da30:	6823      	ldr	r3, [r4, #0]
 800da32:	1c5a      	adds	r2, r3, #1
 800da34:	6022      	str	r2, [r4, #0]
 800da36:	7019      	strb	r1, [r3, #0]
 800da38:	e7c5      	b.n	800d9c6 <_puts_r+0x42>
 800da3a:	4622      	mov	r2, r4
 800da3c:	4628      	mov	r0, r5
 800da3e:	f000 f837 	bl	800dab0 <__swbuf_r>
 800da42:	3001      	adds	r0, #1
 800da44:	d1bf      	bne.n	800d9c6 <_puts_r+0x42>
 800da46:	e7df      	b.n	800da08 <_puts_r+0x84>
 800da48:	6823      	ldr	r3, [r4, #0]
 800da4a:	250a      	movs	r5, #10
 800da4c:	1c5a      	adds	r2, r3, #1
 800da4e:	6022      	str	r2, [r4, #0]
 800da50:	701d      	strb	r5, [r3, #0]
 800da52:	e7db      	b.n	800da0c <_puts_r+0x88>
 800da54:	0801081c 	.word	0x0801081c
 800da58:	0801083c 	.word	0x0801083c
 800da5c:	080107fc 	.word	0x080107fc

0800da60 <puts>:
 800da60:	4b02      	ldr	r3, [pc, #8]	; (800da6c <puts+0xc>)
 800da62:	4601      	mov	r1, r0
 800da64:	6818      	ldr	r0, [r3, #0]
 800da66:	f7ff bf8d 	b.w	800d984 <_puts_r>
 800da6a:	bf00      	nop
 800da6c:	200000fc 	.word	0x200000fc

0800da70 <siprintf>:
 800da70:	b40e      	push	{r1, r2, r3}
 800da72:	b500      	push	{lr}
 800da74:	b09c      	sub	sp, #112	; 0x70
 800da76:	ab1d      	add	r3, sp, #116	; 0x74
 800da78:	9002      	str	r0, [sp, #8]
 800da7a:	9006      	str	r0, [sp, #24]
 800da7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800da80:	4809      	ldr	r0, [pc, #36]	; (800daa8 <siprintf+0x38>)
 800da82:	9107      	str	r1, [sp, #28]
 800da84:	9104      	str	r1, [sp, #16]
 800da86:	4909      	ldr	r1, [pc, #36]	; (800daac <siprintf+0x3c>)
 800da88:	f853 2b04 	ldr.w	r2, [r3], #4
 800da8c:	9105      	str	r1, [sp, #20]
 800da8e:	6800      	ldr	r0, [r0, #0]
 800da90:	9301      	str	r3, [sp, #4]
 800da92:	a902      	add	r1, sp, #8
 800da94:	f000 fc28 	bl	800e2e8 <_svfiprintf_r>
 800da98:	9b02      	ldr	r3, [sp, #8]
 800da9a:	2200      	movs	r2, #0
 800da9c:	701a      	strb	r2, [r3, #0]
 800da9e:	b01c      	add	sp, #112	; 0x70
 800daa0:	f85d eb04 	ldr.w	lr, [sp], #4
 800daa4:	b003      	add	sp, #12
 800daa6:	4770      	bx	lr
 800daa8:	200000fc 	.word	0x200000fc
 800daac:	ffff0208 	.word	0xffff0208

0800dab0 <__swbuf_r>:
 800dab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab2:	460e      	mov	r6, r1
 800dab4:	4614      	mov	r4, r2
 800dab6:	4605      	mov	r5, r0
 800dab8:	b118      	cbz	r0, 800dac2 <__swbuf_r+0x12>
 800daba:	6983      	ldr	r3, [r0, #24]
 800dabc:	b90b      	cbnz	r3, 800dac2 <__swbuf_r+0x12>
 800dabe:	f000 f9d1 	bl	800de64 <__sinit>
 800dac2:	4b21      	ldr	r3, [pc, #132]	; (800db48 <__swbuf_r+0x98>)
 800dac4:	429c      	cmp	r4, r3
 800dac6:	d12b      	bne.n	800db20 <__swbuf_r+0x70>
 800dac8:	686c      	ldr	r4, [r5, #4]
 800daca:	69a3      	ldr	r3, [r4, #24]
 800dacc:	60a3      	str	r3, [r4, #8]
 800dace:	89a3      	ldrh	r3, [r4, #12]
 800dad0:	071a      	lsls	r2, r3, #28
 800dad2:	d52f      	bpl.n	800db34 <__swbuf_r+0x84>
 800dad4:	6923      	ldr	r3, [r4, #16]
 800dad6:	b36b      	cbz	r3, 800db34 <__swbuf_r+0x84>
 800dad8:	6923      	ldr	r3, [r4, #16]
 800dada:	6820      	ldr	r0, [r4, #0]
 800dadc:	1ac0      	subs	r0, r0, r3
 800dade:	6963      	ldr	r3, [r4, #20]
 800dae0:	b2f6      	uxtb	r6, r6
 800dae2:	4283      	cmp	r3, r0
 800dae4:	4637      	mov	r7, r6
 800dae6:	dc04      	bgt.n	800daf2 <__swbuf_r+0x42>
 800dae8:	4621      	mov	r1, r4
 800daea:	4628      	mov	r0, r5
 800daec:	f000 f926 	bl	800dd3c <_fflush_r>
 800daf0:	bb30      	cbnz	r0, 800db40 <__swbuf_r+0x90>
 800daf2:	68a3      	ldr	r3, [r4, #8]
 800daf4:	3b01      	subs	r3, #1
 800daf6:	60a3      	str	r3, [r4, #8]
 800daf8:	6823      	ldr	r3, [r4, #0]
 800dafa:	1c5a      	adds	r2, r3, #1
 800dafc:	6022      	str	r2, [r4, #0]
 800dafe:	701e      	strb	r6, [r3, #0]
 800db00:	6963      	ldr	r3, [r4, #20]
 800db02:	3001      	adds	r0, #1
 800db04:	4283      	cmp	r3, r0
 800db06:	d004      	beq.n	800db12 <__swbuf_r+0x62>
 800db08:	89a3      	ldrh	r3, [r4, #12]
 800db0a:	07db      	lsls	r3, r3, #31
 800db0c:	d506      	bpl.n	800db1c <__swbuf_r+0x6c>
 800db0e:	2e0a      	cmp	r6, #10
 800db10:	d104      	bne.n	800db1c <__swbuf_r+0x6c>
 800db12:	4621      	mov	r1, r4
 800db14:	4628      	mov	r0, r5
 800db16:	f000 f911 	bl	800dd3c <_fflush_r>
 800db1a:	b988      	cbnz	r0, 800db40 <__swbuf_r+0x90>
 800db1c:	4638      	mov	r0, r7
 800db1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db20:	4b0a      	ldr	r3, [pc, #40]	; (800db4c <__swbuf_r+0x9c>)
 800db22:	429c      	cmp	r4, r3
 800db24:	d101      	bne.n	800db2a <__swbuf_r+0x7a>
 800db26:	68ac      	ldr	r4, [r5, #8]
 800db28:	e7cf      	b.n	800daca <__swbuf_r+0x1a>
 800db2a:	4b09      	ldr	r3, [pc, #36]	; (800db50 <__swbuf_r+0xa0>)
 800db2c:	429c      	cmp	r4, r3
 800db2e:	bf08      	it	eq
 800db30:	68ec      	ldreq	r4, [r5, #12]
 800db32:	e7ca      	b.n	800daca <__swbuf_r+0x1a>
 800db34:	4621      	mov	r1, r4
 800db36:	4628      	mov	r0, r5
 800db38:	f000 f80c 	bl	800db54 <__swsetup_r>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	d0cb      	beq.n	800dad8 <__swbuf_r+0x28>
 800db40:	f04f 37ff 	mov.w	r7, #4294967295
 800db44:	e7ea      	b.n	800db1c <__swbuf_r+0x6c>
 800db46:	bf00      	nop
 800db48:	0801081c 	.word	0x0801081c
 800db4c:	0801083c 	.word	0x0801083c
 800db50:	080107fc 	.word	0x080107fc

0800db54 <__swsetup_r>:
 800db54:	4b32      	ldr	r3, [pc, #200]	; (800dc20 <__swsetup_r+0xcc>)
 800db56:	b570      	push	{r4, r5, r6, lr}
 800db58:	681d      	ldr	r5, [r3, #0]
 800db5a:	4606      	mov	r6, r0
 800db5c:	460c      	mov	r4, r1
 800db5e:	b125      	cbz	r5, 800db6a <__swsetup_r+0x16>
 800db60:	69ab      	ldr	r3, [r5, #24]
 800db62:	b913      	cbnz	r3, 800db6a <__swsetup_r+0x16>
 800db64:	4628      	mov	r0, r5
 800db66:	f000 f97d 	bl	800de64 <__sinit>
 800db6a:	4b2e      	ldr	r3, [pc, #184]	; (800dc24 <__swsetup_r+0xd0>)
 800db6c:	429c      	cmp	r4, r3
 800db6e:	d10f      	bne.n	800db90 <__swsetup_r+0x3c>
 800db70:	686c      	ldr	r4, [r5, #4]
 800db72:	89a3      	ldrh	r3, [r4, #12]
 800db74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800db78:	0719      	lsls	r1, r3, #28
 800db7a:	d42c      	bmi.n	800dbd6 <__swsetup_r+0x82>
 800db7c:	06dd      	lsls	r5, r3, #27
 800db7e:	d411      	bmi.n	800dba4 <__swsetup_r+0x50>
 800db80:	2309      	movs	r3, #9
 800db82:	6033      	str	r3, [r6, #0]
 800db84:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800db88:	81a3      	strh	r3, [r4, #12]
 800db8a:	f04f 30ff 	mov.w	r0, #4294967295
 800db8e:	e03e      	b.n	800dc0e <__swsetup_r+0xba>
 800db90:	4b25      	ldr	r3, [pc, #148]	; (800dc28 <__swsetup_r+0xd4>)
 800db92:	429c      	cmp	r4, r3
 800db94:	d101      	bne.n	800db9a <__swsetup_r+0x46>
 800db96:	68ac      	ldr	r4, [r5, #8]
 800db98:	e7eb      	b.n	800db72 <__swsetup_r+0x1e>
 800db9a:	4b24      	ldr	r3, [pc, #144]	; (800dc2c <__swsetup_r+0xd8>)
 800db9c:	429c      	cmp	r4, r3
 800db9e:	bf08      	it	eq
 800dba0:	68ec      	ldreq	r4, [r5, #12]
 800dba2:	e7e6      	b.n	800db72 <__swsetup_r+0x1e>
 800dba4:	0758      	lsls	r0, r3, #29
 800dba6:	d512      	bpl.n	800dbce <__swsetup_r+0x7a>
 800dba8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbaa:	b141      	cbz	r1, 800dbbe <__swsetup_r+0x6a>
 800dbac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbb0:	4299      	cmp	r1, r3
 800dbb2:	d002      	beq.n	800dbba <__swsetup_r+0x66>
 800dbb4:	4630      	mov	r0, r6
 800dbb6:	f000 fa5b 	bl	800e070 <_free_r>
 800dbba:	2300      	movs	r3, #0
 800dbbc:	6363      	str	r3, [r4, #52]	; 0x34
 800dbbe:	89a3      	ldrh	r3, [r4, #12]
 800dbc0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dbc4:	81a3      	strh	r3, [r4, #12]
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	6063      	str	r3, [r4, #4]
 800dbca:	6923      	ldr	r3, [r4, #16]
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	89a3      	ldrh	r3, [r4, #12]
 800dbd0:	f043 0308 	orr.w	r3, r3, #8
 800dbd4:	81a3      	strh	r3, [r4, #12]
 800dbd6:	6923      	ldr	r3, [r4, #16]
 800dbd8:	b94b      	cbnz	r3, 800dbee <__swsetup_r+0x9a>
 800dbda:	89a3      	ldrh	r3, [r4, #12]
 800dbdc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dbe0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dbe4:	d003      	beq.n	800dbee <__swsetup_r+0x9a>
 800dbe6:	4621      	mov	r1, r4
 800dbe8:	4630      	mov	r0, r6
 800dbea:	f000 fa01 	bl	800dff0 <__smakebuf_r>
 800dbee:	89a0      	ldrh	r0, [r4, #12]
 800dbf0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbf4:	f010 0301 	ands.w	r3, r0, #1
 800dbf8:	d00a      	beq.n	800dc10 <__swsetup_r+0xbc>
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	60a3      	str	r3, [r4, #8]
 800dbfe:	6963      	ldr	r3, [r4, #20]
 800dc00:	425b      	negs	r3, r3
 800dc02:	61a3      	str	r3, [r4, #24]
 800dc04:	6923      	ldr	r3, [r4, #16]
 800dc06:	b943      	cbnz	r3, 800dc1a <__swsetup_r+0xc6>
 800dc08:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc0c:	d1ba      	bne.n	800db84 <__swsetup_r+0x30>
 800dc0e:	bd70      	pop	{r4, r5, r6, pc}
 800dc10:	0781      	lsls	r1, r0, #30
 800dc12:	bf58      	it	pl
 800dc14:	6963      	ldrpl	r3, [r4, #20]
 800dc16:	60a3      	str	r3, [r4, #8]
 800dc18:	e7f4      	b.n	800dc04 <__swsetup_r+0xb0>
 800dc1a:	2000      	movs	r0, #0
 800dc1c:	e7f7      	b.n	800dc0e <__swsetup_r+0xba>
 800dc1e:	bf00      	nop
 800dc20:	200000fc 	.word	0x200000fc
 800dc24:	0801081c 	.word	0x0801081c
 800dc28:	0801083c 	.word	0x0801083c
 800dc2c:	080107fc 	.word	0x080107fc

0800dc30 <__sflush_r>:
 800dc30:	898a      	ldrh	r2, [r1, #12]
 800dc32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc36:	4605      	mov	r5, r0
 800dc38:	0710      	lsls	r0, r2, #28
 800dc3a:	460c      	mov	r4, r1
 800dc3c:	d458      	bmi.n	800dcf0 <__sflush_r+0xc0>
 800dc3e:	684b      	ldr	r3, [r1, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	dc05      	bgt.n	800dc50 <__sflush_r+0x20>
 800dc44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	dc02      	bgt.n	800dc50 <__sflush_r+0x20>
 800dc4a:	2000      	movs	r0, #0
 800dc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc52:	2e00      	cmp	r6, #0
 800dc54:	d0f9      	beq.n	800dc4a <__sflush_r+0x1a>
 800dc56:	2300      	movs	r3, #0
 800dc58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc5c:	682f      	ldr	r7, [r5, #0]
 800dc5e:	602b      	str	r3, [r5, #0]
 800dc60:	d032      	beq.n	800dcc8 <__sflush_r+0x98>
 800dc62:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc64:	89a3      	ldrh	r3, [r4, #12]
 800dc66:	075a      	lsls	r2, r3, #29
 800dc68:	d505      	bpl.n	800dc76 <__sflush_r+0x46>
 800dc6a:	6863      	ldr	r3, [r4, #4]
 800dc6c:	1ac0      	subs	r0, r0, r3
 800dc6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc70:	b10b      	cbz	r3, 800dc76 <__sflush_r+0x46>
 800dc72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc74:	1ac0      	subs	r0, r0, r3
 800dc76:	2300      	movs	r3, #0
 800dc78:	4602      	mov	r2, r0
 800dc7a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc7c:	6a21      	ldr	r1, [r4, #32]
 800dc7e:	4628      	mov	r0, r5
 800dc80:	47b0      	blx	r6
 800dc82:	1c43      	adds	r3, r0, #1
 800dc84:	89a3      	ldrh	r3, [r4, #12]
 800dc86:	d106      	bne.n	800dc96 <__sflush_r+0x66>
 800dc88:	6829      	ldr	r1, [r5, #0]
 800dc8a:	291d      	cmp	r1, #29
 800dc8c:	d82c      	bhi.n	800dce8 <__sflush_r+0xb8>
 800dc8e:	4a2a      	ldr	r2, [pc, #168]	; (800dd38 <__sflush_r+0x108>)
 800dc90:	40ca      	lsrs	r2, r1
 800dc92:	07d6      	lsls	r6, r2, #31
 800dc94:	d528      	bpl.n	800dce8 <__sflush_r+0xb8>
 800dc96:	2200      	movs	r2, #0
 800dc98:	6062      	str	r2, [r4, #4]
 800dc9a:	04d9      	lsls	r1, r3, #19
 800dc9c:	6922      	ldr	r2, [r4, #16]
 800dc9e:	6022      	str	r2, [r4, #0]
 800dca0:	d504      	bpl.n	800dcac <__sflush_r+0x7c>
 800dca2:	1c42      	adds	r2, r0, #1
 800dca4:	d101      	bne.n	800dcaa <__sflush_r+0x7a>
 800dca6:	682b      	ldr	r3, [r5, #0]
 800dca8:	b903      	cbnz	r3, 800dcac <__sflush_r+0x7c>
 800dcaa:	6560      	str	r0, [r4, #84]	; 0x54
 800dcac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dcae:	602f      	str	r7, [r5, #0]
 800dcb0:	2900      	cmp	r1, #0
 800dcb2:	d0ca      	beq.n	800dc4a <__sflush_r+0x1a>
 800dcb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcb8:	4299      	cmp	r1, r3
 800dcba:	d002      	beq.n	800dcc2 <__sflush_r+0x92>
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	f000 f9d7 	bl	800e070 <_free_r>
 800dcc2:	2000      	movs	r0, #0
 800dcc4:	6360      	str	r0, [r4, #52]	; 0x34
 800dcc6:	e7c1      	b.n	800dc4c <__sflush_r+0x1c>
 800dcc8:	6a21      	ldr	r1, [r4, #32]
 800dcca:	2301      	movs	r3, #1
 800dccc:	4628      	mov	r0, r5
 800dcce:	47b0      	blx	r6
 800dcd0:	1c41      	adds	r1, r0, #1
 800dcd2:	d1c7      	bne.n	800dc64 <__sflush_r+0x34>
 800dcd4:	682b      	ldr	r3, [r5, #0]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d0c4      	beq.n	800dc64 <__sflush_r+0x34>
 800dcda:	2b1d      	cmp	r3, #29
 800dcdc:	d001      	beq.n	800dce2 <__sflush_r+0xb2>
 800dcde:	2b16      	cmp	r3, #22
 800dce0:	d101      	bne.n	800dce6 <__sflush_r+0xb6>
 800dce2:	602f      	str	r7, [r5, #0]
 800dce4:	e7b1      	b.n	800dc4a <__sflush_r+0x1a>
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcec:	81a3      	strh	r3, [r4, #12]
 800dcee:	e7ad      	b.n	800dc4c <__sflush_r+0x1c>
 800dcf0:	690f      	ldr	r7, [r1, #16]
 800dcf2:	2f00      	cmp	r7, #0
 800dcf4:	d0a9      	beq.n	800dc4a <__sflush_r+0x1a>
 800dcf6:	0793      	lsls	r3, r2, #30
 800dcf8:	680e      	ldr	r6, [r1, #0]
 800dcfa:	bf08      	it	eq
 800dcfc:	694b      	ldreq	r3, [r1, #20]
 800dcfe:	600f      	str	r7, [r1, #0]
 800dd00:	bf18      	it	ne
 800dd02:	2300      	movne	r3, #0
 800dd04:	eba6 0807 	sub.w	r8, r6, r7
 800dd08:	608b      	str	r3, [r1, #8]
 800dd0a:	f1b8 0f00 	cmp.w	r8, #0
 800dd0e:	dd9c      	ble.n	800dc4a <__sflush_r+0x1a>
 800dd10:	6a21      	ldr	r1, [r4, #32]
 800dd12:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd14:	4643      	mov	r3, r8
 800dd16:	463a      	mov	r2, r7
 800dd18:	4628      	mov	r0, r5
 800dd1a:	47b0      	blx	r6
 800dd1c:	2800      	cmp	r0, #0
 800dd1e:	dc06      	bgt.n	800dd2e <__sflush_r+0xfe>
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd26:	81a3      	strh	r3, [r4, #12]
 800dd28:	f04f 30ff 	mov.w	r0, #4294967295
 800dd2c:	e78e      	b.n	800dc4c <__sflush_r+0x1c>
 800dd2e:	4407      	add	r7, r0
 800dd30:	eba8 0800 	sub.w	r8, r8, r0
 800dd34:	e7e9      	b.n	800dd0a <__sflush_r+0xda>
 800dd36:	bf00      	nop
 800dd38:	20400001 	.word	0x20400001

0800dd3c <_fflush_r>:
 800dd3c:	b538      	push	{r3, r4, r5, lr}
 800dd3e:	690b      	ldr	r3, [r1, #16]
 800dd40:	4605      	mov	r5, r0
 800dd42:	460c      	mov	r4, r1
 800dd44:	b913      	cbnz	r3, 800dd4c <_fflush_r+0x10>
 800dd46:	2500      	movs	r5, #0
 800dd48:	4628      	mov	r0, r5
 800dd4a:	bd38      	pop	{r3, r4, r5, pc}
 800dd4c:	b118      	cbz	r0, 800dd56 <_fflush_r+0x1a>
 800dd4e:	6983      	ldr	r3, [r0, #24]
 800dd50:	b90b      	cbnz	r3, 800dd56 <_fflush_r+0x1a>
 800dd52:	f000 f887 	bl	800de64 <__sinit>
 800dd56:	4b14      	ldr	r3, [pc, #80]	; (800dda8 <_fflush_r+0x6c>)
 800dd58:	429c      	cmp	r4, r3
 800dd5a:	d11b      	bne.n	800dd94 <_fflush_r+0x58>
 800dd5c:	686c      	ldr	r4, [r5, #4]
 800dd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d0ef      	beq.n	800dd46 <_fflush_r+0xa>
 800dd66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd68:	07d0      	lsls	r0, r2, #31
 800dd6a:	d404      	bmi.n	800dd76 <_fflush_r+0x3a>
 800dd6c:	0599      	lsls	r1, r3, #22
 800dd6e:	d402      	bmi.n	800dd76 <_fflush_r+0x3a>
 800dd70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd72:	f000 f915 	bl	800dfa0 <__retarget_lock_acquire_recursive>
 800dd76:	4628      	mov	r0, r5
 800dd78:	4621      	mov	r1, r4
 800dd7a:	f7ff ff59 	bl	800dc30 <__sflush_r>
 800dd7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd80:	07da      	lsls	r2, r3, #31
 800dd82:	4605      	mov	r5, r0
 800dd84:	d4e0      	bmi.n	800dd48 <_fflush_r+0xc>
 800dd86:	89a3      	ldrh	r3, [r4, #12]
 800dd88:	059b      	lsls	r3, r3, #22
 800dd8a:	d4dd      	bmi.n	800dd48 <_fflush_r+0xc>
 800dd8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd8e:	f000 f908 	bl	800dfa2 <__retarget_lock_release_recursive>
 800dd92:	e7d9      	b.n	800dd48 <_fflush_r+0xc>
 800dd94:	4b05      	ldr	r3, [pc, #20]	; (800ddac <_fflush_r+0x70>)
 800dd96:	429c      	cmp	r4, r3
 800dd98:	d101      	bne.n	800dd9e <_fflush_r+0x62>
 800dd9a:	68ac      	ldr	r4, [r5, #8]
 800dd9c:	e7df      	b.n	800dd5e <_fflush_r+0x22>
 800dd9e:	4b04      	ldr	r3, [pc, #16]	; (800ddb0 <_fflush_r+0x74>)
 800dda0:	429c      	cmp	r4, r3
 800dda2:	bf08      	it	eq
 800dda4:	68ec      	ldreq	r4, [r5, #12]
 800dda6:	e7da      	b.n	800dd5e <_fflush_r+0x22>
 800dda8:	0801081c 	.word	0x0801081c
 800ddac:	0801083c 	.word	0x0801083c
 800ddb0:	080107fc 	.word	0x080107fc

0800ddb4 <std>:
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	b510      	push	{r4, lr}
 800ddb8:	4604      	mov	r4, r0
 800ddba:	e9c0 3300 	strd	r3, r3, [r0]
 800ddbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ddc2:	6083      	str	r3, [r0, #8]
 800ddc4:	8181      	strh	r1, [r0, #12]
 800ddc6:	6643      	str	r3, [r0, #100]	; 0x64
 800ddc8:	81c2      	strh	r2, [r0, #14]
 800ddca:	6183      	str	r3, [r0, #24]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	2208      	movs	r2, #8
 800ddd0:	305c      	adds	r0, #92	; 0x5c
 800ddd2:	f7ff fdb7 	bl	800d944 <memset>
 800ddd6:	4b05      	ldr	r3, [pc, #20]	; (800ddec <std+0x38>)
 800ddd8:	6263      	str	r3, [r4, #36]	; 0x24
 800ddda:	4b05      	ldr	r3, [pc, #20]	; (800ddf0 <std+0x3c>)
 800dddc:	62a3      	str	r3, [r4, #40]	; 0x28
 800ddde:	4b05      	ldr	r3, [pc, #20]	; (800ddf4 <std+0x40>)
 800dde0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dde2:	4b05      	ldr	r3, [pc, #20]	; (800ddf8 <std+0x44>)
 800dde4:	6224      	str	r4, [r4, #32]
 800dde6:	6323      	str	r3, [r4, #48]	; 0x30
 800dde8:	bd10      	pop	{r4, pc}
 800ddea:	bf00      	nop
 800ddec:	0800eae5 	.word	0x0800eae5
 800ddf0:	0800eb07 	.word	0x0800eb07
 800ddf4:	0800eb3f 	.word	0x0800eb3f
 800ddf8:	0800eb63 	.word	0x0800eb63

0800ddfc <_cleanup_r>:
 800ddfc:	4901      	ldr	r1, [pc, #4]	; (800de04 <_cleanup_r+0x8>)
 800ddfe:	f000 b8af 	b.w	800df60 <_fwalk_reent>
 800de02:	bf00      	nop
 800de04:	0800dd3d 	.word	0x0800dd3d

0800de08 <__sfmoreglue>:
 800de08:	b570      	push	{r4, r5, r6, lr}
 800de0a:	2268      	movs	r2, #104	; 0x68
 800de0c:	1e4d      	subs	r5, r1, #1
 800de0e:	4355      	muls	r5, r2
 800de10:	460e      	mov	r6, r1
 800de12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800de16:	f000 f997 	bl	800e148 <_malloc_r>
 800de1a:	4604      	mov	r4, r0
 800de1c:	b140      	cbz	r0, 800de30 <__sfmoreglue+0x28>
 800de1e:	2100      	movs	r1, #0
 800de20:	e9c0 1600 	strd	r1, r6, [r0]
 800de24:	300c      	adds	r0, #12
 800de26:	60a0      	str	r0, [r4, #8]
 800de28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800de2c:	f7ff fd8a 	bl	800d944 <memset>
 800de30:	4620      	mov	r0, r4
 800de32:	bd70      	pop	{r4, r5, r6, pc}

0800de34 <__sfp_lock_acquire>:
 800de34:	4801      	ldr	r0, [pc, #4]	; (800de3c <__sfp_lock_acquire+0x8>)
 800de36:	f000 b8b3 	b.w	800dfa0 <__retarget_lock_acquire_recursive>
 800de3a:	bf00      	nop
 800de3c:	2000611d 	.word	0x2000611d

0800de40 <__sfp_lock_release>:
 800de40:	4801      	ldr	r0, [pc, #4]	; (800de48 <__sfp_lock_release+0x8>)
 800de42:	f000 b8ae 	b.w	800dfa2 <__retarget_lock_release_recursive>
 800de46:	bf00      	nop
 800de48:	2000611d 	.word	0x2000611d

0800de4c <__sinit_lock_acquire>:
 800de4c:	4801      	ldr	r0, [pc, #4]	; (800de54 <__sinit_lock_acquire+0x8>)
 800de4e:	f000 b8a7 	b.w	800dfa0 <__retarget_lock_acquire_recursive>
 800de52:	bf00      	nop
 800de54:	2000611e 	.word	0x2000611e

0800de58 <__sinit_lock_release>:
 800de58:	4801      	ldr	r0, [pc, #4]	; (800de60 <__sinit_lock_release+0x8>)
 800de5a:	f000 b8a2 	b.w	800dfa2 <__retarget_lock_release_recursive>
 800de5e:	bf00      	nop
 800de60:	2000611e 	.word	0x2000611e

0800de64 <__sinit>:
 800de64:	b510      	push	{r4, lr}
 800de66:	4604      	mov	r4, r0
 800de68:	f7ff fff0 	bl	800de4c <__sinit_lock_acquire>
 800de6c:	69a3      	ldr	r3, [r4, #24]
 800de6e:	b11b      	cbz	r3, 800de78 <__sinit+0x14>
 800de70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800de74:	f7ff bff0 	b.w	800de58 <__sinit_lock_release>
 800de78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800de7c:	6523      	str	r3, [r4, #80]	; 0x50
 800de7e:	4b13      	ldr	r3, [pc, #76]	; (800decc <__sinit+0x68>)
 800de80:	4a13      	ldr	r2, [pc, #76]	; (800ded0 <__sinit+0x6c>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	62a2      	str	r2, [r4, #40]	; 0x28
 800de86:	42a3      	cmp	r3, r4
 800de88:	bf04      	itt	eq
 800de8a:	2301      	moveq	r3, #1
 800de8c:	61a3      	streq	r3, [r4, #24]
 800de8e:	4620      	mov	r0, r4
 800de90:	f000 f820 	bl	800ded4 <__sfp>
 800de94:	6060      	str	r0, [r4, #4]
 800de96:	4620      	mov	r0, r4
 800de98:	f000 f81c 	bl	800ded4 <__sfp>
 800de9c:	60a0      	str	r0, [r4, #8]
 800de9e:	4620      	mov	r0, r4
 800dea0:	f000 f818 	bl	800ded4 <__sfp>
 800dea4:	2200      	movs	r2, #0
 800dea6:	60e0      	str	r0, [r4, #12]
 800dea8:	2104      	movs	r1, #4
 800deaa:	6860      	ldr	r0, [r4, #4]
 800deac:	f7ff ff82 	bl	800ddb4 <std>
 800deb0:	68a0      	ldr	r0, [r4, #8]
 800deb2:	2201      	movs	r2, #1
 800deb4:	2109      	movs	r1, #9
 800deb6:	f7ff ff7d 	bl	800ddb4 <std>
 800deba:	68e0      	ldr	r0, [r4, #12]
 800debc:	2202      	movs	r2, #2
 800debe:	2112      	movs	r1, #18
 800dec0:	f7ff ff78 	bl	800ddb4 <std>
 800dec4:	2301      	movs	r3, #1
 800dec6:	61a3      	str	r3, [r4, #24]
 800dec8:	e7d2      	b.n	800de70 <__sinit+0xc>
 800deca:	bf00      	nop
 800decc:	080107f8 	.word	0x080107f8
 800ded0:	0800ddfd 	.word	0x0800ddfd

0800ded4 <__sfp>:
 800ded4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ded6:	4607      	mov	r7, r0
 800ded8:	f7ff ffac 	bl	800de34 <__sfp_lock_acquire>
 800dedc:	4b1e      	ldr	r3, [pc, #120]	; (800df58 <__sfp+0x84>)
 800dede:	681e      	ldr	r6, [r3, #0]
 800dee0:	69b3      	ldr	r3, [r6, #24]
 800dee2:	b913      	cbnz	r3, 800deea <__sfp+0x16>
 800dee4:	4630      	mov	r0, r6
 800dee6:	f7ff ffbd 	bl	800de64 <__sinit>
 800deea:	3648      	adds	r6, #72	; 0x48
 800deec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800def0:	3b01      	subs	r3, #1
 800def2:	d503      	bpl.n	800defc <__sfp+0x28>
 800def4:	6833      	ldr	r3, [r6, #0]
 800def6:	b30b      	cbz	r3, 800df3c <__sfp+0x68>
 800def8:	6836      	ldr	r6, [r6, #0]
 800defa:	e7f7      	b.n	800deec <__sfp+0x18>
 800defc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800df00:	b9d5      	cbnz	r5, 800df38 <__sfp+0x64>
 800df02:	4b16      	ldr	r3, [pc, #88]	; (800df5c <__sfp+0x88>)
 800df04:	60e3      	str	r3, [r4, #12]
 800df06:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800df0a:	6665      	str	r5, [r4, #100]	; 0x64
 800df0c:	f000 f847 	bl	800df9e <__retarget_lock_init_recursive>
 800df10:	f7ff ff96 	bl	800de40 <__sfp_lock_release>
 800df14:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800df18:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800df1c:	6025      	str	r5, [r4, #0]
 800df1e:	61a5      	str	r5, [r4, #24]
 800df20:	2208      	movs	r2, #8
 800df22:	4629      	mov	r1, r5
 800df24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800df28:	f7ff fd0c 	bl	800d944 <memset>
 800df2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800df30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800df34:	4620      	mov	r0, r4
 800df36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df38:	3468      	adds	r4, #104	; 0x68
 800df3a:	e7d9      	b.n	800def0 <__sfp+0x1c>
 800df3c:	2104      	movs	r1, #4
 800df3e:	4638      	mov	r0, r7
 800df40:	f7ff ff62 	bl	800de08 <__sfmoreglue>
 800df44:	4604      	mov	r4, r0
 800df46:	6030      	str	r0, [r6, #0]
 800df48:	2800      	cmp	r0, #0
 800df4a:	d1d5      	bne.n	800def8 <__sfp+0x24>
 800df4c:	f7ff ff78 	bl	800de40 <__sfp_lock_release>
 800df50:	230c      	movs	r3, #12
 800df52:	603b      	str	r3, [r7, #0]
 800df54:	e7ee      	b.n	800df34 <__sfp+0x60>
 800df56:	bf00      	nop
 800df58:	080107f8 	.word	0x080107f8
 800df5c:	ffff0001 	.word	0xffff0001

0800df60 <_fwalk_reent>:
 800df60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df64:	4606      	mov	r6, r0
 800df66:	4688      	mov	r8, r1
 800df68:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800df6c:	2700      	movs	r7, #0
 800df6e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df72:	f1b9 0901 	subs.w	r9, r9, #1
 800df76:	d505      	bpl.n	800df84 <_fwalk_reent+0x24>
 800df78:	6824      	ldr	r4, [r4, #0]
 800df7a:	2c00      	cmp	r4, #0
 800df7c:	d1f7      	bne.n	800df6e <_fwalk_reent+0xe>
 800df7e:	4638      	mov	r0, r7
 800df80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df84:	89ab      	ldrh	r3, [r5, #12]
 800df86:	2b01      	cmp	r3, #1
 800df88:	d907      	bls.n	800df9a <_fwalk_reent+0x3a>
 800df8a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df8e:	3301      	adds	r3, #1
 800df90:	d003      	beq.n	800df9a <_fwalk_reent+0x3a>
 800df92:	4629      	mov	r1, r5
 800df94:	4630      	mov	r0, r6
 800df96:	47c0      	blx	r8
 800df98:	4307      	orrs	r7, r0
 800df9a:	3568      	adds	r5, #104	; 0x68
 800df9c:	e7e9      	b.n	800df72 <_fwalk_reent+0x12>

0800df9e <__retarget_lock_init_recursive>:
 800df9e:	4770      	bx	lr

0800dfa0 <__retarget_lock_acquire_recursive>:
 800dfa0:	4770      	bx	lr

0800dfa2 <__retarget_lock_release_recursive>:
 800dfa2:	4770      	bx	lr

0800dfa4 <__swhatbuf_r>:
 800dfa4:	b570      	push	{r4, r5, r6, lr}
 800dfa6:	460e      	mov	r6, r1
 800dfa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dfac:	2900      	cmp	r1, #0
 800dfae:	b096      	sub	sp, #88	; 0x58
 800dfb0:	4614      	mov	r4, r2
 800dfb2:	461d      	mov	r5, r3
 800dfb4:	da08      	bge.n	800dfc8 <__swhatbuf_r+0x24>
 800dfb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	602a      	str	r2, [r5, #0]
 800dfbe:	061a      	lsls	r2, r3, #24
 800dfc0:	d410      	bmi.n	800dfe4 <__swhatbuf_r+0x40>
 800dfc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dfc6:	e00e      	b.n	800dfe6 <__swhatbuf_r+0x42>
 800dfc8:	466a      	mov	r2, sp
 800dfca:	f000 fdf1 	bl	800ebb0 <_fstat_r>
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	dbf1      	blt.n	800dfb6 <__swhatbuf_r+0x12>
 800dfd2:	9a01      	ldr	r2, [sp, #4]
 800dfd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dfd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dfdc:	425a      	negs	r2, r3
 800dfde:	415a      	adcs	r2, r3
 800dfe0:	602a      	str	r2, [r5, #0]
 800dfe2:	e7ee      	b.n	800dfc2 <__swhatbuf_r+0x1e>
 800dfe4:	2340      	movs	r3, #64	; 0x40
 800dfe6:	2000      	movs	r0, #0
 800dfe8:	6023      	str	r3, [r4, #0]
 800dfea:	b016      	add	sp, #88	; 0x58
 800dfec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dff0 <__smakebuf_r>:
 800dff0:	898b      	ldrh	r3, [r1, #12]
 800dff2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dff4:	079d      	lsls	r5, r3, #30
 800dff6:	4606      	mov	r6, r0
 800dff8:	460c      	mov	r4, r1
 800dffa:	d507      	bpl.n	800e00c <__smakebuf_r+0x1c>
 800dffc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e000:	6023      	str	r3, [r4, #0]
 800e002:	6123      	str	r3, [r4, #16]
 800e004:	2301      	movs	r3, #1
 800e006:	6163      	str	r3, [r4, #20]
 800e008:	b002      	add	sp, #8
 800e00a:	bd70      	pop	{r4, r5, r6, pc}
 800e00c:	ab01      	add	r3, sp, #4
 800e00e:	466a      	mov	r2, sp
 800e010:	f7ff ffc8 	bl	800dfa4 <__swhatbuf_r>
 800e014:	9900      	ldr	r1, [sp, #0]
 800e016:	4605      	mov	r5, r0
 800e018:	4630      	mov	r0, r6
 800e01a:	f000 f895 	bl	800e148 <_malloc_r>
 800e01e:	b948      	cbnz	r0, 800e034 <__smakebuf_r+0x44>
 800e020:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e024:	059a      	lsls	r2, r3, #22
 800e026:	d4ef      	bmi.n	800e008 <__smakebuf_r+0x18>
 800e028:	f023 0303 	bic.w	r3, r3, #3
 800e02c:	f043 0302 	orr.w	r3, r3, #2
 800e030:	81a3      	strh	r3, [r4, #12]
 800e032:	e7e3      	b.n	800dffc <__smakebuf_r+0xc>
 800e034:	4b0d      	ldr	r3, [pc, #52]	; (800e06c <__smakebuf_r+0x7c>)
 800e036:	62b3      	str	r3, [r6, #40]	; 0x28
 800e038:	89a3      	ldrh	r3, [r4, #12]
 800e03a:	6020      	str	r0, [r4, #0]
 800e03c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e040:	81a3      	strh	r3, [r4, #12]
 800e042:	9b00      	ldr	r3, [sp, #0]
 800e044:	6163      	str	r3, [r4, #20]
 800e046:	9b01      	ldr	r3, [sp, #4]
 800e048:	6120      	str	r0, [r4, #16]
 800e04a:	b15b      	cbz	r3, 800e064 <__smakebuf_r+0x74>
 800e04c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e050:	4630      	mov	r0, r6
 800e052:	f000 fdbf 	bl	800ebd4 <_isatty_r>
 800e056:	b128      	cbz	r0, 800e064 <__smakebuf_r+0x74>
 800e058:	89a3      	ldrh	r3, [r4, #12]
 800e05a:	f023 0303 	bic.w	r3, r3, #3
 800e05e:	f043 0301 	orr.w	r3, r3, #1
 800e062:	81a3      	strh	r3, [r4, #12]
 800e064:	89a0      	ldrh	r0, [r4, #12]
 800e066:	4305      	orrs	r5, r0
 800e068:	81a5      	strh	r5, [r4, #12]
 800e06a:	e7cd      	b.n	800e008 <__smakebuf_r+0x18>
 800e06c:	0800ddfd 	.word	0x0800ddfd

0800e070 <_free_r>:
 800e070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e072:	2900      	cmp	r1, #0
 800e074:	d044      	beq.n	800e100 <_free_r+0x90>
 800e076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e07a:	9001      	str	r0, [sp, #4]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	f1a1 0404 	sub.w	r4, r1, #4
 800e082:	bfb8      	it	lt
 800e084:	18e4      	addlt	r4, r4, r3
 800e086:	f000 fde1 	bl	800ec4c <__malloc_lock>
 800e08a:	4a1e      	ldr	r2, [pc, #120]	; (800e104 <_free_r+0x94>)
 800e08c:	9801      	ldr	r0, [sp, #4]
 800e08e:	6813      	ldr	r3, [r2, #0]
 800e090:	b933      	cbnz	r3, 800e0a0 <_free_r+0x30>
 800e092:	6063      	str	r3, [r4, #4]
 800e094:	6014      	str	r4, [r2, #0]
 800e096:	b003      	add	sp, #12
 800e098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e09c:	f000 bddc 	b.w	800ec58 <__malloc_unlock>
 800e0a0:	42a3      	cmp	r3, r4
 800e0a2:	d908      	bls.n	800e0b6 <_free_r+0x46>
 800e0a4:	6825      	ldr	r5, [r4, #0]
 800e0a6:	1961      	adds	r1, r4, r5
 800e0a8:	428b      	cmp	r3, r1
 800e0aa:	bf01      	itttt	eq
 800e0ac:	6819      	ldreq	r1, [r3, #0]
 800e0ae:	685b      	ldreq	r3, [r3, #4]
 800e0b0:	1949      	addeq	r1, r1, r5
 800e0b2:	6021      	streq	r1, [r4, #0]
 800e0b4:	e7ed      	b.n	800e092 <_free_r+0x22>
 800e0b6:	461a      	mov	r2, r3
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	b10b      	cbz	r3, 800e0c0 <_free_r+0x50>
 800e0bc:	42a3      	cmp	r3, r4
 800e0be:	d9fa      	bls.n	800e0b6 <_free_r+0x46>
 800e0c0:	6811      	ldr	r1, [r2, #0]
 800e0c2:	1855      	adds	r5, r2, r1
 800e0c4:	42a5      	cmp	r5, r4
 800e0c6:	d10b      	bne.n	800e0e0 <_free_r+0x70>
 800e0c8:	6824      	ldr	r4, [r4, #0]
 800e0ca:	4421      	add	r1, r4
 800e0cc:	1854      	adds	r4, r2, r1
 800e0ce:	42a3      	cmp	r3, r4
 800e0d0:	6011      	str	r1, [r2, #0]
 800e0d2:	d1e0      	bne.n	800e096 <_free_r+0x26>
 800e0d4:	681c      	ldr	r4, [r3, #0]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	6053      	str	r3, [r2, #4]
 800e0da:	4421      	add	r1, r4
 800e0dc:	6011      	str	r1, [r2, #0]
 800e0de:	e7da      	b.n	800e096 <_free_r+0x26>
 800e0e0:	d902      	bls.n	800e0e8 <_free_r+0x78>
 800e0e2:	230c      	movs	r3, #12
 800e0e4:	6003      	str	r3, [r0, #0]
 800e0e6:	e7d6      	b.n	800e096 <_free_r+0x26>
 800e0e8:	6825      	ldr	r5, [r4, #0]
 800e0ea:	1961      	adds	r1, r4, r5
 800e0ec:	428b      	cmp	r3, r1
 800e0ee:	bf04      	itt	eq
 800e0f0:	6819      	ldreq	r1, [r3, #0]
 800e0f2:	685b      	ldreq	r3, [r3, #4]
 800e0f4:	6063      	str	r3, [r4, #4]
 800e0f6:	bf04      	itt	eq
 800e0f8:	1949      	addeq	r1, r1, r5
 800e0fa:	6021      	streq	r1, [r4, #0]
 800e0fc:	6054      	str	r4, [r2, #4]
 800e0fe:	e7ca      	b.n	800e096 <_free_r+0x26>
 800e100:	b003      	add	sp, #12
 800e102:	bd30      	pop	{r4, r5, pc}
 800e104:	20006120 	.word	0x20006120

0800e108 <sbrk_aligned>:
 800e108:	b570      	push	{r4, r5, r6, lr}
 800e10a:	4e0e      	ldr	r6, [pc, #56]	; (800e144 <sbrk_aligned+0x3c>)
 800e10c:	460c      	mov	r4, r1
 800e10e:	6831      	ldr	r1, [r6, #0]
 800e110:	4605      	mov	r5, r0
 800e112:	b911      	cbnz	r1, 800e11a <sbrk_aligned+0x12>
 800e114:	f000 fcd6 	bl	800eac4 <_sbrk_r>
 800e118:	6030      	str	r0, [r6, #0]
 800e11a:	4621      	mov	r1, r4
 800e11c:	4628      	mov	r0, r5
 800e11e:	f000 fcd1 	bl	800eac4 <_sbrk_r>
 800e122:	1c43      	adds	r3, r0, #1
 800e124:	d00a      	beq.n	800e13c <sbrk_aligned+0x34>
 800e126:	1cc4      	adds	r4, r0, #3
 800e128:	f024 0403 	bic.w	r4, r4, #3
 800e12c:	42a0      	cmp	r0, r4
 800e12e:	d007      	beq.n	800e140 <sbrk_aligned+0x38>
 800e130:	1a21      	subs	r1, r4, r0
 800e132:	4628      	mov	r0, r5
 800e134:	f000 fcc6 	bl	800eac4 <_sbrk_r>
 800e138:	3001      	adds	r0, #1
 800e13a:	d101      	bne.n	800e140 <sbrk_aligned+0x38>
 800e13c:	f04f 34ff 	mov.w	r4, #4294967295
 800e140:	4620      	mov	r0, r4
 800e142:	bd70      	pop	{r4, r5, r6, pc}
 800e144:	20006124 	.word	0x20006124

0800e148 <_malloc_r>:
 800e148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e14c:	1ccd      	adds	r5, r1, #3
 800e14e:	f025 0503 	bic.w	r5, r5, #3
 800e152:	3508      	adds	r5, #8
 800e154:	2d0c      	cmp	r5, #12
 800e156:	bf38      	it	cc
 800e158:	250c      	movcc	r5, #12
 800e15a:	2d00      	cmp	r5, #0
 800e15c:	4607      	mov	r7, r0
 800e15e:	db01      	blt.n	800e164 <_malloc_r+0x1c>
 800e160:	42a9      	cmp	r1, r5
 800e162:	d905      	bls.n	800e170 <_malloc_r+0x28>
 800e164:	230c      	movs	r3, #12
 800e166:	603b      	str	r3, [r7, #0]
 800e168:	2600      	movs	r6, #0
 800e16a:	4630      	mov	r0, r6
 800e16c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e170:	4e2e      	ldr	r6, [pc, #184]	; (800e22c <_malloc_r+0xe4>)
 800e172:	f000 fd6b 	bl	800ec4c <__malloc_lock>
 800e176:	6833      	ldr	r3, [r6, #0]
 800e178:	461c      	mov	r4, r3
 800e17a:	bb34      	cbnz	r4, 800e1ca <_malloc_r+0x82>
 800e17c:	4629      	mov	r1, r5
 800e17e:	4638      	mov	r0, r7
 800e180:	f7ff ffc2 	bl	800e108 <sbrk_aligned>
 800e184:	1c43      	adds	r3, r0, #1
 800e186:	4604      	mov	r4, r0
 800e188:	d14d      	bne.n	800e226 <_malloc_r+0xde>
 800e18a:	6834      	ldr	r4, [r6, #0]
 800e18c:	4626      	mov	r6, r4
 800e18e:	2e00      	cmp	r6, #0
 800e190:	d140      	bne.n	800e214 <_malloc_r+0xcc>
 800e192:	6823      	ldr	r3, [r4, #0]
 800e194:	4631      	mov	r1, r6
 800e196:	4638      	mov	r0, r7
 800e198:	eb04 0803 	add.w	r8, r4, r3
 800e19c:	f000 fc92 	bl	800eac4 <_sbrk_r>
 800e1a0:	4580      	cmp	r8, r0
 800e1a2:	d13a      	bne.n	800e21a <_malloc_r+0xd2>
 800e1a4:	6821      	ldr	r1, [r4, #0]
 800e1a6:	3503      	adds	r5, #3
 800e1a8:	1a6d      	subs	r5, r5, r1
 800e1aa:	f025 0503 	bic.w	r5, r5, #3
 800e1ae:	3508      	adds	r5, #8
 800e1b0:	2d0c      	cmp	r5, #12
 800e1b2:	bf38      	it	cc
 800e1b4:	250c      	movcc	r5, #12
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	4638      	mov	r0, r7
 800e1ba:	f7ff ffa5 	bl	800e108 <sbrk_aligned>
 800e1be:	3001      	adds	r0, #1
 800e1c0:	d02b      	beq.n	800e21a <_malloc_r+0xd2>
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	442b      	add	r3, r5
 800e1c6:	6023      	str	r3, [r4, #0]
 800e1c8:	e00e      	b.n	800e1e8 <_malloc_r+0xa0>
 800e1ca:	6822      	ldr	r2, [r4, #0]
 800e1cc:	1b52      	subs	r2, r2, r5
 800e1ce:	d41e      	bmi.n	800e20e <_malloc_r+0xc6>
 800e1d0:	2a0b      	cmp	r2, #11
 800e1d2:	d916      	bls.n	800e202 <_malloc_r+0xba>
 800e1d4:	1961      	adds	r1, r4, r5
 800e1d6:	42a3      	cmp	r3, r4
 800e1d8:	6025      	str	r5, [r4, #0]
 800e1da:	bf18      	it	ne
 800e1dc:	6059      	strne	r1, [r3, #4]
 800e1de:	6863      	ldr	r3, [r4, #4]
 800e1e0:	bf08      	it	eq
 800e1e2:	6031      	streq	r1, [r6, #0]
 800e1e4:	5162      	str	r2, [r4, r5]
 800e1e6:	604b      	str	r3, [r1, #4]
 800e1e8:	4638      	mov	r0, r7
 800e1ea:	f104 060b 	add.w	r6, r4, #11
 800e1ee:	f000 fd33 	bl	800ec58 <__malloc_unlock>
 800e1f2:	f026 0607 	bic.w	r6, r6, #7
 800e1f6:	1d23      	adds	r3, r4, #4
 800e1f8:	1af2      	subs	r2, r6, r3
 800e1fa:	d0b6      	beq.n	800e16a <_malloc_r+0x22>
 800e1fc:	1b9b      	subs	r3, r3, r6
 800e1fe:	50a3      	str	r3, [r4, r2]
 800e200:	e7b3      	b.n	800e16a <_malloc_r+0x22>
 800e202:	6862      	ldr	r2, [r4, #4]
 800e204:	42a3      	cmp	r3, r4
 800e206:	bf0c      	ite	eq
 800e208:	6032      	streq	r2, [r6, #0]
 800e20a:	605a      	strne	r2, [r3, #4]
 800e20c:	e7ec      	b.n	800e1e8 <_malloc_r+0xa0>
 800e20e:	4623      	mov	r3, r4
 800e210:	6864      	ldr	r4, [r4, #4]
 800e212:	e7b2      	b.n	800e17a <_malloc_r+0x32>
 800e214:	4634      	mov	r4, r6
 800e216:	6876      	ldr	r6, [r6, #4]
 800e218:	e7b9      	b.n	800e18e <_malloc_r+0x46>
 800e21a:	230c      	movs	r3, #12
 800e21c:	603b      	str	r3, [r7, #0]
 800e21e:	4638      	mov	r0, r7
 800e220:	f000 fd1a 	bl	800ec58 <__malloc_unlock>
 800e224:	e7a1      	b.n	800e16a <_malloc_r+0x22>
 800e226:	6025      	str	r5, [r4, #0]
 800e228:	e7de      	b.n	800e1e8 <_malloc_r+0xa0>
 800e22a:	bf00      	nop
 800e22c:	20006120 	.word	0x20006120

0800e230 <__ssputs_r>:
 800e230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e234:	688e      	ldr	r6, [r1, #8]
 800e236:	429e      	cmp	r6, r3
 800e238:	4682      	mov	sl, r0
 800e23a:	460c      	mov	r4, r1
 800e23c:	4690      	mov	r8, r2
 800e23e:	461f      	mov	r7, r3
 800e240:	d838      	bhi.n	800e2b4 <__ssputs_r+0x84>
 800e242:	898a      	ldrh	r2, [r1, #12]
 800e244:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e248:	d032      	beq.n	800e2b0 <__ssputs_r+0x80>
 800e24a:	6825      	ldr	r5, [r4, #0]
 800e24c:	6909      	ldr	r1, [r1, #16]
 800e24e:	eba5 0901 	sub.w	r9, r5, r1
 800e252:	6965      	ldr	r5, [r4, #20]
 800e254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e258:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e25c:	3301      	adds	r3, #1
 800e25e:	444b      	add	r3, r9
 800e260:	106d      	asrs	r5, r5, #1
 800e262:	429d      	cmp	r5, r3
 800e264:	bf38      	it	cc
 800e266:	461d      	movcc	r5, r3
 800e268:	0553      	lsls	r3, r2, #21
 800e26a:	d531      	bpl.n	800e2d0 <__ssputs_r+0xa0>
 800e26c:	4629      	mov	r1, r5
 800e26e:	f7ff ff6b 	bl	800e148 <_malloc_r>
 800e272:	4606      	mov	r6, r0
 800e274:	b950      	cbnz	r0, 800e28c <__ssputs_r+0x5c>
 800e276:	230c      	movs	r3, #12
 800e278:	f8ca 3000 	str.w	r3, [sl]
 800e27c:	89a3      	ldrh	r3, [r4, #12]
 800e27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e282:	81a3      	strh	r3, [r4, #12]
 800e284:	f04f 30ff 	mov.w	r0, #4294967295
 800e288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e28c:	6921      	ldr	r1, [r4, #16]
 800e28e:	464a      	mov	r2, r9
 800e290:	f7ff fb4a 	bl	800d928 <memcpy>
 800e294:	89a3      	ldrh	r3, [r4, #12]
 800e296:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e29a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e29e:	81a3      	strh	r3, [r4, #12]
 800e2a0:	6126      	str	r6, [r4, #16]
 800e2a2:	6165      	str	r5, [r4, #20]
 800e2a4:	444e      	add	r6, r9
 800e2a6:	eba5 0509 	sub.w	r5, r5, r9
 800e2aa:	6026      	str	r6, [r4, #0]
 800e2ac:	60a5      	str	r5, [r4, #8]
 800e2ae:	463e      	mov	r6, r7
 800e2b0:	42be      	cmp	r6, r7
 800e2b2:	d900      	bls.n	800e2b6 <__ssputs_r+0x86>
 800e2b4:	463e      	mov	r6, r7
 800e2b6:	6820      	ldr	r0, [r4, #0]
 800e2b8:	4632      	mov	r2, r6
 800e2ba:	4641      	mov	r1, r8
 800e2bc:	f000 fcac 	bl	800ec18 <memmove>
 800e2c0:	68a3      	ldr	r3, [r4, #8]
 800e2c2:	1b9b      	subs	r3, r3, r6
 800e2c4:	60a3      	str	r3, [r4, #8]
 800e2c6:	6823      	ldr	r3, [r4, #0]
 800e2c8:	4433      	add	r3, r6
 800e2ca:	6023      	str	r3, [r4, #0]
 800e2cc:	2000      	movs	r0, #0
 800e2ce:	e7db      	b.n	800e288 <__ssputs_r+0x58>
 800e2d0:	462a      	mov	r2, r5
 800e2d2:	f000 fcc7 	bl	800ec64 <_realloc_r>
 800e2d6:	4606      	mov	r6, r0
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d1e1      	bne.n	800e2a0 <__ssputs_r+0x70>
 800e2dc:	6921      	ldr	r1, [r4, #16]
 800e2de:	4650      	mov	r0, sl
 800e2e0:	f7ff fec6 	bl	800e070 <_free_r>
 800e2e4:	e7c7      	b.n	800e276 <__ssputs_r+0x46>
	...

0800e2e8 <_svfiprintf_r>:
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	4698      	mov	r8, r3
 800e2ee:	898b      	ldrh	r3, [r1, #12]
 800e2f0:	061b      	lsls	r3, r3, #24
 800e2f2:	b09d      	sub	sp, #116	; 0x74
 800e2f4:	4607      	mov	r7, r0
 800e2f6:	460d      	mov	r5, r1
 800e2f8:	4614      	mov	r4, r2
 800e2fa:	d50e      	bpl.n	800e31a <_svfiprintf_r+0x32>
 800e2fc:	690b      	ldr	r3, [r1, #16]
 800e2fe:	b963      	cbnz	r3, 800e31a <_svfiprintf_r+0x32>
 800e300:	2140      	movs	r1, #64	; 0x40
 800e302:	f7ff ff21 	bl	800e148 <_malloc_r>
 800e306:	6028      	str	r0, [r5, #0]
 800e308:	6128      	str	r0, [r5, #16]
 800e30a:	b920      	cbnz	r0, 800e316 <_svfiprintf_r+0x2e>
 800e30c:	230c      	movs	r3, #12
 800e30e:	603b      	str	r3, [r7, #0]
 800e310:	f04f 30ff 	mov.w	r0, #4294967295
 800e314:	e0d1      	b.n	800e4ba <_svfiprintf_r+0x1d2>
 800e316:	2340      	movs	r3, #64	; 0x40
 800e318:	616b      	str	r3, [r5, #20]
 800e31a:	2300      	movs	r3, #0
 800e31c:	9309      	str	r3, [sp, #36]	; 0x24
 800e31e:	2320      	movs	r3, #32
 800e320:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e324:	f8cd 800c 	str.w	r8, [sp, #12]
 800e328:	2330      	movs	r3, #48	; 0x30
 800e32a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e4d4 <_svfiprintf_r+0x1ec>
 800e32e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e332:	f04f 0901 	mov.w	r9, #1
 800e336:	4623      	mov	r3, r4
 800e338:	469a      	mov	sl, r3
 800e33a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e33e:	b10a      	cbz	r2, 800e344 <_svfiprintf_r+0x5c>
 800e340:	2a25      	cmp	r2, #37	; 0x25
 800e342:	d1f9      	bne.n	800e338 <_svfiprintf_r+0x50>
 800e344:	ebba 0b04 	subs.w	fp, sl, r4
 800e348:	d00b      	beq.n	800e362 <_svfiprintf_r+0x7a>
 800e34a:	465b      	mov	r3, fp
 800e34c:	4622      	mov	r2, r4
 800e34e:	4629      	mov	r1, r5
 800e350:	4638      	mov	r0, r7
 800e352:	f7ff ff6d 	bl	800e230 <__ssputs_r>
 800e356:	3001      	adds	r0, #1
 800e358:	f000 80aa 	beq.w	800e4b0 <_svfiprintf_r+0x1c8>
 800e35c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e35e:	445a      	add	r2, fp
 800e360:	9209      	str	r2, [sp, #36]	; 0x24
 800e362:	f89a 3000 	ldrb.w	r3, [sl]
 800e366:	2b00      	cmp	r3, #0
 800e368:	f000 80a2 	beq.w	800e4b0 <_svfiprintf_r+0x1c8>
 800e36c:	2300      	movs	r3, #0
 800e36e:	f04f 32ff 	mov.w	r2, #4294967295
 800e372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e376:	f10a 0a01 	add.w	sl, sl, #1
 800e37a:	9304      	str	r3, [sp, #16]
 800e37c:	9307      	str	r3, [sp, #28]
 800e37e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e382:	931a      	str	r3, [sp, #104]	; 0x68
 800e384:	4654      	mov	r4, sl
 800e386:	2205      	movs	r2, #5
 800e388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e38c:	4851      	ldr	r0, [pc, #324]	; (800e4d4 <_svfiprintf_r+0x1ec>)
 800e38e:	f7f1 ff1f 	bl	80001d0 <memchr>
 800e392:	9a04      	ldr	r2, [sp, #16]
 800e394:	b9d8      	cbnz	r0, 800e3ce <_svfiprintf_r+0xe6>
 800e396:	06d0      	lsls	r0, r2, #27
 800e398:	bf44      	itt	mi
 800e39a:	2320      	movmi	r3, #32
 800e39c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3a0:	0711      	lsls	r1, r2, #28
 800e3a2:	bf44      	itt	mi
 800e3a4:	232b      	movmi	r3, #43	; 0x2b
 800e3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e3aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e3ae:	2b2a      	cmp	r3, #42	; 0x2a
 800e3b0:	d015      	beq.n	800e3de <_svfiprintf_r+0xf6>
 800e3b2:	9a07      	ldr	r2, [sp, #28]
 800e3b4:	4654      	mov	r4, sl
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	f04f 0c0a 	mov.w	ip, #10
 800e3bc:	4621      	mov	r1, r4
 800e3be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3c2:	3b30      	subs	r3, #48	; 0x30
 800e3c4:	2b09      	cmp	r3, #9
 800e3c6:	d94e      	bls.n	800e466 <_svfiprintf_r+0x17e>
 800e3c8:	b1b0      	cbz	r0, 800e3f8 <_svfiprintf_r+0x110>
 800e3ca:	9207      	str	r2, [sp, #28]
 800e3cc:	e014      	b.n	800e3f8 <_svfiprintf_r+0x110>
 800e3ce:	eba0 0308 	sub.w	r3, r0, r8
 800e3d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e3d6:	4313      	orrs	r3, r2
 800e3d8:	9304      	str	r3, [sp, #16]
 800e3da:	46a2      	mov	sl, r4
 800e3dc:	e7d2      	b.n	800e384 <_svfiprintf_r+0x9c>
 800e3de:	9b03      	ldr	r3, [sp, #12]
 800e3e0:	1d19      	adds	r1, r3, #4
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	9103      	str	r1, [sp, #12]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	bfbb      	ittet	lt
 800e3ea:	425b      	neglt	r3, r3
 800e3ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e3f0:	9307      	strge	r3, [sp, #28]
 800e3f2:	9307      	strlt	r3, [sp, #28]
 800e3f4:	bfb8      	it	lt
 800e3f6:	9204      	strlt	r2, [sp, #16]
 800e3f8:	7823      	ldrb	r3, [r4, #0]
 800e3fa:	2b2e      	cmp	r3, #46	; 0x2e
 800e3fc:	d10c      	bne.n	800e418 <_svfiprintf_r+0x130>
 800e3fe:	7863      	ldrb	r3, [r4, #1]
 800e400:	2b2a      	cmp	r3, #42	; 0x2a
 800e402:	d135      	bne.n	800e470 <_svfiprintf_r+0x188>
 800e404:	9b03      	ldr	r3, [sp, #12]
 800e406:	1d1a      	adds	r2, r3, #4
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	9203      	str	r2, [sp, #12]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	bfb8      	it	lt
 800e410:	f04f 33ff 	movlt.w	r3, #4294967295
 800e414:	3402      	adds	r4, #2
 800e416:	9305      	str	r3, [sp, #20]
 800e418:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e4e4 <_svfiprintf_r+0x1fc>
 800e41c:	7821      	ldrb	r1, [r4, #0]
 800e41e:	2203      	movs	r2, #3
 800e420:	4650      	mov	r0, sl
 800e422:	f7f1 fed5 	bl	80001d0 <memchr>
 800e426:	b140      	cbz	r0, 800e43a <_svfiprintf_r+0x152>
 800e428:	2340      	movs	r3, #64	; 0x40
 800e42a:	eba0 000a 	sub.w	r0, r0, sl
 800e42e:	fa03 f000 	lsl.w	r0, r3, r0
 800e432:	9b04      	ldr	r3, [sp, #16]
 800e434:	4303      	orrs	r3, r0
 800e436:	3401      	adds	r4, #1
 800e438:	9304      	str	r3, [sp, #16]
 800e43a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e43e:	4826      	ldr	r0, [pc, #152]	; (800e4d8 <_svfiprintf_r+0x1f0>)
 800e440:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e444:	2206      	movs	r2, #6
 800e446:	f7f1 fec3 	bl	80001d0 <memchr>
 800e44a:	2800      	cmp	r0, #0
 800e44c:	d038      	beq.n	800e4c0 <_svfiprintf_r+0x1d8>
 800e44e:	4b23      	ldr	r3, [pc, #140]	; (800e4dc <_svfiprintf_r+0x1f4>)
 800e450:	bb1b      	cbnz	r3, 800e49a <_svfiprintf_r+0x1b2>
 800e452:	9b03      	ldr	r3, [sp, #12]
 800e454:	3307      	adds	r3, #7
 800e456:	f023 0307 	bic.w	r3, r3, #7
 800e45a:	3308      	adds	r3, #8
 800e45c:	9303      	str	r3, [sp, #12]
 800e45e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e460:	4433      	add	r3, r6
 800e462:	9309      	str	r3, [sp, #36]	; 0x24
 800e464:	e767      	b.n	800e336 <_svfiprintf_r+0x4e>
 800e466:	fb0c 3202 	mla	r2, ip, r2, r3
 800e46a:	460c      	mov	r4, r1
 800e46c:	2001      	movs	r0, #1
 800e46e:	e7a5      	b.n	800e3bc <_svfiprintf_r+0xd4>
 800e470:	2300      	movs	r3, #0
 800e472:	3401      	adds	r4, #1
 800e474:	9305      	str	r3, [sp, #20]
 800e476:	4619      	mov	r1, r3
 800e478:	f04f 0c0a 	mov.w	ip, #10
 800e47c:	4620      	mov	r0, r4
 800e47e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e482:	3a30      	subs	r2, #48	; 0x30
 800e484:	2a09      	cmp	r2, #9
 800e486:	d903      	bls.n	800e490 <_svfiprintf_r+0x1a8>
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d0c5      	beq.n	800e418 <_svfiprintf_r+0x130>
 800e48c:	9105      	str	r1, [sp, #20]
 800e48e:	e7c3      	b.n	800e418 <_svfiprintf_r+0x130>
 800e490:	fb0c 2101 	mla	r1, ip, r1, r2
 800e494:	4604      	mov	r4, r0
 800e496:	2301      	movs	r3, #1
 800e498:	e7f0      	b.n	800e47c <_svfiprintf_r+0x194>
 800e49a:	ab03      	add	r3, sp, #12
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	462a      	mov	r2, r5
 800e4a0:	4b0f      	ldr	r3, [pc, #60]	; (800e4e0 <_svfiprintf_r+0x1f8>)
 800e4a2:	a904      	add	r1, sp, #16
 800e4a4:	4638      	mov	r0, r7
 800e4a6:	f3af 8000 	nop.w
 800e4aa:	1c42      	adds	r2, r0, #1
 800e4ac:	4606      	mov	r6, r0
 800e4ae:	d1d6      	bne.n	800e45e <_svfiprintf_r+0x176>
 800e4b0:	89ab      	ldrh	r3, [r5, #12]
 800e4b2:	065b      	lsls	r3, r3, #25
 800e4b4:	f53f af2c 	bmi.w	800e310 <_svfiprintf_r+0x28>
 800e4b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4ba:	b01d      	add	sp, #116	; 0x74
 800e4bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c0:	ab03      	add	r3, sp, #12
 800e4c2:	9300      	str	r3, [sp, #0]
 800e4c4:	462a      	mov	r2, r5
 800e4c6:	4b06      	ldr	r3, [pc, #24]	; (800e4e0 <_svfiprintf_r+0x1f8>)
 800e4c8:	a904      	add	r1, sp, #16
 800e4ca:	4638      	mov	r0, r7
 800e4cc:	f000 f9d4 	bl	800e878 <_printf_i>
 800e4d0:	e7eb      	b.n	800e4aa <_svfiprintf_r+0x1c2>
 800e4d2:	bf00      	nop
 800e4d4:	0801085c 	.word	0x0801085c
 800e4d8:	08010866 	.word	0x08010866
 800e4dc:	00000000 	.word	0x00000000
 800e4e0:	0800e231 	.word	0x0800e231
 800e4e4:	08010862 	.word	0x08010862

0800e4e8 <__sfputc_r>:
 800e4e8:	6893      	ldr	r3, [r2, #8]
 800e4ea:	3b01      	subs	r3, #1
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	b410      	push	{r4}
 800e4f0:	6093      	str	r3, [r2, #8]
 800e4f2:	da08      	bge.n	800e506 <__sfputc_r+0x1e>
 800e4f4:	6994      	ldr	r4, [r2, #24]
 800e4f6:	42a3      	cmp	r3, r4
 800e4f8:	db01      	blt.n	800e4fe <__sfputc_r+0x16>
 800e4fa:	290a      	cmp	r1, #10
 800e4fc:	d103      	bne.n	800e506 <__sfputc_r+0x1e>
 800e4fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e502:	f7ff bad5 	b.w	800dab0 <__swbuf_r>
 800e506:	6813      	ldr	r3, [r2, #0]
 800e508:	1c58      	adds	r0, r3, #1
 800e50a:	6010      	str	r0, [r2, #0]
 800e50c:	7019      	strb	r1, [r3, #0]
 800e50e:	4608      	mov	r0, r1
 800e510:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e514:	4770      	bx	lr

0800e516 <__sfputs_r>:
 800e516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e518:	4606      	mov	r6, r0
 800e51a:	460f      	mov	r7, r1
 800e51c:	4614      	mov	r4, r2
 800e51e:	18d5      	adds	r5, r2, r3
 800e520:	42ac      	cmp	r4, r5
 800e522:	d101      	bne.n	800e528 <__sfputs_r+0x12>
 800e524:	2000      	movs	r0, #0
 800e526:	e007      	b.n	800e538 <__sfputs_r+0x22>
 800e528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e52c:	463a      	mov	r2, r7
 800e52e:	4630      	mov	r0, r6
 800e530:	f7ff ffda 	bl	800e4e8 <__sfputc_r>
 800e534:	1c43      	adds	r3, r0, #1
 800e536:	d1f3      	bne.n	800e520 <__sfputs_r+0xa>
 800e538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e53c <_vfiprintf_r>:
 800e53c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e540:	460d      	mov	r5, r1
 800e542:	b09d      	sub	sp, #116	; 0x74
 800e544:	4614      	mov	r4, r2
 800e546:	4698      	mov	r8, r3
 800e548:	4606      	mov	r6, r0
 800e54a:	b118      	cbz	r0, 800e554 <_vfiprintf_r+0x18>
 800e54c:	6983      	ldr	r3, [r0, #24]
 800e54e:	b90b      	cbnz	r3, 800e554 <_vfiprintf_r+0x18>
 800e550:	f7ff fc88 	bl	800de64 <__sinit>
 800e554:	4b89      	ldr	r3, [pc, #548]	; (800e77c <_vfiprintf_r+0x240>)
 800e556:	429d      	cmp	r5, r3
 800e558:	d11b      	bne.n	800e592 <_vfiprintf_r+0x56>
 800e55a:	6875      	ldr	r5, [r6, #4]
 800e55c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e55e:	07d9      	lsls	r1, r3, #31
 800e560:	d405      	bmi.n	800e56e <_vfiprintf_r+0x32>
 800e562:	89ab      	ldrh	r3, [r5, #12]
 800e564:	059a      	lsls	r2, r3, #22
 800e566:	d402      	bmi.n	800e56e <_vfiprintf_r+0x32>
 800e568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e56a:	f7ff fd19 	bl	800dfa0 <__retarget_lock_acquire_recursive>
 800e56e:	89ab      	ldrh	r3, [r5, #12]
 800e570:	071b      	lsls	r3, r3, #28
 800e572:	d501      	bpl.n	800e578 <_vfiprintf_r+0x3c>
 800e574:	692b      	ldr	r3, [r5, #16]
 800e576:	b9eb      	cbnz	r3, 800e5b4 <_vfiprintf_r+0x78>
 800e578:	4629      	mov	r1, r5
 800e57a:	4630      	mov	r0, r6
 800e57c:	f7ff faea 	bl	800db54 <__swsetup_r>
 800e580:	b1c0      	cbz	r0, 800e5b4 <_vfiprintf_r+0x78>
 800e582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e584:	07dc      	lsls	r4, r3, #31
 800e586:	d50e      	bpl.n	800e5a6 <_vfiprintf_r+0x6a>
 800e588:	f04f 30ff 	mov.w	r0, #4294967295
 800e58c:	b01d      	add	sp, #116	; 0x74
 800e58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e592:	4b7b      	ldr	r3, [pc, #492]	; (800e780 <_vfiprintf_r+0x244>)
 800e594:	429d      	cmp	r5, r3
 800e596:	d101      	bne.n	800e59c <_vfiprintf_r+0x60>
 800e598:	68b5      	ldr	r5, [r6, #8]
 800e59a:	e7df      	b.n	800e55c <_vfiprintf_r+0x20>
 800e59c:	4b79      	ldr	r3, [pc, #484]	; (800e784 <_vfiprintf_r+0x248>)
 800e59e:	429d      	cmp	r5, r3
 800e5a0:	bf08      	it	eq
 800e5a2:	68f5      	ldreq	r5, [r6, #12]
 800e5a4:	e7da      	b.n	800e55c <_vfiprintf_r+0x20>
 800e5a6:	89ab      	ldrh	r3, [r5, #12]
 800e5a8:	0598      	lsls	r0, r3, #22
 800e5aa:	d4ed      	bmi.n	800e588 <_vfiprintf_r+0x4c>
 800e5ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e5ae:	f7ff fcf8 	bl	800dfa2 <__retarget_lock_release_recursive>
 800e5b2:	e7e9      	b.n	800e588 <_vfiprintf_r+0x4c>
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	9309      	str	r3, [sp, #36]	; 0x24
 800e5b8:	2320      	movs	r3, #32
 800e5ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5be:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5c2:	2330      	movs	r3, #48	; 0x30
 800e5c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e788 <_vfiprintf_r+0x24c>
 800e5c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5cc:	f04f 0901 	mov.w	r9, #1
 800e5d0:	4623      	mov	r3, r4
 800e5d2:	469a      	mov	sl, r3
 800e5d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5d8:	b10a      	cbz	r2, 800e5de <_vfiprintf_r+0xa2>
 800e5da:	2a25      	cmp	r2, #37	; 0x25
 800e5dc:	d1f9      	bne.n	800e5d2 <_vfiprintf_r+0x96>
 800e5de:	ebba 0b04 	subs.w	fp, sl, r4
 800e5e2:	d00b      	beq.n	800e5fc <_vfiprintf_r+0xc0>
 800e5e4:	465b      	mov	r3, fp
 800e5e6:	4622      	mov	r2, r4
 800e5e8:	4629      	mov	r1, r5
 800e5ea:	4630      	mov	r0, r6
 800e5ec:	f7ff ff93 	bl	800e516 <__sfputs_r>
 800e5f0:	3001      	adds	r0, #1
 800e5f2:	f000 80aa 	beq.w	800e74a <_vfiprintf_r+0x20e>
 800e5f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5f8:	445a      	add	r2, fp
 800e5fa:	9209      	str	r2, [sp, #36]	; 0x24
 800e5fc:	f89a 3000 	ldrb.w	r3, [sl]
 800e600:	2b00      	cmp	r3, #0
 800e602:	f000 80a2 	beq.w	800e74a <_vfiprintf_r+0x20e>
 800e606:	2300      	movs	r3, #0
 800e608:	f04f 32ff 	mov.w	r2, #4294967295
 800e60c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e610:	f10a 0a01 	add.w	sl, sl, #1
 800e614:	9304      	str	r3, [sp, #16]
 800e616:	9307      	str	r3, [sp, #28]
 800e618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e61c:	931a      	str	r3, [sp, #104]	; 0x68
 800e61e:	4654      	mov	r4, sl
 800e620:	2205      	movs	r2, #5
 800e622:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e626:	4858      	ldr	r0, [pc, #352]	; (800e788 <_vfiprintf_r+0x24c>)
 800e628:	f7f1 fdd2 	bl	80001d0 <memchr>
 800e62c:	9a04      	ldr	r2, [sp, #16]
 800e62e:	b9d8      	cbnz	r0, 800e668 <_vfiprintf_r+0x12c>
 800e630:	06d1      	lsls	r1, r2, #27
 800e632:	bf44      	itt	mi
 800e634:	2320      	movmi	r3, #32
 800e636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e63a:	0713      	lsls	r3, r2, #28
 800e63c:	bf44      	itt	mi
 800e63e:	232b      	movmi	r3, #43	; 0x2b
 800e640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e644:	f89a 3000 	ldrb.w	r3, [sl]
 800e648:	2b2a      	cmp	r3, #42	; 0x2a
 800e64a:	d015      	beq.n	800e678 <_vfiprintf_r+0x13c>
 800e64c:	9a07      	ldr	r2, [sp, #28]
 800e64e:	4654      	mov	r4, sl
 800e650:	2000      	movs	r0, #0
 800e652:	f04f 0c0a 	mov.w	ip, #10
 800e656:	4621      	mov	r1, r4
 800e658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e65c:	3b30      	subs	r3, #48	; 0x30
 800e65e:	2b09      	cmp	r3, #9
 800e660:	d94e      	bls.n	800e700 <_vfiprintf_r+0x1c4>
 800e662:	b1b0      	cbz	r0, 800e692 <_vfiprintf_r+0x156>
 800e664:	9207      	str	r2, [sp, #28]
 800e666:	e014      	b.n	800e692 <_vfiprintf_r+0x156>
 800e668:	eba0 0308 	sub.w	r3, r0, r8
 800e66c:	fa09 f303 	lsl.w	r3, r9, r3
 800e670:	4313      	orrs	r3, r2
 800e672:	9304      	str	r3, [sp, #16]
 800e674:	46a2      	mov	sl, r4
 800e676:	e7d2      	b.n	800e61e <_vfiprintf_r+0xe2>
 800e678:	9b03      	ldr	r3, [sp, #12]
 800e67a:	1d19      	adds	r1, r3, #4
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	9103      	str	r1, [sp, #12]
 800e680:	2b00      	cmp	r3, #0
 800e682:	bfbb      	ittet	lt
 800e684:	425b      	neglt	r3, r3
 800e686:	f042 0202 	orrlt.w	r2, r2, #2
 800e68a:	9307      	strge	r3, [sp, #28]
 800e68c:	9307      	strlt	r3, [sp, #28]
 800e68e:	bfb8      	it	lt
 800e690:	9204      	strlt	r2, [sp, #16]
 800e692:	7823      	ldrb	r3, [r4, #0]
 800e694:	2b2e      	cmp	r3, #46	; 0x2e
 800e696:	d10c      	bne.n	800e6b2 <_vfiprintf_r+0x176>
 800e698:	7863      	ldrb	r3, [r4, #1]
 800e69a:	2b2a      	cmp	r3, #42	; 0x2a
 800e69c:	d135      	bne.n	800e70a <_vfiprintf_r+0x1ce>
 800e69e:	9b03      	ldr	r3, [sp, #12]
 800e6a0:	1d1a      	adds	r2, r3, #4
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	9203      	str	r2, [sp, #12]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	bfb8      	it	lt
 800e6aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6ae:	3402      	adds	r4, #2
 800e6b0:	9305      	str	r3, [sp, #20]
 800e6b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e798 <_vfiprintf_r+0x25c>
 800e6b6:	7821      	ldrb	r1, [r4, #0]
 800e6b8:	2203      	movs	r2, #3
 800e6ba:	4650      	mov	r0, sl
 800e6bc:	f7f1 fd88 	bl	80001d0 <memchr>
 800e6c0:	b140      	cbz	r0, 800e6d4 <_vfiprintf_r+0x198>
 800e6c2:	2340      	movs	r3, #64	; 0x40
 800e6c4:	eba0 000a 	sub.w	r0, r0, sl
 800e6c8:	fa03 f000 	lsl.w	r0, r3, r0
 800e6cc:	9b04      	ldr	r3, [sp, #16]
 800e6ce:	4303      	orrs	r3, r0
 800e6d0:	3401      	adds	r4, #1
 800e6d2:	9304      	str	r3, [sp, #16]
 800e6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6d8:	482c      	ldr	r0, [pc, #176]	; (800e78c <_vfiprintf_r+0x250>)
 800e6da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e6de:	2206      	movs	r2, #6
 800e6e0:	f7f1 fd76 	bl	80001d0 <memchr>
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	d03f      	beq.n	800e768 <_vfiprintf_r+0x22c>
 800e6e8:	4b29      	ldr	r3, [pc, #164]	; (800e790 <_vfiprintf_r+0x254>)
 800e6ea:	bb1b      	cbnz	r3, 800e734 <_vfiprintf_r+0x1f8>
 800e6ec:	9b03      	ldr	r3, [sp, #12]
 800e6ee:	3307      	adds	r3, #7
 800e6f0:	f023 0307 	bic.w	r3, r3, #7
 800e6f4:	3308      	adds	r3, #8
 800e6f6:	9303      	str	r3, [sp, #12]
 800e6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6fa:	443b      	add	r3, r7
 800e6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800e6fe:	e767      	b.n	800e5d0 <_vfiprintf_r+0x94>
 800e700:	fb0c 3202 	mla	r2, ip, r2, r3
 800e704:	460c      	mov	r4, r1
 800e706:	2001      	movs	r0, #1
 800e708:	e7a5      	b.n	800e656 <_vfiprintf_r+0x11a>
 800e70a:	2300      	movs	r3, #0
 800e70c:	3401      	adds	r4, #1
 800e70e:	9305      	str	r3, [sp, #20]
 800e710:	4619      	mov	r1, r3
 800e712:	f04f 0c0a 	mov.w	ip, #10
 800e716:	4620      	mov	r0, r4
 800e718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e71c:	3a30      	subs	r2, #48	; 0x30
 800e71e:	2a09      	cmp	r2, #9
 800e720:	d903      	bls.n	800e72a <_vfiprintf_r+0x1ee>
 800e722:	2b00      	cmp	r3, #0
 800e724:	d0c5      	beq.n	800e6b2 <_vfiprintf_r+0x176>
 800e726:	9105      	str	r1, [sp, #20]
 800e728:	e7c3      	b.n	800e6b2 <_vfiprintf_r+0x176>
 800e72a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e72e:	4604      	mov	r4, r0
 800e730:	2301      	movs	r3, #1
 800e732:	e7f0      	b.n	800e716 <_vfiprintf_r+0x1da>
 800e734:	ab03      	add	r3, sp, #12
 800e736:	9300      	str	r3, [sp, #0]
 800e738:	462a      	mov	r2, r5
 800e73a:	4b16      	ldr	r3, [pc, #88]	; (800e794 <_vfiprintf_r+0x258>)
 800e73c:	a904      	add	r1, sp, #16
 800e73e:	4630      	mov	r0, r6
 800e740:	f3af 8000 	nop.w
 800e744:	4607      	mov	r7, r0
 800e746:	1c78      	adds	r0, r7, #1
 800e748:	d1d6      	bne.n	800e6f8 <_vfiprintf_r+0x1bc>
 800e74a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e74c:	07d9      	lsls	r1, r3, #31
 800e74e:	d405      	bmi.n	800e75c <_vfiprintf_r+0x220>
 800e750:	89ab      	ldrh	r3, [r5, #12]
 800e752:	059a      	lsls	r2, r3, #22
 800e754:	d402      	bmi.n	800e75c <_vfiprintf_r+0x220>
 800e756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e758:	f7ff fc23 	bl	800dfa2 <__retarget_lock_release_recursive>
 800e75c:	89ab      	ldrh	r3, [r5, #12]
 800e75e:	065b      	lsls	r3, r3, #25
 800e760:	f53f af12 	bmi.w	800e588 <_vfiprintf_r+0x4c>
 800e764:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e766:	e711      	b.n	800e58c <_vfiprintf_r+0x50>
 800e768:	ab03      	add	r3, sp, #12
 800e76a:	9300      	str	r3, [sp, #0]
 800e76c:	462a      	mov	r2, r5
 800e76e:	4b09      	ldr	r3, [pc, #36]	; (800e794 <_vfiprintf_r+0x258>)
 800e770:	a904      	add	r1, sp, #16
 800e772:	4630      	mov	r0, r6
 800e774:	f000 f880 	bl	800e878 <_printf_i>
 800e778:	e7e4      	b.n	800e744 <_vfiprintf_r+0x208>
 800e77a:	bf00      	nop
 800e77c:	0801081c 	.word	0x0801081c
 800e780:	0801083c 	.word	0x0801083c
 800e784:	080107fc 	.word	0x080107fc
 800e788:	0801085c 	.word	0x0801085c
 800e78c:	08010866 	.word	0x08010866
 800e790:	00000000 	.word	0x00000000
 800e794:	0800e517 	.word	0x0800e517
 800e798:	08010862 	.word	0x08010862

0800e79c <_printf_common>:
 800e79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7a0:	4616      	mov	r6, r2
 800e7a2:	4699      	mov	r9, r3
 800e7a4:	688a      	ldr	r2, [r1, #8]
 800e7a6:	690b      	ldr	r3, [r1, #16]
 800e7a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	bfb8      	it	lt
 800e7b0:	4613      	movlt	r3, r2
 800e7b2:	6033      	str	r3, [r6, #0]
 800e7b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e7b8:	4607      	mov	r7, r0
 800e7ba:	460c      	mov	r4, r1
 800e7bc:	b10a      	cbz	r2, 800e7c2 <_printf_common+0x26>
 800e7be:	3301      	adds	r3, #1
 800e7c0:	6033      	str	r3, [r6, #0]
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	0699      	lsls	r1, r3, #26
 800e7c6:	bf42      	ittt	mi
 800e7c8:	6833      	ldrmi	r3, [r6, #0]
 800e7ca:	3302      	addmi	r3, #2
 800e7cc:	6033      	strmi	r3, [r6, #0]
 800e7ce:	6825      	ldr	r5, [r4, #0]
 800e7d0:	f015 0506 	ands.w	r5, r5, #6
 800e7d4:	d106      	bne.n	800e7e4 <_printf_common+0x48>
 800e7d6:	f104 0a19 	add.w	sl, r4, #25
 800e7da:	68e3      	ldr	r3, [r4, #12]
 800e7dc:	6832      	ldr	r2, [r6, #0]
 800e7de:	1a9b      	subs	r3, r3, r2
 800e7e0:	42ab      	cmp	r3, r5
 800e7e2:	dc26      	bgt.n	800e832 <_printf_common+0x96>
 800e7e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e7e8:	1e13      	subs	r3, r2, #0
 800e7ea:	6822      	ldr	r2, [r4, #0]
 800e7ec:	bf18      	it	ne
 800e7ee:	2301      	movne	r3, #1
 800e7f0:	0692      	lsls	r2, r2, #26
 800e7f2:	d42b      	bmi.n	800e84c <_printf_common+0xb0>
 800e7f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e7f8:	4649      	mov	r1, r9
 800e7fa:	4638      	mov	r0, r7
 800e7fc:	47c0      	blx	r8
 800e7fe:	3001      	adds	r0, #1
 800e800:	d01e      	beq.n	800e840 <_printf_common+0xa4>
 800e802:	6823      	ldr	r3, [r4, #0]
 800e804:	68e5      	ldr	r5, [r4, #12]
 800e806:	6832      	ldr	r2, [r6, #0]
 800e808:	f003 0306 	and.w	r3, r3, #6
 800e80c:	2b04      	cmp	r3, #4
 800e80e:	bf08      	it	eq
 800e810:	1aad      	subeq	r5, r5, r2
 800e812:	68a3      	ldr	r3, [r4, #8]
 800e814:	6922      	ldr	r2, [r4, #16]
 800e816:	bf0c      	ite	eq
 800e818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e81c:	2500      	movne	r5, #0
 800e81e:	4293      	cmp	r3, r2
 800e820:	bfc4      	itt	gt
 800e822:	1a9b      	subgt	r3, r3, r2
 800e824:	18ed      	addgt	r5, r5, r3
 800e826:	2600      	movs	r6, #0
 800e828:	341a      	adds	r4, #26
 800e82a:	42b5      	cmp	r5, r6
 800e82c:	d11a      	bne.n	800e864 <_printf_common+0xc8>
 800e82e:	2000      	movs	r0, #0
 800e830:	e008      	b.n	800e844 <_printf_common+0xa8>
 800e832:	2301      	movs	r3, #1
 800e834:	4652      	mov	r2, sl
 800e836:	4649      	mov	r1, r9
 800e838:	4638      	mov	r0, r7
 800e83a:	47c0      	blx	r8
 800e83c:	3001      	adds	r0, #1
 800e83e:	d103      	bne.n	800e848 <_printf_common+0xac>
 800e840:	f04f 30ff 	mov.w	r0, #4294967295
 800e844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e848:	3501      	adds	r5, #1
 800e84a:	e7c6      	b.n	800e7da <_printf_common+0x3e>
 800e84c:	18e1      	adds	r1, r4, r3
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	2030      	movs	r0, #48	; 0x30
 800e852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e856:	4422      	add	r2, r4
 800e858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e85c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e860:	3302      	adds	r3, #2
 800e862:	e7c7      	b.n	800e7f4 <_printf_common+0x58>
 800e864:	2301      	movs	r3, #1
 800e866:	4622      	mov	r2, r4
 800e868:	4649      	mov	r1, r9
 800e86a:	4638      	mov	r0, r7
 800e86c:	47c0      	blx	r8
 800e86e:	3001      	adds	r0, #1
 800e870:	d0e6      	beq.n	800e840 <_printf_common+0xa4>
 800e872:	3601      	adds	r6, #1
 800e874:	e7d9      	b.n	800e82a <_printf_common+0x8e>
	...

0800e878 <_printf_i>:
 800e878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e87c:	7e0f      	ldrb	r7, [r1, #24]
 800e87e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e880:	2f78      	cmp	r7, #120	; 0x78
 800e882:	4691      	mov	r9, r2
 800e884:	4680      	mov	r8, r0
 800e886:	460c      	mov	r4, r1
 800e888:	469a      	mov	sl, r3
 800e88a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e88e:	d807      	bhi.n	800e8a0 <_printf_i+0x28>
 800e890:	2f62      	cmp	r7, #98	; 0x62
 800e892:	d80a      	bhi.n	800e8aa <_printf_i+0x32>
 800e894:	2f00      	cmp	r7, #0
 800e896:	f000 80d8 	beq.w	800ea4a <_printf_i+0x1d2>
 800e89a:	2f58      	cmp	r7, #88	; 0x58
 800e89c:	f000 80a3 	beq.w	800e9e6 <_printf_i+0x16e>
 800e8a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e8a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e8a8:	e03a      	b.n	800e920 <_printf_i+0xa8>
 800e8aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e8ae:	2b15      	cmp	r3, #21
 800e8b0:	d8f6      	bhi.n	800e8a0 <_printf_i+0x28>
 800e8b2:	a101      	add	r1, pc, #4	; (adr r1, 800e8b8 <_printf_i+0x40>)
 800e8b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e8b8:	0800e911 	.word	0x0800e911
 800e8bc:	0800e925 	.word	0x0800e925
 800e8c0:	0800e8a1 	.word	0x0800e8a1
 800e8c4:	0800e8a1 	.word	0x0800e8a1
 800e8c8:	0800e8a1 	.word	0x0800e8a1
 800e8cc:	0800e8a1 	.word	0x0800e8a1
 800e8d0:	0800e925 	.word	0x0800e925
 800e8d4:	0800e8a1 	.word	0x0800e8a1
 800e8d8:	0800e8a1 	.word	0x0800e8a1
 800e8dc:	0800e8a1 	.word	0x0800e8a1
 800e8e0:	0800e8a1 	.word	0x0800e8a1
 800e8e4:	0800ea31 	.word	0x0800ea31
 800e8e8:	0800e955 	.word	0x0800e955
 800e8ec:	0800ea13 	.word	0x0800ea13
 800e8f0:	0800e8a1 	.word	0x0800e8a1
 800e8f4:	0800e8a1 	.word	0x0800e8a1
 800e8f8:	0800ea53 	.word	0x0800ea53
 800e8fc:	0800e8a1 	.word	0x0800e8a1
 800e900:	0800e955 	.word	0x0800e955
 800e904:	0800e8a1 	.word	0x0800e8a1
 800e908:	0800e8a1 	.word	0x0800e8a1
 800e90c:	0800ea1b 	.word	0x0800ea1b
 800e910:	682b      	ldr	r3, [r5, #0]
 800e912:	1d1a      	adds	r2, r3, #4
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	602a      	str	r2, [r5, #0]
 800e918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e91c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e920:	2301      	movs	r3, #1
 800e922:	e0a3      	b.n	800ea6c <_printf_i+0x1f4>
 800e924:	6820      	ldr	r0, [r4, #0]
 800e926:	6829      	ldr	r1, [r5, #0]
 800e928:	0606      	lsls	r6, r0, #24
 800e92a:	f101 0304 	add.w	r3, r1, #4
 800e92e:	d50a      	bpl.n	800e946 <_printf_i+0xce>
 800e930:	680e      	ldr	r6, [r1, #0]
 800e932:	602b      	str	r3, [r5, #0]
 800e934:	2e00      	cmp	r6, #0
 800e936:	da03      	bge.n	800e940 <_printf_i+0xc8>
 800e938:	232d      	movs	r3, #45	; 0x2d
 800e93a:	4276      	negs	r6, r6
 800e93c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e940:	485e      	ldr	r0, [pc, #376]	; (800eabc <_printf_i+0x244>)
 800e942:	230a      	movs	r3, #10
 800e944:	e019      	b.n	800e97a <_printf_i+0x102>
 800e946:	680e      	ldr	r6, [r1, #0]
 800e948:	602b      	str	r3, [r5, #0]
 800e94a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e94e:	bf18      	it	ne
 800e950:	b236      	sxthne	r6, r6
 800e952:	e7ef      	b.n	800e934 <_printf_i+0xbc>
 800e954:	682b      	ldr	r3, [r5, #0]
 800e956:	6820      	ldr	r0, [r4, #0]
 800e958:	1d19      	adds	r1, r3, #4
 800e95a:	6029      	str	r1, [r5, #0]
 800e95c:	0601      	lsls	r1, r0, #24
 800e95e:	d501      	bpl.n	800e964 <_printf_i+0xec>
 800e960:	681e      	ldr	r6, [r3, #0]
 800e962:	e002      	b.n	800e96a <_printf_i+0xf2>
 800e964:	0646      	lsls	r6, r0, #25
 800e966:	d5fb      	bpl.n	800e960 <_printf_i+0xe8>
 800e968:	881e      	ldrh	r6, [r3, #0]
 800e96a:	4854      	ldr	r0, [pc, #336]	; (800eabc <_printf_i+0x244>)
 800e96c:	2f6f      	cmp	r7, #111	; 0x6f
 800e96e:	bf0c      	ite	eq
 800e970:	2308      	moveq	r3, #8
 800e972:	230a      	movne	r3, #10
 800e974:	2100      	movs	r1, #0
 800e976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e97a:	6865      	ldr	r5, [r4, #4]
 800e97c:	60a5      	str	r5, [r4, #8]
 800e97e:	2d00      	cmp	r5, #0
 800e980:	bfa2      	ittt	ge
 800e982:	6821      	ldrge	r1, [r4, #0]
 800e984:	f021 0104 	bicge.w	r1, r1, #4
 800e988:	6021      	strge	r1, [r4, #0]
 800e98a:	b90e      	cbnz	r6, 800e990 <_printf_i+0x118>
 800e98c:	2d00      	cmp	r5, #0
 800e98e:	d04d      	beq.n	800ea2c <_printf_i+0x1b4>
 800e990:	4615      	mov	r5, r2
 800e992:	fbb6 f1f3 	udiv	r1, r6, r3
 800e996:	fb03 6711 	mls	r7, r3, r1, r6
 800e99a:	5dc7      	ldrb	r7, [r0, r7]
 800e99c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e9a0:	4637      	mov	r7, r6
 800e9a2:	42bb      	cmp	r3, r7
 800e9a4:	460e      	mov	r6, r1
 800e9a6:	d9f4      	bls.n	800e992 <_printf_i+0x11a>
 800e9a8:	2b08      	cmp	r3, #8
 800e9aa:	d10b      	bne.n	800e9c4 <_printf_i+0x14c>
 800e9ac:	6823      	ldr	r3, [r4, #0]
 800e9ae:	07de      	lsls	r6, r3, #31
 800e9b0:	d508      	bpl.n	800e9c4 <_printf_i+0x14c>
 800e9b2:	6923      	ldr	r3, [r4, #16]
 800e9b4:	6861      	ldr	r1, [r4, #4]
 800e9b6:	4299      	cmp	r1, r3
 800e9b8:	bfde      	ittt	le
 800e9ba:	2330      	movle	r3, #48	; 0x30
 800e9bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e9c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e9c4:	1b52      	subs	r2, r2, r5
 800e9c6:	6122      	str	r2, [r4, #16]
 800e9c8:	f8cd a000 	str.w	sl, [sp]
 800e9cc:	464b      	mov	r3, r9
 800e9ce:	aa03      	add	r2, sp, #12
 800e9d0:	4621      	mov	r1, r4
 800e9d2:	4640      	mov	r0, r8
 800e9d4:	f7ff fee2 	bl	800e79c <_printf_common>
 800e9d8:	3001      	adds	r0, #1
 800e9da:	d14c      	bne.n	800ea76 <_printf_i+0x1fe>
 800e9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800e9e0:	b004      	add	sp, #16
 800e9e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9e6:	4835      	ldr	r0, [pc, #212]	; (800eabc <_printf_i+0x244>)
 800e9e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e9ec:	6829      	ldr	r1, [r5, #0]
 800e9ee:	6823      	ldr	r3, [r4, #0]
 800e9f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e9f4:	6029      	str	r1, [r5, #0]
 800e9f6:	061d      	lsls	r5, r3, #24
 800e9f8:	d514      	bpl.n	800ea24 <_printf_i+0x1ac>
 800e9fa:	07df      	lsls	r7, r3, #31
 800e9fc:	bf44      	itt	mi
 800e9fe:	f043 0320 	orrmi.w	r3, r3, #32
 800ea02:	6023      	strmi	r3, [r4, #0]
 800ea04:	b91e      	cbnz	r6, 800ea0e <_printf_i+0x196>
 800ea06:	6823      	ldr	r3, [r4, #0]
 800ea08:	f023 0320 	bic.w	r3, r3, #32
 800ea0c:	6023      	str	r3, [r4, #0]
 800ea0e:	2310      	movs	r3, #16
 800ea10:	e7b0      	b.n	800e974 <_printf_i+0xfc>
 800ea12:	6823      	ldr	r3, [r4, #0]
 800ea14:	f043 0320 	orr.w	r3, r3, #32
 800ea18:	6023      	str	r3, [r4, #0]
 800ea1a:	2378      	movs	r3, #120	; 0x78
 800ea1c:	4828      	ldr	r0, [pc, #160]	; (800eac0 <_printf_i+0x248>)
 800ea1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea22:	e7e3      	b.n	800e9ec <_printf_i+0x174>
 800ea24:	0659      	lsls	r1, r3, #25
 800ea26:	bf48      	it	mi
 800ea28:	b2b6      	uxthmi	r6, r6
 800ea2a:	e7e6      	b.n	800e9fa <_printf_i+0x182>
 800ea2c:	4615      	mov	r5, r2
 800ea2e:	e7bb      	b.n	800e9a8 <_printf_i+0x130>
 800ea30:	682b      	ldr	r3, [r5, #0]
 800ea32:	6826      	ldr	r6, [r4, #0]
 800ea34:	6961      	ldr	r1, [r4, #20]
 800ea36:	1d18      	adds	r0, r3, #4
 800ea38:	6028      	str	r0, [r5, #0]
 800ea3a:	0635      	lsls	r5, r6, #24
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	d501      	bpl.n	800ea44 <_printf_i+0x1cc>
 800ea40:	6019      	str	r1, [r3, #0]
 800ea42:	e002      	b.n	800ea4a <_printf_i+0x1d2>
 800ea44:	0670      	lsls	r0, r6, #25
 800ea46:	d5fb      	bpl.n	800ea40 <_printf_i+0x1c8>
 800ea48:	8019      	strh	r1, [r3, #0]
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	6123      	str	r3, [r4, #16]
 800ea4e:	4615      	mov	r5, r2
 800ea50:	e7ba      	b.n	800e9c8 <_printf_i+0x150>
 800ea52:	682b      	ldr	r3, [r5, #0]
 800ea54:	1d1a      	adds	r2, r3, #4
 800ea56:	602a      	str	r2, [r5, #0]
 800ea58:	681d      	ldr	r5, [r3, #0]
 800ea5a:	6862      	ldr	r2, [r4, #4]
 800ea5c:	2100      	movs	r1, #0
 800ea5e:	4628      	mov	r0, r5
 800ea60:	f7f1 fbb6 	bl	80001d0 <memchr>
 800ea64:	b108      	cbz	r0, 800ea6a <_printf_i+0x1f2>
 800ea66:	1b40      	subs	r0, r0, r5
 800ea68:	6060      	str	r0, [r4, #4]
 800ea6a:	6863      	ldr	r3, [r4, #4]
 800ea6c:	6123      	str	r3, [r4, #16]
 800ea6e:	2300      	movs	r3, #0
 800ea70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea74:	e7a8      	b.n	800e9c8 <_printf_i+0x150>
 800ea76:	6923      	ldr	r3, [r4, #16]
 800ea78:	462a      	mov	r2, r5
 800ea7a:	4649      	mov	r1, r9
 800ea7c:	4640      	mov	r0, r8
 800ea7e:	47d0      	blx	sl
 800ea80:	3001      	adds	r0, #1
 800ea82:	d0ab      	beq.n	800e9dc <_printf_i+0x164>
 800ea84:	6823      	ldr	r3, [r4, #0]
 800ea86:	079b      	lsls	r3, r3, #30
 800ea88:	d413      	bmi.n	800eab2 <_printf_i+0x23a>
 800ea8a:	68e0      	ldr	r0, [r4, #12]
 800ea8c:	9b03      	ldr	r3, [sp, #12]
 800ea8e:	4298      	cmp	r0, r3
 800ea90:	bfb8      	it	lt
 800ea92:	4618      	movlt	r0, r3
 800ea94:	e7a4      	b.n	800e9e0 <_printf_i+0x168>
 800ea96:	2301      	movs	r3, #1
 800ea98:	4632      	mov	r2, r6
 800ea9a:	4649      	mov	r1, r9
 800ea9c:	4640      	mov	r0, r8
 800ea9e:	47d0      	blx	sl
 800eaa0:	3001      	adds	r0, #1
 800eaa2:	d09b      	beq.n	800e9dc <_printf_i+0x164>
 800eaa4:	3501      	adds	r5, #1
 800eaa6:	68e3      	ldr	r3, [r4, #12]
 800eaa8:	9903      	ldr	r1, [sp, #12]
 800eaaa:	1a5b      	subs	r3, r3, r1
 800eaac:	42ab      	cmp	r3, r5
 800eaae:	dcf2      	bgt.n	800ea96 <_printf_i+0x21e>
 800eab0:	e7eb      	b.n	800ea8a <_printf_i+0x212>
 800eab2:	2500      	movs	r5, #0
 800eab4:	f104 0619 	add.w	r6, r4, #25
 800eab8:	e7f5      	b.n	800eaa6 <_printf_i+0x22e>
 800eaba:	bf00      	nop
 800eabc:	0801086d 	.word	0x0801086d
 800eac0:	0801087e 	.word	0x0801087e

0800eac4 <_sbrk_r>:
 800eac4:	b538      	push	{r3, r4, r5, lr}
 800eac6:	4d06      	ldr	r5, [pc, #24]	; (800eae0 <_sbrk_r+0x1c>)
 800eac8:	2300      	movs	r3, #0
 800eaca:	4604      	mov	r4, r0
 800eacc:	4608      	mov	r0, r1
 800eace:	602b      	str	r3, [r5, #0]
 800ead0:	f7f4 fe76 	bl	80037c0 <_sbrk>
 800ead4:	1c43      	adds	r3, r0, #1
 800ead6:	d102      	bne.n	800eade <_sbrk_r+0x1a>
 800ead8:	682b      	ldr	r3, [r5, #0]
 800eada:	b103      	cbz	r3, 800eade <_sbrk_r+0x1a>
 800eadc:	6023      	str	r3, [r4, #0]
 800eade:	bd38      	pop	{r3, r4, r5, pc}
 800eae0:	20006128 	.word	0x20006128

0800eae4 <__sread>:
 800eae4:	b510      	push	{r4, lr}
 800eae6:	460c      	mov	r4, r1
 800eae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaec:	f000 f8ea 	bl	800ecc4 <_read_r>
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	bfab      	itete	ge
 800eaf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eaf6:	89a3      	ldrhlt	r3, [r4, #12]
 800eaf8:	181b      	addge	r3, r3, r0
 800eafa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eafe:	bfac      	ite	ge
 800eb00:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb02:	81a3      	strhlt	r3, [r4, #12]
 800eb04:	bd10      	pop	{r4, pc}

0800eb06 <__swrite>:
 800eb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0a:	461f      	mov	r7, r3
 800eb0c:	898b      	ldrh	r3, [r1, #12]
 800eb0e:	05db      	lsls	r3, r3, #23
 800eb10:	4605      	mov	r5, r0
 800eb12:	460c      	mov	r4, r1
 800eb14:	4616      	mov	r6, r2
 800eb16:	d505      	bpl.n	800eb24 <__swrite+0x1e>
 800eb18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb1c:	2302      	movs	r3, #2
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f000 f868 	bl	800ebf4 <_lseek_r>
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800eb2e:	81a3      	strh	r3, [r4, #12]
 800eb30:	4632      	mov	r2, r6
 800eb32:	463b      	mov	r3, r7
 800eb34:	4628      	mov	r0, r5
 800eb36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3a:	f000 b817 	b.w	800eb6c <_write_r>

0800eb3e <__sseek>:
 800eb3e:	b510      	push	{r4, lr}
 800eb40:	460c      	mov	r4, r1
 800eb42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb46:	f000 f855 	bl	800ebf4 <_lseek_r>
 800eb4a:	1c43      	adds	r3, r0, #1
 800eb4c:	89a3      	ldrh	r3, [r4, #12]
 800eb4e:	bf15      	itete	ne
 800eb50:	6560      	strne	r0, [r4, #84]	; 0x54
 800eb52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eb56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eb5a:	81a3      	strheq	r3, [r4, #12]
 800eb5c:	bf18      	it	ne
 800eb5e:	81a3      	strhne	r3, [r4, #12]
 800eb60:	bd10      	pop	{r4, pc}

0800eb62 <__sclose>:
 800eb62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb66:	f000 b813 	b.w	800eb90 <_close_r>
	...

0800eb6c <_write_r>:
 800eb6c:	b538      	push	{r3, r4, r5, lr}
 800eb6e:	4d07      	ldr	r5, [pc, #28]	; (800eb8c <_write_r+0x20>)
 800eb70:	4604      	mov	r4, r0
 800eb72:	4608      	mov	r0, r1
 800eb74:	4611      	mov	r1, r2
 800eb76:	2200      	movs	r2, #0
 800eb78:	602a      	str	r2, [r5, #0]
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	f7f2 fa92 	bl	80010a4 <_write>
 800eb80:	1c43      	adds	r3, r0, #1
 800eb82:	d102      	bne.n	800eb8a <_write_r+0x1e>
 800eb84:	682b      	ldr	r3, [r5, #0]
 800eb86:	b103      	cbz	r3, 800eb8a <_write_r+0x1e>
 800eb88:	6023      	str	r3, [r4, #0]
 800eb8a:	bd38      	pop	{r3, r4, r5, pc}
 800eb8c:	20006128 	.word	0x20006128

0800eb90 <_close_r>:
 800eb90:	b538      	push	{r3, r4, r5, lr}
 800eb92:	4d06      	ldr	r5, [pc, #24]	; (800ebac <_close_r+0x1c>)
 800eb94:	2300      	movs	r3, #0
 800eb96:	4604      	mov	r4, r0
 800eb98:	4608      	mov	r0, r1
 800eb9a:	602b      	str	r3, [r5, #0]
 800eb9c:	f7f4 fddb 	bl	8003756 <_close>
 800eba0:	1c43      	adds	r3, r0, #1
 800eba2:	d102      	bne.n	800ebaa <_close_r+0x1a>
 800eba4:	682b      	ldr	r3, [r5, #0]
 800eba6:	b103      	cbz	r3, 800ebaa <_close_r+0x1a>
 800eba8:	6023      	str	r3, [r4, #0]
 800ebaa:	bd38      	pop	{r3, r4, r5, pc}
 800ebac:	20006128 	.word	0x20006128

0800ebb0 <_fstat_r>:
 800ebb0:	b538      	push	{r3, r4, r5, lr}
 800ebb2:	4d07      	ldr	r5, [pc, #28]	; (800ebd0 <_fstat_r+0x20>)
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	4604      	mov	r4, r0
 800ebb8:	4608      	mov	r0, r1
 800ebba:	4611      	mov	r1, r2
 800ebbc:	602b      	str	r3, [r5, #0]
 800ebbe:	f7f4 fdd6 	bl	800376e <_fstat>
 800ebc2:	1c43      	adds	r3, r0, #1
 800ebc4:	d102      	bne.n	800ebcc <_fstat_r+0x1c>
 800ebc6:	682b      	ldr	r3, [r5, #0]
 800ebc8:	b103      	cbz	r3, 800ebcc <_fstat_r+0x1c>
 800ebca:	6023      	str	r3, [r4, #0]
 800ebcc:	bd38      	pop	{r3, r4, r5, pc}
 800ebce:	bf00      	nop
 800ebd0:	20006128 	.word	0x20006128

0800ebd4 <_isatty_r>:
 800ebd4:	b538      	push	{r3, r4, r5, lr}
 800ebd6:	4d06      	ldr	r5, [pc, #24]	; (800ebf0 <_isatty_r+0x1c>)
 800ebd8:	2300      	movs	r3, #0
 800ebda:	4604      	mov	r4, r0
 800ebdc:	4608      	mov	r0, r1
 800ebde:	602b      	str	r3, [r5, #0]
 800ebe0:	f7f4 fdd5 	bl	800378e <_isatty>
 800ebe4:	1c43      	adds	r3, r0, #1
 800ebe6:	d102      	bne.n	800ebee <_isatty_r+0x1a>
 800ebe8:	682b      	ldr	r3, [r5, #0]
 800ebea:	b103      	cbz	r3, 800ebee <_isatty_r+0x1a>
 800ebec:	6023      	str	r3, [r4, #0]
 800ebee:	bd38      	pop	{r3, r4, r5, pc}
 800ebf0:	20006128 	.word	0x20006128

0800ebf4 <_lseek_r>:
 800ebf4:	b538      	push	{r3, r4, r5, lr}
 800ebf6:	4d07      	ldr	r5, [pc, #28]	; (800ec14 <_lseek_r+0x20>)
 800ebf8:	4604      	mov	r4, r0
 800ebfa:	4608      	mov	r0, r1
 800ebfc:	4611      	mov	r1, r2
 800ebfe:	2200      	movs	r2, #0
 800ec00:	602a      	str	r2, [r5, #0]
 800ec02:	461a      	mov	r2, r3
 800ec04:	f7f4 fdce 	bl	80037a4 <_lseek>
 800ec08:	1c43      	adds	r3, r0, #1
 800ec0a:	d102      	bne.n	800ec12 <_lseek_r+0x1e>
 800ec0c:	682b      	ldr	r3, [r5, #0]
 800ec0e:	b103      	cbz	r3, 800ec12 <_lseek_r+0x1e>
 800ec10:	6023      	str	r3, [r4, #0]
 800ec12:	bd38      	pop	{r3, r4, r5, pc}
 800ec14:	20006128 	.word	0x20006128

0800ec18 <memmove>:
 800ec18:	4288      	cmp	r0, r1
 800ec1a:	b510      	push	{r4, lr}
 800ec1c:	eb01 0402 	add.w	r4, r1, r2
 800ec20:	d902      	bls.n	800ec28 <memmove+0x10>
 800ec22:	4284      	cmp	r4, r0
 800ec24:	4623      	mov	r3, r4
 800ec26:	d807      	bhi.n	800ec38 <memmove+0x20>
 800ec28:	1e43      	subs	r3, r0, #1
 800ec2a:	42a1      	cmp	r1, r4
 800ec2c:	d008      	beq.n	800ec40 <memmove+0x28>
 800ec2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ec32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ec36:	e7f8      	b.n	800ec2a <memmove+0x12>
 800ec38:	4402      	add	r2, r0
 800ec3a:	4601      	mov	r1, r0
 800ec3c:	428a      	cmp	r2, r1
 800ec3e:	d100      	bne.n	800ec42 <memmove+0x2a>
 800ec40:	bd10      	pop	{r4, pc}
 800ec42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ec46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ec4a:	e7f7      	b.n	800ec3c <memmove+0x24>

0800ec4c <__malloc_lock>:
 800ec4c:	4801      	ldr	r0, [pc, #4]	; (800ec54 <__malloc_lock+0x8>)
 800ec4e:	f7ff b9a7 	b.w	800dfa0 <__retarget_lock_acquire_recursive>
 800ec52:	bf00      	nop
 800ec54:	2000611c 	.word	0x2000611c

0800ec58 <__malloc_unlock>:
 800ec58:	4801      	ldr	r0, [pc, #4]	; (800ec60 <__malloc_unlock+0x8>)
 800ec5a:	f7ff b9a2 	b.w	800dfa2 <__retarget_lock_release_recursive>
 800ec5e:	bf00      	nop
 800ec60:	2000611c 	.word	0x2000611c

0800ec64 <_realloc_r>:
 800ec64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec68:	4680      	mov	r8, r0
 800ec6a:	4614      	mov	r4, r2
 800ec6c:	460e      	mov	r6, r1
 800ec6e:	b921      	cbnz	r1, 800ec7a <_realloc_r+0x16>
 800ec70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec74:	4611      	mov	r1, r2
 800ec76:	f7ff ba67 	b.w	800e148 <_malloc_r>
 800ec7a:	b92a      	cbnz	r2, 800ec88 <_realloc_r+0x24>
 800ec7c:	f7ff f9f8 	bl	800e070 <_free_r>
 800ec80:	4625      	mov	r5, r4
 800ec82:	4628      	mov	r0, r5
 800ec84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec88:	f000 f82e 	bl	800ece8 <_malloc_usable_size_r>
 800ec8c:	4284      	cmp	r4, r0
 800ec8e:	4607      	mov	r7, r0
 800ec90:	d802      	bhi.n	800ec98 <_realloc_r+0x34>
 800ec92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ec96:	d812      	bhi.n	800ecbe <_realloc_r+0x5a>
 800ec98:	4621      	mov	r1, r4
 800ec9a:	4640      	mov	r0, r8
 800ec9c:	f7ff fa54 	bl	800e148 <_malloc_r>
 800eca0:	4605      	mov	r5, r0
 800eca2:	2800      	cmp	r0, #0
 800eca4:	d0ed      	beq.n	800ec82 <_realloc_r+0x1e>
 800eca6:	42bc      	cmp	r4, r7
 800eca8:	4622      	mov	r2, r4
 800ecaa:	4631      	mov	r1, r6
 800ecac:	bf28      	it	cs
 800ecae:	463a      	movcs	r2, r7
 800ecb0:	f7fe fe3a 	bl	800d928 <memcpy>
 800ecb4:	4631      	mov	r1, r6
 800ecb6:	4640      	mov	r0, r8
 800ecb8:	f7ff f9da 	bl	800e070 <_free_r>
 800ecbc:	e7e1      	b.n	800ec82 <_realloc_r+0x1e>
 800ecbe:	4635      	mov	r5, r6
 800ecc0:	e7df      	b.n	800ec82 <_realloc_r+0x1e>
	...

0800ecc4 <_read_r>:
 800ecc4:	b538      	push	{r3, r4, r5, lr}
 800ecc6:	4d07      	ldr	r5, [pc, #28]	; (800ece4 <_read_r+0x20>)
 800ecc8:	4604      	mov	r4, r0
 800ecca:	4608      	mov	r0, r1
 800eccc:	4611      	mov	r1, r2
 800ecce:	2200      	movs	r2, #0
 800ecd0:	602a      	str	r2, [r5, #0]
 800ecd2:	461a      	mov	r2, r3
 800ecd4:	f7f4 fd22 	bl	800371c <_read>
 800ecd8:	1c43      	adds	r3, r0, #1
 800ecda:	d102      	bne.n	800ece2 <_read_r+0x1e>
 800ecdc:	682b      	ldr	r3, [r5, #0]
 800ecde:	b103      	cbz	r3, 800ece2 <_read_r+0x1e>
 800ece0:	6023      	str	r3, [r4, #0]
 800ece2:	bd38      	pop	{r3, r4, r5, pc}
 800ece4:	20006128 	.word	0x20006128

0800ece8 <_malloc_usable_size_r>:
 800ece8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ecec:	1f18      	subs	r0, r3, #4
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	bfbc      	itt	lt
 800ecf2:	580b      	ldrlt	r3, [r1, r0]
 800ecf4:	18c0      	addlt	r0, r0, r3
 800ecf6:	4770      	bx	lr

0800ecf8 <_init>:
 800ecf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecfa:	bf00      	nop
 800ecfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ecfe:	bc08      	pop	{r3}
 800ed00:	469e      	mov	lr, r3
 800ed02:	4770      	bx	lr

0800ed04 <_fini>:
 800ed04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed06:	bf00      	nop
 800ed08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed0a:	bc08      	pop	{r3}
 800ed0c:	469e      	mov	lr, r3
 800ed0e:	4770      	bx	lr
